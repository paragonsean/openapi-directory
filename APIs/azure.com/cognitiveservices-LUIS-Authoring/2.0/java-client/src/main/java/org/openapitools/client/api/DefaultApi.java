/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppVersionSettingObject;
import org.openapitools.client.model.ApplicationCreateObject;
import org.openapitools.client.model.ApplicationInfoResponse;
import org.openapitools.client.model.ApplicationPublishObject;
import org.openapitools.client.model.ApplicationSettingUpdateObject;
import org.openapitools.client.model.ApplicationSettings;
import org.openapitools.client.model.ApplicationUpdateObject;
import org.openapitools.client.model.AvailableCulture;
import org.openapitools.client.model.AvailablePrebuiltEntityModel;
import org.openapitools.client.model.AzureAccountInfoObject;
import org.openapitools.client.model.BatchLabelExample;
import org.openapitools.client.model.ClosedListEntityExtractor;
import org.openapitools.client.model.ClosedListModelCreateObject;
import org.openapitools.client.model.ClosedListModelPatchObject;
import org.openapitools.client.model.ClosedListModelUpdateObject;
import org.openapitools.client.model.CollaboratorsArray;
import org.openapitools.client.model.CompositeEntityExtractor;
import org.openapitools.client.model.CompositeEntityModel;
import org.openapitools.client.model.CustomPrebuiltModel;
import org.openapitools.client.model.EnqueueTrainingResponse;
import org.openapitools.client.model.EntitiesSuggestionExample;
import org.openapitools.client.model.EntityExtractor;
import org.openapitools.client.model.EntityRole;
import org.openapitools.client.model.EntityRoleCreateObject;
import org.openapitools.client.model.EntityRoleUpdateObject;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ExampleLabelObject;
import org.openapitools.client.model.ExplicitListItem;
import org.openapitools.client.model.ExplicitListItemCreateObject;
import org.openapitools.client.model.ExplicitListItemUpdateObject;
import org.openapitools.client.model.FeaturesResponseObject;
import java.io.File;
import org.openapitools.client.model.HierarchicalChildEntity;
import org.openapitools.client.model.HierarchicalEntityExtractor;
import org.openapitools.client.model.HierarchicalEntityModel;
import org.openapitools.client.model.IntentClassifier;
import org.openapitools.client.model.IntentsSuggestionExample;
import org.openapitools.client.model.LabelExampleResponse;
import org.openapitools.client.model.LabelTextObject;
import org.openapitools.client.model.LabeledUtterance;
import org.openapitools.client.model.LuisApp;
import org.openapitools.client.model.ModelAddCompositeEntityChildRequest;
import org.openapitools.client.model.ModelCreateObject;
import org.openapitools.client.model.ModelInfoResponse;
import org.openapitools.client.model.ModelTrainingInfo;
import org.openapitools.client.model.ModelUpdateObject;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.PatternAnyEntityExtractor;
import org.openapitools.client.model.PatternAnyModelCreateObject;
import org.openapitools.client.model.PatternAnyModelUpdateObject;
import org.openapitools.client.model.PatternCreateObject;
import org.openapitools.client.model.PatternFeatureInfo;
import org.openapitools.client.model.PatternRuleCreateObject;
import org.openapitools.client.model.PatternRuleInfo;
import org.openapitools.client.model.PatternRuleUpdateObject;
import org.openapitools.client.model.PatternUpdateObject;
import org.openapitools.client.model.PersonalAssistantsResponse;
import org.openapitools.client.model.PhraseListFeatureInfo;
import org.openapitools.client.model.PhraselistCreateObject;
import org.openapitools.client.model.PhraselistUpdateObject;
import org.openapitools.client.model.PrebuiltDomain;
import org.openapitools.client.model.PrebuiltDomainCreateBaseObject;
import org.openapitools.client.model.PrebuiltDomainCreateObject;
import org.openapitools.client.model.PrebuiltDomainModelCreateObject;
import org.openapitools.client.model.PrebuiltEntityExtractor;
import org.openapitools.client.model.ProductionOrStagingEndpointInfo;
import org.openapitools.client.model.PublishSettingUpdateObject;
import org.openapitools.client.model.PublishSettings;
import org.openapitools.client.model.RegexEntityExtractor;
import org.openapitools.client.model.RegexModelCreateObject;
import org.openapitools.client.model.RegexModelUpdateObject;
import org.openapitools.client.model.TaskUpdateObject;
import java.util.UUID;
import org.openapitools.client.model.UserAccessList;
import org.openapitools.client.model.UserCollaborator;
import org.openapitools.client.model.VersionInfo;
import org.openapitools.client.model.WordListBaseUpdateObject;
import org.openapitools.client.model.WordListObject;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appsAdd
     * @param applicationCreateObject An application containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is \&quot;0.1\&quot;. Note: the culture cannot be changed after the app is created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAddCall(ApplicationCreateObject applicationCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationCreateObject;

        // create path and map variables
        String localVarPath = "/apps/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAddValidateBeforeCall(ApplicationCreateObject applicationCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationCreateObject' is set
        if (applicationCreateObject == null) {
            throw new ApiException("Missing the required parameter 'applicationCreateObject' when calling appsAdd(Async)");
        }

        return appsAddCall(applicationCreateObject, _callback);

    }

    /**
     * 
     * Creates a new LUIS app.
     * @param applicationCreateObject An application containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is \&quot;0.1\&quot;. Note: the culture cannot be changed after the app is created. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID appsAdd(ApplicationCreateObject applicationCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = appsAddWithHttpInfo(applicationCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new LUIS app.
     * @param applicationCreateObject An application containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is \&quot;0.1\&quot;. Note: the culture cannot be changed after the app is created. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> appsAddWithHttpInfo(ApplicationCreateObject applicationCreateObject) throws ApiException {
        okhttp3.Call localVarCall = appsAddValidateBeforeCall(applicationCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new LUIS app.
     * @param applicationCreateObject An application containing Name, Description (optional), Culture, Usage Scenario (optional), Domain (optional) and initial version ID (optional) of the application. Default value for the version ID is \&quot;0.1\&quot;. Note: the culture cannot be changed after the app is created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAddAsync(ApplicationCreateObject applicationCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAddValidateBeforeCall(applicationCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsAddCustomPrebuiltDomain
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAddCustomPrebuiltDomainCall(PrebuiltDomainCreateObject prebuiltDomainCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prebuiltDomainCreateObject;

        // create path and map variables
        String localVarPath = "/apps/customprebuiltdomains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsAddCustomPrebuiltDomainValidateBeforeCall(PrebuiltDomainCreateObject prebuiltDomainCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'prebuiltDomainCreateObject' is set
        if (prebuiltDomainCreateObject == null) {
            throw new ApiException("Missing the required parameter 'prebuiltDomainCreateObject' when calling appsAddCustomPrebuiltDomain(Async)");
        }

        return appsAddCustomPrebuiltDomainCall(prebuiltDomainCreateObject, _callback);

    }

    /**
     * 
     * Adds a prebuilt domain along with its intent and entity models as a new application.
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID appsAddCustomPrebuiltDomain(PrebuiltDomainCreateObject prebuiltDomainCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = appsAddCustomPrebuiltDomainWithHttpInfo(prebuiltDomainCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a prebuilt domain along with its intent and entity models as a new application.
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> appsAddCustomPrebuiltDomainWithHttpInfo(PrebuiltDomainCreateObject prebuiltDomainCreateObject) throws ApiException {
        okhttp3.Call localVarCall = appsAddCustomPrebuiltDomainValidateBeforeCall(prebuiltDomainCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a prebuilt domain along with its intent and entity models as a new application.
     * @param prebuiltDomainCreateObject A prebuilt domain create object containing the name and culture of the domain. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsAddCustomPrebuiltDomainAsync(PrebuiltDomainCreateObject prebuiltDomainCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsAddCustomPrebuiltDomainValidateBeforeCall(prebuiltDomainCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsDelete
     * @param appId The application ID. (required)
     * @param force A flag to indicate whether to force an operation. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsDeleteCall(UUID appId, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsDeleteValidateBeforeCall(UUID appId, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsDelete(Async)");
        }

        return appsDeleteCall(appId, force, _callback);

    }

    /**
     * 
     * Deletes an application.
     * @param appId The application ID. (required)
     * @param force A flag to indicate whether to force an operation. (optional, default to false)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus appsDelete(UUID appId, Boolean force) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = appsDeleteWithHttpInfo(appId, force);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an application.
     * @param appId The application ID. (required)
     * @param force A flag to indicate whether to force an operation. (optional, default to false)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> appsDeleteWithHttpInfo(UUID appId, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = appsDeleteValidateBeforeCall(appId, force, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an application.
     * @param appId The application ID. (required)
     * @param force A flag to indicate whether to force an operation. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsDeleteAsync(UUID appId, Boolean force, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsDeleteValidateBeforeCall(appId, force, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsDownloadQueryLogs
     * @param appId The application ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A CSV file containing the query logs for the past month. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsDownloadQueryLogsCall(UUID appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/querylogs"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsDownloadQueryLogsValidateBeforeCall(UUID appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsDownloadQueryLogs(Async)");
        }

        return appsDownloadQueryLogsCall(appId, _callback);

    }

    /**
     * 
     * Gets the logs of the past month&#39;s endpoint queries for the application.
     * @param appId The application ID. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A CSV file containing the query logs for the past month. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public Object appsDownloadQueryLogs(UUID appId) throws ApiException {
        ApiResponse<Object> localVarResp = appsDownloadQueryLogsWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the logs of the past month&#39;s endpoint queries for the application.
     * @param appId The application ID. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A CSV file containing the query logs for the past month. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> appsDownloadQueryLogsWithHttpInfo(UUID appId) throws ApiException {
        okhttp3.Call localVarCall = appsDownloadQueryLogsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the logs of the past month&#39;s endpoint queries for the application.
     * @param appId The application ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A CSV file containing the query logs for the past month. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsDownloadQueryLogsAsync(UUID appId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsDownloadQueryLogsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsGet
     * @param appId The application ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetCall(UUID appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGetValidateBeforeCall(UUID appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsGet(Async)");
        }

        return appsGetCall(appId, _callback);

    }

    /**
     * 
     * Gets the application info.
     * @param appId The application ID. (required)
     * @return ApplicationInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationInfoResponse appsGet(UUID appId) throws ApiException {
        ApiResponse<ApplicationInfoResponse> localVarResp = appsGetWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the application info.
     * @param appId The application ID. (required)
     * @return ApiResponse&lt;ApplicationInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationInfoResponse> appsGetWithHttpInfo(UUID appId) throws ApiException {
        okhttp3.Call localVarCall = appsGetValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<ApplicationInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the application info.
     * @param appId The application ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetAsync(UUID appId, final ApiCallback<ApplicationInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGetValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<ApplicationInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsGetPublishSettings
     * @param appId The application ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application publish settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetPublishSettingsCall(UUID appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/publishsettings"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGetPublishSettingsValidateBeforeCall(UUID appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsGetPublishSettings(Async)");
        }

        return appsGetPublishSettingsCall(appId, _callback);

    }

    /**
     * 
     * Get the application publish settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @return PublishSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application publish settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public PublishSettings appsGetPublishSettings(UUID appId) throws ApiException {
        ApiResponse<PublishSettings> localVarResp = appsGetPublishSettingsWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the application publish settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @return ApiResponse&lt;PublishSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application publish settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishSettings> appsGetPublishSettingsWithHttpInfo(UUID appId) throws ApiException {
        okhttp3.Call localVarCall = appsGetPublishSettingsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<PublishSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the application publish settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application publish settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetPublishSettingsAsync(UUID appId, final ApiCallback<PublishSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGetPublishSettingsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<PublishSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsGetSettings
     * @param appId The application ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetSettingsCall(UUID appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/settings"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsGetSettingsValidateBeforeCall(UUID appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsGetSettings(Async)");
        }

        return appsGetSettingsCall(appId, _callback);

    }

    /**
     * 
     * Get the application settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @return ApplicationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationSettings appsGetSettings(UUID appId) throws ApiException {
        ApiResponse<ApplicationSettings> localVarResp = appsGetSettingsWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the application settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @return ApiResponse&lt;ApplicationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationSettings> appsGetSettingsWithHttpInfo(UUID appId) throws ApiException {
        okhttp3.Call localVarCall = appsGetSettingsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<ApplicationSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the application settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsGetSettingsAsync(UUID appId, final ApiCallback<ApplicationSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsGetSettingsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<ApplicationSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsImport
     * @param luisApp A LUIS application structure. (required)
     * @param appName The application name to create. If not specified, the application name will be read from the imported object. If the application name already exists, an error is returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the imported application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsImportCall(LuisApp luisApp, String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = luisApp;

        // create path and map variables
        String localVarPath = "/apps/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appName", appName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsImportValidateBeforeCall(LuisApp luisApp, String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'luisApp' is set
        if (luisApp == null) {
            throw new ApiException("Missing the required parameter 'luisApp' when calling appsImport(Async)");
        }

        return appsImportCall(luisApp, appName, _callback);

    }

    /**
     * 
     * Imports an application to LUIS, the application&#39;s structure is included in the request body.
     * @param luisApp A LUIS application structure. (required)
     * @param appName The application name to create. If not specified, the application name will be read from the imported object. If the application name already exists, an error is returned. (optional)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the imported application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID appsImport(LuisApp luisApp, String appName) throws ApiException {
        ApiResponse<UUID> localVarResp = appsImportWithHttpInfo(luisApp, appName);
        return localVarResp.getData();
    }

    /**
     * 
     * Imports an application to LUIS, the application&#39;s structure is included in the request body.
     * @param luisApp A LUIS application structure. (required)
     * @param appName The application name to create. If not specified, the application name will be read from the imported object. If the application name already exists, an error is returned. (optional)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the imported application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> appsImportWithHttpInfo(LuisApp luisApp, String appName) throws ApiException {
        okhttp3.Call localVarCall = appsImportValidateBeforeCall(luisApp, appName, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Imports an application to LUIS, the application&#39;s structure is included in the request body.
     * @param luisApp A LUIS application structure. (required)
     * @param appName The application name to create. If not specified, the application name will be read from the imported object. If the application name already exists, an error is returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the imported application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsImportAsync(LuisApp luisApp, String appName, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsImportValidateBeforeCall(luisApp, appName, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsList
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the user applications. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListCall(Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListValidateBeforeCall(Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        return appsListCall(skip, take, _callback);

    }

    /**
     * 
     * Lists all of the user&#39;s applications.
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;ApplicationInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the user applications. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ApplicationInfoResponse> appsList(Integer skip, Integer take) throws ApiException {
        ApiResponse<List<ApplicationInfoResponse>> localVarResp = appsListWithHttpInfo(skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the user&#39;s applications.
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;ApplicationInfoResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the user applications. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApplicationInfoResponse>> appsListWithHttpInfo(Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = appsListValidateBeforeCall(skip, take, null);
        Type localVarReturnType = new TypeToken<List<ApplicationInfoResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the user&#39;s applications.
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the user applications. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListAsync(Integer skip, Integer take, final ApiCallback<List<ApplicationInfoResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListValidateBeforeCall(skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicationInfoResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsListAvailableCustomPrebuiltDomains
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all custom prebuilt domains and their intents/entities representation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListAvailableCustomPrebuiltDomainsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/customprebuiltdomains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListAvailableCustomPrebuiltDomainsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return appsListAvailableCustomPrebuiltDomainsCall(_callback);

    }

    /**
     * 
     * Gets all the available custom prebuilt domains for all cultures.
     * @return List&lt;PrebuiltDomain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all custom prebuilt domains and their intents/entities representation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PrebuiltDomain> appsListAvailableCustomPrebuiltDomains() throws ApiException {
        ApiResponse<List<PrebuiltDomain>> localVarResp = appsListAvailableCustomPrebuiltDomainsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the available custom prebuilt domains for all cultures.
     * @return ApiResponse&lt;List&lt;PrebuiltDomain&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all custom prebuilt domains and their intents/entities representation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PrebuiltDomain>> appsListAvailableCustomPrebuiltDomainsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = appsListAvailableCustomPrebuiltDomainsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PrebuiltDomain>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the available custom prebuilt domains for all cultures.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all custom prebuilt domains and their intents/entities representation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListAvailableCustomPrebuiltDomainsAsync(final ApiCallback<List<PrebuiltDomain>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListAvailableCustomPrebuiltDomainsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PrebuiltDomain>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsListAvailableCustomPrebuiltDomainsForCulture
     * @param culture Culture. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all domains and their intents and entities for a specific culture. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListAvailableCustomPrebuiltDomainsForCultureCall(String culture, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/customprebuiltdomains/{culture}"
            .replace("{" + "culture" + "}", localVarApiClient.escapeString(culture.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListAvailableCustomPrebuiltDomainsForCultureValidateBeforeCall(String culture, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'culture' is set
        if (culture == null) {
            throw new ApiException("Missing the required parameter 'culture' when calling appsListAvailableCustomPrebuiltDomainsForCulture(Async)");
        }

        return appsListAvailableCustomPrebuiltDomainsForCultureCall(culture, _callback);

    }

    /**
     * 
     * Gets all the available prebuilt domains for a specific culture.
     * @param culture Culture. (required)
     * @return List&lt;PrebuiltDomain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all domains and their intents and entities for a specific culture. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PrebuiltDomain> appsListAvailableCustomPrebuiltDomainsForCulture(String culture) throws ApiException {
        ApiResponse<List<PrebuiltDomain>> localVarResp = appsListAvailableCustomPrebuiltDomainsForCultureWithHttpInfo(culture);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the available prebuilt domains for a specific culture.
     * @param culture Culture. (required)
     * @return ApiResponse&lt;List&lt;PrebuiltDomain&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all domains and their intents and entities for a specific culture. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PrebuiltDomain>> appsListAvailableCustomPrebuiltDomainsForCultureWithHttpInfo(String culture) throws ApiException {
        okhttp3.Call localVarCall = appsListAvailableCustomPrebuiltDomainsForCultureValidateBeforeCall(culture, null);
        Type localVarReturnType = new TypeToken<List<PrebuiltDomain>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the available prebuilt domains for a specific culture.
     * @param culture Culture. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all domains and their intents and entities for a specific culture. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListAvailableCustomPrebuiltDomainsForCultureAsync(String culture, final ApiCallback<List<PrebuiltDomain>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListAvailableCustomPrebuiltDomainsForCultureValidateBeforeCall(culture, _callback);
        Type localVarReturnType = new TypeToken<List<PrebuiltDomain>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsListCortanaEndpoints
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A personal assistant apps JSON object containing the endpoint URLs for Cortana applications and the user&#39;s endpoint keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListCortanaEndpointsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/assistants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListCortanaEndpointsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return appsListCortanaEndpointsCall(_callback);

    }

    /**
     * 
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     * @return PersonalAssistantsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A personal assistant apps JSON object containing the endpoint URLs for Cortana applications and the user&#39;s endpoint keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public PersonalAssistantsResponse appsListCortanaEndpoints() throws ApiException {
        ApiResponse<PersonalAssistantsResponse> localVarResp = appsListCortanaEndpointsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     * @return ApiResponse&lt;PersonalAssistantsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A personal assistant apps JSON object containing the endpoint URLs for Cortana applications and the user&#39;s endpoint keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalAssistantsResponse> appsListCortanaEndpointsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = appsListCortanaEndpointsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PersonalAssistantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the endpoint URLs for the prebuilt Cortana applications.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A personal assistant apps JSON object containing the endpoint URLs for Cortana applications and the user&#39;s endpoint keys. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListCortanaEndpointsAsync(final ApiCallback<PersonalAssistantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListCortanaEndpointsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PersonalAssistantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsListDomains
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the available application domains. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListDomainsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListDomainsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return appsListDomainsCall(_callback);

    }

    /**
     * 
     * Gets the available application domains.
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the available application domains. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> appsListDomains() throws ApiException {
        ApiResponse<List<String>> localVarResp = appsListDomainsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the available application domains.
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the available application domains. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> appsListDomainsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = appsListDomainsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the available application domains.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the available application domains. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListDomainsAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListDomainsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsListEndpoints
     * @param appId The application ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of endpoints regions and their corresponding endpoint URL. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListEndpointsCall(UUID appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/endpoints"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListEndpointsValidateBeforeCall(UUID appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsListEndpoints(Async)");
        }

        return appsListEndpointsCall(appId, _callback);

    }

    /**
     * 
     * Returns the available endpoint deployment regions and URLs.
     * @param appId The application ID. (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of endpoints regions and their corresponding endpoint URL. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> appsListEndpoints(UUID appId) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = appsListEndpointsWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the available endpoint deployment regions and URLs.
     * @param appId The application ID. (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of endpoints regions and their corresponding endpoint URL. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> appsListEndpointsWithHttpInfo(UUID appId) throws ApiException {
        okhttp3.Call localVarCall = appsListEndpointsValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the available endpoint deployment regions and URLs.
     * @param appId The application ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of endpoints regions and their corresponding endpoint URL. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListEndpointsAsync(UUID appId, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListEndpointsValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsListSupportedCultures
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the supported application cultures. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListSupportedCulturesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/cultures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListSupportedCulturesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return appsListSupportedCulturesCall(_callback);

    }

    /**
     * 
     * Gets a list of supported cultures. Cultures are equivalent to the written language and locale. For example,\&quot;en-us\&quot; represents the U.S. variation of English.
     * @return List&lt;AvailableCulture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the supported application cultures. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<AvailableCulture> appsListSupportedCultures() throws ApiException {
        ApiResponse<List<AvailableCulture>> localVarResp = appsListSupportedCulturesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of supported cultures. Cultures are equivalent to the written language and locale. For example,\&quot;en-us\&quot; represents the U.S. variation of English.
     * @return ApiResponse&lt;List&lt;AvailableCulture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the supported application cultures. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AvailableCulture>> appsListSupportedCulturesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = appsListSupportedCulturesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AvailableCulture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of supported cultures. Cultures are equivalent to the written language and locale. For example,\&quot;en-us\&quot; represents the U.S. variation of English.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the supported application cultures. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListSupportedCulturesAsync(final ApiCallback<List<AvailableCulture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListSupportedCulturesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AvailableCulture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsListUsageScenarios
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the available application usage scenarios. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListUsageScenariosCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/usagescenarios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsListUsageScenariosValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return appsListUsageScenariosCall(_callback);

    }

    /**
     * 
     * Gets the application available usage scenarios.
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the available application usage scenarios. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> appsListUsageScenarios() throws ApiException {
        ApiResponse<List<String>> localVarResp = appsListUsageScenariosWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the application available usage scenarios.
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the available application usage scenarios. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> appsListUsageScenariosWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = appsListUsageScenariosValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the application available usage scenarios.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list object containing the available application usage scenarios. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsListUsageScenariosAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsListUsageScenariosValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsPackagePublishedApplicationAsGzip
     * @param appId The application ID. (required)
     * @param slotName The publishing slot name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The GZip binary stream of the published application package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPackagePublishedApplicationAsGzipCall(UUID appId, String slotName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/package/{appId}/slot/{slotName}/gzip"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "slotName" + "}", localVarApiClient.escapeString(slotName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPackagePublishedApplicationAsGzipValidateBeforeCall(UUID appId, String slotName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsPackagePublishedApplicationAsGzip(Async)");
        }

        // verify the required parameter 'slotName' is set
        if (slotName == null) {
            throw new ApiException("Missing the required parameter 'slotName' when calling appsPackagePublishedApplicationAsGzip(Async)");
        }

        return appsPackagePublishedApplicationAsGzipCall(appId, slotName, _callback);

    }

    /**
     * package - Gets published LUIS application package in binary stream GZip format
     * Packages a published LUIS application as a GZip file to be used in the LUIS container.
     * @param appId The application ID. (required)
     * @param slotName The publishing slot name. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The GZip binary stream of the published application package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public File appsPackagePublishedApplicationAsGzip(UUID appId, String slotName) throws ApiException {
        ApiResponse<File> localVarResp = appsPackagePublishedApplicationAsGzipWithHttpInfo(appId, slotName);
        return localVarResp.getData();
    }

    /**
     * package - Gets published LUIS application package in binary stream GZip format
     * Packages a published LUIS application as a GZip file to be used in the LUIS container.
     * @param appId The application ID. (required)
     * @param slotName The publishing slot name. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The GZip binary stream of the published application package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> appsPackagePublishedApplicationAsGzipWithHttpInfo(UUID appId, String slotName) throws ApiException {
        okhttp3.Call localVarCall = appsPackagePublishedApplicationAsGzipValidateBeforeCall(appId, slotName, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * package - Gets published LUIS application package in binary stream GZip format (asynchronously)
     * Packages a published LUIS application as a GZip file to be used in the LUIS container.
     * @param appId The application ID. (required)
     * @param slotName The publishing slot name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The GZip binary stream of the published application package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPackagePublishedApplicationAsGzipAsync(UUID appId, String slotName, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPackagePublishedApplicationAsGzipValidateBeforeCall(appId, slotName, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsPackageTrainedApplicationAsGzip
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The GZip binary stream of the trained application package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPackageTrainedApplicationAsGzipCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/package/{appId}/versions/{versionId}/gzip"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPackageTrainedApplicationAsGzipValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsPackageTrainedApplicationAsGzip(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling appsPackageTrainedApplicationAsGzip(Async)");
        }

        return appsPackageTrainedApplicationAsGzipCall(appId, versionId, _callback);

    }

    /**
     * package - Gets trained LUIS application package in binary stream GZip format
     * Packages trained LUIS application as GZip file to be used in the LUIS container.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The GZip binary stream of the trained application package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public File appsPackageTrainedApplicationAsGzip(UUID appId, String versionId) throws ApiException {
        ApiResponse<File> localVarResp = appsPackageTrainedApplicationAsGzipWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * package - Gets trained LUIS application package in binary stream GZip format
     * Packages trained LUIS application as GZip file to be used in the LUIS container.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The GZip binary stream of the trained application package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> appsPackageTrainedApplicationAsGzipWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = appsPackageTrainedApplicationAsGzipValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * package - Gets trained LUIS application package in binary stream GZip format (asynchronously)
     * Packages trained LUIS application as GZip file to be used in the LUIS container.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The GZip binary stream of the trained application package. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPackageTrainedApplicationAsGzipAsync(UUID appId, String versionId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPackageTrainedApplicationAsGzipValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsPublish
     * @param appId The application ID. (required)
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object containing the application endpoint URL, its assigned endpoint key and publishing status. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> An object containing the application endpoint URL, its assigned endpoint key and publishing status in case that publishing one or more regions failed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPublishCall(UUID appId, ApplicationPublishObject applicationPublishObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationPublishObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/publish"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsPublishValidateBeforeCall(UUID appId, ApplicationPublishObject applicationPublishObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsPublish(Async)");
        }

        // verify the required parameter 'applicationPublishObject' is set
        if (applicationPublishObject == null) {
            throw new ApiException("Missing the required parameter 'applicationPublishObject' when calling appsPublish(Async)");
        }

        return appsPublishCall(appId, applicationPublishObject, _callback);

    }

    /**
     * 
     * Publishes a specific version of the application.
     * @param appId The application ID. (required)
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to. (required)
     * @return ProductionOrStagingEndpointInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object containing the application endpoint URL, its assigned endpoint key and publishing status. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> An object containing the application endpoint URL, its assigned endpoint key and publishing status in case that publishing one or more regions failed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ProductionOrStagingEndpointInfo appsPublish(UUID appId, ApplicationPublishObject applicationPublishObject) throws ApiException {
        ApiResponse<ProductionOrStagingEndpointInfo> localVarResp = appsPublishWithHttpInfo(appId, applicationPublishObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Publishes a specific version of the application.
     * @param appId The application ID. (required)
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to. (required)
     * @return ApiResponse&lt;ProductionOrStagingEndpointInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object containing the application endpoint URL, its assigned endpoint key and publishing status. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> An object containing the application endpoint URL, its assigned endpoint key and publishing status in case that publishing one or more regions failed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductionOrStagingEndpointInfo> appsPublishWithHttpInfo(UUID appId, ApplicationPublishObject applicationPublishObject) throws ApiException {
        okhttp3.Call localVarCall = appsPublishValidateBeforeCall(appId, applicationPublishObject, null);
        Type localVarReturnType = new TypeToken<ProductionOrStagingEndpointInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Publishes a specific version of the application.
     * @param appId The application ID. (required)
     * @param applicationPublishObject The application publish object. The region is the target region that the application is published to. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An object containing the application endpoint URL, its assigned endpoint key and publishing status. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> An object containing the application endpoint URL, its assigned endpoint key and publishing status in case that publishing one or more regions failed. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsPublishAsync(UUID appId, ApplicationPublishObject applicationPublishObject, final ApiCallback<ProductionOrStagingEndpointInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsPublishValidateBeforeCall(appId, applicationPublishObject, _callback);
        Type localVarReturnType = new TypeToken<ProductionOrStagingEndpointInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsUpdate
     * @param appId The application ID. (required)
     * @param applicationUpdateObject A model containing Name and Description of the application. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application name and description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateCall(UUID appId, ApplicationUpdateObject applicationUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsUpdateValidateBeforeCall(UUID appId, ApplicationUpdateObject applicationUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsUpdate(Async)");
        }

        // verify the required parameter 'applicationUpdateObject' is set
        if (applicationUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'applicationUpdateObject' when calling appsUpdate(Async)");
        }

        return appsUpdateCall(appId, applicationUpdateObject, _callback);

    }

    /**
     * 
     * Updates the name or description of the application.
     * @param appId The application ID. (required)
     * @param applicationUpdateObject A model containing Name and Description of the application. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application name and description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus appsUpdate(UUID appId, ApplicationUpdateObject applicationUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = appsUpdateWithHttpInfo(appId, applicationUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the name or description of the application.
     * @param appId The application ID. (required)
     * @param applicationUpdateObject A model containing Name and Description of the application. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application name and description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> appsUpdateWithHttpInfo(UUID appId, ApplicationUpdateObject applicationUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = appsUpdateValidateBeforeCall(appId, applicationUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the name or description of the application.
     * @param appId The application ID. (required)
     * @param applicationUpdateObject A model containing Name and Description of the application. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application name and description. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateAsync(UUID appId, ApplicationUpdateObject applicationUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsUpdateValidateBeforeCall(appId, applicationUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsUpdatePublishSettings
     * @param appId The application ID. (required)
     * @param publishSettingUpdateObject An object containing the new publish application settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdatePublishSettingsCall(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishSettingUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/publishsettings"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsUpdatePublishSettingsValidateBeforeCall(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsUpdatePublishSettings(Async)");
        }

        // verify the required parameter 'publishSettingUpdateObject' is set
        if (publishSettingUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'publishSettingUpdateObject' when calling appsUpdatePublishSettings(Async)");
        }

        return appsUpdatePublishSettingsCall(appId, publishSettingUpdateObject, _callback);

    }

    /**
     * 
     * Updates the application publish settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @param publishSettingUpdateObject An object containing the new publish application settings. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus appsUpdatePublishSettings(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = appsUpdatePublishSettingsWithHttpInfo(appId, publishSettingUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the application publish settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @param publishSettingUpdateObject An object containing the new publish application settings. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> appsUpdatePublishSettingsWithHttpInfo(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = appsUpdatePublishSettingsValidateBeforeCall(appId, publishSettingUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the application publish settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @param publishSettingUpdateObject An object containing the new publish application settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdatePublishSettingsAsync(UUID appId, PublishSettingUpdateObject publishSettingUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsUpdatePublishSettingsValidateBeforeCall(appId, publishSettingUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appsUpdateSettings
     * @param appId The application ID. (required)
     * @param applicationSettingUpdateObject An object containing the new application settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateSettingsCall(UUID appId, ApplicationSettingUpdateObject applicationSettingUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationSettingUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/settings"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appsUpdateSettingsValidateBeforeCall(UUID appId, ApplicationSettingUpdateObject applicationSettingUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsUpdateSettings(Async)");
        }

        // verify the required parameter 'applicationSettingUpdateObject' is set
        if (applicationSettingUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'applicationSettingUpdateObject' when calling appsUpdateSettings(Async)");
        }

        return appsUpdateSettingsCall(appId, applicationSettingUpdateObject, _callback);

    }

    /**
     * 
     * Updates the application settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @param applicationSettingUpdateObject An object containing the new application settings. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus appsUpdateSettings(UUID appId, ApplicationSettingUpdateObject applicationSettingUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = appsUpdateSettingsWithHttpInfo(appId, applicationSettingUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the application settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @param applicationSettingUpdateObject An object containing the new application settings. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> appsUpdateSettingsWithHttpInfo(UUID appId, ApplicationSettingUpdateObject applicationSettingUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = appsUpdateSettingsValidateBeforeCall(appId, applicationSettingUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the application settings including &#39;UseAllTrainingData&#39;.
     * @param appId The application ID. (required)
     * @param applicationSettingUpdateObject An object containing the new application settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated application settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appsUpdateSettingsAsync(UUID appId, ApplicationSettingUpdateObject applicationSettingUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = appsUpdateSettingsValidateBeforeCall(appId, applicationSettingUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for azureAccountsAssignToApp
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param azureAccountInfoObject The Azure account information object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureAccountsAssignToAppCall(UUID appId, String authorization, AzureAccountInfoObject azureAccountInfoObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = azureAccountInfoObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/azureaccounts"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call azureAccountsAssignToAppValidateBeforeCall(UUID appId, String authorization, AzureAccountInfoObject azureAccountInfoObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling azureAccountsAssignToApp(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling azureAccountsAssignToApp(Async)");
        }

        return azureAccountsAssignToAppCall(appId, authorization, azureAccountInfoObject, _callback);

    }

    /**
     * apps - Assign a LUIS Azure account to an application
     * Assigns an Azure account to the application.
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param azureAccountInfoObject The Azure account information object. (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus azureAccountsAssignToApp(UUID appId, String authorization, AzureAccountInfoObject azureAccountInfoObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = azureAccountsAssignToAppWithHttpInfo(appId, authorization, azureAccountInfoObject);
        return localVarResp.getData();
    }

    /**
     * apps - Assign a LUIS Azure account to an application
     * Assigns an Azure account to the application.
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param azureAccountInfoObject The Azure account information object. (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> azureAccountsAssignToAppWithHttpInfo(UUID appId, String authorization, AzureAccountInfoObject azureAccountInfoObject) throws ApiException {
        okhttp3.Call localVarCall = azureAccountsAssignToAppValidateBeforeCall(appId, authorization, azureAccountInfoObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * apps - Assign a LUIS Azure account to an application (asynchronously)
     * Assigns an Azure account to the application.
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param azureAccountInfoObject The Azure account information object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureAccountsAssignToAppAsync(UUID appId, String authorization, AzureAccountInfoObject azureAccountInfoObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = azureAccountsAssignToAppValidateBeforeCall(appId, authorization, azureAccountInfoObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for azureAccountsGetAssigned
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of azure account information objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureAccountsGetAssignedCall(UUID appId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/azureaccounts"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call azureAccountsGetAssignedValidateBeforeCall(UUID appId, String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling azureAccountsGetAssigned(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling azureAccountsGetAssigned(Async)");
        }

        return azureAccountsGetAssignedCall(appId, authorization, _callback);

    }

    /**
     * apps - Get LUIS Azure accounts assigned to the application
     * Gets the LUIS Azure accounts assigned to the application for the user using his ARM token.
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @return List&lt;AzureAccountInfoObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of azure account information objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<AzureAccountInfoObject> azureAccountsGetAssigned(UUID appId, String authorization) throws ApiException {
        ApiResponse<List<AzureAccountInfoObject>> localVarResp = azureAccountsGetAssignedWithHttpInfo(appId, authorization);
        return localVarResp.getData();
    }

    /**
     * apps - Get LUIS Azure accounts assigned to the application
     * Gets the LUIS Azure accounts assigned to the application for the user using his ARM token.
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @return ApiResponse&lt;List&lt;AzureAccountInfoObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of azure account information objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AzureAccountInfoObject>> azureAccountsGetAssignedWithHttpInfo(UUID appId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = azureAccountsGetAssignedValidateBeforeCall(appId, authorization, null);
        Type localVarReturnType = new TypeToken<List<AzureAccountInfoObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * apps - Get LUIS Azure accounts assigned to the application (asynchronously)
     * Gets the LUIS Azure accounts assigned to the application for the user using his ARM token.
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of azure account information objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureAccountsGetAssignedAsync(UUID appId, String authorization, final ApiCallback<List<AzureAccountInfoObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = azureAccountsGetAssignedValidateBeforeCall(appId, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<AzureAccountInfoObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for azureAccountsListUserLUISAccounts
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Azure account information objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureAccountsListUserLUISAccountsCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/azureaccounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call azureAccountsListUserLUISAccountsValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling azureAccountsListUserLUISAccounts(Async)");
        }

        return azureAccountsListUserLUISAccountsCall(authorization, _callback);

    }

    /**
     * user - Get LUIS Azure accounts
     * Gets the LUIS Azure accounts for the user using his ARM token.
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @return List&lt;AzureAccountInfoObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Azure account information objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<AzureAccountInfoObject> azureAccountsListUserLUISAccounts(String authorization) throws ApiException {
        ApiResponse<List<AzureAccountInfoObject>> localVarResp = azureAccountsListUserLUISAccountsWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * user - Get LUIS Azure accounts
     * Gets the LUIS Azure accounts for the user using his ARM token.
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @return ApiResponse&lt;List&lt;AzureAccountInfoObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Azure account information objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AzureAccountInfoObject>> azureAccountsListUserLUISAccountsWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = azureAccountsListUserLUISAccountsValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<AzureAccountInfoObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * user - Get LUIS Azure accounts (asynchronously)
     * Gets the LUIS Azure accounts for the user using his ARM token.
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Azure account information objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureAccountsListUserLUISAccountsAsync(String authorization, final ApiCallback<List<AzureAccountInfoObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = azureAccountsListUserLUISAccountsValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<AzureAccountInfoObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for azureAccountsRemoveFromApp
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param azureAccountInfoObject The Azure account information object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureAccountsRemoveFromAppCall(UUID appId, String authorization, AzureAccountInfoObject azureAccountInfoObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = azureAccountInfoObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/azureaccounts"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call azureAccountsRemoveFromAppValidateBeforeCall(UUID appId, String authorization, AzureAccountInfoObject azureAccountInfoObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling azureAccountsRemoveFromApp(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling azureAccountsRemoveFromApp(Async)");
        }

        return azureAccountsRemoveFromAppCall(appId, authorization, azureAccountInfoObject, _callback);

    }

    /**
     * apps - Removes an assigned LUIS Azure account from an application
     * Removes assigned Azure account from the application.
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param azureAccountInfoObject The Azure account information object. (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus azureAccountsRemoveFromApp(UUID appId, String authorization, AzureAccountInfoObject azureAccountInfoObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = azureAccountsRemoveFromAppWithHttpInfo(appId, authorization, azureAccountInfoObject);
        return localVarResp.getData();
    }

    /**
     * apps - Removes an assigned LUIS Azure account from an application
     * Removes assigned Azure account from the application.
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param azureAccountInfoObject The Azure account information object. (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> azureAccountsRemoveFromAppWithHttpInfo(UUID appId, String authorization, AzureAccountInfoObject azureAccountInfoObject) throws ApiException {
        okhttp3.Call localVarCall = azureAccountsRemoveFromAppValidateBeforeCall(appId, authorization, azureAccountInfoObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * apps - Removes an assigned LUIS Azure account from an application (asynchronously)
     * Removes assigned Azure account from the application.
     * @param appId The application ID. (required)
     * @param authorization The bearer authorization header to use; containing the user&#39;s ARM token used to validate Azure accounts information. (required)
     * @param azureAccountInfoObject The Azure account information object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call azureAccountsRemoveFromAppAsync(UUID appId, String authorization, AzureAccountInfoObject azureAccountInfoObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = azureAccountsRemoveFromAppValidateBeforeCall(appId, authorization, azureAccountInfoObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for examplesAdd
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleLabelObject A labeled example utterance with the expected intent and entities. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created example utterance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call examplesAddCall(UUID appId, String versionId, ExampleLabelObject exampleLabelObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exampleLabelObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/example"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call examplesAddValidateBeforeCall(UUID appId, String versionId, ExampleLabelObject exampleLabelObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling examplesAdd(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling examplesAdd(Async)");
        }

        // verify the required parameter 'exampleLabelObject' is set
        if (exampleLabelObject == null) {
            throw new ApiException("Missing the required parameter 'exampleLabelObject' when calling examplesAdd(Async)");
        }

        return examplesAddCall(appId, versionId, exampleLabelObject, _callback);

    }

    /**
     * 
     * Adds a labeled example utterance in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleLabelObject A labeled example utterance with the expected intent and entities. (required)
     * @return LabelExampleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created example utterance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public LabelExampleResponse examplesAdd(UUID appId, String versionId, ExampleLabelObject exampleLabelObject) throws ApiException {
        ApiResponse<LabelExampleResponse> localVarResp = examplesAddWithHttpInfo(appId, versionId, exampleLabelObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a labeled example utterance in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleLabelObject A labeled example utterance with the expected intent and entities. (required)
     * @return ApiResponse&lt;LabelExampleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created example utterance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelExampleResponse> examplesAddWithHttpInfo(UUID appId, String versionId, ExampleLabelObject exampleLabelObject) throws ApiException {
        okhttp3.Call localVarCall = examplesAddValidateBeforeCall(appId, versionId, exampleLabelObject, null);
        Type localVarReturnType = new TypeToken<LabelExampleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a labeled example utterance in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleLabelObject A labeled example utterance with the expected intent and entities. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created example utterance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call examplesAddAsync(UUID appId, String versionId, ExampleLabelObject exampleLabelObject, final ApiCallback<LabelExampleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = examplesAddValidateBeforeCall(appId, versionId, exampleLabelObject, _callback);
        Type localVarReturnType = new TypeToken<LabelExampleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for examplesBatch
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleLabelObjectArray Array of example utterances. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A string array determining which labeled example utterances were added successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Indicates that the request was partially successful. The response contains a string array indicating the status of each of the added labeled example utterances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call examplesBatchCall(UUID appId, String versionId, List<ExampleLabelObject> exampleLabelObjectArray, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exampleLabelObjectArray;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/examples"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call examplesBatchValidateBeforeCall(UUID appId, String versionId, List<ExampleLabelObject> exampleLabelObjectArray, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling examplesBatch(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling examplesBatch(Async)");
        }

        // verify the required parameter 'exampleLabelObjectArray' is set
        if (exampleLabelObjectArray == null) {
            throw new ApiException("Missing the required parameter 'exampleLabelObjectArray' when calling examplesBatch(Async)");
        }

        return examplesBatchCall(appId, versionId, exampleLabelObjectArray, _callback);

    }

    /**
     * 
     * Adds a batch of labeled example utterances to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleLabelObjectArray Array of example utterances. (required)
     * @return List&lt;BatchLabelExample&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A string array determining which labeled example utterances were added successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Indicates that the request was partially successful. The response contains a string array indicating the status of each of the added labeled example utterances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<BatchLabelExample> examplesBatch(UUID appId, String versionId, List<ExampleLabelObject> exampleLabelObjectArray) throws ApiException {
        ApiResponse<List<BatchLabelExample>> localVarResp = examplesBatchWithHttpInfo(appId, versionId, exampleLabelObjectArray);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a batch of labeled example utterances to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleLabelObjectArray Array of example utterances. (required)
     * @return ApiResponse&lt;List&lt;BatchLabelExample&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A string array determining which labeled example utterances were added successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Indicates that the request was partially successful. The response contains a string array indicating the status of each of the added labeled example utterances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BatchLabelExample>> examplesBatchWithHttpInfo(UUID appId, String versionId, List<ExampleLabelObject> exampleLabelObjectArray) throws ApiException {
        okhttp3.Call localVarCall = examplesBatchValidateBeforeCall(appId, versionId, exampleLabelObjectArray, null);
        Type localVarReturnType = new TypeToken<List<BatchLabelExample>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a batch of labeled example utterances to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleLabelObjectArray Array of example utterances. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A string array determining which labeled example utterances were added successfully. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Indicates that the request was partially successful. The response contains a string array indicating the status of each of the added labeled example utterances. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call examplesBatchAsync(UUID appId, String versionId, List<ExampleLabelObject> exampleLabelObjectArray, final ApiCallback<List<BatchLabelExample>> _callback) throws ApiException {

        okhttp3.Call localVarCall = examplesBatchValidateBeforeCall(appId, versionId, exampleLabelObjectArray, _callback);
        Type localVarReturnType = new TypeToken<List<BatchLabelExample>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for examplesDelete
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleId The example ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted example utterance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call examplesDeleteCall(UUID appId, String versionId, Integer exampleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/examples/{exampleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "exampleId" + "}", localVarApiClient.escapeString(exampleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call examplesDeleteValidateBeforeCall(UUID appId, String versionId, Integer exampleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling examplesDelete(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling examplesDelete(Async)");
        }

        // verify the required parameter 'exampleId' is set
        if (exampleId == null) {
            throw new ApiException("Missing the required parameter 'exampleId' when calling examplesDelete(Async)");
        }

        return examplesDeleteCall(appId, versionId, exampleId, _callback);

    }

    /**
     * 
     * Deletes the labeled example utterances with the specified ID from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleId The example ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted example utterance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus examplesDelete(UUID appId, String versionId, Integer exampleId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = examplesDeleteWithHttpInfo(appId, versionId, exampleId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the labeled example utterances with the specified ID from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleId The example ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted example utterance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> examplesDeleteWithHttpInfo(UUID appId, String versionId, Integer exampleId) throws ApiException {
        okhttp3.Call localVarCall = examplesDeleteValidateBeforeCall(appId, versionId, exampleId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the labeled example utterances with the specified ID from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param exampleId The example ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted example utterance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call examplesDeleteAsync(UUID appId, String versionId, Integer exampleId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = examplesDeleteValidateBeforeCall(appId, versionId, exampleId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for examplesList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of predictions and label pairs for every example utterance in the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call examplesListCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/examples"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call examplesListValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling examplesList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling examplesList(Async)");
        }

        return examplesListCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * Returns example utterances to be reviewed from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;LabeledUtterance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of predictions and label pairs for every example utterance in the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<LabeledUtterance> examplesList(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<LabeledUtterance>> localVarResp = examplesListWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns example utterances to be reviewed from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;LabeledUtterance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of predictions and label pairs for every example utterance in the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LabeledUtterance>> examplesListWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = examplesListValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<LabeledUtterance>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns example utterances to be reviewed from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of predictions and label pairs for every example utterance in the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call examplesListAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<LabeledUtterance>> _callback) throws ApiException {

        okhttp3.Call localVarCall = examplesListValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<LabeledUtterance>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresAddPhraseList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and the isExchangeable boolean. Default value for isExchangeable is true. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created feature. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresAddPhraseListCall(UUID appId, String versionId, PhraselistCreateObject phraselistCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phraselistCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/phraselists"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresAddPhraseListValidateBeforeCall(UUID appId, String versionId, PhraselistCreateObject phraselistCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresAddPhraseList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresAddPhraseList(Async)");
        }

        // verify the required parameter 'phraselistCreateObject' is set
        if (phraselistCreateObject == null) {
            throw new ApiException("Missing the required parameter 'phraselistCreateObject' when calling featuresAddPhraseList(Async)");
        }

        return featuresAddPhraseListCall(appId, versionId, phraselistCreateObject, _callback);

    }

    /**
     * 
     * Creates a new phraselist feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and the isExchangeable boolean. Default value for isExchangeable is true. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created feature. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public Integer featuresAddPhraseList(UUID appId, String versionId, PhraselistCreateObject phraselistCreateObject) throws ApiException {
        ApiResponse<Integer> localVarResp = featuresAddPhraseListWithHttpInfo(appId, versionId, phraselistCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new phraselist feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and the isExchangeable boolean. Default value for isExchangeable is true. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created feature. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> featuresAddPhraseListWithHttpInfo(UUID appId, String versionId, PhraselistCreateObject phraselistCreateObject) throws ApiException {
        okhttp3.Call localVarCall = featuresAddPhraseListValidateBeforeCall(appId, versionId, phraselistCreateObject, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new phraselist feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistCreateObject A Phraselist object containing Name, comma-separated Phrases and the isExchangeable boolean. Default value for isExchangeable is true. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created feature. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresAddPhraseListAsync(UUID appId, String versionId, PhraselistCreateObject phraselistCreateObject, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresAddPhraseListValidateBeforeCall(appId, versionId, phraselistCreateObject, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresCreatePatternFeature
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternCreateObject The Name and Pattern of the feature. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created feature. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call featuresCreatePatternFeatureCall(UUID appId, String versionId, PatternCreateObject patternCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patternCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patterns"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresCreatePatternFeatureValidateBeforeCall(UUID appId, String versionId, PatternCreateObject patternCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresCreatePatternFeature(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresCreatePatternFeature(Async)");
        }

        // verify the required parameter 'patternCreateObject' is set
        if (patternCreateObject == null) {
            throw new ApiException("Missing the required parameter 'patternCreateObject' when calling featuresCreatePatternFeature(Async)");
        }

        return featuresCreatePatternFeatureCall(appId, versionId, patternCreateObject, _callback);

    }

    /**
     * 
     * [DEPRECATED NOTICE: This operation will soon be removed] Creates a new pattern feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternCreateObject The Name and Pattern of the feature. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created feature. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Integer featuresCreatePatternFeature(UUID appId, String versionId, PatternCreateObject patternCreateObject) throws ApiException {
        ApiResponse<Integer> localVarResp = featuresCreatePatternFeatureWithHttpInfo(appId, versionId, patternCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * [DEPRECATED NOTICE: This operation will soon be removed] Creates a new pattern feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternCreateObject The Name and Pattern of the feature. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created feature. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Integer> featuresCreatePatternFeatureWithHttpInfo(UUID appId, String versionId, PatternCreateObject patternCreateObject) throws ApiException {
        okhttp3.Call localVarCall = featuresCreatePatternFeatureValidateBeforeCall(appId, versionId, patternCreateObject, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * [DEPRECATED NOTICE: This operation will soon be removed] Creates a new pattern feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternCreateObject The Name and Pattern of the feature. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created feature. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call featuresCreatePatternFeatureAsync(UUID appId, String versionId, PatternCreateObject patternCreateObject, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresCreatePatternFeatureValidateBeforeCall(appId, versionId, patternCreateObject, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresDeletePatternFeature
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call featuresDeletePatternFeatureCall(UUID appId, String versionId, Integer patternId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patterns/{patternId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "patternId" + "}", localVarApiClient.escapeString(patternId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresDeletePatternFeatureValidateBeforeCall(UUID appId, String versionId, Integer patternId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresDeletePatternFeature(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresDeletePatternFeature(Async)");
        }

        // verify the required parameter 'patternId' is set
        if (patternId == null) {
            throw new ApiException("Missing the required parameter 'patternId' when calling featuresDeletePatternFeature(Async)");
        }

        return featuresDeletePatternFeatureCall(appId, versionId, patternId, _callback);

    }

    /**
     * 
     * [DEPRECATED NOTICE: This operation will soon be removed] Deletes a pattern feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public OperationStatus featuresDeletePatternFeature(UUID appId, String versionId, Integer patternId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = featuresDeletePatternFeatureWithHttpInfo(appId, versionId, patternId);
        return localVarResp.getData();
    }

    /**
     * 
     * [DEPRECATED NOTICE: This operation will soon be removed] Deletes a pattern feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<OperationStatus> featuresDeletePatternFeatureWithHttpInfo(UUID appId, String versionId, Integer patternId) throws ApiException {
        okhttp3.Call localVarCall = featuresDeletePatternFeatureValidateBeforeCall(appId, versionId, patternId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * [DEPRECATED NOTICE: This operation will soon be removed] Deletes a pattern feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call featuresDeletePatternFeatureAsync(UUID appId, String versionId, Integer patternId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresDeletePatternFeatureValidateBeforeCall(appId, versionId, patternId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresDeletePhraseList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted phraselist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresDeletePhraseListCall(UUID appId, String versionId, Integer phraselistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/phraselists/{phraselistId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "phraselistId" + "}", localVarApiClient.escapeString(phraselistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresDeletePhraseListValidateBeforeCall(UUID appId, String versionId, Integer phraselistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresDeletePhraseList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresDeletePhraseList(Async)");
        }

        // verify the required parameter 'phraselistId' is set
        if (phraselistId == null) {
            throw new ApiException("Missing the required parameter 'phraselistId' when calling featuresDeletePhraseList(Async)");
        }

        return featuresDeletePhraseListCall(appId, versionId, phraselistId, _callback);

    }

    /**
     * 
     * Deletes a phraselist feature from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be deleted. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted phraselist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus featuresDeletePhraseList(UUID appId, String versionId, Integer phraselistId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = featuresDeletePhraseListWithHttpInfo(appId, versionId, phraselistId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a phraselist feature from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be deleted. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted phraselist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> featuresDeletePhraseListWithHttpInfo(UUID appId, String versionId, Integer phraselistId) throws ApiException {
        okhttp3.Call localVarCall = featuresDeletePhraseListValidateBeforeCall(appId, versionId, phraselistId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a phraselist feature from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted phraselist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresDeletePhraseListAsync(UUID appId, String versionId, Integer phraselistId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresDeletePhraseListValidateBeforeCall(appId, versionId, phraselistId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresGetPatternFeatureInfo
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pattern feature info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call featuresGetPatternFeatureInfoCall(UUID appId, String versionId, Integer patternId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patterns/{patternId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "patternId" + "}", localVarApiClient.escapeString(patternId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresGetPatternFeatureInfoValidateBeforeCall(UUID appId, String versionId, Integer patternId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresGetPatternFeatureInfo(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresGetPatternFeatureInfo(Async)");
        }

        // verify the required parameter 'patternId' is set
        if (patternId == null) {
            throw new ApiException("Missing the required parameter 'patternId' when calling featuresGetPatternFeatureInfo(Async)");
        }

        return featuresGetPatternFeatureInfoCall(appId, versionId, patternId, _callback);

    }

    /**
     * 
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets the specified pattern feature&#39;s info in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @return PatternFeatureInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pattern feature info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PatternFeatureInfo featuresGetPatternFeatureInfo(UUID appId, String versionId, Integer patternId) throws ApiException {
        ApiResponse<PatternFeatureInfo> localVarResp = featuresGetPatternFeatureInfoWithHttpInfo(appId, versionId, patternId);
        return localVarResp.getData();
    }

    /**
     * 
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets the specified pattern feature&#39;s info in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @return ApiResponse&lt;PatternFeatureInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pattern feature info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PatternFeatureInfo> featuresGetPatternFeatureInfoWithHttpInfo(UUID appId, String versionId, Integer patternId) throws ApiException {
        okhttp3.Call localVarCall = featuresGetPatternFeatureInfoValidateBeforeCall(appId, versionId, patternId, null);
        Type localVarReturnType = new TypeToken<PatternFeatureInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets the specified pattern feature&#39;s info in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pattern feature info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call featuresGetPatternFeatureInfoAsync(UUID appId, String versionId, Integer patternId, final ApiCallback<PatternFeatureInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresGetPatternFeatureInfoValidateBeforeCall(appId, versionId, patternId, _callback);
        Type localVarReturnType = new TypeToken<PatternFeatureInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresGetPhraseList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be retrieved. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A phraselist feature info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresGetPhraseListCall(UUID appId, String versionId, Integer phraselistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/phraselists/{phraselistId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "phraselistId" + "}", localVarApiClient.escapeString(phraselistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresGetPhraseListValidateBeforeCall(UUID appId, String versionId, Integer phraselistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresGetPhraseList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresGetPhraseList(Async)");
        }

        // verify the required parameter 'phraselistId' is set
        if (phraselistId == null) {
            throw new ApiException("Missing the required parameter 'phraselistId' when calling featuresGetPhraseList(Async)");
        }

        return featuresGetPhraseListCall(appId, versionId, phraselistId, _callback);

    }

    /**
     * 
     * Gets phraselist feature info in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be retrieved. (required)
     * @return PhraseListFeatureInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A phraselist feature info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public PhraseListFeatureInfo featuresGetPhraseList(UUID appId, String versionId, Integer phraselistId) throws ApiException {
        ApiResponse<PhraseListFeatureInfo> localVarResp = featuresGetPhraseListWithHttpInfo(appId, versionId, phraselistId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets phraselist feature info in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be retrieved. (required)
     * @return ApiResponse&lt;PhraseListFeatureInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A phraselist feature info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhraseListFeatureInfo> featuresGetPhraseListWithHttpInfo(UUID appId, String versionId, Integer phraselistId) throws ApiException {
        okhttp3.Call localVarCall = featuresGetPhraseListValidateBeforeCall(appId, versionId, phraselistId, null);
        Type localVarReturnType = new TypeToken<PhraseListFeatureInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets phraselist feature info in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be retrieved. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A phraselist feature info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresGetPhraseListAsync(UUID appId, String versionId, Integer phraselistId, final ApiCallback<PhraseListFeatureInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresGetPhraseListValidateBeforeCall(appId, versionId, phraselistId, _callback);
        Type localVarReturnType = new TypeToken<PhraseListFeatureInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all phraselist features and a list of all pattern features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresListCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/features"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresListValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresList(Async)");
        }

        return featuresListCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * Gets all the extraction phraselist and pattern features in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return FeaturesResponseObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all phraselist features and a list of all pattern features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public FeaturesResponseObject featuresList(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<FeaturesResponseObject> localVarResp = featuresListWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the extraction phraselist and pattern features in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;FeaturesResponseObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all phraselist features and a list of all pattern features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeaturesResponseObject> featuresListWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = featuresListValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<FeaturesResponseObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the extraction phraselist and pattern features in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all phraselist features and a list of all pattern features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresListAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<FeaturesResponseObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresListValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<FeaturesResponseObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresListApplicationVersionPatternFeatures
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of pattern features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call featuresListApplicationVersionPatternFeaturesCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patterns"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresListApplicationVersionPatternFeaturesValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresListApplicationVersionPatternFeatures(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresListApplicationVersionPatternFeatures(Async)");
        }

        return featuresListApplicationVersionPatternFeaturesCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets all the pattern features.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;PatternFeatureInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of pattern features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public List<PatternFeatureInfo> featuresListApplicationVersionPatternFeatures(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<PatternFeatureInfo>> localVarResp = featuresListApplicationVersionPatternFeaturesWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets all the pattern features.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;PatternFeatureInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of pattern features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<PatternFeatureInfo>> featuresListApplicationVersionPatternFeaturesWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = featuresListApplicationVersionPatternFeaturesValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<PatternFeatureInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * [DEPRECATED NOTICE: This operation will soon be removed] Gets all the pattern features.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of pattern features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call featuresListApplicationVersionPatternFeaturesAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<PatternFeatureInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresListApplicationVersionPatternFeaturesValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<PatternFeatureInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresListPhraseLists
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all phraselist features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresListPhraseListsCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/phraselists"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresListPhraseListsValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresListPhraseLists(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresListPhraseLists(Async)");
        }

        return featuresListPhraseListsCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * Gets all the phraselist features in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;PhraseListFeatureInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all phraselist features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PhraseListFeatureInfo> featuresListPhraseLists(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<PhraseListFeatureInfo>> localVarResp = featuresListPhraseListsWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the phraselist features in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;PhraseListFeatureInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all phraselist features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PhraseListFeatureInfo>> featuresListPhraseListsWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = featuresListPhraseListsValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<PhraseListFeatureInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the phraselist features in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all phraselist features. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresListPhraseListsAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<PhraseListFeatureInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresListPhraseListsValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<PhraseListFeatureInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresUpdatePatternFeature
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @param patternUpdateObject The new values for: - Just a boolean called IsActive, in which case the status of the feature will be changed. - Name, Pattern and a boolean called IsActive to update the feature. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call featuresUpdatePatternFeatureCall(UUID appId, String versionId, Integer patternId, PatternUpdateObject patternUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patternUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patterns/{patternId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "patternId" + "}", localVarApiClient.escapeString(patternId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresUpdatePatternFeatureValidateBeforeCall(UUID appId, String versionId, Integer patternId, PatternUpdateObject patternUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresUpdatePatternFeature(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresUpdatePatternFeature(Async)");
        }

        // verify the required parameter 'patternId' is set
        if (patternId == null) {
            throw new ApiException("Missing the required parameter 'patternId' when calling featuresUpdatePatternFeature(Async)");
        }

        // verify the required parameter 'patternUpdateObject' is set
        if (patternUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'patternUpdateObject' when calling featuresUpdatePatternFeature(Async)");
        }

        return featuresUpdatePatternFeatureCall(appId, versionId, patternId, patternUpdateObject, _callback);

    }

    /**
     * 
     * [DEPRECATED NOTICE: This operation will soon be removed] Updates the pattern, the name and the state of the pattern feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @param patternUpdateObject The new values for: - Just a boolean called IsActive, in which case the status of the feature will be changed. - Name, Pattern and a boolean called IsActive to update the feature. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public OperationStatus featuresUpdatePatternFeature(UUID appId, String versionId, Integer patternId, PatternUpdateObject patternUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = featuresUpdatePatternFeatureWithHttpInfo(appId, versionId, patternId, patternUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * [DEPRECATED NOTICE: This operation will soon be removed] Updates the pattern, the name and the state of the pattern feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @param patternUpdateObject The new values for: - Just a boolean called IsActive, in which case the status of the feature will be changed. - Name, Pattern and a boolean called IsActive to update the feature. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<OperationStatus> featuresUpdatePatternFeatureWithHttpInfo(UUID appId, String versionId, Integer patternId, PatternUpdateObject patternUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = featuresUpdatePatternFeatureValidateBeforeCall(appId, versionId, patternId, patternUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * [DEPRECATED NOTICE: This operation will soon be removed] Updates the pattern, the name and the state of the pattern feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern feature ID. (required)
     * @param patternUpdateObject The new values for: - Just a boolean called IsActive, in which case the status of the feature will be changed. - Name, Pattern and a boolean called IsActive to update the feature. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call featuresUpdatePatternFeatureAsync(UUID appId, String versionId, Integer patternId, PatternUpdateObject patternUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresUpdatePatternFeatureValidateBeforeCall(appId, versionId, patternId, patternUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featuresUpdatePhraseList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be updated. (required)
     * @param phraselistUpdateObject The new values for: - Just a boolean called IsActive, in which case the status of the feature will be changed. - Name, Pattern, Mode, and a boolean called IsActive to update the feature. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated phraselist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresUpdatePhraseListCall(UUID appId, String versionId, Integer phraselistId, PhraselistUpdateObject phraselistUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phraselistUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/phraselists/{phraselistId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "phraselistId" + "}", localVarApiClient.escapeString(phraselistId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featuresUpdatePhraseListValidateBeforeCall(UUID appId, String versionId, Integer phraselistId, PhraselistUpdateObject phraselistUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling featuresUpdatePhraseList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling featuresUpdatePhraseList(Async)");
        }

        // verify the required parameter 'phraselistId' is set
        if (phraselistId == null) {
            throw new ApiException("Missing the required parameter 'phraselistId' when calling featuresUpdatePhraseList(Async)");
        }

        return featuresUpdatePhraseListCall(appId, versionId, phraselistId, phraselistUpdateObject, _callback);

    }

    /**
     * 
     * Updates the phrases, the state and the name of the phraselist feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be updated. (required)
     * @param phraselistUpdateObject The new values for: - Just a boolean called IsActive, in which case the status of the feature will be changed. - Name, Pattern, Mode, and a boolean called IsActive to update the feature. (optional)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated phraselist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus featuresUpdatePhraseList(UUID appId, String versionId, Integer phraselistId, PhraselistUpdateObject phraselistUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = featuresUpdatePhraseListWithHttpInfo(appId, versionId, phraselistId, phraselistUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the phrases, the state and the name of the phraselist feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be updated. (required)
     * @param phraselistUpdateObject The new values for: - Just a boolean called IsActive, in which case the status of the feature will be changed. - Name, Pattern, Mode, and a boolean called IsActive to update the feature. (optional)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated phraselist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> featuresUpdatePhraseListWithHttpInfo(UUID appId, String versionId, Integer phraselistId, PhraselistUpdateObject phraselistUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = featuresUpdatePhraseListValidateBeforeCall(appId, versionId, phraselistId, phraselistUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the phrases, the state and the name of the phraselist feature in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param phraselistId The ID of the feature to be updated. (required)
     * @param phraselistUpdateObject The new values for: - Just a boolean called IsActive, in which case the status of the feature will be changed. - Name, Pattern, Mode, and a boolean called IsActive to update the feature. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated phraselist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featuresUpdatePhraseListAsync(UUID appId, String versionId, Integer phraselistId, PhraselistUpdateObject phraselistUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = featuresUpdatePhraseListValidateBeforeCall(appId, versionId, phraselistId, phraselistUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddClosedList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param closedListModelCreateObject A model containing the name and words for the new list entity extractor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddClosedListCall(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = closedListModelCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddClosedListValidateBeforeCall(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddClosedList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddClosedList(Async)");
        }

        // verify the required parameter 'closedListModelCreateObject' is set
        if (closedListModelCreateObject == null) {
            throw new ApiException("Missing the required parameter 'closedListModelCreateObject' when calling modelAddClosedList(Async)");
        }

        return modelAddClosedListCall(appId, versionId, closedListModelCreateObject, _callback);

    }

    /**
     * 
     * Adds a list entity model to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param closedListModelCreateObject A model containing the name and words for the new list entity extractor. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelAddClosedList(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelAddClosedListWithHttpInfo(appId, versionId, closedListModelCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a list entity model to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param closedListModelCreateObject A model containing the name and words for the new list entity extractor. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelAddClosedListWithHttpInfo(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddClosedListValidateBeforeCall(appId, versionId, closedListModelCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a list entity model to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param closedListModelCreateObject A model containing the name and words for the new list entity extractor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddClosedListAsync(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddClosedListValidateBeforeCall(appId, versionId, closedListModelCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddCompositeEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created Model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddCompositeEntityCall(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = compositeModelCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddCompositeEntityValidateBeforeCall(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddCompositeEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddCompositeEntity(Async)");
        }

        // verify the required parameter 'compositeModelCreateObject' is set
        if (compositeModelCreateObject == null) {
            throw new ApiException("Missing the required parameter 'compositeModelCreateObject' when calling modelAddCompositeEntity(Async)");
        }

        return modelAddCompositeEntityCall(appId, versionId, compositeModelCreateObject, _callback);

    }

    /**
     * 
     * Adds a composite entity extractor to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created Model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelAddCompositeEntity(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelAddCompositeEntityWithHttpInfo(appId, versionId, compositeModelCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a composite entity extractor to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created Model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelAddCompositeEntityWithHttpInfo(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddCompositeEntityValidateBeforeCall(appId, versionId, compositeModelCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a composite entity extractor to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created Model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddCompositeEntityAsync(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddCompositeEntityValidateBeforeCall(appId, versionId, compositeModelCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddCompositeEntityChild
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param compositeChildModelCreateObject A model object containing the name of the new composite child model. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddCompositeEntityChildCall(UUID appId, String versionId, UUID cEntityId, ModelAddCompositeEntityChildRequest compositeChildModelCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = compositeChildModelCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "cEntityId" + "}", localVarApiClient.escapeString(cEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddCompositeEntityChildValidateBeforeCall(UUID appId, String versionId, UUID cEntityId, ModelAddCompositeEntityChildRequest compositeChildModelCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddCompositeEntityChild(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddCompositeEntityChild(Async)");
        }

        // verify the required parameter 'cEntityId' is set
        if (cEntityId == null) {
            throw new ApiException("Missing the required parameter 'cEntityId' when calling modelAddCompositeEntityChild(Async)");
        }

        // verify the required parameter 'compositeChildModelCreateObject' is set
        if (compositeChildModelCreateObject == null) {
            throw new ApiException("Missing the required parameter 'compositeChildModelCreateObject' when calling modelAddCompositeEntityChild(Async)");
        }

        return modelAddCompositeEntityChildCall(appId, versionId, cEntityId, compositeChildModelCreateObject, _callback);

    }

    /**
     * 
     * Creates a single child in an existing composite entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param compositeChildModelCreateObject A model object containing the name of the new composite child model. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelAddCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, ModelAddCompositeEntityChildRequest compositeChildModelCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelAddCompositeEntityChildWithHttpInfo(appId, versionId, cEntityId, compositeChildModelCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a single child in an existing composite entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param compositeChildModelCreateObject A model object containing the name of the new composite child model. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelAddCompositeEntityChildWithHttpInfo(UUID appId, String versionId, UUID cEntityId, ModelAddCompositeEntityChildRequest compositeChildModelCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddCompositeEntityChildValidateBeforeCall(appId, versionId, cEntityId, compositeChildModelCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a single child in an existing composite entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param compositeChildModelCreateObject A model object containing the name of the new composite child model. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, ModelAddCompositeEntityChildRequest compositeChildModelCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddCompositeEntityChildValidateBeforeCall(appId, versionId, cEntityId, compositeChildModelCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddCustomPrebuiltDomain
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainObject A prebuilt domain create object containing the name of the domain. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An array of the created customizable prebuilt domain intent and entity model Ids. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddCustomPrebuiltDomainCall(UUID appId, String versionId, PrebuiltDomainCreateBaseObject prebuiltDomainObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prebuiltDomainObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltdomains"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddCustomPrebuiltDomainValidateBeforeCall(UUID appId, String versionId, PrebuiltDomainCreateBaseObject prebuiltDomainObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddCustomPrebuiltDomain(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddCustomPrebuiltDomain(Async)");
        }

        // verify the required parameter 'prebuiltDomainObject' is set
        if (prebuiltDomainObject == null) {
            throw new ApiException("Missing the required parameter 'prebuiltDomainObject' when calling modelAddCustomPrebuiltDomain(Async)");
        }

        return modelAddCustomPrebuiltDomainCall(appId, versionId, prebuiltDomainObject, _callback);

    }

    /**
     * 
     * Adds a customizable prebuilt domain along with all of its intent and entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainObject A prebuilt domain create object containing the name of the domain. (required)
     * @return List&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An array of the created customizable prebuilt domain intent and entity model Ids. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<UUID> modelAddCustomPrebuiltDomain(UUID appId, String versionId, PrebuiltDomainCreateBaseObject prebuiltDomainObject) throws ApiException {
        ApiResponse<List<UUID>> localVarResp = modelAddCustomPrebuiltDomainWithHttpInfo(appId, versionId, prebuiltDomainObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a customizable prebuilt domain along with all of its intent and entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainObject A prebuilt domain create object containing the name of the domain. (required)
     * @return ApiResponse&lt;List&lt;UUID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An array of the created customizable prebuilt domain intent and entity model Ids. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UUID>> modelAddCustomPrebuiltDomainWithHttpInfo(UUID appId, String versionId, PrebuiltDomainCreateBaseObject prebuiltDomainObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddCustomPrebuiltDomainValidateBeforeCall(appId, versionId, prebuiltDomainObject, null);
        Type localVarReturnType = new TypeToken<List<UUID>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a customizable prebuilt domain along with all of its intent and entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainObject A prebuilt domain create object containing the name of the domain. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An array of the created customizable prebuilt domain intent and entity model Ids. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddCustomPrebuiltDomainAsync(UUID appId, String versionId, PrebuiltDomainCreateBaseObject prebuiltDomainObject, final ApiCallback<List<UUID>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddCustomPrebuiltDomainValidateBeforeCall(appId, versionId, prebuiltDomainObject, _callback);
        Type localVarReturnType = new TypeToken<List<UUID>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddCustomPrebuiltEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity and the name of the domain to which this model belongs. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created prebuilt model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddCustomPrebuiltEntityCall(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prebuiltDomainModelCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltentities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddCustomPrebuiltEntityValidateBeforeCall(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddCustomPrebuiltEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddCustomPrebuiltEntity(Async)");
        }

        // verify the required parameter 'prebuiltDomainModelCreateObject' is set
        if (prebuiltDomainModelCreateObject == null) {
            throw new ApiException("Missing the required parameter 'prebuiltDomainModelCreateObject' when calling modelAddCustomPrebuiltEntity(Async)");
        }

        return modelAddCustomPrebuiltEntityCall(appId, versionId, prebuiltDomainModelCreateObject, _callback);

    }

    /**
     * 
     * Adds a prebuilt entity model to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity and the name of the domain to which this model belongs. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created prebuilt model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelAddCustomPrebuiltEntity(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelAddCustomPrebuiltEntityWithHttpInfo(appId, versionId, prebuiltDomainModelCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a prebuilt entity model to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity and the name of the domain to which this model belongs. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created prebuilt model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelAddCustomPrebuiltEntityWithHttpInfo(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddCustomPrebuiltEntityValidateBeforeCall(appId, versionId, prebuiltDomainModelCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a prebuilt entity model to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainModelCreateObject A model object containing the name of the prebuilt entity and the name of the domain to which this model belongs. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created prebuilt model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddCustomPrebuiltEntityAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddCustomPrebuiltEntityValidateBeforeCall(appId, versionId, prebuiltDomainModelCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddCustomPrebuiltIntent
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainModelCreateObject A model object containing the name of the customizable prebuilt intent and the name of the domain to which this model belongs. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created intent model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddCustomPrebuiltIntentCall(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prebuiltDomainModelCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltintents"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddCustomPrebuiltIntentValidateBeforeCall(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddCustomPrebuiltIntent(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddCustomPrebuiltIntent(Async)");
        }

        // verify the required parameter 'prebuiltDomainModelCreateObject' is set
        if (prebuiltDomainModelCreateObject == null) {
            throw new ApiException("Missing the required parameter 'prebuiltDomainModelCreateObject' when calling modelAddCustomPrebuiltIntent(Async)");
        }

        return modelAddCustomPrebuiltIntentCall(appId, versionId, prebuiltDomainModelCreateObject, _callback);

    }

    /**
     * 
     * Adds a customizable prebuilt intent model to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainModelCreateObject A model object containing the name of the customizable prebuilt intent and the name of the domain to which this model belongs. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created intent model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelAddCustomPrebuiltIntent(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelAddCustomPrebuiltIntentWithHttpInfo(appId, versionId, prebuiltDomainModelCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a customizable prebuilt intent model to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainModelCreateObject A model object containing the name of the customizable prebuilt intent and the name of the domain to which this model belongs. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created intent model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelAddCustomPrebuiltIntentWithHttpInfo(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddCustomPrebuiltIntentValidateBeforeCall(appId, versionId, prebuiltDomainModelCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a customizable prebuilt intent model to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltDomainModelCreateObject A model object containing the name of the customizable prebuilt intent and the name of the domain to which this model belongs. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created intent model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddCustomPrebuiltIntentAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddCustomPrebuiltIntentValidateBeforeCall(appId, versionId, prebuiltDomainModelCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param modelCreateObject A model object containing the name for the new simple entity extractor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddEntityCall(UUID appId, String versionId, ModelCreateObject modelCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddEntityValidateBeforeCall(UUID appId, String versionId, ModelCreateObject modelCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddEntity(Async)");
        }

        // verify the required parameter 'modelCreateObject' is set
        if (modelCreateObject == null) {
            throw new ApiException("Missing the required parameter 'modelCreateObject' when calling modelAddEntity(Async)");
        }

        return modelAddEntityCall(appId, versionId, modelCreateObject, _callback);

    }

    /**
     * 
     * Adds a simple entity extractor to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param modelCreateObject A model object containing the name for the new simple entity extractor. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelAddEntity(UUID appId, String versionId, ModelCreateObject modelCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelAddEntityWithHttpInfo(appId, versionId, modelCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a simple entity extractor to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param modelCreateObject A model object containing the name for the new simple entity extractor. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelAddEntityWithHttpInfo(UUID appId, String versionId, ModelCreateObject modelCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddEntityValidateBeforeCall(appId, versionId, modelCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a simple entity extractor to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param modelCreateObject A model object containing the name for the new simple entity extractor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddEntityAsync(UUID appId, String versionId, ModelCreateObject modelCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddEntityValidateBeforeCall(appId, versionId, modelCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddExplicitListItem
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param item The new explicit list item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created explicit list item. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddExplicitListItemCall(UUID appId, String versionId, UUID entityId, ExplicitListItemCreateObject item, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = item;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddExplicitListItemValidateBeforeCall(UUID appId, String versionId, UUID entityId, ExplicitListItemCreateObject item, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddExplicitListItem(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddExplicitListItem(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelAddExplicitListItem(Async)");
        }

        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling modelAddExplicitListItem(Async)");
        }

        return modelAddExplicitListItemCall(appId, versionId, entityId, item, _callback);

    }

    /**
     * Add a new exception to the explicit list for the Pattern.Any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param item The new explicit list item. (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created explicit list item. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public Integer modelAddExplicitListItem(UUID appId, String versionId, UUID entityId, ExplicitListItemCreateObject item) throws ApiException {
        ApiResponse<Integer> localVarResp = modelAddExplicitListItemWithHttpInfo(appId, versionId, entityId, item);
        return localVarResp.getData();
    }

    /**
     * Add a new exception to the explicit list for the Pattern.Any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param item The new explicit list item. (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created explicit list item. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> modelAddExplicitListItemWithHttpInfo(UUID appId, String versionId, UUID entityId, ExplicitListItemCreateObject item) throws ApiException {
        okhttp3.Call localVarCall = modelAddExplicitListItemValidateBeforeCall(appId, versionId, entityId, item, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new exception to the explicit list for the Pattern.Any entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param item The new explicit list item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created explicit list item. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddExplicitListItemAsync(UUID appId, String versionId, UUID entityId, ExplicitListItemCreateObject item, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddExplicitListItemValidateBeforeCall(appId, versionId, entityId, item, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddHierarchicalEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddHierarchicalEntityCall(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hierarchicalModelCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddHierarchicalEntityValidateBeforeCall(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddHierarchicalEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddHierarchicalEntity(Async)");
        }

        // verify the required parameter 'hierarchicalModelCreateObject' is set
        if (hierarchicalModelCreateObject == null) {
            throw new ApiException("Missing the required parameter 'hierarchicalModelCreateObject' when calling modelAddHierarchicalEntity(Async)");
        }

        return modelAddHierarchicalEntityCall(appId, versionId, hierarchicalModelCreateObject, _callback);

    }

    /**
     * 
     * Adds a hierarchical entity extractor to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelAddHierarchicalEntity(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelAddHierarchicalEntityWithHttpInfo(appId, versionId, hierarchicalModelCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a hierarchical entity extractor to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelAddHierarchicalEntityWithHttpInfo(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddHierarchicalEntityValidateBeforeCall(appId, versionId, hierarchicalModelCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a hierarchical entity extractor to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddHierarchicalEntityAsync(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddHierarchicalEntityValidateBeforeCall(appId, versionId, hierarchicalModelCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddHierarchicalEntityChild
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hierarchicalChildModelCreateObject A model object containing the name of the new hierarchical child model. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddHierarchicalEntityChildCall(UUID appId, String versionId, UUID hEntityId, ModelAddCompositeEntityChildRequest hierarchicalChildModelCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hierarchicalChildModelCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddHierarchicalEntityChildValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, ModelAddCompositeEntityChildRequest hierarchicalChildModelCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelAddHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'hierarchicalChildModelCreateObject' is set
        if (hierarchicalChildModelCreateObject == null) {
            throw new ApiException("Missing the required parameter 'hierarchicalChildModelCreateObject' when calling modelAddHierarchicalEntityChild(Async)");
        }

        return modelAddHierarchicalEntityChildCall(appId, versionId, hEntityId, hierarchicalChildModelCreateObject, _callback);

    }

    /**
     * 
     * Creates a single child in an existing hierarchical entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hierarchicalChildModelCreateObject A model object containing the name of the new hierarchical child model. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelAddHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, ModelAddCompositeEntityChildRequest hierarchicalChildModelCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelAddHierarchicalEntityChildWithHttpInfo(appId, versionId, hEntityId, hierarchicalChildModelCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a single child in an existing hierarchical entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hierarchicalChildModelCreateObject A model object containing the name of the new hierarchical child model. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelAddHierarchicalEntityChildWithHttpInfo(UUID appId, String versionId, UUID hEntityId, ModelAddCompositeEntityChildRequest hierarchicalChildModelCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddHierarchicalEntityChildValidateBeforeCall(appId, versionId, hEntityId, hierarchicalChildModelCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a single child in an existing hierarchical entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hierarchicalChildModelCreateObject A model object containing the name of the new hierarchical child model. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, ModelAddCompositeEntityChildRequest hierarchicalChildModelCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddHierarchicalEntityChildValidateBeforeCall(appId, versionId, hEntityId, hierarchicalChildModelCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddIntent
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentCreateObject A model object containing the name of the new intent. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created intent model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddIntentCall(UUID appId, String versionId, ModelCreateObject intentCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = intentCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/intents"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddIntentValidateBeforeCall(UUID appId, String versionId, ModelCreateObject intentCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddIntent(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddIntent(Async)");
        }

        // verify the required parameter 'intentCreateObject' is set
        if (intentCreateObject == null) {
            throw new ApiException("Missing the required parameter 'intentCreateObject' when calling modelAddIntent(Async)");
        }

        return modelAddIntentCall(appId, versionId, intentCreateObject, _callback);

    }

    /**
     * 
     * Adds an intent to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentCreateObject A model object containing the name of the new intent. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created intent model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelAddIntent(UUID appId, String versionId, ModelCreateObject intentCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelAddIntentWithHttpInfo(appId, versionId, intentCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds an intent to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentCreateObject A model object containing the name of the new intent. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created intent model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelAddIntentWithHttpInfo(UUID appId, String versionId, ModelCreateObject intentCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddIntentValidateBeforeCall(appId, versionId, intentCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds an intent to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentCreateObject A model object containing the name of the new intent. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created intent model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddIntentAsync(UUID appId, String versionId, ModelCreateObject intentCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddIntentValidateBeforeCall(appId, versionId, intentCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddPrebuilt
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An array of the created prebuilt extractor infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddPrebuiltCall(UUID appId, String versionId, List<String> prebuiltExtractorNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prebuiltExtractorNames;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/prebuilts"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddPrebuiltValidateBeforeCall(UUID appId, String versionId, List<String> prebuiltExtractorNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddPrebuilt(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddPrebuilt(Async)");
        }

        // verify the required parameter 'prebuiltExtractorNames' is set
        if (prebuiltExtractorNames == null) {
            throw new ApiException("Missing the required parameter 'prebuiltExtractorNames' when calling modelAddPrebuilt(Async)");
        }

        return modelAddPrebuiltCall(appId, versionId, prebuiltExtractorNames, _callback);

    }

    /**
     * 
     * Adds a list of prebuilt entities to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names. (required)
     * @return List&lt;PrebuiltEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An array of the created prebuilt extractor infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PrebuiltEntityExtractor> modelAddPrebuilt(UUID appId, String versionId, List<String> prebuiltExtractorNames) throws ApiException {
        ApiResponse<List<PrebuiltEntityExtractor>> localVarResp = modelAddPrebuiltWithHttpInfo(appId, versionId, prebuiltExtractorNames);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a list of prebuilt entities to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names. (required)
     * @return ApiResponse&lt;List&lt;PrebuiltEntityExtractor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An array of the created prebuilt extractor infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PrebuiltEntityExtractor>> modelAddPrebuiltWithHttpInfo(UUID appId, String versionId, List<String> prebuiltExtractorNames) throws ApiException {
        okhttp3.Call localVarCall = modelAddPrebuiltValidateBeforeCall(appId, versionId, prebuiltExtractorNames, null);
        Type localVarReturnType = new TypeToken<List<PrebuiltEntityExtractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a list of prebuilt entities to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An array of the created prebuilt extractor infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddPrebuiltAsync(UUID appId, String versionId, List<String> prebuiltExtractorNames, final ApiCallback<List<PrebuiltEntityExtractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddPrebuiltValidateBeforeCall(appId, versionId, prebuiltExtractorNames, _callback);
        Type localVarReturnType = new TypeToken<List<PrebuiltEntityExtractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelAddSubList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param wordListCreateObject Words list. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the newly created sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddSubListCall(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wordListCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "clEntityId" + "}", localVarApiClient.escapeString(clEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelAddSubListValidateBeforeCall(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelAddSubList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelAddSubList(Async)");
        }

        // verify the required parameter 'clEntityId' is set
        if (clEntityId == null) {
            throw new ApiException("Missing the required parameter 'clEntityId' when calling modelAddSubList(Async)");
        }

        // verify the required parameter 'wordListCreateObject' is set
        if (wordListCreateObject == null) {
            throw new ApiException("Missing the required parameter 'wordListCreateObject' when calling modelAddSubList(Async)");
        }

        return modelAddSubListCall(appId, versionId, clEntityId, wordListCreateObject, _callback);

    }

    /**
     * 
     * Adds a sublist to an existing list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param wordListCreateObject Words list. (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the newly created sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public Long modelAddSubList(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject) throws ApiException {
        ApiResponse<Long> localVarResp = modelAddSubListWithHttpInfo(appId, versionId, clEntityId, wordListCreateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a sublist to an existing list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param wordListCreateObject Words list. (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the newly created sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> modelAddSubListWithHttpInfo(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelAddSubListValidateBeforeCall(appId, versionId, clEntityId, wordListCreateObject, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a sublist to an existing list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param wordListCreateObject Words list. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the newly created sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelAddSubListAsync(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelAddSubListValidateBeforeCall(appId, versionId, clEntityId, wordListCreateObject, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelCreateClosedListEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateClosedListEntityRoleCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelCreateClosedListEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelCreateClosedListEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelCreateClosedListEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelCreateClosedListEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleCreateObject' is set
        if (entityRoleCreateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateClosedListEntityRole(Async)");
        }

        return modelCreateClosedListEntityRoleCall(appId, versionId, entityId, entityRoleCreateObject, _callback);

    }

    /**
     * Create a role for a list entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelCreateClosedListEntityRole(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelCreateClosedListEntityRoleWithHttpInfo(appId, versionId, entityId, entityRoleCreateObject);
        return localVarResp.getData();
    }

    /**
     * Create a role for a list entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelCreateClosedListEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelCreateClosedListEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a role for a list entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelCreateClosedListEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelCreateCompositeEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateCompositeEntityRoleCall(UUID appId, String versionId, UUID cEntityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "cEntityId" + "}", localVarApiClient.escapeString(cEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelCreateCompositeEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID cEntityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelCreateCompositeEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelCreateCompositeEntityRole(Async)");
        }

        // verify the required parameter 'cEntityId' is set
        if (cEntityId == null) {
            throw new ApiException("Missing the required parameter 'cEntityId' when calling modelCreateCompositeEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleCreateObject' is set
        if (entityRoleCreateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateCompositeEntityRole(Async)");
        }

        return modelCreateCompositeEntityRoleCall(appId, versionId, cEntityId, entityRoleCreateObject, _callback);

    }

    /**
     * Create a role for a composite entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelCreateCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelCreateCompositeEntityRoleWithHttpInfo(appId, versionId, cEntityId, entityRoleCreateObject);
        return localVarResp.getData();
    }

    /**
     * Create a role for a composite entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelCreateCompositeEntityRoleWithHttpInfo(UUID appId, String versionId, UUID cEntityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelCreateCompositeEntityRoleValidateBeforeCall(appId, versionId, cEntityId, entityRoleCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a role for a composite entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelCreateCompositeEntityRoleValidateBeforeCall(appId, versionId, cEntityId, entityRoleCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelCreateCustomPrebuiltEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateCustomPrebuiltEntityRoleCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelCreateCustomPrebuiltEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelCreateCustomPrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelCreateCustomPrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelCreateCustomPrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleCreateObject' is set
        if (entityRoleCreateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateCustomPrebuiltEntityRole(Async)");
        }

        return modelCreateCustomPrebuiltEntityRoleCall(appId, versionId, entityId, entityRoleCreateObject, _callback);

    }

    /**
     * Create a role for a prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelCreateCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelCreateCustomPrebuiltEntityRoleWithHttpInfo(appId, versionId, entityId, entityRoleCreateObject);
        return localVarResp.getData();
    }

    /**
     * Create a role for a prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelCreateCustomPrebuiltEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelCreateCustomPrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a role for a prebuilt entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelCreateCustomPrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelCreateEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateEntityRoleCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelCreateEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelCreateEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelCreateEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelCreateEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleCreateObject' is set
        if (entityRoleCreateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateEntityRole(Async)");
        }

        return modelCreateEntityRoleCall(appId, versionId, entityId, entityRoleCreateObject, _callback);

    }

    /**
     * Create an entity role in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelCreateEntityRole(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelCreateEntityRoleWithHttpInfo(appId, versionId, entityId, entityRoleCreateObject);
        return localVarResp.getData();
    }

    /**
     * Create an entity role in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelCreateEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelCreateEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an entity role in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateEntityRoleAsync(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelCreateEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelCreateHierarchicalEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateHierarchicalEntityRoleCall(UUID appId, String versionId, UUID hEntityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelCreateHierarchicalEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelCreateHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelCreateHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelCreateHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleCreateObject' is set
        if (entityRoleCreateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateHierarchicalEntityRole(Async)");
        }

        return modelCreateHierarchicalEntityRoleCall(appId, versionId, hEntityId, entityRoleCreateObject, _callback);

    }

    /**
     * Create a role for an hierarchical entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelCreateHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelCreateHierarchicalEntityRoleWithHttpInfo(appId, versionId, hEntityId, entityRoleCreateObject);
        return localVarResp.getData();
    }

    /**
     * Create a role for an hierarchical entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelCreateHierarchicalEntityRoleWithHttpInfo(UUID appId, String versionId, UUID hEntityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelCreateHierarchicalEntityRoleValidateBeforeCall(appId, versionId, hEntityId, entityRoleCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a role for an hierarchical entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelCreateHierarchicalEntityRoleValidateBeforeCall(appId, versionId, hEntityId, entityRoleCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelCreatePatternAnyEntityModel
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param extractorCreateObject A model object containing the name and explicit list for the new Pattern.Any entity extractor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created Pattern.Any entity model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreatePatternAnyEntityModelCall(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = extractorCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelCreatePatternAnyEntityModelValidateBeforeCall(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelCreatePatternAnyEntityModel(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelCreatePatternAnyEntityModel(Async)");
        }

        // verify the required parameter 'extractorCreateObject' is set
        if (extractorCreateObject == null) {
            throw new ApiException("Missing the required parameter 'extractorCreateObject' when calling modelCreatePatternAnyEntityModel(Async)");
        }

        return modelCreatePatternAnyEntityModelCall(appId, versionId, extractorCreateObject, _callback);

    }

    /**
     * Adds a pattern.any entity extractor to a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param extractorCreateObject A model object containing the name and explicit list for the new Pattern.Any entity extractor. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created Pattern.Any entity model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelCreatePatternAnyEntityModel(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelCreatePatternAnyEntityModelWithHttpInfo(appId, versionId, extractorCreateObject);
        return localVarResp.getData();
    }

    /**
     * Adds a pattern.any entity extractor to a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param extractorCreateObject A model object containing the name and explicit list for the new Pattern.Any entity extractor. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created Pattern.Any entity model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelCreatePatternAnyEntityModelWithHttpInfo(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelCreatePatternAnyEntityModelValidateBeforeCall(appId, versionId, extractorCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a pattern.any entity extractor to a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param extractorCreateObject A model object containing the name and explicit list for the new Pattern.Any entity extractor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created Pattern.Any entity model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreatePatternAnyEntityModelAsync(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelCreatePatternAnyEntityModelValidateBeforeCall(appId, versionId, extractorCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelCreatePatternAnyEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreatePatternAnyEntityRoleCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelCreatePatternAnyEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelCreatePatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelCreatePatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelCreatePatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleCreateObject' is set
        if (entityRoleCreateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleCreateObject' when calling modelCreatePatternAnyEntityRole(Async)");
        }

        return modelCreatePatternAnyEntityRoleCall(appId, versionId, entityId, entityRoleCreateObject, _callback);

    }

    /**
     * Create a role for an Pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelCreatePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelCreatePatternAnyEntityRoleWithHttpInfo(appId, versionId, entityId, entityRoleCreateObject);
        return localVarResp.getData();
    }

    /**
     * Create a role for an Pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelCreatePatternAnyEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelCreatePatternAnyEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a role for an Pattern.any entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreatePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelCreatePatternAnyEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelCreatePrebuiltEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreatePrebuiltEntityRoleCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelCreatePrebuiltEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelCreatePrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelCreatePrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelCreatePrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleCreateObject' is set
        if (entityRoleCreateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleCreateObject' when calling modelCreatePrebuiltEntityRole(Async)");
        }

        return modelCreatePrebuiltEntityRoleCall(appId, versionId, entityId, entityRoleCreateObject, _callback);

    }

    /**
     * Create a role for a prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelCreatePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelCreatePrebuiltEntityRoleWithHttpInfo(appId, versionId, entityId, entityRoleCreateObject);
        return localVarResp.getData();
    }

    /**
     * Create a role for a prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelCreatePrebuiltEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelCreatePrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a role for a prebuilt entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreatePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelCreatePrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelCreateRegexEntityModel
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for the new regular expression entity extractor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateRegexEntityModelCall(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regexEntityExtractorCreateObj;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/regexentities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelCreateRegexEntityModelValidateBeforeCall(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelCreateRegexEntityModel(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelCreateRegexEntityModel(Async)");
        }

        // verify the required parameter 'regexEntityExtractorCreateObj' is set
        if (regexEntityExtractorCreateObj == null) {
            throw new ApiException("Missing the required parameter 'regexEntityExtractorCreateObj' when calling modelCreateRegexEntityModel(Async)");
        }

        return modelCreateRegexEntityModelCall(appId, versionId, regexEntityExtractorCreateObj, _callback);

    }

    /**
     * Adds a regular expression entity model to a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for the new regular expression entity extractor. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelCreateRegexEntityModel(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj) throws ApiException {
        ApiResponse<UUID> localVarResp = modelCreateRegexEntityModelWithHttpInfo(appId, versionId, regexEntityExtractorCreateObj);
        return localVarResp.getData();
    }

    /**
     * Adds a regular expression entity model to a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for the new regular expression entity extractor. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelCreateRegexEntityModelWithHttpInfo(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj) throws ApiException {
        okhttp3.Call localVarCall = modelCreateRegexEntityModelValidateBeforeCall(appId, versionId, regexEntityExtractorCreateObj, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a regular expression entity model to a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for the new regular expression entity extractor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateRegexEntityModelAsync(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelCreateRegexEntityModelValidateBeforeCall(appId, versionId, regexEntityExtractorCreateObj, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelCreateRegexEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateRegexEntityRoleCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleCreateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelCreateRegexEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelCreateRegexEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelCreateRegexEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelCreateRegexEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleCreateObject' is set
        if (entityRoleCreateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleCreateObject' when calling modelCreateRegexEntityRole(Async)");
        }

        return modelCreateRegexEntityRoleCall(appId, versionId, entityId, entityRoleCreateObject, _callback);

    }

    /**
     * Create a role for an regular expression entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return UUID
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UUID modelCreateRegexEntityRole(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        ApiResponse<UUID> localVarResp = modelCreateRegexEntityRoleWithHttpInfo(appId, versionId, entityId, entityRoleCreateObject);
        return localVarResp.getData();
    }

    /**
     * Create a role for an regular expression entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @return ApiResponse&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UUID> modelCreateRegexEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject) throws ApiException {
        okhttp3.Call localVarCall = modelCreateRegexEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, null);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a role for an regular expression entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity model ID. (required)
     * @param entityRoleCreateObject An entity role object containing the name of role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The ID of the created entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelCreateRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, EntityRoleCreateObject entityRoleCreateObject, final ApiCallback<UUID> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelCreateRegexEntityRoleValidateBeforeCall(appId, versionId, entityId, entityRoleCreateObject, _callback);
        Type localVarReturnType = new TypeToken<UUID>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteClosedList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity model ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully delete list entity from a version of application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteClosedListCall(UUID appId, String versionId, UUID clEntityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "clEntityId" + "}", localVarApiClient.escapeString(clEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteClosedListValidateBeforeCall(UUID appId, String versionId, UUID clEntityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteClosedList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteClosedList(Async)");
        }

        // verify the required parameter 'clEntityId' is set
        if (clEntityId == null) {
            throw new ApiException("Missing the required parameter 'clEntityId' when calling modelDeleteClosedList(Async)");
        }

        return modelDeleteClosedListCall(appId, versionId, clEntityId, _callback);

    }

    /**
     * 
     * Deletes a list entity model from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity model ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully delete list entity from a version of application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteClosedList(UUID appId, String versionId, UUID clEntityId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteClosedListWithHttpInfo(appId, versionId, clEntityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a list entity model from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity model ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully delete list entity from a version of application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteClosedListWithHttpInfo(UUID appId, String versionId, UUID clEntityId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteClosedListValidateBeforeCall(appId, versionId, clEntityId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a list entity model from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity model ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully delete list entity from a version of application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteClosedListAsync(UUID appId, String versionId, UUID clEntityId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteClosedListValidateBeforeCall(appId, versionId, clEntityId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteClosedListEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteClosedListEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteClosedListEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteClosedListEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteClosedListEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelDeleteClosedListEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelDeleteClosedListEntityRole(Async)");
        }

        return modelDeleteClosedListEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Delete a role for a given list entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteClosedListEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete a role for a given list entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteClosedListEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteClosedListEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a role for a given list entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteClosedListEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteCompositeEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted composite entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteCompositeEntityCall(UUID appId, String versionId, UUID cEntityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "cEntityId" + "}", localVarApiClient.escapeString(cEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteCompositeEntityValidateBeforeCall(UUID appId, String versionId, UUID cEntityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteCompositeEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteCompositeEntity(Async)");
        }

        // verify the required parameter 'cEntityId' is set
        if (cEntityId == null) {
            throw new ApiException("Missing the required parameter 'cEntityId' when calling modelDeleteCompositeEntity(Async)");
        }

        return modelDeleteCompositeEntityCall(appId, versionId, cEntityId, _callback);

    }

    /**
     * 
     * Deletes a composite entity from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted composite entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteCompositeEntity(UUID appId, String versionId, UUID cEntityId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteCompositeEntityWithHttpInfo(appId, versionId, cEntityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a composite entity from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted composite entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteCompositeEntityWithHttpInfo(UUID appId, String versionId, UUID cEntityId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteCompositeEntityValidateBeforeCall(appId, versionId, cEntityId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a composite entity from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted composite entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteCompositeEntityValidateBeforeCall(appId, versionId, cEntityId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteCompositeEntityChild
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param cChildId The hierarchical entity extractor child ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteCompositeEntityChildCall(UUID appId, String versionId, UUID cEntityId, UUID cChildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/children/{cChildId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "cEntityId" + "}", localVarApiClient.escapeString(cEntityId.toString()))
            .replace("{" + "cChildId" + "}", localVarApiClient.escapeString(cChildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteCompositeEntityChildValidateBeforeCall(UUID appId, String versionId, UUID cEntityId, UUID cChildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteCompositeEntityChild(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteCompositeEntityChild(Async)");
        }

        // verify the required parameter 'cEntityId' is set
        if (cEntityId == null) {
            throw new ApiException("Missing the required parameter 'cEntityId' when calling modelDeleteCompositeEntityChild(Async)");
        }

        // verify the required parameter 'cChildId' is set
        if (cChildId == null) {
            throw new ApiException("Missing the required parameter 'cChildId' when calling modelDeleteCompositeEntityChild(Async)");
        }

        return modelDeleteCompositeEntityChildCall(appId, versionId, cEntityId, cChildId, _callback);

    }

    /**
     * 
     * Deletes a composite entity extractor child from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param cChildId The hierarchical entity extractor child ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, UUID cChildId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteCompositeEntityChildWithHttpInfo(appId, versionId, cEntityId, cChildId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a composite entity extractor child from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param cChildId The hierarchical entity extractor child ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteCompositeEntityChildWithHttpInfo(UUID appId, String versionId, UUID cEntityId, UUID cChildId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteCompositeEntityChildValidateBeforeCall(appId, versionId, cEntityId, cChildId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a composite entity extractor child from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param cChildId The hierarchical entity extractor child ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, UUID cChildId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteCompositeEntityChildValidateBeforeCall(appId, versionId, cEntityId, cChildId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteCompositeEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteCompositeEntityRoleCall(UUID appId, String versionId, UUID cEntityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "cEntityId" + "}", localVarApiClient.escapeString(cEntityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteCompositeEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID cEntityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteCompositeEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteCompositeEntityRole(Async)");
        }

        // verify the required parameter 'cEntityId' is set
        if (cEntityId == null) {
            throw new ApiException("Missing the required parameter 'cEntityId' when calling modelDeleteCompositeEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelDeleteCompositeEntityRole(Async)");
        }

        return modelDeleteCompositeEntityRoleCall(appId, versionId, cEntityId, roleId, _callback);

    }

    /**
     * Delete a role for a given composite entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId The entity role Id. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteCompositeEntityRoleWithHttpInfo(appId, versionId, cEntityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete a role for a given composite entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId The entity role Id. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteCompositeEntityRoleWithHttpInfo(UUID appId, String versionId, UUID cEntityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteCompositeEntityRoleValidateBeforeCall(appId, versionId, cEntityId, roleId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a role for a given composite entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteCompositeEntityRoleValidateBeforeCall(appId, versionId, cEntityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteCustomEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteCustomEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteCustomEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteCustomEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteCustomEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelDeleteCustomEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelDeleteCustomEntityRole(Async)");
        }

        return modelDeleteCustomEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Delete a role for a given prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteCustomEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete a role for a given prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteCustomEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteCustomEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a role for a given prebuilt entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteCustomEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteCustomPrebuiltDomain
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param domainName Domain name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteCustomPrebuiltDomainCall(UUID appId, String versionId, String domainName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltdomains/{domainName}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteCustomPrebuiltDomainValidateBeforeCall(UUID appId, String versionId, String domainName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteCustomPrebuiltDomain(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteCustomPrebuiltDomain(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling modelDeleteCustomPrebuiltDomain(Async)");
        }

        return modelDeleteCustomPrebuiltDomainCall(appId, versionId, domainName, _callback);

    }

    /**
     * 
     * Deletes a prebuilt domain&#39;s models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param domainName Domain name. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteCustomPrebuiltDomain(UUID appId, String versionId, String domainName) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteCustomPrebuiltDomainWithHttpInfo(appId, versionId, domainName);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a prebuilt domain&#39;s models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param domainName Domain name. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteCustomPrebuiltDomainWithHttpInfo(UUID appId, String versionId, String domainName) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteCustomPrebuiltDomainValidateBeforeCall(appId, versionId, domainName, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a prebuilt domain&#39;s models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param domainName Domain name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteCustomPrebuiltDomainAsync(UUID appId, String versionId, String domainName, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteCustomPrebuiltDomainValidateBeforeCall(appId, versionId, domainName, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteEntityCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities/{entityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteEntityValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteEntity(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelDeleteEntity(Async)");
        }

        return modelDeleteEntityCall(appId, versionId, entityId, _callback);

    }

    /**
     * 
     * Deletes an entity from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteEntity(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteEntityWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an entity from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteEntityWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteEntityValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an entity from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteEntityAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteEntityValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelDeleteEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelDeleteEntityRole(Async)");
        }

        return modelDeleteEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Delete an entity role in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete an entity role in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an entity role in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteExplicitListItem
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The pattern.any entity id. (required)
     * @param itemId The explicit list item which will be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteExplicitListItemCall(UUID appId, String versionId, UUID entityId, Long itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteExplicitListItemValidateBeforeCall(UUID appId, String versionId, UUID entityId, Long itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteExplicitListItem(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteExplicitListItem(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelDeleteExplicitListItem(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling modelDeleteExplicitListItem(Async)");
        }

        return modelDeleteExplicitListItemCall(appId, versionId, entityId, itemId, _callback);

    }

    /**
     * Delete an item from the explicit (exception) list for a Pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The pattern.any entity id. (required)
     * @param itemId The explicit list item which will be deleted. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteExplicitListItem(UUID appId, String versionId, UUID entityId, Long itemId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteExplicitListItemWithHttpInfo(appId, versionId, entityId, itemId);
        return localVarResp.getData();
    }

    /**
     * Delete an item from the explicit (exception) list for a Pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The pattern.any entity id. (required)
     * @param itemId The explicit list item which will be deleted. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteExplicitListItemWithHttpInfo(UUID appId, String versionId, UUID entityId, Long itemId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteExplicitListItemValidateBeforeCall(appId, versionId, entityId, itemId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an item from the explicit (exception) list for a Pattern.any entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The pattern.any entity id. (required)
     * @param itemId The explicit list item which will be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteExplicitListItemAsync(UUID appId, String versionId, UUID entityId, Long itemId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteExplicitListItemValidateBeforeCall(appId, versionId, entityId, itemId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteHierarchicalEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteHierarchicalEntityCall(UUID appId, String versionId, UUID hEntityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteHierarchicalEntityValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteHierarchicalEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteHierarchicalEntity(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelDeleteHierarchicalEntity(Async)");
        }

        return modelDeleteHierarchicalEntityCall(appId, versionId, hEntityId, _callback);

    }

    /**
     * 
     * Deletes a hierarchical entity from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteHierarchicalEntity(UUID appId, String versionId, UUID hEntityId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteHierarchicalEntityWithHttpInfo(appId, versionId, hEntityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a hierarchical entity from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteHierarchicalEntityWithHttpInfo(UUID appId, String versionId, UUID hEntityId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteHierarchicalEntityValidateBeforeCall(appId, versionId, hEntityId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a hierarchical entity from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteHierarchicalEntityValidateBeforeCall(appId, versionId, hEntityId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteHierarchicalEntityChild
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteHierarchicalEntityChildCall(UUID appId, String versionId, UUID hEntityId, UUID hChildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()))
            .replace("{" + "hChildId" + "}", localVarApiClient.escapeString(hChildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteHierarchicalEntityChildValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, UUID hChildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelDeleteHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'hChildId' is set
        if (hChildId == null) {
            throw new ApiException("Missing the required parameter 'hChildId' when calling modelDeleteHierarchicalEntityChild(Async)");
        }

        return modelDeleteHierarchicalEntityChildCall(appId, versionId, hEntityId, hChildId, _callback);

    }

    /**
     * 
     * Deletes a hierarchical entity extractor child in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteHierarchicalEntityChildWithHttpInfo(appId, versionId, hEntityId, hChildId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a hierarchical entity extractor child in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteHierarchicalEntityChildWithHttpInfo(UUID appId, String versionId, UUID hEntityId, UUID hChildId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteHierarchicalEntityChildValidateBeforeCall(appId, versionId, hEntityId, hChildId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a hierarchical entity extractor child in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteHierarchicalEntityChildValidateBeforeCall(appId, versionId, hEntityId, hChildId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteHierarchicalEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteHierarchicalEntityRoleCall(UUID appId, String versionId, UUID hEntityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteHierarchicalEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelDeleteHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelDeleteHierarchicalEntityRole(Async)");
        }

        return modelDeleteHierarchicalEntityRoleCall(appId, versionId, hEntityId, roleId, _callback);

    }

    /**
     * Delete a role for a given hierarchical role in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId The entity role Id. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteHierarchicalEntityRoleWithHttpInfo(appId, versionId, hEntityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete a role for a given hierarchical role in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId The entity role Id. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteHierarchicalEntityRoleWithHttpInfo(UUID appId, String versionId, UUID hEntityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteHierarchicalEntityRoleValidateBeforeCall(appId, versionId, hEntityId, roleId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a role for a given hierarchical role in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteHierarchicalEntityRoleValidateBeforeCall(appId, versionId, hEntityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteIntent
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param deleteUtterances If true, deletes the intent&#39;s example utterances. If false, moves the example utterances to the None intent. The default value is false. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteIntentCall(UUID appId, String versionId, UUID intentId, Boolean deleteUtterances, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/intents/{intentId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "intentId" + "}", localVarApiClient.escapeString(intentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteUtterances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteUtterances", deleteUtterances));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteIntentValidateBeforeCall(UUID appId, String versionId, UUID intentId, Boolean deleteUtterances, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteIntent(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteIntent(Async)");
        }

        // verify the required parameter 'intentId' is set
        if (intentId == null) {
            throw new ApiException("Missing the required parameter 'intentId' when calling modelDeleteIntent(Async)");
        }

        return modelDeleteIntentCall(appId, versionId, intentId, deleteUtterances, _callback);

    }

    /**
     * 
     * Deletes an intent from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param deleteUtterances If true, deletes the intent&#39;s example utterances. If false, moves the example utterances to the None intent. The default value is false. (optional, default to false)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteIntent(UUID appId, String versionId, UUID intentId, Boolean deleteUtterances) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteIntentWithHttpInfo(appId, versionId, intentId, deleteUtterances);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an intent from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param deleteUtterances If true, deletes the intent&#39;s example utterances. If false, moves the example utterances to the None intent. The default value is false. (optional, default to false)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteIntentWithHttpInfo(UUID appId, String versionId, UUID intentId, Boolean deleteUtterances) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteIntentValidateBeforeCall(appId, versionId, intentId, deleteUtterances, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an intent from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param deleteUtterances If true, deletes the intent&#39;s example utterances. If false, moves the example utterances to the None intent. The default value is false. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteIntentAsync(UUID appId, String versionId, UUID intentId, Boolean deleteUtterances, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteIntentValidateBeforeCall(appId, versionId, intentId, deleteUtterances, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeletePatternAnyEntityModel
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeletePatternAnyEntityModelCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeletePatternAnyEntityModelValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeletePatternAnyEntityModel(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeletePatternAnyEntityModel(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelDeletePatternAnyEntityModel(Async)");
        }

        return modelDeletePatternAnyEntityModelCall(appId, versionId, entityId, _callback);

    }

    /**
     * Deletes a Pattern.Any entity extractor from a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeletePatternAnyEntityModel(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeletePatternAnyEntityModelWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * Deletes a Pattern.Any entity extractor from a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeletePatternAnyEntityModelWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelDeletePatternAnyEntityModelValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a Pattern.Any entity extractor from a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeletePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeletePatternAnyEntityModelValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeletePatternAnyEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeletePatternAnyEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeletePatternAnyEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeletePatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeletePatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelDeletePatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelDeletePatternAnyEntityRole(Async)");
        }

        return modelDeletePatternAnyEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Delete a role for a given Pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeletePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeletePatternAnyEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete a role for a given Pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeletePatternAnyEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelDeletePatternAnyEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a role for a given Pattern.any entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeletePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeletePatternAnyEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeletePrebuilt
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltId The prebuilt entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeletePrebuiltCall(UUID appId, String versionId, UUID prebuiltId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "prebuiltId" + "}", localVarApiClient.escapeString(prebuiltId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeletePrebuiltValidateBeforeCall(UUID appId, String versionId, UUID prebuiltId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeletePrebuilt(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeletePrebuilt(Async)");
        }

        // verify the required parameter 'prebuiltId' is set
        if (prebuiltId == null) {
            throw new ApiException("Missing the required parameter 'prebuiltId' when calling modelDeletePrebuilt(Async)");
        }

        return modelDeletePrebuiltCall(appId, versionId, prebuiltId, _callback);

    }

    /**
     * 
     * Deletes a prebuilt entity extractor from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltId The prebuilt entity extractor ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeletePrebuilt(UUID appId, String versionId, UUID prebuiltId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeletePrebuiltWithHttpInfo(appId, versionId, prebuiltId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a prebuilt entity extractor from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltId The prebuilt entity extractor ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeletePrebuiltWithHttpInfo(UUID appId, String versionId, UUID prebuiltId) throws ApiException {
        okhttp3.Call localVarCall = modelDeletePrebuiltValidateBeforeCall(appId, versionId, prebuiltId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a prebuilt entity extractor from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltId The prebuilt entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeletePrebuiltAsync(UUID appId, String versionId, UUID prebuiltId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeletePrebuiltValidateBeforeCall(appId, versionId, prebuiltId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeletePrebuiltEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeletePrebuiltEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeletePrebuiltEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeletePrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeletePrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelDeletePrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelDeletePrebuiltEntityRole(Async)");
        }

        return modelDeletePrebuiltEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Delete a role in a prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeletePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeletePrebuiltEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete a role in a prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeletePrebuiltEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelDeletePrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a role in a prebuilt entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeletePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeletePrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteRegexEntityModel
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteRegexEntityModelCall(UUID appId, String versionId, UUID regexEntityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "regexEntityId" + "}", localVarApiClient.escapeString(regexEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteRegexEntityModelValidateBeforeCall(UUID appId, String versionId, UUID regexEntityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteRegexEntityModel(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteRegexEntityModel(Async)");
        }

        // verify the required parameter 'regexEntityId' is set
        if (regexEntityId == null) {
            throw new ApiException("Missing the required parameter 'regexEntityId' when calling modelDeleteRegexEntityModel(Async)");
        }

        return modelDeleteRegexEntityModelCall(appId, versionId, regexEntityId, _callback);

    }

    /**
     * Deletes a regular expression entity from a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity extractor ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteRegexEntityModel(UUID appId, String versionId, UUID regexEntityId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteRegexEntityModelWithHttpInfo(appId, versionId, regexEntityId);
        return localVarResp.getData();
    }

    /**
     * Deletes a regular expression entity from a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity extractor ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteRegexEntityModelWithHttpInfo(UUID appId, String versionId, UUID regexEntityId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteRegexEntityModelValidateBeforeCall(appId, versionId, regexEntityId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a regular expression entity from a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteRegexEntityModelValidateBeforeCall(appId, versionId, regexEntityId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteRegexEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteRegexEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteRegexEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteRegexEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteRegexEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelDeleteRegexEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelDeleteRegexEntityRole(Async)");
        }

        return modelDeleteRegexEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Delete a role for a given regular expression in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteRegexEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete a role for a given regular expression in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteRegexEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteRegexEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a role for a given regular expression in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteRegexEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelDeleteSubList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param subListId The sublist ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteSubListCall(UUID appId, String versionId, UUID clEntityId, Long subListId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "clEntityId" + "}", localVarApiClient.escapeString(clEntityId.toString()))
            .replace("{" + "subListId" + "}", localVarApiClient.escapeString(subListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelDeleteSubListValidateBeforeCall(UUID appId, String versionId, UUID clEntityId, Long subListId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelDeleteSubList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelDeleteSubList(Async)");
        }

        // verify the required parameter 'clEntityId' is set
        if (clEntityId == null) {
            throw new ApiException("Missing the required parameter 'clEntityId' when calling modelDeleteSubList(Async)");
        }

        // verify the required parameter 'subListId' is set
        if (subListId == null) {
            throw new ApiException("Missing the required parameter 'subListId' when calling modelDeleteSubList(Async)");
        }

        return modelDeleteSubListCall(appId, versionId, clEntityId, subListId, _callback);

    }

    /**
     * 
     * Deletes a sublist of a specific list entity model from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param subListId The sublist ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelDeleteSubList(UUID appId, String versionId, UUID clEntityId, Long subListId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelDeleteSubListWithHttpInfo(appId, versionId, clEntityId, subListId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a sublist of a specific list entity model from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param subListId The sublist ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelDeleteSubListWithHttpInfo(UUID appId, String versionId, UUID clEntityId, Long subListId) throws ApiException {
        okhttp3.Call localVarCall = modelDeleteSubListValidateBeforeCall(appId, versionId, clEntityId, subListId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a sublist of a specific list entity model from a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param subListId The sublist ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelDeleteSubListAsync(UUID appId, String versionId, UUID clEntityId, Long subListId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelDeleteSubListValidateBeforeCall(appId, versionId, clEntityId, subListId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelExamples
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param modelId The ID (GUID) of the model. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of example utterances for the model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelExamplesCall(UUID appId, String versionId, String modelId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/models/{modelId}/examples"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "modelId" + "}", localVarApiClient.escapeString(modelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelExamplesValidateBeforeCall(UUID appId, String versionId, String modelId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelExamples(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelExamples(Async)");
        }

        // verify the required parameter 'modelId' is set
        if (modelId == null) {
            throw new ApiException("Missing the required parameter 'modelId' when calling modelExamples(Async)");
        }

        return modelExamplesCall(appId, versionId, modelId, skip, take, _callback);

    }

    /**
     * 
     * Gets the example utterances for the given intent or entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param modelId The ID (GUID) of the model. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;LabelTextObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of example utterances for the model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<LabelTextObject> modelExamples(UUID appId, String versionId, String modelId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<LabelTextObject>> localVarResp = modelExamplesWithHttpInfo(appId, versionId, modelId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the example utterances for the given intent or entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param modelId The ID (GUID) of the model. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;LabelTextObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of example utterances for the model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LabelTextObject>> modelExamplesWithHttpInfo(UUID appId, String versionId, String modelId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelExamplesValidateBeforeCall(appId, versionId, modelId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<LabelTextObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the example utterances for the given intent or entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param modelId The ID (GUID) of the model. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of example utterances for the model. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelExamplesAsync(UUID appId, String versionId, String modelId, Integer skip, Integer take, final ApiCallback<List<LabelTextObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelExamplesValidateBeforeCall(appId, versionId, modelId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<LabelTextObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetClosedList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list model ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetClosedListCall(UUID appId, String versionId, UUID clEntityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "clEntityId" + "}", localVarApiClient.escapeString(clEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetClosedListValidateBeforeCall(UUID appId, String versionId, UUID clEntityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetClosedList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetClosedList(Async)");
        }

        // verify the required parameter 'clEntityId' is set
        if (clEntityId == null) {
            throw new ApiException("Missing the required parameter 'clEntityId' when calling modelGetClosedList(Async)");
        }

        return modelGetClosedListCall(appId, versionId, clEntityId, _callback);

    }

    /**
     * 
     * Gets information about a list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list model ID. (required)
     * @return ClosedListEntityExtractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ClosedListEntityExtractor modelGetClosedList(UUID appId, String versionId, UUID clEntityId) throws ApiException {
        ApiResponse<ClosedListEntityExtractor> localVarResp = modelGetClosedListWithHttpInfo(appId, versionId, clEntityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list model ID. (required)
     * @return ApiResponse&lt;ClosedListEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClosedListEntityExtractor> modelGetClosedListWithHttpInfo(UUID appId, String versionId, UUID clEntityId) throws ApiException {
        okhttp3.Call localVarCall = modelGetClosedListValidateBeforeCall(appId, versionId, clEntityId, null);
        Type localVarReturnType = new TypeToken<ClosedListEntityExtractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list model ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetClosedListAsync(UUID appId, String versionId, UUID clEntityId, final ApiCallback<ClosedListEntityExtractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetClosedListValidateBeforeCall(appId, versionId, clEntityId, _callback);
        Type localVarReturnType = new TypeToken<ClosedListEntityExtractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetClosedListEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetClosedListEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetClosedListEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetClosedListEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetClosedListEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelGetClosedListEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelGetClosedListEntityRole(Async)");
        }

        return modelGetClosedListEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Get one role for a given list entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return EntityRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public EntityRole modelGetClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<EntityRole> localVarResp = modelGetClosedListEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get one role for a given list entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return ApiResponse&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityRole> modelGetClosedListEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelGetClosedListEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one role for a given list entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<EntityRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetClosedListEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetCompositeEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The composite entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetCompositeEntityCall(UUID appId, String versionId, UUID cEntityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "cEntityId" + "}", localVarApiClient.escapeString(cEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetCompositeEntityValidateBeforeCall(UUID appId, String versionId, UUID cEntityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetCompositeEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetCompositeEntity(Async)");
        }

        // verify the required parameter 'cEntityId' is set
        if (cEntityId == null) {
            throw new ApiException("Missing the required parameter 'cEntityId' when calling modelGetCompositeEntity(Async)");
        }

        return modelGetCompositeEntityCall(appId, versionId, cEntityId, _callback);

    }

    /**
     * 
     * Gets information about a composite entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @return CompositeEntityExtractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The composite entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public CompositeEntityExtractor modelGetCompositeEntity(UUID appId, String versionId, UUID cEntityId) throws ApiException {
        ApiResponse<CompositeEntityExtractor> localVarResp = modelGetCompositeEntityWithHttpInfo(appId, versionId, cEntityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a composite entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @return ApiResponse&lt;CompositeEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The composite entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompositeEntityExtractor> modelGetCompositeEntityWithHttpInfo(UUID appId, String versionId, UUID cEntityId) throws ApiException {
        okhttp3.Call localVarCall = modelGetCompositeEntityValidateBeforeCall(appId, versionId, cEntityId, null);
        Type localVarReturnType = new TypeToken<CompositeEntityExtractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a composite entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The composite entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, final ApiCallback<CompositeEntityExtractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetCompositeEntityValidateBeforeCall(appId, versionId, cEntityId, _callback);
        Type localVarReturnType = new TypeToken<CompositeEntityExtractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetCompositeEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetCompositeEntityRoleCall(UUID appId, String versionId, UUID cEntityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "cEntityId" + "}", localVarApiClient.escapeString(cEntityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetCompositeEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID cEntityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetCompositeEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetCompositeEntityRole(Async)");
        }

        // verify the required parameter 'cEntityId' is set
        if (cEntityId == null) {
            throw new ApiException("Missing the required parameter 'cEntityId' when calling modelGetCompositeEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelGetCompositeEntityRole(Async)");
        }

        return modelGetCompositeEntityRoleCall(appId, versionId, cEntityId, roleId, _callback);

    }

    /**
     * Get one role for a given composite entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId entity role ID. (required)
     * @return EntityRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public EntityRole modelGetCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId) throws ApiException {
        ApiResponse<EntityRole> localVarResp = modelGetCompositeEntityRoleWithHttpInfo(appId, versionId, cEntityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get one role for a given composite entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId entity role ID. (required)
     * @return ApiResponse&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityRole> modelGetCompositeEntityRoleWithHttpInfo(UUID appId, String versionId, UUID cEntityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelGetCompositeEntityRoleValidateBeforeCall(appId, versionId, cEntityId, roleId, null);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one role for a given composite entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId, final ApiCallback<EntityRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetCompositeEntityRoleValidateBeforeCall(appId, versionId, cEntityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetCustomEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetCustomEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetCustomEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetCustomEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetCustomEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelGetCustomEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelGetCustomEntityRole(Async)");
        }

        return modelGetCustomEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Get one role for a given prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return EntityRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public EntityRole modelGetCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<EntityRole> localVarResp = modelGetCustomEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get one role for a given prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return ApiResponse&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityRole> modelGetCustomEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelGetCustomEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one role for a given prebuilt entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<EntityRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetCustomEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetEntityCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities/{entityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetEntityValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetEntity(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelGetEntity(Async)");
        }

        return modelGetEntityCall(appId, versionId, entityId, _callback);

    }

    /**
     * 
     * Gets information about an entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @return EntityExtractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public EntityExtractor modelGetEntity(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<EntityExtractor> localVarResp = modelGetEntityWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about an entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @return ApiResponse&lt;EntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityExtractor> modelGetEntityWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelGetEntityValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<EntityExtractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about an entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetEntityAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<EntityExtractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetEntityValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<EntityExtractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelGetEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelGetEntityRole(Async)");
        }

        return modelGetEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Get one role for a given entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return EntityRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public EntityRole modelGetEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<EntityRole> localVarResp = modelGetEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get one role for a given entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return ApiResponse&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityRole> modelGetEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelGetEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one role for a given entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<EntityRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetExplicitList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the explicit list items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetExplicitListCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetExplicitListValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetExplicitList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetExplicitList(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelGetExplicitList(Async)");
        }

        return modelGetExplicitListCall(appId, versionId, entityId, _callback);

    }

    /**
     * Get the explicit (exception) list of the pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity id. (required)
     * @return List&lt;ExplicitListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the explicit list items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ExplicitListItem> modelGetExplicitList(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<List<ExplicitListItem>> localVarResp = modelGetExplicitListWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * Get the explicit (exception) list of the pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity id. (required)
     * @return ApiResponse&lt;List&lt;ExplicitListItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the explicit list items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ExplicitListItem>> modelGetExplicitListWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelGetExplicitListValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<List<ExplicitListItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the explicit (exception) list of the pattern.any entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the explicit list items </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetExplicitListAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<List<ExplicitListItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetExplicitListValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<List<ExplicitListItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetExplicitListItem
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity Id. (required)
     * @param itemId The explicit list item Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An explicit list item info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetExplicitListItemCall(UUID appId, String versionId, UUID entityId, Long itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetExplicitListItemValidateBeforeCall(UUID appId, String versionId, UUID entityId, Long itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetExplicitListItem(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetExplicitListItem(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelGetExplicitListItem(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling modelGetExplicitListItem(Async)");
        }

        return modelGetExplicitListItemCall(appId, versionId, entityId, itemId, _callback);

    }

    /**
     * Get the explicit (exception) list of the pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity Id. (required)
     * @param itemId The explicit list item Id. (required)
     * @return ExplicitListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An explicit list item info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ExplicitListItem modelGetExplicitListItem(UUID appId, String versionId, UUID entityId, Long itemId) throws ApiException {
        ApiResponse<ExplicitListItem> localVarResp = modelGetExplicitListItemWithHttpInfo(appId, versionId, entityId, itemId);
        return localVarResp.getData();
    }

    /**
     * Get the explicit (exception) list of the pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity Id. (required)
     * @param itemId The explicit list item Id. (required)
     * @return ApiResponse&lt;ExplicitListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An explicit list item info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExplicitListItem> modelGetExplicitListItemWithHttpInfo(UUID appId, String versionId, UUID entityId, Long itemId) throws ApiException {
        okhttp3.Call localVarCall = modelGetExplicitListItemValidateBeforeCall(appId, versionId, entityId, itemId, null);
        Type localVarReturnType = new TypeToken<ExplicitListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the explicit (exception) list of the pattern.any entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity Id. (required)
     * @param itemId The explicit list item Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An explicit list item info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetExplicitListItemAsync(UUID appId, String versionId, UUID entityId, Long itemId, final ApiCallback<ExplicitListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetExplicitListItemValidateBeforeCall(appId, versionId, entityId, itemId, _callback);
        Type localVarReturnType = new TypeToken<ExplicitListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetHierarchicalEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A hierarchical entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetHierarchicalEntityCall(UUID appId, String versionId, UUID hEntityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetHierarchicalEntityValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetHierarchicalEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetHierarchicalEntity(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelGetHierarchicalEntity(Async)");
        }

        return modelGetHierarchicalEntityCall(appId, versionId, hEntityId, _callback);

    }

    /**
     * 
     * Gets information about a hierarchical entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @return HierarchicalEntityExtractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A hierarchical entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public HierarchicalEntityExtractor modelGetHierarchicalEntity(UUID appId, String versionId, UUID hEntityId) throws ApiException {
        ApiResponse<HierarchicalEntityExtractor> localVarResp = modelGetHierarchicalEntityWithHttpInfo(appId, versionId, hEntityId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a hierarchical entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @return ApiResponse&lt;HierarchicalEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A hierarchical entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HierarchicalEntityExtractor> modelGetHierarchicalEntityWithHttpInfo(UUID appId, String versionId, UUID hEntityId) throws ApiException {
        okhttp3.Call localVarCall = modelGetHierarchicalEntityValidateBeforeCall(appId, versionId, hEntityId, null);
        Type localVarReturnType = new TypeToken<HierarchicalEntityExtractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a hierarchical entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A hierarchical entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, final ApiCallback<HierarchicalEntityExtractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetHierarchicalEntityValidateBeforeCall(appId, versionId, hEntityId, _callback);
        Type localVarReturnType = new TypeToken<HierarchicalEntityExtractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetHierarchicalEntityChild
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The hierarchical entity child model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetHierarchicalEntityChildCall(UUID appId, String versionId, UUID hEntityId, UUID hChildId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()))
            .replace("{" + "hChildId" + "}", localVarApiClient.escapeString(hChildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetHierarchicalEntityChildValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, UUID hChildId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelGetHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'hChildId' is set
        if (hChildId == null) {
            throw new ApiException("Missing the required parameter 'hChildId' when calling modelGetHierarchicalEntityChild(Async)");
        }

        return modelGetHierarchicalEntityChildCall(appId, versionId, hEntityId, hChildId, _callback);

    }

    /**
     * 
     * Gets information about the child&#39;s model contained in an hierarchical entity child model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @return HierarchicalChildEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The hierarchical entity child model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public HierarchicalChildEntity modelGetHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId) throws ApiException {
        ApiResponse<HierarchicalChildEntity> localVarResp = modelGetHierarchicalEntityChildWithHttpInfo(appId, versionId, hEntityId, hChildId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the child&#39;s model contained in an hierarchical entity child model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @return ApiResponse&lt;HierarchicalChildEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The hierarchical entity child model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HierarchicalChildEntity> modelGetHierarchicalEntityChildWithHttpInfo(UUID appId, String versionId, UUID hEntityId, UUID hChildId) throws ApiException {
        okhttp3.Call localVarCall = modelGetHierarchicalEntityChildValidateBeforeCall(appId, versionId, hEntityId, hChildId, null);
        Type localVarReturnType = new TypeToken<HierarchicalChildEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the child&#39;s model contained in an hierarchical entity child model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The hierarchical entity child model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, final ApiCallback<HierarchicalChildEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetHierarchicalEntityChildValidateBeforeCall(appId, versionId, hEntityId, hChildId, _callback);
        Type localVarReturnType = new TypeToken<HierarchicalChildEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetHierarchicalEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetHierarchicalEntityRoleCall(UUID appId, String versionId, UUID hEntityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetHierarchicalEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelGetHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelGetHierarchicalEntityRole(Async)");
        }

        return modelGetHierarchicalEntityRoleCall(appId, versionId, hEntityId, roleId, _callback);

    }

    /**
     * Get one role for a given hierarchical entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId entity role ID. (required)
     * @return EntityRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public EntityRole modelGetHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId) throws ApiException {
        ApiResponse<EntityRole> localVarResp = modelGetHierarchicalEntityRoleWithHttpInfo(appId, versionId, hEntityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get one role for a given hierarchical entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId entity role ID. (required)
     * @return ApiResponse&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityRole> modelGetHierarchicalEntityRoleWithHttpInfo(UUID appId, String versionId, UUID hEntityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelGetHierarchicalEntityRoleValidateBeforeCall(appId, versionId, hEntityId, roleId, null);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one role for a given hierarchical entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId, final ApiCallback<EntityRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetHierarchicalEntityRoleValidateBeforeCall(appId, versionId, hEntityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetIntent
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An intent model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetIntentCall(UUID appId, String versionId, UUID intentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/intents/{intentId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "intentId" + "}", localVarApiClient.escapeString(intentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetIntentValidateBeforeCall(UUID appId, String versionId, UUID intentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetIntent(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetIntent(Async)");
        }

        // verify the required parameter 'intentId' is set
        if (intentId == null) {
            throw new ApiException("Missing the required parameter 'intentId' when calling modelGetIntent(Async)");
        }

        return modelGetIntentCall(appId, versionId, intentId, _callback);

    }

    /**
     * 
     * Gets information about the intent model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @return IntentClassifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An intent model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public IntentClassifier modelGetIntent(UUID appId, String versionId, UUID intentId) throws ApiException {
        ApiResponse<IntentClassifier> localVarResp = modelGetIntentWithHttpInfo(appId, versionId, intentId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the intent model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @return ApiResponse&lt;IntentClassifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An intent model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntentClassifier> modelGetIntentWithHttpInfo(UUID appId, String versionId, UUID intentId) throws ApiException {
        okhttp3.Call localVarCall = modelGetIntentValidateBeforeCall(appId, versionId, intentId, null);
        Type localVarReturnType = new TypeToken<IntentClassifier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the intent model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An intent model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetIntentAsync(UUID appId, String versionId, UUID intentId, final ApiCallback<IntentClassifier> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetIntentValidateBeforeCall(appId, versionId, intentId, _callback);
        Type localVarReturnType = new TypeToken<IntentClassifier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetPatternAnyEntityInfo
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A regular expression entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetPatternAnyEntityInfoCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetPatternAnyEntityInfoValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetPatternAnyEntityInfo(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetPatternAnyEntityInfo(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelGetPatternAnyEntityInfo(Async)");
        }

        return modelGetPatternAnyEntityInfoCall(appId, versionId, entityId, _callback);

    }

    /**
     * Gets information about the Pattern.Any model in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @return PatternAnyEntityExtractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A regular expression entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public PatternAnyEntityExtractor modelGetPatternAnyEntityInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<PatternAnyEntityExtractor> localVarResp = modelGetPatternAnyEntityInfoWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * Gets information about the Pattern.Any model in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @return ApiResponse&lt;PatternAnyEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A regular expression entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatternAnyEntityExtractor> modelGetPatternAnyEntityInfoWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelGetPatternAnyEntityInfoValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<PatternAnyEntityExtractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about the Pattern.Any model in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A regular expression entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetPatternAnyEntityInfoAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<PatternAnyEntityExtractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetPatternAnyEntityInfoValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<PatternAnyEntityExtractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetPatternAnyEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetPatternAnyEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetPatternAnyEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetPatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetPatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelGetPatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelGetPatternAnyEntityRole(Async)");
        }

        return modelGetPatternAnyEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Get one role for a given Pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return EntityRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public EntityRole modelGetPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<EntityRole> localVarResp = modelGetPatternAnyEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get one role for a given Pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return ApiResponse&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityRole> modelGetPatternAnyEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelGetPatternAnyEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one role for a given Pattern.any entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<EntityRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetPatternAnyEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetPrebuilt
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltId The prebuilt entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A prebuilt entity models info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetPrebuiltCall(UUID appId, String versionId, UUID prebuiltId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/prebuilts/{prebuiltId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "prebuiltId" + "}", localVarApiClient.escapeString(prebuiltId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetPrebuiltValidateBeforeCall(UUID appId, String versionId, UUID prebuiltId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetPrebuilt(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetPrebuilt(Async)");
        }

        // verify the required parameter 'prebuiltId' is set
        if (prebuiltId == null) {
            throw new ApiException("Missing the required parameter 'prebuiltId' when calling modelGetPrebuilt(Async)");
        }

        return modelGetPrebuiltCall(appId, versionId, prebuiltId, _callback);

    }

    /**
     * 
     * Gets information about a prebuilt entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltId The prebuilt entity extractor ID. (required)
     * @return PrebuiltEntityExtractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A prebuilt entity models info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public PrebuiltEntityExtractor modelGetPrebuilt(UUID appId, String versionId, UUID prebuiltId) throws ApiException {
        ApiResponse<PrebuiltEntityExtractor> localVarResp = modelGetPrebuiltWithHttpInfo(appId, versionId, prebuiltId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about a prebuilt entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltId The prebuilt entity extractor ID. (required)
     * @return ApiResponse&lt;PrebuiltEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A prebuilt entity models info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrebuiltEntityExtractor> modelGetPrebuiltWithHttpInfo(UUID appId, String versionId, UUID prebuiltId) throws ApiException {
        okhttp3.Call localVarCall = modelGetPrebuiltValidateBeforeCall(appId, versionId, prebuiltId, null);
        Type localVarReturnType = new TypeToken<PrebuiltEntityExtractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about a prebuilt entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param prebuiltId The prebuilt entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A prebuilt entity models info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetPrebuiltAsync(UUID appId, String versionId, UUID prebuiltId, final ApiCallback<PrebuiltEntityExtractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetPrebuiltValidateBeforeCall(appId, versionId, prebuiltId, _callback);
        Type localVarReturnType = new TypeToken<PrebuiltEntityExtractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetPrebuiltEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetPrebuiltEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetPrebuiltEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetPrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetPrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelGetPrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelGetPrebuiltEntityRole(Async)");
        }

        return modelGetPrebuiltEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Get one role for a given prebuilt entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return EntityRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public EntityRole modelGetPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<EntityRole> localVarResp = modelGetPrebuiltEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get one role for a given prebuilt entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return ApiResponse&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityRole> modelGetPrebuiltEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelGetPrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one role for a given prebuilt entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<EntityRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetPrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetRegexEntityEntityInfo
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity model ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A regular expression entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetRegexEntityEntityInfoCall(UUID appId, String versionId, UUID regexEntityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "regexEntityId" + "}", localVarApiClient.escapeString(regexEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetRegexEntityEntityInfoValidateBeforeCall(UUID appId, String versionId, UUID regexEntityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetRegexEntityEntityInfo(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetRegexEntityEntityInfo(Async)");
        }

        // verify the required parameter 'regexEntityId' is set
        if (regexEntityId == null) {
            throw new ApiException("Missing the required parameter 'regexEntityId' when calling modelGetRegexEntityEntityInfo(Async)");
        }

        return modelGetRegexEntityEntityInfoCall(appId, versionId, regexEntityId, _callback);

    }

    /**
     * Gets information about a regular expression entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity model ID. (required)
     * @return RegexEntityExtractor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A regular expression entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public RegexEntityExtractor modelGetRegexEntityEntityInfo(UUID appId, String versionId, UUID regexEntityId) throws ApiException {
        ApiResponse<RegexEntityExtractor> localVarResp = modelGetRegexEntityEntityInfoWithHttpInfo(appId, versionId, regexEntityId);
        return localVarResp.getData();
    }

    /**
     * Gets information about a regular expression entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity model ID. (required)
     * @return ApiResponse&lt;RegexEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A regular expression entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegexEntityExtractor> modelGetRegexEntityEntityInfoWithHttpInfo(UUID appId, String versionId, UUID regexEntityId) throws ApiException {
        okhttp3.Call localVarCall = modelGetRegexEntityEntityInfoValidateBeforeCall(appId, versionId, regexEntityId, null);
        Type localVarReturnType = new TypeToken<RegexEntityExtractor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about a regular expression entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity model ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A regular expression entity model info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetRegexEntityEntityInfoAsync(UUID appId, String versionId, UUID regexEntityId, final ApiCallback<RegexEntityExtractor> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetRegexEntityEntityInfoValidateBeforeCall(appId, versionId, regexEntityId, _callback);
        Type localVarReturnType = new TypeToken<RegexEntityExtractor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetRegexEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetRegexEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetRegexEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelGetRegexEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelGetRegexEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelGetRegexEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelGetRegexEntityRole(Async)");
        }

        return modelGetRegexEntityRoleCall(appId, versionId, entityId, roleId, _callback);

    }

    /**
     * Get one role for a given regular expression entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return EntityRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public EntityRole modelGetRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        ApiResponse<EntityRole> localVarResp = modelGetRegexEntityRoleWithHttpInfo(appId, versionId, entityId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get one role for a given regular expression entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @return ApiResponse&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntityRole> modelGetRegexEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId) throws ApiException {
        okhttp3.Call localVarCall = modelGetRegexEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, null);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get one role for a given regular expression entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity ID. (required)
     * @param roleId entity role ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An entity role </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, final ApiCallback<EntityRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetRegexEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, _callback);
        Type localVarReturnType = new TypeToken<EntityRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListClosedListEntityRoles
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListClosedListEntityRolesCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListClosedListEntityRolesValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListClosedListEntityRoles(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListClosedListEntityRoles(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelListClosedListEntityRoles(Async)");
        }

        return modelListClosedListEntityRolesCall(appId, versionId, entityId, _callback);

    }

    /**
     * Get all roles for a list entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return List&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityRole> modelListClosedListEntityRoles(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<List<EntityRole>> localVarResp = modelListClosedListEntityRolesWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * Get all roles for a list entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return ApiResponse&lt;List&lt;EntityRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityRole>> modelListClosedListEntityRolesWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelListClosedListEntityRolesValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for a list entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListClosedListEntityRolesAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<List<EntityRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListClosedListEntityRolesValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListClosedLists
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of list entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListClosedListsCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListClosedListsValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListClosedLists(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListClosedLists(Async)");
        }

        return modelListClosedListsCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * Gets information about all the list entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;ClosedListEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of list entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ClosedListEntityExtractor> modelListClosedLists(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<ClosedListEntityExtractor>> localVarResp = modelListClosedListsWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about all the list entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;ClosedListEntityExtractor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of list entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClosedListEntityExtractor>> modelListClosedListsWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListClosedListsValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<ClosedListEntityExtractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about all the list entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of list entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListClosedListsAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<ClosedListEntityExtractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListClosedListsValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<ClosedListEntityExtractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListCompositeEntities
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of composite entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCompositeEntitiesCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListCompositeEntitiesValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListCompositeEntities(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListCompositeEntities(Async)");
        }

        return modelListCompositeEntitiesCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * Gets information about all the composite entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;CompositeEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of composite entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<CompositeEntityExtractor> modelListCompositeEntities(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<CompositeEntityExtractor>> localVarResp = modelListCompositeEntitiesWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about all the composite entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;CompositeEntityExtractor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of composite entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CompositeEntityExtractor>> modelListCompositeEntitiesWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListCompositeEntitiesValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<CompositeEntityExtractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about all the composite entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of composite entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCompositeEntitiesAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<CompositeEntityExtractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListCompositeEntitiesValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<CompositeEntityExtractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListCompositeEntityRoles
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCompositeEntityRolesCall(UUID appId, String versionId, UUID cEntityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "cEntityId" + "}", localVarApiClient.escapeString(cEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListCompositeEntityRolesValidateBeforeCall(UUID appId, String versionId, UUID cEntityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListCompositeEntityRoles(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListCompositeEntityRoles(Async)");
        }

        // verify the required parameter 'cEntityId' is set
        if (cEntityId == null) {
            throw new ApiException("Missing the required parameter 'cEntityId' when calling modelListCompositeEntityRoles(Async)");
        }

        return modelListCompositeEntityRolesCall(appId, versionId, cEntityId, _callback);

    }

    /**
     * Get all roles for a composite entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @return List&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityRole> modelListCompositeEntityRoles(UUID appId, String versionId, UUID cEntityId) throws ApiException {
        ApiResponse<List<EntityRole>> localVarResp = modelListCompositeEntityRolesWithHttpInfo(appId, versionId, cEntityId);
        return localVarResp.getData();
    }

    /**
     * Get all roles for a composite entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @return ApiResponse&lt;List&lt;EntityRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityRole>> modelListCompositeEntityRolesWithHttpInfo(UUID appId, String versionId, UUID cEntityId) throws ApiException {
        okhttp3.Call localVarCall = modelListCompositeEntityRolesValidateBeforeCall(appId, versionId, cEntityId, null);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for a composite entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCompositeEntityRolesAsync(UUID appId, String versionId, UUID cEntityId, final ApiCallback<List<EntityRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListCompositeEntityRolesValidateBeforeCall(appId, versionId, cEntityId, _callback);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListCustomPrebuiltEntities
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all prebuilt entities and their representations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCustomPrebuiltEntitiesCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltentities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListCustomPrebuiltEntitiesValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListCustomPrebuiltEntities(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListCustomPrebuiltEntities(Async)");
        }

        return modelListCustomPrebuiltEntitiesCall(appId, versionId, _callback);

    }

    /**
     * 
     * Gets all prebuilt entities used in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return List&lt;EntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all prebuilt entities and their representations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityExtractor> modelListCustomPrebuiltEntities(UUID appId, String versionId) throws ApiException {
        ApiResponse<List<EntityExtractor>> localVarResp = modelListCustomPrebuiltEntitiesWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all prebuilt entities used in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;List&lt;EntityExtractor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all prebuilt entities and their representations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityExtractor>> modelListCustomPrebuiltEntitiesWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = modelListCustomPrebuiltEntitiesValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<List<EntityExtractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all prebuilt entities used in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all prebuilt entities and their representations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCustomPrebuiltEntitiesAsync(UUID appId, String versionId, final ApiCallback<List<EntityExtractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListCustomPrebuiltEntitiesValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<List<EntityExtractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListCustomPrebuiltEntityRoles
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCustomPrebuiltEntityRolesCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListCustomPrebuiltEntityRolesValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListCustomPrebuiltEntityRoles(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListCustomPrebuiltEntityRoles(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelListCustomPrebuiltEntityRoles(Async)");
        }

        return modelListCustomPrebuiltEntityRolesCall(appId, versionId, entityId, _callback);

    }

    /**
     * Get all roles for a prebuilt entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return List&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityRole> modelListCustomPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<List<EntityRole>> localVarResp = modelListCustomPrebuiltEntityRolesWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * Get all roles for a prebuilt entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return ApiResponse&lt;List&lt;EntityRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityRole>> modelListCustomPrebuiltEntityRolesWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelListCustomPrebuiltEntityRolesValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for a prebuilt entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCustomPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<List<EntityRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListCustomPrebuiltEntityRolesValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListCustomPrebuiltIntents
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all customizable prebuilt intents and their representations in a version of the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCustomPrebuiltIntentsCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltintents"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListCustomPrebuiltIntentsValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListCustomPrebuiltIntents(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListCustomPrebuiltIntents(Async)");
        }

        return modelListCustomPrebuiltIntentsCall(appId, versionId, _callback);

    }

    /**
     * 
     * Gets information about customizable prebuilt intents added to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return List&lt;IntentClassifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all customizable prebuilt intents and their representations in a version of the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<IntentClassifier> modelListCustomPrebuiltIntents(UUID appId, String versionId) throws ApiException {
        ApiResponse<List<IntentClassifier>> localVarResp = modelListCustomPrebuiltIntentsWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about customizable prebuilt intents added to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;List&lt;IntentClassifier&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all customizable prebuilt intents and their representations in a version of the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IntentClassifier>> modelListCustomPrebuiltIntentsWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = modelListCustomPrebuiltIntentsValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<List<IntentClassifier>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about customizable prebuilt intents added to a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all customizable prebuilt intents and their representations in a version of the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCustomPrebuiltIntentsAsync(UUID appId, String versionId, final ApiCallback<List<IntentClassifier>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListCustomPrebuiltIntentsValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<List<IntentClassifier>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListCustomPrebuiltModels
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all prebuilt models and their representations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCustomPrebuiltModelsCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltmodels"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListCustomPrebuiltModelsValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListCustomPrebuiltModels(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListCustomPrebuiltModels(Async)");
        }

        return modelListCustomPrebuiltModelsCall(appId, versionId, _callback);

    }

    /**
     * 
     * Gets all prebuilt intent and entity model information used in a version of this application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return List&lt;CustomPrebuiltModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all prebuilt models and their representations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<CustomPrebuiltModel> modelListCustomPrebuiltModels(UUID appId, String versionId) throws ApiException {
        ApiResponse<List<CustomPrebuiltModel>> localVarResp = modelListCustomPrebuiltModelsWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all prebuilt intent and entity model information used in a version of this application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;List&lt;CustomPrebuiltModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all prebuilt models and their representations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CustomPrebuiltModel>> modelListCustomPrebuiltModelsWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = modelListCustomPrebuiltModelsValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<List<CustomPrebuiltModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all prebuilt intent and entity model information used in a version of this application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of all prebuilt models and their representations. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListCustomPrebuiltModelsAsync(UUID appId, String versionId, final ApiCallback<List<CustomPrebuiltModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListCustomPrebuiltModelsValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<List<CustomPrebuiltModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListEntities
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListEntitiesCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListEntitiesValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListEntities(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListEntities(Async)");
        }

        return modelListEntitiesCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * Gets information about all the simple entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;EntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityExtractor> modelListEntities(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<EntityExtractor>> localVarResp = modelListEntitiesWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about all the simple entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;EntityExtractor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityExtractor>> modelListEntitiesWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListEntitiesValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<EntityExtractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about all the simple entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListEntitiesAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<EntityExtractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListEntitiesValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<EntityExtractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListEntityRoles
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListEntityRolesCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListEntityRolesValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListEntityRoles(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListEntityRoles(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelListEntityRoles(Async)");
        }

        return modelListEntityRolesCall(appId, versionId, entityId, _callback);

    }

    /**
     * Get all roles for an entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return List&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityRole> modelListEntityRoles(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<List<EntityRole>> localVarResp = modelListEntityRolesWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * Get all roles for an entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return ApiResponse&lt;List&lt;EntityRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityRole>> modelListEntityRolesWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelListEntityRolesValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for an entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListEntityRolesAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<List<EntityRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListEntityRolesValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListEntitySuggestions
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The target entity extractor model to enhance. (required)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If there&#39;s no trained entity model, nothing is returned in the response. If there&#39;s a trained model and active learning finds any relevant queries, they are returned with the entity model predictions. If there&#39;s a trained model but active learning didn&#39;t find any relevant queries, an empty list is returned in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListEntitySuggestionsCall(UUID appId, String versionId, UUID entityId, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities/{entityId}/suggest"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListEntitySuggestionsValidateBeforeCall(UUID appId, String versionId, UUID entityId, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListEntitySuggestions(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListEntitySuggestions(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelListEntitySuggestions(Async)");
        }

        return modelListEntitySuggestionsCall(appId, versionId, entityId, take, _callback);

    }

    /**
     * 
     * Get suggested example utterances that would improve the accuracy of the entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The target entity extractor model to enhance. (required)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;EntitiesSuggestionExample&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If there&#39;s no trained entity model, nothing is returned in the response. If there&#39;s a trained model and active learning finds any relevant queries, they are returned with the entity model predictions. If there&#39;s a trained model but active learning didn&#39;t find any relevant queries, an empty list is returned in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntitiesSuggestionExample> modelListEntitySuggestions(UUID appId, String versionId, UUID entityId, Integer take) throws ApiException {
        ApiResponse<List<EntitiesSuggestionExample>> localVarResp = modelListEntitySuggestionsWithHttpInfo(appId, versionId, entityId, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Get suggested example utterances that would improve the accuracy of the entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The target entity extractor model to enhance. (required)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;EntitiesSuggestionExample&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If there&#39;s no trained entity model, nothing is returned in the response. If there&#39;s a trained model and active learning finds any relevant queries, they are returned with the entity model predictions. If there&#39;s a trained model but active learning didn&#39;t find any relevant queries, an empty list is returned in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntitiesSuggestionExample>> modelListEntitySuggestionsWithHttpInfo(UUID appId, String versionId, UUID entityId, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListEntitySuggestionsValidateBeforeCall(appId, versionId, entityId, take, null);
        Type localVarReturnType = new TypeToken<List<EntitiesSuggestionExample>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get suggested example utterances that would improve the accuracy of the entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The target entity extractor model to enhance. (required)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If there&#39;s no trained entity model, nothing is returned in the response. If there&#39;s a trained model and active learning finds any relevant queries, they are returned with the entity model predictions. If there&#39;s a trained model but active learning didn&#39;t find any relevant queries, an empty list is returned in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListEntitySuggestionsAsync(UUID appId, String versionId, UUID entityId, Integer take, final ApiCallback<List<EntitiesSuggestionExample>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListEntitySuggestionsValidateBeforeCall(appId, versionId, entityId, take, _callback);
        Type localVarReturnType = new TypeToken<List<EntitiesSuggestionExample>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListHierarchicalEntities
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of hierarchical entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListHierarchicalEntitiesCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListHierarchicalEntitiesValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListHierarchicalEntities(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListHierarchicalEntities(Async)");
        }

        return modelListHierarchicalEntitiesCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * Gets information about all the hierarchical entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;HierarchicalEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of hierarchical entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<HierarchicalEntityExtractor> modelListHierarchicalEntities(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<HierarchicalEntityExtractor>> localVarResp = modelListHierarchicalEntitiesWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about all the hierarchical entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;HierarchicalEntityExtractor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of hierarchical entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HierarchicalEntityExtractor>> modelListHierarchicalEntitiesWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListHierarchicalEntitiesValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<HierarchicalEntityExtractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about all the hierarchical entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of hierarchical entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListHierarchicalEntitiesAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<HierarchicalEntityExtractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListHierarchicalEntitiesValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<HierarchicalEntityExtractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListHierarchicalEntityRoles
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListHierarchicalEntityRolesCall(UUID appId, String versionId, UUID hEntityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListHierarchicalEntityRolesValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListHierarchicalEntityRoles(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListHierarchicalEntityRoles(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelListHierarchicalEntityRoles(Async)");
        }

        return modelListHierarchicalEntityRolesCall(appId, versionId, hEntityId, _callback);

    }

    /**
     * Get all roles for a hierarchical entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @return List&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityRole> modelListHierarchicalEntityRoles(UUID appId, String versionId, UUID hEntityId) throws ApiException {
        ApiResponse<List<EntityRole>> localVarResp = modelListHierarchicalEntityRolesWithHttpInfo(appId, versionId, hEntityId);
        return localVarResp.getData();
    }

    /**
     * Get all roles for a hierarchical entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @return ApiResponse&lt;List&lt;EntityRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityRole>> modelListHierarchicalEntityRolesWithHttpInfo(UUID appId, String versionId, UUID hEntityId) throws ApiException {
        okhttp3.Call localVarCall = modelListHierarchicalEntityRolesValidateBeforeCall(appId, versionId, hEntityId, null);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for a hierarchical entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListHierarchicalEntityRolesAsync(UUID appId, String versionId, UUID hEntityId, final ApiCallback<List<EntityRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListHierarchicalEntityRolesValidateBeforeCall(appId, versionId, hEntityId, _callback);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListIntentSuggestions
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If there&#39;s no trained intent model, nothing is returned in the response. If there&#39;s a trained model and active learning finds any relevant queries, they are returned with the intent model predictions. If there&#39;s a trained model but active learning didn&#39;t find any relevant queries, an empty list is returned in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListIntentSuggestionsCall(UUID appId, String versionId, UUID intentId, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/intents/{intentId}/suggest"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "intentId" + "}", localVarApiClient.escapeString(intentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListIntentSuggestionsValidateBeforeCall(UUID appId, String versionId, UUID intentId, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListIntentSuggestions(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListIntentSuggestions(Async)");
        }

        // verify the required parameter 'intentId' is set
        if (intentId == null) {
            throw new ApiException("Missing the required parameter 'intentId' when calling modelListIntentSuggestions(Async)");
        }

        return modelListIntentSuggestionsCall(appId, versionId, intentId, take, _callback);

    }

    /**
     * 
     * Suggests example utterances that would improve the accuracy of the intent model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;IntentsSuggestionExample&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If there&#39;s no trained intent model, nothing is returned in the response. If there&#39;s a trained model and active learning finds any relevant queries, they are returned with the intent model predictions. If there&#39;s a trained model but active learning didn&#39;t find any relevant queries, an empty list is returned in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<IntentsSuggestionExample> modelListIntentSuggestions(UUID appId, String versionId, UUID intentId, Integer take) throws ApiException {
        ApiResponse<List<IntentsSuggestionExample>> localVarResp = modelListIntentSuggestionsWithHttpInfo(appId, versionId, intentId, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Suggests example utterances that would improve the accuracy of the intent model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;IntentsSuggestionExample&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If there&#39;s no trained intent model, nothing is returned in the response. If there&#39;s a trained model and active learning finds any relevant queries, they are returned with the intent model predictions. If there&#39;s a trained model but active learning didn&#39;t find any relevant queries, an empty list is returned in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IntentsSuggestionExample>> modelListIntentSuggestionsWithHttpInfo(UUID appId, String versionId, UUID intentId, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListIntentSuggestionsValidateBeforeCall(appId, versionId, intentId, take, null);
        Type localVarReturnType = new TypeToken<List<IntentsSuggestionExample>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Suggests example utterances that would improve the accuracy of the intent model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If there&#39;s no trained intent model, nothing is returned in the response. If there&#39;s a trained model and active learning finds any relevant queries, they are returned with the intent model predictions. If there&#39;s a trained model but active learning didn&#39;t find any relevant queries, an empty list is returned in the response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListIntentSuggestionsAsync(UUID appId, String versionId, UUID intentId, Integer take, final ApiCallback<List<IntentsSuggestionExample>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListIntentSuggestionsValidateBeforeCall(appId, versionId, intentId, take, _callback);
        Type localVarReturnType = new TypeToken<List<IntentsSuggestionExample>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListIntents
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of intent model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListIntentsCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/intents"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListIntentsValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListIntents(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListIntents(Async)");
        }

        return modelListIntentsCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * Gets information about the intent models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;IntentClassifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of intent model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<IntentClassifier> modelListIntents(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<IntentClassifier>> localVarResp = modelListIntentsWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the intent models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;IntentClassifier&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of intent model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IntentClassifier>> modelListIntentsWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListIntentsValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<IntentClassifier>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the intent models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of intent model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListIntentsAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<IntentClassifier>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListIntentsValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<IntentClassifier>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListModels
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of application model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListModelsCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/models"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListModelsValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListModels(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListModels(Async)");
        }

        return modelListModelsCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * Gets information about all the intent and entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;ModelInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of application model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelInfoResponse> modelListModels(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<ModelInfoResponse>> localVarResp = modelListModelsWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about all the intent and entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;ModelInfoResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of application model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelInfoResponse>> modelListModelsWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListModelsValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<ModelInfoResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about all the intent and entity models in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of application model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListModelsAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<ModelInfoResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListModelsValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<ModelInfoResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListPatternAnyEntityInfos
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Pattern.Any entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListPatternAnyEntityInfosCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListPatternAnyEntityInfosValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListPatternAnyEntityInfos(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListPatternAnyEntityInfos(Async)");
        }

        return modelListPatternAnyEntityInfosCall(appId, versionId, skip, take, _callback);

    }

    /**
     * Get information about the Pattern.Any entity models in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;PatternAnyEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Pattern.Any entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PatternAnyEntityExtractor> modelListPatternAnyEntityInfos(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<PatternAnyEntityExtractor>> localVarResp = modelListPatternAnyEntityInfosWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * Get information about the Pattern.Any entity models in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;PatternAnyEntityExtractor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Pattern.Any entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PatternAnyEntityExtractor>> modelListPatternAnyEntityInfosWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListPatternAnyEntityInfosValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<PatternAnyEntityExtractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about the Pattern.Any entity models in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of Pattern.Any entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListPatternAnyEntityInfosAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<PatternAnyEntityExtractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListPatternAnyEntityInfosValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<PatternAnyEntityExtractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListPatternAnyEntityRoles
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListPatternAnyEntityRolesCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListPatternAnyEntityRolesValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListPatternAnyEntityRoles(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListPatternAnyEntityRoles(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelListPatternAnyEntityRoles(Async)");
        }

        return modelListPatternAnyEntityRolesCall(appId, versionId, entityId, _callback);

    }

    /**
     * Get all roles for a Pattern.any entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return List&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityRole> modelListPatternAnyEntityRoles(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<List<EntityRole>> localVarResp = modelListPatternAnyEntityRolesWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * Get all roles for a Pattern.any entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return ApiResponse&lt;List&lt;EntityRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityRole>> modelListPatternAnyEntityRolesWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelListPatternAnyEntityRolesValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for a Pattern.any entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListPatternAnyEntityRolesAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<List<EntityRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListPatternAnyEntityRolesValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListPrebuiltEntities
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the possible prebuilt entity extractors. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListPrebuiltEntitiesCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/listprebuilts"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListPrebuiltEntitiesValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListPrebuiltEntities(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListPrebuiltEntities(Async)");
        }

        return modelListPrebuiltEntitiesCall(appId, versionId, _callback);

    }

    /**
     * 
     * Gets all the available prebuilt entities in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return List&lt;AvailablePrebuiltEntityModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the possible prebuilt entity extractors. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<AvailablePrebuiltEntityModel> modelListPrebuiltEntities(UUID appId, String versionId) throws ApiException {
        ApiResponse<List<AvailablePrebuiltEntityModel>> localVarResp = modelListPrebuiltEntitiesWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the available prebuilt entities in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;List&lt;AvailablePrebuiltEntityModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the possible prebuilt entity extractors. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AvailablePrebuiltEntityModel>> modelListPrebuiltEntitiesWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = modelListPrebuiltEntitiesValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<List<AvailablePrebuiltEntityModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the available prebuilt entities in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the possible prebuilt entity extractors. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListPrebuiltEntitiesAsync(UUID appId, String versionId, final ApiCallback<List<AvailablePrebuiltEntityModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListPrebuiltEntitiesValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<List<AvailablePrebuiltEntityModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListPrebuiltEntityRoles
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListPrebuiltEntityRolesCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListPrebuiltEntityRolesValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListPrebuiltEntityRoles(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListPrebuiltEntityRoles(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelListPrebuiltEntityRoles(Async)");
        }

        return modelListPrebuiltEntityRolesCall(appId, versionId, entityId, _callback);

    }

    /**
     * Get a prebuilt entity&#39;s roles in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return List&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityRole> modelListPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<List<EntityRole>> localVarResp = modelListPrebuiltEntityRolesWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * Get a prebuilt entity&#39;s roles in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return ApiResponse&lt;List&lt;EntityRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityRole>> modelListPrebuiltEntityRolesWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelListPrebuiltEntityRolesValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a prebuilt entity&#39;s roles in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<List<EntityRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListPrebuiltEntityRolesValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListPrebuilts
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of prebuilt entity models infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListPrebuiltsCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/prebuilts"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListPrebuiltsValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListPrebuilts(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListPrebuilts(Async)");
        }

        return modelListPrebuiltsCall(appId, versionId, skip, take, _callback);

    }

    /**
     * 
     * Gets information about all the prebuilt entities in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;PrebuiltEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of prebuilt entity models infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PrebuiltEntityExtractor> modelListPrebuilts(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<PrebuiltEntityExtractor>> localVarResp = modelListPrebuiltsWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about all the prebuilt entities in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;PrebuiltEntityExtractor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of prebuilt entity models infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PrebuiltEntityExtractor>> modelListPrebuiltsWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListPrebuiltsValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<PrebuiltEntityExtractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about all the prebuilt entities in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of prebuilt entity models infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListPrebuiltsAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<PrebuiltEntityExtractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListPrebuiltsValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<PrebuiltEntityExtractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListRegexEntityInfos
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of regular expression entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListRegexEntityInfosCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/regexentities"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListRegexEntityInfosValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListRegexEntityInfos(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListRegexEntityInfos(Async)");
        }

        return modelListRegexEntityInfosCall(appId, versionId, skip, take, _callback);

    }

    /**
     * Gets information about the regular expression entity models in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;RegexEntityExtractor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of regular expression entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<RegexEntityExtractor> modelListRegexEntityInfos(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<RegexEntityExtractor>> localVarResp = modelListRegexEntityInfosWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * Gets information about the regular expression entity models in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;RegexEntityExtractor&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of regular expression entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RegexEntityExtractor>> modelListRegexEntityInfosWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = modelListRegexEntityInfosValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<RegexEntityExtractor>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about the regular expression entity models in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of regular expression entity model infos. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListRegexEntityInfosAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<RegexEntityExtractor>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListRegexEntityInfosValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<RegexEntityExtractor>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelListRegexEntityRoles
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListRegexEntityRolesCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelListRegexEntityRolesValidateBeforeCall(UUID appId, String versionId, UUID entityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelListRegexEntityRoles(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelListRegexEntityRoles(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelListRegexEntityRoles(Async)");
        }

        return modelListRegexEntityRolesCall(appId, versionId, entityId, _callback);

    }

    /**
     * Get all roles for a regular expression entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return List&lt;EntityRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<EntityRole> modelListRegexEntityRoles(UUID appId, String versionId, UUID entityId) throws ApiException {
        ApiResponse<List<EntityRole>> localVarResp = modelListRegexEntityRolesWithHttpInfo(appId, versionId, entityId);
        return localVarResp.getData();
    }

    /**
     * Get all roles for a regular expression entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @return ApiResponse&lt;List&lt;EntityRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EntityRole>> modelListRegexEntityRolesWithHttpInfo(UUID appId, String versionId, UUID entityId) throws ApiException {
        okhttp3.Call localVarCall = modelListRegexEntityRolesValidateBeforeCall(appId, versionId, entityId, null);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all roles for a regular expression entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId entity Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the entity roles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelListRegexEntityRolesAsync(UUID appId, String versionId, UUID entityId, final ApiCallback<List<EntityRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelListRegexEntityRolesValidateBeforeCall(appId, versionId, entityId, _callback);
        Type localVarReturnType = new TypeToken<List<EntityRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelPatchClosedList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity model ID. (required)
     * @param closedListModelPatchObject A words list batch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added sublists to the list entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelPatchClosedListCall(UUID appId, String versionId, UUID clEntityId, ClosedListModelPatchObject closedListModelPatchObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = closedListModelPatchObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "clEntityId" + "}", localVarApiClient.escapeString(clEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelPatchClosedListValidateBeforeCall(UUID appId, String versionId, UUID clEntityId, ClosedListModelPatchObject closedListModelPatchObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelPatchClosedList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelPatchClosedList(Async)");
        }

        // verify the required parameter 'clEntityId' is set
        if (clEntityId == null) {
            throw new ApiException("Missing the required parameter 'clEntityId' when calling modelPatchClosedList(Async)");
        }

        // verify the required parameter 'closedListModelPatchObject' is set
        if (closedListModelPatchObject == null) {
            throw new ApiException("Missing the required parameter 'closedListModelPatchObject' when calling modelPatchClosedList(Async)");
        }

        return modelPatchClosedListCall(appId, versionId, clEntityId, closedListModelPatchObject, _callback);

    }

    /**
     * 
     * Adds a batch of sublists to an existing list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity model ID. (required)
     * @param closedListModelPatchObject A words list batch. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added sublists to the list entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelPatchClosedList(UUID appId, String versionId, UUID clEntityId, ClosedListModelPatchObject closedListModelPatchObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelPatchClosedListWithHttpInfo(appId, versionId, clEntityId, closedListModelPatchObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a batch of sublists to an existing list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity model ID. (required)
     * @param closedListModelPatchObject A words list batch. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added sublists to the list entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelPatchClosedListWithHttpInfo(UUID appId, String versionId, UUID clEntityId, ClosedListModelPatchObject closedListModelPatchObject) throws ApiException {
        okhttp3.Call localVarCall = modelPatchClosedListValidateBeforeCall(appId, versionId, clEntityId, closedListModelPatchObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a batch of sublists to an existing list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity model ID. (required)
     * @param closedListModelPatchObject A words list batch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added sublists to the list entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelPatchClosedListAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelPatchObject closedListModelPatchObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelPatchClosedListValidateBeforeCall(appId, versionId, clEntityId, closedListModelPatchObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateClosedList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list model ID. (required)
     * @param closedListModelUpdateObject The new list entity name and words list. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated list entity name and words list. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateClosedListCall(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = closedListModelUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "clEntityId" + "}", localVarApiClient.escapeString(clEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateClosedListValidateBeforeCall(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateClosedList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateClosedList(Async)");
        }

        // verify the required parameter 'clEntityId' is set
        if (clEntityId == null) {
            throw new ApiException("Missing the required parameter 'clEntityId' when calling modelUpdateClosedList(Async)");
        }

        // verify the required parameter 'closedListModelUpdateObject' is set
        if (closedListModelUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'closedListModelUpdateObject' when calling modelUpdateClosedList(Async)");
        }

        return modelUpdateClosedListCall(appId, versionId, clEntityId, closedListModelUpdateObject, _callback);

    }

    /**
     * 
     * Updates the list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list model ID. (required)
     * @param closedListModelUpdateObject The new list entity name and words list. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated list entity name and words list. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateClosedList(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateClosedListWithHttpInfo(appId, versionId, clEntityId, closedListModelUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list model ID. (required)
     * @param closedListModelUpdateObject The new list entity name and words list. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated list entity name and words list. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateClosedListWithHttpInfo(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateClosedListValidateBeforeCall(appId, versionId, clEntityId, closedListModelUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the list entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list model ID. (required)
     * @param closedListModelUpdateObject The new list entity name and words list. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated list entity name and words list. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateClosedListAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateClosedListValidateBeforeCall(appId, versionId, clEntityId, closedListModelUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateClosedListEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateClosedListEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateClosedListEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateClosedListEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateClosedListEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelUpdateClosedListEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelUpdateClosedListEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleUpdateObject' is set
        if (entityRoleUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateClosedListEntityRole(Async)");
        }

        return modelUpdateClosedListEntityRoleCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);

    }

    /**
     * Update a role for a given list entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateClosedListEntityRoleWithHttpInfo(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        return localVarResp.getData();
    }

    /**
     * Update a role for a given list entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateClosedListEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateClosedListEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a role for a given list entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateClosedListEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateCompositeEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated composite entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateCompositeEntityCall(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = compositeModelUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "cEntityId" + "}", localVarApiClient.escapeString(cEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateCompositeEntityValidateBeforeCall(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateCompositeEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateCompositeEntity(Async)");
        }

        // verify the required parameter 'cEntityId' is set
        if (cEntityId == null) {
            throw new ApiException("Missing the required parameter 'cEntityId' when calling modelUpdateCompositeEntity(Async)");
        }

        // verify the required parameter 'compositeModelUpdateObject' is set
        if (compositeModelUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'compositeModelUpdateObject' when calling modelUpdateCompositeEntity(Async)");
        }

        return modelUpdateCompositeEntityCall(appId, versionId, cEntityId, compositeModelUpdateObject, _callback);

    }

    /**
     * 
     * Updates a composite entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated composite entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateCompositeEntity(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateCompositeEntityWithHttpInfo(appId, versionId, cEntityId, compositeModelUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a composite entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated composite entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateCompositeEntityWithHttpInfo(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateCompositeEntityValidateBeforeCall(appId, versionId, cEntityId, compositeModelUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a composite entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated composite entity. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateCompositeEntityValidateBeforeCall(appId, versionId, cEntityId, compositeModelUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateCompositeEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateCompositeEntityRoleCall(UUID appId, String versionId, UUID cEntityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/compositeentities/{cEntityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "cEntityId" + "}", localVarApiClient.escapeString(cEntityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateCompositeEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID cEntityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateCompositeEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateCompositeEntityRole(Async)");
        }

        // verify the required parameter 'cEntityId' is set
        if (cEntityId == null) {
            throw new ApiException("Missing the required parameter 'cEntityId' when calling modelUpdateCompositeEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelUpdateCompositeEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleUpdateObject' is set
        if (entityRoleUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateCompositeEntityRole(Async)");
        }

        return modelUpdateCompositeEntityRoleCall(appId, versionId, cEntityId, roleId, entityRoleUpdateObject, _callback);

    }

    /**
     * Update a role for a given composite entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateCompositeEntityRoleWithHttpInfo(appId, versionId, cEntityId, roleId, entityRoleUpdateObject);
        return localVarResp.getData();
    }

    /**
     * Update a role for a given composite entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateCompositeEntityRoleWithHttpInfo(UUID appId, String versionId, UUID cEntityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateCompositeEntityRoleValidateBeforeCall(appId, versionId, cEntityId, roleId, entityRoleUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a role for a given composite entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param cEntityId The composite entity extractor ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateCompositeEntityRoleValidateBeforeCall(appId, versionId, cEntityId, roleId, entityRoleUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateCustomPrebuiltEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateCustomPrebuiltEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/customprebuiltentities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateCustomPrebuiltEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateCustomPrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateCustomPrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelUpdateCustomPrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelUpdateCustomPrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleUpdateObject' is set
        if (entityRoleUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateCustomPrebuiltEntityRole(Async)");
        }

        return modelUpdateCustomPrebuiltEntityRoleCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);

    }

    /**
     * Update a role for a given prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateCustomPrebuiltEntityRoleWithHttpInfo(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        return localVarResp.getData();
    }

    /**
     * Update a role for a given prebuilt entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateCustomPrebuiltEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateCustomPrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a role for a given prebuilt entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateCustomPrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @param modelUpdateObject A model object containing the new entity extractor name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated entity extractor name. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateEntityCall(UUID appId, String versionId, UUID entityId, ModelUpdateObject modelUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities/{entityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateEntityValidateBeforeCall(UUID appId, String versionId, UUID entityId, ModelUpdateObject modelUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateEntity(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelUpdateEntity(Async)");
        }

        // verify the required parameter 'modelUpdateObject' is set
        if (modelUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'modelUpdateObject' when calling modelUpdateEntity(Async)");
        }

        return modelUpdateEntityCall(appId, versionId, entityId, modelUpdateObject, _callback);

    }

    /**
     * 
     * Updates the name of an entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @param modelUpdateObject A model object containing the new entity extractor name. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated entity extractor name. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateEntity(UUID appId, String versionId, UUID entityId, ModelUpdateObject modelUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateEntityWithHttpInfo(appId, versionId, entityId, modelUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the name of an entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @param modelUpdateObject A model object containing the new entity extractor name. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated entity extractor name. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateEntityWithHttpInfo(UUID appId, String versionId, UUID entityId, ModelUpdateObject modelUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateEntityValidateBeforeCall(appId, versionId, entityId, modelUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the name of an entity in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity extractor ID. (required)
     * @param modelUpdateObject A model object containing the new entity extractor name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated entity extractor name. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateEntityAsync(UUID appId, String versionId, UUID entityId, ModelUpdateObject modelUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateEntityValidateBeforeCall(appId, versionId, entityId, modelUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/entities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelUpdateEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelUpdateEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleUpdateObject' is set
        if (entityRoleUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateEntityRole(Async)");
        }

        return modelUpdateEntityRoleCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);

    }

    /**
     * Update a role for a given entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateEntityRoleWithHttpInfo(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        return localVarResp.getData();
    }

    /**
     * Update a role for a given entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a role for a given entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateExplicitListItem
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param itemId The explicit list item ID. (required)
     * @param item The new explicit list item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the explicit list item. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateExplicitListItemCall(UUID appId, String versionId, UUID entityId, Long itemId, ExplicitListItemUpdateObject item, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = item;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/explicitlist/{itemId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateExplicitListItemValidateBeforeCall(UUID appId, String versionId, UUID entityId, Long itemId, ExplicitListItemUpdateObject item, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateExplicitListItem(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateExplicitListItem(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelUpdateExplicitListItem(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling modelUpdateExplicitListItem(Async)");
        }

        // verify the required parameter 'item' is set
        if (item == null) {
            throw new ApiException("Missing the required parameter 'item' when calling modelUpdateExplicitListItem(Async)");
        }

        return modelUpdateExplicitListItemCall(appId, versionId, entityId, itemId, item, _callback);

    }

    /**
     * Updates an explicit (exception) list item for a Pattern.Any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param itemId The explicit list item ID. (required)
     * @param item The new explicit list item. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the explicit list item. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateExplicitListItem(UUID appId, String versionId, UUID entityId, Long itemId, ExplicitListItemUpdateObject item) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateExplicitListItemWithHttpInfo(appId, versionId, entityId, itemId, item);
        return localVarResp.getData();
    }

    /**
     * Updates an explicit (exception) list item for a Pattern.Any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param itemId The explicit list item ID. (required)
     * @param item The new explicit list item. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the explicit list item. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateExplicitListItemWithHttpInfo(UUID appId, String versionId, UUID entityId, Long itemId, ExplicitListItemUpdateObject item) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateExplicitListItemValidateBeforeCall(appId, versionId, entityId, itemId, item, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an explicit (exception) list item for a Pattern.Any entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param itemId The explicit list item ID. (required)
     * @param item The new explicit list item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the explicit list item. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateExplicitListItemAsync(UUID appId, String versionId, UUID entityId, Long itemId, ExplicitListItemUpdateObject item, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateExplicitListItemValidateBeforeCall(appId, versionId, entityId, itemId, item, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateHierarchicalEntity
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateHierarchicalEntityCall(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hierarchicalModelUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateHierarchicalEntityValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateHierarchicalEntity(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateHierarchicalEntity(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelUpdateHierarchicalEntity(Async)");
        }

        // verify the required parameter 'hierarchicalModelUpdateObject' is set
        if (hierarchicalModelUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'hierarchicalModelUpdateObject' when calling modelUpdateHierarchicalEntity(Async)");
        }

        return modelUpdateHierarchicalEntityCall(appId, versionId, hEntityId, hierarchicalModelUpdateObject, _callback);

    }

    /**
     * 
     * Updates the name and children of a hierarchical entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateHierarchicalEntity(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateHierarchicalEntityWithHttpInfo(appId, versionId, hEntityId, hierarchicalModelUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the name and children of a hierarchical entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateHierarchicalEntityWithHttpInfo(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateHierarchicalEntityValidateBeforeCall(appId, versionId, hEntityId, hierarchicalModelUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the name and children of a hierarchical entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateHierarchicalEntityValidateBeforeCall(appId, versionId, hEntityId, hierarchicalModelUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateHierarchicalEntityChild
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @param hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical entity child. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated entity child. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateHierarchicalEntityChildCall(UUID appId, String versionId, UUID hEntityId, UUID hChildId, ModelAddCompositeEntityChildRequest hierarchicalChildModelUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hierarchicalChildModelUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/children/{hChildId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()))
            .replace("{" + "hChildId" + "}", localVarApiClient.escapeString(hChildId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateHierarchicalEntityChildValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, UUID hChildId, ModelAddCompositeEntityChildRequest hierarchicalChildModelUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelUpdateHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'hChildId' is set
        if (hChildId == null) {
            throw new ApiException("Missing the required parameter 'hChildId' when calling modelUpdateHierarchicalEntityChild(Async)");
        }

        // verify the required parameter 'hierarchicalChildModelUpdateObject' is set
        if (hierarchicalChildModelUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'hierarchicalChildModelUpdateObject' when calling modelUpdateHierarchicalEntityChild(Async)");
        }

        return modelUpdateHierarchicalEntityChildCall(appId, versionId, hEntityId, hChildId, hierarchicalChildModelUpdateObject, _callback);

    }

    /**
     * 
     * Renames a single child in an existing hierarchical entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @param hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical entity child. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated entity child. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId, ModelAddCompositeEntityChildRequest hierarchicalChildModelUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateHierarchicalEntityChildWithHttpInfo(appId, versionId, hEntityId, hChildId, hierarchicalChildModelUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Renames a single child in an existing hierarchical entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @param hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical entity child. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated entity child. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateHierarchicalEntityChildWithHttpInfo(UUID appId, String versionId, UUID hEntityId, UUID hChildId, ModelAddCompositeEntityChildRequest hierarchicalChildModelUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateHierarchicalEntityChildValidateBeforeCall(appId, versionId, hEntityId, hChildId, hierarchicalChildModelUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Renames a single child in an existing hierarchical entity model in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param hChildId The hierarchical entity extractor child ID. (required)
     * @param hierarchicalChildModelUpdateObject Model object containing new name of the hierarchical entity child. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated entity child. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, ModelAddCompositeEntityChildRequest hierarchicalChildModelUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateHierarchicalEntityChildValidateBeforeCall(appId, versionId, hEntityId, hChildId, hierarchicalChildModelUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateHierarchicalEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateHierarchicalEntityRoleCall(UUID appId, String versionId, UUID hEntityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/hierarchicalentities/{hEntityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "hEntityId" + "}", localVarApiClient.escapeString(hEntityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateHierarchicalEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID hEntityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'hEntityId' is set
        if (hEntityId == null) {
            throw new ApiException("Missing the required parameter 'hEntityId' when calling modelUpdateHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelUpdateHierarchicalEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleUpdateObject' is set
        if (entityRoleUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateHierarchicalEntityRole(Async)");
        }

        return modelUpdateHierarchicalEntityRoleCall(appId, versionId, hEntityId, roleId, entityRoleUpdateObject, _callback);

    }

    /**
     * Update a role for a given hierarchical entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateHierarchicalEntityRoleWithHttpInfo(appId, versionId, hEntityId, roleId, entityRoleUpdateObject);
        return localVarResp.getData();
    }

    /**
     * Update a role for a given hierarchical entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateHierarchicalEntityRoleWithHttpInfo(UUID appId, String versionId, UUID hEntityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateHierarchicalEntityRoleValidateBeforeCall(appId, versionId, hEntityId, roleId, entityRoleUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a role for a given hierarchical entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param hEntityId The hierarchical entity extractor ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateHierarchicalEntityRoleValidateBeforeCall(appId, versionId, hEntityId, roleId, entityRoleUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateIntent
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param modelUpdateObject A model object containing the new intent name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateIntentCall(UUID appId, String versionId, UUID intentId, ModelUpdateObject modelUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modelUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/intents/{intentId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "intentId" + "}", localVarApiClient.escapeString(intentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateIntentValidateBeforeCall(UUID appId, String versionId, UUID intentId, ModelUpdateObject modelUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateIntent(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateIntent(Async)");
        }

        // verify the required parameter 'intentId' is set
        if (intentId == null) {
            throw new ApiException("Missing the required parameter 'intentId' when calling modelUpdateIntent(Async)");
        }

        // verify the required parameter 'modelUpdateObject' is set
        if (modelUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'modelUpdateObject' when calling modelUpdateIntent(Async)");
        }

        return modelUpdateIntentCall(appId, versionId, intentId, modelUpdateObject, _callback);

    }

    /**
     * 
     * Updates the name of an intent in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param modelUpdateObject A model object containing the new intent name. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateIntent(UUID appId, String versionId, UUID intentId, ModelUpdateObject modelUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateIntentWithHttpInfo(appId, versionId, intentId, modelUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the name of an intent in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param modelUpdateObject A model object containing the new intent name. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateIntentWithHttpInfo(UUID appId, String versionId, UUID intentId, ModelUpdateObject modelUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateIntentValidateBeforeCall(appId, versionId, intentId, modelUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the name of an intent in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param modelUpdateObject A model object containing the new intent name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateIntentAsync(UUID appId, String versionId, UUID intentId, ModelUpdateObject modelUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateIntentValidateBeforeCall(appId, versionId, intentId, modelUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdatePatternAnyEntityModel
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Pattern.Any entity extractor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdatePatternAnyEntityModelCall(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patternAnyUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdatePatternAnyEntityModelValidateBeforeCall(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdatePatternAnyEntityModel(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdatePatternAnyEntityModel(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelUpdatePatternAnyEntityModel(Async)");
        }

        // verify the required parameter 'patternAnyUpdateObject' is set
        if (patternAnyUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'patternAnyUpdateObject' when calling modelUpdatePatternAnyEntityModel(Async)");
        }

        return modelUpdatePatternAnyEntityModelCall(appId, versionId, entityId, patternAnyUpdateObject, _callback);

    }

    /**
     * Updates the name and explicit (exception) list of a Pattern.Any entity model in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Pattern.Any entity extractor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdatePatternAnyEntityModel(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdatePatternAnyEntityModelWithHttpInfo(appId, versionId, entityId, patternAnyUpdateObject);
        return localVarResp.getData();
    }

    /**
     * Updates the name and explicit (exception) list of a Pattern.Any entity model in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Pattern.Any entity extractor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdatePatternAnyEntityModelWithHttpInfo(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdatePatternAnyEntityModelValidateBeforeCall(appId, versionId, entityId, patternAnyUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the name and explicit (exception) list of a Pattern.Any entity model in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The Pattern.Any entity extractor ID. (required)
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the Pattern.Any entity extractor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdatePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdatePatternAnyEntityModelValidateBeforeCall(appId, versionId, entityId, patternAnyUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdatePatternAnyEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdatePatternAnyEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternanyentities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdatePatternAnyEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdatePatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdatePatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelUpdatePatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelUpdatePatternAnyEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleUpdateObject' is set
        if (entityRoleUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdatePatternAnyEntityRole(Async)");
        }

        return modelUpdatePatternAnyEntityRoleCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);

    }

    /**
     * Update a role for a given Pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdatePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdatePatternAnyEntityRoleWithHttpInfo(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        return localVarResp.getData();
    }

    /**
     * Update a role for a given Pattern.any entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdatePatternAnyEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdatePatternAnyEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a role for a given Pattern.any entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdatePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdatePatternAnyEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdatePrebuiltEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdatePrebuiltEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/prebuilts/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdatePrebuiltEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdatePrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdatePrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelUpdatePrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelUpdatePrebuiltEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleUpdateObject' is set
        if (entityRoleUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdatePrebuiltEntityRole(Async)");
        }

        return modelUpdatePrebuiltEntityRoleCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);

    }

    /**
     * Update a role for a given prebuilt entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdatePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdatePrebuiltEntityRoleWithHttpInfo(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        return localVarResp.getData();
    }

    /**
     * Update a role for a given prebuilt entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdatePrebuiltEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdatePrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a role for a given prebuilt entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdatePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdatePrebuiltEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateRegexEntityModel
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity extractor ID. (required)
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the regular expression entity extractor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateRegexEntityModelCall(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regexEntityUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/regexentities/{regexEntityId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "regexEntityId" + "}", localVarApiClient.escapeString(regexEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateRegexEntityModelValidateBeforeCall(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateRegexEntityModel(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateRegexEntityModel(Async)");
        }

        // verify the required parameter 'regexEntityId' is set
        if (regexEntityId == null) {
            throw new ApiException("Missing the required parameter 'regexEntityId' when calling modelUpdateRegexEntityModel(Async)");
        }

        // verify the required parameter 'regexEntityUpdateObject' is set
        if (regexEntityUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'regexEntityUpdateObject' when calling modelUpdateRegexEntityModel(Async)");
        }

        return modelUpdateRegexEntityModelCall(appId, versionId, regexEntityId, regexEntityUpdateObject, _callback);

    }

    /**
     * Updates the regular expression entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity extractor ID. (required)
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the regular expression entity extractor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateRegexEntityModel(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateRegexEntityModelWithHttpInfo(appId, versionId, regexEntityId, regexEntityUpdateObject);
        return localVarResp.getData();
    }

    /**
     * Updates the regular expression entity in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity extractor ID. (required)
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the regular expression entity extractor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateRegexEntityModelWithHttpInfo(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateRegexEntityModelValidateBeforeCall(appId, versionId, regexEntityId, regexEntityUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the regular expression entity in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param regexEntityId The regular expression entity extractor ID. (required)
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the regular expression entity extractor. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateRegexEntityModelValidateBeforeCall(appId, versionId, regexEntityId, regexEntityUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateRegexEntityRole
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateRegexEntityRoleCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entityRoleUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/regexentities/{entityId}/roles/{roleId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()))
            .replace("{" + "roleId" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateRegexEntityRoleValidateBeforeCall(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateRegexEntityRole(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateRegexEntityRole(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling modelUpdateRegexEntityRole(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling modelUpdateRegexEntityRole(Async)");
        }

        // verify the required parameter 'entityRoleUpdateObject' is set
        if (entityRoleUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'entityRoleUpdateObject' when calling modelUpdateRegexEntityRole(Async)");
        }

        return modelUpdateRegexEntityRoleCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);

    }

    /**
     * Update a role for a given regular expression entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateRegexEntityRoleWithHttpInfo(appId, versionId, entityId, roleId, entityRoleUpdateObject);
        return localVarResp.getData();
    }

    /**
     * Update a role for a given regular expression entity in a version of the application
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateRegexEntityRoleWithHttpInfo(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateRegexEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a role for a given regular expression entity in a version of the application (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param entityId The entity ID. (required)
     * @param roleId The entity role ID. (required)
     * @param entityRoleUpdateObject The new entity role. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the entity role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, EntityRoleUpdateObject entityRoleUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateRegexEntityRoleValidateBeforeCall(appId, versionId, entityId, roleId, entityRoleUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelUpdateSubList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param subListId The sublist ID. (required)
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateSubListCall(UUID appId, String versionId, UUID clEntityId, Long subListId, WordListBaseUpdateObject wordListBaseUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wordListBaseUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/closedlists/{clEntityId}/sublists/{subListId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "clEntityId" + "}", localVarApiClient.escapeString(clEntityId.toString()))
            .replace("{" + "subListId" + "}", localVarApiClient.escapeString(subListId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelUpdateSubListValidateBeforeCall(UUID appId, String versionId, UUID clEntityId, Long subListId, WordListBaseUpdateObject wordListBaseUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling modelUpdateSubList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling modelUpdateSubList(Async)");
        }

        // verify the required parameter 'clEntityId' is set
        if (clEntityId == null) {
            throw new ApiException("Missing the required parameter 'clEntityId' when calling modelUpdateSubList(Async)");
        }

        // verify the required parameter 'subListId' is set
        if (subListId == null) {
            throw new ApiException("Missing the required parameter 'subListId' when calling modelUpdateSubList(Async)");
        }

        // verify the required parameter 'wordListBaseUpdateObject' is set
        if (wordListBaseUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'wordListBaseUpdateObject' when calling modelUpdateSubList(Async)");
        }

        return modelUpdateSubListCall(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject, _callback);

    }

    /**
     * 
     * Updates one of the list entity&#39;s sublists in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param subListId The sublist ID. (required)
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus modelUpdateSubList(UUID appId, String versionId, UUID clEntityId, Long subListId, WordListBaseUpdateObject wordListBaseUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = modelUpdateSubListWithHttpInfo(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates one of the list entity&#39;s sublists in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param subListId The sublist ID. (required)
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> modelUpdateSubListWithHttpInfo(UUID appId, String versionId, UUID clEntityId, Long subListId, WordListBaseUpdateObject wordListBaseUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = modelUpdateSubListValidateBeforeCall(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates one of the list entity&#39;s sublists in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param clEntityId The list entity extractor ID. (required)
     * @param subListId The sublist ID. (required)
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated sublist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelUpdateSubListAsync(UUID appId, String versionId, UUID clEntityId, Long subListId, WordListBaseUpdateObject wordListBaseUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelUpdateSubListValidateBeforeCall(appId, versionId, clEntityId, subListId, wordListBaseUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patternAddPattern
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param pattern The input pattern. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created pattern </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternAddPatternCall(UUID appId, String versionId, PatternRuleCreateObject pattern, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pattern;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternrule"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patternAddPatternValidateBeforeCall(UUID appId, String versionId, PatternRuleCreateObject pattern, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patternAddPattern(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling patternAddPattern(Async)");
        }

        // verify the required parameter 'pattern' is set
        if (pattern == null) {
            throw new ApiException("Missing the required parameter 'pattern' when calling patternAddPattern(Async)");
        }

        return patternAddPatternCall(appId, versionId, pattern, _callback);

    }

    /**
     * Adds a pattern to a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param pattern The input pattern. (required)
     * @return PatternRuleInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created pattern </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public PatternRuleInfo patternAddPattern(UUID appId, String versionId, PatternRuleCreateObject pattern) throws ApiException {
        ApiResponse<PatternRuleInfo> localVarResp = patternAddPatternWithHttpInfo(appId, versionId, pattern);
        return localVarResp.getData();
    }

    /**
     * Adds a pattern to a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param pattern The input pattern. (required)
     * @return ApiResponse&lt;PatternRuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created pattern </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatternRuleInfo> patternAddPatternWithHttpInfo(UUID appId, String versionId, PatternRuleCreateObject pattern) throws ApiException {
        okhttp3.Call localVarCall = patternAddPatternValidateBeforeCall(appId, versionId, pattern, null);
        Type localVarReturnType = new TypeToken<PatternRuleInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a pattern to a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param pattern The input pattern. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created pattern </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternAddPatternAsync(UUID appId, String versionId, PatternRuleCreateObject pattern, final ApiCallback<PatternRuleInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = patternAddPatternValidateBeforeCall(appId, versionId, pattern, _callback);
        Type localVarReturnType = new TypeToken<PatternRuleInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patternBatchAddPatterns
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patterns A JSON array containing patterns. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternBatchAddPatternsCall(UUID appId, String versionId, List<PatternRuleCreateObject> patterns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patterns;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternrules"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patternBatchAddPatternsValidateBeforeCall(UUID appId, String versionId, List<PatternRuleCreateObject> patterns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patternBatchAddPatterns(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling patternBatchAddPatterns(Async)");
        }

        // verify the required parameter 'patterns' is set
        if (patterns == null) {
            throw new ApiException("Missing the required parameter 'patterns' when calling patternBatchAddPatterns(Async)");
        }

        return patternBatchAddPatternsCall(appId, versionId, patterns, _callback);

    }

    /**
     * Adds a batch of patterns in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patterns A JSON array containing patterns. (required)
     * @return List&lt;PatternRuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PatternRuleInfo> patternBatchAddPatterns(UUID appId, String versionId, List<PatternRuleCreateObject> patterns) throws ApiException {
        ApiResponse<List<PatternRuleInfo>> localVarResp = patternBatchAddPatternsWithHttpInfo(appId, versionId, patterns);
        return localVarResp.getData();
    }

    /**
     * Adds a batch of patterns in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patterns A JSON array containing patterns. (required)
     * @return ApiResponse&lt;List&lt;PatternRuleInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PatternRuleInfo>> patternBatchAddPatternsWithHttpInfo(UUID appId, String versionId, List<PatternRuleCreateObject> patterns) throws ApiException {
        okhttp3.Call localVarCall = patternBatchAddPatternsValidateBeforeCall(appId, versionId, patterns, null);
        Type localVarReturnType = new TypeToken<List<PatternRuleInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a batch of patterns in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patterns A JSON array containing patterns. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternBatchAddPatternsAsync(UUID appId, String versionId, List<PatternRuleCreateObject> patterns, final ApiCallback<List<PatternRuleInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patternBatchAddPatternsValidateBeforeCall(appId, versionId, patterns, _callback);
        Type localVarReturnType = new TypeToken<List<PatternRuleInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patternDeletePattern
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternDeletePatternCall(UUID appId, String versionId, UUID patternId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternrules/{patternId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "patternId" + "}", localVarApiClient.escapeString(patternId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patternDeletePatternValidateBeforeCall(UUID appId, String versionId, UUID patternId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patternDeletePattern(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling patternDeletePattern(Async)");
        }

        // verify the required parameter 'patternId' is set
        if (patternId == null) {
            throw new ApiException("Missing the required parameter 'patternId' when calling patternDeletePattern(Async)");
        }

        return patternDeletePatternCall(appId, versionId, patternId, _callback);

    }

    /**
     * Deletes the pattern with the specified ID from a version of the application..
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus patternDeletePattern(UUID appId, String versionId, UUID patternId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = patternDeletePatternWithHttpInfo(appId, versionId, patternId);
        return localVarResp.getData();
    }

    /**
     * Deletes the pattern with the specified ID from a version of the application..
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> patternDeletePatternWithHttpInfo(UUID appId, String versionId, UUID patternId) throws ApiException {
        okhttp3.Call localVarCall = patternDeletePatternValidateBeforeCall(appId, versionId, patternId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes the pattern with the specified ID from a version of the application.. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternDeletePatternAsync(UUID appId, String versionId, UUID patternId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = patternDeletePatternValidateBeforeCall(appId, versionId, patternId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patternDeletePatterns
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternIds The patterns IDs. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternDeletePatternsCall(UUID appId, String versionId, List<UUID> patternIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patternIds;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternrules"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patternDeletePatternsValidateBeforeCall(UUID appId, String versionId, List<UUID> patternIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patternDeletePatterns(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling patternDeletePatterns(Async)");
        }

        // verify the required parameter 'patternIds' is set
        if (patternIds == null) {
            throw new ApiException("Missing the required parameter 'patternIds' when calling patternDeletePatterns(Async)");
        }

        return patternDeletePatternsCall(appId, versionId, patternIds, _callback);

    }

    /**
     * Deletes a list of patterns in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternIds The patterns IDs. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus patternDeletePatterns(UUID appId, String versionId, List<UUID> patternIds) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = patternDeletePatternsWithHttpInfo(appId, versionId, patternIds);
        return localVarResp.getData();
    }

    /**
     * Deletes a list of patterns in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternIds The patterns IDs. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> patternDeletePatternsWithHttpInfo(UUID appId, String versionId, List<UUID> patternIds) throws ApiException {
        okhttp3.Call localVarCall = patternDeletePatternsValidateBeforeCall(appId, versionId, patternIds, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a list of patterns in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternIds The patterns IDs. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternDeletePatternsAsync(UUID appId, String versionId, List<UUID> patternIds, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = patternDeletePatternsValidateBeforeCall(appId, versionId, patternIds, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patternListIntentPatterns
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternListIntentPatternsCall(UUID appId, String versionId, UUID intentId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/intents/{intentId}/patternrules"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "intentId" + "}", localVarApiClient.escapeString(intentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patternListIntentPatternsValidateBeforeCall(UUID appId, String versionId, UUID intentId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patternListIntentPatterns(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling patternListIntentPatterns(Async)");
        }

        // verify the required parameter 'intentId' is set
        if (intentId == null) {
            throw new ApiException("Missing the required parameter 'intentId' when calling patternListIntentPatterns(Async)");
        }

        return patternListIntentPatternsCall(appId, versionId, intentId, skip, take, _callback);

    }

    /**
     * Returns patterns for the specific intent in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;PatternRuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PatternRuleInfo> patternListIntentPatterns(UUID appId, String versionId, UUID intentId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<PatternRuleInfo>> localVarResp = patternListIntentPatternsWithHttpInfo(appId, versionId, intentId, skip, take);
        return localVarResp.getData();
    }

    /**
     * Returns patterns for the specific intent in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;PatternRuleInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PatternRuleInfo>> patternListIntentPatternsWithHttpInfo(UUID appId, String versionId, UUID intentId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = patternListIntentPatternsValidateBeforeCall(appId, versionId, intentId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<PatternRuleInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns patterns for the specific intent in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param intentId The intent classifier ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternListIntentPatternsAsync(UUID appId, String versionId, UUID intentId, Integer skip, Integer take, final ApiCallback<List<PatternRuleInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patternListIntentPatternsValidateBeforeCall(appId, versionId, intentId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<PatternRuleInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patternListPatterns
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternListPatternsCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternrules"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patternListPatternsValidateBeforeCall(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patternListPatterns(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling patternListPatterns(Async)");
        }

        return patternListPatternsCall(appId, versionId, skip, take, _callback);

    }

    /**
     * Gets patterns in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;PatternRuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PatternRuleInfo> patternListPatterns(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<PatternRuleInfo>> localVarResp = patternListPatternsWithHttpInfo(appId, versionId, skip, take);
        return localVarResp.getData();
    }

    /**
     * Gets patterns in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;PatternRuleInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PatternRuleInfo>> patternListPatternsWithHttpInfo(UUID appId, String versionId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = patternListPatternsValidateBeforeCall(appId, versionId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<PatternRuleInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets patterns in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The retrieved patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternListPatternsAsync(UUID appId, String versionId, Integer skip, Integer take, final ApiCallback<List<PatternRuleInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patternListPatternsValidateBeforeCall(appId, versionId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<PatternRuleInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patternUpdatePattern
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern ID. (required)
     * @param pattern An object representing a pattern. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated pattern </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternUpdatePatternCall(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pattern;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternrules/{patternId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "patternId" + "}", localVarApiClient.escapeString(patternId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patternUpdatePatternValidateBeforeCall(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patternUpdatePattern(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling patternUpdatePattern(Async)");
        }

        // verify the required parameter 'patternId' is set
        if (patternId == null) {
            throw new ApiException("Missing the required parameter 'patternId' when calling patternUpdatePattern(Async)");
        }

        // verify the required parameter 'pattern' is set
        if (pattern == null) {
            throw new ApiException("Missing the required parameter 'pattern' when calling patternUpdatePattern(Async)");
        }

        return patternUpdatePatternCall(appId, versionId, patternId, pattern, _callback);

    }

    /**
     * Updates a pattern in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern ID. (required)
     * @param pattern An object representing a pattern. (required)
     * @return PatternRuleInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated pattern </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public PatternRuleInfo patternUpdatePattern(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern) throws ApiException {
        ApiResponse<PatternRuleInfo> localVarResp = patternUpdatePatternWithHttpInfo(appId, versionId, patternId, pattern);
        return localVarResp.getData();
    }

    /**
     * Updates a pattern in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern ID. (required)
     * @param pattern An object representing a pattern. (required)
     * @return ApiResponse&lt;PatternRuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated pattern </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PatternRuleInfo> patternUpdatePatternWithHttpInfo(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern) throws ApiException {
        okhttp3.Call localVarCall = patternUpdatePatternValidateBeforeCall(appId, versionId, patternId, pattern, null);
        Type localVarReturnType = new TypeToken<PatternRuleInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a pattern in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patternId The pattern ID. (required)
     * @param pattern An object representing a pattern. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated pattern </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternUpdatePatternAsync(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern, final ApiCallback<PatternRuleInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = patternUpdatePatternValidateBeforeCall(appId, versionId, patternId, pattern, _callback);
        Type localVarReturnType = new TypeToken<PatternRuleInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patternUpdatePatterns
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patterns An array represents the patterns. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternUpdatePatternsCall(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patterns;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/patternrules"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patternUpdatePatternsValidateBeforeCall(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling patternUpdatePatterns(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling patternUpdatePatterns(Async)");
        }

        // verify the required parameter 'patterns' is set
        if (patterns == null) {
            throw new ApiException("Missing the required parameter 'patterns' when calling patternUpdatePatterns(Async)");
        }

        return patternUpdatePatternsCall(appId, versionId, patterns, _callback);

    }

    /**
     * Updates patterns in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patterns An array represents the patterns. (required)
     * @return List&lt;PatternRuleInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<PatternRuleInfo> patternUpdatePatterns(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns) throws ApiException {
        ApiResponse<List<PatternRuleInfo>> localVarResp = patternUpdatePatternsWithHttpInfo(appId, versionId, patterns);
        return localVarResp.getData();
    }

    /**
     * Updates patterns in a version of the application.
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patterns An array represents the patterns. (required)
     * @return ApiResponse&lt;List&lt;PatternRuleInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PatternRuleInfo>> patternUpdatePatternsWithHttpInfo(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns) throws ApiException {
        okhttp3.Call localVarCall = patternUpdatePatternsValidateBeforeCall(appId, versionId, patterns, null);
        Type localVarReturnType = new TypeToken<List<PatternRuleInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates patterns in a version of the application. (asynchronously)
     * 
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param patterns An array represents the patterns. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated patterns </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patternUpdatePatternsAsync(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns, final ApiCallback<List<PatternRuleInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = patternUpdatePatternsValidateBeforeCall(appId, versionId, patterns, _callback);
        Type localVarReturnType = new TypeToken<List<PatternRuleInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for permissionsAdd
     * @param appId The application ID. (required)
     * @param userToAdd A model containing the user&#39;s email address. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionsAddCall(UUID appId, UserCollaborator userToAdd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userToAdd;

        // create path and map variables
        String localVarPath = "/apps/{appId}/permissions"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permissionsAddValidateBeforeCall(UUID appId, UserCollaborator userToAdd, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling permissionsAdd(Async)");
        }

        // verify the required parameter 'userToAdd' is set
        if (userToAdd == null) {
            throw new ApiException("Missing the required parameter 'userToAdd' when calling permissionsAdd(Async)");
        }

        return permissionsAddCall(appId, userToAdd, _callback);

    }

    /**
     * 
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     * @param appId The application ID. (required)
     * @param userToAdd A model containing the user&#39;s email address. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus permissionsAdd(UUID appId, UserCollaborator userToAdd) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = permissionsAddWithHttpInfo(appId, userToAdd);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     * @param appId The application ID. (required)
     * @param userToAdd A model containing the user&#39;s email address. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> permissionsAddWithHttpInfo(UUID appId, UserCollaborator userToAdd) throws ApiException {
        okhttp3.Call localVarCall = permissionsAddValidateBeforeCall(appId, userToAdd, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a user to the allowed list of users to access this LUIS application. Users are added using their email address.
     * @param appId The application ID. (required)
     * @param userToAdd A model containing the user&#39;s email address. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionsAddAsync(UUID appId, UserCollaborator userToAdd, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = permissionsAddValidateBeforeCall(appId, userToAdd, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for permissionsDelete
     * @param appId The application ID. (required)
     * @param userToDelete A model containing the user&#39;s email address. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionsDeleteCall(UUID appId, UserCollaborator userToDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userToDelete;

        // create path and map variables
        String localVarPath = "/apps/{appId}/permissions"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permissionsDeleteValidateBeforeCall(UUID appId, UserCollaborator userToDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling permissionsDelete(Async)");
        }

        // verify the required parameter 'userToDelete' is set
        if (userToDelete == null) {
            throw new ApiException("Missing the required parameter 'userToDelete' when calling permissionsDelete(Async)");
        }

        return permissionsDeleteCall(appId, userToDelete, _callback);

    }

    /**
     * 
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     * @param appId The application ID. (required)
     * @param userToDelete A model containing the user&#39;s email address. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus permissionsDelete(UUID appId, UserCollaborator userToDelete) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = permissionsDeleteWithHttpInfo(appId, userToDelete);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     * @param appId The application ID. (required)
     * @param userToDelete A model containing the user&#39;s email address. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> permissionsDeleteWithHttpInfo(UUID appId, UserCollaborator userToDelete) throws ApiException {
        okhttp3.Call localVarCall = permissionsDeleteValidateBeforeCall(appId, userToDelete, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes a user from the allowed list of users to access this LUIS application. Users are removed using their email address.
     * @param appId The application ID. (required)
     * @param userToDelete A model containing the user&#39;s email address. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionsDeleteAsync(UUID appId, UserCollaborator userToDelete, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = permissionsDeleteValidateBeforeCall(appId, userToDelete, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for permissionsList
     * @param appId The application ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list includes a single owner. All collaborators are listed in the emails array. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionsListCall(UUID appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/permissions"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permissionsListValidateBeforeCall(UUID appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling permissionsList(Async)");
        }

        return permissionsListCall(appId, _callback);

    }

    /**
     * 
     * Gets the list of user emails that have permissions to access your application.
     * @param appId The application ID. (required)
     * @return UserAccessList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list includes a single owner. All collaborators are listed in the emails array. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public UserAccessList permissionsList(UUID appId) throws ApiException {
        ApiResponse<UserAccessList> localVarResp = permissionsListWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the list of user emails that have permissions to access your application.
     * @param appId The application ID. (required)
     * @return ApiResponse&lt;UserAccessList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list includes a single owner. All collaborators are listed in the emails array. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserAccessList> permissionsListWithHttpInfo(UUID appId) throws ApiException {
        okhttp3.Call localVarCall = permissionsListValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<UserAccessList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the list of user emails that have permissions to access your application.
     * @param appId The application ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list includes a single owner. All collaborators are listed in the emails array. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionsListAsync(UUID appId, final ApiCallback<UserAccessList> _callback) throws ApiException {

        okhttp3.Call localVarCall = permissionsListValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<UserAccessList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for permissionsUpdate
     * @param appId The application ID. (required)
     * @param collaborators A model containing a list of user email addresses. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionsUpdateCall(UUID appId, CollaboratorsArray collaborators, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collaborators;

        // create path and map variables
        String localVarPath = "/apps/{appId}/permissions"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call permissionsUpdateValidateBeforeCall(UUID appId, CollaboratorsArray collaborators, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling permissionsUpdate(Async)");
        }

        // verify the required parameter 'collaborators' is set
        if (collaborators == null) {
            throw new ApiException("Missing the required parameter 'collaborators' when calling permissionsUpdate(Async)");
        }

        return permissionsUpdateCall(appId, collaborators, _callback);

    }

    /**
     * 
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     * @param appId The application ID. (required)
     * @param collaborators A model containing a list of user email addresses. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus permissionsUpdate(UUID appId, CollaboratorsArray collaborators) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = permissionsUpdateWithHttpInfo(appId, collaborators);
        return localVarResp.getData();
    }

    /**
     * 
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     * @param appId The application ID. (required)
     * @param collaborators A model containing a list of user email addresses. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> permissionsUpdateWithHttpInfo(UUID appId, CollaboratorsArray collaborators) throws ApiException {
        okhttp3.Call localVarCall = permissionsUpdateValidateBeforeCall(appId, collaborators, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replaces the current user access list with the new list sent in the body. If an empty list is sent, all access to other users will be removed.
     * @param appId The application ID. (required)
     * @param collaborators A model containing a list of user email addresses. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call permissionsUpdateAsync(UUID appId, CollaboratorsArray collaborators, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = permissionsUpdateValidateBeforeCall(appId, collaborators, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsList
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the application version settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsListCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/settings"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsListValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling settingsList(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling settingsList(Async)");
        }

        return settingsListCall(appId, versionId, _callback);

    }

    /**
     * 
     * Gets the settings in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return List&lt;AppVersionSettingObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the application version settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<AppVersionSettingObject> settingsList(UUID appId, String versionId) throws ApiException {
        ApiResponse<List<AppVersionSettingObject>> localVarResp = settingsListWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the settings in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;List&lt;AppVersionSettingObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the application version settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AppVersionSettingObject>> settingsListWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = settingsListValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<List<AppVersionSettingObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the settings in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the application version settings. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsListAsync(UUID appId, String versionId, final ApiCallback<List<AppVersionSettingObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsListValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<List<AppVersionSettingObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for settingsUpdate
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param listOfAppVersionSettingObject A list of the updated application version settings. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsUpdateCall(UUID appId, String versionId, List<AppVersionSettingObject> listOfAppVersionSettingObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listOfAppVersionSettingObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/settings"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call settingsUpdateValidateBeforeCall(UUID appId, String versionId, List<AppVersionSettingObject> listOfAppVersionSettingObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling settingsUpdate(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling settingsUpdate(Async)");
        }

        // verify the required parameter 'listOfAppVersionSettingObject' is set
        if (listOfAppVersionSettingObject == null) {
            throw new ApiException("Missing the required parameter 'listOfAppVersionSettingObject' when calling settingsUpdate(Async)");
        }

        return settingsUpdateCall(appId, versionId, listOfAppVersionSettingObject, _callback);

    }

    /**
     * 
     * Updates the settings in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param listOfAppVersionSettingObject A list of the updated application version settings. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus settingsUpdate(UUID appId, String versionId, List<AppVersionSettingObject> listOfAppVersionSettingObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = settingsUpdateWithHttpInfo(appId, versionId, listOfAppVersionSettingObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the settings in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param listOfAppVersionSettingObject A list of the updated application version settings. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> settingsUpdateWithHttpInfo(UUID appId, String versionId, List<AppVersionSettingObject> listOfAppVersionSettingObject) throws ApiException {
        okhttp3.Call localVarCall = settingsUpdateValidateBeforeCall(appId, versionId, listOfAppVersionSettingObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the settings in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param listOfAppVersionSettingObject A list of the updated application version settings. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call settingsUpdateAsync(UUID appId, String versionId, List<AppVersionSettingObject> listOfAppVersionSettingObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = settingsUpdateValidateBeforeCall(appId, versionId, listOfAppVersionSettingObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trainGetStatus
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response provides an array of training status details for a LUIS app that you submitted for training. Each element in the response array provides training status for a model (intent or entity) in the LUIS app. Note: Training status is not provided for prebuilt entities because they are pretrained. The \&quot;modelId\&quot; property identifies which intent or entity the training status corresponds to. To get the name and type of each model, use the models API which has a request URL in this format: https://westus.api.cognitive.microsoft.com/luis/api/v2.0/apps/{appId}/versions/{versionId}/models The details property for each model can contain the following fields: \&quot;statusId\&quot;: An integer from 0 to 3 that corresponds to the value of the status field. \&quot;status\&quot;: A string with one of the following values: \&quot;Success\&quot;, \&quot;UpToDate\&quot;, \&quot;InProgress\&quot;, \&quot;Fail\&quot;. If the status is \&quot;Fail\&quot;, the \&quot;failureReason\&quot; property provides the reason for failure. \&quot;exampleCount\&quot;: The number of examples used for training. In the case of the None intent or prebuilt domain intents and entities, this number includes example provided internally by the system as well as examples you added to your LUIS app. \&quot;failureReason\&quot;: A string that indicates the reason training failed.  The value \&quot;FewLabels\&quot; means that no labeled example utterances were provided for training. \&quot;trainingDateTime\&quot;: A string indicating the time the model was last trained. The value uses the ISO 8601 format for representing times in UTC (Coordinated Universal Time) with a UTC designator (\&quot;Z\&quot;), for example: \&quot;2017-08-10T01:08:34Z\&quot;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainGetStatusCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/train"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "JSON"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trainGetStatusValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling trainGetStatus(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling trainGetStatus(Async)");
        }

        return trainGetStatusCall(appId, versionId, _callback);

    }

    /**
     * 
     * Gets the training status of all models (intents and entities) for the specified LUIS app. You must call the train API to train the LUIS app before you call this API to get training status. \&quot;appID\&quot; specifies the LUIS app ID. \&quot;versionId\&quot; specifies the version number of the LUIS app. For example, \&quot;0.1\&quot;.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return List&lt;ModelTrainingInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response provides an array of training status details for a LUIS app that you submitted for training. Each element in the response array provides training status for a model (intent or entity) in the LUIS app. Note: Training status is not provided for prebuilt entities because they are pretrained. The \&quot;modelId\&quot; property identifies which intent or entity the training status corresponds to. To get the name and type of each model, use the models API which has a request URL in this format: https://westus.api.cognitive.microsoft.com/luis/api/v2.0/apps/{appId}/versions/{versionId}/models The details property for each model can contain the following fields: \&quot;statusId\&quot;: An integer from 0 to 3 that corresponds to the value of the status field. \&quot;status\&quot;: A string with one of the following values: \&quot;Success\&quot;, \&quot;UpToDate\&quot;, \&quot;InProgress\&quot;, \&quot;Fail\&quot;. If the status is \&quot;Fail\&quot;, the \&quot;failureReason\&quot; property provides the reason for failure. \&quot;exampleCount\&quot;: The number of examples used for training. In the case of the None intent or prebuilt domain intents and entities, this number includes example provided internally by the system as well as examples you added to your LUIS app. \&quot;failureReason\&quot;: A string that indicates the reason training failed.  The value \&quot;FewLabels\&quot; means that no labeled example utterances were provided for training. \&quot;trainingDateTime\&quot;: A string indicating the time the model was last trained. The value uses the ISO 8601 format for representing times in UTC (Coordinated Universal Time) with a UTC designator (\&quot;Z\&quot;), for example: \&quot;2017-08-10T01:08:34Z\&quot;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelTrainingInfo> trainGetStatus(UUID appId, String versionId) throws ApiException {
        ApiResponse<List<ModelTrainingInfo>> localVarResp = trainGetStatusWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the training status of all models (intents and entities) for the specified LUIS app. You must call the train API to train the LUIS app before you call this API to get training status. \&quot;appID\&quot; specifies the LUIS app ID. \&quot;versionId\&quot; specifies the version number of the LUIS app. For example, \&quot;0.1\&quot;.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;List&lt;ModelTrainingInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response provides an array of training status details for a LUIS app that you submitted for training. Each element in the response array provides training status for a model (intent or entity) in the LUIS app. Note: Training status is not provided for prebuilt entities because they are pretrained. The \&quot;modelId\&quot; property identifies which intent or entity the training status corresponds to. To get the name and type of each model, use the models API which has a request URL in this format: https://westus.api.cognitive.microsoft.com/luis/api/v2.0/apps/{appId}/versions/{versionId}/models The details property for each model can contain the following fields: \&quot;statusId\&quot;: An integer from 0 to 3 that corresponds to the value of the status field. \&quot;status\&quot;: A string with one of the following values: \&quot;Success\&quot;, \&quot;UpToDate\&quot;, \&quot;InProgress\&quot;, \&quot;Fail\&quot;. If the status is \&quot;Fail\&quot;, the \&quot;failureReason\&quot; property provides the reason for failure. \&quot;exampleCount\&quot;: The number of examples used for training. In the case of the None intent or prebuilt domain intents and entities, this number includes example provided internally by the system as well as examples you added to your LUIS app. \&quot;failureReason\&quot;: A string that indicates the reason training failed.  The value \&quot;FewLabels\&quot; means that no labeled example utterances were provided for training. \&quot;trainingDateTime\&quot;: A string indicating the time the model was last trained. The value uses the ISO 8601 format for representing times in UTC (Coordinated Universal Time) with a UTC designator (\&quot;Z\&quot;), for example: \&quot;2017-08-10T01:08:34Z\&quot;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelTrainingInfo>> trainGetStatusWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = trainGetStatusValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<List<ModelTrainingInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the training status of all models (intents and entities) for the specified LUIS app. You must call the train API to train the LUIS app before you call this API to get training status. \&quot;appID\&quot; specifies the LUIS app ID. \&quot;versionId\&quot; specifies the version number of the LUIS app. For example, \&quot;0.1\&quot;.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response provides an array of training status details for a LUIS app that you submitted for training. Each element in the response array provides training status for a model (intent or entity) in the LUIS app. Note: Training status is not provided for prebuilt entities because they are pretrained. The \&quot;modelId\&quot; property identifies which intent or entity the training status corresponds to. To get the name and type of each model, use the models API which has a request URL in this format: https://westus.api.cognitive.microsoft.com/luis/api/v2.0/apps/{appId}/versions/{versionId}/models The details property for each model can contain the following fields: \&quot;statusId\&quot;: An integer from 0 to 3 that corresponds to the value of the status field. \&quot;status\&quot;: A string with one of the following values: \&quot;Success\&quot;, \&quot;UpToDate\&quot;, \&quot;InProgress\&quot;, \&quot;Fail\&quot;. If the status is \&quot;Fail\&quot;, the \&quot;failureReason\&quot; property provides the reason for failure. \&quot;exampleCount\&quot;: The number of examples used for training. In the case of the None intent or prebuilt domain intents and entities, this number includes example provided internally by the system as well as examples you added to your LUIS app. \&quot;failureReason\&quot;: A string that indicates the reason training failed.  The value \&quot;FewLabels\&quot; means that no labeled example utterances were provided for training. \&quot;trainingDateTime\&quot;: A string indicating the time the model was last trained. The value uses the ISO 8601 format for representing times in UTC (Coordinated Universal Time) with a UTC designator (\&quot;Z\&quot;), for example: \&quot;2017-08-10T01:08:34Z\&quot;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainGetStatusAsync(UUID appId, String versionId, final ApiCallback<List<ModelTrainingInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = trainGetStatusValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<List<ModelTrainingInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trainTrainVersion
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> This response indicates the initial training status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainTrainVersionCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/train"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trainTrainVersionValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling trainTrainVersion(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling trainTrainVersion(Async)");
        }

        return trainTrainVersionCall(appId, versionId, _callback);

    }

    /**
     * 
     * Sends a training request for a version of a specified LUIS app. This POST request initiates a request asynchronously. To determine whether the training request is successful, submit a GET request to get training status. Note: The application version is not fully trained unless all the models (intents and entities) are trained successfully or are up to date. To verify training success, get the training status at least once after training is complete.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return EnqueueTrainingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> This response indicates the initial training status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public EnqueueTrainingResponse trainTrainVersion(UUID appId, String versionId) throws ApiException {
        ApiResponse<EnqueueTrainingResponse> localVarResp = trainTrainVersionWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Sends a training request for a version of a specified LUIS app. This POST request initiates a request asynchronously. To determine whether the training request is successful, submit a GET request to get training status. Note: The application version is not fully trained unless all the models (intents and entities) are trained successfully or are up to date. To verify training success, get the training status at least once after training is complete.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;EnqueueTrainingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> This response indicates the initial training status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnqueueTrainingResponse> trainTrainVersionWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = trainTrainVersionValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<EnqueueTrainingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sends a training request for a version of a specified LUIS app. This POST request initiates a request asynchronously. To determine whether the training request is successful, submit a GET request to get training status. Note: The application version is not fully trained unless all the models (intents and entities) are trained successfully or are up to date. To verify training success, get the training status at least once after training is complete.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> This response indicates the initial training status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trainTrainVersionAsync(UUID appId, String versionId, final ApiCallback<EnqueueTrainingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = trainTrainVersionValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<EnqueueTrainingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for versionsClone
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param versionCloneObject A model containing the new version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new version ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsCloneCall(UUID appId, String versionId, TaskUpdateObject versionCloneObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = versionCloneObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/clone"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionsCloneValidateBeforeCall(UUID appId, String versionId, TaskUpdateObject versionCloneObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling versionsClone(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling versionsClone(Async)");
        }

        // verify the required parameter 'versionCloneObject' is set
        if (versionCloneObject == null) {
            throw new ApiException("Missing the required parameter 'versionCloneObject' when calling versionsClone(Async)");
        }

        return versionsCloneCall(appId, versionId, versionCloneObject, _callback);

    }

    /**
     * 
     * Creates a new version from the selected version.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param versionCloneObject A model containing the new version ID. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new version ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public String versionsClone(UUID appId, String versionId, TaskUpdateObject versionCloneObject) throws ApiException {
        ApiResponse<String> localVarResp = versionsCloneWithHttpInfo(appId, versionId, versionCloneObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new version from the selected version.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param versionCloneObject A model containing the new version ID. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new version ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> versionsCloneWithHttpInfo(UUID appId, String versionId, TaskUpdateObject versionCloneObject) throws ApiException {
        okhttp3.Call localVarCall = versionsCloneValidateBeforeCall(appId, versionId, versionCloneObject, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new version from the selected version.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param versionCloneObject A model containing the new version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The new version ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsCloneAsync(UUID appId, String versionId, TaskUpdateObject versionCloneObject, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionsCloneValidateBeforeCall(appId, versionId, versionCloneObject, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for versionsDelete
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsDeleteCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionsDeleteValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling versionsDelete(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling versionsDelete(Async)");
        }

        return versionsDeleteCall(appId, versionId, _callback);

    }

    /**
     * 
     * Deletes an application version.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus versionsDelete(UUID appId, String versionId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = versionsDeleteWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an application version.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> versionsDeleteWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = versionsDeleteValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an application version.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsDeleteAsync(UUID appId, String versionId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionsDeleteValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for versionsDeleteUnlabelledUtterance
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param utterance The utterance text to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsDeleteUnlabelledUtteranceCall(UUID appId, String versionId, String utterance, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = utterance;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/suggest"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionsDeleteUnlabelledUtteranceValidateBeforeCall(UUID appId, String versionId, String utterance, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling versionsDeleteUnlabelledUtterance(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling versionsDeleteUnlabelledUtterance(Async)");
        }

        // verify the required parameter 'utterance' is set
        if (utterance == null) {
            throw new ApiException("Missing the required parameter 'utterance' when calling versionsDeleteUnlabelledUtterance(Async)");
        }

        return versionsDeleteUnlabelledUtteranceCall(appId, versionId, utterance, _callback);

    }

    /**
     * 
     * Deleted an unlabelled utterance in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param utterance The utterance text to delete. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus versionsDeleteUnlabelledUtterance(UUID appId, String versionId, String utterance) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = versionsDeleteUnlabelledUtteranceWithHttpInfo(appId, versionId, utterance);
        return localVarResp.getData();
    }

    /**
     * 
     * Deleted an unlabelled utterance in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param utterance The utterance text to delete. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> versionsDeleteUnlabelledUtteranceWithHttpInfo(UUID appId, String versionId, String utterance) throws ApiException {
        okhttp3.Call localVarCall = versionsDeleteUnlabelledUtteranceValidateBeforeCall(appId, versionId, utterance, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deleted an unlabelled utterance in a version of the application.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param utterance The utterance text to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsDeleteUnlabelledUtteranceAsync(UUID appId, String versionId, String utterance, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionsDeleteUnlabelledUtteranceValidateBeforeCall(appId, versionId, utterance, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for versionsExport
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The LUIS application structure in JSON format. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsExportCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/export"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionsExportValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling versionsExport(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling versionsExport(Async)");
        }

        return versionsExportCall(appId, versionId, _callback);

    }

    /**
     * 
     * Exports a LUIS application to JSON format.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return LuisApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The LUIS application structure in JSON format. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public LuisApp versionsExport(UUID appId, String versionId) throws ApiException {
        ApiResponse<LuisApp> localVarResp = versionsExportWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Exports a LUIS application to JSON format.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;LuisApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The LUIS application structure in JSON format. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LuisApp> versionsExportWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = versionsExportValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<LuisApp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Exports a LUIS application to JSON format.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The LUIS application structure in JSON format. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsExportAsync(UUID appId, String versionId, final ApiCallback<LuisApp> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionsExportValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<LuisApp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for versionsGet
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model containing the version info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsGetCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionsGetValidateBeforeCall(UUID appId, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling versionsGet(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling versionsGet(Async)");
        }

        return versionsGetCall(appId, versionId, _callback);

    }

    /**
     * 
     * Gets the version information such as date created, last modified date, endpoint URL, count of intents and entities, training and publishing status.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return VersionInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model containing the version info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public VersionInfo versionsGet(UUID appId, String versionId) throws ApiException {
        ApiResponse<VersionInfo> localVarResp = versionsGetWithHttpInfo(appId, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the version information such as date created, last modified date, endpoint URL, count of intents and entities, training and publishing status.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @return ApiResponse&lt;VersionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model containing the version info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VersionInfo> versionsGetWithHttpInfo(UUID appId, String versionId) throws ApiException {
        okhttp3.Call localVarCall = versionsGetValidateBeforeCall(appId, versionId, null);
        Type localVarReturnType = new TypeToken<VersionInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the version information such as date created, last modified date, endpoint URL, count of intents and entities, training and publishing status.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A model containing the version info. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsGetAsync(UUID appId, String versionId, final ApiCallback<VersionInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionsGetValidateBeforeCall(appId, versionId, _callback);
        Type localVarReturnType = new TypeToken<VersionInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for versionsImport
     * @param appId The application ID. (required)
     * @param luisApp A LUIS application structure. (required)
     * @param versionId The new versionId to import. If not specified, the versionId will be read from the imported object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created application version. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsImportCall(UUID appId, LuisApp luisApp, String versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = luisApp;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/import"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (versionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionId", versionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionsImportValidateBeforeCall(UUID appId, LuisApp luisApp, String versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling versionsImport(Async)");
        }

        // verify the required parameter 'luisApp' is set
        if (luisApp == null) {
            throw new ApiException("Missing the required parameter 'luisApp' when calling versionsImport(Async)");
        }

        return versionsImportCall(appId, luisApp, versionId, _callback);

    }

    /**
     * 
     * Imports a new version into a LUIS application.
     * @param appId The application ID. (required)
     * @param luisApp A LUIS application structure. (required)
     * @param versionId The new versionId to import. If not specified, the versionId will be read from the imported object. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created application version. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public String versionsImport(UUID appId, LuisApp luisApp, String versionId) throws ApiException {
        ApiResponse<String> localVarResp = versionsImportWithHttpInfo(appId, luisApp, versionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Imports a new version into a LUIS application.
     * @param appId The application ID. (required)
     * @param luisApp A LUIS application structure. (required)
     * @param versionId The new versionId to import. If not specified, the versionId will be read from the imported object. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created application version. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> versionsImportWithHttpInfo(UUID appId, LuisApp luisApp, String versionId) throws ApiException {
        okhttp3.Call localVarCall = versionsImportValidateBeforeCall(appId, luisApp, versionId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Imports a new version into a LUIS application.
     * @param appId The application ID. (required)
     * @param luisApp A LUIS application structure. (required)
     * @param versionId The new versionId to import. If not specified, the versionId will be read from the imported object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The created application version. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsImportAsync(UUID appId, LuisApp luisApp, String versionId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionsImportValidateBeforeCall(appId, luisApp, versionId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for versionsList
     * @param appId The application ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all versions of the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsListCall(UUID appId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (take != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("take", take));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionsListValidateBeforeCall(UUID appId, Integer skip, Integer take, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling versionsList(Async)");
        }

        return versionsListCall(appId, skip, take, _callback);

    }

    /**
     * 
     * Gets a list of versions for this application ID.
     * @param appId The application ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return List&lt;VersionInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all versions of the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public List<VersionInfo> versionsList(UUID appId, Integer skip, Integer take) throws ApiException {
        ApiResponse<List<VersionInfo>> localVarResp = versionsListWithHttpInfo(appId, skip, take);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of versions for this application ID.
     * @param appId The application ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @return ApiResponse&lt;List&lt;VersionInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all versions of the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VersionInfo>> versionsListWithHttpInfo(UUID appId, Integer skip, Integer take) throws ApiException {
        okhttp3.Call localVarCall = versionsListValidateBeforeCall(appId, skip, take, null);
        Type localVarReturnType = new TypeToken<List<VersionInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of versions for this application ID.
     * @param appId The application ID. (required)
     * @param skip The number of entries to skip. Default value is 0. (optional, default to 0)
     * @param take The number of entries to return. Maximum page size is 500. Default is 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of all versions of the application. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsListAsync(UUID appId, Integer skip, Integer take, final ApiCallback<List<VersionInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionsListValidateBeforeCall(appId, skip, take, _callback);
        Type localVarReturnType = new TypeToken<List<VersionInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for versionsUpdate
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param versionUpdateObject A model containing Name and Description of the application. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsUpdateCall(UUID appId, String versionId, TaskUpdateObject versionUpdateObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = versionUpdateObject;

        // create path and map variables
        String localVarPath = "/apps/{appId}/versions/{versionId}/"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyHeader" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call versionsUpdateValidateBeforeCall(UUID appId, String versionId, TaskUpdateObject versionUpdateObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling versionsUpdate(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling versionsUpdate(Async)");
        }

        // verify the required parameter 'versionUpdateObject' is set
        if (versionUpdateObject == null) {
            throw new ApiException("Missing the required parameter 'versionUpdateObject' when calling versionsUpdate(Async)");
        }

        return versionsUpdateCall(appId, versionId, versionUpdateObject, _callback);

    }

    /**
     * 
     * Updates the name or description of the application version.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param versionUpdateObject A model containing Name and Description of the application. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus versionsUpdate(UUID appId, String versionId, TaskUpdateObject versionUpdateObject) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = versionsUpdateWithHttpInfo(appId, versionId, versionUpdateObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the name or description of the application version.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param versionUpdateObject A model containing Name and Description of the application. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> versionsUpdateWithHttpInfo(UUID appId, String versionId, TaskUpdateObject versionUpdateObject) throws ApiException {
        okhttp3.Call localVarCall = versionsUpdateValidateBeforeCall(appId, versionId, versionUpdateObject, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the name or description of the application version.
     * @param appId The application ID. (required)
     * @param versionId The version ID. (required)
     * @param versionUpdateObject A model containing Name and Description of the application. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call versionsUpdateAsync(UUID appId, String versionId, TaskUpdateObject versionUpdateObject, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = versionsUpdateValidateBeforeCall(appId, versionId, versionUpdateObject, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
