/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityLabel;
import org.openapitools.client.model.EntityPrediction;
import org.openapitools.client.model.IntentPrediction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A prediction and label pair of an example.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:40.225027-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabeledUtterance {
  public static final String SERIALIZED_NAME_ENTITY_LABELS = "entityLabels";
  @SerializedName(SERIALIZED_NAME_ENTITY_LABELS)
  private List<EntityLabel> entityLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY_PREDICTIONS = "entityPredictions";
  @SerializedName(SERIALIZED_NAME_ENTITY_PREDICTIONS)
  private List<EntityPrediction> entityPredictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INTENT_LABEL = "intentLabel";
  @SerializedName(SERIALIZED_NAME_INTENT_LABEL)
  private String intentLabel;

  public static final String SERIALIZED_NAME_INTENT_PREDICTIONS = "intentPredictions";
  @SerializedName(SERIALIZED_NAME_INTENT_PREDICTIONS)
  private List<IntentPrediction> intentPredictions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TOKENIZED_TEXT = "tokenizedText";
  @SerializedName(SERIALIZED_NAME_TOKENIZED_TEXT)
  private List<String> tokenizedText = new ArrayList<>();

  public LabeledUtterance() {
  }

  public LabeledUtterance entityLabels(List<EntityLabel> entityLabels) {
    this.entityLabels = entityLabels;
    return this;
  }

  public LabeledUtterance addEntityLabelsItem(EntityLabel entityLabelsItem) {
    if (this.entityLabels == null) {
      this.entityLabels = new ArrayList<>();
    }
    this.entityLabels.add(entityLabelsItem);
    return this;
  }

  /**
   * The entities matching the example.
   * @return entityLabels
   */
  @javax.annotation.Nullable
  public List<EntityLabel> getEntityLabels() {
    return entityLabels;
  }

  public void setEntityLabels(List<EntityLabel> entityLabels) {
    this.entityLabels = entityLabels;
  }


  public LabeledUtterance entityPredictions(List<EntityPrediction> entityPredictions) {
    this.entityPredictions = entityPredictions;
    return this;
  }

  public LabeledUtterance addEntityPredictionsItem(EntityPrediction entityPredictionsItem) {
    if (this.entityPredictions == null) {
      this.entityPredictions = new ArrayList<>();
    }
    this.entityPredictions.add(entityPredictionsItem);
    return this;
  }

  /**
   * List of suggested entities.
   * @return entityPredictions
   */
  @javax.annotation.Nullable
  public List<EntityPrediction> getEntityPredictions() {
    return entityPredictions;
  }

  public void setEntityPredictions(List<EntityPrediction> entityPredictions) {
    this.entityPredictions = entityPredictions;
  }


  public LabeledUtterance id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID of Labeled Utterance.
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public LabeledUtterance intentLabel(String intentLabel) {
    this.intentLabel = intentLabel;
    return this;
  }

  /**
   * The intent matching the example.
   * @return intentLabel
   */
  @javax.annotation.Nullable
  public String getIntentLabel() {
    return intentLabel;
  }

  public void setIntentLabel(String intentLabel) {
    this.intentLabel = intentLabel;
  }


  public LabeledUtterance intentPredictions(List<IntentPrediction> intentPredictions) {
    this.intentPredictions = intentPredictions;
    return this;
  }

  public LabeledUtterance addIntentPredictionsItem(IntentPrediction intentPredictionsItem) {
    if (this.intentPredictions == null) {
      this.intentPredictions = new ArrayList<>();
    }
    this.intentPredictions.add(intentPredictionsItem);
    return this;
  }

  /**
   * List of suggested intents.
   * @return intentPredictions
   */
  @javax.annotation.Nullable
  public List<IntentPrediction> getIntentPredictions() {
    return intentPredictions;
  }

  public void setIntentPredictions(List<IntentPrediction> intentPredictions) {
    this.intentPredictions = intentPredictions;
  }


  public LabeledUtterance text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The utterance. For example, \&quot;What&#39;s the weather like in seattle?\&quot;
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public LabeledUtterance tokenizedText(List<String> tokenizedText) {
    this.tokenizedText = tokenizedText;
    return this;
  }

  public LabeledUtterance addTokenizedTextItem(String tokenizedTextItem) {
    if (this.tokenizedText == null) {
      this.tokenizedText = new ArrayList<>();
    }
    this.tokenizedText.add(tokenizedTextItem);
    return this;
  }

  /**
   * The utterance tokenized.
   * @return tokenizedText
   */
  @javax.annotation.Nullable
  public List<String> getTokenizedText() {
    return tokenizedText;
  }

  public void setTokenizedText(List<String> tokenizedText) {
    this.tokenizedText = tokenizedText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabeledUtterance labeledUtterance = (LabeledUtterance) o;
    return Objects.equals(this.entityLabels, labeledUtterance.entityLabels) &&
        Objects.equals(this.entityPredictions, labeledUtterance.entityPredictions) &&
        Objects.equals(this.id, labeledUtterance.id) &&
        Objects.equals(this.intentLabel, labeledUtterance.intentLabel) &&
        Objects.equals(this.intentPredictions, labeledUtterance.intentPredictions) &&
        Objects.equals(this.text, labeledUtterance.text) &&
        Objects.equals(this.tokenizedText, labeledUtterance.tokenizedText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityLabels, entityPredictions, id, intentLabel, intentPredictions, text, tokenizedText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabeledUtterance {\n");
    sb.append("    entityLabels: ").append(toIndentedString(entityLabels)).append("\n");
    sb.append("    entityPredictions: ").append(toIndentedString(entityPredictions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    intentLabel: ").append(toIndentedString(intentLabel)).append("\n");
    sb.append("    intentPredictions: ").append(toIndentedString(intentPredictions)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    tokenizedText: ").append(toIndentedString(tokenizedText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityLabels");
    openapiFields.add("entityPredictions");
    openapiFields.add("id");
    openapiFields.add("intentLabel");
    openapiFields.add("intentPredictions");
    openapiFields.add("text");
    openapiFields.add("tokenizedText");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabeledUtterance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabeledUtterance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabeledUtterance is not found in the empty JSON string", LabeledUtterance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabeledUtterance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabeledUtterance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("entityLabels") != null && !jsonObj.get("entityLabels").isJsonNull()) {
        JsonArray jsonArrayentityLabels = jsonObj.getAsJsonArray("entityLabels");
        if (jsonArrayentityLabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entityLabels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entityLabels` to be an array in the JSON string but got `%s`", jsonObj.get("entityLabels").toString()));
          }

          // validate the optional field `entityLabels` (array)
          for (int i = 0; i < jsonArrayentityLabels.size(); i++) {
            EntityLabel.validateJsonElement(jsonArrayentityLabels.get(i));
          };
        }
      }
      if (jsonObj.get("entityPredictions") != null && !jsonObj.get("entityPredictions").isJsonNull()) {
        JsonArray jsonArrayentityPredictions = jsonObj.getAsJsonArray("entityPredictions");
        if (jsonArrayentityPredictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("entityPredictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `entityPredictions` to be an array in the JSON string but got `%s`", jsonObj.get("entityPredictions").toString()));
          }

          // validate the optional field `entityPredictions` (array)
          for (int i = 0; i < jsonArrayentityPredictions.size(); i++) {
            EntityPrediction.validateJsonElement(jsonArrayentityPredictions.get(i));
          };
        }
      }
      if ((jsonObj.get("intentLabel") != null && !jsonObj.get("intentLabel").isJsonNull()) && !jsonObj.get("intentLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intentLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intentLabel").toString()));
      }
      if (jsonObj.get("intentPredictions") != null && !jsonObj.get("intentPredictions").isJsonNull()) {
        JsonArray jsonArrayintentPredictions = jsonObj.getAsJsonArray("intentPredictions");
        if (jsonArrayintentPredictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("intentPredictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `intentPredictions` to be an array in the JSON string but got `%s`", jsonObj.get("intentPredictions").toString()));
          }

          // validate the optional field `intentPredictions` (array)
          for (int i = 0; i < jsonArrayintentPredictions.size(); i++) {
            IntentPrediction.validateJsonElement(jsonArrayintentPredictions.get(i));
          };
        }
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tokenizedText") != null && !jsonObj.get("tokenizedText").isJsonNull() && !jsonObj.get("tokenizedText").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenizedText` to be an array in the JSON string but got `%s`", jsonObj.get("tokenizedText").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabeledUtterance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabeledUtterance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabeledUtterance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabeledUtterance.class));

       return (TypeAdapter<T>) new TypeAdapter<LabeledUtterance>() {
           @Override
           public void write(JsonWriter out, LabeledUtterance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabeledUtterance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabeledUtterance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabeledUtterance
   * @throws IOException if the JSON string is invalid with respect to LabeledUtterance
   */
  public static LabeledUtterance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabeledUtterance.class);
  }

  /**
   * Convert an instance of LabeledUtterance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

