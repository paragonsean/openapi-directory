/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties for creating a new LUIS Application
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:40.225027-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationCreateObject {
  public static final String SERIALIZED_NAME_CULTURE = "culture";
  @SerializedName(SERIALIZED_NAME_CULTURE)
  private String culture;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_INITIAL_VERSION_ID = "initialVersionId";
  @SerializedName(SERIALIZED_NAME_INITIAL_VERSION_ID)
  private String initialVersionId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USAGE_SCENARIO = "usageScenario";
  @SerializedName(SERIALIZED_NAME_USAGE_SCENARIO)
  private String usageScenario;

  public ApplicationCreateObject() {
  }

  public ApplicationCreateObject culture(String culture) {
    this.culture = culture;
    return this;
  }

  /**
   * The culture for the new application. It is the language that your app understands and speaks. E.g.: \&quot;en-us\&quot;. Note: the culture cannot be changed after the app is created.
   * @return culture
   */
  @javax.annotation.Nonnull
  public String getCulture() {
    return culture;
  }

  public void setCulture(String culture) {
    this.culture = culture;
  }


  public ApplicationCreateObject description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the new application. Optional.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApplicationCreateObject domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The domain for the new application. Optional. E.g.: Comics.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public ApplicationCreateObject initialVersionId(String initialVersionId) {
    this.initialVersionId = initialVersionId;
    return this;
  }

  /**
   * The initial version ID. Optional. Default value is: \&quot;0.1\&quot;
   * @return initialVersionId
   */
  @javax.annotation.Nullable
  public String getInitialVersionId() {
    return initialVersionId;
  }

  public void setInitialVersionId(String initialVersionId) {
    this.initialVersionId = initialVersionId;
  }


  public ApplicationCreateObject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the new application.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationCreateObject usageScenario(String usageScenario) {
    this.usageScenario = usageScenario;
    return this;
  }

  /**
   * Defines the scenario for the new application. Optional. E.g.: IoT.
   * @return usageScenario
   */
  @javax.annotation.Nullable
  public String getUsageScenario() {
    return usageScenario;
  }

  public void setUsageScenario(String usageScenario) {
    this.usageScenario = usageScenario;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationCreateObject applicationCreateObject = (ApplicationCreateObject) o;
    return Objects.equals(this.culture, applicationCreateObject.culture) &&
        Objects.equals(this.description, applicationCreateObject.description) &&
        Objects.equals(this.domain, applicationCreateObject.domain) &&
        Objects.equals(this.initialVersionId, applicationCreateObject.initialVersionId) &&
        Objects.equals(this.name, applicationCreateObject.name) &&
        Objects.equals(this.usageScenario, applicationCreateObject.usageScenario);
  }

  @Override
  public int hashCode() {
    return Objects.hash(culture, description, domain, initialVersionId, name, usageScenario);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationCreateObject {\n");
    sb.append("    culture: ").append(toIndentedString(culture)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    initialVersionId: ").append(toIndentedString(initialVersionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    usageScenario: ").append(toIndentedString(usageScenario)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("culture");
    openapiFields.add("description");
    openapiFields.add("domain");
    openapiFields.add("initialVersionId");
    openapiFields.add("name");
    openapiFields.add("usageScenario");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("culture");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationCreateObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationCreateObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationCreateObject is not found in the empty JSON string", ApplicationCreateObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationCreateObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationCreateObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationCreateObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("culture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `culture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("culture").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("initialVersionId") != null && !jsonObj.get("initialVersionId").isJsonNull()) && !jsonObj.get("initialVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialVersionId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("usageScenario") != null && !jsonObj.get("usageScenario").isJsonNull()) && !jsonObj.get("usageScenario").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usageScenario` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usageScenario").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationCreateObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationCreateObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationCreateObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationCreateObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationCreateObject>() {
           @Override
           public void write(JsonWriter out, ApplicationCreateObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationCreateObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationCreateObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationCreateObject
   * @throws IOException if the JSON string is invalid with respect to ApplicationCreateObject
   */
  public static ApplicationCreateObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationCreateObject.class);
  }

  /**
   * Convert an instance of ApplicationCreateObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

