/*
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.EntityRole;
import org.openapitools.client.model.ReadableType;
import org.openapitools.client.model.SubClosedListResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List Entity Extractor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:11:40.225027-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClosedListEntityExtractor {
  public static final String SERIALIZED_NAME_SUB_LISTS = "subLists";
  @SerializedName(SERIALIZED_NAME_SUB_LISTS)
  private List<SubClosedListResponse> subLists = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_READABLE_TYPE = "readableType";
  @SerializedName(SERIALIZED_NAME_READABLE_TYPE)
  private ReadableType readableType;

  public static final String SERIALIZED_NAME_TYPE_ID = "typeId";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<EntityRole> roles = new ArrayList<>();

  public ClosedListEntityExtractor() {
  }

  public ClosedListEntityExtractor subLists(List<SubClosedListResponse> subLists) {
    this.subLists = subLists;
    return this;
  }

  public ClosedListEntityExtractor addSubListsItem(SubClosedListResponse subListsItem) {
    if (this.subLists == null) {
      this.subLists = new ArrayList<>();
    }
    this.subLists.add(subListsItem);
    return this;
  }

  /**
   * List of sublists.
   * @return subLists
   */
  @javax.annotation.Nullable
  public List<SubClosedListResponse> getSubLists() {
    return subLists;
  }

  public void setSubLists(List<SubClosedListResponse> subLists) {
    this.subLists = subLists;
  }


  public ClosedListEntityExtractor id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the Entity Model.
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }


  public ClosedListEntityExtractor name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the Entity Model.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ClosedListEntityExtractor readableType(ReadableType readableType) {
    this.readableType = readableType;
    return this;
  }

  /**
   * Get readableType
   * @return readableType
   */
  @javax.annotation.Nonnull
  public ReadableType getReadableType() {
    return readableType;
  }

  public void setReadableType(ReadableType readableType) {
    this.readableType = readableType;
  }


  public ClosedListEntityExtractor typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * The type ID of the Entity Model.
   * @return typeId
   */
  @javax.annotation.Nullable
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }


  public ClosedListEntityExtractor roles(List<EntityRole> roles) {
    this.roles = roles;
    return this;
  }

  public ClosedListEntityExtractor addRolesItem(EntityRole rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

  /**
   * List of Pattern.Any Entity Extractors.
   * @return roles
   */
  @javax.annotation.Nullable
  public List<EntityRole> getRoles() {
    return roles;
  }

  public void setRoles(List<EntityRole> roles) {
    this.roles = roles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClosedListEntityExtractor closedListEntityExtractor = (ClosedListEntityExtractor) o;
    return Objects.equals(this.subLists, closedListEntityExtractor.subLists) &&
        Objects.equals(this.id, closedListEntityExtractor.id) &&
        Objects.equals(this.name, closedListEntityExtractor.name) &&
        Objects.equals(this.readableType, closedListEntityExtractor.readableType) &&
        Objects.equals(this.typeId, closedListEntityExtractor.typeId) &&
        Objects.equals(this.roles, closedListEntityExtractor.roles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subLists, id, name, readableType, typeId, roles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClosedListEntityExtractor {\n");
    sb.append("    subLists: ").append(toIndentedString(subLists)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readableType: ").append(toIndentedString(readableType)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("readableType");
    openapiFields.add("typeId");
    openapiFields.add("roles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("readableType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClosedListEntityExtractor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClosedListEntityExtractor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClosedListEntityExtractor is not found in the empty JSON string", ClosedListEntityExtractor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClosedListEntityExtractor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClosedListEntityExtractor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClosedListEntityExtractor.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("subLists") != null && !jsonObj.get("subLists").isJsonNull()) {
        JsonArray jsonArraysubLists = jsonObj.getAsJsonArray("subLists");
        if (jsonArraysubLists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subLists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subLists` to be an array in the JSON string but got `%s`", jsonObj.get("subLists").toString()));
          }

          // validate the optional field `subLists` (array)
          for (int i = 0; i < jsonArraysubLists.size(); i++) {
            SubClosedListResponse.validateJsonElement(jsonArraysubLists.get(i));
          };
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `readableType`
      ReadableType.validateJsonElement(jsonObj.get("readableType"));
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        JsonArray jsonArrayroles = jsonObj.getAsJsonArray("roles");
        if (jsonArrayroles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
          }

          // validate the optional field `roles` (array)
          for (int i = 0; i < jsonArrayroles.size(); i++) {
            EntityRole.validateJsonElement(jsonArrayroles.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClosedListEntityExtractor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClosedListEntityExtractor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClosedListEntityExtractor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClosedListEntityExtractor.class));

       return (TypeAdapter<T>) new TypeAdapter<ClosedListEntityExtractor>() {
           @Override
           public void write(JsonWriter out, ClosedListEntityExtractor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClosedListEntityExtractor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClosedListEntityExtractor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClosedListEntityExtractor
   * @throws IOException if the JSON string is invalid with respect to ClosedListEntityExtractor
   */
  public static ClosedListEntityExtractor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClosedListEntityExtractor.class);
  }

  /**
   * Convert an instance of ClosedListEntityExtractor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

