/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabeledUtterance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabeledUtterance::OAILabeledUtterance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabeledUtterance::OAILabeledUtterance() {
    this->initializeModel();
}

OAILabeledUtterance::~OAILabeledUtterance() {}

void OAILabeledUtterance::initializeModel() {

    m_entity_labels_isSet = false;
    m_entity_labels_isValid = false;

    m_entity_predictions_isSet = false;
    m_entity_predictions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_intent_label_isSet = false;
    m_intent_label_isValid = false;

    m_intent_predictions_isSet = false;
    m_intent_predictions_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_tokenized_text_isSet = false;
    m_tokenized_text_isValid = false;
}

void OAILabeledUtterance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabeledUtterance::fromJsonObject(QJsonObject json) {

    m_entity_labels_isValid = ::OpenAPI::fromJsonValue(m_entity_labels, json[QString("entityLabels")]);
    m_entity_labels_isSet = !json[QString("entityLabels")].isNull() && m_entity_labels_isValid;

    m_entity_predictions_isValid = ::OpenAPI::fromJsonValue(m_entity_predictions, json[QString("entityPredictions")]);
    m_entity_predictions_isSet = !json[QString("entityPredictions")].isNull() && m_entity_predictions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_intent_label_isValid = ::OpenAPI::fromJsonValue(m_intent_label, json[QString("intentLabel")]);
    m_intent_label_isSet = !json[QString("intentLabel")].isNull() && m_intent_label_isValid;

    m_intent_predictions_isValid = ::OpenAPI::fromJsonValue(m_intent_predictions, json[QString("intentPredictions")]);
    m_intent_predictions_isSet = !json[QString("intentPredictions")].isNull() && m_intent_predictions_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_tokenized_text_isValid = ::OpenAPI::fromJsonValue(m_tokenized_text, json[QString("tokenizedText")]);
    m_tokenized_text_isSet = !json[QString("tokenizedText")].isNull() && m_tokenized_text_isValid;
}

QString OAILabeledUtterance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabeledUtterance::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_labels.size() > 0) {
        obj.insert(QString("entityLabels"), ::OpenAPI::toJsonValue(m_entity_labels));
    }
    if (m_entity_predictions.size() > 0) {
        obj.insert(QString("entityPredictions"), ::OpenAPI::toJsonValue(m_entity_predictions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_intent_label_isSet) {
        obj.insert(QString("intentLabel"), ::OpenAPI::toJsonValue(m_intent_label));
    }
    if (m_intent_predictions.size() > 0) {
        obj.insert(QString("intentPredictions"), ::OpenAPI::toJsonValue(m_intent_predictions));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_tokenized_text.size() > 0) {
        obj.insert(QString("tokenizedText"), ::OpenAPI::toJsonValue(m_tokenized_text));
    }
    return obj;
}

QList<OAIEntityLabel> OAILabeledUtterance::getEntityLabels() const {
    return m_entity_labels;
}
void OAILabeledUtterance::setEntityLabels(const QList<OAIEntityLabel> &entity_labels) {
    m_entity_labels = entity_labels;
    m_entity_labels_isSet = true;
}

bool OAILabeledUtterance::is_entity_labels_Set() const{
    return m_entity_labels_isSet;
}

bool OAILabeledUtterance::is_entity_labels_Valid() const{
    return m_entity_labels_isValid;
}

QList<OAIEntityPrediction> OAILabeledUtterance::getEntityPredictions() const {
    return m_entity_predictions;
}
void OAILabeledUtterance::setEntityPredictions(const QList<OAIEntityPrediction> &entity_predictions) {
    m_entity_predictions = entity_predictions;
    m_entity_predictions_isSet = true;
}

bool OAILabeledUtterance::is_entity_predictions_Set() const{
    return m_entity_predictions_isSet;
}

bool OAILabeledUtterance::is_entity_predictions_Valid() const{
    return m_entity_predictions_isValid;
}

qint32 OAILabeledUtterance::getId() const {
    return m_id;
}
void OAILabeledUtterance::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILabeledUtterance::is_id_Set() const{
    return m_id_isSet;
}

bool OAILabeledUtterance::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILabeledUtterance::getIntentLabel() const {
    return m_intent_label;
}
void OAILabeledUtterance::setIntentLabel(const QString &intent_label) {
    m_intent_label = intent_label;
    m_intent_label_isSet = true;
}

bool OAILabeledUtterance::is_intent_label_Set() const{
    return m_intent_label_isSet;
}

bool OAILabeledUtterance::is_intent_label_Valid() const{
    return m_intent_label_isValid;
}

QList<OAIIntentPrediction> OAILabeledUtterance::getIntentPredictions() const {
    return m_intent_predictions;
}
void OAILabeledUtterance::setIntentPredictions(const QList<OAIIntentPrediction> &intent_predictions) {
    m_intent_predictions = intent_predictions;
    m_intent_predictions_isSet = true;
}

bool OAILabeledUtterance::is_intent_predictions_Set() const{
    return m_intent_predictions_isSet;
}

bool OAILabeledUtterance::is_intent_predictions_Valid() const{
    return m_intent_predictions_isValid;
}

QString OAILabeledUtterance::getText() const {
    return m_text;
}
void OAILabeledUtterance::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAILabeledUtterance::is_text_Set() const{
    return m_text_isSet;
}

bool OAILabeledUtterance::is_text_Valid() const{
    return m_text_isValid;
}

QList<QString> OAILabeledUtterance::getTokenizedText() const {
    return m_tokenized_text;
}
void OAILabeledUtterance::setTokenizedText(const QList<QString> &tokenized_text) {
    m_tokenized_text = tokenized_text;
    m_tokenized_text_isSet = true;
}

bool OAILabeledUtterance::is_tokenized_text_Set() const{
    return m_tokenized_text_isSet;
}

bool OAILabeledUtterance::is_tokenized_text_Valid() const{
    return m_tokenized_text_isValid;
}

bool OAILabeledUtterance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_predictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_predictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tokenized_text.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabeledUtterance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
