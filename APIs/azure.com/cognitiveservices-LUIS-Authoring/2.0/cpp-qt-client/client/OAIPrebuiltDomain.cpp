/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrebuiltDomain.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrebuiltDomain::OAIPrebuiltDomain(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrebuiltDomain::OAIPrebuiltDomain() {
    this->initializeModel();
}

OAIPrebuiltDomain::~OAIPrebuiltDomain() {}

void OAIPrebuiltDomain::initializeModel() {

    m_culture_isSet = false;
    m_culture_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_examples_isSet = false;
    m_examples_isValid = false;

    m_intents_isSet = false;
    m_intents_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPrebuiltDomain::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrebuiltDomain::fromJsonObject(QJsonObject json) {

    m_culture_isValid = ::OpenAPI::fromJsonValue(m_culture, json[QString("culture")]);
    m_culture_isSet = !json[QString("culture")].isNull() && m_culture_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_examples_isValid = ::OpenAPI::fromJsonValue(m_examples, json[QString("examples")]);
    m_examples_isSet = !json[QString("examples")].isNull() && m_examples_isValid;

    m_intents_isValid = ::OpenAPI::fromJsonValue(m_intents, json[QString("intents")]);
    m_intents_isSet = !json[QString("intents")].isNull() && m_intents_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPrebuiltDomain::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrebuiltDomain::asJsonObject() const {
    QJsonObject obj;
    if (m_culture_isSet) {
        obj.insert(QString("culture"), ::OpenAPI::toJsonValue(m_culture));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_examples_isSet) {
        obj.insert(QString("examples"), ::OpenAPI::toJsonValue(m_examples));
    }
    if (m_intents.size() > 0) {
        obj.insert(QString("intents"), ::OpenAPI::toJsonValue(m_intents));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIPrebuiltDomain::getCulture() const {
    return m_culture;
}
void OAIPrebuiltDomain::setCulture(const QString &culture) {
    m_culture = culture;
    m_culture_isSet = true;
}

bool OAIPrebuiltDomain::is_culture_Set() const{
    return m_culture_isSet;
}

bool OAIPrebuiltDomain::is_culture_Valid() const{
    return m_culture_isValid;
}

QString OAIPrebuiltDomain::getDescription() const {
    return m_description;
}
void OAIPrebuiltDomain::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPrebuiltDomain::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPrebuiltDomain::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIPrebuiltDomainItem> OAIPrebuiltDomain::getEntities() const {
    return m_entities;
}
void OAIPrebuiltDomain::setEntities(const QList<OAIPrebuiltDomainItem> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAIPrebuiltDomain::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAIPrebuiltDomain::is_entities_Valid() const{
    return m_entities_isValid;
}

QString OAIPrebuiltDomain::getExamples() const {
    return m_examples;
}
void OAIPrebuiltDomain::setExamples(const QString &examples) {
    m_examples = examples;
    m_examples_isSet = true;
}

bool OAIPrebuiltDomain::is_examples_Set() const{
    return m_examples_isSet;
}

bool OAIPrebuiltDomain::is_examples_Valid() const{
    return m_examples_isValid;
}

QList<OAIPrebuiltDomainItem> OAIPrebuiltDomain::getIntents() const {
    return m_intents;
}
void OAIPrebuiltDomain::setIntents(const QList<OAIPrebuiltDomainItem> &intents) {
    m_intents = intents;
    m_intents_isSet = true;
}

bool OAIPrebuiltDomain::is_intents_Set() const{
    return m_intents_isSet;
}

bool OAIPrebuiltDomain::is_intents_Valid() const{
    return m_intents_isValid;
}

QString OAIPrebuiltDomain::getName() const {
    return m_name;
}
void OAIPrebuiltDomain::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPrebuiltDomain::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPrebuiltDomain::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPrebuiltDomain::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_examples_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrebuiltDomain::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
