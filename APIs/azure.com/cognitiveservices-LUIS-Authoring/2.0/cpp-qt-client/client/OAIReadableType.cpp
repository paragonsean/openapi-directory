/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadableType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadableType::OAIReadableType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadableType::OAIReadableType() {
    this->initializeModel();
}

OAIReadableType::~OAIReadableType() {}

void OAIReadableType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReadableType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReadableType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Entity Extractor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadableType::ENTITY_EXTRACTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Hierarchical Entity Extractor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadableType::HIERARCHICAL_ENTITY_EXTRACTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Hierarchical Child Entity Extractor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadableType::HIERARCHICAL_CHILD_ENTITY_EXTRACTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Composite Entity Extractor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadableType::COMPOSITE_ENTITY_EXTRACTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("List Entity Extractor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadableType::LIST_ENTITY_EXTRACTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Prebuilt Entity Extractor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadableType::PREBUILT_ENTITY_EXTRACTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Intent Classifier", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadableType::INTENT_CLASSIFIER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pattern.Any Entity Extractor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadableType::PATTERN_ANY_ENTITY_EXTRACTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Closed List Entity Extractor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadableType::CLOSED_LIST_ENTITY_EXTRACTOR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Regex Entity Extractor", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReadableType::REGEX_ENTITY_EXTRACTOR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReadableType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReadableType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReadableType::ENTITY_EXTRACTOR:
            val = "Entity Extractor";
            break;
        case eOAIReadableType::HIERARCHICAL_ENTITY_EXTRACTOR:
            val = "Hierarchical Entity Extractor";
            break;
        case eOAIReadableType::HIERARCHICAL_CHILD_ENTITY_EXTRACTOR:
            val = "Hierarchical Child Entity Extractor";
            break;
        case eOAIReadableType::COMPOSITE_ENTITY_EXTRACTOR:
            val = "Composite Entity Extractor";
            break;
        case eOAIReadableType::LIST_ENTITY_EXTRACTOR:
            val = "List Entity Extractor";
            break;
        case eOAIReadableType::PREBUILT_ENTITY_EXTRACTOR:
            val = "Prebuilt Entity Extractor";
            break;
        case eOAIReadableType::INTENT_CLASSIFIER:
            val = "Intent Classifier";
            break;
        case eOAIReadableType::PATTERN_ANY_ENTITY_EXTRACTOR:
            val = "Pattern.Any Entity Extractor";
            break;
        case eOAIReadableType::CLOSED_LIST_ENTITY_EXTRACTOR:
            val = "Closed List Entity Extractor";
            break;
        case eOAIReadableType::REGEX_ENTITY_EXTRACTOR:
            val = "Regex Entity Extractor";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReadableType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReadableType::eOAIReadableType OAIReadableType::getValue() const {
    return m_value;
}

void OAIReadableType::setValue(const OAIReadableType::eOAIReadableType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReadableType::isSet() const {
    
    return m_value_isSet;
}

bool OAIReadableType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
