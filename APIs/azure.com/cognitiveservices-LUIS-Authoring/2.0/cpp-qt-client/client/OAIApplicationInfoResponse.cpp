/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationInfoResponse::OAIApplicationInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationInfoResponse::OAIApplicationInfoResponse() {
    this->initializeModel();
}

OAIApplicationInfoResponse::~OAIApplicationInfoResponse() {}

void OAIApplicationInfoResponse::initializeModel() {

    m_active_version_isSet = false;
    m_active_version_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_culture_isSet = false;
    m_culture_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_endpoint_hits_count_isSet = false;
    m_endpoint_hits_count_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_usage_scenario_isSet = false;
    m_usage_scenario_isValid = false;

    m_versions_count_isSet = false;
    m_versions_count_isValid = false;
}

void OAIApplicationInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationInfoResponse::fromJsonObject(QJsonObject json) {

    m_active_version_isValid = ::OpenAPI::fromJsonValue(m_active_version, json[QString("activeVersion")]);
    m_active_version_isSet = !json[QString("activeVersion")].isNull() && m_active_version_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_culture_isValid = ::OpenAPI::fromJsonValue(m_culture, json[QString("culture")]);
    m_culture_isSet = !json[QString("culture")].isNull() && m_culture_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_endpoint_hits_count_isValid = ::OpenAPI::fromJsonValue(m_endpoint_hits_count, json[QString("endpointHitsCount")]);
    m_endpoint_hits_count_isSet = !json[QString("endpointHitsCount")].isNull() && m_endpoint_hits_count_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_usage_scenario_isValid = ::OpenAPI::fromJsonValue(m_usage_scenario, json[QString("usageScenario")]);
    m_usage_scenario_isSet = !json[QString("usageScenario")].isNull() && m_usage_scenario_isValid;

    m_versions_count_isValid = ::OpenAPI::fromJsonValue(m_versions_count, json[QString("versionsCount")]);
    m_versions_count_isSet = !json[QString("versionsCount")].isNull() && m_versions_count_isValid;
}

QString OAIApplicationInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_active_version_isSet) {
        obj.insert(QString("activeVersion"), ::OpenAPI::toJsonValue(m_active_version));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_culture_isSet) {
        obj.insert(QString("culture"), ::OpenAPI::toJsonValue(m_culture));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_endpoint_hits_count_isSet) {
        obj.insert(QString("endpointHitsCount"), ::OpenAPI::toJsonValue(m_endpoint_hits_count));
    }
    if (m_endpoints_isSet) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_usage_scenario_isSet) {
        obj.insert(QString("usageScenario"), ::OpenAPI::toJsonValue(m_usage_scenario));
    }
    if (m_versions_count_isSet) {
        obj.insert(QString("versionsCount"), ::OpenAPI::toJsonValue(m_versions_count));
    }
    return obj;
}

QString OAIApplicationInfoResponse::getActiveVersion() const {
    return m_active_version;
}
void OAIApplicationInfoResponse::setActiveVersion(const QString &active_version) {
    m_active_version = active_version;
    m_active_version_isSet = true;
}

bool OAIApplicationInfoResponse::is_active_version_Set() const{
    return m_active_version_isSet;
}

bool OAIApplicationInfoResponse::is_active_version_Valid() const{
    return m_active_version_isValid;
}

QString OAIApplicationInfoResponse::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIApplicationInfoResponse::setCreatedDateTime(const QString &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIApplicationInfoResponse::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIApplicationInfoResponse::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIApplicationInfoResponse::getCulture() const {
    return m_culture;
}
void OAIApplicationInfoResponse::setCulture(const QString &culture) {
    m_culture = culture;
    m_culture_isSet = true;
}

bool OAIApplicationInfoResponse::is_culture_Set() const{
    return m_culture_isSet;
}

bool OAIApplicationInfoResponse::is_culture_Valid() const{
    return m_culture_isValid;
}

QString OAIApplicationInfoResponse::getDescription() const {
    return m_description;
}
void OAIApplicationInfoResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationInfoResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationInfoResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApplicationInfoResponse::getDomain() const {
    return m_domain;
}
void OAIApplicationInfoResponse::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIApplicationInfoResponse::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIApplicationInfoResponse::is_domain_Valid() const{
    return m_domain_isValid;
}

qint32 OAIApplicationInfoResponse::getEndpointHitsCount() const {
    return m_endpoint_hits_count;
}
void OAIApplicationInfoResponse::setEndpointHitsCount(const qint32 &endpoint_hits_count) {
    m_endpoint_hits_count = endpoint_hits_count;
    m_endpoint_hits_count_isSet = true;
}

bool OAIApplicationInfoResponse::is_endpoint_hits_count_Set() const{
    return m_endpoint_hits_count_isSet;
}

bool OAIApplicationInfoResponse::is_endpoint_hits_count_Valid() const{
    return m_endpoint_hits_count_isValid;
}

OAIObject OAIApplicationInfoResponse::getEndpoints() const {
    return m_endpoints;
}
void OAIApplicationInfoResponse::setEndpoints(const OAIObject &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIApplicationInfoResponse::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIApplicationInfoResponse::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAIApplicationInfoResponse::getId() const {
    return m_id;
}
void OAIApplicationInfoResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplicationInfoResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplicationInfoResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIApplicationInfoResponse::getName() const {
    return m_name;
}
void OAIApplicationInfoResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationInfoResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationInfoResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplicationInfoResponse::getUsageScenario() const {
    return m_usage_scenario;
}
void OAIApplicationInfoResponse::setUsageScenario(const QString &usage_scenario) {
    m_usage_scenario = usage_scenario;
    m_usage_scenario_isSet = true;
}

bool OAIApplicationInfoResponse::is_usage_scenario_Set() const{
    return m_usage_scenario_isSet;
}

bool OAIApplicationInfoResponse::is_usage_scenario_Valid() const{
    return m_usage_scenario_isValid;
}

qint32 OAIApplicationInfoResponse::getVersionsCount() const {
    return m_versions_count;
}
void OAIApplicationInfoResponse::setVersionsCount(const qint32 &versions_count) {
    m_versions_count = versions_count;
    m_versions_count_isSet = true;
}

bool OAIApplicationInfoResponse::is_versions_count_Set() const{
    return m_versions_count_isSet;
}

bool OAIApplicationInfoResponse::is_versions_count_Valid() const{
    return m_versions_count_isValid;
}

bool OAIApplicationInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_culture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_hits_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_scenario_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
