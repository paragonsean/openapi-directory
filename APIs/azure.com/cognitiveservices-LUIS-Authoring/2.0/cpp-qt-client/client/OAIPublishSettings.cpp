/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishSettings::OAIPublishSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishSettings::OAIPublishSettings() {
    this->initializeModel();
}

OAIPublishSettings::~OAIPublishSettings() {}

void OAIPublishSettings::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_sentiment_analysis_isSet = false;
    m_sentiment_analysis_isValid = false;

    m_speech_isSet = false;
    m_speech_isValid = false;

    m_spell_checker_isSet = false;
    m_spell_checker_isValid = false;
}

void OAIPublishSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishSettings::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_sentiment_analysis_isValid = ::OpenAPI::fromJsonValue(m_sentiment_analysis, json[QString("sentimentAnalysis")]);
    m_sentiment_analysis_isSet = !json[QString("sentimentAnalysis")].isNull() && m_sentiment_analysis_isValid;

    m_speech_isValid = ::OpenAPI::fromJsonValue(m_speech, json[QString("speech")]);
    m_speech_isSet = !json[QString("speech")].isNull() && m_speech_isValid;

    m_spell_checker_isValid = ::OpenAPI::fromJsonValue(m_spell_checker, json[QString("spellChecker")]);
    m_spell_checker_isSet = !json[QString("spellChecker")].isNull() && m_spell_checker_isValid;
}

QString OAIPublishSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_sentiment_analysis_isSet) {
        obj.insert(QString("sentimentAnalysis"), ::OpenAPI::toJsonValue(m_sentiment_analysis));
    }
    if (m_speech_isSet) {
        obj.insert(QString("speech"), ::OpenAPI::toJsonValue(m_speech));
    }
    if (m_spell_checker_isSet) {
        obj.insert(QString("spellChecker"), ::OpenAPI::toJsonValue(m_spell_checker));
    }
    return obj;
}

QString OAIPublishSettings::getId() const {
    return m_id;
}
void OAIPublishSettings::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublishSettings::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublishSettings::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPublishSettings::isSentimentAnalysis() const {
    return m_sentiment_analysis;
}
void OAIPublishSettings::setSentimentAnalysis(const bool &sentiment_analysis) {
    m_sentiment_analysis = sentiment_analysis;
    m_sentiment_analysis_isSet = true;
}

bool OAIPublishSettings::is_sentiment_analysis_Set() const{
    return m_sentiment_analysis_isSet;
}

bool OAIPublishSettings::is_sentiment_analysis_Valid() const{
    return m_sentiment_analysis_isValid;
}

bool OAIPublishSettings::isSpeech() const {
    return m_speech;
}
void OAIPublishSettings::setSpeech(const bool &speech) {
    m_speech = speech;
    m_speech_isSet = true;
}

bool OAIPublishSettings::is_speech_Set() const{
    return m_speech_isSet;
}

bool OAIPublishSettings::is_speech_Valid() const{
    return m_speech_isValid;
}

bool OAIPublishSettings::isSpellChecker() const {
    return m_spell_checker;
}
void OAIPublishSettings::setSpellChecker(const bool &spell_checker) {
    m_spell_checker = spell_checker;
    m_spell_checker_isSet = true;
}

bool OAIPublishSettings::is_spell_checker_Set() const{
    return m_spell_checker_isSet;
}

bool OAIPublishSettings::is_spell_checker_Valid() const{
    return m_spell_checker_isValid;
}

bool OAIPublishSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_analysis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speech_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spell_checker_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_sentiment_analysis_isValid && m_speech_isValid && m_spell_checker_isValid && true;
}

} // namespace OpenAPI
