/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJSONModelFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJSONModelFeature::OAIJSONModelFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJSONModelFeature::OAIJSONModelFeature() {
    this->initializeModel();
}

OAIJSONModelFeature::~OAIJSONModelFeature() {}

void OAIJSONModelFeature::initializeModel() {

    m_activated_isSet = false;
    m_activated_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_words_isSet = false;
    m_words_isValid = false;
}

void OAIJSONModelFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJSONModelFeature::fromJsonObject(QJsonObject json) {

    m_activated_isValid = ::OpenAPI::fromJsonValue(m_activated, json[QString("activated")]);
    m_activated_isSet = !json[QString("activated")].isNull() && m_activated_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_words_isValid = ::OpenAPI::fromJsonValue(m_words, json[QString("words")]);
    m_words_isSet = !json[QString("words")].isNull() && m_words_isValid;
}

QString OAIJSONModelFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJSONModelFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_activated_isSet) {
        obj.insert(QString("activated"), ::OpenAPI::toJsonValue(m_activated));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_words_isSet) {
        obj.insert(QString("words"), ::OpenAPI::toJsonValue(m_words));
    }
    return obj;
}

bool OAIJSONModelFeature::isActivated() const {
    return m_activated;
}
void OAIJSONModelFeature::setActivated(const bool &activated) {
    m_activated = activated;
    m_activated_isSet = true;
}

bool OAIJSONModelFeature::is_activated_Set() const{
    return m_activated_isSet;
}

bool OAIJSONModelFeature::is_activated_Valid() const{
    return m_activated_isValid;
}

bool OAIJSONModelFeature::isMode() const {
    return m_mode;
}
void OAIJSONModelFeature::setMode(const bool &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIJSONModelFeature::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIJSONModelFeature::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIJSONModelFeature::getName() const {
    return m_name;
}
void OAIJSONModelFeature::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIJSONModelFeature::is_name_Set() const{
    return m_name_isSet;
}

bool OAIJSONModelFeature::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIJSONModelFeature::getWords() const {
    return m_words;
}
void OAIJSONModelFeature::setWords(const QString &words) {
    m_words = words;
    m_words_isSet = true;
}

bool OAIJSONModelFeature::is_words_Set() const{
    return m_words_isSet;
}

bool OAIJSONModelFeature::is_words_Valid() const{
    return m_words_isValid;
}

bool OAIJSONModelFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_words_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJSONModelFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
