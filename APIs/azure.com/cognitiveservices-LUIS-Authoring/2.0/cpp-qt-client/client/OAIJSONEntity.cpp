/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJSONEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJSONEntity::OAIJSONEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJSONEntity::OAIJSONEntity() {
    this->initializeModel();
}

OAIJSONEntity::~OAIJSONEntity() {}

void OAIJSONEntity::initializeModel() {

    m_end_pos_isSet = false;
    m_end_pos_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_start_pos_isSet = false;
    m_start_pos_isValid = false;
}

void OAIJSONEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJSONEntity::fromJsonObject(QJsonObject json) {

    m_end_pos_isValid = ::OpenAPI::fromJsonValue(m_end_pos, json[QString("endPos")]);
    m_end_pos_isSet = !json[QString("endPos")].isNull() && m_end_pos_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_start_pos_isValid = ::OpenAPI::fromJsonValue(m_start_pos, json[QString("startPos")]);
    m_start_pos_isSet = !json[QString("startPos")].isNull() && m_start_pos_isValid;
}

QString OAIJSONEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJSONEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_end_pos_isSet) {
        obj.insert(QString("endPos"), ::OpenAPI::toJsonValue(m_end_pos));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_start_pos_isSet) {
        obj.insert(QString("startPos"), ::OpenAPI::toJsonValue(m_start_pos));
    }
    return obj;
}

qint32 OAIJSONEntity::getEndPos() const {
    return m_end_pos;
}
void OAIJSONEntity::setEndPos(const qint32 &end_pos) {
    m_end_pos = end_pos;
    m_end_pos_isSet = true;
}

bool OAIJSONEntity::is_end_pos_Set() const{
    return m_end_pos_isSet;
}

bool OAIJSONEntity::is_end_pos_Valid() const{
    return m_end_pos_isValid;
}

QString OAIJSONEntity::getEntity() const {
    return m_entity;
}
void OAIJSONEntity::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIJSONEntity::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIJSONEntity::is_entity_Valid() const{
    return m_entity_isValid;
}

QString OAIJSONEntity::getRole() const {
    return m_role;
}
void OAIJSONEntity::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIJSONEntity::is_role_Set() const{
    return m_role_isSet;
}

bool OAIJSONEntity::is_role_Valid() const{
    return m_role_isValid;
}

qint32 OAIJSONEntity::getStartPos() const {
    return m_start_pos;
}
void OAIJSONEntity::setStartPos(const qint32 &start_pos) {
    m_start_pos = start_pos;
    m_start_pos_isSet = true;
}

bool OAIJSONEntity::is_start_pos_Set() const{
    return m_start_pos_isSet;
}

bool OAIJSONEntity::is_start_pos_Valid() const{
    return m_start_pos_isValid;
}

bool OAIJSONEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_pos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_pos_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJSONEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_pos_isValid && m_entity_isValid && m_start_pos_isValid && true;
}

} // namespace OpenAPI
