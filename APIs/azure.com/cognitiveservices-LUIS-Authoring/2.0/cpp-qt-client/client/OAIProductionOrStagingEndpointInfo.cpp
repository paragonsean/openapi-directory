/**
 * LUIS Authoring Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductionOrStagingEndpointInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductionOrStagingEndpointInfo::OAIProductionOrStagingEndpointInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductionOrStagingEndpointInfo::OAIProductionOrStagingEndpointInfo() {
    this->initializeModel();
}

OAIProductionOrStagingEndpointInfo::~OAIProductionOrStagingEndpointInfo() {}

void OAIProductionOrStagingEndpointInfo::initializeModel() {

    m_assigned_endpoint_key_isSet = false;
    m_assigned_endpoint_key_isValid = false;

    m_endpoint_region_isSet = false;
    m_endpoint_region_isValid = false;

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_failed_regions_isSet = false;
    m_failed_regions_isValid = false;

    m_is_staging_isSet = false;
    m_is_staging_isValid = false;

    m_published_date_time_isSet = false;
    m_published_date_time_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIProductionOrStagingEndpointInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductionOrStagingEndpointInfo::fromJsonObject(QJsonObject json) {

    m_assigned_endpoint_key_isValid = ::OpenAPI::fromJsonValue(m_assigned_endpoint_key, json[QString("assignedEndpointKey")]);
    m_assigned_endpoint_key_isSet = !json[QString("assignedEndpointKey")].isNull() && m_assigned_endpoint_key_isValid;

    m_endpoint_region_isValid = ::OpenAPI::fromJsonValue(m_endpoint_region, json[QString("endpointRegion")]);
    m_endpoint_region_isSet = !json[QString("endpointRegion")].isNull() && m_endpoint_region_isValid;

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("endpointUrl")]);
    m_endpoint_url_isSet = !json[QString("endpointUrl")].isNull() && m_endpoint_url_isValid;

    m_failed_regions_isValid = ::OpenAPI::fromJsonValue(m_failed_regions, json[QString("failedRegions")]);
    m_failed_regions_isSet = !json[QString("failedRegions")].isNull() && m_failed_regions_isValid;

    m_is_staging_isValid = ::OpenAPI::fromJsonValue(m_is_staging, json[QString("isStaging")]);
    m_is_staging_isSet = !json[QString("isStaging")].isNull() && m_is_staging_isValid;

    m_published_date_time_isValid = ::OpenAPI::fromJsonValue(m_published_date_time, json[QString("publishedDateTime")]);
    m_published_date_time_isSet = !json[QString("publishedDateTime")].isNull() && m_published_date_time_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("versionId")]);
    m_version_id_isSet = !json[QString("versionId")].isNull() && m_version_id_isValid;
}

QString OAIProductionOrStagingEndpointInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductionOrStagingEndpointInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_assigned_endpoint_key_isSet) {
        obj.insert(QString("assignedEndpointKey"), ::OpenAPI::toJsonValue(m_assigned_endpoint_key));
    }
    if (m_endpoint_region_isSet) {
        obj.insert(QString("endpointRegion"), ::OpenAPI::toJsonValue(m_endpoint_region));
    }
    if (m_endpoint_url_isSet) {
        obj.insert(QString("endpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_failed_regions_isSet) {
        obj.insert(QString("failedRegions"), ::OpenAPI::toJsonValue(m_failed_regions));
    }
    if (m_is_staging_isSet) {
        obj.insert(QString("isStaging"), ::OpenAPI::toJsonValue(m_is_staging));
    }
    if (m_published_date_time_isSet) {
        obj.insert(QString("publishedDateTime"), ::OpenAPI::toJsonValue(m_published_date_time));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("versionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIProductionOrStagingEndpointInfo::getAssignedEndpointKey() const {
    return m_assigned_endpoint_key;
}
void OAIProductionOrStagingEndpointInfo::setAssignedEndpointKey(const QString &assigned_endpoint_key) {
    m_assigned_endpoint_key = assigned_endpoint_key;
    m_assigned_endpoint_key_isSet = true;
}

bool OAIProductionOrStagingEndpointInfo::is_assigned_endpoint_key_Set() const{
    return m_assigned_endpoint_key_isSet;
}

bool OAIProductionOrStagingEndpointInfo::is_assigned_endpoint_key_Valid() const{
    return m_assigned_endpoint_key_isValid;
}

QString OAIProductionOrStagingEndpointInfo::getEndpointRegion() const {
    return m_endpoint_region;
}
void OAIProductionOrStagingEndpointInfo::setEndpointRegion(const QString &endpoint_region) {
    m_endpoint_region = endpoint_region;
    m_endpoint_region_isSet = true;
}

bool OAIProductionOrStagingEndpointInfo::is_endpoint_region_Set() const{
    return m_endpoint_region_isSet;
}

bool OAIProductionOrStagingEndpointInfo::is_endpoint_region_Valid() const{
    return m_endpoint_region_isValid;
}

QString OAIProductionOrStagingEndpointInfo::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIProductionOrStagingEndpointInfo::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIProductionOrStagingEndpointInfo::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIProductionOrStagingEndpointInfo::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

QString OAIProductionOrStagingEndpointInfo::getFailedRegions() const {
    return m_failed_regions;
}
void OAIProductionOrStagingEndpointInfo::setFailedRegions(const QString &failed_regions) {
    m_failed_regions = failed_regions;
    m_failed_regions_isSet = true;
}

bool OAIProductionOrStagingEndpointInfo::is_failed_regions_Set() const{
    return m_failed_regions_isSet;
}

bool OAIProductionOrStagingEndpointInfo::is_failed_regions_Valid() const{
    return m_failed_regions_isValid;
}

bool OAIProductionOrStagingEndpointInfo::isIsStaging() const {
    return m_is_staging;
}
void OAIProductionOrStagingEndpointInfo::setIsStaging(const bool &is_staging) {
    m_is_staging = is_staging;
    m_is_staging_isSet = true;
}

bool OAIProductionOrStagingEndpointInfo::is_is_staging_Set() const{
    return m_is_staging_isSet;
}

bool OAIProductionOrStagingEndpointInfo::is_is_staging_Valid() const{
    return m_is_staging_isValid;
}

QString OAIProductionOrStagingEndpointInfo::getPublishedDateTime() const {
    return m_published_date_time;
}
void OAIProductionOrStagingEndpointInfo::setPublishedDateTime(const QString &published_date_time) {
    m_published_date_time = published_date_time;
    m_published_date_time_isSet = true;
}

bool OAIProductionOrStagingEndpointInfo::is_published_date_time_Set() const{
    return m_published_date_time_isSet;
}

bool OAIProductionOrStagingEndpointInfo::is_published_date_time_Valid() const{
    return m_published_date_time_isValid;
}

QString OAIProductionOrStagingEndpointInfo::getRegion() const {
    return m_region;
}
void OAIProductionOrStagingEndpointInfo::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIProductionOrStagingEndpointInfo::is_region_Set() const{
    return m_region_isSet;
}

bool OAIProductionOrStagingEndpointInfo::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIProductionOrStagingEndpointInfo::getVersionId() const {
    return m_version_id;
}
void OAIProductionOrStagingEndpointInfo::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIProductionOrStagingEndpointInfo::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIProductionOrStagingEndpointInfo::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIProductionOrStagingEndpointInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assigned_endpoint_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_regions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_staging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductionOrStagingEndpointInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
