# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TdeCertificateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_password: str=None, private_blob: str=None):
        """TdeCertificateProperties - a model defined in OpenAPI

        :param cert_password: The cert_password of this TdeCertificateProperties.
        :param private_blob: The private_blob of this TdeCertificateProperties.
        """
        self.openapi_types = {
            'cert_password': str,
            'private_blob': str
        }

        self.attribute_map = {
            'cert_password': 'certPassword',
            'private_blob': 'privateBlob'
        }

        self._cert_password = cert_password
        self._private_blob = private_blob

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TdeCertificateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TdeCertificateProperties of this TdeCertificateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_password(self):
        """Gets the cert_password of this TdeCertificateProperties.

        The certificate password.

        :return: The cert_password of this TdeCertificateProperties.
        :rtype: str
        """
        return self._cert_password

    @cert_password.setter
    def cert_password(self, cert_password):
        """Sets the cert_password of this TdeCertificateProperties.

        The certificate password.

        :param cert_password: The cert_password of this TdeCertificateProperties.
        :type cert_password: str
        """

        self._cert_password = cert_password

    @property
    def private_blob(self):
        """Gets the private_blob of this TdeCertificateProperties.

        The base64 encoded certificate private blob.

        :return: The private_blob of this TdeCertificateProperties.
        :rtype: str
        """
        return self._private_blob

    @private_blob.setter
    def private_blob(self, private_blob):
        """Sets the private_blob of this TdeCertificateProperties.

        The base64 encoded certificate private blob.

        :param private_blob: The private_blob of this TdeCertificateProperties.
        :type private_blob: str
        """
        if private_blob is None:
            raise ValueError("Invalid value for `private_blob`, must not be `None`")

        self._private_blob = private_blob
