/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITdeCertificateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITdeCertificateProperties::OAITdeCertificateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITdeCertificateProperties::OAITdeCertificateProperties() {
    this->initializeModel();
}

OAITdeCertificateProperties::~OAITdeCertificateProperties() {}

void OAITdeCertificateProperties::initializeModel() {

    m_cert_password_isSet = false;
    m_cert_password_isValid = false;

    m_private_blob_isSet = false;
    m_private_blob_isValid = false;
}

void OAITdeCertificateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITdeCertificateProperties::fromJsonObject(QJsonObject json) {

    m_cert_password_isValid = ::OpenAPI::fromJsonValue(m_cert_password, json[QString("certPassword")]);
    m_cert_password_isSet = !json[QString("certPassword")].isNull() && m_cert_password_isValid;

    m_private_blob_isValid = ::OpenAPI::fromJsonValue(m_private_blob, json[QString("privateBlob")]);
    m_private_blob_isSet = !json[QString("privateBlob")].isNull() && m_private_blob_isValid;
}

QString OAITdeCertificateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITdeCertificateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_password_isSet) {
        obj.insert(QString("certPassword"), ::OpenAPI::toJsonValue(m_cert_password));
    }
    if (m_private_blob_isSet) {
        obj.insert(QString("privateBlob"), ::OpenAPI::toJsonValue(m_private_blob));
    }
    return obj;
}

QString OAITdeCertificateProperties::getCertPassword() const {
    return m_cert_password;
}
void OAITdeCertificateProperties::setCertPassword(const QString &cert_password) {
    m_cert_password = cert_password;
    m_cert_password_isSet = true;
}

bool OAITdeCertificateProperties::is_cert_password_Set() const{
    return m_cert_password_isSet;
}

bool OAITdeCertificateProperties::is_cert_password_Valid() const{
    return m_cert_password_isValid;
}

QString OAITdeCertificateProperties::getPrivateBlob() const {
    return m_private_blob;
}
void OAITdeCertificateProperties::setPrivateBlob(const QString &private_blob) {
    m_private_blob = private_blob;
    m_private_blob_isSet = true;
}

bool OAITdeCertificateProperties::is_private_blob_Set() const{
    return m_private_blob_isSet;
}

bool OAITdeCertificateProperties::is_private_blob_Valid() const{
    return m_private_blob_isValid;
}

bool OAITdeCertificateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_blob_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITdeCertificateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_private_blob_isValid && true;
}

} // namespace OpenAPI
