/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a TDE certificate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:21.637157-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TdeCertificateProperties {
  public static final String SERIALIZED_NAME_CERT_PASSWORD = "certPassword";
  @SerializedName(SERIALIZED_NAME_CERT_PASSWORD)
  private String certPassword;

  public static final String SERIALIZED_NAME_PRIVATE_BLOB = "privateBlob";
  @SerializedName(SERIALIZED_NAME_PRIVATE_BLOB)
  private String privateBlob;

  public TdeCertificateProperties() {
  }

  public TdeCertificateProperties certPassword(String certPassword) {
    this.certPassword = certPassword;
    return this;
  }

  /**
   * The certificate password.
   * @return certPassword
   */
  @javax.annotation.Nullable
  public String getCertPassword() {
    return certPassword;
  }

  public void setCertPassword(String certPassword) {
    this.certPassword = certPassword;
  }


  public TdeCertificateProperties privateBlob(String privateBlob) {
    this.privateBlob = privateBlob;
    return this;
  }

  /**
   * The base64 encoded certificate private blob.
   * @return privateBlob
   */
  @javax.annotation.Nonnull
  public String getPrivateBlob() {
    return privateBlob;
  }

  public void setPrivateBlob(String privateBlob) {
    this.privateBlob = privateBlob;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TdeCertificateProperties tdeCertificateProperties = (TdeCertificateProperties) o;
    return Objects.equals(this.certPassword, tdeCertificateProperties.certPassword) &&
        Objects.equals(this.privateBlob, tdeCertificateProperties.privateBlob);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certPassword, privateBlob);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TdeCertificateProperties {\n");
    sb.append("    certPassword: ").append(toIndentedString(certPassword)).append("\n");
    sb.append("    privateBlob: ").append(toIndentedString(privateBlob)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certPassword");
    openapiFields.add("privateBlob");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("privateBlob");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TdeCertificateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TdeCertificateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TdeCertificateProperties is not found in the empty JSON string", TdeCertificateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TdeCertificateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TdeCertificateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TdeCertificateProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certPassword") != null && !jsonObj.get("certPassword").isJsonNull()) && !jsonObj.get("certPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certPassword").toString()));
      }
      if (!jsonObj.get("privateBlob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateBlob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateBlob").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TdeCertificateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TdeCertificateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TdeCertificateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TdeCertificateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TdeCertificateProperties>() {
           @Override
           public void write(JsonWriter out, TdeCertificateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TdeCertificateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TdeCertificateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TdeCertificateProperties
   * @throws IOException if the JSON string is invalid with respect to TdeCertificateProperties
   */
  public static TdeCertificateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TdeCertificateProperties.class);
  }

  /**
   * Convert an instance of TdeCertificateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

