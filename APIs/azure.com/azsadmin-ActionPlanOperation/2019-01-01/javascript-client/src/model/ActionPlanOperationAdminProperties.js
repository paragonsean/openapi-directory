/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionPlanOperationAdminPropertiesError from './ActionPlanOperationAdminPropertiesError';

/**
 * The ActionPlanOperationAdminProperties model module.
 * @module model/ActionPlanOperationAdminProperties
 * @version 2019-01-01
 */
class ActionPlanOperationAdminProperties {
    /**
     * Constructs a new <code>ActionPlanOperationAdminProperties</code>.
     * Action Plan Operation Properties
     * @alias module:model/ActionPlanOperationAdminProperties
     */
    constructor() { 
        
        ActionPlanOperationAdminProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActionPlanOperationAdminProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActionPlanOperationAdminProperties} obj Optional instance to populate.
     * @return {module:model/ActionPlanOperationAdminProperties} The populated <code>ActionPlanOperationAdminProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActionPlanOperationAdminProperties();

            if (data.hasOwnProperty('actionPlanInstanceId')) {
                obj['actionPlanInstanceId'] = ApiClient.convertToType(data['actionPlanInstanceId'], 'String');
            }
            if (data.hasOwnProperty('actionPlanOperationId')) {
                obj['actionPlanOperationId'] = ApiClient.convertToType(data['actionPlanOperationId'], 'String');
            }
            if (data.hasOwnProperty('blobContainerName')) {
                obj['blobContainerName'] = ApiClient.convertToType(data['blobContainerName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ActionPlanOperationAdminPropertiesError.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('outputs')) {
                obj['outputs'] = ApiClient.convertToType(data['outputs'], Object);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActionPlanOperationAdminProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActionPlanOperationAdminProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionPlanInstanceId'] && !(typeof data['actionPlanInstanceId'] === 'string' || data['actionPlanInstanceId'] instanceof String)) {
            throw new Error("Expected the field `actionPlanInstanceId` to be a primitive type in the JSON string but got " + data['actionPlanInstanceId']);
        }
        // ensure the json data is a string
        if (data['actionPlanOperationId'] && !(typeof data['actionPlanOperationId'] === 'string' || data['actionPlanOperationId'] instanceof String)) {
            throw new Error("Expected the field `actionPlanOperationId` to be a primitive type in the JSON string but got " + data['actionPlanOperationId']);
        }
        // ensure the json data is a string
        if (data['blobContainerName'] && !(typeof data['blobContainerName'] === 'string' || data['blobContainerName'] instanceof String)) {
            throw new Error("Expected the field `blobContainerName` to be a primitive type in the JSON string but got " + data['blobContainerName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          ActionPlanOperationAdminPropertiesError.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Action plan instance identifier
 * @member {String} actionPlanInstanceId
 */
ActionPlanOperationAdminProperties.prototype['actionPlanInstanceId'] = undefined;

/**
 * Action plan operation identifier
 * @member {String} actionPlanOperationId
 */
ActionPlanOperationAdminProperties.prototype['actionPlanOperationId'] = undefined;

/**
 * Blob container name storing the deployment data
 * @member {String} blobContainerName
 */
ActionPlanOperationAdminProperties.prototype['blobContainerName'] = undefined;

/**
 * The operation description
 * @member {String} description
 */
ActionPlanOperationAdminProperties.prototype['description'] = undefined;

/**
 * The deployment end time
 * @member {Date} endTime
 */
ActionPlanOperationAdminProperties.prototype['endTime'] = undefined;

/**
 * @member {module:model/ActionPlanOperationAdminPropertiesError} error
 */
ActionPlanOperationAdminProperties.prototype['error'] = undefined;

/**
 * The action plan operation outputs in JToken format
 * @member {Object} outputs
 */
ActionPlanOperationAdminProperties.prototype['outputs'] = undefined;

/**
 * The deployment parameters in JToken format
 * @member {Object} parameters
 */
ActionPlanOperationAdminProperties.prototype['parameters'] = undefined;

/**
 * The provisioning state
 * @member {String} provisioningState
 */
ActionPlanOperationAdminProperties.prototype['provisioningState'] = undefined;

/**
 * The deployment start time
 * @member {Date} startTime
 */
ActionPlanOperationAdminProperties.prototype['startTime'] = undefined;

/**
 * The target subscription identifier
 * @member {String} subscriptionId
 */
ActionPlanOperationAdminProperties.prototype['subscriptionId'] = undefined;

/**
 * The operation title
 * @member {String} title
 */
ActionPlanOperationAdminProperties.prototype['title'] = undefined;

/**
 * Action plan operation type
 * @member {String} type
 */
ActionPlanOperationAdminProperties.prototype['type'] = undefined;






export default ActionPlanOperationAdminProperties;

