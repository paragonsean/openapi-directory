/*
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ActionPlanOperationAdminPropertiesError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Action Plan Operation Properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:43.029595-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionPlanOperationAdminProperties {
  public static final String SERIALIZED_NAME_ACTION_PLAN_INSTANCE_ID = "actionPlanInstanceId";
  @SerializedName(SERIALIZED_NAME_ACTION_PLAN_INSTANCE_ID)
  private String actionPlanInstanceId;

  public static final String SERIALIZED_NAME_ACTION_PLAN_OPERATION_ID = "actionPlanOperationId";
  @SerializedName(SERIALIZED_NAME_ACTION_PLAN_OPERATION_ID)
  private String actionPlanOperationId;

  public static final String SERIALIZED_NAME_BLOB_CONTAINER_NAME = "blobContainerName";
  @SerializedName(SERIALIZED_NAME_BLOB_CONTAINER_NAME)
  private String blobContainerName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private ActionPlanOperationAdminPropertiesError error;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Object outputs;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Object parameters;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ActionPlanOperationAdminProperties() {
  }

  public ActionPlanOperationAdminProperties actionPlanInstanceId(String actionPlanInstanceId) {
    this.actionPlanInstanceId = actionPlanInstanceId;
    return this;
  }

  /**
   * Action plan instance identifier
   * @return actionPlanInstanceId
   */
  @javax.annotation.Nullable
  public String getActionPlanInstanceId() {
    return actionPlanInstanceId;
  }

  public void setActionPlanInstanceId(String actionPlanInstanceId) {
    this.actionPlanInstanceId = actionPlanInstanceId;
  }


  public ActionPlanOperationAdminProperties actionPlanOperationId(String actionPlanOperationId) {
    this.actionPlanOperationId = actionPlanOperationId;
    return this;
  }

  /**
   * Action plan operation identifier
   * @return actionPlanOperationId
   */
  @javax.annotation.Nullable
  public String getActionPlanOperationId() {
    return actionPlanOperationId;
  }

  public void setActionPlanOperationId(String actionPlanOperationId) {
    this.actionPlanOperationId = actionPlanOperationId;
  }


  public ActionPlanOperationAdminProperties blobContainerName(String blobContainerName) {
    this.blobContainerName = blobContainerName;
    return this;
  }

  /**
   * Blob container name storing the deployment data
   * @return blobContainerName
   */
  @javax.annotation.Nullable
  public String getBlobContainerName() {
    return blobContainerName;
  }

  public void setBlobContainerName(String blobContainerName) {
    this.blobContainerName = blobContainerName;
  }


  public ActionPlanOperationAdminProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The operation description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ActionPlanOperationAdminProperties endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The deployment end time
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ActionPlanOperationAdminProperties error(ActionPlanOperationAdminPropertiesError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public ActionPlanOperationAdminPropertiesError getError() {
    return error;
  }

  public void setError(ActionPlanOperationAdminPropertiesError error) {
    this.error = error;
  }


  public ActionPlanOperationAdminProperties outputs(Object outputs) {
    this.outputs = outputs;
    return this;
  }

  /**
   * The action plan operation outputs in JToken format
   * @return outputs
   */
  @javax.annotation.Nullable
  public Object getOutputs() {
    return outputs;
  }

  public void setOutputs(Object outputs) {
    this.outputs = outputs;
  }


  public ActionPlanOperationAdminProperties parameters(Object parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * The deployment parameters in JToken format
   * @return parameters
   */
  @javax.annotation.Nullable
  public Object getParameters() {
    return parameters;
  }

  public void setParameters(Object parameters) {
    this.parameters = parameters;
  }


  public ActionPlanOperationAdminProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ActionPlanOperationAdminProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The deployment start time
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ActionPlanOperationAdminProperties subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * The target subscription identifier
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public ActionPlanOperationAdminProperties title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The operation title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ActionPlanOperationAdminProperties type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Action plan operation type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionPlanOperationAdminProperties actionPlanOperationAdminProperties = (ActionPlanOperationAdminProperties) o;
    return Objects.equals(this.actionPlanInstanceId, actionPlanOperationAdminProperties.actionPlanInstanceId) &&
        Objects.equals(this.actionPlanOperationId, actionPlanOperationAdminProperties.actionPlanOperationId) &&
        Objects.equals(this.blobContainerName, actionPlanOperationAdminProperties.blobContainerName) &&
        Objects.equals(this.description, actionPlanOperationAdminProperties.description) &&
        Objects.equals(this.endTime, actionPlanOperationAdminProperties.endTime) &&
        Objects.equals(this.error, actionPlanOperationAdminProperties.error) &&
        Objects.equals(this.outputs, actionPlanOperationAdminProperties.outputs) &&
        Objects.equals(this.parameters, actionPlanOperationAdminProperties.parameters) &&
        Objects.equals(this.provisioningState, actionPlanOperationAdminProperties.provisioningState) &&
        Objects.equals(this.startTime, actionPlanOperationAdminProperties.startTime) &&
        Objects.equals(this.subscriptionId, actionPlanOperationAdminProperties.subscriptionId) &&
        Objects.equals(this.title, actionPlanOperationAdminProperties.title) &&
        Objects.equals(this.type, actionPlanOperationAdminProperties.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionPlanInstanceId, actionPlanOperationId, blobContainerName, description, endTime, error, outputs, parameters, provisioningState, startTime, subscriptionId, title, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionPlanOperationAdminProperties {\n");
    sb.append("    actionPlanInstanceId: ").append(toIndentedString(actionPlanInstanceId)).append("\n");
    sb.append("    actionPlanOperationId: ").append(toIndentedString(actionPlanOperationId)).append("\n");
    sb.append("    blobContainerName: ").append(toIndentedString(blobContainerName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionPlanInstanceId");
    openapiFields.add("actionPlanOperationId");
    openapiFields.add("blobContainerName");
    openapiFields.add("description");
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("outputs");
    openapiFields.add("parameters");
    openapiFields.add("provisioningState");
    openapiFields.add("startTime");
    openapiFields.add("subscriptionId");
    openapiFields.add("title");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionPlanOperationAdminProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionPlanOperationAdminProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionPlanOperationAdminProperties is not found in the empty JSON string", ActionPlanOperationAdminProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionPlanOperationAdminProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionPlanOperationAdminProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionPlanInstanceId") != null && !jsonObj.get("actionPlanInstanceId").isJsonNull()) && !jsonObj.get("actionPlanInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionPlanInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionPlanInstanceId").toString()));
      }
      if ((jsonObj.get("actionPlanOperationId") != null && !jsonObj.get("actionPlanOperationId").isJsonNull()) && !jsonObj.get("actionPlanOperationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionPlanOperationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionPlanOperationId").toString()));
      }
      if ((jsonObj.get("blobContainerName") != null && !jsonObj.get("blobContainerName").isJsonNull()) && !jsonObj.get("blobContainerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobContainerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobContainerName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        ActionPlanOperationAdminPropertiesError.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionPlanOperationAdminProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionPlanOperationAdminProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionPlanOperationAdminProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionPlanOperationAdminProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionPlanOperationAdminProperties>() {
           @Override
           public void write(JsonWriter out, ActionPlanOperationAdminProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionPlanOperationAdminProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionPlanOperationAdminProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionPlanOperationAdminProperties
   * @throws IOException if the JSON string is invalid with respect to ActionPlanOperationAdminProperties
   */
  public static ActionPlanOperationAdminProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionPlanOperationAdminProperties.class);
  }

  /**
   * Convert an instance of ActionPlanOperationAdminProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

