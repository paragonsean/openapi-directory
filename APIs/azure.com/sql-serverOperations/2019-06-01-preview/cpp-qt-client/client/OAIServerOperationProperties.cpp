/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerOperationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerOperationProperties::OAIServerOperationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerOperationProperties::OAIServerOperationProperties() {
    this->initializeModel();
}

OAIServerOperationProperties::~OAIServerOperationProperties() {}

void OAIServerOperationProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;

    m_error_severity_isSet = false;
    m_error_severity_isValid = false;

    m_estimated_completion_time_isSet = false;
    m_estimated_completion_time_isValid = false;

    m_is_cancellable_isSet = false;
    m_is_cancellable_isValid = false;

    m_is_user_error_isSet = false;
    m_is_user_error_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_operation_friendly_name_isSet = false;
    m_operation_friendly_name_isValid = false;

    m_percent_complete_isSet = false;
    m_percent_complete_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIServerOperationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerOperationProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(m_error_description, json[QString("errorDescription")]);
    m_error_description_isSet = !json[QString("errorDescription")].isNull() && m_error_description_isValid;

    m_error_severity_isValid = ::OpenAPI::fromJsonValue(m_error_severity, json[QString("errorSeverity")]);
    m_error_severity_isSet = !json[QString("errorSeverity")].isNull() && m_error_severity_isValid;

    m_estimated_completion_time_isValid = ::OpenAPI::fromJsonValue(m_estimated_completion_time, json[QString("estimatedCompletionTime")]);
    m_estimated_completion_time_isSet = !json[QString("estimatedCompletionTime")].isNull() && m_estimated_completion_time_isValid;

    m_is_cancellable_isValid = ::OpenAPI::fromJsonValue(m_is_cancellable, json[QString("isCancellable")]);
    m_is_cancellable_isSet = !json[QString("isCancellable")].isNull() && m_is_cancellable_isValid;

    m_is_user_error_isValid = ::OpenAPI::fromJsonValue(m_is_user_error, json[QString("isUserError")]);
    m_is_user_error_isSet = !json[QString("isUserError")].isNull() && m_is_user_error_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_operation_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_operation_friendly_name, json[QString("operationFriendlyName")]);
    m_operation_friendly_name_isSet = !json[QString("operationFriendlyName")].isNull() && m_operation_friendly_name_isValid;

    m_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_percent_complete, json[QString("percentComplete")]);
    m_percent_complete_isSet = !json[QString("percentComplete")].isNull() && m_percent_complete_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIServerOperationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerOperationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("errorDescription"), ::OpenAPI::toJsonValue(m_error_description));
    }
    if (m_error_severity_isSet) {
        obj.insert(QString("errorSeverity"), ::OpenAPI::toJsonValue(m_error_severity));
    }
    if (m_estimated_completion_time_isSet) {
        obj.insert(QString("estimatedCompletionTime"), ::OpenAPI::toJsonValue(m_estimated_completion_time));
    }
    if (m_is_cancellable_isSet) {
        obj.insert(QString("isCancellable"), ::OpenAPI::toJsonValue(m_is_cancellable));
    }
    if (m_is_user_error_isSet) {
        obj.insert(QString("isUserError"), ::OpenAPI::toJsonValue(m_is_user_error));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_operation_friendly_name_isSet) {
        obj.insert(QString("operationFriendlyName"), ::OpenAPI::toJsonValue(m_operation_friendly_name));
    }
    if (m_percent_complete_isSet) {
        obj.insert(QString("percentComplete"), ::OpenAPI::toJsonValue(m_percent_complete));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIServerOperationProperties::getDescription() const {
    return m_description;
}
void OAIServerOperationProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServerOperationProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServerOperationProperties::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIServerOperationProperties::getErrorCode() const {
    return m_error_code;
}
void OAIServerOperationProperties::setErrorCode(const qint32 &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIServerOperationProperties::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIServerOperationProperties::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIServerOperationProperties::getErrorDescription() const {
    return m_error_description;
}
void OAIServerOperationProperties::setErrorDescription(const QString &error_description) {
    m_error_description = error_description;
    m_error_description_isSet = true;
}

bool OAIServerOperationProperties::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAIServerOperationProperties::is_error_description_Valid() const{
    return m_error_description_isValid;
}

qint32 OAIServerOperationProperties::getErrorSeverity() const {
    return m_error_severity;
}
void OAIServerOperationProperties::setErrorSeverity(const qint32 &error_severity) {
    m_error_severity = error_severity;
    m_error_severity_isSet = true;
}

bool OAIServerOperationProperties::is_error_severity_Set() const{
    return m_error_severity_isSet;
}

bool OAIServerOperationProperties::is_error_severity_Valid() const{
    return m_error_severity_isValid;
}

QDateTime OAIServerOperationProperties::getEstimatedCompletionTime() const {
    return m_estimated_completion_time;
}
void OAIServerOperationProperties::setEstimatedCompletionTime(const QDateTime &estimated_completion_time) {
    m_estimated_completion_time = estimated_completion_time;
    m_estimated_completion_time_isSet = true;
}

bool OAIServerOperationProperties::is_estimated_completion_time_Set() const{
    return m_estimated_completion_time_isSet;
}

bool OAIServerOperationProperties::is_estimated_completion_time_Valid() const{
    return m_estimated_completion_time_isValid;
}

bool OAIServerOperationProperties::isIsCancellable() const {
    return m_is_cancellable;
}
void OAIServerOperationProperties::setIsCancellable(const bool &is_cancellable) {
    m_is_cancellable = is_cancellable;
    m_is_cancellable_isSet = true;
}

bool OAIServerOperationProperties::is_is_cancellable_Set() const{
    return m_is_cancellable_isSet;
}

bool OAIServerOperationProperties::is_is_cancellable_Valid() const{
    return m_is_cancellable_isValid;
}

bool OAIServerOperationProperties::isIsUserError() const {
    return m_is_user_error;
}
void OAIServerOperationProperties::setIsUserError(const bool &is_user_error) {
    m_is_user_error = is_user_error;
    m_is_user_error_isSet = true;
}

bool OAIServerOperationProperties::is_is_user_error_Set() const{
    return m_is_user_error_isSet;
}

bool OAIServerOperationProperties::is_is_user_error_Valid() const{
    return m_is_user_error_isValid;
}

QString OAIServerOperationProperties::getOperation() const {
    return m_operation;
}
void OAIServerOperationProperties::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIServerOperationProperties::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIServerOperationProperties::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIServerOperationProperties::getOperationFriendlyName() const {
    return m_operation_friendly_name;
}
void OAIServerOperationProperties::setOperationFriendlyName(const QString &operation_friendly_name) {
    m_operation_friendly_name = operation_friendly_name;
    m_operation_friendly_name_isSet = true;
}

bool OAIServerOperationProperties::is_operation_friendly_name_Set() const{
    return m_operation_friendly_name_isSet;
}

bool OAIServerOperationProperties::is_operation_friendly_name_Valid() const{
    return m_operation_friendly_name_isValid;
}

qint32 OAIServerOperationProperties::getPercentComplete() const {
    return m_percent_complete;
}
void OAIServerOperationProperties::setPercentComplete(const qint32 &percent_complete) {
    m_percent_complete = percent_complete;
    m_percent_complete_isSet = true;
}

bool OAIServerOperationProperties::is_percent_complete_Set() const{
    return m_percent_complete_isSet;
}

bool OAIServerOperationProperties::is_percent_complete_Valid() const{
    return m_percent_complete_isValid;
}

QString OAIServerOperationProperties::getServerName() const {
    return m_server_name;
}
void OAIServerOperationProperties::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIServerOperationProperties::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIServerOperationProperties::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QDateTime OAIServerOperationProperties::getStartTime() const {
    return m_start_time;
}
void OAIServerOperationProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIServerOperationProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIServerOperationProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIServerOperationProperties::getState() const {
    return m_state;
}
void OAIServerOperationProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIServerOperationProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIServerOperationProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIServerOperationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_completion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cancellable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_user_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerOperationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
