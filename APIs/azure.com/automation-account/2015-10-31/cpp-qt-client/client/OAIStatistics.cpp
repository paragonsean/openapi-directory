/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatistics::OAIStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatistics::OAIStatistics() {
    this->initializeModel();
}

OAIStatistics::~OAIStatistics() {}

void OAIStatistics::initializeModel() {

    m_counter_property_isSet = false;
    m_counter_property_isValid = false;

    m_counter_value_isSet = false;
    m_counter_value_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatistics::fromJsonObject(QJsonObject json) {

    m_counter_property_isValid = ::OpenAPI::fromJsonValue(m_counter_property, json[QString("counterProperty")]);
    m_counter_property_isSet = !json[QString("counterProperty")].isNull() && m_counter_property_isValid;

    m_counter_value_isValid = ::OpenAPI::fromJsonValue(m_counter_value, json[QString("counterValue")]);
    m_counter_value_isSet = !json[QString("counterValue")].isNull() && m_counter_value_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_counter_property_isSet) {
        obj.insert(QString("counterProperty"), ::OpenAPI::toJsonValue(m_counter_property));
    }
    if (m_counter_value_isSet) {
        obj.insert(QString("counterValue"), ::OpenAPI::toJsonValue(m_counter_value));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIStatistics::getCounterProperty() const {
    return m_counter_property;
}
void OAIStatistics::setCounterProperty(const QString &counter_property) {
    m_counter_property = counter_property;
    m_counter_property_isSet = true;
}

bool OAIStatistics::is_counter_property_Set() const{
    return m_counter_property_isSet;
}

bool OAIStatistics::is_counter_property_Valid() const{
    return m_counter_property_isValid;
}

qint64 OAIStatistics::getCounterValue() const {
    return m_counter_value;
}
void OAIStatistics::setCounterValue(const qint64 &counter_value) {
    m_counter_value = counter_value;
    m_counter_value_isSet = true;
}

bool OAIStatistics::is_counter_value_Set() const{
    return m_counter_value_isSet;
}

bool OAIStatistics::is_counter_value_Valid() const{
    return m_counter_value_isValid;
}

QDateTime OAIStatistics::getEndTime() const {
    return m_end_time;
}
void OAIStatistics::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIStatistics::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIStatistics::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIStatistics::getId() const {
    return m_id;
}
void OAIStatistics::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStatistics::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStatistics::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIStatistics::getStartTime() const {
    return m_start_time;
}
void OAIStatistics::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStatistics::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStatistics::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counter_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
