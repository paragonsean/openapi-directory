/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUsage.h
 *
 * Definition of Usage.
 */

#ifndef OAIUsage_H
#define OAIUsage_H

#include <QJsonObject>

#include "OAIUsageCounterName.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUsageCounterName;

class OAIUsage : public OAIObject {
public:
    OAIUsage();
    OAIUsage(QString json);
    ~OAIUsage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCurrentValue() const;
    void setCurrentValue(const double &current_value);
    bool is_current_value_Set() const;
    bool is_current_value_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint64 getLimit() const;
    void setLimit(const qint64 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    OAIUsageCounterName getName() const;
    void setName(const OAIUsageCounterName &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getThrottleStatus() const;
    void setThrottleStatus(const QString &throttle_status);
    bool is_throttle_status_Set() const;
    bool is_throttle_status_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_current_value;
    bool m_current_value_isSet;
    bool m_current_value_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint64 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    OAIUsageCounterName m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_throttle_status;
    bool m_throttle_status_isSet;
    bool m_throttle_status_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUsage)

#endif // OAIUsage_H
