/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAutomationAccountApi_H
#define OAI_OAIAutomationAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutomationAccount.h"
#include "OAIAutomationAccountCreateOrUpdateParameters.h"
#include "OAIAutomationAccountListResult.h"
#include "OAIAutomationAccountUpdateParameters.h"
#include "OAIOperations_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAutomationAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAutomationAccountApi(const int timeOut = 0);
    ~OAIAutomationAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAutomationAccountCreateOrUpdateParameters [required]
    */
    virtual void automationAccountCreateOrUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version, const OAIAutomationAccountCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void automationAccountDelete(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void automationAccountGet(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void automationAccountList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void automationAccountListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAutomationAccountUpdateParameters [required]
    */
    virtual void automationAccountUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version, const OAIAutomationAccountUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void automationAccountCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void automationAccountDeleteCallback(OAIHttpRequestWorker *worker);
    void automationAccountGetCallback(OAIHttpRequestWorker *worker);
    void automationAccountListCallback(OAIHttpRequestWorker *worker);
    void automationAccountListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void automationAccountUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void automationAccountCreateOrUpdateSignal(OAIAutomationAccount summary);
    void automationAccountDeleteSignal();
    void automationAccountGetSignal(OAIAutomationAccount summary);
    void automationAccountListSignal(OAIAutomationAccountListResult summary);
    void automationAccountListByResourceGroupSignal(OAIAutomationAccountListResult summary);
    void automationAccountUpdateSignal(OAIAutomationAccount summary);


    void automationAccountCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAutomationAccount summary);
    void automationAccountDeleteSignalFull(OAIHttpRequestWorker *worker);
    void automationAccountGetSignalFull(OAIHttpRequestWorker *worker, OAIAutomationAccount summary);
    void automationAccountListSignalFull(OAIHttpRequestWorker *worker, OAIAutomationAccountListResult summary);
    void automationAccountListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAutomationAccountListResult summary);
    void automationAccountUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAutomationAccount summary);

    Q_DECL_DEPRECATED_X("Use automationAccountCreateOrUpdateSignalError() instead")
    void automationAccountCreateOrUpdateSignalE(OAIAutomationAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountCreateOrUpdateSignalError(OAIAutomationAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationAccountDeleteSignalError() instead")
    void automationAccountDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationAccountGetSignalError() instead")
    void automationAccountGetSignalE(OAIAutomationAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountGetSignalError(OAIAutomationAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationAccountListSignalError() instead")
    void automationAccountListSignalE(OAIAutomationAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountListSignalError(OAIAutomationAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationAccountListByResourceGroupSignalError() instead")
    void automationAccountListByResourceGroupSignalE(OAIAutomationAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountListByResourceGroupSignalError(OAIAutomationAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationAccountUpdateSignalError() instead")
    void automationAccountUpdateSignalE(OAIAutomationAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountUpdateSignalError(OAIAutomationAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use automationAccountCreateOrUpdateSignalErrorFull() instead")
    void automationAccountCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationAccountDeleteSignalErrorFull() instead")
    void automationAccountDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationAccountGetSignalErrorFull() instead")
    void automationAccountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationAccountListSignalErrorFull() instead")
    void automationAccountListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationAccountListByResourceGroupSignalErrorFull() instead")
    void automationAccountListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use automationAccountUpdateSignalErrorFull() instead")
    void automationAccountUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void automationAccountUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
