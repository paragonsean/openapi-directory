/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Key model module.
 * @module model/Key
 * @version 2015-10-31
 */
class Key {
    /**
     * Constructs a new <code>Key</code>.
     * Automation key which is used to register a DSC Node
     * @alias module:model/Key
     */
    constructor() { 
        
        Key.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Key</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Key} obj Optional instance to populate.
     * @return {module:model/Key} The populated <code>Key</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Key();

            if (data.hasOwnProperty('KeyName')) {
                obj['KeyName'] = ApiClient.convertToType(data['KeyName'], 'String');
            }
            if (data.hasOwnProperty('Permissions')) {
                obj['Permissions'] = ApiClient.convertToType(data['Permissions'], 'String');
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Key</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Key</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['KeyName'] && !(typeof data['KeyName'] === 'string' || data['KeyName'] instanceof String)) {
            throw new Error("Expected the field `KeyName` to be a primitive type in the JSON string but got " + data['KeyName']);
        }
        // ensure the json data is a string
        if (data['Permissions'] && !(typeof data['Permissions'] === 'string' || data['Permissions'] instanceof String)) {
            throw new Error("Expected the field `Permissions` to be a primitive type in the JSON string but got " + data['Permissions']);
        }
        // ensure the json data is a string
        if (data['Value'] && !(typeof data['Value'] === 'string' || data['Value'] instanceof String)) {
            throw new Error("Expected the field `Value` to be a primitive type in the JSON string but got " + data['Value']);
        }

        return true;
    }


}



/**
 * Automation key name.
 * @member {module:model/Key.KeyNameEnum} KeyName
 */
Key.prototype['KeyName'] = undefined;

/**
 * Automation key permissions.
 * @member {module:model/Key.PermissionsEnum} Permissions
 */
Key.prototype['Permissions'] = undefined;

/**
 * Value of the Automation Key used for registration.
 * @member {String} Value
 */
Key.prototype['Value'] = undefined;





/**
 * Allowed values for the <code>KeyName</code> property.
 * @enum {String}
 * @readonly
 */
Key['KeyNameEnum'] = {

    /**
     * value: "Primary"
     * @const
     */
    "Primary": "Primary",

    /**
     * value: "Secondary"
     * @const
     */
    "Secondary": "Secondary"
};


/**
 * Allowed values for the <code>Permissions</code> property.
 * @enum {String}
 * @readonly
 */
Key['PermissionsEnum'] = {

    /**
     * value: "Read"
     * @const
     */
    "Read": "Read",

    /**
     * value: "Full"
     * @const
     */
    "Full": "Full"
};



export default Key;

