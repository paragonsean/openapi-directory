# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Statistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counter_property: str=None, counter_value: int=None, end_time: datetime=None, id: str=None, start_time: datetime=None):
        """Statistics - a model defined in OpenAPI

        :param counter_property: The counter_property of this Statistics.
        :param counter_value: The counter_value of this Statistics.
        :param end_time: The end_time of this Statistics.
        :param id: The id of this Statistics.
        :param start_time: The start_time of this Statistics.
        """
        self.openapi_types = {
            'counter_property': str,
            'counter_value': int,
            'end_time': datetime,
            'id': str,
            'start_time': datetime
        }

        self.attribute_map = {
            'counter_property': 'counterProperty',
            'counter_value': 'counterValue',
            'end_time': 'endTime',
            'id': 'id',
            'start_time': 'startTime'
        }

        self._counter_property = counter_property
        self._counter_value = counter_value
        self._end_time = end_time
        self._id = id
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Statistics of this Statistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counter_property(self):
        """Gets the counter_property of this Statistics.

        Gets the property value of the statistic.

        :return: The counter_property of this Statistics.
        :rtype: str
        """
        return self._counter_property

    @counter_property.setter
    def counter_property(self, counter_property):
        """Sets the counter_property of this Statistics.

        Gets the property value of the statistic.

        :param counter_property: The counter_property of this Statistics.
        :type counter_property: str
        """

        self._counter_property = counter_property

    @property
    def counter_value(self):
        """Gets the counter_value of this Statistics.

        Gets the value of the statistic.

        :return: The counter_value of this Statistics.
        :rtype: int
        """
        return self._counter_value

    @counter_value.setter
    def counter_value(self, counter_value):
        """Sets the counter_value of this Statistics.

        Gets the value of the statistic.

        :param counter_value: The counter_value of this Statistics.
        :type counter_value: int
        """

        self._counter_value = counter_value

    @property
    def end_time(self):
        """Gets the end_time of this Statistics.

        Gets the endTime of the statistic.

        :return: The end_time of this Statistics.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Statistics.

        Gets the endTime of the statistic.

        :param end_time: The end_time of this Statistics.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def id(self):
        """Gets the id of this Statistics.

        Gets the id.

        :return: The id of this Statistics.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Statistics.

        Gets the id.

        :param id: The id of this Statistics.
        :type id: str
        """

        self._id = id

    @property
    def start_time(self):
        """Gets the start_time of this Statistics.

        Gets the startTime of the statistic.

        :return: The start_time of this Statistics.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Statistics.

        Gets the startTime of the statistic.

        :param start_time: The start_time of this Statistics.
        :type start_time: datetime
        """

        self._start_time = start_time
