# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku import Sku
from openapi_server import util


class AutomationAccountProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, description: str=None, last_modified_by: str=None, last_modified_time: datetime=None, sku: Sku=None, state: str=None):
        """AutomationAccountProperties - a model defined in OpenAPI

        :param creation_time: The creation_time of this AutomationAccountProperties.
        :param description: The description of this AutomationAccountProperties.
        :param last_modified_by: The last_modified_by of this AutomationAccountProperties.
        :param last_modified_time: The last_modified_time of this AutomationAccountProperties.
        :param sku: The sku of this AutomationAccountProperties.
        :param state: The state of this AutomationAccountProperties.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'description': str,
            'last_modified_by': str,
            'last_modified_time': datetime,
            'sku': Sku,
            'state': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'description': 'description',
            'last_modified_by': 'lastModifiedBy',
            'last_modified_time': 'lastModifiedTime',
            'sku': 'sku',
            'state': 'state'
        }

        self._creation_time = creation_time
        self._description = description
        self._last_modified_by = last_modified_by
        self._last_modified_time = last_modified_time
        self._sku = sku
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomationAccountProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomationAccountProperties of this AutomationAccountProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this AutomationAccountProperties.

        Gets the creation time.

        :return: The creation_time of this AutomationAccountProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this AutomationAccountProperties.

        Gets the creation time.

        :param creation_time: The creation_time of this AutomationAccountProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this AutomationAccountProperties.

        Gets or sets the description.

        :return: The description of this AutomationAccountProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutomationAccountProperties.

        Gets or sets the description.

        :param description: The description of this AutomationAccountProperties.
        :type description: str
        """

        self._description = description

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this AutomationAccountProperties.

        Gets or sets the last modified by.

        :return: The last_modified_by of this AutomationAccountProperties.
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this AutomationAccountProperties.

        Gets or sets the last modified by.

        :param last_modified_by: The last_modified_by of this AutomationAccountProperties.
        :type last_modified_by: str
        """

        self._last_modified_by = last_modified_by

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this AutomationAccountProperties.

        Gets the last modified time.

        :return: The last_modified_time of this AutomationAccountProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this AutomationAccountProperties.

        Gets the last modified time.

        :param last_modified_time: The last_modified_time of this AutomationAccountProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def sku(self):
        """Gets the sku of this AutomationAccountProperties.


        :return: The sku of this AutomationAccountProperties.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this AutomationAccountProperties.


        :param sku: The sku of this AutomationAccountProperties.
        :type sku: Sku
        """

        self._sku = sku

    @property
    def state(self):
        """Gets the state of this AutomationAccountProperties.

        Gets status of account.

        :return: The state of this AutomationAccountProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AutomationAccountProperties.

        Gets status of account.

        :param state: The state of this AutomationAccountProperties.
        :type state: str
        """
        allowed_values = ["Ok", "Unavailable", "Suspended"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
