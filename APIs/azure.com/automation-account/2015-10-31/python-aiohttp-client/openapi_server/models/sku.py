# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Sku(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: int=None, family: str=None, name: str=None):
        """Sku - a model defined in OpenAPI

        :param capacity: The capacity of this Sku.
        :param family: The family of this Sku.
        :param name: The name of this Sku.
        """
        self.openapi_types = {
            'capacity': int,
            'family': str,
            'name': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'family': 'family',
            'name': 'name'
        }

        self._capacity = capacity
        self._family = family
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sku':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sku of this Sku.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this Sku.

        Gets or sets the SKU capacity.

        :return: The capacity of this Sku.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Sku.

        Gets or sets the SKU capacity.

        :param capacity: The capacity of this Sku.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def family(self):
        """Gets the family of this Sku.

        Gets or sets the SKU family.

        :return: The family of this Sku.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Sku.

        Gets or sets the SKU family.

        :param family: The family of this Sku.
        :type family: str
        """

        self._family = family

    @property
    def name(self):
        """Gets the name of this Sku.

        Gets or sets the SKU name of the account.

        :return: The name of this Sku.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sku.

        Gets or sets the SKU name of the account.

        :param name: The name of this Sku.
        :type name: str
        """
        allowed_values = ["Free", "Basic"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name
