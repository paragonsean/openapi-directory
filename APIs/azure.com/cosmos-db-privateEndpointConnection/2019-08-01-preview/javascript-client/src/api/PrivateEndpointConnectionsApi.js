/**
 * Cosmos DB
 * Azure Cosmos DB Database Service Resource Provider REST API
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import PrivateEndpointConnection from '../model/PrivateEndpointConnection';
import PrivateEndpointConnectionListResult from '../model/PrivateEndpointConnectionListResult';

/**
* PrivateEndpointConnections service.
* @module api/PrivateEndpointConnectionsApi
* @version 2019-08-01-preview
*/
export default class PrivateEndpointConnectionsApi {

    /**
    * Constructs a new PrivateEndpointConnectionsApi. 
    * @alias module:api/PrivateEndpointConnectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the privateEndpointConnectionsCreateOrUpdate operation.
     * @callback module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateEndpointConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve or reject a private endpoint connection with a given name.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} privateEndpointConnectionName The name of the private endpoint connection.
     * @param {module:model/PrivateEndpointConnection} parameters 
     * @param {module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateEndpointConnection}
     */
    privateEndpointConnectionsCreateOrUpdate(subscriptionId, resourceGroupName, apiVersion, accountName, privateEndpointConnectionName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling privateEndpointConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'privateEndpointConnectionName' is set
      if (privateEndpointConnectionName === undefined || privateEndpointConnectionName === null) {
        throw new Error("Missing the required parameter 'privateEndpointConnectionName' when calling privateEndpointConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling privateEndpointConnectionsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'privateEndpointConnectionName': privateEndpointConnectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrivateEndpointConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateEndpointConnectionsDelete operation.
     * @callback module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a private endpoint connection with a given name.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} privateEndpointConnectionName The name of the private endpoint connection.
     * @param {module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateEndpointConnectionsDelete(subscriptionId, resourceGroupName, apiVersion, accountName, privateEndpointConnectionName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling privateEndpointConnectionsDelete");
      }
      // verify the required parameter 'privateEndpointConnectionName' is set
      if (privateEndpointConnectionName === undefined || privateEndpointConnectionName === null) {
        throw new Error("Missing the required parameter 'privateEndpointConnectionName' when calling privateEndpointConnectionsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'privateEndpointConnectionName': privateEndpointConnectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateEndpointConnectionsGet operation.
     * @callback module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateEndpointConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a private endpoint connection.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} accountName Cosmos DB database account name.
     * @param {String} privateEndpointConnectionName The name of the private endpoint connection.
     * @param {module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateEndpointConnection}
     */
    privateEndpointConnectionsGet(subscriptionId, resourceGroupName, apiVersion, accountName, privateEndpointConnectionName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling privateEndpointConnectionsGet");
      }
      // verify the required parameter 'privateEndpointConnectionName' is set
      if (privateEndpointConnectionName === undefined || privateEndpointConnectionName === null) {
        throw new Error("Missing the required parameter 'privateEndpointConnectionName' when calling privateEndpointConnectionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'privateEndpointConnectionName': privateEndpointConnectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateEndpointConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections/{privateEndpointConnectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateEndpointConnectionsListByDatabaseAccount operation.
     * @callback module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsListByDatabaseAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrivateEndpointConnectionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all private endpoint connections on a Cosmos DB account.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} accountName Cosmos DB database account name.
     * @param {module:api/PrivateEndpointConnectionsApi~privateEndpointConnectionsListByDatabaseAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrivateEndpointConnectionListResult}
     */
    privateEndpointConnectionsListByDatabaseAccount(subscriptionId, resourceGroupName, apiVersion, accountName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsListByDatabaseAccount");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsListByDatabaseAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsListByDatabaseAccount");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling privateEndpointConnectionsListByDatabaseAccount");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PrivateEndpointConnectionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/privateEndpointConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
