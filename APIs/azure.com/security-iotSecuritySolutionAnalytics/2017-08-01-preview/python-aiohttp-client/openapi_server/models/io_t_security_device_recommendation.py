# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IoTSecurityDeviceRecommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, devices_count: int=None, recommendation_display_name: str=None, reported_severity: str=None):
        """IoTSecurityDeviceRecommendation - a model defined in OpenAPI

        :param devices_count: The devices_count of this IoTSecurityDeviceRecommendation.
        :param recommendation_display_name: The recommendation_display_name of this IoTSecurityDeviceRecommendation.
        :param reported_severity: The reported_severity of this IoTSecurityDeviceRecommendation.
        """
        self.openapi_types = {
            'devices_count': int,
            'recommendation_display_name': str,
            'reported_severity': str
        }

        self.attribute_map = {
            'devices_count': 'devicesCount',
            'recommendation_display_name': 'recommendationDisplayName',
            'reported_severity': 'reportedSeverity'
        }

        self._devices_count = devices_count
        self._recommendation_display_name = recommendation_display_name
        self._reported_severity = reported_severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTSecurityDeviceRecommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTSecurityDeviceRecommendation of this IoTSecurityDeviceRecommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def devices_count(self):
        """Gets the devices_count of this IoTSecurityDeviceRecommendation.

        the number of device with this recommendation

        :return: The devices_count of this IoTSecurityDeviceRecommendation.
        :rtype: int
        """
        return self._devices_count

    @devices_count.setter
    def devices_count(self, devices_count):
        """Sets the devices_count of this IoTSecurityDeviceRecommendation.

        the number of device with this recommendation

        :param devices_count: The devices_count of this IoTSecurityDeviceRecommendation.
        :type devices_count: int
        """

        self._devices_count = devices_count

    @property
    def recommendation_display_name(self):
        """Gets the recommendation_display_name of this IoTSecurityDeviceRecommendation.

        Display name of the recommendation

        :return: The recommendation_display_name of this IoTSecurityDeviceRecommendation.
        :rtype: str
        """
        return self._recommendation_display_name

    @recommendation_display_name.setter
    def recommendation_display_name(self, recommendation_display_name):
        """Sets the recommendation_display_name of this IoTSecurityDeviceRecommendation.

        Display name of the recommendation

        :param recommendation_display_name: The recommendation_display_name of this IoTSecurityDeviceRecommendation.
        :type recommendation_display_name: str
        """

        self._recommendation_display_name = recommendation_display_name

    @property
    def reported_severity(self):
        """Gets the reported_severity of this IoTSecurityDeviceRecommendation.

        Estimated severity of this recommendation

        :return: The reported_severity of this IoTSecurityDeviceRecommendation.
        :rtype: str
        """
        return self._reported_severity

    @reported_severity.setter
    def reported_severity(self, reported_severity):
        """Sets the reported_severity of this IoTSecurityDeviceRecommendation.

        Estimated severity of this recommendation

        :param reported_severity: The reported_severity of this IoTSecurityDeviceRecommendation.
        :type reported_severity: str
        """
        allowed_values = ["Informational", "Low", "Medium", "High"]  # noqa: E501
        if reported_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `reported_severity` ({0}), must be one of {1}"
                .format(reported_severity, allowed_values)
            )

        self._reported_severity = reported_severity
