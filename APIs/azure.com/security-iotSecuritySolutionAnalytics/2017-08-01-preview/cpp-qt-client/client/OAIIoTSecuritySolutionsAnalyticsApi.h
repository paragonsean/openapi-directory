/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIoTSecuritySolutionsAnalyticsApi_H
#define OAI_OAIIoTSecuritySolutionsAnalyticsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIoTSecurityAggregatedAlert.h"
#include "OAIIoTSecurityAggregatedAlertList.h"
#include "OAIIoTSecurityAggregatedRecommendation.h"
#include "OAIIoTSecurityAggregatedRecommendationList.h"
#include "OAIIoTSecuritySolutionAnalyticsModel.h"
#include "OAIIoTSecuritySolutionAnalyticsModelList.h"
#include "OAIIoTSecuritySolutionsAnalytics_GetAll_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIoTSecuritySolutionsAnalyticsApi : public QObject {
    Q_OBJECT

public:
    OAIIoTSecuritySolutionsAnalyticsApi(const int timeOut = 0);
    ~OAIIoTSecuritySolutionsAnalyticsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  aggregated_alert_name QString [required]
    */
    virtual void ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &solution_name, const QString &aggregated_alert_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  aggregated_alert_name QString [required]
    */
    virtual void ioTSecuritySolutionsAnalyticsAggregatedAlertGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &solution_name, const QString &aggregated_alert_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void ioTSecuritySolutionsAnalyticsAggregatedAlertsList(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &solution_name, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  solution_name QString [required]
    */
    virtual void ioTSecuritySolutionsAnalyticsGetAll(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &solution_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  solution_name QString [required]
    */
    virtual void ioTSecuritySolutionsAnalyticsGetDefault(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &solution_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  aggregated_recommendation_name QString [required]
    */
    virtual void ioTSecuritySolutionsAnalyticsRecommendationGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &solution_name, const QString &aggregated_recommendation_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  solution_name QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void ioTSecuritySolutionsAnalyticsRecommendationsList(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &solution_name, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ioTSecuritySolutionsAnalyticsAggregatedAlertDismissCallback(OAIHttpRequestWorker *worker);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertGetCallback(OAIHttpRequestWorker *worker);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertsListCallback(OAIHttpRequestWorker *worker);
    void ioTSecuritySolutionsAnalyticsGetAllCallback(OAIHttpRequestWorker *worker);
    void ioTSecuritySolutionsAnalyticsGetDefaultCallback(OAIHttpRequestWorker *worker);
    void ioTSecuritySolutionsAnalyticsRecommendationGetCallback(OAIHttpRequestWorker *worker);
    void ioTSecuritySolutionsAnalyticsRecommendationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ioTSecuritySolutionsAnalyticsAggregatedAlertDismissSignal();
    void ioTSecuritySolutionsAnalyticsAggregatedAlertGetSignal(OAIIoTSecurityAggregatedAlert summary);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertsListSignal(OAIIoTSecurityAggregatedAlertList summary);
    void ioTSecuritySolutionsAnalyticsGetAllSignal(OAIIoTSecuritySolutionAnalyticsModelList summary);
    void ioTSecuritySolutionsAnalyticsGetDefaultSignal(OAIIoTSecuritySolutionAnalyticsModel summary);
    void ioTSecuritySolutionsAnalyticsRecommendationGetSignal(OAIIoTSecurityAggregatedRecommendation summary);
    void ioTSecuritySolutionsAnalyticsRecommendationsListSignal(OAIIoTSecurityAggregatedRecommendationList summary);


    void ioTSecuritySolutionsAnalyticsAggregatedAlertDismissSignalFull(OAIHttpRequestWorker *worker);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertGetSignalFull(OAIHttpRequestWorker *worker, OAIIoTSecurityAggregatedAlert summary);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertsListSignalFull(OAIHttpRequestWorker *worker, OAIIoTSecurityAggregatedAlertList summary);
    void ioTSecuritySolutionsAnalyticsGetAllSignalFull(OAIHttpRequestWorker *worker, OAIIoTSecuritySolutionAnalyticsModelList summary);
    void ioTSecuritySolutionsAnalyticsGetDefaultSignalFull(OAIHttpRequestWorker *worker, OAIIoTSecuritySolutionAnalyticsModel summary);
    void ioTSecuritySolutionsAnalyticsRecommendationGetSignalFull(OAIHttpRequestWorker *worker, OAIIoTSecurityAggregatedRecommendation summary);
    void ioTSecuritySolutionsAnalyticsRecommendationsListSignalFull(OAIHttpRequestWorker *worker, OAIIoTSecurityAggregatedRecommendationList summary);

    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsAggregatedAlertDismissSignalError() instead")
    void ioTSecuritySolutionsAnalyticsAggregatedAlertDismissSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertDismissSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsAggregatedAlertGetSignalError() instead")
    void ioTSecuritySolutionsAnalyticsAggregatedAlertGetSignalE(OAIIoTSecurityAggregatedAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertGetSignalError(OAIIoTSecurityAggregatedAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsAggregatedAlertsListSignalError() instead")
    void ioTSecuritySolutionsAnalyticsAggregatedAlertsListSignalE(OAIIoTSecurityAggregatedAlertList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertsListSignalError(OAIIoTSecurityAggregatedAlertList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsGetAllSignalError() instead")
    void ioTSecuritySolutionsAnalyticsGetAllSignalE(OAIIoTSecuritySolutionAnalyticsModelList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsGetAllSignalError(OAIIoTSecuritySolutionAnalyticsModelList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsGetDefaultSignalError() instead")
    void ioTSecuritySolutionsAnalyticsGetDefaultSignalE(OAIIoTSecuritySolutionAnalyticsModel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsGetDefaultSignalError(OAIIoTSecuritySolutionAnalyticsModel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsRecommendationGetSignalError() instead")
    void ioTSecuritySolutionsAnalyticsRecommendationGetSignalE(OAIIoTSecurityAggregatedRecommendation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsRecommendationGetSignalError(OAIIoTSecurityAggregatedRecommendation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsRecommendationsListSignalError() instead")
    void ioTSecuritySolutionsAnalyticsRecommendationsListSignalE(OAIIoTSecurityAggregatedRecommendationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsRecommendationsListSignalError(OAIIoTSecurityAggregatedRecommendationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsAggregatedAlertDismissSignalErrorFull() instead")
    void ioTSecuritySolutionsAnalyticsAggregatedAlertDismissSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertDismissSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsAggregatedAlertGetSignalErrorFull() instead")
    void ioTSecuritySolutionsAnalyticsAggregatedAlertGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsAggregatedAlertsListSignalErrorFull() instead")
    void ioTSecuritySolutionsAnalyticsAggregatedAlertsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsAggregatedAlertsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsGetAllSignalErrorFull() instead")
    void ioTSecuritySolutionsAnalyticsGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsGetDefaultSignalErrorFull() instead")
    void ioTSecuritySolutionsAnalyticsGetDefaultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsGetDefaultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsRecommendationGetSignalErrorFull() instead")
    void ioTSecuritySolutionsAnalyticsRecommendationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsRecommendationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ioTSecuritySolutionsAnalyticsRecommendationsListSignalErrorFull() instead")
    void ioTSecuritySolutionsAnalyticsRecommendationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ioTSecuritySolutionsAnalyticsRecommendationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
