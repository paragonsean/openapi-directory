/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IoTSecurityAggregatedAlert;
import org.openapitools.client.model.IoTSecurityAggregatedAlertList;
import org.openapitools.client.model.IoTSecurityAggregatedRecommendation;
import org.openapitools.client.model.IoTSecurityAggregatedRecommendationList;
import org.openapitools.client.model.IoTSecuritySolutionAnalyticsModel;
import org.openapitools.client.model.IoTSecuritySolutionAnalyticsModelList;
import org.openapitools.client.model.IoTSecuritySolutionsAnalyticsGetAllDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IoTSecuritySolutionsAnalyticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IoTSecuritySolutionsAnalyticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IoTSecuritySolutionsAnalyticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedAlertName Identifier of the aggregated alert (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dismissed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsAggregatedAlertDismissCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedAlertName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts/{aggregatedAlertName}/dismiss"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "solutionName" + "}", localVarApiClient.escapeString(solutionName.toString()))
            .replace("{" + "aggregatedAlertName" + "}", localVarApiClient.escapeString(aggregatedAlertName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ioTSecuritySolutionsAnalyticsAggregatedAlertDismissValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedAlertName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss(Async)");
        }

        // verify the required parameter 'solutionName' is set
        if (solutionName == null) {
            throw new ApiException("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss(Async)");
        }

        // verify the required parameter 'aggregatedAlertName' is set
        if (aggregatedAlertName == null) {
            throw new ApiException("Missing the required parameter 'aggregatedAlertName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss(Async)");
        }

        return ioTSecuritySolutionsAnalyticsAggregatedAlertDismissCall(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName, _callback);

    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedAlertName Identifier of the aggregated alert (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dismissed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedAlertName) throws ApiException {
        ioTSecuritySolutionsAnalyticsAggregatedAlertDismissWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName);
    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedAlertName Identifier of the aggregated alert (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dismissed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> ioTSecuritySolutionsAnalyticsAggregatedAlertDismissWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedAlertName) throws ApiException {
        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsAggregatedAlertDismissValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedAlertName Identifier of the aggregated alert (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Dismissed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsAggregatedAlertDismissAsync(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedAlertName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsAggregatedAlertDismissValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for ioTSecuritySolutionsAnalyticsAggregatedAlertGet
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedAlertName Identifier of the aggregated alert (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsAggregatedAlertGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedAlertName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts/{aggregatedAlertName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "solutionName" + "}", localVarApiClient.escapeString(solutionName.toString()))
            .replace("{" + "aggregatedAlertName" + "}", localVarApiClient.escapeString(aggregatedAlertName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ioTSecuritySolutionsAnalyticsAggregatedAlertGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedAlertName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertGet(Async)");
        }

        // verify the required parameter 'solutionName' is set
        if (solutionName == null) {
            throw new ApiException("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertGet(Async)");
        }

        // verify the required parameter 'aggregatedAlertName' is set
        if (aggregatedAlertName == null) {
            throw new ApiException("Missing the required parameter 'aggregatedAlertName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertGet(Async)");
        }

        return ioTSecuritySolutionsAnalyticsAggregatedAlertGetCall(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName, _callback);

    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedAlertName Identifier of the aggregated alert (required)
     * @return IoTSecurityAggregatedAlert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public IoTSecurityAggregatedAlert ioTSecuritySolutionsAnalyticsAggregatedAlertGet(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedAlertName) throws ApiException {
        ApiResponse<IoTSecurityAggregatedAlert> localVarResp = ioTSecuritySolutionsAnalyticsAggregatedAlertGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName);
        return localVarResp.getData();
    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedAlertName Identifier of the aggregated alert (required)
     * @return ApiResponse&lt;IoTSecurityAggregatedAlert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IoTSecurityAggregatedAlert> ioTSecuritySolutionsAnalyticsAggregatedAlertGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedAlertName) throws ApiException {
        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsAggregatedAlertGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName, null);
        Type localVarReturnType = new TypeToken<IoTSecurityAggregatedAlert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedAlertName Identifier of the aggregated alert (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsAggregatedAlertGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedAlertName, final ApiCallback<IoTSecurityAggregatedAlert> _callback) throws ApiException {

        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsAggregatedAlertGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName, _callback);
        Type localVarReturnType = new TypeToken<IoTSecurityAggregatedAlert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ioTSecuritySolutionsAnalyticsAggregatedAlertsList
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param $top The number of results to retrieve. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsAggregatedAlertsListCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "solutionName" + "}", localVarApiClient.escapeString(solutionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ioTSecuritySolutionsAnalyticsAggregatedAlertsListValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertsList(Async)");
        }

        // verify the required parameter 'solutionName' is set
        if (solutionName == null) {
            throw new ApiException("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertsList(Async)");
        }

        return ioTSecuritySolutionsAnalyticsAggregatedAlertsListCall(apiVersion, subscriptionId, resourceGroupName, solutionName, $top, _callback);

    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param $top The number of results to retrieve. (optional)
     * @return IoTSecurityAggregatedAlertList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public IoTSecurityAggregatedAlertList ioTSecuritySolutionsAnalyticsAggregatedAlertsList(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, Integer $top) throws ApiException {
        ApiResponse<IoTSecurityAggregatedAlertList> localVarResp = ioTSecuritySolutionsAnalyticsAggregatedAlertsListWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, solutionName, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param $top The number of results to retrieve. (optional)
     * @return ApiResponse&lt;IoTSecurityAggregatedAlertList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IoTSecurityAggregatedAlertList> ioTSecuritySolutionsAnalyticsAggregatedAlertsListWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsAggregatedAlertsListValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, $top, null);
        Type localVarReturnType = new TypeToken<IoTSecurityAggregatedAlertList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param $top The number of results to retrieve. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsAggregatedAlertsListAsync(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, Integer $top, final ApiCallback<IoTSecurityAggregatedAlertList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsAggregatedAlertsListValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, $top, _callback);
        Type localVarReturnType = new TypeToken<IoTSecurityAggregatedAlertList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ioTSecuritySolutionsAnalyticsGetAll
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsGetAllCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "solutionName" + "}", localVarApiClient.escapeString(solutionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ioTSecuritySolutionsAnalyticsGetAllValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsGetAll(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsGetAll(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsGetAll(Async)");
        }

        // verify the required parameter 'solutionName' is set
        if (solutionName == null) {
            throw new ApiException("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsGetAll(Async)");
        }

        return ioTSecuritySolutionsAnalyticsGetAllCall(apiVersion, subscriptionId, resourceGroupName, solutionName, _callback);

    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @return IoTSecuritySolutionAnalyticsModelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public IoTSecuritySolutionAnalyticsModelList ioTSecuritySolutionsAnalyticsGetAll(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName) throws ApiException {
        ApiResponse<IoTSecuritySolutionAnalyticsModelList> localVarResp = ioTSecuritySolutionsAnalyticsGetAllWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, solutionName);
        return localVarResp.getData();
    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @return ApiResponse&lt;IoTSecuritySolutionAnalyticsModelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IoTSecuritySolutionAnalyticsModelList> ioTSecuritySolutionsAnalyticsGetAllWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName) throws ApiException {
        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsGetAllValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, null);
        Type localVarReturnType = new TypeToken<IoTSecuritySolutionAnalyticsModelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsGetAllAsync(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, final ApiCallback<IoTSecuritySolutionAnalyticsModelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsGetAllValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, _callback);
        Type localVarReturnType = new TypeToken<IoTSecuritySolutionAnalyticsModelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ioTSecuritySolutionsAnalyticsGetDefault
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsGetDefaultCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "solutionName" + "}", localVarApiClient.escapeString(solutionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ioTSecuritySolutionsAnalyticsGetDefaultValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsGetDefault(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsGetDefault(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsGetDefault(Async)");
        }

        // verify the required parameter 'solutionName' is set
        if (solutionName == null) {
            throw new ApiException("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsGetDefault(Async)");
        }

        return ioTSecuritySolutionsAnalyticsGetDefaultCall(apiVersion, subscriptionId, resourceGroupName, solutionName, _callback);

    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @return IoTSecuritySolutionAnalyticsModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public IoTSecuritySolutionAnalyticsModel ioTSecuritySolutionsAnalyticsGetDefault(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName) throws ApiException {
        ApiResponse<IoTSecuritySolutionAnalyticsModel> localVarResp = ioTSecuritySolutionsAnalyticsGetDefaultWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, solutionName);
        return localVarResp.getData();
    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @return ApiResponse&lt;IoTSecuritySolutionAnalyticsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IoTSecuritySolutionAnalyticsModel> ioTSecuritySolutionsAnalyticsGetDefaultWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName) throws ApiException {
        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsGetDefaultValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, null);
        Type localVarReturnType = new TypeToken<IoTSecuritySolutionAnalyticsModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsGetDefaultAsync(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, final ApiCallback<IoTSecuritySolutionAnalyticsModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsGetDefaultValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, _callback);
        Type localVarReturnType = new TypeToken<IoTSecuritySolutionAnalyticsModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ioTSecuritySolutionsAnalyticsRecommendationGet
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedRecommendationName Identifier of the aggregated recommendation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsRecommendationGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedRecommendationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedRecommendations/{aggregatedRecommendationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "solutionName" + "}", localVarApiClient.escapeString(solutionName.toString()))
            .replace("{" + "aggregatedRecommendationName" + "}", localVarApiClient.escapeString(aggregatedRecommendationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ioTSecuritySolutionsAnalyticsRecommendationGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedRecommendationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsRecommendationGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsRecommendationGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsRecommendationGet(Async)");
        }

        // verify the required parameter 'solutionName' is set
        if (solutionName == null) {
            throw new ApiException("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsRecommendationGet(Async)");
        }

        // verify the required parameter 'aggregatedRecommendationName' is set
        if (aggregatedRecommendationName == null) {
            throw new ApiException("Missing the required parameter 'aggregatedRecommendationName' when calling ioTSecuritySolutionsAnalyticsRecommendationGet(Async)");
        }

        return ioTSecuritySolutionsAnalyticsRecommendationGetCall(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedRecommendationName, _callback);

    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedRecommendationName Identifier of the aggregated recommendation (required)
     * @return IoTSecurityAggregatedRecommendation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public IoTSecurityAggregatedRecommendation ioTSecuritySolutionsAnalyticsRecommendationGet(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedRecommendationName) throws ApiException {
        ApiResponse<IoTSecurityAggregatedRecommendation> localVarResp = ioTSecuritySolutionsAnalyticsRecommendationGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedRecommendationName);
        return localVarResp.getData();
    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedRecommendationName Identifier of the aggregated recommendation (required)
     * @return ApiResponse&lt;IoTSecurityAggregatedRecommendation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IoTSecurityAggregatedRecommendation> ioTSecuritySolutionsAnalyticsRecommendationGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedRecommendationName) throws ApiException {
        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsRecommendationGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedRecommendationName, null);
        Type localVarReturnType = new TypeToken<IoTSecurityAggregatedRecommendation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param aggregatedRecommendationName Identifier of the aggregated recommendation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsRecommendationGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, String aggregatedRecommendationName, final ApiCallback<IoTSecurityAggregatedRecommendation> _callback) throws ApiException {

        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsRecommendationGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedRecommendationName, _callback);
        Type localVarReturnType = new TypeToken<IoTSecurityAggregatedRecommendation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ioTSecuritySolutionsAnalyticsRecommendationsList
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param $top The number of results to retrieve. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsRecommendationsListCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedRecommendations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "solutionName" + "}", localVarApiClient.escapeString(solutionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ioTSecuritySolutionsAnalyticsRecommendationsListValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsRecommendationsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsRecommendationsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsRecommendationsList(Async)");
        }

        // verify the required parameter 'solutionName' is set
        if (solutionName == null) {
            throw new ApiException("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsRecommendationsList(Async)");
        }

        return ioTSecuritySolutionsAnalyticsRecommendationsListCall(apiVersion, subscriptionId, resourceGroupName, solutionName, $top, _callback);

    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param $top The number of results to retrieve. (optional)
     * @return IoTSecurityAggregatedRecommendationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public IoTSecurityAggregatedRecommendationList ioTSecuritySolutionsAnalyticsRecommendationsList(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, Integer $top) throws ApiException {
        ApiResponse<IoTSecurityAggregatedRecommendationList> localVarResp = ioTSecuritySolutionsAnalyticsRecommendationsListWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, solutionName, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param $top The number of results to retrieve. (optional)
     * @return ApiResponse&lt;IoTSecurityAggregatedRecommendationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IoTSecurityAggregatedRecommendationList> ioTSecuritySolutionsAnalyticsRecommendationsListWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsRecommendationsListValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, $top, null);
        Type localVarReturnType = new TypeToken<IoTSecurityAggregatedRecommendationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security Analytics of a security solution
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param solutionName The solution manager name (required)
     * @param $top The number of results to retrieve. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ioTSecuritySolutionsAnalyticsRecommendationsListAsync(String apiVersion, String subscriptionId, String resourceGroupName, String solutionName, Integer $top, final ApiCallback<IoTSecurityAggregatedRecommendationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ioTSecuritySolutionsAnalyticsRecommendationsListValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, solutionName, $top, _callback);
        Type localVarReturnType = new TypeToken<IoTSecurityAggregatedRecommendationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
