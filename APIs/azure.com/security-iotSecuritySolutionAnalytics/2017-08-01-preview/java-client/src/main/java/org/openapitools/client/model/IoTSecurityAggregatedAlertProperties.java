/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Security Solution Aggregated Alert data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:15.630806-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IoTSecurityAggregatedAlertProperties {
  public static final String SERIALIZED_NAME_ACTION_TAKEN = "actionTaken";
  @SerializedName(SERIALIZED_NAME_ACTION_TAKEN)
  private String actionTaken;

  public static final String SERIALIZED_NAME_AGGREGATED_DATE_UTC = "aggregatedDateUtc";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_DATE_UTC)
  private LocalDate aggregatedDateUtc;

  public static final String SERIALIZED_NAME_ALERT_DISPLAY_NAME = "alertDisplayName";
  @SerializedName(SERIALIZED_NAME_ALERT_DISPLAY_NAME)
  private String alertDisplayName;

  public static final String SERIALIZED_NAME_ALERT_TYPE = "alertType";
  @SerializedName(SERIALIZED_NAME_ALERT_TYPE)
  private String alertType;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EFFECTED_RESOURCE_TYPE = "effectedResourceType";
  @SerializedName(SERIALIZED_NAME_EFFECTED_RESOURCE_TYPE)
  private String effectedResourceType;

  public static final String SERIALIZED_NAME_LOG_ANALYTICS_QUERY = "logAnalyticsQuery";
  @SerializedName(SERIALIZED_NAME_LOG_ANALYTICS_QUERY)
  private String logAnalyticsQuery;

  public static final String SERIALIZED_NAME_REMEDIATION_STEPS = "remediationSteps";
  @SerializedName(SERIALIZED_NAME_REMEDIATION_STEPS)
  private String remediationSteps;

  /**
   * Estimated severity of this alert
   */
  @JsonAdapter(ReportedSeverityEnum.Adapter.class)
  public enum ReportedSeverityEnum {
    INFORMATIONAL("Informational"),
    
    LOW("Low"),
    
    MEDIUM("Medium"),
    
    HIGH("High");

    private String value;

    ReportedSeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportedSeverityEnum fromValue(String value) {
      for (ReportedSeverityEnum b : ReportedSeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportedSeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportedSeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportedSeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportedSeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportedSeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORTED_SEVERITY = "reportedSeverity";
  @SerializedName(SERIALIZED_NAME_REPORTED_SEVERITY)
  private ReportedSeverityEnum reportedSeverity;

  public static final String SERIALIZED_NAME_SYSTEM_SOURCE = "systemSource";
  @SerializedName(SERIALIZED_NAME_SYSTEM_SOURCE)
  private String systemSource;

  public static final String SERIALIZED_NAME_VENDOR_NAME = "vendorName";
  @SerializedName(SERIALIZED_NAME_VENDOR_NAME)
  private String vendorName;

  public IoTSecurityAggregatedAlertProperties() {
  }

  public IoTSecurityAggregatedAlertProperties(
     String actionTaken, 
     LocalDate aggregatedDateUtc, 
     String alertDisplayName, 
     String alertType, 
     Integer count, 
     String description, 
     String effectedResourceType, 
     String logAnalyticsQuery, 
     String remediationSteps, 
     ReportedSeverityEnum reportedSeverity, 
     String systemSource, 
     String vendorName
  ) {
    this();
    this.actionTaken = actionTaken;
    this.aggregatedDateUtc = aggregatedDateUtc;
    this.alertDisplayName = alertDisplayName;
    this.alertType = alertType;
    this.count = count;
    this.description = description;
    this.effectedResourceType = effectedResourceType;
    this.logAnalyticsQuery = logAnalyticsQuery;
    this.remediationSteps = remediationSteps;
    this.reportedSeverity = reportedSeverity;
    this.systemSource = systemSource;
    this.vendorName = vendorName;
  }

  /**
   * The action that was taken as a response to the alert (Active, Blocked etc.)
   * @return actionTaken
   */
  @javax.annotation.Nullable
  public String getActionTaken() {
    return actionTaken;
  }



  /**
   * The date the incidents were detected by the vendor
   * @return aggregatedDateUtc
   */
  @javax.annotation.Nullable
  public LocalDate getAggregatedDateUtc() {
    return aggregatedDateUtc;
  }



  /**
   * Display name of the alert type
   * @return alertDisplayName
   */
  @javax.annotation.Nullable
  public String getAlertDisplayName() {
    return alertDisplayName;
  }



  /**
   * Name of the alert type
   * @return alertType
   */
  @javax.annotation.Nullable
  public String getAlertType() {
    return alertType;
  }



  /**
   * Occurrence number of the alert within the aggregated date
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }



  /**
   * Description of the incident and what it means
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Azure resource ID of the resource that got the alerts
   * @return effectedResourceType
   */
  @javax.annotation.Nullable
  public String getEffectedResourceType() {
    return effectedResourceType;
  }



  /**
   * query in log analytics to get the list of affected devices/alerts
   * @return logAnalyticsQuery
   */
  @javax.annotation.Nullable
  public String getLogAnalyticsQuery() {
    return logAnalyticsQuery;
  }



  /**
   * Recommended steps for remediation
   * @return remediationSteps
   */
  @javax.annotation.Nullable
  public String getRemediationSteps() {
    return remediationSteps;
  }



  /**
   * Estimated severity of this alert
   * @return reportedSeverity
   */
  @javax.annotation.Nullable
  public ReportedSeverityEnum getReportedSeverity() {
    return reportedSeverity;
  }



  /**
   * The type of the alerted resource (Azure, Non-Azure)
   * @return systemSource
   */
  @javax.annotation.Nullable
  public String getSystemSource() {
    return systemSource;
  }



  /**
   * Name of the vendor that discovered the incident
   * @return vendorName
   */
  @javax.annotation.Nullable
  public String getVendorName() {
    return vendorName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoTSecurityAggregatedAlertProperties ioTSecurityAggregatedAlertProperties = (IoTSecurityAggregatedAlertProperties) o;
    return Objects.equals(this.actionTaken, ioTSecurityAggregatedAlertProperties.actionTaken) &&
        Objects.equals(this.aggregatedDateUtc, ioTSecurityAggregatedAlertProperties.aggregatedDateUtc) &&
        Objects.equals(this.alertDisplayName, ioTSecurityAggregatedAlertProperties.alertDisplayName) &&
        Objects.equals(this.alertType, ioTSecurityAggregatedAlertProperties.alertType) &&
        Objects.equals(this.count, ioTSecurityAggregatedAlertProperties.count) &&
        Objects.equals(this.description, ioTSecurityAggregatedAlertProperties.description) &&
        Objects.equals(this.effectedResourceType, ioTSecurityAggregatedAlertProperties.effectedResourceType) &&
        Objects.equals(this.logAnalyticsQuery, ioTSecurityAggregatedAlertProperties.logAnalyticsQuery) &&
        Objects.equals(this.remediationSteps, ioTSecurityAggregatedAlertProperties.remediationSteps) &&
        Objects.equals(this.reportedSeverity, ioTSecurityAggregatedAlertProperties.reportedSeverity) &&
        Objects.equals(this.systemSource, ioTSecurityAggregatedAlertProperties.systemSource) &&
        Objects.equals(this.vendorName, ioTSecurityAggregatedAlertProperties.vendorName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionTaken, aggregatedDateUtc, alertDisplayName, alertType, count, description, effectedResourceType, logAnalyticsQuery, remediationSteps, reportedSeverity, systemSource, vendorName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoTSecurityAggregatedAlertProperties {\n");
    sb.append("    actionTaken: ").append(toIndentedString(actionTaken)).append("\n");
    sb.append("    aggregatedDateUtc: ").append(toIndentedString(aggregatedDateUtc)).append("\n");
    sb.append("    alertDisplayName: ").append(toIndentedString(alertDisplayName)).append("\n");
    sb.append("    alertType: ").append(toIndentedString(alertType)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    effectedResourceType: ").append(toIndentedString(effectedResourceType)).append("\n");
    sb.append("    logAnalyticsQuery: ").append(toIndentedString(logAnalyticsQuery)).append("\n");
    sb.append("    remediationSteps: ").append(toIndentedString(remediationSteps)).append("\n");
    sb.append("    reportedSeverity: ").append(toIndentedString(reportedSeverity)).append("\n");
    sb.append("    systemSource: ").append(toIndentedString(systemSource)).append("\n");
    sb.append("    vendorName: ").append(toIndentedString(vendorName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionTaken");
    openapiFields.add("aggregatedDateUtc");
    openapiFields.add("alertDisplayName");
    openapiFields.add("alertType");
    openapiFields.add("count");
    openapiFields.add("description");
    openapiFields.add("effectedResourceType");
    openapiFields.add("logAnalyticsQuery");
    openapiFields.add("remediationSteps");
    openapiFields.add("reportedSeverity");
    openapiFields.add("systemSource");
    openapiFields.add("vendorName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoTSecurityAggregatedAlertProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoTSecurityAggregatedAlertProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoTSecurityAggregatedAlertProperties is not found in the empty JSON string", IoTSecurityAggregatedAlertProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoTSecurityAggregatedAlertProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoTSecurityAggregatedAlertProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionTaken") != null && !jsonObj.get("actionTaken").isJsonNull()) && !jsonObj.get("actionTaken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionTaken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionTaken").toString()));
      }
      if ((jsonObj.get("alertDisplayName") != null && !jsonObj.get("alertDisplayName").isJsonNull()) && !jsonObj.get("alertDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertDisplayName").toString()));
      }
      if ((jsonObj.get("alertType") != null && !jsonObj.get("alertType").isJsonNull()) && !jsonObj.get("alertType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertType").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("effectedResourceType") != null && !jsonObj.get("effectedResourceType").isJsonNull()) && !jsonObj.get("effectedResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectedResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectedResourceType").toString()));
      }
      if ((jsonObj.get("logAnalyticsQuery") != null && !jsonObj.get("logAnalyticsQuery").isJsonNull()) && !jsonObj.get("logAnalyticsQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logAnalyticsQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logAnalyticsQuery").toString()));
      }
      if ((jsonObj.get("remediationSteps") != null && !jsonObj.get("remediationSteps").isJsonNull()) && !jsonObj.get("remediationSteps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remediationSteps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remediationSteps").toString()));
      }
      if ((jsonObj.get("reportedSeverity") != null && !jsonObj.get("reportedSeverity").isJsonNull()) && !jsonObj.get("reportedSeverity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportedSeverity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportedSeverity").toString()));
      }
      // validate the optional field `reportedSeverity`
      if (jsonObj.get("reportedSeverity") != null && !jsonObj.get("reportedSeverity").isJsonNull()) {
        ReportedSeverityEnum.validateJsonElement(jsonObj.get("reportedSeverity"));
      }
      if ((jsonObj.get("systemSource") != null && !jsonObj.get("systemSource").isJsonNull()) && !jsonObj.get("systemSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemSource").toString()));
      }
      if ((jsonObj.get("vendorName") != null && !jsonObj.get("vendorName").isJsonNull()) && !jsonObj.get("vendorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoTSecurityAggregatedAlertProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoTSecurityAggregatedAlertProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoTSecurityAggregatedAlertProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoTSecurityAggregatedAlertProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<IoTSecurityAggregatedAlertProperties>() {
           @Override
           public void write(JsonWriter out, IoTSecurityAggregatedAlertProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoTSecurityAggregatedAlertProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoTSecurityAggregatedAlertProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoTSecurityAggregatedAlertProperties
   * @throws IOException if the JSON string is invalid with respect to IoTSecurityAggregatedAlertProperties
   */
  public static IoTSecurityAggregatedAlertProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoTSecurityAggregatedAlertProperties.class);
  }

  /**
   * Convert an instance of IoTSecurityAggregatedAlertProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

