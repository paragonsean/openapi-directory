/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IoTSecurityAggregatedAlert from '../model/IoTSecurityAggregatedAlert';
import IoTSecurityAggregatedAlertList from '../model/IoTSecurityAggregatedAlertList';
import IoTSecurityAggregatedRecommendation from '../model/IoTSecurityAggregatedRecommendation';
import IoTSecurityAggregatedRecommendationList from '../model/IoTSecurityAggregatedRecommendationList';
import IoTSecuritySolutionAnalyticsModel from '../model/IoTSecuritySolutionAnalyticsModel';
import IoTSecuritySolutionAnalyticsModelList from '../model/IoTSecuritySolutionAnalyticsModelList';
import IoTSecuritySolutionsAnalyticsGetAllDefaultResponse from '../model/IoTSecuritySolutionsAnalyticsGetAllDefaultResponse';

/**
* IoTSecuritySolutionsAnalytics service.
* @module api/IoTSecuritySolutionsAnalyticsApi
* @version 2017-08-01-preview
*/
export default class IoTSecuritySolutionsAnalyticsApi {

    /**
    * Constructs a new IoTSecuritySolutionsAnalyticsApi. 
    * @alias module:api/IoTSecuritySolutionsAnalyticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss operation.
     * @callback module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsAggregatedAlertDismissCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security Analytics of a security solution
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} solutionName The solution manager name
     * @param {String} aggregatedAlertName Identifier of the aggregated alert
     * @param {module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsAggregatedAlertDismissCallback} callback The callback function, accepting three arguments: error, data, response
     */
    ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss");
      }
      // verify the required parameter 'aggregatedAlertName' is set
      if (aggregatedAlertName === undefined || aggregatedAlertName === null) {
        throw new Error("Missing the required parameter 'aggregatedAlertName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertDismiss");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'solutionName': solutionName,
        'aggregatedAlertName': aggregatedAlertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts/{aggregatedAlertName}/dismiss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ioTSecuritySolutionsAnalyticsAggregatedAlertGet operation.
     * @callback module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsAggregatedAlertGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoTSecurityAggregatedAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security Analytics of a security solution
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} solutionName The solution manager name
     * @param {String} aggregatedAlertName Identifier of the aggregated alert
     * @param {module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsAggregatedAlertGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IoTSecurityAggregatedAlert}
     */
    ioTSecuritySolutionsAnalyticsAggregatedAlertGet(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertGet");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertGet");
      }
      // verify the required parameter 'aggregatedAlertName' is set
      if (aggregatedAlertName === undefined || aggregatedAlertName === null) {
        throw new Error("Missing the required parameter 'aggregatedAlertName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'solutionName': solutionName,
        'aggregatedAlertName': aggregatedAlertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoTSecurityAggregatedAlert;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts/{aggregatedAlertName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ioTSecuritySolutionsAnalyticsAggregatedAlertsList operation.
     * @callback module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsAggregatedAlertsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoTSecurityAggregatedAlertList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security Analytics of a security solution
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} solutionName The solution manager name
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of results to retrieve.
     * @param {module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsAggregatedAlertsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IoTSecurityAggregatedAlertList}
     */
    ioTSecuritySolutionsAnalyticsAggregatedAlertsList(apiVersion, subscriptionId, resourceGroupName, solutionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertsList");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsAggregatedAlertsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoTSecurityAggregatedAlertList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ioTSecuritySolutionsAnalyticsGetAll operation.
     * @callback module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoTSecuritySolutionAnalyticsModelList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security Analytics of a security solution
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} solutionName The solution manager name
     * @param {module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IoTSecuritySolutionAnalyticsModelList}
     */
    ioTSecuritySolutionsAnalyticsGetAll(apiVersion, subscriptionId, resourceGroupName, solutionName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsGetAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsGetAll");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsGetAll");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsGetAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoTSecuritySolutionAnalyticsModelList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ioTSecuritySolutionsAnalyticsGetDefault operation.
     * @callback module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsGetDefaultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoTSecuritySolutionAnalyticsModel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security Analytics of a security solution
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} solutionName The solution manager name
     * @param {module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsGetDefaultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IoTSecuritySolutionAnalyticsModel}
     */
    ioTSecuritySolutionsAnalyticsGetDefault(apiVersion, subscriptionId, resourceGroupName, solutionName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsGetDefault");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsGetDefault");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsGetDefault");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsGetDefault");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoTSecuritySolutionAnalyticsModel;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ioTSecuritySolutionsAnalyticsRecommendationGet operation.
     * @callback module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsRecommendationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoTSecurityAggregatedRecommendation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security Analytics of a security solution
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} solutionName The solution manager name
     * @param {String} aggregatedRecommendationName Identifier of the aggregated recommendation
     * @param {module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsRecommendationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IoTSecurityAggregatedRecommendation}
     */
    ioTSecuritySolutionsAnalyticsRecommendationGet(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedRecommendationName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsRecommendationGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsRecommendationGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsRecommendationGet");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsRecommendationGet");
      }
      // verify the required parameter 'aggregatedRecommendationName' is set
      if (aggregatedRecommendationName === undefined || aggregatedRecommendationName === null) {
        throw new Error("Missing the required parameter 'aggregatedRecommendationName' when calling ioTSecuritySolutionsAnalyticsRecommendationGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'solutionName': solutionName,
        'aggregatedRecommendationName': aggregatedRecommendationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoTSecurityAggregatedRecommendation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedRecommendations/{aggregatedRecommendationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ioTSecuritySolutionsAnalyticsRecommendationsList operation.
     * @callback module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsRecommendationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoTSecurityAggregatedRecommendationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Security Analytics of a security solution
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} solutionName The solution manager name
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of results to retrieve.
     * @param {module:api/IoTSecuritySolutionsAnalyticsApi~ioTSecuritySolutionsAnalyticsRecommendationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IoTSecurityAggregatedRecommendationList}
     */
    ioTSecuritySolutionsAnalyticsRecommendationsList(apiVersion, subscriptionId, resourceGroupName, solutionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling ioTSecuritySolutionsAnalyticsRecommendationsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling ioTSecuritySolutionsAnalyticsRecommendationsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling ioTSecuritySolutionsAnalyticsRecommendationsList");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling ioTSecuritySolutionsAnalyticsRecommendationsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoTSecurityAggregatedRecommendationList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedRecommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
