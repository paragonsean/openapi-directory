/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIoTSecurityAlertedDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIoTSecurityAlertedDevice::OAIIoTSecurityAlertedDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIoTSecurityAlertedDevice::OAIIoTSecurityAlertedDevice() {
    this->initializeModel();
}

OAIIoTSecurityAlertedDevice::~OAIIoTSecurityAlertedDevice() {}

void OAIIoTSecurityAlertedDevice::initializeModel() {

    m_alerts_count_isSet = false;
    m_alerts_count_isValid = false;

    m_device_id_isSet = false;
    m_device_id_isValid = false;
}

void OAIIoTSecurityAlertedDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIoTSecurityAlertedDevice::fromJsonObject(QJsonObject json) {

    m_alerts_count_isValid = ::OpenAPI::fromJsonValue(m_alerts_count, json[QString("alertsCount")]);
    m_alerts_count_isSet = !json[QString("alertsCount")].isNull() && m_alerts_count_isValid;

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("deviceId")]);
    m_device_id_isSet = !json[QString("deviceId")].isNull() && m_device_id_isValid;
}

QString OAIIoTSecurityAlertedDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIoTSecurityAlertedDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_alerts_count_isSet) {
        obj.insert(QString("alertsCount"), ::OpenAPI::toJsonValue(m_alerts_count));
    }
    if (m_device_id_isSet) {
        obj.insert(QString("deviceId"), ::OpenAPI::toJsonValue(m_device_id));
    }
    return obj;
}

qint32 OAIIoTSecurityAlertedDevice::getAlertsCount() const {
    return m_alerts_count;
}
void OAIIoTSecurityAlertedDevice::setAlertsCount(const qint32 &alerts_count) {
    m_alerts_count = alerts_count;
    m_alerts_count_isSet = true;
}

bool OAIIoTSecurityAlertedDevice::is_alerts_count_Set() const{
    return m_alerts_count_isSet;
}

bool OAIIoTSecurityAlertedDevice::is_alerts_count_Valid() const{
    return m_alerts_count_isValid;
}

QString OAIIoTSecurityAlertedDevice::getDeviceId() const {
    return m_device_id;
}
void OAIIoTSecurityAlertedDevice::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIIoTSecurityAlertedDevice::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIIoTSecurityAlertedDevice::is_device_id_Valid() const{
    return m_device_id_isValid;
}

bool OAIIoTSecurityAlertedDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alerts_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIoTSecurityAlertedDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
