/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIoTSeverityMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIoTSeverityMetrics::OAIIoTSeverityMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIoTSeverityMetrics::OAIIoTSeverityMetrics() {
    this->initializeModel();
}

OAIIoTSeverityMetrics::~OAIIoTSeverityMetrics() {}

void OAIIoTSeverityMetrics::initializeModel() {

    m_high_isSet = false;
    m_high_isValid = false;

    m_low_isSet = false;
    m_low_isValid = false;

    m_medium_isSet = false;
    m_medium_isValid = false;
}

void OAIIoTSeverityMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIoTSeverityMetrics::fromJsonObject(QJsonObject json) {

    m_high_isValid = ::OpenAPI::fromJsonValue(m_high, json[QString("high")]);
    m_high_isSet = !json[QString("high")].isNull() && m_high_isValid;

    m_low_isValid = ::OpenAPI::fromJsonValue(m_low, json[QString("low")]);
    m_low_isSet = !json[QString("low")].isNull() && m_low_isValid;

    m_medium_isValid = ::OpenAPI::fromJsonValue(m_medium, json[QString("medium")]);
    m_medium_isSet = !json[QString("medium")].isNull() && m_medium_isValid;
}

QString OAIIoTSeverityMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIoTSeverityMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_high_isSet) {
        obj.insert(QString("high"), ::OpenAPI::toJsonValue(m_high));
    }
    if (m_low_isSet) {
        obj.insert(QString("low"), ::OpenAPI::toJsonValue(m_low));
    }
    if (m_medium_isSet) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(m_medium));
    }
    return obj;
}

qint32 OAIIoTSeverityMetrics::getHigh() const {
    return m_high;
}
void OAIIoTSeverityMetrics::setHigh(const qint32 &high) {
    m_high = high;
    m_high_isSet = true;
}

bool OAIIoTSeverityMetrics::is_high_Set() const{
    return m_high_isSet;
}

bool OAIIoTSeverityMetrics::is_high_Valid() const{
    return m_high_isValid;
}

qint32 OAIIoTSeverityMetrics::getLow() const {
    return m_low;
}
void OAIIoTSeverityMetrics::setLow(const qint32 &low) {
    m_low = low;
    m_low_isSet = true;
}

bool OAIIoTSeverityMetrics::is_low_Set() const{
    return m_low_isSet;
}

bool OAIIoTSeverityMetrics::is_low_Valid() const{
    return m_low_isValid;
}

qint32 OAIIoTSeverityMetrics::getMedium() const {
    return m_medium;
}
void OAIIoTSeverityMetrics::setMedium(const qint32 &medium) {
    m_medium = medium;
    m_medium_isSet = true;
}

bool OAIIoTSeverityMetrics::is_medium_Set() const{
    return m_medium_isSet;
}

bool OAIIoTSeverityMetrics::is_medium_Valid() const{
    return m_medium_isValid;
}

bool OAIIoTSeverityMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_high_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIoTSeverityMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
