# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IoTSecurityDeviceAlert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_display_name: str=None, alerts_count: int=None, reported_severity: str=None):
        """IoTSecurityDeviceAlert - a model defined in OpenAPI

        :param alert_display_name: The alert_display_name of this IoTSecurityDeviceAlert.
        :param alerts_count: The alerts_count of this IoTSecurityDeviceAlert.
        :param reported_severity: The reported_severity of this IoTSecurityDeviceAlert.
        """
        self.openapi_types = {
            'alert_display_name': str,
            'alerts_count': int,
            'reported_severity': str
        }

        self.attribute_map = {
            'alert_display_name': 'alertDisplayName',
            'alerts_count': 'alertsCount',
            'reported_severity': 'reportedSeverity'
        }

        self._alert_display_name = alert_display_name
        self._alerts_count = alerts_count
        self._reported_severity = reported_severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTSecurityDeviceAlert':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTSecurityDeviceAlert of this IoTSecurityDeviceAlert.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_display_name(self):
        """Gets the alert_display_name of this IoTSecurityDeviceAlert.

        Display name of the alert

        :return: The alert_display_name of this IoTSecurityDeviceAlert.
        :rtype: str
        """
        return self._alert_display_name

    @alert_display_name.setter
    def alert_display_name(self, alert_display_name):
        """Sets the alert_display_name of this IoTSecurityDeviceAlert.

        Display name of the alert

        :param alert_display_name: The alert_display_name of this IoTSecurityDeviceAlert.
        :type alert_display_name: str
        """

        self._alert_display_name = alert_display_name

    @property
    def alerts_count(self):
        """Gets the alerts_count of this IoTSecurityDeviceAlert.

        Number of alerts raised for this alert type.

        :return: The alerts_count of this IoTSecurityDeviceAlert.
        :rtype: int
        """
        return self._alerts_count

    @alerts_count.setter
    def alerts_count(self, alerts_count):
        """Sets the alerts_count of this IoTSecurityDeviceAlert.

        Number of alerts raised for this alert type.

        :param alerts_count: The alerts_count of this IoTSecurityDeviceAlert.
        :type alerts_count: int
        """

        self._alerts_count = alerts_count

    @property
    def reported_severity(self):
        """Gets the reported_severity of this IoTSecurityDeviceAlert.

        Assessed Alert severity.

        :return: The reported_severity of this IoTSecurityDeviceAlert.
        :rtype: str
        """
        return self._reported_severity

    @reported_severity.setter
    def reported_severity(self, reported_severity):
        """Sets the reported_severity of this IoTSecurityDeviceAlert.

        Assessed Alert severity.

        :param reported_severity: The reported_severity of this IoTSecurityDeviceAlert.
        :type reported_severity: str
        """
        allowed_values = ["Informational", "Low", "Medium", "High"]  # noqa: E501
        if reported_severity not in allowed_values:
            raise ValueError(
                "Invalid value for `reported_severity` ({0}), must be one of {1}"
                .format(reported_severity, allowed_values)
            )

        self._reported_severity = reported_severity
