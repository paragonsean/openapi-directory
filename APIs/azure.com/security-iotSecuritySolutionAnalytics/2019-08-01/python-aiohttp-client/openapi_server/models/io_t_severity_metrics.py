# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IoTSeverityMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, high: int=None, low: int=None, medium: int=None):
        """IoTSeverityMetrics - a model defined in OpenAPI

        :param high: The high of this IoTSeverityMetrics.
        :param low: The low of this IoTSeverityMetrics.
        :param medium: The medium of this IoTSeverityMetrics.
        """
        self.openapi_types = {
            'high': int,
            'low': int,
            'medium': int
        }

        self.attribute_map = {
            'high': 'high',
            'low': 'low',
            'medium': 'medium'
        }

        self._high = high
        self._low = low
        self._medium = medium

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTSeverityMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTSeverityMetrics of this IoTSeverityMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def high(self):
        """Gets the high of this IoTSeverityMetrics.

        Count of high severity alerts/recommendations.

        :return: The high of this IoTSeverityMetrics.
        :rtype: int
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this IoTSeverityMetrics.

        Count of high severity alerts/recommendations.

        :param high: The high of this IoTSeverityMetrics.
        :type high: int
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this IoTSeverityMetrics.

        Count of low severity alerts/recommendations.

        :return: The low of this IoTSeverityMetrics.
        :rtype: int
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this IoTSeverityMetrics.

        Count of low severity alerts/recommendations.

        :param low: The low of this IoTSeverityMetrics.
        :type low: int
        """

        self._low = low

    @property
    def medium(self):
        """Gets the medium of this IoTSeverityMetrics.

        Count of medium severity alerts/recommendations.

        :return: The medium of this IoTSeverityMetrics.
        :rtype: int
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this IoTSeverityMetrics.

        Count of medium severity alerts/recommendations.

        :param medium: The medium of this IoTSeverityMetrics.
        :type medium: int
        """

        self._medium = medium
