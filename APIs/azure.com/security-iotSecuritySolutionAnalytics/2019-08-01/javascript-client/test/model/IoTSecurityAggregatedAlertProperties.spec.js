/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SecurityCenter);
  }
}(this, function(expect, SecurityCenter) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IoTSecurityAggregatedAlertProperties', function() {
    it('should create an instance of IoTSecurityAggregatedAlertProperties', function() {
      // uncomment below and update the code to test IoTSecurityAggregatedAlertProperties
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be.a(SecurityCenter.IoTSecurityAggregatedAlertProperties);
    });

    it('should have the property actionTaken (base name: "actionTaken")', function() {
      // uncomment below and update the code to test the property actionTaken
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property aggregatedDateUtc (base name: "aggregatedDateUtc")', function() {
      // uncomment below and update the code to test the property aggregatedDateUtc
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property alertDisplayName (base name: "alertDisplayName")', function() {
      // uncomment below and update the code to test the property alertDisplayName
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property alertType (base name: "alertType")', function() {
      // uncomment below and update the code to test the property alertType
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property count (base name: "count")', function() {
      // uncomment below and update the code to test the property count
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property effectedResourceType (base name: "effectedResourceType")', function() {
      // uncomment below and update the code to test the property effectedResourceType
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property logAnalyticsQuery (base name: "logAnalyticsQuery")', function() {
      // uncomment below and update the code to test the property logAnalyticsQuery
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property remediationSteps (base name: "remediationSteps")', function() {
      // uncomment below and update the code to test the property remediationSteps
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property reportedSeverity (base name: "reportedSeverity")', function() {
      // uncomment below and update the code to test the property reportedSeverity
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property systemSource (base name: "systemSource")', function() {
      // uncomment below and update the code to test the property systemSource
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property topDevicesList (base name: "topDevicesList")', function() {
      // uncomment below and update the code to test the property topDevicesList
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

    it('should have the property vendorName (base name: "vendorName")', function() {
      // uncomment below and update the code to test the property vendorName
      //var instance = new SecurityCenter.IoTSecurityAggregatedAlertProperties();
      //expect(instance).to.be();
    });

  });

}));
