/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IoTSecurityAggregatedAlert from '../model/IoTSecurityAggregatedAlert';
import IoTSecurityAggregatedAlertList from '../model/IoTSecurityAggregatedAlertList';
import IotSecuritySolutionAnalyticsListDefaultResponse from '../model/IotSecuritySolutionAnalyticsListDefaultResponse';

/**
* AggregatedAlert service.
* @module api/AggregatedAlertApi
* @version 2019-08-01
*/
export default class AggregatedAlertApi {

    /**
    * Constructs a new AggregatedAlertApi. 
    * @alias module:api/AggregatedAlertApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the iotSecuritySolutionsAnalyticsAggregatedAlertDismiss operation.
     * @callback module:api/AggregatedAlertApi~iotSecuritySolutionsAnalyticsAggregatedAlertDismissCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to dismiss an aggregated IoT Security Solution Alert.
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} solutionName The name of the IoT Security solution.
     * @param {String} aggregatedAlertName Identifier of the aggregated alert.
     * @param {module:api/AggregatedAlertApi~iotSecuritySolutionsAnalyticsAggregatedAlertDismissCallback} callback The callback function, accepting three arguments: error, data, response
     */
    iotSecuritySolutionsAnalyticsAggregatedAlertDismiss(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotSecuritySolutionsAnalyticsAggregatedAlertDismiss");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotSecuritySolutionsAnalyticsAggregatedAlertDismiss");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotSecuritySolutionsAnalyticsAggregatedAlertDismiss");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling iotSecuritySolutionsAnalyticsAggregatedAlertDismiss");
      }
      // verify the required parameter 'aggregatedAlertName' is set
      if (aggregatedAlertName === undefined || aggregatedAlertName === null) {
        throw new Error("Missing the required parameter 'aggregatedAlertName' when calling iotSecuritySolutionsAnalyticsAggregatedAlertDismiss");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'solutionName': solutionName,
        'aggregatedAlertName': aggregatedAlertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts/{aggregatedAlertName}/dismiss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotSecuritySolutionsAnalyticsAggregatedAlertGet operation.
     * @callback module:api/AggregatedAlertApi~iotSecuritySolutionsAnalyticsAggregatedAlertGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoTSecurityAggregatedAlert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get a single the aggregated alert of yours IoT Security solution. This aggregation is performed by alert name.
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} solutionName The name of the IoT Security solution.
     * @param {String} aggregatedAlertName Identifier of the aggregated alert.
     * @param {module:api/AggregatedAlertApi~iotSecuritySolutionsAnalyticsAggregatedAlertGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IoTSecurityAggregatedAlert}
     */
    iotSecuritySolutionsAnalyticsAggregatedAlertGet(apiVersion, subscriptionId, resourceGroupName, solutionName, aggregatedAlertName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotSecuritySolutionsAnalyticsAggregatedAlertGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotSecuritySolutionsAnalyticsAggregatedAlertGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotSecuritySolutionsAnalyticsAggregatedAlertGet");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling iotSecuritySolutionsAnalyticsAggregatedAlertGet");
      }
      // verify the required parameter 'aggregatedAlertName' is set
      if (aggregatedAlertName === undefined || aggregatedAlertName === null) {
        throw new Error("Missing the required parameter 'aggregatedAlertName' when calling iotSecuritySolutionsAnalyticsAggregatedAlertGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'solutionName': solutionName,
        'aggregatedAlertName': aggregatedAlertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoTSecurityAggregatedAlert;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts/{aggregatedAlertName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotSecuritySolutionsAnalyticsAggregatedAlertList operation.
     * @callback module:api/AggregatedAlertApi~iotSecuritySolutionsAnalyticsAggregatedAlertListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IoTSecurityAggregatedAlertList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this method to get the aggregated alert list of yours IoT Security solution.
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {String} solutionName The name of the IoT Security solution.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Number of results to retrieve.
     * @param {module:api/AggregatedAlertApi~iotSecuritySolutionsAnalyticsAggregatedAlertListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IoTSecurityAggregatedAlertList}
     */
    iotSecuritySolutionsAnalyticsAggregatedAlertList(apiVersion, subscriptionId, resourceGroupName, solutionName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotSecuritySolutionsAnalyticsAggregatedAlertList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotSecuritySolutionsAnalyticsAggregatedAlertList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotSecuritySolutionsAnalyticsAggregatedAlertList");
      }
      // verify the required parameter 'solutionName' is set
      if (solutionName === undefined || solutionName === null) {
        throw new Error("Missing the required parameter 'solutionName' when calling iotSecuritySolutionsAnalyticsAggregatedAlertList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'solutionName': solutionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IoTSecurityAggregatedAlertList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/iotSecuritySolutions/{solutionName}/analyticsModels/default/aggregatedAlerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
