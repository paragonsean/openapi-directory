/*
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CalculatePriceResponsePropertiesBillingCurrencyTotal;
import org.openapitools.client.model.CalculatePriceResponsePropertiesPricingCurrencyTotal;
import org.openapitools.client.model.PaymentDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CalculatePriceResponseProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:31.995135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CalculatePriceResponseProperties {
  public static final String SERIALIZED_NAME_BILLING_CURRENCY_TOTAL = "billingCurrencyTotal";
  @SerializedName(SERIALIZED_NAME_BILLING_CURRENCY_TOTAL)
  private CalculatePriceResponsePropertiesBillingCurrencyTotal billingCurrencyTotal;

  public static final String SERIALIZED_NAME_IS_BILLING_PARTNER_MANAGED = "isBillingPartnerManaged";
  @SerializedName(SERIALIZED_NAME_IS_BILLING_PARTNER_MANAGED)
  private Boolean isBillingPartnerManaged;

  public static final String SERIALIZED_NAME_PAYMENT_SCHEDULE = "paymentSchedule";
  @SerializedName(SERIALIZED_NAME_PAYMENT_SCHEDULE)
  private List<PaymentDetail> paymentSchedule = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICING_CURRENCY_TOTAL = "pricingCurrencyTotal";
  @SerializedName(SERIALIZED_NAME_PRICING_CURRENCY_TOTAL)
  private CalculatePriceResponsePropertiesPricingCurrencyTotal pricingCurrencyTotal;

  public static final String SERIALIZED_NAME_RESERVATION_ORDER_ID = "reservationOrderId";
  @SerializedName(SERIALIZED_NAME_RESERVATION_ORDER_ID)
  private String reservationOrderId;

  public static final String SERIALIZED_NAME_SKU_DESCRIPTION = "skuDescription";
  @SerializedName(SERIALIZED_NAME_SKU_DESCRIPTION)
  private String skuDescription;

  public static final String SERIALIZED_NAME_SKU_TITLE = "skuTitle";
  @SerializedName(SERIALIZED_NAME_SKU_TITLE)
  private String skuTitle;

  public CalculatePriceResponseProperties() {
  }

  public CalculatePriceResponseProperties billingCurrencyTotal(CalculatePriceResponsePropertiesBillingCurrencyTotal billingCurrencyTotal) {
    this.billingCurrencyTotal = billingCurrencyTotal;
    return this;
  }

  /**
   * Get billingCurrencyTotal
   * @return billingCurrencyTotal
   */
  @javax.annotation.Nullable
  public CalculatePriceResponsePropertiesBillingCurrencyTotal getBillingCurrencyTotal() {
    return billingCurrencyTotal;
  }

  public void setBillingCurrencyTotal(CalculatePriceResponsePropertiesBillingCurrencyTotal billingCurrencyTotal) {
    this.billingCurrencyTotal = billingCurrencyTotal;
  }


  public CalculatePriceResponseProperties isBillingPartnerManaged(Boolean isBillingPartnerManaged) {
    this.isBillingPartnerManaged = isBillingPartnerManaged;
    return this;
  }

  /**
   * True if billing is managed by Microsoft Partner. Used only for CSP accounts.
   * @return isBillingPartnerManaged
   */
  @javax.annotation.Nullable
  public Boolean getIsBillingPartnerManaged() {
    return isBillingPartnerManaged;
  }

  public void setIsBillingPartnerManaged(Boolean isBillingPartnerManaged) {
    this.isBillingPartnerManaged = isBillingPartnerManaged;
  }


  public CalculatePriceResponseProperties paymentSchedule(List<PaymentDetail> paymentSchedule) {
    this.paymentSchedule = paymentSchedule;
    return this;
  }

  public CalculatePriceResponseProperties addPaymentScheduleItem(PaymentDetail paymentScheduleItem) {
    if (this.paymentSchedule == null) {
      this.paymentSchedule = new ArrayList<>();
    }
    this.paymentSchedule.add(paymentScheduleItem);
    return this;
  }

  /**
   * Get paymentSchedule
   * @return paymentSchedule
   */
  @javax.annotation.Nullable
  public List<PaymentDetail> getPaymentSchedule() {
    return paymentSchedule;
  }

  public void setPaymentSchedule(List<PaymentDetail> paymentSchedule) {
    this.paymentSchedule = paymentSchedule;
  }


  public CalculatePriceResponseProperties pricingCurrencyTotal(CalculatePriceResponsePropertiesPricingCurrencyTotal pricingCurrencyTotal) {
    this.pricingCurrencyTotal = pricingCurrencyTotal;
    return this;
  }

  /**
   * Get pricingCurrencyTotal
   * @return pricingCurrencyTotal
   */
  @javax.annotation.Nullable
  public CalculatePriceResponsePropertiesPricingCurrencyTotal getPricingCurrencyTotal() {
    return pricingCurrencyTotal;
  }

  public void setPricingCurrencyTotal(CalculatePriceResponsePropertiesPricingCurrencyTotal pricingCurrencyTotal) {
    this.pricingCurrencyTotal = pricingCurrencyTotal;
  }


  public CalculatePriceResponseProperties reservationOrderId(String reservationOrderId) {
    this.reservationOrderId = reservationOrderId;
    return this;
  }

  /**
   * GUID that represents reservation order that can be placed after calculating price.
   * @return reservationOrderId
   */
  @javax.annotation.Nullable
  public String getReservationOrderId() {
    return reservationOrderId;
  }

  public void setReservationOrderId(String reservationOrderId) {
    this.reservationOrderId = reservationOrderId;
  }


  public CalculatePriceResponseProperties skuDescription(String skuDescription) {
    this.skuDescription = skuDescription;
    return this;
  }

  /**
   * Description of SKU that is being purchased.
   * @return skuDescription
   */
  @javax.annotation.Nullable
  public String getSkuDescription() {
    return skuDescription;
  }

  public void setSkuDescription(String skuDescription) {
    this.skuDescription = skuDescription;
  }


  public CalculatePriceResponseProperties skuTitle(String skuTitle) {
    this.skuTitle = skuTitle;
    return this;
  }

  /**
   * Title of SKU that is being purchased.
   * @return skuTitle
   */
  @javax.annotation.Nullable
  public String getSkuTitle() {
    return skuTitle;
  }

  public void setSkuTitle(String skuTitle) {
    this.skuTitle = skuTitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculatePriceResponseProperties calculatePriceResponseProperties = (CalculatePriceResponseProperties) o;
    return Objects.equals(this.billingCurrencyTotal, calculatePriceResponseProperties.billingCurrencyTotal) &&
        Objects.equals(this.isBillingPartnerManaged, calculatePriceResponseProperties.isBillingPartnerManaged) &&
        Objects.equals(this.paymentSchedule, calculatePriceResponseProperties.paymentSchedule) &&
        Objects.equals(this.pricingCurrencyTotal, calculatePriceResponseProperties.pricingCurrencyTotal) &&
        Objects.equals(this.reservationOrderId, calculatePriceResponseProperties.reservationOrderId) &&
        Objects.equals(this.skuDescription, calculatePriceResponseProperties.skuDescription) &&
        Objects.equals(this.skuTitle, calculatePriceResponseProperties.skuTitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingCurrencyTotal, isBillingPartnerManaged, paymentSchedule, pricingCurrencyTotal, reservationOrderId, skuDescription, skuTitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculatePriceResponseProperties {\n");
    sb.append("    billingCurrencyTotal: ").append(toIndentedString(billingCurrencyTotal)).append("\n");
    sb.append("    isBillingPartnerManaged: ").append(toIndentedString(isBillingPartnerManaged)).append("\n");
    sb.append("    paymentSchedule: ").append(toIndentedString(paymentSchedule)).append("\n");
    sb.append("    pricingCurrencyTotal: ").append(toIndentedString(pricingCurrencyTotal)).append("\n");
    sb.append("    reservationOrderId: ").append(toIndentedString(reservationOrderId)).append("\n");
    sb.append("    skuDescription: ").append(toIndentedString(skuDescription)).append("\n");
    sb.append("    skuTitle: ").append(toIndentedString(skuTitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingCurrencyTotal");
    openapiFields.add("isBillingPartnerManaged");
    openapiFields.add("paymentSchedule");
    openapiFields.add("pricingCurrencyTotal");
    openapiFields.add("reservationOrderId");
    openapiFields.add("skuDescription");
    openapiFields.add("skuTitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CalculatePriceResponseProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CalculatePriceResponseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculatePriceResponseProperties is not found in the empty JSON string", CalculatePriceResponseProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CalculatePriceResponseProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalculatePriceResponseProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `billingCurrencyTotal`
      if (jsonObj.get("billingCurrencyTotal") != null && !jsonObj.get("billingCurrencyTotal").isJsonNull()) {
        CalculatePriceResponsePropertiesBillingCurrencyTotal.validateJsonElement(jsonObj.get("billingCurrencyTotal"));
      }
      if (jsonObj.get("paymentSchedule") != null && !jsonObj.get("paymentSchedule").isJsonNull()) {
        JsonArray jsonArraypaymentSchedule = jsonObj.getAsJsonArray("paymentSchedule");
        if (jsonArraypaymentSchedule != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paymentSchedule").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paymentSchedule` to be an array in the JSON string but got `%s`", jsonObj.get("paymentSchedule").toString()));
          }

          // validate the optional field `paymentSchedule` (array)
          for (int i = 0; i < jsonArraypaymentSchedule.size(); i++) {
            PaymentDetail.validateJsonElement(jsonArraypaymentSchedule.get(i));
          };
        }
      }
      // validate the optional field `pricingCurrencyTotal`
      if (jsonObj.get("pricingCurrencyTotal") != null && !jsonObj.get("pricingCurrencyTotal").isJsonNull()) {
        CalculatePriceResponsePropertiesPricingCurrencyTotal.validateJsonElement(jsonObj.get("pricingCurrencyTotal"));
      }
      if ((jsonObj.get("reservationOrderId") != null && !jsonObj.get("reservationOrderId").isJsonNull()) && !jsonObj.get("reservationOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservationOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservationOrderId").toString()));
      }
      if ((jsonObj.get("skuDescription") != null && !jsonObj.get("skuDescription").isJsonNull()) && !jsonObj.get("skuDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuDescription").toString()));
      }
      if ((jsonObj.get("skuTitle") != null && !jsonObj.get("skuTitle").isJsonNull()) && !jsonObj.get("skuTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuTitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculatePriceResponseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculatePriceResponseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculatePriceResponseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculatePriceResponseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculatePriceResponseProperties>() {
           @Override
           public void write(JsonWriter out, CalculatePriceResponseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculatePriceResponseProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CalculatePriceResponseProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CalculatePriceResponseProperties
   * @throws IOException if the JSON string is invalid with respect to CalculatePriceResponseProperties
   */
  public static CalculatePriceResponseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculatePriceResponseProperties.class);
  }

  /**
   * Convert an instance of CalculatePriceResponseProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

