/*
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.Patch;
import org.openapitools.client.model.ReservationList;
import org.openapitools.client.model.ReservationOrderList;
import org.openapitools.client.model.ReservationOrderResponse;
import org.openapitools.client.model.ReservationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReservationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReservationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReservationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reservationGet
     * @param reservationId Id of the Reservation Item (required)
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param expand Supported value of this query is renewProperties (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get &#x60;Reservation&#x60; details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationGetCall(String reservationId, String reservationOrderId, String apiVersion, String expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}"
            .replace("{" + "reservationId" + "}", localVarApiClient.escapeString(reservationId.toString()))
            .replace("{" + "reservationOrderId" + "}", localVarApiClient.escapeString(reservationOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expand", expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reservationGetValidateBeforeCall(String reservationId, String reservationOrderId, String apiVersion, String expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling reservationGet(Async)");
        }

        // verify the required parameter 'reservationOrderId' is set
        if (reservationOrderId == null) {
            throw new ApiException("Missing the required parameter 'reservationOrderId' when calling reservationGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling reservationGet(Async)");
        }

        return reservationGetCall(reservationId, reservationOrderId, apiVersion, expand, _callback);

    }

    /**
     * Get &#x60;Reservation&#x60; details.
     * Get specific &#x60;Reservation&#x60; details.
     * @param reservationId Id of the Reservation Item (required)
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param expand Supported value of this query is renewProperties (optional)
     * @return ReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get &#x60;Reservation&#x60; details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ReservationResponse reservationGet(String reservationId, String reservationOrderId, String apiVersion, String expand) throws ApiException {
        ApiResponse<ReservationResponse> localVarResp = reservationGetWithHttpInfo(reservationId, reservationOrderId, apiVersion, expand);
        return localVarResp.getData();
    }

    /**
     * Get &#x60;Reservation&#x60; details.
     * Get specific &#x60;Reservation&#x60; details.
     * @param reservationId Id of the Reservation Item (required)
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param expand Supported value of this query is renewProperties (optional)
     * @return ApiResponse&lt;ReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get &#x60;Reservation&#x60; details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationResponse> reservationGetWithHttpInfo(String reservationId, String reservationOrderId, String apiVersion, String expand) throws ApiException {
        okhttp3.Call localVarCall = reservationGetValidateBeforeCall(reservationId, reservationOrderId, apiVersion, expand, null);
        Type localVarReturnType = new TypeToken<ReservationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get &#x60;Reservation&#x60; details. (asynchronously)
     * Get specific &#x60;Reservation&#x60; details.
     * @param reservationId Id of the Reservation Item (required)
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param expand Supported value of this query is renewProperties (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get &#x60;Reservation&#x60; details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationGetAsync(String reservationId, String reservationOrderId, String apiVersion, String expand, final ApiCallback<ReservationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reservationGetValidateBeforeCall(reservationId, reservationOrderId, apiVersion, expand, _callback);
        Type localVarReturnType = new TypeToken<ReservationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reservationList
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List &#x60;Reservation&#x60;s within a single &#x60;ReservationOrder&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationListCall(String reservationOrderId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations"
            .replace("{" + "reservationOrderId" + "}", localVarApiClient.escapeString(reservationOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reservationListValidateBeforeCall(String reservationOrderId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reservationOrderId' is set
        if (reservationOrderId == null) {
            throw new ApiException("Missing the required parameter 'reservationOrderId' when calling reservationList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling reservationList(Async)");
        }

        return reservationListCall(reservationOrderId, apiVersion, _callback);

    }

    /**
     * Get &#x60;Reservation&#x60;s in a given reservation Order
     * List &#x60;Reservation&#x60;s within a single &#x60;ReservationOrder&#x60;.
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @return ReservationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List &#x60;Reservation&#x60;s within a single &#x60;ReservationOrder&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ReservationList reservationList(String reservationOrderId, String apiVersion) throws ApiException {
        ApiResponse<ReservationList> localVarResp = reservationListWithHttpInfo(reservationOrderId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get &#x60;Reservation&#x60;s in a given reservation Order
     * List &#x60;Reservation&#x60;s within a single &#x60;ReservationOrder&#x60;.
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @return ApiResponse&lt;ReservationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List &#x60;Reservation&#x60;s within a single &#x60;ReservationOrder&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationList> reservationListWithHttpInfo(String reservationOrderId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = reservationListValidateBeforeCall(reservationOrderId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ReservationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get &#x60;Reservation&#x60;s in a given reservation Order (asynchronously)
     * List &#x60;Reservation&#x60;s within a single &#x60;ReservationOrder&#x60;.
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List &#x60;Reservation&#x60;s within a single &#x60;ReservationOrder&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationListAsync(String reservationOrderId, String apiVersion, final ApiCallback<ReservationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = reservationListValidateBeforeCall(reservationOrderId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ReservationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reservationListRevisions
     * @param reservationId Id of the Reservation Item (required)
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the revisions for the &#x60;Reservation&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationListRevisionsCall(String reservationId, String reservationOrderId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}/revisions"
            .replace("{" + "reservationId" + "}", localVarApiClient.escapeString(reservationId.toString()))
            .replace("{" + "reservationOrderId" + "}", localVarApiClient.escapeString(reservationOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reservationListRevisionsValidateBeforeCall(String reservationId, String reservationOrderId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling reservationListRevisions(Async)");
        }

        // verify the required parameter 'reservationOrderId' is set
        if (reservationOrderId == null) {
            throw new ApiException("Missing the required parameter 'reservationOrderId' when calling reservationListRevisions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling reservationListRevisions(Async)");
        }

        return reservationListRevisionsCall(reservationId, reservationOrderId, apiVersion, _callback);

    }

    /**
     * Get &#x60;Reservation&#x60; revisions.
     * List of all the revisions for the &#x60;Reservation&#x60;.
     * @param reservationId Id of the Reservation Item (required)
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @return ReservationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the revisions for the &#x60;Reservation&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ReservationList reservationListRevisions(String reservationId, String reservationOrderId, String apiVersion) throws ApiException {
        ApiResponse<ReservationList> localVarResp = reservationListRevisionsWithHttpInfo(reservationId, reservationOrderId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get &#x60;Reservation&#x60; revisions.
     * List of all the revisions for the &#x60;Reservation&#x60;.
     * @param reservationId Id of the Reservation Item (required)
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @return ApiResponse&lt;ReservationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the revisions for the &#x60;Reservation&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationList> reservationListRevisionsWithHttpInfo(String reservationId, String reservationOrderId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = reservationListRevisionsValidateBeforeCall(reservationId, reservationOrderId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ReservationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get &#x60;Reservation&#x60; revisions. (asynchronously)
     * List of all the revisions for the &#x60;Reservation&#x60;.
     * @param reservationId Id of the Reservation Item (required)
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the revisions for the &#x60;Reservation&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationListRevisionsAsync(String reservationId, String reservationOrderId, String apiVersion, final ApiCallback<ReservationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = reservationListRevisionsValidateBeforeCall(reservationId, reservationOrderId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ReservationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reservationOrderGet
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param $expand May be used to expand the planInformation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the details of the &#x60;ReservationOrder&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationOrderGetCall(String reservationOrderId, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}"
            .replace("{" + "reservationOrderId" + "}", localVarApiClient.escapeString(reservationOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reservationOrderGetValidateBeforeCall(String reservationOrderId, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reservationOrderId' is set
        if (reservationOrderId == null) {
            throw new ApiException("Missing the required parameter 'reservationOrderId' when calling reservationOrderGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling reservationOrderGet(Async)");
        }

        return reservationOrderGetCall(reservationOrderId, apiVersion, $expand, _callback);

    }

    /**
     * Get a specific &#x60;ReservationOrder&#x60;.
     * Get the details of the &#x60;ReservationOrder&#x60;.
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param $expand May be used to expand the planInformation. (optional)
     * @return ReservationOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the details of the &#x60;ReservationOrder&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ReservationOrderResponse reservationOrderGet(String reservationOrderId, String apiVersion, String $expand) throws ApiException {
        ApiResponse<ReservationOrderResponse> localVarResp = reservationOrderGetWithHttpInfo(reservationOrderId, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * Get a specific &#x60;ReservationOrder&#x60;.
     * Get the details of the &#x60;ReservationOrder&#x60;.
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param $expand May be used to expand the planInformation. (optional)
     * @return ApiResponse&lt;ReservationOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the details of the &#x60;ReservationOrder&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationOrderResponse> reservationOrderGetWithHttpInfo(String reservationOrderId, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = reservationOrderGetValidateBeforeCall(reservationOrderId, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<ReservationOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific &#x60;ReservationOrder&#x60;. (asynchronously)
     * Get the details of the &#x60;ReservationOrder&#x60;.
     * @param reservationOrderId Order Id of the reservation (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param $expand May be used to expand the planInformation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the details of the &#x60;ReservationOrder&#x60;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationOrderGetAsync(String reservationOrderId, String apiVersion, String $expand, final ApiCallback<ReservationOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reservationOrderGetValidateBeforeCall(reservationOrderId, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<ReservationOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reservationOrderList
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of &#x60;ReservationOrder&#x60;s </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationOrderListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Capacity/reservationOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reservationOrderListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling reservationOrderList(Async)");
        }

        return reservationOrderListCall(apiVersion, _callback);

    }

    /**
     * Get all &#x60;ReservationOrder&#x60;s.
     * List of all the &#x60;ReservationOrder&#x60;s that the user has access to in the current tenant.
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @return ReservationOrderList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of &#x60;ReservationOrder&#x60;s </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ReservationOrderList reservationOrderList(String apiVersion) throws ApiException {
        ApiResponse<ReservationOrderList> localVarResp = reservationOrderListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all &#x60;ReservationOrder&#x60;s.
     * List of all the &#x60;ReservationOrder&#x60;s that the user has access to in the current tenant.
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @return ApiResponse&lt;ReservationOrderList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of &#x60;ReservationOrder&#x60;s </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationOrderList> reservationOrderListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = reservationOrderListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<ReservationOrderList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all &#x60;ReservationOrder&#x60;s. (asynchronously)
     * List of all the &#x60;ReservationOrder&#x60;s that the user has access to in the current tenant.
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of &#x60;ReservationOrder&#x60;s </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationOrderListAsync(String apiVersion, final ApiCallback<ReservationOrderList> _callback) throws ApiException {

        okhttp3.Call localVarCall = reservationOrderListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ReservationOrderList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reservationUpdate
     * @param reservationOrderId Order Id of the reservation (required)
     * @param reservationId Id of the Reservation Item (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param parameters Information needed to patch a reservation item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated &#x60;Reservation&#x60;. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request is accepted and is being processed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationUpdateCall(String reservationOrderId, String reservationId, String apiVersion, Patch parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}"
            .replace("{" + "reservationOrderId" + "}", localVarApiClient.escapeString(reservationOrderId.toString()))
            .replace("{" + "reservationId" + "}", localVarApiClient.escapeString(reservationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reservationUpdateValidateBeforeCall(String reservationOrderId, String reservationId, String apiVersion, Patch parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reservationOrderId' is set
        if (reservationOrderId == null) {
            throw new ApiException("Missing the required parameter 'reservationOrderId' when calling reservationUpdate(Async)");
        }

        // verify the required parameter 'reservationId' is set
        if (reservationId == null) {
            throw new ApiException("Missing the required parameter 'reservationId' when calling reservationUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling reservationUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling reservationUpdate(Async)");
        }

        return reservationUpdateCall(reservationOrderId, reservationId, apiVersion, parameters, _callback);

    }

    /**
     * Updates a &#x60;Reservation&#x60;.
     * Updates the applied scopes of the &#x60;Reservation&#x60;.
     * @param reservationOrderId Order Id of the reservation (required)
     * @param reservationId Id of the Reservation Item (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param parameters Information needed to patch a reservation item (required)
     * @return ReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated &#x60;Reservation&#x60;. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request is accepted and is being processed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ReservationResponse reservationUpdate(String reservationOrderId, String reservationId, String apiVersion, Patch parameters) throws ApiException {
        ApiResponse<ReservationResponse> localVarResp = reservationUpdateWithHttpInfo(reservationOrderId, reservationId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Updates a &#x60;Reservation&#x60;.
     * Updates the applied scopes of the &#x60;Reservation&#x60;.
     * @param reservationOrderId Order Id of the reservation (required)
     * @param reservationId Id of the Reservation Item (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param parameters Information needed to patch a reservation item (required)
     * @return ApiResponse&lt;ReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated &#x60;Reservation&#x60;. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request is accepted and is being processed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservationResponse> reservationUpdateWithHttpInfo(String reservationOrderId, String reservationId, String apiVersion, Patch parameters) throws ApiException {
        okhttp3.Call localVarCall = reservationUpdateValidateBeforeCall(reservationOrderId, reservationId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ReservationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a &#x60;Reservation&#x60;. (asynchronously)
     * Updates the applied scopes of the &#x60;Reservation&#x60;.
     * @param reservationOrderId Order Id of the reservation (required)
     * @param reservationId Id of the Reservation Item (required)
     * @param apiVersion Supported version for this document is 2019-04-01 (required)
     * @param parameters Information needed to patch a reservation item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated &#x60;Reservation&#x60;. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request is accepted and is being processed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reservationUpdateAsync(String reservationOrderId, String reservationId, String apiVersion, Patch parameters, final ApiCallback<ReservationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reservationUpdateValidateBeforeCall(reservationOrderId, reservationId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ReservationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
