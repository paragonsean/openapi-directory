/*
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PaymentDetail;
import org.openapitools.client.model.Price;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information describing the type of billing plan for this reservation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:31.995135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationOrderBillingPlanInformation {
  public static final String SERIALIZED_NAME_NEXT_PAYMENT_DUE_DATE = "nextPaymentDueDate";
  @SerializedName(SERIALIZED_NAME_NEXT_PAYMENT_DUE_DATE)
  private LocalDate nextPaymentDueDate;

  public static final String SERIALIZED_NAME_PRICING_CURRENCY_TOTAL = "pricingCurrencyTotal";
  @SerializedName(SERIALIZED_NAME_PRICING_CURRENCY_TOTAL)
  private Price pricingCurrencyTotal;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<PaymentDetail> transactions = new ArrayList<>();

  public ReservationOrderBillingPlanInformation() {
  }

  public ReservationOrderBillingPlanInformation nextPaymentDueDate(LocalDate nextPaymentDueDate) {
    this.nextPaymentDueDate = nextPaymentDueDate;
    return this;
  }

  /**
   * For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.
   * @return nextPaymentDueDate
   */
  @javax.annotation.Nullable
  public LocalDate getNextPaymentDueDate() {
    return nextPaymentDueDate;
  }

  public void setNextPaymentDueDate(LocalDate nextPaymentDueDate) {
    this.nextPaymentDueDate = nextPaymentDueDate;
  }


  public ReservationOrderBillingPlanInformation pricingCurrencyTotal(Price pricingCurrencyTotal) {
    this.pricingCurrencyTotal = pricingCurrencyTotal;
    return this;
  }

  /**
   * Get pricingCurrencyTotal
   * @return pricingCurrencyTotal
   */
  @javax.annotation.Nullable
  public Price getPricingCurrencyTotal() {
    return pricingCurrencyTotal;
  }

  public void setPricingCurrencyTotal(Price pricingCurrencyTotal) {
    this.pricingCurrencyTotal = pricingCurrencyTotal;
  }


  public ReservationOrderBillingPlanInformation startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Date when the billing plan has started.
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public ReservationOrderBillingPlanInformation transactions(List<PaymentDetail> transactions) {
    this.transactions = transactions;
    return this;
  }

  public ReservationOrderBillingPlanInformation addTransactionsItem(PaymentDetail transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

  /**
   * Get transactions
   * @return transactions
   */
  @javax.annotation.Nullable
  public List<PaymentDetail> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<PaymentDetail> transactions) {
    this.transactions = transactions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationOrderBillingPlanInformation reservationOrderBillingPlanInformation = (ReservationOrderBillingPlanInformation) o;
    return Objects.equals(this.nextPaymentDueDate, reservationOrderBillingPlanInformation.nextPaymentDueDate) &&
        Objects.equals(this.pricingCurrencyTotal, reservationOrderBillingPlanInformation.pricingCurrencyTotal) &&
        Objects.equals(this.startDate, reservationOrderBillingPlanInformation.startDate) &&
        Objects.equals(this.transactions, reservationOrderBillingPlanInformation.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextPaymentDueDate, pricingCurrencyTotal, startDate, transactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationOrderBillingPlanInformation {\n");
    sb.append("    nextPaymentDueDate: ").append(toIndentedString(nextPaymentDueDate)).append("\n");
    sb.append("    pricingCurrencyTotal: ").append(toIndentedString(pricingCurrencyTotal)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nextPaymentDueDate");
    openapiFields.add("pricingCurrencyTotal");
    openapiFields.add("startDate");
    openapiFields.add("transactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationOrderBillingPlanInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationOrderBillingPlanInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationOrderBillingPlanInformation is not found in the empty JSON string", ReservationOrderBillingPlanInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationOrderBillingPlanInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationOrderBillingPlanInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `pricingCurrencyTotal`
      if (jsonObj.get("pricingCurrencyTotal") != null && !jsonObj.get("pricingCurrencyTotal").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("pricingCurrencyTotal"));
      }
      if (jsonObj.get("transactions") != null && !jsonObj.get("transactions").isJsonNull()) {
        JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("transactions");
        if (jsonArraytransactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transactions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transactions` to be an array in the JSON string but got `%s`", jsonObj.get("transactions").toString()));
          }

          // validate the optional field `transactions` (array)
          for (int i = 0; i < jsonArraytransactions.size(); i++) {
            PaymentDetail.validateJsonElement(jsonArraytransactions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationOrderBillingPlanInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationOrderBillingPlanInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationOrderBillingPlanInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationOrderBillingPlanInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationOrderBillingPlanInformation>() {
           @Override
           public void write(JsonWriter out, ReservationOrderBillingPlanInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationOrderBillingPlanInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationOrderBillingPlanInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationOrderBillingPlanInformation
   * @throws IOException if the JSON string is invalid with respect to ReservationOrderBillingPlanInformation
   */
  public static ReservationOrderBillingPlanInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationOrderBillingPlanInformation.class);
  }

  /**
   * Convert an instance of ReservationOrderBillingPlanInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

