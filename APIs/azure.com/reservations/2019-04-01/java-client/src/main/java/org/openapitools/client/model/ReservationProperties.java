/*
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppliedScopeType;
import org.openapitools.client.model.ExtendedStatusInfo;
import org.openapitools.client.model.InstanceFlexibility;
import org.openapitools.client.model.RenewPropertiesResponse;
import org.openapitools.client.model.ReservationBillingPlan;
import org.openapitools.client.model.ReservationMergeProperties;
import org.openapitools.client.model.ReservationSplitProperties;
import org.openapitools.client.model.ReservationTerm;
import org.openapitools.client.model.ReservedResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReservationProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:31.995135-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationProperties {
  public static final String SERIALIZED_NAME_APPLIED_SCOPE_TYPE = "appliedScopeType";
  @SerializedName(SERIALIZED_NAME_APPLIED_SCOPE_TYPE)
  private AppliedScopeType appliedScopeType;

  public static final String SERIALIZED_NAME_APPLIED_SCOPES = "appliedScopes";
  @SerializedName(SERIALIZED_NAME_APPLIED_SCOPES)
  private List<String> appliedScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BILLING_PLAN = "billingPlan";
  @SerializedName(SERIALIZED_NAME_BILLING_PLAN)
  private ReservationBillingPlan billingPlan;

  public static final String SERIALIZED_NAME_BILLING_SCOPE_ID = "billingScopeId";
  @SerializedName(SERIALIZED_NAME_BILLING_SCOPE_ID)
  private String billingScopeId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE_TIME = "effectiveDateTime";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE_TIME)
  private OffsetDateTime effectiveDateTime;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private LocalDate expiryDate;

  public static final String SERIALIZED_NAME_EXTENDED_STATUS_INFO = "extendedStatusInfo";
  @SerializedName(SERIALIZED_NAME_EXTENDED_STATUS_INFO)
  private ExtendedStatusInfo extendedStatusInfo;

  public static final String SERIALIZED_NAME_INSTANCE_FLEXIBILITY = "instanceFlexibility";
  @SerializedName(SERIALIZED_NAME_INSTANCE_FLEXIBILITY)
  private InstanceFlexibility instanceFlexibility;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private OffsetDateTime lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_MERGE_PROPERTIES = "mergeProperties";
  @SerializedName(SERIALIZED_NAME_MERGE_PROPERTIES)
  private ReservationMergeProperties mergeProperties;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity;

  public static final String SERIALIZED_NAME_RENEW = "renew";
  @SerializedName(SERIALIZED_NAME_RENEW)
  private Boolean renew = false;

  public static final String SERIALIZED_NAME_RENEW_DESTINATION = "renewDestination";
  @SerializedName(SERIALIZED_NAME_RENEW_DESTINATION)
  private String renewDestination;

  public static final String SERIALIZED_NAME_RENEW_PROPERTIES = "renewProperties";
  @SerializedName(SERIALIZED_NAME_RENEW_PROPERTIES)
  private RenewPropertiesResponse renewProperties;

  public static final String SERIALIZED_NAME_RENEW_SOURCE = "renewSource";
  @SerializedName(SERIALIZED_NAME_RENEW_SOURCE)
  private String renewSource;

  public static final String SERIALIZED_NAME_RESERVED_RESOURCE_TYPE = "reservedResourceType";
  @SerializedName(SERIALIZED_NAME_RESERVED_RESOURCE_TYPE)
  private ReservedResourceType reservedResourceType;

  public static final String SERIALIZED_NAME_SKU_DESCRIPTION = "skuDescription";
  @SerializedName(SERIALIZED_NAME_SKU_DESCRIPTION)
  private String skuDescription;

  public static final String SERIALIZED_NAME_SPLIT_PROPERTIES = "splitProperties";
  @SerializedName(SERIALIZED_NAME_SPLIT_PROPERTIES)
  private ReservationSplitProperties splitProperties;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private ReservationTerm term;

  public ReservationProperties() {
  }

  public ReservationProperties(
     OffsetDateTime lastUpdatedDateTime
  ) {
    this();
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }

  public ReservationProperties appliedScopeType(AppliedScopeType appliedScopeType) {
    this.appliedScopeType = appliedScopeType;
    return this;
  }

  /**
   * Get appliedScopeType
   * @return appliedScopeType
   */
  @javax.annotation.Nullable
  public AppliedScopeType getAppliedScopeType() {
    return appliedScopeType;
  }

  public void setAppliedScopeType(AppliedScopeType appliedScopeType) {
    this.appliedScopeType = appliedScopeType;
  }


  public ReservationProperties appliedScopes(List<String> appliedScopes) {
    this.appliedScopes = appliedScopes;
    return this;
  }

  public ReservationProperties addAppliedScopesItem(String appliedScopesItem) {
    if (this.appliedScopes == null) {
      this.appliedScopes = new ArrayList<>();
    }
    this.appliedScopes.add(appliedScopesItem);
    return this;
  }

  /**
   * List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.
   * @return appliedScopes
   */
  @javax.annotation.Nullable
  public List<String> getAppliedScopes() {
    return appliedScopes;
  }

  public void setAppliedScopes(List<String> appliedScopes) {
    this.appliedScopes = appliedScopes;
  }


  public ReservationProperties billingPlan(ReservationBillingPlan billingPlan) {
    this.billingPlan = billingPlan;
    return this;
  }

  /**
   * Get billingPlan
   * @return billingPlan
   */
  @javax.annotation.Nullable
  public ReservationBillingPlan getBillingPlan() {
    return billingPlan;
  }

  public void setBillingPlan(ReservationBillingPlan billingPlan) {
    this.billingPlan = billingPlan;
  }


  public ReservationProperties billingScopeId(String billingScopeId) {
    this.billingScopeId = billingScopeId;
    return this;
  }

  /**
   * Subscription that will be charged for purchasing Reservation
   * @return billingScopeId
   */
  @javax.annotation.Nullable
  public String getBillingScopeId() {
    return billingScopeId;
  }

  public void setBillingScopeId(String billingScopeId) {
    this.billingScopeId = billingScopeId;
  }


  public ReservationProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Friendly name for user to easily identify the reservation
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ReservationProperties effectiveDateTime(OffsetDateTime effectiveDateTime) {
    this.effectiveDateTime = effectiveDateTime;
    return this;
  }

  /**
   * DateTime of the Reservation starting when this version is effective from.
   * @return effectiveDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEffectiveDateTime() {
    return effectiveDateTime;
  }

  public void setEffectiveDateTime(OffsetDateTime effectiveDateTime) {
    this.effectiveDateTime = effectiveDateTime;
  }


  public ReservationProperties expiryDate(LocalDate expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * This is the date when the Reservation will expire.
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public LocalDate getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(LocalDate expiryDate) {
    this.expiryDate = expiryDate;
  }


  public ReservationProperties extendedStatusInfo(ExtendedStatusInfo extendedStatusInfo) {
    this.extendedStatusInfo = extendedStatusInfo;
    return this;
  }

  /**
   * Get extendedStatusInfo
   * @return extendedStatusInfo
   */
  @javax.annotation.Nullable
  public ExtendedStatusInfo getExtendedStatusInfo() {
    return extendedStatusInfo;
  }

  public void setExtendedStatusInfo(ExtendedStatusInfo extendedStatusInfo) {
    this.extendedStatusInfo = extendedStatusInfo;
  }


  public ReservationProperties instanceFlexibility(InstanceFlexibility instanceFlexibility) {
    this.instanceFlexibility = instanceFlexibility;
    return this;
  }

  /**
   * Get instanceFlexibility
   * @return instanceFlexibility
   */
  @javax.annotation.Nullable
  public InstanceFlexibility getInstanceFlexibility() {
    return instanceFlexibility;
  }

  public void setInstanceFlexibility(InstanceFlexibility instanceFlexibility) {
    this.instanceFlexibility = instanceFlexibility;
  }


  /**
   * DateTime of the last time the Reservation was updated.
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }



  public ReservationProperties mergeProperties(ReservationMergeProperties mergeProperties) {
    this.mergeProperties = mergeProperties;
    return this;
  }

  /**
   * Get mergeProperties
   * @return mergeProperties
   */
  @javax.annotation.Nullable
  public ReservationMergeProperties getMergeProperties() {
    return mergeProperties;
  }

  public void setMergeProperties(ReservationMergeProperties mergeProperties) {
    this.mergeProperties = mergeProperties;
  }


  public ReservationProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Current state of the reservation.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ReservationProperties quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity of the SKUs that are part of the Reservation. Must be greater than zero.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }


  public ReservationProperties renew(Boolean renew) {
    this.renew = renew;
    return this;
  }

  /**
   * Setting this to true will automatically purchase a new reservation on the expiration date time.
   * @return renew
   */
  @javax.annotation.Nullable
  public Boolean getRenew() {
    return renew;
  }

  public void setRenew(Boolean renew) {
    this.renew = renew;
  }


  public ReservationProperties renewDestination(String renewDestination) {
    this.renewDestination = renewDestination;
    return this;
  }

  /**
   * Reservation Id of the reservation which is purchased because of renew. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
   * @return renewDestination
   */
  @javax.annotation.Nullable
  public String getRenewDestination() {
    return renewDestination;
  }

  public void setRenewDestination(String renewDestination) {
    this.renewDestination = renewDestination;
  }


  public ReservationProperties renewProperties(RenewPropertiesResponse renewProperties) {
    this.renewProperties = renewProperties;
    return this;
  }

  /**
   * Get renewProperties
   * @return renewProperties
   */
  @javax.annotation.Nullable
  public RenewPropertiesResponse getRenewProperties() {
    return renewProperties;
  }

  public void setRenewProperties(RenewPropertiesResponse renewProperties) {
    this.renewProperties = renewProperties;
  }


  public ReservationProperties renewSource(String renewSource) {
    this.renewSource = renewSource;
    return this;
  }

  /**
   * Reservation Id of the reservation from which this reservation is renewed. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}.
   * @return renewSource
   */
  @javax.annotation.Nullable
  public String getRenewSource() {
    return renewSource;
  }

  public void setRenewSource(String renewSource) {
    this.renewSource = renewSource;
  }


  public ReservationProperties reservedResourceType(ReservedResourceType reservedResourceType) {
    this.reservedResourceType = reservedResourceType;
    return this;
  }

  /**
   * Get reservedResourceType
   * @return reservedResourceType
   */
  @javax.annotation.Nullable
  public ReservedResourceType getReservedResourceType() {
    return reservedResourceType;
  }

  public void setReservedResourceType(ReservedResourceType reservedResourceType) {
    this.reservedResourceType = reservedResourceType;
  }


  public ReservationProperties skuDescription(String skuDescription) {
    this.skuDescription = skuDescription;
    return this;
  }

  /**
   * Description of the SKU in english.
   * @return skuDescription
   */
  @javax.annotation.Nullable
  public String getSkuDescription() {
    return skuDescription;
  }

  public void setSkuDescription(String skuDescription) {
    this.skuDescription = skuDescription;
  }


  public ReservationProperties splitProperties(ReservationSplitProperties splitProperties) {
    this.splitProperties = splitProperties;
    return this;
  }

  /**
   * Get splitProperties
   * @return splitProperties
   */
  @javax.annotation.Nullable
  public ReservationSplitProperties getSplitProperties() {
    return splitProperties;
  }

  public void setSplitProperties(ReservationSplitProperties splitProperties) {
    this.splitProperties = splitProperties;
  }


  public ReservationProperties term(ReservationTerm term) {
    this.term = term;
    return this;
  }

  /**
   * Get term
   * @return term
   */
  @javax.annotation.Nullable
  public ReservationTerm getTerm() {
    return term;
  }

  public void setTerm(ReservationTerm term) {
    this.term = term;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationProperties reservationProperties = (ReservationProperties) o;
    return Objects.equals(this.appliedScopeType, reservationProperties.appliedScopeType) &&
        Objects.equals(this.appliedScopes, reservationProperties.appliedScopes) &&
        Objects.equals(this.billingPlan, reservationProperties.billingPlan) &&
        Objects.equals(this.billingScopeId, reservationProperties.billingScopeId) &&
        Objects.equals(this.displayName, reservationProperties.displayName) &&
        Objects.equals(this.effectiveDateTime, reservationProperties.effectiveDateTime) &&
        Objects.equals(this.expiryDate, reservationProperties.expiryDate) &&
        Objects.equals(this.extendedStatusInfo, reservationProperties.extendedStatusInfo) &&
        Objects.equals(this.instanceFlexibility, reservationProperties.instanceFlexibility) &&
        Objects.equals(this.lastUpdatedDateTime, reservationProperties.lastUpdatedDateTime) &&
        Objects.equals(this.mergeProperties, reservationProperties.mergeProperties) &&
        Objects.equals(this.provisioningState, reservationProperties.provisioningState) &&
        Objects.equals(this.quantity, reservationProperties.quantity) &&
        Objects.equals(this.renew, reservationProperties.renew) &&
        Objects.equals(this.renewDestination, reservationProperties.renewDestination) &&
        Objects.equals(this.renewProperties, reservationProperties.renewProperties) &&
        Objects.equals(this.renewSource, reservationProperties.renewSource) &&
        Objects.equals(this.reservedResourceType, reservationProperties.reservedResourceType) &&
        Objects.equals(this.skuDescription, reservationProperties.skuDescription) &&
        Objects.equals(this.splitProperties, reservationProperties.splitProperties) &&
        Objects.equals(this.term, reservationProperties.term);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedScopeType, appliedScopes, billingPlan, billingScopeId, displayName, effectiveDateTime, expiryDate, extendedStatusInfo, instanceFlexibility, lastUpdatedDateTime, mergeProperties, provisioningState, quantity, renew, renewDestination, renewProperties, renewSource, reservedResourceType, skuDescription, splitProperties, term);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationProperties {\n");
    sb.append("    appliedScopeType: ").append(toIndentedString(appliedScopeType)).append("\n");
    sb.append("    appliedScopes: ").append(toIndentedString(appliedScopes)).append("\n");
    sb.append("    billingPlan: ").append(toIndentedString(billingPlan)).append("\n");
    sb.append("    billingScopeId: ").append(toIndentedString(billingScopeId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    effectiveDateTime: ").append(toIndentedString(effectiveDateTime)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    extendedStatusInfo: ").append(toIndentedString(extendedStatusInfo)).append("\n");
    sb.append("    instanceFlexibility: ").append(toIndentedString(instanceFlexibility)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    mergeProperties: ").append(toIndentedString(mergeProperties)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    renew: ").append(toIndentedString(renew)).append("\n");
    sb.append("    renewDestination: ").append(toIndentedString(renewDestination)).append("\n");
    sb.append("    renewProperties: ").append(toIndentedString(renewProperties)).append("\n");
    sb.append("    renewSource: ").append(toIndentedString(renewSource)).append("\n");
    sb.append("    reservedResourceType: ").append(toIndentedString(reservedResourceType)).append("\n");
    sb.append("    skuDescription: ").append(toIndentedString(skuDescription)).append("\n");
    sb.append("    splitProperties: ").append(toIndentedString(splitProperties)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appliedScopeType");
    openapiFields.add("appliedScopes");
    openapiFields.add("billingPlan");
    openapiFields.add("billingScopeId");
    openapiFields.add("displayName");
    openapiFields.add("effectiveDateTime");
    openapiFields.add("expiryDate");
    openapiFields.add("extendedStatusInfo");
    openapiFields.add("instanceFlexibility");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("mergeProperties");
    openapiFields.add("provisioningState");
    openapiFields.add("quantity");
    openapiFields.add("renew");
    openapiFields.add("renewDestination");
    openapiFields.add("renewProperties");
    openapiFields.add("renewSource");
    openapiFields.add("reservedResourceType");
    openapiFields.add("skuDescription");
    openapiFields.add("splitProperties");
    openapiFields.add("term");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationProperties is not found in the empty JSON string", ReservationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appliedScopeType`
      if (jsonObj.get("appliedScopeType") != null && !jsonObj.get("appliedScopeType").isJsonNull()) {
        AppliedScopeType.validateJsonElement(jsonObj.get("appliedScopeType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("appliedScopes") != null && !jsonObj.get("appliedScopes").isJsonNull() && !jsonObj.get("appliedScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedScopes` to be an array in the JSON string but got `%s`", jsonObj.get("appliedScopes").toString()));
      }
      // validate the optional field `billingPlan`
      if (jsonObj.get("billingPlan") != null && !jsonObj.get("billingPlan").isJsonNull()) {
        ReservationBillingPlan.validateJsonElement(jsonObj.get("billingPlan"));
      }
      if ((jsonObj.get("billingScopeId") != null && !jsonObj.get("billingScopeId").isJsonNull()) && !jsonObj.get("billingScopeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingScopeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingScopeId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `extendedStatusInfo`
      if (jsonObj.get("extendedStatusInfo") != null && !jsonObj.get("extendedStatusInfo").isJsonNull()) {
        ExtendedStatusInfo.validateJsonElement(jsonObj.get("extendedStatusInfo"));
      }
      // validate the optional field `instanceFlexibility`
      if (jsonObj.get("instanceFlexibility") != null && !jsonObj.get("instanceFlexibility").isJsonNull()) {
        InstanceFlexibility.validateJsonElement(jsonObj.get("instanceFlexibility"));
      }
      // validate the optional field `mergeProperties`
      if (jsonObj.get("mergeProperties") != null && !jsonObj.get("mergeProperties").isJsonNull()) {
        ReservationMergeProperties.validateJsonElement(jsonObj.get("mergeProperties"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("renewDestination") != null && !jsonObj.get("renewDestination").isJsonNull()) && !jsonObj.get("renewDestination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renewDestination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renewDestination").toString()));
      }
      // validate the optional field `renewProperties`
      if (jsonObj.get("renewProperties") != null && !jsonObj.get("renewProperties").isJsonNull()) {
        RenewPropertiesResponse.validateJsonElement(jsonObj.get("renewProperties"));
      }
      if ((jsonObj.get("renewSource") != null && !jsonObj.get("renewSource").isJsonNull()) && !jsonObj.get("renewSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renewSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renewSource").toString()));
      }
      // validate the optional field `reservedResourceType`
      if (jsonObj.get("reservedResourceType") != null && !jsonObj.get("reservedResourceType").isJsonNull()) {
        ReservedResourceType.validateJsonElement(jsonObj.get("reservedResourceType"));
      }
      if ((jsonObj.get("skuDescription") != null && !jsonObj.get("skuDescription").isJsonNull()) && !jsonObj.get("skuDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuDescription").toString()));
      }
      // validate the optional field `splitProperties`
      if (jsonObj.get("splitProperties") != null && !jsonObj.get("splitProperties").isJsonNull()) {
        ReservationSplitProperties.validateJsonElement(jsonObj.get("splitProperties"));
      }
      // validate the optional field `term`
      if (jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) {
        ReservationTerm.validateJsonElement(jsonObj.get("term"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationProperties>() {
           @Override
           public void write(JsonWriter out, ReservationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationProperties
   * @throws IOException if the JSON string is invalid with respect to ReservationProperties
   */
  public static ReservationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationProperties.class);
  }

  /**
   * Convert an instance of ReservationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

