# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_status_info import ExtendedStatusInfo
from openapi_server.models.payment_status import PaymentStatus
from openapi_server.models.price import Price
from openapi_server import util


class PaymentDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_account: str=None, billing_currency_total: Price=None, due_date: date=None, extended_status_info: ExtendedStatusInfo=None, payment_date: date=None, pricing_currency_total: Price=None, status: PaymentStatus=None):
        """PaymentDetail - a model defined in OpenAPI

        :param billing_account: The billing_account of this PaymentDetail.
        :param billing_currency_total: The billing_currency_total of this PaymentDetail.
        :param due_date: The due_date of this PaymentDetail.
        :param extended_status_info: The extended_status_info of this PaymentDetail.
        :param payment_date: The payment_date of this PaymentDetail.
        :param pricing_currency_total: The pricing_currency_total of this PaymentDetail.
        :param status: The status of this PaymentDetail.
        """
        self.openapi_types = {
            'billing_account': str,
            'billing_currency_total': Price,
            'due_date': date,
            'extended_status_info': ExtendedStatusInfo,
            'payment_date': date,
            'pricing_currency_total': Price,
            'status': PaymentStatus
        }

        self.attribute_map = {
            'billing_account': 'billingAccount',
            'billing_currency_total': 'billingCurrencyTotal',
            'due_date': 'dueDate',
            'extended_status_info': 'extendedStatusInfo',
            'payment_date': 'paymentDate',
            'pricing_currency_total': 'pricingCurrencyTotal',
            'status': 'status'
        }

        self._billing_account = billing_account
        self._billing_currency_total = billing_currency_total
        self._due_date = due_date
        self._extended_status_info = extended_status_info
        self._payment_date = payment_date
        self._pricing_currency_total = pricing_currency_total
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentDetail of this PaymentDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_account(self):
        """Gets the billing_account of this PaymentDetail.

        Shows the Account that is charged for this payment.

        :return: The billing_account of this PaymentDetail.
        :rtype: str
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this PaymentDetail.

        Shows the Account that is charged for this payment.

        :param billing_account: The billing_account of this PaymentDetail.
        :type billing_account: str
        """

        self._billing_account = billing_account

    @property
    def billing_currency_total(self):
        """Gets the billing_currency_total of this PaymentDetail.


        :return: The billing_currency_total of this PaymentDetail.
        :rtype: Price
        """
        return self._billing_currency_total

    @billing_currency_total.setter
    def billing_currency_total(self, billing_currency_total):
        """Sets the billing_currency_total of this PaymentDetail.


        :param billing_currency_total: The billing_currency_total of this PaymentDetail.
        :type billing_currency_total: Price
        """

        self._billing_currency_total = billing_currency_total

    @property
    def due_date(self):
        """Gets the due_date of this PaymentDetail.

        Date when the payment needs to be done.

        :return: The due_date of this PaymentDetail.
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this PaymentDetail.

        Date when the payment needs to be done.

        :param due_date: The due_date of this PaymentDetail.
        :type due_date: date
        """

        self._due_date = due_date

    @property
    def extended_status_info(self):
        """Gets the extended_status_info of this PaymentDetail.


        :return: The extended_status_info of this PaymentDetail.
        :rtype: ExtendedStatusInfo
        """
        return self._extended_status_info

    @extended_status_info.setter
    def extended_status_info(self, extended_status_info):
        """Sets the extended_status_info of this PaymentDetail.


        :param extended_status_info: The extended_status_info of this PaymentDetail.
        :type extended_status_info: ExtendedStatusInfo
        """

        self._extended_status_info = extended_status_info

    @property
    def payment_date(self):
        """Gets the payment_date of this PaymentDetail.

        Date when the transaction is completed. Is null when it is scheduled.

        :return: The payment_date of this PaymentDetail.
        :rtype: date
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PaymentDetail.

        Date when the transaction is completed. Is null when it is scheduled.

        :param payment_date: The payment_date of this PaymentDetail.
        :type payment_date: date
        """

        self._payment_date = payment_date

    @property
    def pricing_currency_total(self):
        """Gets the pricing_currency_total of this PaymentDetail.


        :return: The pricing_currency_total of this PaymentDetail.
        :rtype: Price
        """
        return self._pricing_currency_total

    @pricing_currency_total.setter
    def pricing_currency_total(self, pricing_currency_total):
        """Sets the pricing_currency_total of this PaymentDetail.


        :param pricing_currency_total: The pricing_currency_total of this PaymentDetail.
        :type pricing_currency_total: Price
        """

        self._pricing_currency_total = pricing_currency_total

    @property
    def status(self):
        """Gets the status of this PaymentDetail.


        :return: The status of this PaymentDetail.
        :rtype: PaymentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentDetail.


        :param status: The status of this PaymentDetail.
        :type status: PaymentStatus
        """

        self._status = status
