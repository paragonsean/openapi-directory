# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_detail import PaymentDetail
from openapi_server.models.price import Price
from openapi_server import util


class ReservationOrderBillingPlanInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_payment_due_date: date=None, pricing_currency_total: Price=None, start_date: date=None, transactions: List[PaymentDetail]=None):
        """ReservationOrderBillingPlanInformation - a model defined in OpenAPI

        :param next_payment_due_date: The next_payment_due_date of this ReservationOrderBillingPlanInformation.
        :param pricing_currency_total: The pricing_currency_total of this ReservationOrderBillingPlanInformation.
        :param start_date: The start_date of this ReservationOrderBillingPlanInformation.
        :param transactions: The transactions of this ReservationOrderBillingPlanInformation.
        """
        self.openapi_types = {
            'next_payment_due_date': date,
            'pricing_currency_total': Price,
            'start_date': date,
            'transactions': List[PaymentDetail]
        }

        self.attribute_map = {
            'next_payment_due_date': 'nextPaymentDueDate',
            'pricing_currency_total': 'pricingCurrencyTotal',
            'start_date': 'startDate',
            'transactions': 'transactions'
        }

        self._next_payment_due_date = next_payment_due_date
        self._pricing_currency_total = pricing_currency_total
        self._start_date = start_date
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReservationOrderBillingPlanInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReservationOrderBillingPlanInformation of this ReservationOrderBillingPlanInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_payment_due_date(self):
        """Gets the next_payment_due_date of this ReservationOrderBillingPlanInformation.

        For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.

        :return: The next_payment_due_date of this ReservationOrderBillingPlanInformation.
        :rtype: date
        """
        return self._next_payment_due_date

    @next_payment_due_date.setter
    def next_payment_due_date(self, next_payment_due_date):
        """Sets the next_payment_due_date of this ReservationOrderBillingPlanInformation.

        For recurring billing plans, indicates the date when next payment will be processed. Null when total is paid off.

        :param next_payment_due_date: The next_payment_due_date of this ReservationOrderBillingPlanInformation.
        :type next_payment_due_date: date
        """

        self._next_payment_due_date = next_payment_due_date

    @property
    def pricing_currency_total(self):
        """Gets the pricing_currency_total of this ReservationOrderBillingPlanInformation.


        :return: The pricing_currency_total of this ReservationOrderBillingPlanInformation.
        :rtype: Price
        """
        return self._pricing_currency_total

    @pricing_currency_total.setter
    def pricing_currency_total(self, pricing_currency_total):
        """Sets the pricing_currency_total of this ReservationOrderBillingPlanInformation.


        :param pricing_currency_total: The pricing_currency_total of this ReservationOrderBillingPlanInformation.
        :type pricing_currency_total: Price
        """

        self._pricing_currency_total = pricing_currency_total

    @property
    def start_date(self):
        """Gets the start_date of this ReservationOrderBillingPlanInformation.

        Date when the billing plan has started.

        :return: The start_date of this ReservationOrderBillingPlanInformation.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ReservationOrderBillingPlanInformation.

        Date when the billing plan has started.

        :param start_date: The start_date of this ReservationOrderBillingPlanInformation.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def transactions(self):
        """Gets the transactions of this ReservationOrderBillingPlanInformation.


        :return: The transactions of this ReservationOrderBillingPlanInformation.
        :rtype: List[PaymentDetail]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this ReservationOrderBillingPlanInformation.


        :param transactions: The transactions of this ReservationOrderBillingPlanInformation.
        :type transactions: List[PaymentDetail]
        """

        self._transactions = transactions
