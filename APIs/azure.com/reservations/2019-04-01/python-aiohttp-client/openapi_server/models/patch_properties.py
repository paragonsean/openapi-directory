# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.applied_scope_type import AppliedScopeType
from openapi_server.models.instance_flexibility import InstanceFlexibility
from openapi_server.models.patch_properties_renew_properties import PatchPropertiesRenewProperties
from openapi_server import util


class PatchProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_scope_type: AppliedScopeType=None, applied_scopes: List[str]=None, instance_flexibility: InstanceFlexibility=None, name: str=None, renew: bool=False, renew_properties: PatchPropertiesRenewProperties=None):
        """PatchProperties - a model defined in OpenAPI

        :param applied_scope_type: The applied_scope_type of this PatchProperties.
        :param applied_scopes: The applied_scopes of this PatchProperties.
        :param instance_flexibility: The instance_flexibility of this PatchProperties.
        :param name: The name of this PatchProperties.
        :param renew: The renew of this PatchProperties.
        :param renew_properties: The renew_properties of this PatchProperties.
        """
        self.openapi_types = {
            'applied_scope_type': AppliedScopeType,
            'applied_scopes': List[str],
            'instance_flexibility': InstanceFlexibility,
            'name': str,
            'renew': bool,
            'renew_properties': PatchPropertiesRenewProperties
        }

        self.attribute_map = {
            'applied_scope_type': 'appliedScopeType',
            'applied_scopes': 'appliedScopes',
            'instance_flexibility': 'instanceFlexibility',
            'name': 'name',
            'renew': 'renew',
            'renew_properties': 'renewProperties'
        }

        self._applied_scope_type = applied_scope_type
        self._applied_scopes = applied_scopes
        self._instance_flexibility = instance_flexibility
        self._name = name
        self._renew = renew
        self._renew_properties = renew_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchProperties of this PatchProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_scope_type(self):
        """Gets the applied_scope_type of this PatchProperties.


        :return: The applied_scope_type of this PatchProperties.
        :rtype: AppliedScopeType
        """
        return self._applied_scope_type

    @applied_scope_type.setter
    def applied_scope_type(self, applied_scope_type):
        """Sets the applied_scope_type of this PatchProperties.


        :param applied_scope_type: The applied_scope_type of this PatchProperties.
        :type applied_scope_type: AppliedScopeType
        """

        self._applied_scope_type = applied_scope_type

    @property
    def applied_scopes(self):
        """Gets the applied_scopes of this PatchProperties.

        List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.

        :return: The applied_scopes of this PatchProperties.
        :rtype: List[str]
        """
        return self._applied_scopes

    @applied_scopes.setter
    def applied_scopes(self, applied_scopes):
        """Sets the applied_scopes of this PatchProperties.

        List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.

        :param applied_scopes: The applied_scopes of this PatchProperties.
        :type applied_scopes: List[str]
        """

        self._applied_scopes = applied_scopes

    @property
    def instance_flexibility(self):
        """Gets the instance_flexibility of this PatchProperties.


        :return: The instance_flexibility of this PatchProperties.
        :rtype: InstanceFlexibility
        """
        return self._instance_flexibility

    @instance_flexibility.setter
    def instance_flexibility(self, instance_flexibility):
        """Sets the instance_flexibility of this PatchProperties.


        :param instance_flexibility: The instance_flexibility of this PatchProperties.
        :type instance_flexibility: InstanceFlexibility
        """

        self._instance_flexibility = instance_flexibility

    @property
    def name(self):
        """Gets the name of this PatchProperties.

        Name of the Reservation

        :return: The name of this PatchProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PatchProperties.

        Name of the Reservation

        :param name: The name of this PatchProperties.
        :type name: str
        """

        self._name = name

    @property
    def renew(self):
        """Gets the renew of this PatchProperties.

        Setting this to true will automatically purchase a new reservation on the expiration date time.

        :return: The renew of this PatchProperties.
        :rtype: bool
        """
        return self._renew

    @renew.setter
    def renew(self, renew):
        """Sets the renew of this PatchProperties.

        Setting this to true will automatically purchase a new reservation on the expiration date time.

        :param renew: The renew of this PatchProperties.
        :type renew: bool
        """

        self._renew = renew

    @property
    def renew_properties(self):
        """Gets the renew_properties of this PatchProperties.


        :return: The renew_properties of this PatchProperties.
        :rtype: PatchPropertiesRenewProperties
        """
        return self._renew_properties

    @renew_properties.setter
    def renew_properties(self, renew_properties):
        """Sets the renew_properties of this PatchProperties.


        :param renew_properties: The renew_properties of this PatchProperties.
        :type renew_properties: PatchPropertiesRenewProperties
        """

        self._renew_properties = renew_properties
