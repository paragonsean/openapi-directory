/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservedResourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservedResourceType::OAIReservedResourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservedResourceType::OAIReservedResourceType() {
    this->initializeModel();
}

OAIReservedResourceType::~OAIReservedResourceType() {}

void OAIReservedResourceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReservedResourceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReservedResourceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VirtualMachines", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReservedResourceType::VIRTUALMACHINES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SqlDatabases", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReservedResourceType::SQLDATABASES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SuseLinux", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReservedResourceType::SUSELINUX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CosmosDb", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReservedResourceType::COSMOSDB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RedHat", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReservedResourceType::REDHAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SqlDataWarehouse", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReservedResourceType::SQLDATAWAREHOUSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VMwareCloudSimple", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReservedResourceType::VMWARECLOUDSIMPLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RedHatOsa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReservedResourceType::REDHATOSA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReservedResourceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReservedResourceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReservedResourceType::VIRTUALMACHINES:
            val = "VirtualMachines";
            break;
        case eOAIReservedResourceType::SQLDATABASES:
            val = "SqlDatabases";
            break;
        case eOAIReservedResourceType::SUSELINUX:
            val = "SuseLinux";
            break;
        case eOAIReservedResourceType::COSMOSDB:
            val = "CosmosDb";
            break;
        case eOAIReservedResourceType::REDHAT:
            val = "RedHat";
            break;
        case eOAIReservedResourceType::SQLDATAWAREHOUSE:
            val = "SqlDataWarehouse";
            break;
        case eOAIReservedResourceType::VMWARECLOUDSIMPLE:
            val = "VMwareCloudSimple";
            break;
        case eOAIReservedResourceType::REDHATOSA:
            val = "RedHatOsa";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReservedResourceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReservedResourceType::eOAIReservedResourceType OAIReservedResourceType::getValue() const {
    return m_value;
}

void OAIReservedResourceType::setValue(const OAIReservedResourceType::eOAIReservedResourceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReservedResourceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIReservedResourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
