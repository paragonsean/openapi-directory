/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurchaseRequestProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurchaseRequestProperties::OAIPurchaseRequestProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurchaseRequestProperties::OAIPurchaseRequestProperties() {
    this->initializeModel();
}

OAIPurchaseRequestProperties::~OAIPurchaseRequestProperties() {}

void OAIPurchaseRequestProperties::initializeModel() {

    m_applied_scope_type_isSet = false;
    m_applied_scope_type_isValid = false;

    m_applied_scopes_isSet = false;
    m_applied_scopes_isValid = false;

    m_billing_plan_isSet = false;
    m_billing_plan_isValid = false;

    m_billing_scope_id_isSet = false;
    m_billing_scope_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_renew_isSet = false;
    m_renew_isValid = false;

    m_reserved_resource_properties_isSet = false;
    m_reserved_resource_properties_isValid = false;

    m_reserved_resource_type_isSet = false;
    m_reserved_resource_type_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;
}

void OAIPurchaseRequestProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurchaseRequestProperties::fromJsonObject(QJsonObject json) {

    m_applied_scope_type_isValid = ::OpenAPI::fromJsonValue(m_applied_scope_type, json[QString("appliedScopeType")]);
    m_applied_scope_type_isSet = !json[QString("appliedScopeType")].isNull() && m_applied_scope_type_isValid;

    m_applied_scopes_isValid = ::OpenAPI::fromJsonValue(m_applied_scopes, json[QString("appliedScopes")]);
    m_applied_scopes_isSet = !json[QString("appliedScopes")].isNull() && m_applied_scopes_isValid;

    m_billing_plan_isValid = ::OpenAPI::fromJsonValue(m_billing_plan, json[QString("billingPlan")]);
    m_billing_plan_isSet = !json[QString("billingPlan")].isNull() && m_billing_plan_isValid;

    m_billing_scope_id_isValid = ::OpenAPI::fromJsonValue(m_billing_scope_id, json[QString("billingScopeId")]);
    m_billing_scope_id_isSet = !json[QString("billingScopeId")].isNull() && m_billing_scope_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_renew_isValid = ::OpenAPI::fromJsonValue(m_renew, json[QString("renew")]);
    m_renew_isSet = !json[QString("renew")].isNull() && m_renew_isValid;

    m_reserved_resource_properties_isValid = ::OpenAPI::fromJsonValue(m_reserved_resource_properties, json[QString("reservedResourceProperties")]);
    m_reserved_resource_properties_isSet = !json[QString("reservedResourceProperties")].isNull() && m_reserved_resource_properties_isValid;

    m_reserved_resource_type_isValid = ::OpenAPI::fromJsonValue(m_reserved_resource_type, json[QString("reservedResourceType")]);
    m_reserved_resource_type_isSet = !json[QString("reservedResourceType")].isNull() && m_reserved_resource_type_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;
}

QString OAIPurchaseRequestProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurchaseRequestProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_scope_type.isSet()) {
        obj.insert(QString("appliedScopeType"), ::OpenAPI::toJsonValue(m_applied_scope_type));
    }
    if (m_applied_scopes.size() > 0) {
        obj.insert(QString("appliedScopes"), ::OpenAPI::toJsonValue(m_applied_scopes));
    }
    if (m_billing_plan.isSet()) {
        obj.insert(QString("billingPlan"), ::OpenAPI::toJsonValue(m_billing_plan));
    }
    if (m_billing_scope_id_isSet) {
        obj.insert(QString("billingScopeId"), ::OpenAPI::toJsonValue(m_billing_scope_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_renew_isSet) {
        obj.insert(QString("renew"), ::OpenAPI::toJsonValue(m_renew));
    }
    if (m_reserved_resource_properties.isSet()) {
        obj.insert(QString("reservedResourceProperties"), ::OpenAPI::toJsonValue(m_reserved_resource_properties));
    }
    if (m_reserved_resource_type.isSet()) {
        obj.insert(QString("reservedResourceType"), ::OpenAPI::toJsonValue(m_reserved_resource_type));
    }
    if (m_term.isSet()) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    return obj;
}

OAIAppliedScopeType OAIPurchaseRequestProperties::getAppliedScopeType() const {
    return m_applied_scope_type;
}
void OAIPurchaseRequestProperties::setAppliedScopeType(const OAIAppliedScopeType &applied_scope_type) {
    m_applied_scope_type = applied_scope_type;
    m_applied_scope_type_isSet = true;
}

bool OAIPurchaseRequestProperties::is_applied_scope_type_Set() const{
    return m_applied_scope_type_isSet;
}

bool OAIPurchaseRequestProperties::is_applied_scope_type_Valid() const{
    return m_applied_scope_type_isValid;
}

QList<QString> OAIPurchaseRequestProperties::getAppliedScopes() const {
    return m_applied_scopes;
}
void OAIPurchaseRequestProperties::setAppliedScopes(const QList<QString> &applied_scopes) {
    m_applied_scopes = applied_scopes;
    m_applied_scopes_isSet = true;
}

bool OAIPurchaseRequestProperties::is_applied_scopes_Set() const{
    return m_applied_scopes_isSet;
}

bool OAIPurchaseRequestProperties::is_applied_scopes_Valid() const{
    return m_applied_scopes_isValid;
}

OAIReservationBillingPlan OAIPurchaseRequestProperties::getBillingPlan() const {
    return m_billing_plan;
}
void OAIPurchaseRequestProperties::setBillingPlan(const OAIReservationBillingPlan &billing_plan) {
    m_billing_plan = billing_plan;
    m_billing_plan_isSet = true;
}

bool OAIPurchaseRequestProperties::is_billing_plan_Set() const{
    return m_billing_plan_isSet;
}

bool OAIPurchaseRequestProperties::is_billing_plan_Valid() const{
    return m_billing_plan_isValid;
}

QString OAIPurchaseRequestProperties::getBillingScopeId() const {
    return m_billing_scope_id;
}
void OAIPurchaseRequestProperties::setBillingScopeId(const QString &billing_scope_id) {
    m_billing_scope_id = billing_scope_id;
    m_billing_scope_id_isSet = true;
}

bool OAIPurchaseRequestProperties::is_billing_scope_id_Set() const{
    return m_billing_scope_id_isSet;
}

bool OAIPurchaseRequestProperties::is_billing_scope_id_Valid() const{
    return m_billing_scope_id_isValid;
}

QString OAIPurchaseRequestProperties::getDisplayName() const {
    return m_display_name;
}
void OAIPurchaseRequestProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPurchaseRequestProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPurchaseRequestProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIPurchaseRequestProperties::getQuantity() const {
    return m_quantity;
}
void OAIPurchaseRequestProperties::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIPurchaseRequestProperties::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIPurchaseRequestProperties::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIPurchaseRequestProperties::isRenew() const {
    return m_renew;
}
void OAIPurchaseRequestProperties::setRenew(const bool &renew) {
    m_renew = renew;
    m_renew_isSet = true;
}

bool OAIPurchaseRequestProperties::is_renew_Set() const{
    return m_renew_isSet;
}

bool OAIPurchaseRequestProperties::is_renew_Valid() const{
    return m_renew_isValid;
}

OAIPurchaseRequestProperties_reservedResourceProperties OAIPurchaseRequestProperties::getReservedResourceProperties() const {
    return m_reserved_resource_properties;
}
void OAIPurchaseRequestProperties::setReservedResourceProperties(const OAIPurchaseRequestProperties_reservedResourceProperties &reserved_resource_properties) {
    m_reserved_resource_properties = reserved_resource_properties;
    m_reserved_resource_properties_isSet = true;
}

bool OAIPurchaseRequestProperties::is_reserved_resource_properties_Set() const{
    return m_reserved_resource_properties_isSet;
}

bool OAIPurchaseRequestProperties::is_reserved_resource_properties_Valid() const{
    return m_reserved_resource_properties_isValid;
}

OAIReservedResourceType OAIPurchaseRequestProperties::getReservedResourceType() const {
    return m_reserved_resource_type;
}
void OAIPurchaseRequestProperties::setReservedResourceType(const OAIReservedResourceType &reserved_resource_type) {
    m_reserved_resource_type = reserved_resource_type;
    m_reserved_resource_type_isSet = true;
}

bool OAIPurchaseRequestProperties::is_reserved_resource_type_Set() const{
    return m_reserved_resource_type_isSet;
}

bool OAIPurchaseRequestProperties::is_reserved_resource_type_Valid() const{
    return m_reserved_resource_type_isValid;
}

OAIReservationTerm OAIPurchaseRequestProperties::getTerm() const {
    return m_term;
}
void OAIPurchaseRequestProperties::setTerm(const OAIReservationTerm &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIPurchaseRequestProperties::is_term_Set() const{
    return m_term_isSet;
}

bool OAIPurchaseRequestProperties::is_term_Valid() const{
    return m_term_isValid;
}

bool OAIPurchaseRequestProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_scope_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_scope_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_resource_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_term.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurchaseRequestProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
