/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentDetail::OAIPaymentDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentDetail::OAIPaymentDetail() {
    this->initializeModel();
}

OAIPaymentDetail::~OAIPaymentDetail() {}

void OAIPaymentDetail::initializeModel() {

    m_billing_account_isSet = false;
    m_billing_account_isValid = false;

    m_billing_currency_total_isSet = false;
    m_billing_currency_total_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_extended_status_info_isSet = false;
    m_extended_status_info_isValid = false;

    m_payment_date_isSet = false;
    m_payment_date_isValid = false;

    m_pricing_currency_total_isSet = false;
    m_pricing_currency_total_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPaymentDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentDetail::fromJsonObject(QJsonObject json) {

    m_billing_account_isValid = ::OpenAPI::fromJsonValue(m_billing_account, json[QString("billingAccount")]);
    m_billing_account_isSet = !json[QString("billingAccount")].isNull() && m_billing_account_isValid;

    m_billing_currency_total_isValid = ::OpenAPI::fromJsonValue(m_billing_currency_total, json[QString("billingCurrencyTotal")]);
    m_billing_currency_total_isSet = !json[QString("billingCurrencyTotal")].isNull() && m_billing_currency_total_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_extended_status_info_isValid = ::OpenAPI::fromJsonValue(m_extended_status_info, json[QString("extendedStatusInfo")]);
    m_extended_status_info_isSet = !json[QString("extendedStatusInfo")].isNull() && m_extended_status_info_isValid;

    m_payment_date_isValid = ::OpenAPI::fromJsonValue(m_payment_date, json[QString("paymentDate")]);
    m_payment_date_isSet = !json[QString("paymentDate")].isNull() && m_payment_date_isValid;

    m_pricing_currency_total_isValid = ::OpenAPI::fromJsonValue(m_pricing_currency_total, json[QString("pricingCurrencyTotal")]);
    m_pricing_currency_total_isSet = !json[QString("pricingCurrencyTotal")].isNull() && m_pricing_currency_total_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPaymentDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_account_isSet) {
        obj.insert(QString("billingAccount"), ::OpenAPI::toJsonValue(m_billing_account));
    }
    if (m_billing_currency_total.isSet()) {
        obj.insert(QString("billingCurrencyTotal"), ::OpenAPI::toJsonValue(m_billing_currency_total));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_extended_status_info.isSet()) {
        obj.insert(QString("extendedStatusInfo"), ::OpenAPI::toJsonValue(m_extended_status_info));
    }
    if (m_payment_date_isSet) {
        obj.insert(QString("paymentDate"), ::OpenAPI::toJsonValue(m_payment_date));
    }
    if (m_pricing_currency_total.isSet()) {
        obj.insert(QString("pricingCurrencyTotal"), ::OpenAPI::toJsonValue(m_pricing_currency_total));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPaymentDetail::getBillingAccount() const {
    return m_billing_account;
}
void OAIPaymentDetail::setBillingAccount(const QString &billing_account) {
    m_billing_account = billing_account;
    m_billing_account_isSet = true;
}

bool OAIPaymentDetail::is_billing_account_Set() const{
    return m_billing_account_isSet;
}

bool OAIPaymentDetail::is_billing_account_Valid() const{
    return m_billing_account_isValid;
}

OAIPrice OAIPaymentDetail::getBillingCurrencyTotal() const {
    return m_billing_currency_total;
}
void OAIPaymentDetail::setBillingCurrencyTotal(const OAIPrice &billing_currency_total) {
    m_billing_currency_total = billing_currency_total;
    m_billing_currency_total_isSet = true;
}

bool OAIPaymentDetail::is_billing_currency_total_Set() const{
    return m_billing_currency_total_isSet;
}

bool OAIPaymentDetail::is_billing_currency_total_Valid() const{
    return m_billing_currency_total_isValid;
}

QDate OAIPaymentDetail::getDueDate() const {
    return m_due_date;
}
void OAIPaymentDetail::setDueDate(const QDate &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIPaymentDetail::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIPaymentDetail::is_due_date_Valid() const{
    return m_due_date_isValid;
}

OAIExtendedStatusInfo OAIPaymentDetail::getExtendedStatusInfo() const {
    return m_extended_status_info;
}
void OAIPaymentDetail::setExtendedStatusInfo(const OAIExtendedStatusInfo &extended_status_info) {
    m_extended_status_info = extended_status_info;
    m_extended_status_info_isSet = true;
}

bool OAIPaymentDetail::is_extended_status_info_Set() const{
    return m_extended_status_info_isSet;
}

bool OAIPaymentDetail::is_extended_status_info_Valid() const{
    return m_extended_status_info_isValid;
}

QDate OAIPaymentDetail::getPaymentDate() const {
    return m_payment_date;
}
void OAIPaymentDetail::setPaymentDate(const QDate &payment_date) {
    m_payment_date = payment_date;
    m_payment_date_isSet = true;
}

bool OAIPaymentDetail::is_payment_date_Set() const{
    return m_payment_date_isSet;
}

bool OAIPaymentDetail::is_payment_date_Valid() const{
    return m_payment_date_isValid;
}

OAIPrice OAIPaymentDetail::getPricingCurrencyTotal() const {
    return m_pricing_currency_total;
}
void OAIPaymentDetail::setPricingCurrencyTotal(const OAIPrice &pricing_currency_total) {
    m_pricing_currency_total = pricing_currency_total;
    m_pricing_currency_total_isSet = true;
}

bool OAIPaymentDetail::is_pricing_currency_total_Set() const{
    return m_pricing_currency_total_isSet;
}

bool OAIPaymentDetail::is_pricing_currency_total_Valid() const{
    return m_pricing_currency_total_isValid;
}

OAIPaymentStatus OAIPaymentDetail::getStatus() const {
    return m_status;
}
void OAIPaymentDetail::setStatus(const OAIPaymentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPaymentDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPaymentDetail::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPaymentDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_currency_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_status_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_currency_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
