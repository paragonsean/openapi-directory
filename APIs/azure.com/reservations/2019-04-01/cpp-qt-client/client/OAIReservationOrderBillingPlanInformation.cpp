/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationOrderBillingPlanInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationOrderBillingPlanInformation::OAIReservationOrderBillingPlanInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationOrderBillingPlanInformation::OAIReservationOrderBillingPlanInformation() {
    this->initializeModel();
}

OAIReservationOrderBillingPlanInformation::~OAIReservationOrderBillingPlanInformation() {}

void OAIReservationOrderBillingPlanInformation::initializeModel() {

    m_next_payment_due_date_isSet = false;
    m_next_payment_due_date_isValid = false;

    m_pricing_currency_total_isSet = false;
    m_pricing_currency_total_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_transactions_isSet = false;
    m_transactions_isValid = false;
}

void OAIReservationOrderBillingPlanInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationOrderBillingPlanInformation::fromJsonObject(QJsonObject json) {

    m_next_payment_due_date_isValid = ::OpenAPI::fromJsonValue(m_next_payment_due_date, json[QString("nextPaymentDueDate")]);
    m_next_payment_due_date_isSet = !json[QString("nextPaymentDueDate")].isNull() && m_next_payment_due_date_isValid;

    m_pricing_currency_total_isValid = ::OpenAPI::fromJsonValue(m_pricing_currency_total, json[QString("pricingCurrencyTotal")]);
    m_pricing_currency_total_isSet = !json[QString("pricingCurrencyTotal")].isNull() && m_pricing_currency_total_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_transactions_isValid = ::OpenAPI::fromJsonValue(m_transactions, json[QString("transactions")]);
    m_transactions_isSet = !json[QString("transactions")].isNull() && m_transactions_isValid;
}

QString OAIReservationOrderBillingPlanInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationOrderBillingPlanInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_next_payment_due_date_isSet) {
        obj.insert(QString("nextPaymentDueDate"), ::OpenAPI::toJsonValue(m_next_payment_due_date));
    }
    if (m_pricing_currency_total.isSet()) {
        obj.insert(QString("pricingCurrencyTotal"), ::OpenAPI::toJsonValue(m_pricing_currency_total));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_transactions.size() > 0) {
        obj.insert(QString("transactions"), ::OpenAPI::toJsonValue(m_transactions));
    }
    return obj;
}

QDate OAIReservationOrderBillingPlanInformation::getNextPaymentDueDate() const {
    return m_next_payment_due_date;
}
void OAIReservationOrderBillingPlanInformation::setNextPaymentDueDate(const QDate &next_payment_due_date) {
    m_next_payment_due_date = next_payment_due_date;
    m_next_payment_due_date_isSet = true;
}

bool OAIReservationOrderBillingPlanInformation::is_next_payment_due_date_Set() const{
    return m_next_payment_due_date_isSet;
}

bool OAIReservationOrderBillingPlanInformation::is_next_payment_due_date_Valid() const{
    return m_next_payment_due_date_isValid;
}

OAIPrice OAIReservationOrderBillingPlanInformation::getPricingCurrencyTotal() const {
    return m_pricing_currency_total;
}
void OAIReservationOrderBillingPlanInformation::setPricingCurrencyTotal(const OAIPrice &pricing_currency_total) {
    m_pricing_currency_total = pricing_currency_total;
    m_pricing_currency_total_isSet = true;
}

bool OAIReservationOrderBillingPlanInformation::is_pricing_currency_total_Set() const{
    return m_pricing_currency_total_isSet;
}

bool OAIReservationOrderBillingPlanInformation::is_pricing_currency_total_Valid() const{
    return m_pricing_currency_total_isValid;
}

QDate OAIReservationOrderBillingPlanInformation::getStartDate() const {
    return m_start_date;
}
void OAIReservationOrderBillingPlanInformation::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIReservationOrderBillingPlanInformation::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIReservationOrderBillingPlanInformation::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QList<OAIPaymentDetail> OAIReservationOrderBillingPlanInformation::getTransactions() const {
    return m_transactions;
}
void OAIReservationOrderBillingPlanInformation::setTransactions(const QList<OAIPaymentDetail> &transactions) {
    m_transactions = transactions;
    m_transactions_isSet = true;
}

bool OAIReservationOrderBillingPlanInformation::is_transactions_Set() const{
    return m_transactions_isSet;
}

bool OAIReservationOrderBillingPlanInformation::is_transactions_Valid() const{
    return m_transactions_isValid;
}

bool OAIReservationOrderBillingPlanInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_payment_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_currency_total.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationOrderBillingPlanInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
