/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScopeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScopeProperties::OAIScopeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScopeProperties::OAIScopeProperties() {
    this->initializeModel();
}

OAIScopeProperties::~OAIScopeProperties() {}

void OAIScopeProperties::initializeModel() {

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_r_valid_isSet = false;
    m_r_valid_isValid = false;
}

void OAIScopeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScopeProperties::fromJsonObject(QJsonObject json) {

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_r_valid_isValid = ::OpenAPI::fromJsonValue(m_r_valid, json[QString("valid")]);
    m_r_valid_isSet = !json[QString("valid")].isNull() && m_r_valid_isValid;
}

QString OAIScopeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScopeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_r_valid_isSet) {
        obj.insert(QString("valid"), ::OpenAPI::toJsonValue(m_r_valid));
    }
    return obj;
}

QString OAIScopeProperties::getScope() const {
    return m_scope;
}
void OAIScopeProperties::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIScopeProperties::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIScopeProperties::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIScopeProperties::isRValid() const {
    return m_r_valid;
}
void OAIScopeProperties::setRValid(const bool &r_valid) {
    m_r_valid = r_valid;
    m_r_valid_isSet = true;
}

bool OAIScopeProperties::is_r_valid_Set() const{
    return m_r_valid_isSet;
}

bool OAIScopeProperties::is_r_valid_Valid() const{
    return m_r_valid_isValid;
}

bool OAIScopeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_valid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScopeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
