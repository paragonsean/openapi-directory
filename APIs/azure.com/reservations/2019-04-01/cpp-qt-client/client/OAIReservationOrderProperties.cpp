/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationOrderProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationOrderProperties::OAIReservationOrderProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationOrderProperties::OAIReservationOrderProperties() {
    this->initializeModel();
}

OAIReservationOrderProperties::~OAIReservationOrderProperties() {}

void OAIReservationOrderProperties::initializeModel() {

    m_billing_plan_isSet = false;
    m_billing_plan_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_original_quantity_isSet = false;
    m_original_quantity_isValid = false;

    m_plan_information_isSet = false;
    m_plan_information_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_request_date_time_isSet = false;
    m_request_date_time_isValid = false;

    m_reservations_isSet = false;
    m_reservations_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;
}

void OAIReservationOrderProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationOrderProperties::fromJsonObject(QJsonObject json) {

    m_billing_plan_isValid = ::OpenAPI::fromJsonValue(m_billing_plan, json[QString("billingPlan")]);
    m_billing_plan_isSet = !json[QString("billingPlan")].isNull() && m_billing_plan_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_original_quantity_isValid = ::OpenAPI::fromJsonValue(m_original_quantity, json[QString("originalQuantity")]);
    m_original_quantity_isSet = !json[QString("originalQuantity")].isNull() && m_original_quantity_isValid;

    m_plan_information_isValid = ::OpenAPI::fromJsonValue(m_plan_information, json[QString("planInformation")]);
    m_plan_information_isSet = !json[QString("planInformation")].isNull() && m_plan_information_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_request_date_time_isValid = ::OpenAPI::fromJsonValue(m_request_date_time, json[QString("requestDateTime")]);
    m_request_date_time_isSet = !json[QString("requestDateTime")].isNull() && m_request_date_time_isValid;

    m_reservations_isValid = ::OpenAPI::fromJsonValue(m_reservations, json[QString("reservations")]);
    m_reservations_isSet = !json[QString("reservations")].isNull() && m_reservations_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;
}

QString OAIReservationOrderProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationOrderProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_plan.isSet()) {
        obj.insert(QString("billingPlan"), ::OpenAPI::toJsonValue(m_billing_plan));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_original_quantity_isSet) {
        obj.insert(QString("originalQuantity"), ::OpenAPI::toJsonValue(m_original_quantity));
    }
    if (m_plan_information.isSet()) {
        obj.insert(QString("planInformation"), ::OpenAPI::toJsonValue(m_plan_information));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_request_date_time_isSet) {
        obj.insert(QString("requestDateTime"), ::OpenAPI::toJsonValue(m_request_date_time));
    }
    if (m_reservations.size() > 0) {
        obj.insert(QString("reservations"), ::OpenAPI::toJsonValue(m_reservations));
    }
    if (m_term.isSet()) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    return obj;
}

OAIReservationBillingPlan OAIReservationOrderProperties::getBillingPlan() const {
    return m_billing_plan;
}
void OAIReservationOrderProperties::setBillingPlan(const OAIReservationBillingPlan &billing_plan) {
    m_billing_plan = billing_plan;
    m_billing_plan_isSet = true;
}

bool OAIReservationOrderProperties::is_billing_plan_Set() const{
    return m_billing_plan_isSet;
}

bool OAIReservationOrderProperties::is_billing_plan_Valid() const{
    return m_billing_plan_isValid;
}

QDateTime OAIReservationOrderProperties::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIReservationOrderProperties::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIReservationOrderProperties::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIReservationOrderProperties::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIReservationOrderProperties::getDisplayName() const {
    return m_display_name;
}
void OAIReservationOrderProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIReservationOrderProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIReservationOrderProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDate OAIReservationOrderProperties::getExpiryDate() const {
    return m_expiry_date;
}
void OAIReservationOrderProperties::setExpiryDate(const QDate &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIReservationOrderProperties::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIReservationOrderProperties::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

qint32 OAIReservationOrderProperties::getOriginalQuantity() const {
    return m_original_quantity;
}
void OAIReservationOrderProperties::setOriginalQuantity(const qint32 &original_quantity) {
    m_original_quantity = original_quantity;
    m_original_quantity_isSet = true;
}

bool OAIReservationOrderProperties::is_original_quantity_Set() const{
    return m_original_quantity_isSet;
}

bool OAIReservationOrderProperties::is_original_quantity_Valid() const{
    return m_original_quantity_isValid;
}

OAIReservationOrderBillingPlanInformation OAIReservationOrderProperties::getPlanInformation() const {
    return m_plan_information;
}
void OAIReservationOrderProperties::setPlanInformation(const OAIReservationOrderBillingPlanInformation &plan_information) {
    m_plan_information = plan_information;
    m_plan_information_isSet = true;
}

bool OAIReservationOrderProperties::is_plan_information_Set() const{
    return m_plan_information_isSet;
}

bool OAIReservationOrderProperties::is_plan_information_Valid() const{
    return m_plan_information_isValid;
}

QString OAIReservationOrderProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIReservationOrderProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIReservationOrderProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIReservationOrderProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QDateTime OAIReservationOrderProperties::getRequestDateTime() const {
    return m_request_date_time;
}
void OAIReservationOrderProperties::setRequestDateTime(const QDateTime &request_date_time) {
    m_request_date_time = request_date_time;
    m_request_date_time_isSet = true;
}

bool OAIReservationOrderProperties::is_request_date_time_Set() const{
    return m_request_date_time_isSet;
}

bool OAIReservationOrderProperties::is_request_date_time_Valid() const{
    return m_request_date_time_isValid;
}

QList<OAIReservationResponse> OAIReservationOrderProperties::getReservations() const {
    return m_reservations;
}
void OAIReservationOrderProperties::setReservations(const QList<OAIReservationResponse> &reservations) {
    m_reservations = reservations;
    m_reservations_isSet = true;
}

bool OAIReservationOrderProperties::is_reservations_Set() const{
    return m_reservations_isSet;
}

bool OAIReservationOrderProperties::is_reservations_Valid() const{
    return m_reservations_isValid;
}

OAIReservationTerm OAIReservationOrderProperties::getTerm() const {
    return m_term;
}
void OAIReservationOrderProperties::setTerm(const OAIReservationTerm &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIReservationOrderProperties::is_term_Set() const{
    return m_term_isSet;
}

bool OAIReservationOrderProperties::is_term_Valid() const{
    return m_term_isValid;
}

bool OAIReservationOrderProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_term.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationOrderProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
