/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtendedStatusInfo from './ExtendedStatusInfo';
import PaymentStatus from './PaymentStatus';
import Price from './Price';

/**
 * The PaymentDetail model module.
 * @module model/PaymentDetail
 * @version 2019-04-01
 */
class PaymentDetail {
    /**
     * Constructs a new <code>PaymentDetail</code>.
     * Information about payment related to a reservation order.
     * @alias module:model/PaymentDetail
     */
    constructor() { 
        
        PaymentDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentDetail} obj Optional instance to populate.
     * @return {module:model/PaymentDetail} The populated <code>PaymentDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentDetail();

            if (data.hasOwnProperty('billingAccount')) {
                obj['billingAccount'] = ApiClient.convertToType(data['billingAccount'], 'String');
            }
            if (data.hasOwnProperty('billingCurrencyTotal')) {
                obj['billingCurrencyTotal'] = Price.constructFromObject(data['billingCurrencyTotal']);
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'Date');
            }
            if (data.hasOwnProperty('extendedStatusInfo')) {
                obj['extendedStatusInfo'] = ExtendedStatusInfo.constructFromObject(data['extendedStatusInfo']);
            }
            if (data.hasOwnProperty('paymentDate')) {
                obj['paymentDate'] = ApiClient.convertToType(data['paymentDate'], 'Date');
            }
            if (data.hasOwnProperty('pricingCurrencyTotal')) {
                obj['pricingCurrencyTotal'] = Price.constructFromObject(data['pricingCurrencyTotal']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = PaymentStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billingAccount'] && !(typeof data['billingAccount'] === 'string' || data['billingAccount'] instanceof String)) {
            throw new Error("Expected the field `billingAccount` to be a primitive type in the JSON string but got " + data['billingAccount']);
        }
        // validate the optional field `billingCurrencyTotal`
        if (data['billingCurrencyTotal']) { // data not null
          Price.validateJSON(data['billingCurrencyTotal']);
        }
        // validate the optional field `extendedStatusInfo`
        if (data['extendedStatusInfo']) { // data not null
          ExtendedStatusInfo.validateJSON(data['extendedStatusInfo']);
        }
        // validate the optional field `pricingCurrencyTotal`
        if (data['pricingCurrencyTotal']) { // data not null
          Price.validateJSON(data['pricingCurrencyTotal']);
        }

        return true;
    }


}



/**
 * Shows the Account that is charged for this payment.
 * @member {String} billingAccount
 */
PaymentDetail.prototype['billingAccount'] = undefined;

/**
 * @member {module:model/Price} billingCurrencyTotal
 */
PaymentDetail.prototype['billingCurrencyTotal'] = undefined;

/**
 * Date when the payment needs to be done.
 * @member {Date} dueDate
 */
PaymentDetail.prototype['dueDate'] = undefined;

/**
 * @member {module:model/ExtendedStatusInfo} extendedStatusInfo
 */
PaymentDetail.prototype['extendedStatusInfo'] = undefined;

/**
 * Date when the transaction is completed. Is null when it is scheduled.
 * @member {Date} paymentDate
 */
PaymentDetail.prototype['paymentDate'] = undefined;

/**
 * @member {module:model/Price} pricingCurrencyTotal
 */
PaymentDetail.prototype['pricingCurrencyTotal'] = undefined;

/**
 * @member {module:model/PaymentStatus} status
 */
PaymentDetail.prototype['status'] = undefined;






export default PaymentDetail;

