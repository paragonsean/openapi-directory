/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReservationBillingPlan from './ReservationBillingPlan';
import ReservationTerm from './ReservationTerm';
import SkuProperty from './SkuProperty';
import SkuRestriction from './SkuRestriction';

/**
 * The Catalog model module.
 * @module model/Catalog
 * @version 2019-04-01
 */
class Catalog {
    /**
     * Constructs a new <code>Catalog</code>.
     * @alias module:model/Catalog
     */
    constructor() { 
        
        Catalog.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Catalog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Catalog} obj Optional instance to populate.
     * @return {module:model/Catalog} The populated <code>Catalog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Catalog();

            if (data.hasOwnProperty('billingPlans')) {
                obj['billingPlans'] = ApiClient.convertToType(data['billingPlans'], {'String': [ReservationBillingPlan]});
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = ApiClient.convertToType(data['restrictions'], [SkuRestriction]);
            }
            if (data.hasOwnProperty('skuProperties')) {
                obj['skuProperties'] = ApiClient.convertToType(data['skuProperties'], [SkuProperty]);
            }
            if (data.hasOwnProperty('terms')) {
                obj['terms'] = ApiClient.convertToType(data['terms'], [ReservationTerm]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Catalog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Catalog</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        if (data['restrictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['restrictions'])) {
                throw new Error("Expected the field `restrictions` to be an array in the JSON data but got " + data['restrictions']);
            }
            // validate the optional field `restrictions` (array)
            for (const item of data['restrictions']) {
                SkuRestriction.validateJSON(item);
            };
        }
        if (data['skuProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['skuProperties'])) {
                throw new Error("Expected the field `skuProperties` to be an array in the JSON data but got " + data['skuProperties']);
            }
            // validate the optional field `skuProperties` (array)
            for (const item of data['skuProperties']) {
                SkuProperty.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['terms'])) {
            throw new Error("Expected the field `terms` to be an array in the JSON data but got " + data['terms']);
        }

        return true;
    }


}



/**
 * The billing plan options available for this SKU.
 * @member {Object.<String, Array.<module:model/ReservationBillingPlan>>} billingPlans
 */
Catalog.prototype['billingPlans'] = undefined;

/**
 * @member {Array.<String>} locations
 */
Catalog.prototype['locations'] = undefined;

/**
 * The name of SKU
 * @member {String} name
 */
Catalog.prototype['name'] = undefined;

/**
 * The type of resource the SKU applies to.
 * @member {String} resourceType
 */
Catalog.prototype['resourceType'] = undefined;

/**
 * @member {Array.<module:model/SkuRestriction>} restrictions
 */
Catalog.prototype['restrictions'] = undefined;

/**
 * @member {Array.<module:model/SkuProperty>} skuProperties
 */
Catalog.prototype['skuProperties'] = undefined;

/**
 * Available reservation terms for this resource
 * @member {Array.<module:model/ReservationTerm>} terms
 */
Catalog.prototype['terms'] = undefined;






export default Catalog;

