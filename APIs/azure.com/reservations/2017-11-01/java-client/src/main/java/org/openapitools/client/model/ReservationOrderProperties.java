/*
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2017-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProvisioningState;
import org.openapitools.client.model.ReservationResponse;
import org.openapitools.client.model.ReservationTerm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReservationOrderProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:31.034218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationOrderProperties {
  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "createdDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private LocalDate expiryDate;

  public static final String SERIALIZED_NAME_ORIGINAL_QUANTITY = "originalQuantity";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_QUANTITY)
  private Integer originalQuantity;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_REQUEST_DATE_TIME = "requestDateTime";
  @SerializedName(SERIALIZED_NAME_REQUEST_DATE_TIME)
  private OffsetDateTime requestDateTime;

  public static final String SERIALIZED_NAME_RESERVATIONS = "reservations";
  @SerializedName(SERIALIZED_NAME_RESERVATIONS)
  private List<ReservationResponse> reservations = new ArrayList<>();

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private ReservationTerm term;

  public ReservationOrderProperties() {
  }

  public ReservationOrderProperties createdDateTime(OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
    return this;
  }

  /**
   * This is the DateTime when the reservation was created.
   * @return createdDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }

  public void setCreatedDateTime(OffsetDateTime createdDateTime) {
    this.createdDateTime = createdDateTime;
  }


  public ReservationOrderProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Friendly name for user to easily identified the reservation.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ReservationOrderProperties expiryDate(LocalDate expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * This is the date when the Reservation will expire.
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public LocalDate getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(LocalDate expiryDate) {
    this.expiryDate = expiryDate;
  }


  public ReservationOrderProperties originalQuantity(Integer originalQuantity) {
    this.originalQuantity = originalQuantity;
    return this;
  }

  /**
   * Total Quantity of the SKUs purchased in the Reservation.
   * @return originalQuantity
   */
  @javax.annotation.Nullable
  public Integer getOriginalQuantity() {
    return originalQuantity;
  }

  public void setOriginalQuantity(Integer originalQuantity) {
    this.originalQuantity = originalQuantity;
  }


  public ReservationOrderProperties provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ReservationOrderProperties requestDateTime(OffsetDateTime requestDateTime) {
    this.requestDateTime = requestDateTime;
    return this;
  }

  /**
   * This is the DateTime when the reservation was initially requested for purchase.
   * @return requestDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestDateTime() {
    return requestDateTime;
  }

  public void setRequestDateTime(OffsetDateTime requestDateTime) {
    this.requestDateTime = requestDateTime;
  }


  public ReservationOrderProperties reservations(List<ReservationResponse> reservations) {
    this.reservations = reservations;
    return this;
  }

  public ReservationOrderProperties addReservationsItem(ReservationResponse reservationsItem) {
    if (this.reservations == null) {
      this.reservations = new ArrayList<>();
    }
    this.reservations.add(reservationsItem);
    return this;
  }

  /**
   * Get reservations
   * @return reservations
   */
  @javax.annotation.Nullable
  public List<ReservationResponse> getReservations() {
    return reservations;
  }

  public void setReservations(List<ReservationResponse> reservations) {
    this.reservations = reservations;
  }


  public ReservationOrderProperties term(ReservationTerm term) {
    this.term = term;
    return this;
  }

  /**
   * Get term
   * @return term
   */
  @javax.annotation.Nullable
  public ReservationTerm getTerm() {
    return term;
  }

  public void setTerm(ReservationTerm term) {
    this.term = term;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationOrderProperties reservationOrderProperties = (ReservationOrderProperties) o;
    return Objects.equals(this.createdDateTime, reservationOrderProperties.createdDateTime) &&
        Objects.equals(this.displayName, reservationOrderProperties.displayName) &&
        Objects.equals(this.expiryDate, reservationOrderProperties.expiryDate) &&
        Objects.equals(this.originalQuantity, reservationOrderProperties.originalQuantity) &&
        Objects.equals(this.provisioningState, reservationOrderProperties.provisioningState) &&
        Objects.equals(this.requestDateTime, reservationOrderProperties.requestDateTime) &&
        Objects.equals(this.reservations, reservationOrderProperties.reservations) &&
        Objects.equals(this.term, reservationOrderProperties.term);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdDateTime, displayName, expiryDate, originalQuantity, provisioningState, requestDateTime, reservations, term);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationOrderProperties {\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    originalQuantity: ").append(toIndentedString(originalQuantity)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    requestDateTime: ").append(toIndentedString(requestDateTime)).append("\n");
    sb.append("    reservations: ").append(toIndentedString(reservations)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdDateTime");
    openapiFields.add("displayName");
    openapiFields.add("expiryDate");
    openapiFields.add("originalQuantity");
    openapiFields.add("provisioningState");
    openapiFields.add("requestDateTime");
    openapiFields.add("reservations");
    openapiFields.add("term");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationOrderProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationOrderProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationOrderProperties is not found in the empty JSON string", ReservationOrderProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationOrderProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationOrderProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if (jsonObj.get("reservations") != null && !jsonObj.get("reservations").isJsonNull()) {
        JsonArray jsonArrayreservations = jsonObj.getAsJsonArray("reservations");
        if (jsonArrayreservations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reservations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reservations` to be an array in the JSON string but got `%s`", jsonObj.get("reservations").toString()));
          }

          // validate the optional field `reservations` (array)
          for (int i = 0; i < jsonArrayreservations.size(); i++) {
            ReservationResponse.validateJsonElement(jsonArrayreservations.get(i));
          };
        }
      }
      // validate the optional field `term`
      if (jsonObj.get("term") != null && !jsonObj.get("term").isJsonNull()) {
        ReservationTerm.validateJsonElement(jsonObj.get("term"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationOrderProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationOrderProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationOrderProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationOrderProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationOrderProperties>() {
           @Override
           public void write(JsonWriter out, ReservationOrderProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationOrderProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationOrderProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationOrderProperties
   * @throws IOException if the JSON string is invalid with respect to ReservationOrderProperties
   */
  public static ReservationOrderProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationOrderProperties.class);
  }

  /**
   * Convert an instance of ReservationOrderProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

