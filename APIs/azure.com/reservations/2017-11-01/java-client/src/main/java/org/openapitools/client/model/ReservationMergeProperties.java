/*
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2017-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReservationMergeProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:31.034218-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservationMergeProperties {
  public static final String SERIALIZED_NAME_MERGE_DESTINATION = "mergeDestination";
  @SerializedName(SERIALIZED_NAME_MERGE_DESTINATION)
  private String mergeDestination;

  public static final String SERIALIZED_NAME_MERGE_SOURCES = "mergeSources";
  @SerializedName(SERIALIZED_NAME_MERGE_SOURCES)
  private List<String> mergeSources = new ArrayList<>();

  public ReservationMergeProperties() {
  }

  public ReservationMergeProperties mergeDestination(String mergeDestination) {
    this.mergeDestination = mergeDestination;
    return this;
  }

  /**
   * Reservation Resource Id Created due to the merge. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
   * @return mergeDestination
   */
  @javax.annotation.Nullable
  public String getMergeDestination() {
    return mergeDestination;
  }

  public void setMergeDestination(String mergeDestination) {
    this.mergeDestination = mergeDestination;
  }


  public ReservationMergeProperties mergeSources(List<String> mergeSources) {
    this.mergeSources = mergeSources;
    return this;
  }

  public ReservationMergeProperties addMergeSourcesItem(String mergeSourcesItem) {
    if (this.mergeSources == null) {
      this.mergeSources = new ArrayList<>();
    }
    this.mergeSources.add(mergeSourcesItem);
    return this;
  }

  /**
   * Resource Ids of the Source Reservation&#39;s merged to form this Reservation. Format of the resource Id is /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservations/{reservationId}
   * @return mergeSources
   */
  @javax.annotation.Nullable
  public List<String> getMergeSources() {
    return mergeSources;
  }

  public void setMergeSources(List<String> mergeSources) {
    this.mergeSources = mergeSources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservationMergeProperties reservationMergeProperties = (ReservationMergeProperties) o;
    return Objects.equals(this.mergeDestination, reservationMergeProperties.mergeDestination) &&
        Objects.equals(this.mergeSources, reservationMergeProperties.mergeSources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mergeDestination, mergeSources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservationMergeProperties {\n");
    sb.append("    mergeDestination: ").append(toIndentedString(mergeDestination)).append("\n");
    sb.append("    mergeSources: ").append(toIndentedString(mergeSources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mergeDestination");
    openapiFields.add("mergeSources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservationMergeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservationMergeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservationMergeProperties is not found in the empty JSON string", ReservationMergeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservationMergeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservationMergeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mergeDestination") != null && !jsonObj.get("mergeDestination").isJsonNull()) && !jsonObj.get("mergeDestination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeDestination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergeDestination").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mergeSources") != null && !jsonObj.get("mergeSources").isJsonNull() && !jsonObj.get("mergeSources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeSources` to be an array in the JSON string but got `%s`", jsonObj.get("mergeSources").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservationMergeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservationMergeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservationMergeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservationMergeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservationMergeProperties>() {
           @Override
           public void write(JsonWriter out, ReservationMergeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservationMergeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservationMergeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservationMergeProperties
   * @throws IOException if the JSON string is invalid with respect to ReservationMergeProperties
   */
  public static ReservationMergeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservationMergeProperties.class);
  }

  /**
   * Convert an instance of ReservationMergeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

