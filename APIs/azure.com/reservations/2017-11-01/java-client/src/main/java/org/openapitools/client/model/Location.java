/*
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2017-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Location in which the Resources needs to be reserved. It cannot be changed after the resource has been created.
 */
@JsonAdapter(Location.Adapter.class)
public enum Location {
  
  WESTUS("westus"),
  
  EASTUS("eastus"),
  
  EASTUS2("eastus2"),
  
  NORTHCENTRALUS("northcentralus"),
  
  WESTUS2("westus2"),
  
  SOUTHCENTRALUS("southcentralus"),
  
  CENTRALUS("centralus"),
  
  WESTEUROPE("westeurope"),
  
  NORTHEUROPE("northeurope"),
  
  EASTASIA("eastasia"),
  
  SOUTHEASTASIA("southeastasia"),
  
  JAPANEAST("japaneast"),
  
  JAPANWEST("japanwest"),
  
  BRAZILSOUTH("brazilsouth"),
  
  AUSTRALIAEAST("australiaeast"),
  
  AUSTRALIASOUTHEAST("australiasoutheast"),
  
  SOUTHINDIA("southindia"),
  
  WESTINDIA("westindia"),
  
  CENTRALINDIA("centralindia"),
  
  CANADACENTRAL("canadacentral"),
  
  CANADAEAST("canadaeast"),
  
  UKSOUTH("uksouth"),
  
  WESTCENTRALUS("westcentralus"),
  
  UKWEST("ukwest");

  private String value;

  Location(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Location fromValue(String value) {
    for (Location b : Location.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Location> {
    @Override
    public void write(final JsonWriter jsonWriter, final Location enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Location read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Location.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Location.fromValue(value);
  }
}

