/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2017-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationProperties::OAIReservationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationProperties::OAIReservationProperties() {
    this->initializeModel();
}

OAIReservationProperties::~OAIReservationProperties() {}

void OAIReservationProperties::initializeModel() {

    m_applied_scope_type_isSet = false;
    m_applied_scope_type_isValid = false;

    m_applied_scopes_isSet = false;
    m_applied_scopes_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_effective_date_time_isSet = false;
    m_effective_date_time_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_extended_status_info_isSet = false;
    m_extended_status_info_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_merge_properties_isSet = false;
    m_merge_properties_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_split_properties_isSet = false;
    m_split_properties_isValid = false;
}

void OAIReservationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationProperties::fromJsonObject(QJsonObject json) {

    m_applied_scope_type_isValid = ::OpenAPI::fromJsonValue(m_applied_scope_type, json[QString("appliedScopeType")]);
    m_applied_scope_type_isSet = !json[QString("appliedScopeType")].isNull() && m_applied_scope_type_isValid;

    m_applied_scopes_isValid = ::OpenAPI::fromJsonValue(m_applied_scopes, json[QString("appliedScopes")]);
    m_applied_scopes_isSet = !json[QString("appliedScopes")].isNull() && m_applied_scopes_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_effective_date_time_isValid = ::OpenAPI::fromJsonValue(m_effective_date_time, json[QString("effectiveDateTime")]);
    m_effective_date_time_isSet = !json[QString("effectiveDateTime")].isNull() && m_effective_date_time_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_extended_status_info_isValid = ::OpenAPI::fromJsonValue(m_extended_status_info, json[QString("extendedStatusInfo")]);
    m_extended_status_info_isSet = !json[QString("extendedStatusInfo")].isNull() && m_extended_status_info_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_merge_properties_isValid = ::OpenAPI::fromJsonValue(m_merge_properties, json[QString("mergeProperties")]);
    m_merge_properties_isSet = !json[QString("mergeProperties")].isNull() && m_merge_properties_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_split_properties_isValid = ::OpenAPI::fromJsonValue(m_split_properties, json[QString("splitProperties")]);
    m_split_properties_isSet = !json[QString("splitProperties")].isNull() && m_split_properties_isValid;
}

QString OAIReservationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_scope_type.isSet()) {
        obj.insert(QString("appliedScopeType"), ::OpenAPI::toJsonValue(m_applied_scope_type));
    }
    if (m_applied_scopes.size() > 0) {
        obj.insert(QString("appliedScopes"), ::OpenAPI::toJsonValue(m_applied_scopes));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_effective_date_time_isSet) {
        obj.insert(QString("effectiveDateTime"), ::OpenAPI::toJsonValue(m_effective_date_time));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_extended_status_info.isSet()) {
        obj.insert(QString("extendedStatusInfo"), ::OpenAPI::toJsonValue(m_extended_status_info));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_merge_properties.isSet()) {
        obj.insert(QString("mergeProperties"), ::OpenAPI::toJsonValue(m_merge_properties));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_split_properties.isSet()) {
        obj.insert(QString("splitProperties"), ::OpenAPI::toJsonValue(m_split_properties));
    }
    return obj;
}

OAIAppliedScopeType OAIReservationProperties::getAppliedScopeType() const {
    return m_applied_scope_type;
}
void OAIReservationProperties::setAppliedScopeType(const OAIAppliedScopeType &applied_scope_type) {
    m_applied_scope_type = applied_scope_type;
    m_applied_scope_type_isSet = true;
}

bool OAIReservationProperties::is_applied_scope_type_Set() const{
    return m_applied_scope_type_isSet;
}

bool OAIReservationProperties::is_applied_scope_type_Valid() const{
    return m_applied_scope_type_isValid;
}

QList<QString> OAIReservationProperties::getAppliedScopes() const {
    return m_applied_scopes;
}
void OAIReservationProperties::setAppliedScopes(const QList<QString> &applied_scopes) {
    m_applied_scopes = applied_scopes;
    m_applied_scopes_isSet = true;
}

bool OAIReservationProperties::is_applied_scopes_Set() const{
    return m_applied_scopes_isSet;
}

bool OAIReservationProperties::is_applied_scopes_Valid() const{
    return m_applied_scopes_isValid;
}

QString OAIReservationProperties::getDisplayName() const {
    return m_display_name;
}
void OAIReservationProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIReservationProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIReservationProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDateTime OAIReservationProperties::getEffectiveDateTime() const {
    return m_effective_date_time;
}
void OAIReservationProperties::setEffectiveDateTime(const QDateTime &effective_date_time) {
    m_effective_date_time = effective_date_time;
    m_effective_date_time_isSet = true;
}

bool OAIReservationProperties::is_effective_date_time_Set() const{
    return m_effective_date_time_isSet;
}

bool OAIReservationProperties::is_effective_date_time_Valid() const{
    return m_effective_date_time_isValid;
}

QDate OAIReservationProperties::getExpiryDate() const {
    return m_expiry_date;
}
void OAIReservationProperties::setExpiryDate(const QDate &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIReservationProperties::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIReservationProperties::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

OAIExtendedStatusInfo OAIReservationProperties::getExtendedStatusInfo() const {
    return m_extended_status_info;
}
void OAIReservationProperties::setExtendedStatusInfo(const OAIExtendedStatusInfo &extended_status_info) {
    m_extended_status_info = extended_status_info;
    m_extended_status_info_isSet = true;
}

bool OAIReservationProperties::is_extended_status_info_Set() const{
    return m_extended_status_info_isSet;
}

bool OAIReservationProperties::is_extended_status_info_Valid() const{
    return m_extended_status_info_isValid;
}

QDateTime OAIReservationProperties::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAIReservationProperties::setLastUpdatedDateTime(const QDateTime &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAIReservationProperties::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAIReservationProperties::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

OAIReservationMergeProperties OAIReservationProperties::getMergeProperties() const {
    return m_merge_properties;
}
void OAIReservationProperties::setMergeProperties(const OAIReservationMergeProperties &merge_properties) {
    m_merge_properties = merge_properties;
    m_merge_properties_isSet = true;
}

bool OAIReservationProperties::is_merge_properties_Set() const{
    return m_merge_properties_isSet;
}

bool OAIReservationProperties::is_merge_properties_Valid() const{
    return m_merge_properties_isValid;
}

OAIProvisioningState OAIReservationProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIReservationProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIReservationProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIReservationProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

qint32 OAIReservationProperties::getQuantity() const {
    return m_quantity;
}
void OAIReservationProperties::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIReservationProperties::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIReservationProperties::is_quantity_Valid() const{
    return m_quantity_isValid;
}

OAIReservationSplitProperties OAIReservationProperties::getSplitProperties() const {
    return m_split_properties;
}
void OAIReservationProperties::setSplitProperties(const OAIReservationSplitProperties &split_properties) {
    m_split_properties = split_properties;
    m_split_properties_isSet = true;
}

bool OAIReservationProperties::is_split_properties_Set() const{
    return m_split_properties_isSet;
}

bool OAIReservationProperties::is_split_properties_Valid() const{
    return m_split_properties_isValid;
}

bool OAIReservationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_scope_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_status_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
