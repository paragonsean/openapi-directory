/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2017-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorResponseCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorResponseCode::OAIErrorResponseCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorResponseCode::OAIErrorResponseCode() {
    this->initializeModel();
}

OAIErrorResponseCode::~OAIErrorResponseCode() {}

void OAIErrorResponseCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIErrorResponseCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIErrorResponseCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotSpecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::NOTSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InternalServerError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INTERNALSERVERERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServerTimeout", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::SERVERTIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AuthorizationFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::AUTHORIZATIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BadRequest", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::BADREQUEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ClientCertificateThumbprintNotSet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::CLIENTCERTIFICATETHUMBPRINTNOTSET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidRequestContent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDREQUESTCONTENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OperationFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::OPERATIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HttpMethodNotSupported", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::HTTPMETHODNOTSUPPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidRequestUri", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDREQUESTURI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MissingTenantId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::MISSINGTENANTID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidTenantId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDTENANTID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidReservationOrderId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDRESERVATIONORDERID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidReservationId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDRESERVATIONID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReservationIdNotInReservationOrder", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::RESERVATIONIDNOTINRESERVATIONORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReservationOrderNotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::RESERVATIONORDERNOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidSubscriptionId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDSUBSCRIPTIONID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidAccessToken", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDACCESSTOKEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidLocationId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDLOCATIONID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnauthenticatedRequestsThrottled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::UNAUTHENTICATEDREQUESTSTHROTTLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidHealthCheckType", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDHEALTHCHECKTYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Forbidden", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::FORBIDDEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BillingScopeIdCannotBeChanged", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::BILLINGSCOPEIDCANNOTBECHANGED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AppliedScopesNotAssociatedWithCommerceAccount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::APPLIEDSCOPESNOTASSOCIATEDWITHCOMMERCEACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AppliedScopesSameAsExisting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::APPLIEDSCOPESSAMEASEXISTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RoleAssignmentCreationFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::ROLEASSIGNMENTCREATIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReservationOrderCreationFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::RESERVATIONORDERCREATIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReservationOrderNotEnabled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::RESERVATIONORDERNOTENABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CapacityUpdateScopesFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::CAPACITYUPDATESCOPESFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnsupportedReservationTerm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::UNSUPPORTEDRESERVATIONTERM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReservationOrderIdAlreadyExists", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::RESERVATIONORDERIDALREADYEXISTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RiskCheckFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::RISKCHECKFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CreateQuoteFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::CREATEQUOTEFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ActivateQuoteFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::ACTIVATEQUOTEFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NonsupportedAccountId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::NONSUPPORTEDACCOUNTID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PaymentInstrumentNotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::PAYMENTINSTRUMENTNOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MissingAppliedScopesForSingle", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::MISSINGAPPLIEDSCOPESFORSINGLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NoValidReservationsToReRate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::NOVALIDRESERVATIONSTORERATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReRateOnlyAllowedForEA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::RERATEONLYALLOWEDFOREA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OperationCannotBePerformedInCurrentState", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::OPERATIONCANNOTBEPERFORMEDINCURRENTSTATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidSingleAppliedScopesCount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDSINGLEAPPLIEDSCOPESCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidFulfillmentRequestParameters", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDFULFILLMENTREQUESTPARAMETERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotSupportedCountry", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::NOTSUPPORTEDCOUNTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidRefundQuantity", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::INVALIDREFUNDQUANTITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PurchaseError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::PURCHASEERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BillingCustomerInputError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::BILLINGCUSTOMERINPUTERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BillingPaymentInstrumentSoftError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::BILLINGPAYMENTINSTRUMENTSOFTERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BillingPaymentInstrumentHardError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::BILLINGPAYMENTINSTRUMENTHARDERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BillingTransientError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::BILLINGTRANSIENTERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BillingError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::BILLINGERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FulfillmentConfigurationError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::FULFILLMENTCONFIGURATIONERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FulfillmentOutOfStockError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::FULFILLMENTOUTOFSTOCKERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FulfillmentTransientError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::FULFILLMENTTRANSIENTERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FulfillmentError", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::FULFILLMENTERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CalculatePriceFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorResponseCode::CALCULATEPRICEFAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIErrorResponseCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIErrorResponseCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIErrorResponseCode::NOTSPECIFIED:
            val = "NotSpecified";
            break;
        case eOAIErrorResponseCode::INTERNALSERVERERROR:
            val = "InternalServerError";
            break;
        case eOAIErrorResponseCode::SERVERTIMEOUT:
            val = "ServerTimeout";
            break;
        case eOAIErrorResponseCode::AUTHORIZATIONFAILED:
            val = "AuthorizationFailed";
            break;
        case eOAIErrorResponseCode::BADREQUEST:
            val = "BadRequest";
            break;
        case eOAIErrorResponseCode::CLIENTCERTIFICATETHUMBPRINTNOTSET:
            val = "ClientCertificateThumbprintNotSet";
            break;
        case eOAIErrorResponseCode::INVALIDREQUESTCONTENT:
            val = "InvalidRequestContent";
            break;
        case eOAIErrorResponseCode::OPERATIONFAILED:
            val = "OperationFailed";
            break;
        case eOAIErrorResponseCode::HTTPMETHODNOTSUPPORTED:
            val = "HttpMethodNotSupported";
            break;
        case eOAIErrorResponseCode::INVALIDREQUESTURI:
            val = "InvalidRequestUri";
            break;
        case eOAIErrorResponseCode::MISSINGTENANTID:
            val = "MissingTenantId";
            break;
        case eOAIErrorResponseCode::INVALIDTENANTID:
            val = "InvalidTenantId";
            break;
        case eOAIErrorResponseCode::INVALIDRESERVATIONORDERID:
            val = "InvalidReservationOrderId";
            break;
        case eOAIErrorResponseCode::INVALIDRESERVATIONID:
            val = "InvalidReservationId";
            break;
        case eOAIErrorResponseCode::RESERVATIONIDNOTINRESERVATIONORDER:
            val = "ReservationIdNotInReservationOrder";
            break;
        case eOAIErrorResponseCode::RESERVATIONORDERNOTFOUND:
            val = "ReservationOrderNotFound";
            break;
        case eOAIErrorResponseCode::INVALIDSUBSCRIPTIONID:
            val = "InvalidSubscriptionId";
            break;
        case eOAIErrorResponseCode::INVALIDACCESSTOKEN:
            val = "InvalidAccessToken";
            break;
        case eOAIErrorResponseCode::INVALIDLOCATIONID:
            val = "InvalidLocationId";
            break;
        case eOAIErrorResponseCode::UNAUTHENTICATEDREQUESTSTHROTTLED:
            val = "UnauthenticatedRequestsThrottled";
            break;
        case eOAIErrorResponseCode::INVALIDHEALTHCHECKTYPE:
            val = "InvalidHealthCheckType";
            break;
        case eOAIErrorResponseCode::FORBIDDEN:
            val = "Forbidden";
            break;
        case eOAIErrorResponseCode::BILLINGSCOPEIDCANNOTBECHANGED:
            val = "BillingScopeIdCannotBeChanged";
            break;
        case eOAIErrorResponseCode::APPLIEDSCOPESNOTASSOCIATEDWITHCOMMERCEACCOUNT:
            val = "AppliedScopesNotAssociatedWithCommerceAccount";
            break;
        case eOAIErrorResponseCode::APPLIEDSCOPESSAMEASEXISTING:
            val = "AppliedScopesSameAsExisting";
            break;
        case eOAIErrorResponseCode::ROLEASSIGNMENTCREATIONFAILED:
            val = "RoleAssignmentCreationFailed";
            break;
        case eOAIErrorResponseCode::RESERVATIONORDERCREATIONFAILED:
            val = "ReservationOrderCreationFailed";
            break;
        case eOAIErrorResponseCode::RESERVATIONORDERNOTENABLED:
            val = "ReservationOrderNotEnabled";
            break;
        case eOAIErrorResponseCode::CAPACITYUPDATESCOPESFAILED:
            val = "CapacityUpdateScopesFailed";
            break;
        case eOAIErrorResponseCode::UNSUPPORTEDRESERVATIONTERM:
            val = "UnsupportedReservationTerm";
            break;
        case eOAIErrorResponseCode::RESERVATIONORDERIDALREADYEXISTS:
            val = "ReservationOrderIdAlreadyExists";
            break;
        case eOAIErrorResponseCode::RISKCHECKFAILED:
            val = "RiskCheckFailed";
            break;
        case eOAIErrorResponseCode::CREATEQUOTEFAILED:
            val = "CreateQuoteFailed";
            break;
        case eOAIErrorResponseCode::ACTIVATEQUOTEFAILED:
            val = "ActivateQuoteFailed";
            break;
        case eOAIErrorResponseCode::NONSUPPORTEDACCOUNTID:
            val = "NonsupportedAccountId";
            break;
        case eOAIErrorResponseCode::PAYMENTINSTRUMENTNOTFOUND:
            val = "PaymentInstrumentNotFound";
            break;
        case eOAIErrorResponseCode::MISSINGAPPLIEDSCOPESFORSINGLE:
            val = "MissingAppliedScopesForSingle";
            break;
        case eOAIErrorResponseCode::NOVALIDRESERVATIONSTORERATE:
            val = "NoValidReservationsToReRate";
            break;
        case eOAIErrorResponseCode::RERATEONLYALLOWEDFOREA:
            val = "ReRateOnlyAllowedForEA";
            break;
        case eOAIErrorResponseCode::OPERATIONCANNOTBEPERFORMEDINCURRENTSTATE:
            val = "OperationCannotBePerformedInCurrentState";
            break;
        case eOAIErrorResponseCode::INVALIDSINGLEAPPLIEDSCOPESCOUNT:
            val = "InvalidSingleAppliedScopesCount";
            break;
        case eOAIErrorResponseCode::INVALIDFULFILLMENTREQUESTPARAMETERS:
            val = "InvalidFulfillmentRequestParameters";
            break;
        case eOAIErrorResponseCode::NOTSUPPORTEDCOUNTRY:
            val = "NotSupportedCountry";
            break;
        case eOAIErrorResponseCode::INVALIDREFUNDQUANTITY:
            val = "InvalidRefundQuantity";
            break;
        case eOAIErrorResponseCode::PURCHASEERROR:
            val = "PurchaseError";
            break;
        case eOAIErrorResponseCode::BILLINGCUSTOMERINPUTERROR:
            val = "BillingCustomerInputError";
            break;
        case eOAIErrorResponseCode::BILLINGPAYMENTINSTRUMENTSOFTERROR:
            val = "BillingPaymentInstrumentSoftError";
            break;
        case eOAIErrorResponseCode::BILLINGPAYMENTINSTRUMENTHARDERROR:
            val = "BillingPaymentInstrumentHardError";
            break;
        case eOAIErrorResponseCode::BILLINGTRANSIENTERROR:
            val = "BillingTransientError";
            break;
        case eOAIErrorResponseCode::BILLINGERROR:
            val = "BillingError";
            break;
        case eOAIErrorResponseCode::FULFILLMENTCONFIGURATIONERROR:
            val = "FulfillmentConfigurationError";
            break;
        case eOAIErrorResponseCode::FULFILLMENTOUTOFSTOCKERROR:
            val = "FulfillmentOutOfStockError";
            break;
        case eOAIErrorResponseCode::FULFILLMENTTRANSIENTERROR:
            val = "FulfillmentTransientError";
            break;
        case eOAIErrorResponseCode::FULFILLMENTERROR:
            val = "FulfillmentError";
            break;
        case eOAIErrorResponseCode::CALCULATEPRICEFAILED:
            val = "CalculatePriceFailed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIErrorResponseCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIErrorResponseCode::eOAIErrorResponseCode OAIErrorResponseCode::getValue() const {
    return m_value;
}

void OAIErrorResponseCode::setValue(const OAIErrorResponseCode::eOAIErrorResponseCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIErrorResponseCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIErrorResponseCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
