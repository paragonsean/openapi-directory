/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2017-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationSplitProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationSplitProperties::OAIReservationSplitProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationSplitProperties::OAIReservationSplitProperties() {
    this->initializeModel();
}

OAIReservationSplitProperties::~OAIReservationSplitProperties() {}

void OAIReservationSplitProperties::initializeModel() {

    m_split_destinations_isSet = false;
    m_split_destinations_isValid = false;

    m_split_source_isSet = false;
    m_split_source_isValid = false;
}

void OAIReservationSplitProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationSplitProperties::fromJsonObject(QJsonObject json) {

    m_split_destinations_isValid = ::OpenAPI::fromJsonValue(m_split_destinations, json[QString("splitDestinations")]);
    m_split_destinations_isSet = !json[QString("splitDestinations")].isNull() && m_split_destinations_isValid;

    m_split_source_isValid = ::OpenAPI::fromJsonValue(m_split_source, json[QString("splitSource")]);
    m_split_source_isSet = !json[QString("splitSource")].isNull() && m_split_source_isValid;
}

QString OAIReservationSplitProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationSplitProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_split_destinations.size() > 0) {
        obj.insert(QString("splitDestinations"), ::OpenAPI::toJsonValue(m_split_destinations));
    }
    if (m_split_source_isSet) {
        obj.insert(QString("splitSource"), ::OpenAPI::toJsonValue(m_split_source));
    }
    return obj;
}

QList<QString> OAIReservationSplitProperties::getSplitDestinations() const {
    return m_split_destinations;
}
void OAIReservationSplitProperties::setSplitDestinations(const QList<QString> &split_destinations) {
    m_split_destinations = split_destinations;
    m_split_destinations_isSet = true;
}

bool OAIReservationSplitProperties::is_split_destinations_Set() const{
    return m_split_destinations_isSet;
}

bool OAIReservationSplitProperties::is_split_destinations_Valid() const{
    return m_split_destinations_isValid;
}

QString OAIReservationSplitProperties::getSplitSource() const {
    return m_split_source;
}
void OAIReservationSplitProperties::setSplitSource(const QString &split_source) {
    m_split_source = split_source;
    m_split_source_isSet = true;
}

bool OAIReservationSplitProperties::is_split_source_Set() const{
    return m_split_source_isSet;
}

bool OAIReservationSplitProperties::is_split_source_Valid() const{
    return m_split_source_isValid;
}

bool OAIReservationSplitProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_split_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationSplitProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
