/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2017-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILocation::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILocation::fromJson(QString jsonString) {
    
    if ( jsonString.compare("westus", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::WESTUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eastus", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::EASTUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eastus2", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::EASTUS2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("northcentralus", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::NORTHCENTRALUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("westus2", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::WESTUS2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("southcentralus", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::SOUTHCENTRALUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("centralus", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::CENTRALUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("westeurope", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::WESTEUROPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("northeurope", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::NORTHEUROPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("eastasia", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::EASTASIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("southeastasia", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::SOUTHEASTASIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("japaneast", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::JAPANEAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("japanwest", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::JAPANWEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("brazilsouth", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::BRAZILSOUTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("australiaeast", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::AUSTRALIAEAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("australiasoutheast", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::AUSTRALIASOUTHEAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("southindia", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::SOUTHINDIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("westindia", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::WESTINDIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("centralindia", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::CENTRALINDIA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("canadacentral", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::CANADACENTRAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("canadaeast", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::CANADAEAST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("uksouth", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::UKSOUTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("westcentralus", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::WESTCENTRALUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ukwest", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocation::UKWEST;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILocation::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILocation::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILocation::WESTUS:
            val = "westus";
            break;
        case eOAILocation::EASTUS:
            val = "eastus";
            break;
        case eOAILocation::EASTUS2:
            val = "eastus2";
            break;
        case eOAILocation::NORTHCENTRALUS:
            val = "northcentralus";
            break;
        case eOAILocation::WESTUS2:
            val = "westus2";
            break;
        case eOAILocation::SOUTHCENTRALUS:
            val = "southcentralus";
            break;
        case eOAILocation::CENTRALUS:
            val = "centralus";
            break;
        case eOAILocation::WESTEUROPE:
            val = "westeurope";
            break;
        case eOAILocation::NORTHEUROPE:
            val = "northeurope";
            break;
        case eOAILocation::EASTASIA:
            val = "eastasia";
            break;
        case eOAILocation::SOUTHEASTASIA:
            val = "southeastasia";
            break;
        case eOAILocation::JAPANEAST:
            val = "japaneast";
            break;
        case eOAILocation::JAPANWEST:
            val = "japanwest";
            break;
        case eOAILocation::BRAZILSOUTH:
            val = "brazilsouth";
            break;
        case eOAILocation::AUSTRALIAEAST:
            val = "australiaeast";
            break;
        case eOAILocation::AUSTRALIASOUTHEAST:
            val = "australiasoutheast";
            break;
        case eOAILocation::SOUTHINDIA:
            val = "southindia";
            break;
        case eOAILocation::WESTINDIA:
            val = "westindia";
            break;
        case eOAILocation::CENTRALINDIA:
            val = "centralindia";
            break;
        case eOAILocation::CANADACENTRAL:
            val = "canadacentral";
            break;
        case eOAILocation::CANADAEAST:
            val = "canadaeast";
            break;
        case eOAILocation::UKSOUTH:
            val = "uksouth";
            break;
        case eOAILocation::WESTCENTRALUS:
            val = "westcentralus";
            break;
        case eOAILocation::UKWEST:
            val = "ukwest";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILocation::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILocation::eOAILocation OAILocation::getValue() const {
    return m_value;
}

void OAILocation::setValue(const OAILocation::eOAILocation& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILocation::isSet() const {
    
    return m_value_isSet;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
