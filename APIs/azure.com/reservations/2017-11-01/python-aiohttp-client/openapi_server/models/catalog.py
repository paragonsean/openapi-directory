# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reservation_term import ReservationTerm
from openapi_server.models.sku_capability import SkuCapability
from openapi_server.models.sku_restriction import SkuRestriction
from openapi_server import util


class Catalog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[SkuCapability]=None, locations: List[str]=None, name: str=None, resource_type: str=None, restrictions: List[SkuRestriction]=None, size: str=None, terms: List[ReservationTerm]=None, tier: str=None):
        """Catalog - a model defined in OpenAPI

        :param capabilities: The capabilities of this Catalog.
        :param locations: The locations of this Catalog.
        :param name: The name of this Catalog.
        :param resource_type: The resource_type of this Catalog.
        :param restrictions: The restrictions of this Catalog.
        :param size: The size of this Catalog.
        :param terms: The terms of this Catalog.
        :param tier: The tier of this Catalog.
        """
        self.openapi_types = {
            'capabilities': List[SkuCapability],
            'locations': List[str],
            'name': str,
            'resource_type': str,
            'restrictions': List[SkuRestriction],
            'size': str,
            'terms': List[ReservationTerm],
            'tier': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'locations': 'locations',
            'name': 'name',
            'resource_type': 'resourceType',
            'restrictions': 'restrictions',
            'size': 'size',
            'terms': 'terms',
            'tier': 'tier'
        }

        self._capabilities = capabilities
        self._locations = locations
        self._name = name
        self._resource_type = resource_type
        self._restrictions = restrictions
        self._size = size
        self._terms = terms
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Catalog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Catalog of this Catalog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this Catalog.


        :return: The capabilities of this Catalog.
        :rtype: List[SkuCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Catalog.


        :param capabilities: The capabilities of this Catalog.
        :type capabilities: List[SkuCapability]
        """

        self._capabilities = capabilities

    @property
    def locations(self):
        """Gets the locations of this Catalog.


        :return: The locations of this Catalog.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Catalog.


        :param locations: The locations of this Catalog.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this Catalog.

        The name of SKU

        :return: The name of this Catalog.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Catalog.

        The name of SKU

        :param name: The name of this Catalog.
        :type name: str
        """

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this Catalog.

        The type of resource the SKU applies to.

        :return: The resource_type of this Catalog.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Catalog.

        The type of resource the SKU applies to.

        :param resource_type: The resource_type of this Catalog.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def restrictions(self):
        """Gets the restrictions of this Catalog.


        :return: The restrictions of this Catalog.
        :rtype: List[SkuRestriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this Catalog.


        :param restrictions: The restrictions of this Catalog.
        :type restrictions: List[SkuRestriction]
        """

        self._restrictions = restrictions

    @property
    def size(self):
        """Gets the size of this Catalog.

        The size of this SKU

        :return: The size of this Catalog.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Catalog.

        The size of this SKU

        :param size: The size of this Catalog.
        :type size: str
        """

        self._size = size

    @property
    def terms(self):
        """Gets the terms of this Catalog.

        Available reservation terms for this resource

        :return: The terms of this Catalog.
        :rtype: List[ReservationTerm]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this Catalog.

        Available reservation terms for this resource

        :param terms: The terms of this Catalog.
        :type terms: List[ReservationTerm]
        """

        self._terms = terms

    @property
    def tier(self):
        """Gets the tier of this Catalog.

        The tier of this SKU

        :return: The tier of this Catalog.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this Catalog.

        The tier of this SKU

        :param tier: The tier of this Catalog.
        :type tier: str
        """

        self._tier = tier
