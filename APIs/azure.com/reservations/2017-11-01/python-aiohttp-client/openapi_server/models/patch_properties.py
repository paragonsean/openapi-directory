# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.applied_scope_type import AppliedScopeType
from openapi_server import util


class PatchProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_scope_type: AppliedScopeType=None, applied_scopes: List[str]=None):
        """PatchProperties - a model defined in OpenAPI

        :param applied_scope_type: The applied_scope_type of this PatchProperties.
        :param applied_scopes: The applied_scopes of this PatchProperties.
        """
        self.openapi_types = {
            'applied_scope_type': AppliedScopeType,
            'applied_scopes': List[str]
        }

        self.attribute_map = {
            'applied_scope_type': 'appliedScopeType',
            'applied_scopes': 'appliedScopes'
        }

        self._applied_scope_type = applied_scope_type
        self._applied_scopes = applied_scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchProperties of this PatchProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_scope_type(self):
        """Gets the applied_scope_type of this PatchProperties.


        :return: The applied_scope_type of this PatchProperties.
        :rtype: AppliedScopeType
        """
        return self._applied_scope_type

    @applied_scope_type.setter
    def applied_scope_type(self, applied_scope_type):
        """Sets the applied_scope_type of this PatchProperties.


        :param applied_scope_type: The applied_scope_type of this PatchProperties.
        :type applied_scope_type: AppliedScopeType
        """

        self._applied_scope_type = applied_scope_type

    @property
    def applied_scopes(self):
        """Gets the applied_scopes of this PatchProperties.

        List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.

        :return: The applied_scopes of this PatchProperties.
        :rtype: List[str]
        """
        return self._applied_scopes

    @applied_scopes.setter
    def applied_scopes(self, applied_scopes):
        """Sets the applied_scopes of this PatchProperties.

        List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.

        :param applied_scopes: The applied_scopes of this PatchProperties.
        :type applied_scopes: List[str]
        """

        self._applied_scopes = applied_scopes
