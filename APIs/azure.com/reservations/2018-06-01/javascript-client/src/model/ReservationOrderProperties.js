/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReservationResponse from './ReservationResponse';
import ReservationTerm from './ReservationTerm';

/**
 * The ReservationOrderProperties model module.
 * @module model/ReservationOrderProperties
 * @version 2018-06-01
 */
class ReservationOrderProperties {
    /**
     * Constructs a new <code>ReservationOrderProperties</code>.
     * @alias module:model/ReservationOrderProperties
     */
    constructor() { 
        
        ReservationOrderProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReservationOrderProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReservationOrderProperties} obj Optional instance to populate.
     * @return {module:model/ReservationOrderProperties} The populated <code>ReservationOrderProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReservationOrderProperties();

            if (data.hasOwnProperty('createdDateTime')) {
                obj['createdDateTime'] = ApiClient.convertToType(data['createdDateTime'], 'Date');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'Date');
            }
            if (data.hasOwnProperty('originalQuantity')) {
                obj['originalQuantity'] = ApiClient.convertToType(data['originalQuantity'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('requestDateTime')) {
                obj['requestDateTime'] = ApiClient.convertToType(data['requestDateTime'], 'Date');
            }
            if (data.hasOwnProperty('reservations')) {
                obj['reservations'] = ApiClient.convertToType(data['reservations'], [ReservationResponse]);
            }
            if (data.hasOwnProperty('term')) {
                obj['term'] = ReservationTerm.constructFromObject(data['term']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReservationOrderProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReservationOrderProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['reservations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reservations'])) {
                throw new Error("Expected the field `reservations` to be an array in the JSON data but got " + data['reservations']);
            }
            // validate the optional field `reservations` (array)
            for (const item of data['reservations']) {
                ReservationResponse.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * This is the DateTime when the reservation was created.
 * @member {Date} createdDateTime
 */
ReservationOrderProperties.prototype['createdDateTime'] = undefined;

/**
 * Friendly name for user to easily identified the reservation.
 * @member {String} displayName
 */
ReservationOrderProperties.prototype['displayName'] = undefined;

/**
 * This is the date when the Reservation will expire.
 * @member {Date} expiryDate
 */
ReservationOrderProperties.prototype['expiryDate'] = undefined;

/**
 * Total Quantity of the SKUs purchased in the Reservation.
 * @member {Number} originalQuantity
 */
ReservationOrderProperties.prototype['originalQuantity'] = undefined;

/**
 * Current state of the reservation.
 * @member {String} provisioningState
 */
ReservationOrderProperties.prototype['provisioningState'] = undefined;

/**
 * This is the DateTime when the reservation was initially requested for purchase.
 * @member {Date} requestDateTime
 */
ReservationOrderProperties.prototype['requestDateTime'] = undefined;

/**
 * @member {Array.<module:model/ReservationResponse>} reservations
 */
ReservationOrderProperties.prototype['reservations'] = undefined;

/**
 * @member {module:model/ReservationTerm} term
 */
ReservationOrderProperties.prototype['term'] = undefined;






export default ReservationOrderProperties;

