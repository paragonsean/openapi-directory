/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AzureReservation);
  }
}(this, function(expect, AzureReservation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AzureReservation.ReservationProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReservationProperties', function() {
    it('should create an instance of ReservationProperties', function() {
      // uncomment below and update the code to test ReservationProperties
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be.a(AzureReservation.ReservationProperties);
    });

    it('should have the property appliedScopeType (base name: "appliedScopeType")', function() {
      // uncomment below and update the code to test the property appliedScopeType
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property appliedScopes (base name: "appliedScopes")', function() {
      // uncomment below and update the code to test the property appliedScopes
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property effectiveDateTime (base name: "effectiveDateTime")', function() {
      // uncomment below and update the code to test the property effectiveDateTime
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property expiryDate (base name: "expiryDate")', function() {
      // uncomment below and update the code to test the property expiryDate
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property extendedStatusInfo (base name: "extendedStatusInfo")', function() {
      // uncomment below and update the code to test the property extendedStatusInfo
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property instanceFlexibility (base name: "instanceFlexibility")', function() {
      // uncomment below and update the code to test the property instanceFlexibility
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdatedDateTime (base name: "lastUpdatedDateTime")', function() {
      // uncomment below and update the code to test the property lastUpdatedDateTime
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property mergeProperties (base name: "mergeProperties")', function() {
      // uncomment below and update the code to test the property mergeProperties
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property quantity (base name: "quantity")', function() {
      // uncomment below and update the code to test the property quantity
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property reservedResourceType (base name: "reservedResourceType")', function() {
      // uncomment below and update the code to test the property reservedResourceType
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property skuDescription (base name: "skuDescription")', function() {
      // uncomment below and update the code to test the property skuDescription
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

    it('should have the property splitProperties (base name: "splitProperties")', function() {
      // uncomment below and update the code to test the property splitProperties
      //var instance = new AzureReservation.ReservationProperties();
      //expect(instance).to.be();
    });

  });

}));
