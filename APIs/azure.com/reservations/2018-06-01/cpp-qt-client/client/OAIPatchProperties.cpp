/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatchProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatchProperties::OAIPatchProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatchProperties::OAIPatchProperties() {
    this->initializeModel();
}

OAIPatchProperties::~OAIPatchProperties() {}

void OAIPatchProperties::initializeModel() {

    m_applied_scope_type_isSet = false;
    m_applied_scope_type_isValid = false;

    m_applied_scopes_isSet = false;
    m_applied_scopes_isValid = false;

    m_instance_flexibility_isSet = false;
    m_instance_flexibility_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPatchProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatchProperties::fromJsonObject(QJsonObject json) {

    m_applied_scope_type_isValid = ::OpenAPI::fromJsonValue(m_applied_scope_type, json[QString("appliedScopeType")]);
    m_applied_scope_type_isSet = !json[QString("appliedScopeType")].isNull() && m_applied_scope_type_isValid;

    m_applied_scopes_isValid = ::OpenAPI::fromJsonValue(m_applied_scopes, json[QString("appliedScopes")]);
    m_applied_scopes_isSet = !json[QString("appliedScopes")].isNull() && m_applied_scopes_isValid;

    m_instance_flexibility_isValid = ::OpenAPI::fromJsonValue(m_instance_flexibility, json[QString("instanceFlexibility")]);
    m_instance_flexibility_isSet = !json[QString("instanceFlexibility")].isNull() && m_instance_flexibility_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIPatchProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatchProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_scope_type.isSet()) {
        obj.insert(QString("appliedScopeType"), ::OpenAPI::toJsonValue(m_applied_scope_type));
    }
    if (m_applied_scopes.size() > 0) {
        obj.insert(QString("appliedScopes"), ::OpenAPI::toJsonValue(m_applied_scopes));
    }
    if (m_instance_flexibility.isSet()) {
        obj.insert(QString("instanceFlexibility"), ::OpenAPI::toJsonValue(m_instance_flexibility));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIAppliedScopeType OAIPatchProperties::getAppliedScopeType() const {
    return m_applied_scope_type;
}
void OAIPatchProperties::setAppliedScopeType(const OAIAppliedScopeType &applied_scope_type) {
    m_applied_scope_type = applied_scope_type;
    m_applied_scope_type_isSet = true;
}

bool OAIPatchProperties::is_applied_scope_type_Set() const{
    return m_applied_scope_type_isSet;
}

bool OAIPatchProperties::is_applied_scope_type_Valid() const{
    return m_applied_scope_type_isValid;
}

QList<QString> OAIPatchProperties::getAppliedScopes() const {
    return m_applied_scopes;
}
void OAIPatchProperties::setAppliedScopes(const QList<QString> &applied_scopes) {
    m_applied_scopes = applied_scopes;
    m_applied_scopes_isSet = true;
}

bool OAIPatchProperties::is_applied_scopes_Set() const{
    return m_applied_scopes_isSet;
}

bool OAIPatchProperties::is_applied_scopes_Valid() const{
    return m_applied_scopes_isValid;
}

OAIInstanceFlexibility OAIPatchProperties::getInstanceFlexibility() const {
    return m_instance_flexibility;
}
void OAIPatchProperties::setInstanceFlexibility(const OAIInstanceFlexibility &instance_flexibility) {
    m_instance_flexibility = instance_flexibility;
    m_instance_flexibility_isSet = true;
}

bool OAIPatchProperties::is_instance_flexibility_Set() const{
    return m_instance_flexibility_isSet;
}

bool OAIPatchProperties::is_instance_flexibility_Valid() const{
    return m_instance_flexibility_isValid;
}

QString OAIPatchProperties::getName() const {
    return m_name;
}
void OAIPatchProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPatchProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPatchProperties::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPatchProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_scope_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applied_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_flexibility.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatchProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
