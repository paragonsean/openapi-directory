/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppliedScopeType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppliedScopeType::OAIAppliedScopeType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppliedScopeType::OAIAppliedScopeType() {
    this->initializeModel();
}

OAIAppliedScopeType::~OAIAppliedScopeType() {}

void OAIAppliedScopeType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAppliedScopeType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAppliedScopeType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Single", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppliedScopeType::SINGLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Shared", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppliedScopeType::SHARED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAppliedScopeType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAppliedScopeType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAppliedScopeType::SINGLE:
            val = "Single";
            break;
        case eOAIAppliedScopeType::SHARED:
            val = "Shared";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAppliedScopeType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAppliedScopeType::eOAIAppliedScopeType OAIAppliedScopeType::getValue() const {
    return m_value;
}

void OAIAppliedScopeType::setValue(const OAIAppliedScopeType::eOAIAppliedScopeType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAppliedScopeType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAppliedScopeType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
