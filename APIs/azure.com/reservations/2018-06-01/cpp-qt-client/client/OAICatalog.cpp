/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalog::OAICatalog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalog::OAICatalog() {
    this->initializeModel();
}

OAICatalog::~OAICatalog() {}

void OAICatalog::initializeModel() {

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_sku_properties_isSet = false;
    m_sku_properties_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;
}

void OAICatalog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalog::fromJsonObject(QJsonObject json) {

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_sku_properties_isValid = ::OpenAPI::fromJsonValue(m_sku_properties, json[QString("skuProperties")]);
    m_sku_properties_isSet = !json[QString("skuProperties")].isNull() && m_sku_properties_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;
}

QString OAICatalog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalog::asJsonObject() const {
    QJsonObject obj;
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_restrictions.size() > 0) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_sku_properties.size() > 0) {
        obj.insert(QString("skuProperties"), ::OpenAPI::toJsonValue(m_sku_properties));
    }
    if (m_terms.size() > 0) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    return obj;
}

QList<QString> OAICatalog::getLocations() const {
    return m_locations;
}
void OAICatalog::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAICatalog::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAICatalog::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAICatalog::getName() const {
    return m_name;
}
void OAICatalog::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalog::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalog::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICatalog::getResourceType() const {
    return m_resource_type;
}
void OAICatalog::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAICatalog::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAICatalog::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList<OAISkuRestriction> OAICatalog::getRestrictions() const {
    return m_restrictions;
}
void OAICatalog::setRestrictions(const QList<OAISkuRestriction> &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAICatalog::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAICatalog::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QList<OAISkuProperty> OAICatalog::getSkuProperties() const {
    return m_sku_properties;
}
void OAICatalog::setSkuProperties(const QList<OAISkuProperty> &sku_properties) {
    m_sku_properties = sku_properties;
    m_sku_properties_isSet = true;
}

bool OAICatalog::is_sku_properties_Set() const{
    return m_sku_properties_isSet;
}

bool OAICatalog::is_sku_properties_Valid() const{
    return m_sku_properties_isValid;
}

QList<OAIReservationTerm> OAICatalog::getTerms() const {
    return m_terms;
}
void OAICatalog::setTerms(const QList<OAIReservationTerm> &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAICatalog::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAICatalog::is_terms_Valid() const{
    return m_terms_isValid;
}

bool OAICatalog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
