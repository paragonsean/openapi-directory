/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservationMergeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservationMergeProperties::OAIReservationMergeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservationMergeProperties::OAIReservationMergeProperties() {
    this->initializeModel();
}

OAIReservationMergeProperties::~OAIReservationMergeProperties() {}

void OAIReservationMergeProperties::initializeModel() {

    m_merge_destination_isSet = false;
    m_merge_destination_isValid = false;

    m_merge_sources_isSet = false;
    m_merge_sources_isValid = false;
}

void OAIReservationMergeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservationMergeProperties::fromJsonObject(QJsonObject json) {

    m_merge_destination_isValid = ::OpenAPI::fromJsonValue(m_merge_destination, json[QString("mergeDestination")]);
    m_merge_destination_isSet = !json[QString("mergeDestination")].isNull() && m_merge_destination_isValid;

    m_merge_sources_isValid = ::OpenAPI::fromJsonValue(m_merge_sources, json[QString("mergeSources")]);
    m_merge_sources_isSet = !json[QString("mergeSources")].isNull() && m_merge_sources_isValid;
}

QString OAIReservationMergeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservationMergeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_merge_destination_isSet) {
        obj.insert(QString("mergeDestination"), ::OpenAPI::toJsonValue(m_merge_destination));
    }
    if (m_merge_sources.size() > 0) {
        obj.insert(QString("mergeSources"), ::OpenAPI::toJsonValue(m_merge_sources));
    }
    return obj;
}

QString OAIReservationMergeProperties::getMergeDestination() const {
    return m_merge_destination;
}
void OAIReservationMergeProperties::setMergeDestination(const QString &merge_destination) {
    m_merge_destination = merge_destination;
    m_merge_destination_isSet = true;
}

bool OAIReservationMergeProperties::is_merge_destination_Set() const{
    return m_merge_destination_isSet;
}

bool OAIReservationMergeProperties::is_merge_destination_Valid() const{
    return m_merge_destination_isValid;
}

QList<QString> OAIReservationMergeProperties::getMergeSources() const {
    return m_merge_sources;
}
void OAIReservationMergeProperties::setMergeSources(const QList<QString> &merge_sources) {
    m_merge_sources = merge_sources;
    m_merge_sources_isSet = true;
}

bool OAIReservationMergeProperties::is_merge_sources_Set() const{
    return m_merge_sources_isSet;
}

bool OAIReservationMergeProperties::is_merge_sources_Valid() const{
    return m_merge_sources_isValid;
}

bool OAIReservationMergeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merge_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merge_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservationMergeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
