/**
 * Azure Reservation
 * This API describe Azure Reservation
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReservationProperties.h
 *
 * 
 */

#ifndef OAIReservationProperties_H
#define OAIReservationProperties_H

#include <QJsonObject>

#include "OAIAppliedScopeType.h"
#include "OAIExtendedStatusInfo.h"
#include "OAIInstanceFlexibility.h"
#include "OAIReservationMergeProperties.h"
#include "OAIReservationSplitProperties.h"
#include "OAIReservedResourceType.h"
#include <QDate>
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExtendedStatusInfo;
class OAIReservationMergeProperties;
class OAIReservationSplitProperties;

class OAIReservationProperties : public OAIObject {
public:
    OAIReservationProperties();
    OAIReservationProperties(QString json);
    ~OAIReservationProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAppliedScopeType getAppliedScopeType() const;
    void setAppliedScopeType(const OAIAppliedScopeType &applied_scope_type);
    bool is_applied_scope_type_Set() const;
    bool is_applied_scope_type_Valid() const;

    QList<QString> getAppliedScopes() const;
    void setAppliedScopes(const QList<QString> &applied_scopes);
    bool is_applied_scopes_Set() const;
    bool is_applied_scopes_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QDateTime getEffectiveDateTime() const;
    void setEffectiveDateTime(const QDateTime &effective_date_time);
    bool is_effective_date_time_Set() const;
    bool is_effective_date_time_Valid() const;

    QDate getExpiryDate() const;
    void setExpiryDate(const QDate &expiry_date);
    bool is_expiry_date_Set() const;
    bool is_expiry_date_Valid() const;

    OAIExtendedStatusInfo getExtendedStatusInfo() const;
    void setExtendedStatusInfo(const OAIExtendedStatusInfo &extended_status_info);
    bool is_extended_status_info_Set() const;
    bool is_extended_status_info_Valid() const;

    OAIInstanceFlexibility getInstanceFlexibility() const;
    void setInstanceFlexibility(const OAIInstanceFlexibility &instance_flexibility);
    bool is_instance_flexibility_Set() const;
    bool is_instance_flexibility_Valid() const;

    QDateTime getLastUpdatedDateTime() const;
    void setLastUpdatedDateTime(const QDateTime &last_updated_date_time);
    bool is_last_updated_date_time_Set() const;
    bool is_last_updated_date_time_Valid() const;

    OAIReservationMergeProperties getMergeProperties() const;
    void setMergeProperties(const OAIReservationMergeProperties &merge_properties);
    bool is_merge_properties_Set() const;
    bool is_merge_properties_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    qint32 getQuantity() const;
    void setQuantity(const qint32 &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    OAIReservedResourceType getReservedResourceType() const;
    void setReservedResourceType(const OAIReservedResourceType &reserved_resource_type);
    bool is_reserved_resource_type_Set() const;
    bool is_reserved_resource_type_Valid() const;

    QString getSkuDescription() const;
    void setSkuDescription(const QString &sku_description);
    bool is_sku_description_Set() const;
    bool is_sku_description_Valid() const;

    OAIReservationSplitProperties getSplitProperties() const;
    void setSplitProperties(const OAIReservationSplitProperties &split_properties);
    bool is_split_properties_Set() const;
    bool is_split_properties_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAppliedScopeType m_applied_scope_type;
    bool m_applied_scope_type_isSet;
    bool m_applied_scope_type_isValid;

    QList<QString> m_applied_scopes;
    bool m_applied_scopes_isSet;
    bool m_applied_scopes_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QDateTime m_effective_date_time;
    bool m_effective_date_time_isSet;
    bool m_effective_date_time_isValid;

    QDate m_expiry_date;
    bool m_expiry_date_isSet;
    bool m_expiry_date_isValid;

    OAIExtendedStatusInfo m_extended_status_info;
    bool m_extended_status_info_isSet;
    bool m_extended_status_info_isValid;

    OAIInstanceFlexibility m_instance_flexibility;
    bool m_instance_flexibility_isSet;
    bool m_instance_flexibility_isValid;

    QDateTime m_last_updated_date_time;
    bool m_last_updated_date_time_isSet;
    bool m_last_updated_date_time_isValid;

    OAIReservationMergeProperties m_merge_properties;
    bool m_merge_properties_isSet;
    bool m_merge_properties_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    qint32 m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    OAIReservedResourceType m_reserved_resource_type;
    bool m_reserved_resource_type_isSet;
    bool m_reserved_resource_type_isValid;

    QString m_sku_description;
    bool m_sku_description_isSet;
    bool m_sku_description_isValid;

    OAIReservationSplitProperties m_split_properties;
    bool m_split_properties_isSet;
    bool m_split_properties_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReservationProperties)

#endif // OAIReservationProperties_H
