/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2018-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrontendEndpointUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrontendEndpointUpdateParameters::OAIFrontendEndpointUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrontendEndpointUpdateParameters::OAIFrontendEndpointUpdateParameters() {
    this->initializeModel();
}

OAIFrontendEndpointUpdateParameters::~OAIFrontendEndpointUpdateParameters() {}

void OAIFrontendEndpointUpdateParameters::initializeModel() {

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_session_affinity_enabled_state_isSet = false;
    m_session_affinity_enabled_state_isValid = false;

    m_session_affinity_ttl_seconds_isSet = false;
    m_session_affinity_ttl_seconds_isValid = false;

    m_web_application_firewall_policy_link_isSet = false;
    m_web_application_firewall_policy_link_isValid = false;
}

void OAIFrontendEndpointUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrontendEndpointUpdateParameters::fromJsonObject(QJsonObject json) {

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_session_affinity_enabled_state_isValid = ::OpenAPI::fromJsonValue(m_session_affinity_enabled_state, json[QString("sessionAffinityEnabledState")]);
    m_session_affinity_enabled_state_isSet = !json[QString("sessionAffinityEnabledState")].isNull() && m_session_affinity_enabled_state_isValid;

    m_session_affinity_ttl_seconds_isValid = ::OpenAPI::fromJsonValue(m_session_affinity_ttl_seconds, json[QString("sessionAffinityTtlSeconds")]);
    m_session_affinity_ttl_seconds_isSet = !json[QString("sessionAffinityTtlSeconds")].isNull() && m_session_affinity_ttl_seconds_isValid;

    m_web_application_firewall_policy_link_isValid = ::OpenAPI::fromJsonValue(m_web_application_firewall_policy_link, json[QString("webApplicationFirewallPolicyLink")]);
    m_web_application_firewall_policy_link_isSet = !json[QString("webApplicationFirewallPolicyLink")].isNull() && m_web_application_firewall_policy_link_isValid;
}

QString OAIFrontendEndpointUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrontendEndpointUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_session_affinity_enabled_state_isSet) {
        obj.insert(QString("sessionAffinityEnabledState"), ::OpenAPI::toJsonValue(m_session_affinity_enabled_state));
    }
    if (m_session_affinity_ttl_seconds_isSet) {
        obj.insert(QString("sessionAffinityTtlSeconds"), ::OpenAPI::toJsonValue(m_session_affinity_ttl_seconds));
    }
    if (m_web_application_firewall_policy_link.isSet()) {
        obj.insert(QString("webApplicationFirewallPolicyLink"), ::OpenAPI::toJsonValue(m_web_application_firewall_policy_link));
    }
    return obj;
}

QString OAIFrontendEndpointUpdateParameters::getHostName() const {
    return m_host_name;
}
void OAIFrontendEndpointUpdateParameters::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIFrontendEndpointUpdateParameters::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIFrontendEndpointUpdateParameters::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAIFrontendEndpointUpdateParameters::getSessionAffinityEnabledState() const {
    return m_session_affinity_enabled_state;
}
void OAIFrontendEndpointUpdateParameters::setSessionAffinityEnabledState(const QString &session_affinity_enabled_state) {
    m_session_affinity_enabled_state = session_affinity_enabled_state;
    m_session_affinity_enabled_state_isSet = true;
}

bool OAIFrontendEndpointUpdateParameters::is_session_affinity_enabled_state_Set() const{
    return m_session_affinity_enabled_state_isSet;
}

bool OAIFrontendEndpointUpdateParameters::is_session_affinity_enabled_state_Valid() const{
    return m_session_affinity_enabled_state_isValid;
}

qint32 OAIFrontendEndpointUpdateParameters::getSessionAffinityTtlSeconds() const {
    return m_session_affinity_ttl_seconds;
}
void OAIFrontendEndpointUpdateParameters::setSessionAffinityTtlSeconds(const qint32 &session_affinity_ttl_seconds) {
    m_session_affinity_ttl_seconds = session_affinity_ttl_seconds;
    m_session_affinity_ttl_seconds_isSet = true;
}

bool OAIFrontendEndpointUpdateParameters::is_session_affinity_ttl_seconds_Set() const{
    return m_session_affinity_ttl_seconds_isSet;
}

bool OAIFrontendEndpointUpdateParameters::is_session_affinity_ttl_seconds_Valid() const{
    return m_session_affinity_ttl_seconds_isValid;
}

OAIFrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink OAIFrontendEndpointUpdateParameters::getWebApplicationFirewallPolicyLink() const {
    return m_web_application_firewall_policy_link;
}
void OAIFrontendEndpointUpdateParameters::setWebApplicationFirewallPolicyLink(const OAIFrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink &web_application_firewall_policy_link) {
    m_web_application_firewall_policy_link = web_application_firewall_policy_link;
    m_web_application_firewall_policy_link_isSet = true;
}

bool OAIFrontendEndpointUpdateParameters::is_web_application_firewall_policy_link_Set() const{
    return m_web_application_firewall_policy_link_isSet;
}

bool OAIFrontendEndpointUpdateParameters::is_web_application_firewall_policy_link_Valid() const{
    return m_web_application_firewall_policy_link_isValid;
}

bool OAIFrontendEndpointUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_affinity_enabled_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_affinity_ttl_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_application_firewall_policy_link.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrontendEndpointUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
