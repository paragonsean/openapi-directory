/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2018-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackend.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackend::OAIBackend(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackend::OAIBackend() {
    this->initializeModel();
}

OAIBackend::~OAIBackend() {}

void OAIBackend::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_backend_host_header_isSet = false;
    m_backend_host_header_isValid = false;

    m_enabled_state_isSet = false;
    m_enabled_state_isValid = false;

    m_http_port_isSet = false;
    m_http_port_isValid = false;

    m_https_port_isSet = false;
    m_https_port_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIBackend::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackend::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_backend_host_header_isValid = ::OpenAPI::fromJsonValue(m_backend_host_header, json[QString("backendHostHeader")]);
    m_backend_host_header_isSet = !json[QString("backendHostHeader")].isNull() && m_backend_host_header_isValid;

    m_enabled_state_isValid = ::OpenAPI::fromJsonValue(m_enabled_state, json[QString("enabledState")]);
    m_enabled_state_isSet = !json[QString("enabledState")].isNull() && m_enabled_state_isValid;

    m_http_port_isValid = ::OpenAPI::fromJsonValue(m_http_port, json[QString("httpPort")]);
    m_http_port_isSet = !json[QString("httpPort")].isNull() && m_http_port_isValid;

    m_https_port_isValid = ::OpenAPI::fromJsonValue(m_https_port, json[QString("httpsPort")]);
    m_https_port_isSet = !json[QString("httpsPort")].isNull() && m_https_port_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIBackend::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackend::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_backend_host_header_isSet) {
        obj.insert(QString("backendHostHeader"), ::OpenAPI::toJsonValue(m_backend_host_header));
    }
    if (m_enabled_state_isSet) {
        obj.insert(QString("enabledState"), ::OpenAPI::toJsonValue(m_enabled_state));
    }
    if (m_http_port_isSet) {
        obj.insert(QString("httpPort"), ::OpenAPI::toJsonValue(m_http_port));
    }
    if (m_https_port_isSet) {
        obj.insert(QString("httpsPort"), ::OpenAPI::toJsonValue(m_https_port));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIBackend::getAddress() const {
    return m_address;
}
void OAIBackend::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIBackend::is_address_Set() const{
    return m_address_isSet;
}

bool OAIBackend::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIBackend::getBackendHostHeader() const {
    return m_backend_host_header;
}
void OAIBackend::setBackendHostHeader(const QString &backend_host_header) {
    m_backend_host_header = backend_host_header;
    m_backend_host_header_isSet = true;
}

bool OAIBackend::is_backend_host_header_Set() const{
    return m_backend_host_header_isSet;
}

bool OAIBackend::is_backend_host_header_Valid() const{
    return m_backend_host_header_isValid;
}

QString OAIBackend::getEnabledState() const {
    return m_enabled_state;
}
void OAIBackend::setEnabledState(const QString &enabled_state) {
    m_enabled_state = enabled_state;
    m_enabled_state_isSet = true;
}

bool OAIBackend::is_enabled_state_Set() const{
    return m_enabled_state_isSet;
}

bool OAIBackend::is_enabled_state_Valid() const{
    return m_enabled_state_isValid;
}

qint32 OAIBackend::getHttpPort() const {
    return m_http_port;
}
void OAIBackend::setHttpPort(const qint32 &http_port) {
    m_http_port = http_port;
    m_http_port_isSet = true;
}

bool OAIBackend::is_http_port_Set() const{
    return m_http_port_isSet;
}

bool OAIBackend::is_http_port_Valid() const{
    return m_http_port_isValid;
}

qint32 OAIBackend::getHttpsPort() const {
    return m_https_port;
}
void OAIBackend::setHttpsPort(const qint32 &https_port) {
    m_https_port = https_port;
    m_https_port_isSet = true;
}

bool OAIBackend::is_https_port_Set() const{
    return m_https_port_isSet;
}

bool OAIBackend::is_https_port_Valid() const{
    return m_https_port_isValid;
}

qint32 OAIBackend::getPriority() const {
    return m_priority;
}
void OAIBackend::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIBackend::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIBackend::is_priority_Valid() const{
    return m_priority_isValid;
}

qint32 OAIBackend::getWeight() const {
    return m_weight;
}
void OAIBackend::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIBackend::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIBackend::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIBackend::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_host_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackend::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
