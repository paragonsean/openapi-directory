/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2018-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutingRuleProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutingRuleProperties::OAIRoutingRuleProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutingRuleProperties::OAIRoutingRuleProperties() {
    this->initializeModel();
}

OAIRoutingRuleProperties::~OAIRoutingRuleProperties() {}

void OAIRoutingRuleProperties::initializeModel() {

    m_resource_state_isSet = false;
    m_resource_state_isValid = false;

    m_accepted_protocols_isSet = false;
    m_accepted_protocols_isValid = false;

    m_backend_pool_isSet = false;
    m_backend_pool_isValid = false;

    m_cache_configuration_isSet = false;
    m_cache_configuration_isValid = false;

    m_custom_forwarding_path_isSet = false;
    m_custom_forwarding_path_isValid = false;

    m_enabled_state_isSet = false;
    m_enabled_state_isValid = false;

    m_forwarding_protocol_isSet = false;
    m_forwarding_protocol_isValid = false;

    m_frontend_endpoints_isSet = false;
    m_frontend_endpoints_isValid = false;

    m_patterns_to_match_isSet = false;
    m_patterns_to_match_isValid = false;
}

void OAIRoutingRuleProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutingRuleProperties::fromJsonObject(QJsonObject json) {

    m_resource_state_isValid = ::OpenAPI::fromJsonValue(m_resource_state, json[QString("resourceState")]);
    m_resource_state_isSet = !json[QString("resourceState")].isNull() && m_resource_state_isValid;

    m_accepted_protocols_isValid = ::OpenAPI::fromJsonValue(m_accepted_protocols, json[QString("acceptedProtocols")]);
    m_accepted_protocols_isSet = !json[QString("acceptedProtocols")].isNull() && m_accepted_protocols_isValid;

    m_backend_pool_isValid = ::OpenAPI::fromJsonValue(m_backend_pool, json[QString("backendPool")]);
    m_backend_pool_isSet = !json[QString("backendPool")].isNull() && m_backend_pool_isValid;

    m_cache_configuration_isValid = ::OpenAPI::fromJsonValue(m_cache_configuration, json[QString("cacheConfiguration")]);
    m_cache_configuration_isSet = !json[QString("cacheConfiguration")].isNull() && m_cache_configuration_isValid;

    m_custom_forwarding_path_isValid = ::OpenAPI::fromJsonValue(m_custom_forwarding_path, json[QString("customForwardingPath")]);
    m_custom_forwarding_path_isSet = !json[QString("customForwardingPath")].isNull() && m_custom_forwarding_path_isValid;

    m_enabled_state_isValid = ::OpenAPI::fromJsonValue(m_enabled_state, json[QString("enabledState")]);
    m_enabled_state_isSet = !json[QString("enabledState")].isNull() && m_enabled_state_isValid;

    m_forwarding_protocol_isValid = ::OpenAPI::fromJsonValue(m_forwarding_protocol, json[QString("forwardingProtocol")]);
    m_forwarding_protocol_isSet = !json[QString("forwardingProtocol")].isNull() && m_forwarding_protocol_isValid;

    m_frontend_endpoints_isValid = ::OpenAPI::fromJsonValue(m_frontend_endpoints, json[QString("frontendEndpoints")]);
    m_frontend_endpoints_isSet = !json[QString("frontendEndpoints")].isNull() && m_frontend_endpoints_isValid;

    m_patterns_to_match_isValid = ::OpenAPI::fromJsonValue(m_patterns_to_match, json[QString("patternsToMatch")]);
    m_patterns_to_match_isSet = !json[QString("patternsToMatch")].isNull() && m_patterns_to_match_isValid;
}

QString OAIRoutingRuleProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutingRuleProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_state.isSet()) {
        obj.insert(QString("resourceState"), ::OpenAPI::toJsonValue(m_resource_state));
    }
    if (m_accepted_protocols.size() > 0) {
        obj.insert(QString("acceptedProtocols"), ::OpenAPI::toJsonValue(m_accepted_protocols));
    }
    if (m_backend_pool.isSet()) {
        obj.insert(QString("backendPool"), ::OpenAPI::toJsonValue(m_backend_pool));
    }
    if (m_cache_configuration.isSet()) {
        obj.insert(QString("cacheConfiguration"), ::OpenAPI::toJsonValue(m_cache_configuration));
    }
    if (m_custom_forwarding_path_isSet) {
        obj.insert(QString("customForwardingPath"), ::OpenAPI::toJsonValue(m_custom_forwarding_path));
    }
    if (m_enabled_state_isSet) {
        obj.insert(QString("enabledState"), ::OpenAPI::toJsonValue(m_enabled_state));
    }
    if (m_forwarding_protocol_isSet) {
        obj.insert(QString("forwardingProtocol"), ::OpenAPI::toJsonValue(m_forwarding_protocol));
    }
    if (m_frontend_endpoints.size() > 0) {
        obj.insert(QString("frontendEndpoints"), ::OpenAPI::toJsonValue(m_frontend_endpoints));
    }
    if (m_patterns_to_match.size() > 0) {
        obj.insert(QString("patternsToMatch"), ::OpenAPI::toJsonValue(m_patterns_to_match));
    }
    return obj;
}

OAIResourceState OAIRoutingRuleProperties::getResourceState() const {
    return m_resource_state;
}
void OAIRoutingRuleProperties::setResourceState(const OAIResourceState &resource_state) {
    m_resource_state = resource_state;
    m_resource_state_isSet = true;
}

bool OAIRoutingRuleProperties::is_resource_state_Set() const{
    return m_resource_state_isSet;
}

bool OAIRoutingRuleProperties::is_resource_state_Valid() const{
    return m_resource_state_isValid;
}

QList<QString> OAIRoutingRuleProperties::getAcceptedProtocols() const {
    return m_accepted_protocols;
}
void OAIRoutingRuleProperties::setAcceptedProtocols(const QList<QString> &accepted_protocols) {
    m_accepted_protocols = accepted_protocols;
    m_accepted_protocols_isSet = true;
}

bool OAIRoutingRuleProperties::is_accepted_protocols_Set() const{
    return m_accepted_protocols_isSet;
}

bool OAIRoutingRuleProperties::is_accepted_protocols_Valid() const{
    return m_accepted_protocols_isValid;
}

OAIBackendPoolUpdateParameters_healthProbeSettings OAIRoutingRuleProperties::getBackendPool() const {
    return m_backend_pool;
}
void OAIRoutingRuleProperties::setBackendPool(const OAIBackendPoolUpdateParameters_healthProbeSettings &backend_pool) {
    m_backend_pool = backend_pool;
    m_backend_pool_isSet = true;
}

bool OAIRoutingRuleProperties::is_backend_pool_Set() const{
    return m_backend_pool_isSet;
}

bool OAIRoutingRuleProperties::is_backend_pool_Valid() const{
    return m_backend_pool_isValid;
}

OAICacheConfiguration OAIRoutingRuleProperties::getCacheConfiguration() const {
    return m_cache_configuration;
}
void OAIRoutingRuleProperties::setCacheConfiguration(const OAICacheConfiguration &cache_configuration) {
    m_cache_configuration = cache_configuration;
    m_cache_configuration_isSet = true;
}

bool OAIRoutingRuleProperties::is_cache_configuration_Set() const{
    return m_cache_configuration_isSet;
}

bool OAIRoutingRuleProperties::is_cache_configuration_Valid() const{
    return m_cache_configuration_isValid;
}

QString OAIRoutingRuleProperties::getCustomForwardingPath() const {
    return m_custom_forwarding_path;
}
void OAIRoutingRuleProperties::setCustomForwardingPath(const QString &custom_forwarding_path) {
    m_custom_forwarding_path = custom_forwarding_path;
    m_custom_forwarding_path_isSet = true;
}

bool OAIRoutingRuleProperties::is_custom_forwarding_path_Set() const{
    return m_custom_forwarding_path_isSet;
}

bool OAIRoutingRuleProperties::is_custom_forwarding_path_Valid() const{
    return m_custom_forwarding_path_isValid;
}

QString OAIRoutingRuleProperties::getEnabledState() const {
    return m_enabled_state;
}
void OAIRoutingRuleProperties::setEnabledState(const QString &enabled_state) {
    m_enabled_state = enabled_state;
    m_enabled_state_isSet = true;
}

bool OAIRoutingRuleProperties::is_enabled_state_Set() const{
    return m_enabled_state_isSet;
}

bool OAIRoutingRuleProperties::is_enabled_state_Valid() const{
    return m_enabled_state_isValid;
}

QString OAIRoutingRuleProperties::getForwardingProtocol() const {
    return m_forwarding_protocol;
}
void OAIRoutingRuleProperties::setForwardingProtocol(const QString &forwarding_protocol) {
    m_forwarding_protocol = forwarding_protocol;
    m_forwarding_protocol_isSet = true;
}

bool OAIRoutingRuleProperties::is_forwarding_protocol_Set() const{
    return m_forwarding_protocol_isSet;
}

bool OAIRoutingRuleProperties::is_forwarding_protocol_Valid() const{
    return m_forwarding_protocol_isValid;
}

QList<OAIBackendPoolUpdateParameters_healthProbeSettings> OAIRoutingRuleProperties::getFrontendEndpoints() const {
    return m_frontend_endpoints;
}
void OAIRoutingRuleProperties::setFrontendEndpoints(const QList<OAIBackendPoolUpdateParameters_healthProbeSettings> &frontend_endpoints) {
    m_frontend_endpoints = frontend_endpoints;
    m_frontend_endpoints_isSet = true;
}

bool OAIRoutingRuleProperties::is_frontend_endpoints_Set() const{
    return m_frontend_endpoints_isSet;
}

bool OAIRoutingRuleProperties::is_frontend_endpoints_Valid() const{
    return m_frontend_endpoints_isValid;
}

QList<QString> OAIRoutingRuleProperties::getPatternsToMatch() const {
    return m_patterns_to_match;
}
void OAIRoutingRuleProperties::setPatternsToMatch(const QList<QString> &patterns_to_match) {
    m_patterns_to_match = patterns_to_match;
    m_patterns_to_match_isSet = true;
}

bool OAIRoutingRuleProperties::is_patterns_to_match_Set() const{
    return m_patterns_to_match_isSet;
}

bool OAIRoutingRuleProperties::is_patterns_to_match_Valid() const{
    return m_patterns_to_match_isValid;
}

bool OAIRoutingRuleProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepted_protocols.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_forwarding_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_patterns_to_match.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutingRuleProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
