/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckNameAvailabilityOutput model module.
 * @module model/CheckNameAvailabilityOutput
 * @version 2018-08-01
 */
class CheckNameAvailabilityOutput {
    /**
     * Constructs a new <code>CheckNameAvailabilityOutput</code>.
     * Output of check name availability API.
     * @alias module:model/CheckNameAvailabilityOutput
     */
    constructor() { 
        
        CheckNameAvailabilityOutput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckNameAvailabilityOutput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckNameAvailabilityOutput} obj Optional instance to populate.
     * @return {module:model/CheckNameAvailabilityOutput} The populated <code>CheckNameAvailabilityOutput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckNameAvailabilityOutput();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('nameAvailability')) {
                obj['nameAvailability'] = ApiClient.convertToType(data['nameAvailability'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckNameAvailabilityOutput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckNameAvailabilityOutput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['nameAvailability'] && !(typeof data['nameAvailability'] === 'string' || data['nameAvailability'] instanceof String)) {
            throw new Error("Expected the field `nameAvailability` to be a primitive type in the JSON string but got " + data['nameAvailability']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}



/**
 * The detailed error message describing why the name is not available.
 * @member {String} message
 */
CheckNameAvailabilityOutput.prototype['message'] = undefined;

/**
 * Indicates whether the name is available.
 * @member {module:model/CheckNameAvailabilityOutput.NameAvailabilityEnum} nameAvailability
 */
CheckNameAvailabilityOutput.prototype['nameAvailability'] = undefined;

/**
 * The reason why the name is not available.
 * @member {String} reason
 */
CheckNameAvailabilityOutput.prototype['reason'] = undefined;





/**
 * Allowed values for the <code>nameAvailability</code> property.
 * @enum {String}
 * @readonly
 */
CheckNameAvailabilityOutput['NameAvailabilityEnum'] = {

    /**
     * value: "Available"
     * @const
     */
    "Available": "Available",

    /**
     * value: "Unavailable"
     * @const
     */
    "Unavailable": "Unavailable"
};



export default CheckNameAvailabilityOutput;

