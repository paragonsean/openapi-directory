/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2018-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CacheConfiguration model module.
 * @module model/CacheConfiguration
 * @version 2018-08-01
 */
class CacheConfiguration {
    /**
     * Constructs a new <code>CacheConfiguration</code>.
     * Caching settings for a caching-type route. To disable caching, do not provide a cacheConfiguration object.
     * @alias module:model/CacheConfiguration
     */
    constructor() { 
        
        CacheConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CacheConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CacheConfiguration} obj Optional instance to populate.
     * @return {module:model/CacheConfiguration} The populated <code>CacheConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CacheConfiguration();

            if (data.hasOwnProperty('dynamicCompression')) {
                obj['dynamicCompression'] = ApiClient.convertToType(data['dynamicCompression'], 'String');
            }
            if (data.hasOwnProperty('queryParameterStripDirective')) {
                obj['queryParameterStripDirective'] = ApiClient.convertToType(data['queryParameterStripDirective'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CacheConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CacheConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dynamicCompression'] && !(typeof data['dynamicCompression'] === 'string' || data['dynamicCompression'] instanceof String)) {
            throw new Error("Expected the field `dynamicCompression` to be a primitive type in the JSON string but got " + data['dynamicCompression']);
        }
        // ensure the json data is a string
        if (data['queryParameterStripDirective'] && !(typeof data['queryParameterStripDirective'] === 'string' || data['queryParameterStripDirective'] instanceof String)) {
            throw new Error("Expected the field `queryParameterStripDirective` to be a primitive type in the JSON string but got " + data['queryParameterStripDirective']);
        }

        return true;
    }


}



/**
 * Whether to use dynamic compression for cached content
 * @member {module:model/CacheConfiguration.DynamicCompressionEnum} dynamicCompression
 */
CacheConfiguration.prototype['dynamicCompression'] = undefined;

/**
 * Treatment of URL query terms when forming the cache key.
 * @member {module:model/CacheConfiguration.QueryParameterStripDirectiveEnum} queryParameterStripDirective
 */
CacheConfiguration.prototype['queryParameterStripDirective'] = undefined;





/**
 * Allowed values for the <code>dynamicCompression</code> property.
 * @enum {String}
 * @readonly
 */
CacheConfiguration['DynamicCompressionEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>queryParameterStripDirective</code> property.
 * @enum {String}
 * @readonly
 */
CacheConfiguration['QueryParameterStripDirectiveEnum'] = {

    /**
     * value: "StripNone"
     * @const
     */
    "StripNone": "StripNone",

    /**
     * value: "StripAll"
     * @const
     */
    "StripAll": "StripAll"
};



export default CacheConfiguration;

