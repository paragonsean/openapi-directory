# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backend_pool import BackendPool
from openapi_server.models.frontend_endpoint import FrontendEndpoint
from openapi_server.models.health_probe_settings_model import HealthProbeSettingsModel
from openapi_server.models.load_balancing_settings_model import LoadBalancingSettingsModel
from openapi_server.models.resource_state import ResourceState
from openapi_server.models.routing_rule import RoutingRule
from openapi_server import util


class FrontDoorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cname: str=None, provisioning_state: str=None, resource_state: ResourceState=None, backend_pools: List[BackendPool]=None, enabled_state: str=None, friendly_name: str=None, frontend_endpoints: List[FrontendEndpoint]=None, health_probe_settings: List[HealthProbeSettingsModel]=None, load_balancing_settings: List[LoadBalancingSettingsModel]=None, routing_rules: List[RoutingRule]=None):
        """FrontDoorProperties - a model defined in OpenAPI

        :param cname: The cname of this FrontDoorProperties.
        :param provisioning_state: The provisioning_state of this FrontDoorProperties.
        :param resource_state: The resource_state of this FrontDoorProperties.
        :param backend_pools: The backend_pools of this FrontDoorProperties.
        :param enabled_state: The enabled_state of this FrontDoorProperties.
        :param friendly_name: The friendly_name of this FrontDoorProperties.
        :param frontend_endpoints: The frontend_endpoints of this FrontDoorProperties.
        :param health_probe_settings: The health_probe_settings of this FrontDoorProperties.
        :param load_balancing_settings: The load_balancing_settings of this FrontDoorProperties.
        :param routing_rules: The routing_rules of this FrontDoorProperties.
        """
        self.openapi_types = {
            'cname': str,
            'provisioning_state': str,
            'resource_state': ResourceState,
            'backend_pools': List[BackendPool],
            'enabled_state': str,
            'friendly_name': str,
            'frontend_endpoints': List[FrontendEndpoint],
            'health_probe_settings': List[HealthProbeSettingsModel],
            'load_balancing_settings': List[LoadBalancingSettingsModel],
            'routing_rules': List[RoutingRule]
        }

        self.attribute_map = {
            'cname': 'cname',
            'provisioning_state': 'provisioningState',
            'resource_state': 'resourceState',
            'backend_pools': 'backendPools',
            'enabled_state': 'enabledState',
            'friendly_name': 'friendlyName',
            'frontend_endpoints': 'frontendEndpoints',
            'health_probe_settings': 'healthProbeSettings',
            'load_balancing_settings': 'loadBalancingSettings',
            'routing_rules': 'routingRules'
        }

        self._cname = cname
        self._provisioning_state = provisioning_state
        self._resource_state = resource_state
        self._backend_pools = backend_pools
        self._enabled_state = enabled_state
        self._friendly_name = friendly_name
        self._frontend_endpoints = frontend_endpoints
        self._health_probe_settings = health_probe_settings
        self._load_balancing_settings = load_balancing_settings
        self._routing_rules = routing_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrontDoorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrontDoorProperties of this FrontDoorProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cname(self):
        """Gets the cname of this FrontDoorProperties.

        The host that each frontendEndpoint must CNAME to.

        :return: The cname of this FrontDoorProperties.
        :rtype: str
        """
        return self._cname

    @cname.setter
    def cname(self, cname):
        """Sets the cname of this FrontDoorProperties.

        The host that each frontendEndpoint must CNAME to.

        :param cname: The cname of this FrontDoorProperties.
        :type cname: str
        """

        self._cname = cname

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this FrontDoorProperties.

        Provisioning state of the Front Door.

        :return: The provisioning_state of this FrontDoorProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this FrontDoorProperties.

        Provisioning state of the Front Door.

        :param provisioning_state: The provisioning_state of this FrontDoorProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def resource_state(self):
        """Gets the resource_state of this FrontDoorProperties.


        :return: The resource_state of this FrontDoorProperties.
        :rtype: ResourceState
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this FrontDoorProperties.


        :param resource_state: The resource_state of this FrontDoorProperties.
        :type resource_state: ResourceState
        """

        self._resource_state = resource_state

    @property
    def backend_pools(self):
        """Gets the backend_pools of this FrontDoorProperties.

        Backend pools available to routing rules.

        :return: The backend_pools of this FrontDoorProperties.
        :rtype: List[BackendPool]
        """
        return self._backend_pools

    @backend_pools.setter
    def backend_pools(self, backend_pools):
        """Sets the backend_pools of this FrontDoorProperties.

        Backend pools available to routing rules.

        :param backend_pools: The backend_pools of this FrontDoorProperties.
        :type backend_pools: List[BackendPool]
        """

        self._backend_pools = backend_pools

    @property
    def enabled_state(self):
        """Gets the enabled_state of this FrontDoorProperties.

        Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'

        :return: The enabled_state of this FrontDoorProperties.
        :rtype: str
        """
        return self._enabled_state

    @enabled_state.setter
    def enabled_state(self, enabled_state):
        """Sets the enabled_state of this FrontDoorProperties.

        Operational status of the Front Door load balancer. Permitted values are 'Enabled' or 'Disabled'

        :param enabled_state: The enabled_state of this FrontDoorProperties.
        :type enabled_state: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if enabled_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled_state` ({0}), must be one of {1}"
                .format(enabled_state, allowed_values)
            )

        self._enabled_state = enabled_state

    @property
    def friendly_name(self):
        """Gets the friendly_name of this FrontDoorProperties.

        A friendly name for the frontDoor

        :return: The friendly_name of this FrontDoorProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this FrontDoorProperties.

        A friendly name for the frontDoor

        :param friendly_name: The friendly_name of this FrontDoorProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def frontend_endpoints(self):
        """Gets the frontend_endpoints of this FrontDoorProperties.

        Frontend endpoints available to routing rules.

        :return: The frontend_endpoints of this FrontDoorProperties.
        :rtype: List[FrontendEndpoint]
        """
        return self._frontend_endpoints

    @frontend_endpoints.setter
    def frontend_endpoints(self, frontend_endpoints):
        """Sets the frontend_endpoints of this FrontDoorProperties.

        Frontend endpoints available to routing rules.

        :param frontend_endpoints: The frontend_endpoints of this FrontDoorProperties.
        :type frontend_endpoints: List[FrontendEndpoint]
        """

        self._frontend_endpoints = frontend_endpoints

    @property
    def health_probe_settings(self):
        """Gets the health_probe_settings of this FrontDoorProperties.

        Health probe settings associated with this Front Door instance.

        :return: The health_probe_settings of this FrontDoorProperties.
        :rtype: List[HealthProbeSettingsModel]
        """
        return self._health_probe_settings

    @health_probe_settings.setter
    def health_probe_settings(self, health_probe_settings):
        """Sets the health_probe_settings of this FrontDoorProperties.

        Health probe settings associated with this Front Door instance.

        :param health_probe_settings: The health_probe_settings of this FrontDoorProperties.
        :type health_probe_settings: List[HealthProbeSettingsModel]
        """

        self._health_probe_settings = health_probe_settings

    @property
    def load_balancing_settings(self):
        """Gets the load_balancing_settings of this FrontDoorProperties.

        Load balancing settings associated with this Front Door instance.

        :return: The load_balancing_settings of this FrontDoorProperties.
        :rtype: List[LoadBalancingSettingsModel]
        """
        return self._load_balancing_settings

    @load_balancing_settings.setter
    def load_balancing_settings(self, load_balancing_settings):
        """Sets the load_balancing_settings of this FrontDoorProperties.

        Load balancing settings associated with this Front Door instance.

        :param load_balancing_settings: The load_balancing_settings of this FrontDoorProperties.
        :type load_balancing_settings: List[LoadBalancingSettingsModel]
        """

        self._load_balancing_settings = load_balancing_settings

    @property
    def routing_rules(self):
        """Gets the routing_rules of this FrontDoorProperties.

        Routing rules associated with this Front Door.

        :return: The routing_rules of this FrontDoorProperties.
        :rtype: List[RoutingRule]
        """
        return self._routing_rules

    @routing_rules.setter
    def routing_rules(self, routing_rules):
        """Sets the routing_rules of this FrontDoorProperties.

        Routing rules associated with this Front Door.

        :param routing_rules: The routing_rules of this FrontDoorProperties.
        :type routing_rules: List[RoutingRule]
        """

        self._routing_rules = routing_rules
