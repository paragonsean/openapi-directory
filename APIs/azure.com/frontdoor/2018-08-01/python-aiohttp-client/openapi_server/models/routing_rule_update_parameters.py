# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backend_pool_update_parameters_health_probe_settings import BackendPoolUpdateParametersHealthProbeSettings
from openapi_server.models.cache_configuration import CacheConfiguration
from openapi_server import util


class RoutingRuleUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_protocols: List[str]=None, backend_pool: BackendPoolUpdateParametersHealthProbeSettings=None, cache_configuration: CacheConfiguration=None, custom_forwarding_path: str=None, enabled_state: str=None, forwarding_protocol: str=None, frontend_endpoints: List[BackendPoolUpdateParametersHealthProbeSettings]=None, patterns_to_match: List[str]=None):
        """RoutingRuleUpdateParameters - a model defined in OpenAPI

        :param accepted_protocols: The accepted_protocols of this RoutingRuleUpdateParameters.
        :param backend_pool: The backend_pool of this RoutingRuleUpdateParameters.
        :param cache_configuration: The cache_configuration of this RoutingRuleUpdateParameters.
        :param custom_forwarding_path: The custom_forwarding_path of this RoutingRuleUpdateParameters.
        :param enabled_state: The enabled_state of this RoutingRuleUpdateParameters.
        :param forwarding_protocol: The forwarding_protocol of this RoutingRuleUpdateParameters.
        :param frontend_endpoints: The frontend_endpoints of this RoutingRuleUpdateParameters.
        :param patterns_to_match: The patterns_to_match of this RoutingRuleUpdateParameters.
        """
        self.openapi_types = {
            'accepted_protocols': List[str],
            'backend_pool': BackendPoolUpdateParametersHealthProbeSettings,
            'cache_configuration': CacheConfiguration,
            'custom_forwarding_path': str,
            'enabled_state': str,
            'forwarding_protocol': str,
            'frontend_endpoints': List[BackendPoolUpdateParametersHealthProbeSettings],
            'patterns_to_match': List[str]
        }

        self.attribute_map = {
            'accepted_protocols': 'acceptedProtocols',
            'backend_pool': 'backendPool',
            'cache_configuration': 'cacheConfiguration',
            'custom_forwarding_path': 'customForwardingPath',
            'enabled_state': 'enabledState',
            'forwarding_protocol': 'forwardingProtocol',
            'frontend_endpoints': 'frontendEndpoints',
            'patterns_to_match': 'patternsToMatch'
        }

        self._accepted_protocols = accepted_protocols
        self._backend_pool = backend_pool
        self._cache_configuration = cache_configuration
        self._custom_forwarding_path = custom_forwarding_path
        self._enabled_state = enabled_state
        self._forwarding_protocol = forwarding_protocol
        self._frontend_endpoints = frontend_endpoints
        self._patterns_to_match = patterns_to_match

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutingRuleUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoutingRuleUpdateParameters of this RoutingRuleUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_protocols(self):
        """Gets the accepted_protocols of this RoutingRuleUpdateParameters.

        Protocol schemes to match for this rule

        :return: The accepted_protocols of this RoutingRuleUpdateParameters.
        :rtype: List[str]
        """
        return self._accepted_protocols

    @accepted_protocols.setter
    def accepted_protocols(self, accepted_protocols):
        """Sets the accepted_protocols of this RoutingRuleUpdateParameters.

        Protocol schemes to match for this rule

        :param accepted_protocols: The accepted_protocols of this RoutingRuleUpdateParameters.
        :type accepted_protocols: List[str]
        """
        allowed_values = ["Http", "Https"]  # noqa: E501
        if not set(accepted_protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `accepted_protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(accepted_protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._accepted_protocols = accepted_protocols

    @property
    def backend_pool(self):
        """Gets the backend_pool of this RoutingRuleUpdateParameters.


        :return: The backend_pool of this RoutingRuleUpdateParameters.
        :rtype: BackendPoolUpdateParametersHealthProbeSettings
        """
        return self._backend_pool

    @backend_pool.setter
    def backend_pool(self, backend_pool):
        """Sets the backend_pool of this RoutingRuleUpdateParameters.


        :param backend_pool: The backend_pool of this RoutingRuleUpdateParameters.
        :type backend_pool: BackendPoolUpdateParametersHealthProbeSettings
        """

        self._backend_pool = backend_pool

    @property
    def cache_configuration(self):
        """Gets the cache_configuration of this RoutingRuleUpdateParameters.


        :return: The cache_configuration of this RoutingRuleUpdateParameters.
        :rtype: CacheConfiguration
        """
        return self._cache_configuration

    @cache_configuration.setter
    def cache_configuration(self, cache_configuration):
        """Sets the cache_configuration of this RoutingRuleUpdateParameters.


        :param cache_configuration: The cache_configuration of this RoutingRuleUpdateParameters.
        :type cache_configuration: CacheConfiguration
        """

        self._cache_configuration = cache_configuration

    @property
    def custom_forwarding_path(self):
        """Gets the custom_forwarding_path of this RoutingRuleUpdateParameters.

        A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.

        :return: The custom_forwarding_path of this RoutingRuleUpdateParameters.
        :rtype: str
        """
        return self._custom_forwarding_path

    @custom_forwarding_path.setter
    def custom_forwarding_path(self, custom_forwarding_path):
        """Sets the custom_forwarding_path of this RoutingRuleUpdateParameters.

        A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.

        :param custom_forwarding_path: The custom_forwarding_path of this RoutingRuleUpdateParameters.
        :type custom_forwarding_path: str
        """

        self._custom_forwarding_path = custom_forwarding_path

    @property
    def enabled_state(self):
        """Gets the enabled_state of this RoutingRuleUpdateParameters.

        Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'

        :return: The enabled_state of this RoutingRuleUpdateParameters.
        :rtype: str
        """
        return self._enabled_state

    @enabled_state.setter
    def enabled_state(self, enabled_state):
        """Sets the enabled_state of this RoutingRuleUpdateParameters.

        Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'

        :param enabled_state: The enabled_state of this RoutingRuleUpdateParameters.
        :type enabled_state: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if enabled_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled_state` ({0}), must be one of {1}"
                .format(enabled_state, allowed_values)
            )

        self._enabled_state = enabled_state

    @property
    def forwarding_protocol(self):
        """Gets the forwarding_protocol of this RoutingRuleUpdateParameters.

        Protocol this rule will use when forwarding traffic to backends.

        :return: The forwarding_protocol of this RoutingRuleUpdateParameters.
        :rtype: str
        """
        return self._forwarding_protocol

    @forwarding_protocol.setter
    def forwarding_protocol(self, forwarding_protocol):
        """Sets the forwarding_protocol of this RoutingRuleUpdateParameters.

        Protocol this rule will use when forwarding traffic to backends.

        :param forwarding_protocol: The forwarding_protocol of this RoutingRuleUpdateParameters.
        :type forwarding_protocol: str
        """
        allowed_values = ["HttpOnly", "HttpsOnly", "MatchRequest"]  # noqa: E501
        if forwarding_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `forwarding_protocol` ({0}), must be one of {1}"
                .format(forwarding_protocol, allowed_values)
            )

        self._forwarding_protocol = forwarding_protocol

    @property
    def frontend_endpoints(self):
        """Gets the frontend_endpoints of this RoutingRuleUpdateParameters.

        Frontend endpoints associated with this rule

        :return: The frontend_endpoints of this RoutingRuleUpdateParameters.
        :rtype: List[BackendPoolUpdateParametersHealthProbeSettings]
        """
        return self._frontend_endpoints

    @frontend_endpoints.setter
    def frontend_endpoints(self, frontend_endpoints):
        """Sets the frontend_endpoints of this RoutingRuleUpdateParameters.

        Frontend endpoints associated with this rule

        :param frontend_endpoints: The frontend_endpoints of this RoutingRuleUpdateParameters.
        :type frontend_endpoints: List[BackendPoolUpdateParametersHealthProbeSettings]
        """

        self._frontend_endpoints = frontend_endpoints

    @property
    def patterns_to_match(self):
        """Gets the patterns_to_match of this RoutingRuleUpdateParameters.

        The route patterns of the rule.

        :return: The patterns_to_match of this RoutingRuleUpdateParameters.
        :rtype: List[str]
        """
        return self._patterns_to_match

    @patterns_to_match.setter
    def patterns_to_match(self, patterns_to_match):
        """Sets the patterns_to_match of this RoutingRuleUpdateParameters.

        The route patterns of the rule.

        :param patterns_to_match: The patterns_to_match of this RoutingRuleUpdateParameters.
        :type patterns_to_match: List[str]
        """

        self._patterns_to_match = patterns_to_match
