# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cache_configuration import CacheConfiguration
from openapi_server.models.route_configuration import RouteConfiguration
from openapi_server import util


class ForwardingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_pool: object=None, cache_configuration: CacheConfiguration=None, custom_forwarding_path: str=None, forwarding_protocol: str=None, odata_type: str=None):
        """ForwardingConfiguration - a model defined in OpenAPI

        :param backend_pool: The backend_pool of this ForwardingConfiguration.
        :param cache_configuration: The cache_configuration of this ForwardingConfiguration.
        :param custom_forwarding_path: The custom_forwarding_path of this ForwardingConfiguration.
        :param forwarding_protocol: The forwarding_protocol of this ForwardingConfiguration.
        :param odata_type: The odata_type of this ForwardingConfiguration.
        """
        self.openapi_types = {
            'backend_pool': object,
            'cache_configuration': CacheConfiguration,
            'custom_forwarding_path': str,
            'forwarding_protocol': str,
            'odata_type': str
        }

        self.attribute_map = {
            'backend_pool': 'backendPool',
            'cache_configuration': 'cacheConfiguration',
            'custom_forwarding_path': 'customForwardingPath',
            'forwarding_protocol': 'forwardingProtocol',
            'odata_type': '@odata.type'
        }

        self._backend_pool = backend_pool
        self._cache_configuration = cache_configuration
        self._custom_forwarding_path = custom_forwarding_path
        self._forwarding_protocol = forwarding_protocol
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForwardingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForwardingConfiguration of this ForwardingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_pool(self):
        """Gets the backend_pool of this ForwardingConfiguration.

        Reference to another subresource.

        :return: The backend_pool of this ForwardingConfiguration.
        :rtype: object
        """
        return self._backend_pool

    @backend_pool.setter
    def backend_pool(self, backend_pool):
        """Sets the backend_pool of this ForwardingConfiguration.

        Reference to another subresource.

        :param backend_pool: The backend_pool of this ForwardingConfiguration.
        :type backend_pool: object
        """

        self._backend_pool = backend_pool

    @property
    def cache_configuration(self):
        """Gets the cache_configuration of this ForwardingConfiguration.


        :return: The cache_configuration of this ForwardingConfiguration.
        :rtype: CacheConfiguration
        """
        return self._cache_configuration

    @cache_configuration.setter
    def cache_configuration(self, cache_configuration):
        """Sets the cache_configuration of this ForwardingConfiguration.


        :param cache_configuration: The cache_configuration of this ForwardingConfiguration.
        :type cache_configuration: CacheConfiguration
        """

        self._cache_configuration = cache_configuration

    @property
    def custom_forwarding_path(self):
        """Gets the custom_forwarding_path of this ForwardingConfiguration.

        A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.

        :return: The custom_forwarding_path of this ForwardingConfiguration.
        :rtype: str
        """
        return self._custom_forwarding_path

    @custom_forwarding_path.setter
    def custom_forwarding_path(self, custom_forwarding_path):
        """Sets the custom_forwarding_path of this ForwardingConfiguration.

        A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.

        :param custom_forwarding_path: The custom_forwarding_path of this ForwardingConfiguration.
        :type custom_forwarding_path: str
        """

        self._custom_forwarding_path = custom_forwarding_path

    @property
    def forwarding_protocol(self):
        """Gets the forwarding_protocol of this ForwardingConfiguration.

        Protocol this rule will use when forwarding traffic to backends.

        :return: The forwarding_protocol of this ForwardingConfiguration.
        :rtype: str
        """
        return self._forwarding_protocol

    @forwarding_protocol.setter
    def forwarding_protocol(self, forwarding_protocol):
        """Sets the forwarding_protocol of this ForwardingConfiguration.

        Protocol this rule will use when forwarding traffic to backends.

        :param forwarding_protocol: The forwarding_protocol of this ForwardingConfiguration.
        :type forwarding_protocol: str
        """
        allowed_values = ["HttpOnly", "HttpsOnly", "MatchRequest"]  # noqa: E501
        if forwarding_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `forwarding_protocol` ({0}), must be one of {1}"
                .format(forwarding_protocol, allowed_values)
            )

        self._forwarding_protocol = forwarding_protocol

    @property
    def odata_type(self):
        """Gets the odata_type of this ForwardingConfiguration.


        :return: The odata_type of this ForwardingConfiguration.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this ForwardingConfiguration.


        :param odata_type: The odata_type of this ForwardingConfiguration.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
