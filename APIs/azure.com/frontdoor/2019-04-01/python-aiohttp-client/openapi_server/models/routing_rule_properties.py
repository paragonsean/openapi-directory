# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backend_pool_update_parameters_health_probe_settings import BackendPoolUpdateParametersHealthProbeSettings
from openapi_server.models.resource_state import ResourceState
from openapi_server.models.route_configuration import RouteConfiguration
from openapi_server import util


class RoutingRuleProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_state: ResourceState=None, accepted_protocols: List[str]=None, enabled_state: str=None, frontend_endpoints: List[BackendPoolUpdateParametersHealthProbeSettings]=None, patterns_to_match: List[str]=None, route_configuration: RouteConfiguration=None):
        """RoutingRuleProperties - a model defined in OpenAPI

        :param resource_state: The resource_state of this RoutingRuleProperties.
        :param accepted_protocols: The accepted_protocols of this RoutingRuleProperties.
        :param enabled_state: The enabled_state of this RoutingRuleProperties.
        :param frontend_endpoints: The frontend_endpoints of this RoutingRuleProperties.
        :param patterns_to_match: The patterns_to_match of this RoutingRuleProperties.
        :param route_configuration: The route_configuration of this RoutingRuleProperties.
        """
        self.openapi_types = {
            'resource_state': ResourceState,
            'accepted_protocols': List[str],
            'enabled_state': str,
            'frontend_endpoints': List[BackendPoolUpdateParametersHealthProbeSettings],
            'patterns_to_match': List[str],
            'route_configuration': RouteConfiguration
        }

        self.attribute_map = {
            'resource_state': 'resourceState',
            'accepted_protocols': 'acceptedProtocols',
            'enabled_state': 'enabledState',
            'frontend_endpoints': 'frontendEndpoints',
            'patterns_to_match': 'patternsToMatch',
            'route_configuration': 'routeConfiguration'
        }

        self._resource_state = resource_state
        self._accepted_protocols = accepted_protocols
        self._enabled_state = enabled_state
        self._frontend_endpoints = frontend_endpoints
        self._patterns_to_match = patterns_to_match
        self._route_configuration = route_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutingRuleProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoutingRuleProperties of this RoutingRuleProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_state(self):
        """Gets the resource_state of this RoutingRuleProperties.


        :return: The resource_state of this RoutingRuleProperties.
        :rtype: ResourceState
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this RoutingRuleProperties.


        :param resource_state: The resource_state of this RoutingRuleProperties.
        :type resource_state: ResourceState
        """

        self._resource_state = resource_state

    @property
    def accepted_protocols(self):
        """Gets the accepted_protocols of this RoutingRuleProperties.

        Protocol schemes to match for this rule

        :return: The accepted_protocols of this RoutingRuleProperties.
        :rtype: List[str]
        """
        return self._accepted_protocols

    @accepted_protocols.setter
    def accepted_protocols(self, accepted_protocols):
        """Sets the accepted_protocols of this RoutingRuleProperties.

        Protocol schemes to match for this rule

        :param accepted_protocols: The accepted_protocols of this RoutingRuleProperties.
        :type accepted_protocols: List[str]
        """
        allowed_values = ["Http", "Https"]  # noqa: E501
        if not set(accepted_protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `accepted_protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(accepted_protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._accepted_protocols = accepted_protocols

    @property
    def enabled_state(self):
        """Gets the enabled_state of this RoutingRuleProperties.

        Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'

        :return: The enabled_state of this RoutingRuleProperties.
        :rtype: str
        """
        return self._enabled_state

    @enabled_state.setter
    def enabled_state(self, enabled_state):
        """Sets the enabled_state of this RoutingRuleProperties.

        Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'

        :param enabled_state: The enabled_state of this RoutingRuleProperties.
        :type enabled_state: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if enabled_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled_state` ({0}), must be one of {1}"
                .format(enabled_state, allowed_values)
            )

        self._enabled_state = enabled_state

    @property
    def frontend_endpoints(self):
        """Gets the frontend_endpoints of this RoutingRuleProperties.

        Frontend endpoints associated with this rule

        :return: The frontend_endpoints of this RoutingRuleProperties.
        :rtype: List[BackendPoolUpdateParametersHealthProbeSettings]
        """
        return self._frontend_endpoints

    @frontend_endpoints.setter
    def frontend_endpoints(self, frontend_endpoints):
        """Sets the frontend_endpoints of this RoutingRuleProperties.

        Frontend endpoints associated with this rule

        :param frontend_endpoints: The frontend_endpoints of this RoutingRuleProperties.
        :type frontend_endpoints: List[BackendPoolUpdateParametersHealthProbeSettings]
        """

        self._frontend_endpoints = frontend_endpoints

    @property
    def patterns_to_match(self):
        """Gets the patterns_to_match of this RoutingRuleProperties.

        The route patterns of the rule.

        :return: The patterns_to_match of this RoutingRuleProperties.
        :rtype: List[str]
        """
        return self._patterns_to_match

    @patterns_to_match.setter
    def patterns_to_match(self, patterns_to_match):
        """Sets the patterns_to_match of this RoutingRuleProperties.

        The route patterns of the rule.

        :param patterns_to_match: The patterns_to_match of this RoutingRuleProperties.
        :type patterns_to_match: List[str]
        """

        self._patterns_to_match = patterns_to_match

    @property
    def route_configuration(self):
        """Gets the route_configuration of this RoutingRuleProperties.


        :return: The route_configuration of this RoutingRuleProperties.
        :rtype: RouteConfiguration
        """
        return self._route_configuration

    @route_configuration.setter
    def route_configuration(self, route_configuration):
        """Sets the route_configuration of this RoutingRuleProperties.


        :param route_configuration: The route_configuration of this RoutingRuleProperties.
        :type route_configuration: RouteConfiguration
        """

        self._route_configuration = route_configuration
