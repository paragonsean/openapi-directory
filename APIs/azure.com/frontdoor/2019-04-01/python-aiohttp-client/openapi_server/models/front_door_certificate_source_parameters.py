# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FrontDoorCertificateSourceParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_type: str=None):
        """FrontDoorCertificateSourceParameters - a model defined in OpenAPI

        :param certificate_type: The certificate_type of this FrontDoorCertificateSourceParameters.
        """
        self.openapi_types = {
            'certificate_type': str
        }

        self.attribute_map = {
            'certificate_type': 'certificateType'
        }

        self._certificate_type = certificate_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrontDoorCertificateSourceParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrontDoorCertificateSourceParameters of this FrontDoorCertificateSourceParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_type(self):
        """Gets the certificate_type of this FrontDoorCertificateSourceParameters.

        Defines the type of the certificate used for secure connections to a frontendEndpoint

        :return: The certificate_type of this FrontDoorCertificateSourceParameters.
        :rtype: str
        """
        return self._certificate_type

    @certificate_type.setter
    def certificate_type(self, certificate_type):
        """Sets the certificate_type of this FrontDoorCertificateSourceParameters.

        Defines the type of the certificate used for secure connections to a frontendEndpoint

        :param certificate_type: The certificate_type of this FrontDoorCertificateSourceParameters.
        :type certificate_type: str
        """
        allowed_values = ["Dedicated"]  # noqa: E501
        if certificate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `certificate_type` ({0}), must be one of {1}"
                .format(certificate_type, allowed_values)
            )

        self._certificate_type = certificate_type
