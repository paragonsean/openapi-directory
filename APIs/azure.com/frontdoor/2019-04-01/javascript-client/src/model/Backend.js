/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Backend model module.
 * @module model/Backend
 * @version 2019-04-01
 */
class Backend {
    /**
     * Constructs a new <code>Backend</code>.
     * Backend address of a frontDoor load balancer.
     * @alias module:model/Backend
     */
    constructor() { 
        
        Backend.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Backend</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Backend} obj Optional instance to populate.
     * @return {module:model/Backend} The populated <code>Backend</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Backend();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('backendHostHeader')) {
                obj['backendHostHeader'] = ApiClient.convertToType(data['backendHostHeader'], 'String');
            }
            if (data.hasOwnProperty('enabledState')) {
                obj['enabledState'] = ApiClient.convertToType(data['enabledState'], 'String');
            }
            if (data.hasOwnProperty('httpPort')) {
                obj['httpPort'] = ApiClient.convertToType(data['httpPort'], 'Number');
            }
            if (data.hasOwnProperty('httpsPort')) {
                obj['httpsPort'] = ApiClient.convertToType(data['httpsPort'], 'Number');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Backend</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Backend</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['backendHostHeader'] && !(typeof data['backendHostHeader'] === 'string' || data['backendHostHeader'] instanceof String)) {
            throw new Error("Expected the field `backendHostHeader` to be a primitive type in the JSON string but got " + data['backendHostHeader']);
        }
        // ensure the json data is a string
        if (data['enabledState'] && !(typeof data['enabledState'] === 'string' || data['enabledState'] instanceof String)) {
            throw new Error("Expected the field `enabledState` to be a primitive type in the JSON string but got " + data['enabledState']);
        }

        return true;
    }


}



/**
 * Location of the backend (IP address or FQDN)
 * @member {String} address
 */
Backend.prototype['address'] = undefined;

/**
 * The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.
 * @member {String} backendHostHeader
 */
Backend.prototype['backendHostHeader'] = undefined;

/**
 * Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'
 * @member {module:model/Backend.EnabledStateEnum} enabledState
 */
Backend.prototype['enabledState'] = undefined;

/**
 * The HTTP TCP port number. Must be between 1 and 65535.
 * @member {Number} httpPort
 */
Backend.prototype['httpPort'] = undefined;

/**
 * The HTTPS TCP port number. Must be between 1 and 65535.
 * @member {Number} httpsPort
 */
Backend.prototype['httpsPort'] = undefined;

/**
 * Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.
 * @member {Number} priority
 */
Backend.prototype['priority'] = undefined;

/**
 * Weight of this endpoint for load balancing purposes.
 * @member {Number} weight
 */
Backend.prototype['weight'] = undefined;





/**
 * Allowed values for the <code>enabledState</code> property.
 * @enum {String}
 * @readonly
 */
Backend['EnabledStateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default Backend;

