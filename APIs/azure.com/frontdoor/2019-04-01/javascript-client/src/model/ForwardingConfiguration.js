/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CacheConfiguration from './CacheConfiguration';
import RouteConfiguration from './RouteConfiguration';

/**
 * The ForwardingConfiguration model module.
 * @module model/ForwardingConfiguration
 * @version 2019-04-01
 */
class ForwardingConfiguration {
    /**
     * Constructs a new <code>ForwardingConfiguration</code>.
     * Describes Forwarding Route.
     * @alias module:model/ForwardingConfiguration
     * @extends module:model/RouteConfiguration
     * @implements module:model/RouteConfiguration
     * @param odataType {String} 
     */
    constructor(odataType) { 
        RouteConfiguration.initialize(this, odataType);
        ForwardingConfiguration.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
    }

    /**
     * Constructs a <code>ForwardingConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ForwardingConfiguration} obj Optional instance to populate.
     * @return {module:model/ForwardingConfiguration} The populated <code>ForwardingConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ForwardingConfiguration();
            RouteConfiguration.constructFromObject(data, obj);
            RouteConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('backendPool')) {
                obj['backendPool'] = ApiClient.convertToType(data['backendPool'], Object);
            }
            if (data.hasOwnProperty('cacheConfiguration')) {
                obj['cacheConfiguration'] = CacheConfiguration.constructFromObject(data['cacheConfiguration']);
            }
            if (data.hasOwnProperty('customForwardingPath')) {
                obj['customForwardingPath'] = ApiClient.convertToType(data['customForwardingPath'], 'String');
            }
            if (data.hasOwnProperty('forwardingProtocol')) {
                obj['forwardingProtocol'] = ApiClient.convertToType(data['forwardingProtocol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ForwardingConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ForwardingConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ForwardingConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `backendPool`
        if (data['backendPool']) { // data not null
          Object.validateJSON(data['backendPool']);
        }
        // validate the optional field `cacheConfiguration`
        if (data['cacheConfiguration']) { // data not null
          CacheConfiguration.validateJSON(data['cacheConfiguration']);
        }
        // ensure the json data is a string
        if (data['customForwardingPath'] && !(typeof data['customForwardingPath'] === 'string' || data['customForwardingPath'] instanceof String)) {
            throw new Error("Expected the field `customForwardingPath` to be a primitive type in the JSON string but got " + data['customForwardingPath']);
        }
        // ensure the json data is a string
        if (data['forwardingProtocol'] && !(typeof data['forwardingProtocol'] === 'string' || data['forwardingProtocol'] instanceof String)) {
            throw new Error("Expected the field `forwardingProtocol` to be a primitive type in the JSON string but got " + data['forwardingProtocol']);
        }

        return true;
    }


}

ForwardingConfiguration.RequiredProperties = ["@odata.type"];

/**
 * Reference to another subresource.
 * @member {Object} backendPool
 */
ForwardingConfiguration.prototype['backendPool'] = undefined;

/**
 * @member {module:model/CacheConfiguration} cacheConfiguration
 */
ForwardingConfiguration.prototype['cacheConfiguration'] = undefined;

/**
 * A custom path used to rewrite resource paths matched by this rule. Leave empty to use incoming path.
 * @member {String} customForwardingPath
 */
ForwardingConfiguration.prototype['customForwardingPath'] = undefined;

/**
 * Protocol this rule will use when forwarding traffic to backends.
 * @member {module:model/ForwardingConfiguration.ForwardingProtocolEnum} forwardingProtocol
 */
ForwardingConfiguration.prototype['forwardingProtocol'] = undefined;


// Implement RouteConfiguration interface:
/**
 * @member {String} @odata.type
 */
RouteConfiguration.prototype['@odata.type'] = undefined;



/**
 * Allowed values for the <code>forwardingProtocol</code> property.
 * @enum {String}
 * @readonly
 */
ForwardingConfiguration['ForwardingProtocolEnum'] = {

    /**
     * value: "HttpOnly"
     * @const
     */
    "HttpOnly": "HttpOnly",

    /**
     * value: "HttpsOnly"
     * @const
     */
    "HttpsOnly": "HttpsOnly",

    /**
     * value: "MatchRequest"
     * @const
     */
    "MatchRequest": "MatchRequest"
};



export default ForwardingConfiguration;

