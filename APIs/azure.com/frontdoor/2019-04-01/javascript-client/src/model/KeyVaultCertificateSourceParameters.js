/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyVaultCertificateSourceParametersVault from './KeyVaultCertificateSourceParametersVault';

/**
 * The KeyVaultCertificateSourceParameters model module.
 * @module model/KeyVaultCertificateSourceParameters
 * @version 2019-04-01
 */
class KeyVaultCertificateSourceParameters {
    /**
     * Constructs a new <code>KeyVaultCertificateSourceParameters</code>.
     * Parameters required for bring-your-own-certification via Key Vault
     * @alias module:model/KeyVaultCertificateSourceParameters
     */
    constructor() { 
        
        KeyVaultCertificateSourceParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyVaultCertificateSourceParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyVaultCertificateSourceParameters} obj Optional instance to populate.
     * @return {module:model/KeyVaultCertificateSourceParameters} The populated <code>KeyVaultCertificateSourceParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyVaultCertificateSourceParameters();

            if (data.hasOwnProperty('secretName')) {
                obj['secretName'] = ApiClient.convertToType(data['secretName'], 'String');
            }
            if (data.hasOwnProperty('secretVersion')) {
                obj['secretVersion'] = ApiClient.convertToType(data['secretVersion'], 'String');
            }
            if (data.hasOwnProperty('vault')) {
                obj['vault'] = KeyVaultCertificateSourceParametersVault.constructFromObject(data['vault']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyVaultCertificateSourceParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyVaultCertificateSourceParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['secretName'] && !(typeof data['secretName'] === 'string' || data['secretName'] instanceof String)) {
            throw new Error("Expected the field `secretName` to be a primitive type in the JSON string but got " + data['secretName']);
        }
        // ensure the json data is a string
        if (data['secretVersion'] && !(typeof data['secretVersion'] === 'string' || data['secretVersion'] instanceof String)) {
            throw new Error("Expected the field `secretVersion` to be a primitive type in the JSON string but got " + data['secretVersion']);
        }
        // validate the optional field `vault`
        if (data['vault']) { // data not null
          KeyVaultCertificateSourceParametersVault.validateJSON(data['vault']);
        }

        return true;
    }


}



/**
 * The name of the Key Vault secret representing the full certificate PFX
 * @member {String} secretName
 */
KeyVaultCertificateSourceParameters.prototype['secretName'] = undefined;

/**
 * The version of the Key Vault secret representing the full certificate PFX
 * @member {String} secretVersion
 */
KeyVaultCertificateSourceParameters.prototype['secretVersion'] = undefined;

/**
 * @member {module:model/KeyVaultCertificateSourceParametersVault} vault
 */
KeyVaultCertificateSourceParameters.prototype['vault'] = undefined;






export default KeyVaultCertificateSourceParameters;

