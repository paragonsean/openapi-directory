/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthProbeSettingsUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthProbeSettingsUpdateParameters::OAIHealthProbeSettingsUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthProbeSettingsUpdateParameters::OAIHealthProbeSettingsUpdateParameters() {
    this->initializeModel();
}

OAIHealthProbeSettingsUpdateParameters::~OAIHealthProbeSettingsUpdateParameters() {}

void OAIHealthProbeSettingsUpdateParameters::initializeModel() {

    m_interval_in_seconds_isSet = false;
    m_interval_in_seconds_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAIHealthProbeSettingsUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthProbeSettingsUpdateParameters::fromJsonObject(QJsonObject json) {

    m_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_interval_in_seconds, json[QString("intervalInSeconds")]);
    m_interval_in_seconds_isSet = !json[QString("intervalInSeconds")].isNull() && m_interval_in_seconds_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAIHealthProbeSettingsUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthProbeSettingsUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_interval_in_seconds_isSet) {
        obj.insert(QString("intervalInSeconds"), ::OpenAPI::toJsonValue(m_interval_in_seconds));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

qint32 OAIHealthProbeSettingsUpdateParameters::getIntervalInSeconds() const {
    return m_interval_in_seconds;
}
void OAIHealthProbeSettingsUpdateParameters::setIntervalInSeconds(const qint32 &interval_in_seconds) {
    m_interval_in_seconds = interval_in_seconds;
    m_interval_in_seconds_isSet = true;
}

bool OAIHealthProbeSettingsUpdateParameters::is_interval_in_seconds_Set() const{
    return m_interval_in_seconds_isSet;
}

bool OAIHealthProbeSettingsUpdateParameters::is_interval_in_seconds_Valid() const{
    return m_interval_in_seconds_isValid;
}

QString OAIHealthProbeSettingsUpdateParameters::getPath() const {
    return m_path;
}
void OAIHealthProbeSettingsUpdateParameters::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHealthProbeSettingsUpdateParameters::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHealthProbeSettingsUpdateParameters::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIHealthProbeSettingsUpdateParameters::getProtocol() const {
    return m_protocol;
}
void OAIHealthProbeSettingsUpdateParameters::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIHealthProbeSettingsUpdateParameters::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIHealthProbeSettingsUpdateParameters::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAIHealthProbeSettingsUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthProbeSettingsUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
