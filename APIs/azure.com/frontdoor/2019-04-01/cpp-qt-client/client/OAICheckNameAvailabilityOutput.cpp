/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckNameAvailabilityOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckNameAvailabilityOutput::OAICheckNameAvailabilityOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckNameAvailabilityOutput::OAICheckNameAvailabilityOutput() {
    this->initializeModel();
}

OAICheckNameAvailabilityOutput::~OAICheckNameAvailabilityOutput() {}

void OAICheckNameAvailabilityOutput::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_availability_isSet = false;
    m_name_availability_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAICheckNameAvailabilityOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckNameAvailabilityOutput::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_availability_isValid = ::OpenAPI::fromJsonValue(m_name_availability, json[QString("nameAvailability")]);
    m_name_availability_isSet = !json[QString("nameAvailability")].isNull() && m_name_availability_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAICheckNameAvailabilityOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckNameAvailabilityOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_availability_isSet) {
        obj.insert(QString("nameAvailability"), ::OpenAPI::toJsonValue(m_name_availability));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAICheckNameAvailabilityOutput::getMessage() const {
    return m_message;
}
void OAICheckNameAvailabilityOutput::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICheckNameAvailabilityOutput::is_message_Set() const{
    return m_message_isSet;
}

bool OAICheckNameAvailabilityOutput::is_message_Valid() const{
    return m_message_isValid;
}

QString OAICheckNameAvailabilityOutput::getNameAvailability() const {
    return m_name_availability;
}
void OAICheckNameAvailabilityOutput::setNameAvailability(const QString &name_availability) {
    m_name_availability = name_availability;
    m_name_availability_isSet = true;
}

bool OAICheckNameAvailabilityOutput::is_name_availability_Set() const{
    return m_name_availability_isSet;
}

bool OAICheckNameAvailabilityOutput::is_name_availability_Valid() const{
    return m_name_availability_isValid;
}

QString OAICheckNameAvailabilityOutput::getReason() const {
    return m_reason;
}
void OAICheckNameAvailabilityOutput::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAICheckNameAvailabilityOutput::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAICheckNameAvailabilityOutput::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAICheckNameAvailabilityOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckNameAvailabilityOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
