/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackendPoolUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackendPoolUpdateParameters::OAIBackendPoolUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackendPoolUpdateParameters::OAIBackendPoolUpdateParameters() {
    this->initializeModel();
}

OAIBackendPoolUpdateParameters::~OAIBackendPoolUpdateParameters() {}

void OAIBackendPoolUpdateParameters::initializeModel() {

    m_backends_isSet = false;
    m_backends_isValid = false;

    m_health_probe_settings_isSet = false;
    m_health_probe_settings_isValid = false;

    m_load_balancing_settings_isSet = false;
    m_load_balancing_settings_isValid = false;
}

void OAIBackendPoolUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackendPoolUpdateParameters::fromJsonObject(QJsonObject json) {

    m_backends_isValid = ::OpenAPI::fromJsonValue(m_backends, json[QString("backends")]);
    m_backends_isSet = !json[QString("backends")].isNull() && m_backends_isValid;

    m_health_probe_settings_isValid = ::OpenAPI::fromJsonValue(m_health_probe_settings, json[QString("healthProbeSettings")]);
    m_health_probe_settings_isSet = !json[QString("healthProbeSettings")].isNull() && m_health_probe_settings_isValid;

    m_load_balancing_settings_isValid = ::OpenAPI::fromJsonValue(m_load_balancing_settings, json[QString("loadBalancingSettings")]);
    m_load_balancing_settings_isSet = !json[QString("loadBalancingSettings")].isNull() && m_load_balancing_settings_isValid;
}

QString OAIBackendPoolUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackendPoolUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_backends.size() > 0) {
        obj.insert(QString("backends"), ::OpenAPI::toJsonValue(m_backends));
    }
    if (m_health_probe_settings.isSet()) {
        obj.insert(QString("healthProbeSettings"), ::OpenAPI::toJsonValue(m_health_probe_settings));
    }
    if (m_load_balancing_settings.isSet()) {
        obj.insert(QString("loadBalancingSettings"), ::OpenAPI::toJsonValue(m_load_balancing_settings));
    }
    return obj;
}

QList<OAIBackend> OAIBackendPoolUpdateParameters::getBackends() const {
    return m_backends;
}
void OAIBackendPoolUpdateParameters::setBackends(const QList<OAIBackend> &backends) {
    m_backends = backends;
    m_backends_isSet = true;
}

bool OAIBackendPoolUpdateParameters::is_backends_Set() const{
    return m_backends_isSet;
}

bool OAIBackendPoolUpdateParameters::is_backends_Valid() const{
    return m_backends_isValid;
}

OAIBackendPoolUpdateParameters_healthProbeSettings OAIBackendPoolUpdateParameters::getHealthProbeSettings() const {
    return m_health_probe_settings;
}
void OAIBackendPoolUpdateParameters::setHealthProbeSettings(const OAIBackendPoolUpdateParameters_healthProbeSettings &health_probe_settings) {
    m_health_probe_settings = health_probe_settings;
    m_health_probe_settings_isSet = true;
}

bool OAIBackendPoolUpdateParameters::is_health_probe_settings_Set() const{
    return m_health_probe_settings_isSet;
}

bool OAIBackendPoolUpdateParameters::is_health_probe_settings_Valid() const{
    return m_health_probe_settings_isValid;
}

OAIBackendPoolUpdateParameters_healthProbeSettings OAIBackendPoolUpdateParameters::getLoadBalancingSettings() const {
    return m_load_balancing_settings;
}
void OAIBackendPoolUpdateParameters::setLoadBalancingSettings(const OAIBackendPoolUpdateParameters_healthProbeSettings &load_balancing_settings) {
    m_load_balancing_settings = load_balancing_settings;
    m_load_balancing_settings_isSet = true;
}

bool OAIBackendPoolUpdateParameters::is_load_balancing_settings_Set() const{
    return m_load_balancing_settings_isSet;
}

bool OAIBackendPoolUpdateParameters::is_load_balancing_settings_Valid() const{
    return m_load_balancing_settings_isValid;
}

bool OAIBackendPoolUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backends.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_probe_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancing_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackendPoolUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
