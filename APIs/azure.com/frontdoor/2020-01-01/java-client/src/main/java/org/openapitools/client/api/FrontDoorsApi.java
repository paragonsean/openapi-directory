/*
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomHttpsConfiguration;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.FrontDoor;
import org.openapitools.client.model.FrontDoorListResult;
import org.openapitools.client.model.FrontendEndpoint;
import org.openapitools.client.model.FrontendEndpointsListResult;
import org.openapitools.client.model.PurgeParameters;
import org.openapitools.client.model.RulesEngine;
import org.openapitools.client.model.RulesEngineListResult;
import org.openapitools.client.model.ValidateCustomDomainInput;
import org.openapitools.client.model.ValidateCustomDomainOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FrontDoorsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FrontDoorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FrontDoorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for endpointsPurgeContent
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g. &#39;/pictures/city.png&#39; which removes a single file, or a directory with a wildcard, e.g. &#39;/pictures/_*&#39; which removes all folders and files in the directory. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsPurgeContentCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, PurgeParameters contentFilePaths, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentFilePaths;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/purge"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endpointsPurgeContentValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, PurgeParameters contentFilePaths, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling endpointsPurgeContent(Async)");
        }

        // verify the required parameter 'contentFilePaths' is set
        if (contentFilePaths == null) {
            throw new ApiException("Missing the required parameter 'contentFilePaths' when calling endpointsPurgeContent(Async)");
        }

        return endpointsPurgeContentCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, contentFilePaths, _callback);

    }

    /**
     * 
     * Removes a content from Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g. &#39;/pictures/city.png&#39; which removes a single file, or a directory with a wildcard, e.g. &#39;/pictures/_*&#39; which removes all folders and files in the directory. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void endpointsPurgeContent(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, PurgeParameters contentFilePaths) throws ApiException {
        endpointsPurgeContentWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, apiVersion, contentFilePaths);
    }

    /**
     * 
     * Removes a content from Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g. &#39;/pictures/city.png&#39; which removes a single file, or a directory with a wildcard, e.g. &#39;/pictures/_*&#39; which removes all folders and files in the directory. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> endpointsPurgeContentWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, PurgeParameters contentFilePaths) throws ApiException {
        okhttp3.Call localVarCall = endpointsPurgeContentValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, contentFilePaths, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a content from Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param contentFilePaths The path to the content to be purged. Path can be a full URL, e.g. &#39;/pictures/city.png&#39; which removes a single file, or a directory with a wildcard, e.g. &#39;/pictures/_*&#39; which removes all folders and files in the directory. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call endpointsPurgeContentAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, PurgeParameters contentFilePaths, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = endpointsPurgeContentValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, contentFilePaths, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for frontDoorsCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param frontDoorParameters Front Door properties needed to create a new Front Door. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new Front Door has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, FrontDoor frontDoorParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = frontDoorParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call frontDoorsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, FrontDoor frontDoorParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling frontDoorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling frontDoorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling frontDoorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling frontDoorsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'frontDoorParameters' is set
        if (frontDoorParameters == null) {
            throw new ApiException("Missing the required parameter 'frontDoorParameters' when calling frontDoorsCreateOrUpdate(Async)");
        }

        return frontDoorsCreateOrUpdateCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, frontDoorParameters, _callback);

    }

    /**
     * 
     * Creates a new Front Door with a Front Door name under the specified subscription and resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param frontDoorParameters Front Door properties needed to create a new Front Door. (required)
     * @return FrontDoor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new Front Door has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public FrontDoor frontDoorsCreateOrUpdate(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, FrontDoor frontDoorParameters) throws ApiException {
        ApiResponse<FrontDoor> localVarResp = frontDoorsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, apiVersion, frontDoorParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new Front Door with a Front Door name under the specified subscription and resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param frontDoorParameters Front Door properties needed to create a new Front Door. (required)
     * @return ApiResponse&lt;FrontDoor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new Front Door has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontDoor> frontDoorsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, FrontDoor frontDoorParameters) throws ApiException {
        okhttp3.Call localVarCall = frontDoorsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, frontDoorParameters, null);
        Type localVarReturnType = new TypeToken<FrontDoor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new Front Door with a Front Door name under the specified subscription and resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param frontDoorParameters Front Door properties needed to create a new Front Door. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new Front Door has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, FrontDoor frontDoorParameters, final ApiCallback<FrontDoor> _callback) throws ApiException {

        okhttp3.Call localVarCall = frontDoorsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, frontDoorParameters, _callback);
        Type localVarReturnType = new TypeToken<FrontDoor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for frontDoorsDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Front Door was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsDeleteCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call frontDoorsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling frontDoorsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling frontDoorsDelete(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling frontDoorsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling frontDoorsDelete(Async)");
        }

        return frontDoorsDeleteCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Front Door with the specified parameters.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Front Door was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void frontDoorsDelete(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion) throws ApiException {
        frontDoorsDeleteWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Front Door with the specified parameters.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Front Door was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> frontDoorsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = frontDoorsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Front Door with the specified parameters.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Front Door was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsDeleteAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = frontDoorsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for frontDoorsGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsGetCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call frontDoorsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling frontDoorsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling frontDoorsGet(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling frontDoorsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling frontDoorsGet(Async)");
        }

        return frontDoorsGetCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a Front Door with the specified Front Door name under the specified subscription and resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @return FrontDoor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public FrontDoor frontDoorsGet(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion) throws ApiException {
        ApiResponse<FrontDoor> localVarResp = frontDoorsGetWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a Front Door with the specified Front Door name under the specified subscription and resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;FrontDoor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontDoor> frontDoorsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = frontDoorsGetValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, null);
        Type localVarReturnType = new TypeToken<FrontDoor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a Front Door with the specified Front Door name under the specified subscription and resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsGetAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback<FrontDoor> _callback) throws ApiException {

        okhttp3.Call localVarCall = frontDoorsGetValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FrontDoor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for frontDoorsList
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/frontDoors"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call frontDoorsListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling frontDoorsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling frontDoorsList(Async)");
        }

        return frontDoorsListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the Front Doors within an Azure subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return FrontDoorListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public FrontDoorListResult frontDoorsList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<FrontDoorListResult> localVarResp = frontDoorsListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the Front Doors within an Azure subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;FrontDoorListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontDoorListResult> frontDoorsListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = frontDoorsListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FrontDoorListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the Front Doors within an Azure subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsListAsync(String subscriptionId, String apiVersion, final ApiCallback<FrontDoorListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = frontDoorsListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FrontDoorListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for frontDoorsListByResourceGroup
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call frontDoorsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling frontDoorsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling frontDoorsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling frontDoorsListByResourceGroup(Async)");
        }

        return frontDoorsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the Front Doors within a resource group under a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param apiVersion Client API version. (required)
     * @return FrontDoorListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public FrontDoorListResult frontDoorsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<FrontDoorListResult> localVarResp = frontDoorsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the Front Doors within a resource group under a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;FrontDoorListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontDoorListResult> frontDoorsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = frontDoorsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<FrontDoorListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the Front Doors within a resource group under a subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<FrontDoorListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = frontDoorsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FrontDoorListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for frontDoorsValidateCustomDomain
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param customDomainProperties Custom domain to be validated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsValidateCustomDomainCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, ValidateCustomDomainInput customDomainProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customDomainProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/validateCustomDomain"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call frontDoorsValidateCustomDomainValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, ValidateCustomDomainInput customDomainProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling frontDoorsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling frontDoorsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling frontDoorsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling frontDoorsValidateCustomDomain(Async)");
        }

        // verify the required parameter 'customDomainProperties' is set
        if (customDomainProperties == null) {
            throw new ApiException("Missing the required parameter 'customDomainProperties' when calling frontDoorsValidateCustomDomain(Async)");
        }

        return frontDoorsValidateCustomDomainCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, customDomainProperties, _callback);

    }

    /**
     * 
     * Validates the custom domain mapping to ensure it maps to the correct Front Door endpoint in DNS.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param customDomainProperties Custom domain to be validated. (required)
     * @return ValidateCustomDomainOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ValidateCustomDomainOutput frontDoorsValidateCustomDomain(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, ValidateCustomDomainInput customDomainProperties) throws ApiException {
        ApiResponse<ValidateCustomDomainOutput> localVarResp = frontDoorsValidateCustomDomainWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, apiVersion, customDomainProperties);
        return localVarResp.getData();
    }

    /**
     * 
     * Validates the custom domain mapping to ensure it maps to the correct Front Door endpoint in DNS.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param customDomainProperties Custom domain to be validated. (required)
     * @return ApiResponse&lt;ValidateCustomDomainOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateCustomDomainOutput> frontDoorsValidateCustomDomainWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, ValidateCustomDomainInput customDomainProperties) throws ApiException {
        okhttp3.Call localVarCall = frontDoorsValidateCustomDomainValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, customDomainProperties, null);
        Type localVarReturnType = new TypeToken<ValidateCustomDomainOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Validates the custom domain mapping to ensure it maps to the correct Front Door endpoint in DNS.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param customDomainProperties Custom domain to be validated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontDoorsValidateCustomDomainAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, ValidateCustomDomainInput customDomainProperties, final ApiCallback<ValidateCustomDomainOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = frontDoorsValidateCustomDomainValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, customDomainProperties, _callback);
        Type localVarReturnType = new TypeToken<ValidateCustomDomainOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for frontendEndpointsDisableHttps
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontendEndpointsDisableHttpsCall(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}/disableHttps"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()))
            .replace("{" + "frontendEndpointName" + "}", localVarApiClient.escapeString(frontendEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call frontendEndpointsDisableHttpsValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling frontendEndpointsDisableHttps(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling frontendEndpointsDisableHttps(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling frontendEndpointsDisableHttps(Async)");
        }

        // verify the required parameter 'frontendEndpointName' is set
        if (frontendEndpointName == null) {
            throw new ApiException("Missing the required parameter 'frontendEndpointName' when calling frontendEndpointsDisableHttps(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling frontendEndpointsDisableHttps(Async)");
        }

        return frontendEndpointsDisableHttpsCall(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, _callback);

    }

    /**
     * 
     * Disables a frontendEndpoint for HTTPS traffic
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void frontendEndpointsDisableHttps(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion) throws ApiException {
        frontendEndpointsDisableHttpsWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion);
    }

    /**
     * 
     * Disables a frontendEndpoint for HTTPS traffic
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> frontendEndpointsDisableHttpsWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = frontendEndpointsDisableHttpsValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disables a frontendEndpoint for HTTPS traffic
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontendEndpointsDisableHttpsAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = frontendEndpointsDisableHttpsValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for frontendEndpointsEnableHttps
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontendEndpointsEnableHttpsCall(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, CustomHttpsConfiguration customHttpsConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customHttpsConfiguration;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}/enableHttps"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()))
            .replace("{" + "frontendEndpointName" + "}", localVarApiClient.escapeString(frontendEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call frontendEndpointsEnableHttpsValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, CustomHttpsConfiguration customHttpsConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling frontendEndpointsEnableHttps(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling frontendEndpointsEnableHttps(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling frontendEndpointsEnableHttps(Async)");
        }

        // verify the required parameter 'frontendEndpointName' is set
        if (frontendEndpointName == null) {
            throw new ApiException("Missing the required parameter 'frontendEndpointName' when calling frontendEndpointsEnableHttps(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling frontendEndpointsEnableHttps(Async)");
        }

        // verify the required parameter 'customHttpsConfiguration' is set
        if (customHttpsConfiguration == null) {
            throw new ApiException("Missing the required parameter 'customHttpsConfiguration' when calling frontendEndpointsEnableHttps(Async)");
        }

        return frontendEndpointsEnableHttpsCall(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, customHttpsConfiguration, _callback);

    }

    /**
     * 
     * Enables a frontendEndpoint for HTTPS traffic
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void frontendEndpointsEnableHttps(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, CustomHttpsConfiguration customHttpsConfiguration) throws ApiException {
        frontendEndpointsEnableHttpsWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, customHttpsConfiguration);
    }

    /**
     * 
     * Enables a frontendEndpoint for HTTPS traffic
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> frontendEndpointsEnableHttpsWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, CustomHttpsConfiguration customHttpsConfiguration) throws ApiException {
        okhttp3.Call localVarCall = frontendEndpointsEnableHttpsValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, customHttpsConfiguration, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Enables a frontendEndpoint for HTTPS traffic
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param customHttpsConfiguration The configuration specifying how to enable HTTPS (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontendEndpointsEnableHttpsAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, CustomHttpsConfiguration customHttpsConfiguration, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = frontendEndpointsEnableHttpsValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, customHttpsConfiguration, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for frontendEndpointsGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontendEndpointsGetCall(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()))
            .replace("{" + "frontendEndpointName" + "}", localVarApiClient.escapeString(frontendEndpointName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call frontendEndpointsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling frontendEndpointsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling frontendEndpointsGet(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling frontendEndpointsGet(Async)");
        }

        // verify the required parameter 'frontendEndpointName' is set
        if (frontendEndpointName == null) {
            throw new ApiException("Missing the required parameter 'frontendEndpointName' when calling frontendEndpointsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling frontendEndpointsGet(Async)");
        }

        return frontendEndpointsGetCall(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a Frontend endpoint with the specified name within the specified Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @return FrontendEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public FrontendEndpoint frontendEndpointsGet(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion) throws ApiException {
        ApiResponse<FrontendEndpoint> localVarResp = frontendEndpointsGetWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a Frontend endpoint with the specified name within the specified Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;FrontendEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontendEndpoint> frontendEndpointsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = frontendEndpointsGetValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, null);
        Type localVarReturnType = new TypeToken<FrontendEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a Frontend endpoint with the specified name within the specified Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontendEndpointsGetAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String frontendEndpointName, String apiVersion, final ApiCallback<FrontendEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = frontendEndpointsGetValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FrontendEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for frontendEndpointsListByFrontDoor
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontendEndpointsListByFrontDoorCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call frontendEndpointsListByFrontDoorValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling frontendEndpointsListByFrontDoor(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling frontendEndpointsListByFrontDoor(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling frontendEndpointsListByFrontDoor(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling frontendEndpointsListByFrontDoor(Async)");
        }

        return frontendEndpointsListByFrontDoorCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the frontend endpoints within a Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @return FrontendEndpointsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public FrontendEndpointsListResult frontendEndpointsListByFrontDoor(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion) throws ApiException {
        ApiResponse<FrontendEndpointsListResult> localVarResp = frontendEndpointsListByFrontDoorWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the frontend endpoints within a Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;FrontendEndpointsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FrontendEndpointsListResult> frontendEndpointsListByFrontDoorWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = frontendEndpointsListByFrontDoorValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, null);
        Type localVarReturnType = new TypeToken<FrontendEndpointsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the frontend endpoints within a Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call frontendEndpointsListByFrontDoorAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback<FrontendEndpointsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = frontendEndpointsListByFrontDoorValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FrontendEndpointsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesEnginesCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new RulesEngine has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesEnginesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, RulesEngine rulesEngineParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rulesEngineParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines/{rulesEngineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()))
            .replace("{" + "rulesEngineName" + "}", localVarApiClient.escapeString(rulesEngineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesEnginesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, RulesEngine rulesEngineParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rulesEnginesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rulesEnginesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling rulesEnginesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'rulesEngineName' is set
        if (rulesEngineName == null) {
            throw new ApiException("Missing the required parameter 'rulesEngineName' when calling rulesEnginesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rulesEnginesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'rulesEngineParameters' is set
        if (rulesEngineParameters == null) {
            throw new ApiException("Missing the required parameter 'rulesEngineParameters' when calling rulesEnginesCreateOrUpdate(Async)");
        }

        return rulesEnginesCreateOrUpdateCall(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion, rulesEngineParameters, _callback);

    }

    /**
     * 
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration. (required)
     * @return RulesEngine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new RulesEngine has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RulesEngine rulesEnginesCreateOrUpdate(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, RulesEngine rulesEngineParameters) throws ApiException {
        ApiResponse<RulesEngine> localVarResp = rulesEnginesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion, rulesEngineParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration. (required)
     * @return ApiResponse&lt;RulesEngine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new RulesEngine has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RulesEngine> rulesEnginesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, RulesEngine rulesEngineParameters) throws ApiException {
        okhttp3.Call localVarCall = rulesEnginesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion, rulesEngineParameters, null);
        Type localVarReturnType = new TypeToken<RulesEngine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new Rules Engine Configuration with the specified name within the specified Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param rulesEngineParameters Rules Engine Configuration properties needed to create a new Rules Engine Configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. The request has been fulfilled and a new RulesEngine has been created. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesEnginesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, RulesEngine rulesEngineParameters, final ApiCallback<RulesEngine> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesEnginesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion, rulesEngineParameters, _callback);
        Type localVarReturnType = new TypeToken<RulesEngine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesEnginesDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Rules Engine Configuration was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesEnginesDeleteCall(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines/{rulesEngineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()))
            .replace("{" + "rulesEngineName" + "}", localVarApiClient.escapeString(rulesEngineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesEnginesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rulesEnginesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rulesEnginesDelete(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling rulesEnginesDelete(Async)");
        }

        // verify the required parameter 'rulesEngineName' is set
        if (rulesEngineName == null) {
            throw new ApiException("Missing the required parameter 'rulesEngineName' when calling rulesEnginesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rulesEnginesDelete(Async)");
        }

        return rulesEnginesDeleteCall(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Rules Engine Configuration was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void rulesEnginesDelete(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion) throws ApiException {
        rulesEnginesDeleteWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion);
    }

    /**
     * 
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Rules Engine Configuration was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rulesEnginesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = rulesEnginesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing Rules Engine Configuration with the specified parameters.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted for processing and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. The request has been accepted but the Rules Engine Configuration was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesEnginesDeleteAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesEnginesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesEnginesGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesEnginesGetCall(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines/{rulesEngineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()))
            .replace("{" + "rulesEngineName" + "}", localVarApiClient.escapeString(rulesEngineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesEnginesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rulesEnginesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rulesEnginesGet(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling rulesEnginesGet(Async)");
        }

        // verify the required parameter 'rulesEngineName' is set
        if (rulesEngineName == null) {
            throw new ApiException("Missing the required parameter 'rulesEngineName' when calling rulesEnginesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rulesEnginesGet(Async)");
        }

        return rulesEnginesGetCall(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a Rules Engine Configuration with the specified name within the specified Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @return RulesEngine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RulesEngine rulesEnginesGet(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion) throws ApiException {
        ApiResponse<RulesEngine> localVarResp = rulesEnginesGetWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a Rules Engine Configuration with the specified name within the specified Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;RulesEngine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RulesEngine> rulesEnginesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = rulesEnginesGetValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RulesEngine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a Rules Engine Configuration with the specified name within the specified Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param rulesEngineName Name of the Rules Engine which is unique within the Front Door. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesEnginesGetAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String rulesEngineName, String apiVersion, final ApiCallback<RulesEngine> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesEnginesGetValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, rulesEngineName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RulesEngine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rulesEnginesListByFrontDoor
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesEnginesListByFrontDoorCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/rulesEngines"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "frontDoorName" + "}", localVarApiClient.escapeString(frontDoorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rulesEnginesListByFrontDoorValidateBeforeCall(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rulesEnginesListByFrontDoor(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rulesEnginesListByFrontDoor(Async)");
        }

        // verify the required parameter 'frontDoorName' is set
        if (frontDoorName == null) {
            throw new ApiException("Missing the required parameter 'frontDoorName' when calling rulesEnginesListByFrontDoor(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rulesEnginesListByFrontDoor(Async)");
        }

        return rulesEnginesListByFrontDoorCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all of the Rules Engine Configurations within a Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @return RulesEngineListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RulesEngineListResult rulesEnginesListByFrontDoor(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion) throws ApiException {
        ApiResponse<RulesEngineListResult> localVarResp = rulesEnginesListByFrontDoorWithHttpInfo(subscriptionId, resourceGroupName, frontDoorName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the Rules Engine Configurations within a Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;RulesEngineListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RulesEngineListResult> rulesEnginesListByFrontDoorWithHttpInfo(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = rulesEnginesListByFrontDoorValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RulesEngineListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the Rules Engine Configurations within a Front Door.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the Resource group within the Azure subscription. (required)
     * @param frontDoorName Name of the Front Door which is globally unique. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Front Door error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rulesEnginesListByFrontDoorAsync(String subscriptionId, String resourceGroupName, String frontDoorName, String apiVersion, final ApiCallback<RulesEngineListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = rulesEnginesListByFrontDoorValidateBeforeCall(subscriptionId, resourceGroupName, frontDoorName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RulesEngineListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
