/*
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HeaderAction;
import org.openapitools.client.model.RouteConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * One or more actions that will execute, modifying the request and/or response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:27.576184-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RulesEngineAction {
  public static final String SERIALIZED_NAME_REQUEST_HEADER_ACTIONS = "requestHeaderActions";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADER_ACTIONS)
  private List<HeaderAction> requestHeaderActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESPONSE_HEADER_ACTIONS = "responseHeaderActions";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADER_ACTIONS)
  private List<HeaderAction> responseHeaderActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUTE_CONFIGURATION_OVERRIDE = "routeConfigurationOverride";
  @SerializedName(SERIALIZED_NAME_ROUTE_CONFIGURATION_OVERRIDE)
  private RouteConfiguration routeConfigurationOverride;

  public RulesEngineAction() {
  }

  public RulesEngineAction requestHeaderActions(List<HeaderAction> requestHeaderActions) {
    this.requestHeaderActions = requestHeaderActions;
    return this;
  }

  public RulesEngineAction addRequestHeaderActionsItem(HeaderAction requestHeaderActionsItem) {
    if (this.requestHeaderActions == null) {
      this.requestHeaderActions = new ArrayList<>();
    }
    this.requestHeaderActions.add(requestHeaderActionsItem);
    return this;
  }

  /**
   * A list of header actions to apply from the request from AFD to the origin.
   * @return requestHeaderActions
   */
  @javax.annotation.Nullable
  public List<HeaderAction> getRequestHeaderActions() {
    return requestHeaderActions;
  }

  public void setRequestHeaderActions(List<HeaderAction> requestHeaderActions) {
    this.requestHeaderActions = requestHeaderActions;
  }


  public RulesEngineAction responseHeaderActions(List<HeaderAction> responseHeaderActions) {
    this.responseHeaderActions = responseHeaderActions;
    return this;
  }

  public RulesEngineAction addResponseHeaderActionsItem(HeaderAction responseHeaderActionsItem) {
    if (this.responseHeaderActions == null) {
      this.responseHeaderActions = new ArrayList<>();
    }
    this.responseHeaderActions.add(responseHeaderActionsItem);
    return this;
  }

  /**
   * A list of header actions to apply from the response from AFD to the client.
   * @return responseHeaderActions
   */
  @javax.annotation.Nullable
  public List<HeaderAction> getResponseHeaderActions() {
    return responseHeaderActions;
  }

  public void setResponseHeaderActions(List<HeaderAction> responseHeaderActions) {
    this.responseHeaderActions = responseHeaderActions;
  }


  public RulesEngineAction routeConfigurationOverride(RouteConfiguration routeConfigurationOverride) {
    this.routeConfigurationOverride = routeConfigurationOverride;
    return this;
  }

  /**
   * Get routeConfigurationOverride
   * @return routeConfigurationOverride
   */
  @javax.annotation.Nullable
  public RouteConfiguration getRouteConfigurationOverride() {
    return routeConfigurationOverride;
  }

  public void setRouteConfigurationOverride(RouteConfiguration routeConfigurationOverride) {
    this.routeConfigurationOverride = routeConfigurationOverride;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RulesEngineAction rulesEngineAction = (RulesEngineAction) o;
    return Objects.equals(this.requestHeaderActions, rulesEngineAction.requestHeaderActions) &&
        Objects.equals(this.responseHeaderActions, rulesEngineAction.responseHeaderActions) &&
        Objects.equals(this.routeConfigurationOverride, rulesEngineAction.routeConfigurationOverride);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestHeaderActions, responseHeaderActions, routeConfigurationOverride);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RulesEngineAction {\n");
    sb.append("    requestHeaderActions: ").append(toIndentedString(requestHeaderActions)).append("\n");
    sb.append("    responseHeaderActions: ").append(toIndentedString(responseHeaderActions)).append("\n");
    sb.append("    routeConfigurationOverride: ").append(toIndentedString(routeConfigurationOverride)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestHeaderActions");
    openapiFields.add("responseHeaderActions");
    openapiFields.add("routeConfigurationOverride");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RulesEngineAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RulesEngineAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RulesEngineAction is not found in the empty JSON string", RulesEngineAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RulesEngineAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RulesEngineAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("requestHeaderActions") != null && !jsonObj.get("requestHeaderActions").isJsonNull()) {
        JsonArray jsonArrayrequestHeaderActions = jsonObj.getAsJsonArray("requestHeaderActions");
        if (jsonArrayrequestHeaderActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requestHeaderActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requestHeaderActions` to be an array in the JSON string but got `%s`", jsonObj.get("requestHeaderActions").toString()));
          }

          // validate the optional field `requestHeaderActions` (array)
          for (int i = 0; i < jsonArrayrequestHeaderActions.size(); i++) {
            HeaderAction.validateJsonElement(jsonArrayrequestHeaderActions.get(i));
          };
        }
      }
      if (jsonObj.get("responseHeaderActions") != null && !jsonObj.get("responseHeaderActions").isJsonNull()) {
        JsonArray jsonArrayresponseHeaderActions = jsonObj.getAsJsonArray("responseHeaderActions");
        if (jsonArrayresponseHeaderActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("responseHeaderActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responseHeaderActions` to be an array in the JSON string but got `%s`", jsonObj.get("responseHeaderActions").toString()));
          }

          // validate the optional field `responseHeaderActions` (array)
          for (int i = 0; i < jsonArrayresponseHeaderActions.size(); i++) {
            HeaderAction.validateJsonElement(jsonArrayresponseHeaderActions.get(i));
          };
        }
      }
      // validate the optional field `routeConfigurationOverride`
      if (jsonObj.get("routeConfigurationOverride") != null && !jsonObj.get("routeConfigurationOverride").isJsonNull()) {
        RouteConfiguration.validateJsonElement(jsonObj.get("routeConfigurationOverride"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RulesEngineAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RulesEngineAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RulesEngineAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RulesEngineAction.class));

       return (TypeAdapter<T>) new TypeAdapter<RulesEngineAction>() {
           @Override
           public void write(JsonWriter out, RulesEngineAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RulesEngineAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RulesEngineAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RulesEngineAction
   * @throws IOException if the JSON string is invalid with respect to RulesEngineAction
   */
  public static RulesEngineAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RulesEngineAction.class);
  }

  /**
   * Convert an instance of RulesEngineAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

