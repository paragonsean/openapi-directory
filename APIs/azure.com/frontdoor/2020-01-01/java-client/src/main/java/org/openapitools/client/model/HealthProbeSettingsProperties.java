/*
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResourceState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The JSON object that contains the properties required to create a health probe settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:27.576184-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthProbeSettingsProperties {
  public static final String SERIALIZED_NAME_RESOURCE_STATE = "resourceState";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATE)
  private ResourceState resourceState;

  /**
   * Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
   */
  @JsonAdapter(EnabledStateEnum.Adapter.class)
  public enum EnabledStateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    EnabledStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnabledStateEnum fromValue(String value) {
      for (EnabledStateEnum b : EnabledStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnabledStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnabledStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnabledStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnabledStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnabledStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENABLED_STATE = "enabledState";
  @SerializedName(SERIALIZED_NAME_ENABLED_STATE)
  private EnabledStateEnum enabledState;

  /**
   * Configures which HTTP method to use to probe the backends defined under backendPools.
   */
  @JsonAdapter(HealthProbeMethodEnum.Adapter.class)
  public enum HealthProbeMethodEnum {
    GET("GET"),
    
    HEAD("HEAD");

    private String value;

    HealthProbeMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthProbeMethodEnum fromValue(String value) {
      for (HealthProbeMethodEnum b : HealthProbeMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthProbeMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthProbeMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthProbeMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthProbeMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthProbeMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH_PROBE_METHOD = "healthProbeMethod";
  @SerializedName(SERIALIZED_NAME_HEALTH_PROBE_METHOD)
  private HealthProbeMethodEnum healthProbeMethod = HealthProbeMethodEnum.HEAD;

  public static final String SERIALIZED_NAME_INTERVAL_IN_SECONDS = "intervalInSeconds";
  @SerializedName(SERIALIZED_NAME_INTERVAL_IN_SECONDS)
  private Integer intervalInSeconds;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  /**
   * Protocol scheme to use for this probe
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    HTTP("Http"),
    
    HTTPS("Https");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public HealthProbeSettingsProperties() {
  }

  public HealthProbeSettingsProperties resourceState(ResourceState resourceState) {
    this.resourceState = resourceState;
    return this;
  }

  /**
   * Get resourceState
   * @return resourceState
   */
  @javax.annotation.Nullable
  public ResourceState getResourceState() {
    return resourceState;
  }

  public void setResourceState(ResourceState resourceState) {
    this.resourceState = resourceState;
  }


  public HealthProbeSettingsProperties enabledState(EnabledStateEnum enabledState) {
    this.enabledState = enabledState;
    return this;
  }

  /**
   * Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool.
   * @return enabledState
   */
  @javax.annotation.Nullable
  public EnabledStateEnum getEnabledState() {
    return enabledState;
  }

  public void setEnabledState(EnabledStateEnum enabledState) {
    this.enabledState = enabledState;
  }


  public HealthProbeSettingsProperties healthProbeMethod(HealthProbeMethodEnum healthProbeMethod) {
    this.healthProbeMethod = healthProbeMethod;
    return this;
  }

  /**
   * Configures which HTTP method to use to probe the backends defined under backendPools.
   * @return healthProbeMethod
   */
  @javax.annotation.Nullable
  public HealthProbeMethodEnum getHealthProbeMethod() {
    return healthProbeMethod;
  }

  public void setHealthProbeMethod(HealthProbeMethodEnum healthProbeMethod) {
    this.healthProbeMethod = healthProbeMethod;
  }


  public HealthProbeSettingsProperties intervalInSeconds(Integer intervalInSeconds) {
    this.intervalInSeconds = intervalInSeconds;
    return this;
  }

  /**
   * The number of seconds between health probes.
   * @return intervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getIntervalInSeconds() {
    return intervalInSeconds;
  }

  public void setIntervalInSeconds(Integer intervalInSeconds) {
    this.intervalInSeconds = intervalInSeconds;
  }


  public HealthProbeSettingsProperties path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path to use for the health probe. Default is /
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public HealthProbeSettingsProperties protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Protocol scheme to use for this probe
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthProbeSettingsProperties healthProbeSettingsProperties = (HealthProbeSettingsProperties) o;
    return Objects.equals(this.resourceState, healthProbeSettingsProperties.resourceState) &&
        Objects.equals(this.enabledState, healthProbeSettingsProperties.enabledState) &&
        Objects.equals(this.healthProbeMethod, healthProbeSettingsProperties.healthProbeMethod) &&
        Objects.equals(this.intervalInSeconds, healthProbeSettingsProperties.intervalInSeconds) &&
        Objects.equals(this.path, healthProbeSettingsProperties.path) &&
        Objects.equals(this.protocol, healthProbeSettingsProperties.protocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceState, enabledState, healthProbeMethod, intervalInSeconds, path, protocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthProbeSettingsProperties {\n");
    sb.append("    resourceState: ").append(toIndentedString(resourceState)).append("\n");
    sb.append("    enabledState: ").append(toIndentedString(enabledState)).append("\n");
    sb.append("    healthProbeMethod: ").append(toIndentedString(healthProbeMethod)).append("\n");
    sb.append("    intervalInSeconds: ").append(toIndentedString(intervalInSeconds)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabledState");
    openapiFields.add("healthProbeMethod");
    openapiFields.add("intervalInSeconds");
    openapiFields.add("path");
    openapiFields.add("protocol");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthProbeSettingsProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthProbeSettingsProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthProbeSettingsProperties is not found in the empty JSON string", HealthProbeSettingsProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthProbeSettingsProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthProbeSettingsProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `resourceState`
      if (jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) {
        ResourceState.validateJsonElement(jsonObj.get("resourceState"));
      }
      if ((jsonObj.get("enabledState") != null && !jsonObj.get("enabledState").isJsonNull()) && !jsonObj.get("enabledState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabledState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enabledState").toString()));
      }
      // validate the optional field `enabledState`
      if (jsonObj.get("enabledState") != null && !jsonObj.get("enabledState").isJsonNull()) {
        EnabledStateEnum.validateJsonElement(jsonObj.get("enabledState"));
      }
      if ((jsonObj.get("healthProbeMethod") != null && !jsonObj.get("healthProbeMethod").isJsonNull()) && !jsonObj.get("healthProbeMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthProbeMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthProbeMethod").toString()));
      }
      // validate the optional field `healthProbeMethod`
      if (jsonObj.get("healthProbeMethod") != null && !jsonObj.get("healthProbeMethod").isJsonNull()) {
        HealthProbeMethodEnum.validateJsonElement(jsonObj.get("healthProbeMethod"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthProbeSettingsProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthProbeSettingsProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthProbeSettingsProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthProbeSettingsProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthProbeSettingsProperties>() {
           @Override
           public void write(JsonWriter out, HealthProbeSettingsProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthProbeSettingsProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthProbeSettingsProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthProbeSettingsProperties
   * @throws IOException if the JSON string is invalid with respect to HealthProbeSettingsProperties
   */
  public static HealthProbeSettingsProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthProbeSettingsProperties.class);
  }

  /**
   * Convert an instance of HealthProbeSettingsProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

