/*
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RulesEngineAction;
import org.openapitools.client.model.RulesEngineMatchCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains a list of match conditions, and an action on how to modify the request/response. If multiple rules match, the actions from one rule that conflict with a previous rule overwrite for a singular action, or append in the case of headers manipulation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:27.576184-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RulesEngineRule {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private RulesEngineAction action;

  public static final String SERIALIZED_NAME_MATCH_CONDITIONS = "matchConditions";
  @SerializedName(SERIALIZED_NAME_MATCH_CONDITIONS)
  private List<RulesEngineMatchCondition> matchConditions = new ArrayList<>();

  /**
   * If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
   */
  @JsonAdapter(MatchProcessingBehaviorEnum.Adapter.class)
  public enum MatchProcessingBehaviorEnum {
    CONTINUE("Continue"),
    
    STOP("Stop");

    private String value;

    MatchProcessingBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatchProcessingBehaviorEnum fromValue(String value) {
      for (MatchProcessingBehaviorEnum b : MatchProcessingBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatchProcessingBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatchProcessingBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatchProcessingBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatchProcessingBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatchProcessingBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCH_PROCESSING_BEHAVIOR = "matchProcessingBehavior";
  @SerializedName(SERIALIZED_NAME_MATCH_PROCESSING_BEHAVIOR)
  private MatchProcessingBehaviorEnum matchProcessingBehavior;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public RulesEngineRule() {
  }

  public RulesEngineRule action(RulesEngineAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public RulesEngineAction getAction() {
    return action;
  }

  public void setAction(RulesEngineAction action) {
    this.action = action;
  }


  public RulesEngineRule matchConditions(List<RulesEngineMatchCondition> matchConditions) {
    this.matchConditions = matchConditions;
    return this;
  }

  public RulesEngineRule addMatchConditionsItem(RulesEngineMatchCondition matchConditionsItem) {
    if (this.matchConditions == null) {
      this.matchConditions = new ArrayList<>();
    }
    this.matchConditions.add(matchConditionsItem);
    return this;
  }

  /**
   * A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.
   * @return matchConditions
   */
  @javax.annotation.Nullable
  public List<RulesEngineMatchCondition> getMatchConditions() {
    return matchConditions;
  }

  public void setMatchConditions(List<RulesEngineMatchCondition> matchConditions) {
    this.matchConditions = matchConditions;
  }


  public RulesEngineRule matchProcessingBehavior(MatchProcessingBehaviorEnum matchProcessingBehavior) {
    this.matchProcessingBehavior = matchProcessingBehavior;
    return this;
  }

  /**
   * If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.
   * @return matchProcessingBehavior
   */
  @javax.annotation.Nullable
  public MatchProcessingBehaviorEnum getMatchProcessingBehavior() {
    return matchProcessingBehavior;
  }

  public void setMatchProcessingBehavior(MatchProcessingBehaviorEnum matchProcessingBehavior) {
    this.matchProcessingBehavior = matchProcessingBehavior;
  }


  public RulesEngineRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name to refer to this specific rule.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RulesEngineRule priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * A priority assigned to this rule. 
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RulesEngineRule rulesEngineRule = (RulesEngineRule) o;
    return Objects.equals(this.action, rulesEngineRule.action) &&
        Objects.equals(this.matchConditions, rulesEngineRule.matchConditions) &&
        Objects.equals(this.matchProcessingBehavior, rulesEngineRule.matchProcessingBehavior) &&
        Objects.equals(this.name, rulesEngineRule.name) &&
        Objects.equals(this.priority, rulesEngineRule.priority);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, matchConditions, matchProcessingBehavior, name, priority);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RulesEngineRule {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    matchConditions: ").append(toIndentedString(matchConditions)).append("\n");
    sb.append("    matchProcessingBehavior: ").append(toIndentedString(matchProcessingBehavior)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("matchConditions");
    openapiFields.add("matchProcessingBehavior");
    openapiFields.add("name");
    openapiFields.add("priority");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("priority");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RulesEngineRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RulesEngineRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RulesEngineRule is not found in the empty JSON string", RulesEngineRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RulesEngineRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RulesEngineRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RulesEngineRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `action`
      RulesEngineAction.validateJsonElement(jsonObj.get("action"));
      if (jsonObj.get("matchConditions") != null && !jsonObj.get("matchConditions").isJsonNull()) {
        JsonArray jsonArraymatchConditions = jsonObj.getAsJsonArray("matchConditions");
        if (jsonArraymatchConditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matchConditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matchConditions` to be an array in the JSON string but got `%s`", jsonObj.get("matchConditions").toString()));
          }

          // validate the optional field `matchConditions` (array)
          for (int i = 0; i < jsonArraymatchConditions.size(); i++) {
            RulesEngineMatchCondition.validateJsonElement(jsonArraymatchConditions.get(i));
          };
        }
      }
      if ((jsonObj.get("matchProcessingBehavior") != null && !jsonObj.get("matchProcessingBehavior").isJsonNull()) && !jsonObj.get("matchProcessingBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchProcessingBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchProcessingBehavior").toString()));
      }
      // validate the optional field `matchProcessingBehavior`
      if (jsonObj.get("matchProcessingBehavior") != null && !jsonObj.get("matchProcessingBehavior").isJsonNull()) {
        MatchProcessingBehaviorEnum.validateJsonElement(jsonObj.get("matchProcessingBehavior"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RulesEngineRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RulesEngineRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RulesEngineRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RulesEngineRule.class));

       return (TypeAdapter<T>) new TypeAdapter<RulesEngineRule>() {
           @Override
           public void write(JsonWriter out, RulesEngineRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RulesEngineRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RulesEngineRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RulesEngineRule
   * @throws IOException if the JSON string is invalid with respect to RulesEngineRule
   */
  public static RulesEngineRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RulesEngineRule.class);
  }

  /**
   * Convert an instance of RulesEngineRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

