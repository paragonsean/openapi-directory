/*
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RouteConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes Redirect Route.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:27.576184-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RedirectConfiguration extends RouteConfiguration {
  public static final String SERIALIZED_NAME_CUSTOM_FRAGMENT = "customFragment";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FRAGMENT)
  private String customFragment;

  public static final String SERIALIZED_NAME_CUSTOM_HOST = "customHost";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HOST)
  private String customHost;

  public static final String SERIALIZED_NAME_CUSTOM_PATH = "customPath";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PATH)
  private String customPath;

  public static final String SERIALIZED_NAME_CUSTOM_QUERY_STRING = "customQueryString";
  @SerializedName(SERIALIZED_NAME_CUSTOM_QUERY_STRING)
  private String customQueryString;

  /**
   * The protocol of the destination to where the traffic is redirected
   */
  @JsonAdapter(RedirectProtocolEnum.Adapter.class)
  public enum RedirectProtocolEnum {
    HTTP_ONLY("HttpOnly"),
    
    HTTPS_ONLY("HttpsOnly"),
    
    MATCH_REQUEST("MatchRequest");

    private String value;

    RedirectProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedirectProtocolEnum fromValue(String value) {
      for (RedirectProtocolEnum b : RedirectProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedirectProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedirectProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedirectProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedirectProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RedirectProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REDIRECT_PROTOCOL = "redirectProtocol";
  @SerializedName(SERIALIZED_NAME_REDIRECT_PROTOCOL)
  private RedirectProtocolEnum redirectProtocol;

  /**
   * The redirect type the rule will use when redirecting traffic.
   */
  @JsonAdapter(RedirectTypeEnum.Adapter.class)
  public enum RedirectTypeEnum {
    MOVED("Moved"),
    
    FOUND("Found"),
    
    TEMPORARY_REDIRECT("TemporaryRedirect"),
    
    PERMANENT_REDIRECT("PermanentRedirect");

    private String value;

    RedirectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedirectTypeEnum fromValue(String value) {
      for (RedirectTypeEnum b : RedirectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedirectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedirectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedirectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedirectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RedirectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REDIRECT_TYPE = "redirectType";
  @SerializedName(SERIALIZED_NAME_REDIRECT_TYPE)
  private RedirectTypeEnum redirectType;

  public RedirectConfiguration() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public RedirectConfiguration customFragment(String customFragment) {
    this.customFragment = customFragment;
    return this;
  }

  /**
   * Fragment to add to the redirect URL. Fragment is the part of the URL that comes after #. Do not include the #.
   * @return customFragment
   */
  @javax.annotation.Nullable
  public String getCustomFragment() {
    return customFragment;
  }

  public void setCustomFragment(String customFragment) {
    this.customFragment = customFragment;
  }


  public RedirectConfiguration customHost(String customHost) {
    this.customHost = customHost;
    return this;
  }

  /**
   * Host to redirect. Leave empty to use the incoming host as the destination host.
   * @return customHost
   */
  @javax.annotation.Nullable
  public String getCustomHost() {
    return customHost;
  }

  public void setCustomHost(String customHost) {
    this.customHost = customHost;
  }


  public RedirectConfiguration customPath(String customPath) {
    this.customPath = customPath;
    return this;
  }

  /**
   * The full path to redirect. Path cannot be empty and must start with /. Leave empty to use the incoming path as destination path.
   * @return customPath
   */
  @javax.annotation.Nullable
  public String getCustomPath() {
    return customPath;
  }

  public void setCustomPath(String customPath) {
    this.customPath = customPath;
  }


  public RedirectConfiguration customQueryString(String customQueryString) {
    this.customQueryString = customQueryString;
    return this;
  }

  /**
   * The set of query strings to be placed in the redirect URL. Setting this value would replace any existing query string; leave empty to preserve the incoming query string. Query string must be in &lt;key&gt;&#x3D;&lt;value&gt; format. The first ? and &amp; will be added automatically so do not include them in the front, but do separate multiple query strings with &amp;.
   * @return customQueryString
   */
  @javax.annotation.Nullable
  public String getCustomQueryString() {
    return customQueryString;
  }

  public void setCustomQueryString(String customQueryString) {
    this.customQueryString = customQueryString;
  }


  public RedirectConfiguration redirectProtocol(RedirectProtocolEnum redirectProtocol) {
    this.redirectProtocol = redirectProtocol;
    return this;
  }

  /**
   * The protocol of the destination to where the traffic is redirected
   * @return redirectProtocol
   */
  @javax.annotation.Nullable
  public RedirectProtocolEnum getRedirectProtocol() {
    return redirectProtocol;
  }

  public void setRedirectProtocol(RedirectProtocolEnum redirectProtocol) {
    this.redirectProtocol = redirectProtocol;
  }


  public RedirectConfiguration redirectType(RedirectTypeEnum redirectType) {
    this.redirectType = redirectType;
    return this;
  }

  /**
   * The redirect type the rule will use when redirecting traffic.
   * @return redirectType
   */
  @javax.annotation.Nullable
  public RedirectTypeEnum getRedirectType() {
    return redirectType;
  }

  public void setRedirectType(RedirectTypeEnum redirectType) {
    this.redirectType = redirectType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedirectConfiguration redirectConfiguration = (RedirectConfiguration) o;
    return Objects.equals(this.customFragment, redirectConfiguration.customFragment) &&
        Objects.equals(this.customHost, redirectConfiguration.customHost) &&
        Objects.equals(this.customPath, redirectConfiguration.customPath) &&
        Objects.equals(this.customQueryString, redirectConfiguration.customQueryString) &&
        Objects.equals(this.redirectProtocol, redirectConfiguration.redirectProtocol) &&
        Objects.equals(this.redirectType, redirectConfiguration.redirectType) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customFragment, customHost, customPath, customQueryString, redirectProtocol, redirectType, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedirectConfiguration {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    customFragment: ").append(toIndentedString(customFragment)).append("\n");
    sb.append("    customHost: ").append(toIndentedString(customHost)).append("\n");
    sb.append("    customPath: ").append(toIndentedString(customPath)).append("\n");
    sb.append("    customQueryString: ").append(toIndentedString(customQueryString)).append("\n");
    sb.append("    redirectProtocol: ").append(toIndentedString(redirectProtocol)).append("\n");
    sb.append("    redirectType: ").append(toIndentedString(redirectType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RedirectConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RedirectConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RedirectConfiguration is not found in the empty JSON string", RedirectConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RedirectConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RedirectConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RedirectConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedirectConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedirectConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedirectConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedirectConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<RedirectConfiguration>() {
           @Override
           public void write(JsonWriter out, RedirectConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RedirectConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RedirectConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RedirectConfiguration
   * @throws IOException if the JSON string is invalid with respect to RedirectConfiguration
   */
  public static RedirectConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedirectConfiguration.class);
  }

  /**
   * Convert an instance of RedirectConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

