/*
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Transform;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Define a match condition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:27.576184-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RulesEngineMatchCondition {
  public static final String SERIALIZED_NAME_NEGATE_CONDITION = "negateCondition";
  @SerializedName(SERIALIZED_NAME_NEGATE_CONDITION)
  private Boolean negateCondition;

  public static final String SERIALIZED_NAME_RULES_ENGINE_MATCH_VALUE = "rulesEngineMatchValue";
  @SerializedName(SERIALIZED_NAME_RULES_ENGINE_MATCH_VALUE)
  private List<String> rulesEngineMatchValue = new ArrayList<>();

  /**
   * Match Variable
   */
  @JsonAdapter(RulesEngineMatchVariableEnum.Adapter.class)
  public enum RulesEngineMatchVariableEnum {
    IS_MOBILE("IsMobile"),
    
    REMOTE_ADDR("RemoteAddr"),
    
    REQUEST_METHOD("RequestMethod"),
    
    QUERY_STRING("QueryString"),
    
    POST_ARGS("PostArgs"),
    
    REQUEST_URI("RequestUri"),
    
    REQUEST_PATH("RequestPath"),
    
    REQUEST_FILENAME("RequestFilename"),
    
    REQUEST_FILENAME_EXTENSION("RequestFilenameExtension"),
    
    REQUEST_HEADER("RequestHeader"),
    
    REQUEST_BODY("RequestBody"),
    
    REQUEST_SCHEME("RequestScheme");

    private String value;

    RulesEngineMatchVariableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RulesEngineMatchVariableEnum fromValue(String value) {
      for (RulesEngineMatchVariableEnum b : RulesEngineMatchVariableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RulesEngineMatchVariableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RulesEngineMatchVariableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RulesEngineMatchVariableEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RulesEngineMatchVariableEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RulesEngineMatchVariableEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULES_ENGINE_MATCH_VARIABLE = "rulesEngineMatchVariable";
  @SerializedName(SERIALIZED_NAME_RULES_ENGINE_MATCH_VARIABLE)
  private RulesEngineMatchVariableEnum rulesEngineMatchVariable;

  /**
   * Describes operator to apply to the match condition.
   */
  @JsonAdapter(RulesEngineOperatorEnum.Adapter.class)
  public enum RulesEngineOperatorEnum {
    ANY("Any"),
    
    IP_MATCH("IPMatch"),
    
    GEO_MATCH("GeoMatch"),
    
    EQUAL("Equal"),
    
    CONTAINS("Contains"),
    
    LESS_THAN("LessThan"),
    
    GREATER_THAN("GreaterThan"),
    
    LESS_THAN_OR_EQUAL("LessThanOrEqual"),
    
    GREATER_THAN_OR_EQUAL("GreaterThanOrEqual"),
    
    BEGINS_WITH("BeginsWith"),
    
    ENDS_WITH("EndsWith");

    private String value;

    RulesEngineOperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RulesEngineOperatorEnum fromValue(String value) {
      for (RulesEngineOperatorEnum b : RulesEngineOperatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RulesEngineOperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RulesEngineOperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RulesEngineOperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RulesEngineOperatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RulesEngineOperatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULES_ENGINE_OPERATOR = "rulesEngineOperator";
  @SerializedName(SERIALIZED_NAME_RULES_ENGINE_OPERATOR)
  private RulesEngineOperatorEnum rulesEngineOperator;

  public static final String SERIALIZED_NAME_SELECTOR = "selector";
  @SerializedName(SERIALIZED_NAME_SELECTOR)
  private String selector;

  public static final String SERIALIZED_NAME_TRANSFORMS = "transforms";
  @SerializedName(SERIALIZED_NAME_TRANSFORMS)
  private List<Transform> transforms = new ArrayList<>();

  public RulesEngineMatchCondition() {
  }

  public RulesEngineMatchCondition negateCondition(Boolean negateCondition) {
    this.negateCondition = negateCondition;
    return this;
  }

  /**
   * Describes if this is negate condition or not
   * @return negateCondition
   */
  @javax.annotation.Nullable
  public Boolean getNegateCondition() {
    return negateCondition;
  }

  public void setNegateCondition(Boolean negateCondition) {
    this.negateCondition = negateCondition;
  }


  public RulesEngineMatchCondition rulesEngineMatchValue(List<String> rulesEngineMatchValue) {
    this.rulesEngineMatchValue = rulesEngineMatchValue;
    return this;
  }

  public RulesEngineMatchCondition addRulesEngineMatchValueItem(String rulesEngineMatchValueItem) {
    if (this.rulesEngineMatchValue == null) {
      this.rulesEngineMatchValue = new ArrayList<>();
    }
    this.rulesEngineMatchValue.add(rulesEngineMatchValueItem);
    return this;
  }

  /**
   * Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
   * @return rulesEngineMatchValue
   */
  @javax.annotation.Nonnull
  public List<String> getRulesEngineMatchValue() {
    return rulesEngineMatchValue;
  }

  public void setRulesEngineMatchValue(List<String> rulesEngineMatchValue) {
    this.rulesEngineMatchValue = rulesEngineMatchValue;
  }


  public RulesEngineMatchCondition rulesEngineMatchVariable(RulesEngineMatchVariableEnum rulesEngineMatchVariable) {
    this.rulesEngineMatchVariable = rulesEngineMatchVariable;
    return this;
  }

  /**
   * Match Variable
   * @return rulesEngineMatchVariable
   */
  @javax.annotation.Nonnull
  public RulesEngineMatchVariableEnum getRulesEngineMatchVariable() {
    return rulesEngineMatchVariable;
  }

  public void setRulesEngineMatchVariable(RulesEngineMatchVariableEnum rulesEngineMatchVariable) {
    this.rulesEngineMatchVariable = rulesEngineMatchVariable;
  }


  public RulesEngineMatchCondition rulesEngineOperator(RulesEngineOperatorEnum rulesEngineOperator) {
    this.rulesEngineOperator = rulesEngineOperator;
    return this;
  }

  /**
   * Describes operator to apply to the match condition.
   * @return rulesEngineOperator
   */
  @javax.annotation.Nonnull
  public RulesEngineOperatorEnum getRulesEngineOperator() {
    return rulesEngineOperator;
  }

  public void setRulesEngineOperator(RulesEngineOperatorEnum rulesEngineOperator) {
    this.rulesEngineOperator = rulesEngineOperator;
  }


  public RulesEngineMatchCondition selector(String selector) {
    this.selector = selector;
    return this;
  }

  /**
   * Name of selector in RequestHeader or RequestBody to be matched
   * @return selector
   */
  @javax.annotation.Nullable
  public String getSelector() {
    return selector;
  }

  public void setSelector(String selector) {
    this.selector = selector;
  }


  public RulesEngineMatchCondition transforms(List<Transform> transforms) {
    this.transforms = transforms;
    return this;
  }

  public RulesEngineMatchCondition addTransformsItem(Transform transformsItem) {
    if (this.transforms == null) {
      this.transforms = new ArrayList<>();
    }
    this.transforms.add(transformsItem);
    return this;
  }

  /**
   * List of transforms
   * @return transforms
   */
  @javax.annotation.Nullable
  public List<Transform> getTransforms() {
    return transforms;
  }

  public void setTransforms(List<Transform> transforms) {
    this.transforms = transforms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RulesEngineMatchCondition rulesEngineMatchCondition = (RulesEngineMatchCondition) o;
    return Objects.equals(this.negateCondition, rulesEngineMatchCondition.negateCondition) &&
        Objects.equals(this.rulesEngineMatchValue, rulesEngineMatchCondition.rulesEngineMatchValue) &&
        Objects.equals(this.rulesEngineMatchVariable, rulesEngineMatchCondition.rulesEngineMatchVariable) &&
        Objects.equals(this.rulesEngineOperator, rulesEngineMatchCondition.rulesEngineOperator) &&
        Objects.equals(this.selector, rulesEngineMatchCondition.selector) &&
        Objects.equals(this.transforms, rulesEngineMatchCondition.transforms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(negateCondition, rulesEngineMatchValue, rulesEngineMatchVariable, rulesEngineOperator, selector, transforms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RulesEngineMatchCondition {\n");
    sb.append("    negateCondition: ").append(toIndentedString(negateCondition)).append("\n");
    sb.append("    rulesEngineMatchValue: ").append(toIndentedString(rulesEngineMatchValue)).append("\n");
    sb.append("    rulesEngineMatchVariable: ").append(toIndentedString(rulesEngineMatchVariable)).append("\n");
    sb.append("    rulesEngineOperator: ").append(toIndentedString(rulesEngineOperator)).append("\n");
    sb.append("    selector: ").append(toIndentedString(selector)).append("\n");
    sb.append("    transforms: ").append(toIndentedString(transforms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("negateCondition");
    openapiFields.add("rulesEngineMatchValue");
    openapiFields.add("rulesEngineMatchVariable");
    openapiFields.add("rulesEngineOperator");
    openapiFields.add("selector");
    openapiFields.add("transforms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rulesEngineMatchValue");
    openapiRequiredFields.add("rulesEngineMatchVariable");
    openapiRequiredFields.add("rulesEngineOperator");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RulesEngineMatchCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RulesEngineMatchCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RulesEngineMatchCondition is not found in the empty JSON string", RulesEngineMatchCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RulesEngineMatchCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RulesEngineMatchCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RulesEngineMatchCondition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("rulesEngineMatchValue") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rulesEngineMatchValue").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rulesEngineMatchValue` to be an array in the JSON string but got `%s`", jsonObj.get("rulesEngineMatchValue").toString()));
      }
      if (!jsonObj.get("rulesEngineMatchVariable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rulesEngineMatchVariable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rulesEngineMatchVariable").toString()));
      }
      // validate the required field `rulesEngineMatchVariable`
      RulesEngineMatchVariableEnum.validateJsonElement(jsonObj.get("rulesEngineMatchVariable"));
      if (!jsonObj.get("rulesEngineOperator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rulesEngineOperator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rulesEngineOperator").toString()));
      }
      // validate the required field `rulesEngineOperator`
      RulesEngineOperatorEnum.validateJsonElement(jsonObj.get("rulesEngineOperator"));
      if ((jsonObj.get("selector") != null && !jsonObj.get("selector").isJsonNull()) && !jsonObj.get("selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selector").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transforms") != null && !jsonObj.get("transforms").isJsonNull() && !jsonObj.get("transforms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transforms` to be an array in the JSON string but got `%s`", jsonObj.get("transforms").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RulesEngineMatchCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RulesEngineMatchCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RulesEngineMatchCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RulesEngineMatchCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<RulesEngineMatchCondition>() {
           @Override
           public void write(JsonWriter out, RulesEngineMatchCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RulesEngineMatchCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RulesEngineMatchCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RulesEngineMatchCondition
   * @throws IOException if the JSON string is invalid with respect to RulesEngineMatchCondition
   */
  public static RulesEngineMatchCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RulesEngineMatchCondition.class);
  }

  /**
   * Convert an instance of RulesEngineMatchCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

