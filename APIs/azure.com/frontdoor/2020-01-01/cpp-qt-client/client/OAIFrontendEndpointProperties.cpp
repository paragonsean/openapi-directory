/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrontendEndpointProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrontendEndpointProperties::OAIFrontendEndpointProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrontendEndpointProperties::OAIFrontendEndpointProperties() {
    this->initializeModel();
}

OAIFrontendEndpointProperties::~OAIFrontendEndpointProperties() {}

void OAIFrontendEndpointProperties::initializeModel() {

    m_custom_https_configuration_isSet = false;
    m_custom_https_configuration_isValid = false;

    m_custom_https_provisioning_state_isSet = false;
    m_custom_https_provisioning_state_isValid = false;

    m_custom_https_provisioning_substate_isSet = false;
    m_custom_https_provisioning_substate_isValid = false;

    m_resource_state_isSet = false;
    m_resource_state_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_session_affinity_enabled_state_isSet = false;
    m_session_affinity_enabled_state_isValid = false;

    m_session_affinity_ttl_seconds_isSet = false;
    m_session_affinity_ttl_seconds_isValid = false;

    m_web_application_firewall_policy_link_isSet = false;
    m_web_application_firewall_policy_link_isValid = false;
}

void OAIFrontendEndpointProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrontendEndpointProperties::fromJsonObject(QJsonObject json) {

    m_custom_https_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_https_configuration, json[QString("customHttpsConfiguration")]);
    m_custom_https_configuration_isSet = !json[QString("customHttpsConfiguration")].isNull() && m_custom_https_configuration_isValid;

    m_custom_https_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_custom_https_provisioning_state, json[QString("customHttpsProvisioningState")]);
    m_custom_https_provisioning_state_isSet = !json[QString("customHttpsProvisioningState")].isNull() && m_custom_https_provisioning_state_isValid;

    m_custom_https_provisioning_substate_isValid = ::OpenAPI::fromJsonValue(m_custom_https_provisioning_substate, json[QString("customHttpsProvisioningSubstate")]);
    m_custom_https_provisioning_substate_isSet = !json[QString("customHttpsProvisioningSubstate")].isNull() && m_custom_https_provisioning_substate_isValid;

    m_resource_state_isValid = ::OpenAPI::fromJsonValue(m_resource_state, json[QString("resourceState")]);
    m_resource_state_isSet = !json[QString("resourceState")].isNull() && m_resource_state_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_session_affinity_enabled_state_isValid = ::OpenAPI::fromJsonValue(m_session_affinity_enabled_state, json[QString("sessionAffinityEnabledState")]);
    m_session_affinity_enabled_state_isSet = !json[QString("sessionAffinityEnabledState")].isNull() && m_session_affinity_enabled_state_isValid;

    m_session_affinity_ttl_seconds_isValid = ::OpenAPI::fromJsonValue(m_session_affinity_ttl_seconds, json[QString("sessionAffinityTtlSeconds")]);
    m_session_affinity_ttl_seconds_isSet = !json[QString("sessionAffinityTtlSeconds")].isNull() && m_session_affinity_ttl_seconds_isValid;

    m_web_application_firewall_policy_link_isValid = ::OpenAPI::fromJsonValue(m_web_application_firewall_policy_link, json[QString("webApplicationFirewallPolicyLink")]);
    m_web_application_firewall_policy_link_isSet = !json[QString("webApplicationFirewallPolicyLink")].isNull() && m_web_application_firewall_policy_link_isValid;
}

QString OAIFrontendEndpointProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrontendEndpointProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_https_configuration.isSet()) {
        obj.insert(QString("customHttpsConfiguration"), ::OpenAPI::toJsonValue(m_custom_https_configuration));
    }
    if (m_custom_https_provisioning_state_isSet) {
        obj.insert(QString("customHttpsProvisioningState"), ::OpenAPI::toJsonValue(m_custom_https_provisioning_state));
    }
    if (m_custom_https_provisioning_substate_isSet) {
        obj.insert(QString("customHttpsProvisioningSubstate"), ::OpenAPI::toJsonValue(m_custom_https_provisioning_substate));
    }
    if (m_resource_state.isSet()) {
        obj.insert(QString("resourceState"), ::OpenAPI::toJsonValue(m_resource_state));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_session_affinity_enabled_state_isSet) {
        obj.insert(QString("sessionAffinityEnabledState"), ::OpenAPI::toJsonValue(m_session_affinity_enabled_state));
    }
    if (m_session_affinity_ttl_seconds_isSet) {
        obj.insert(QString("sessionAffinityTtlSeconds"), ::OpenAPI::toJsonValue(m_session_affinity_ttl_seconds));
    }
    if (m_web_application_firewall_policy_link.isSet()) {
        obj.insert(QString("webApplicationFirewallPolicyLink"), ::OpenAPI::toJsonValue(m_web_application_firewall_policy_link));
    }
    return obj;
}

OAICustomHttpsConfiguration OAIFrontendEndpointProperties::getCustomHttpsConfiguration() const {
    return m_custom_https_configuration;
}
void OAIFrontendEndpointProperties::setCustomHttpsConfiguration(const OAICustomHttpsConfiguration &custom_https_configuration) {
    m_custom_https_configuration = custom_https_configuration;
    m_custom_https_configuration_isSet = true;
}

bool OAIFrontendEndpointProperties::is_custom_https_configuration_Set() const{
    return m_custom_https_configuration_isSet;
}

bool OAIFrontendEndpointProperties::is_custom_https_configuration_Valid() const{
    return m_custom_https_configuration_isValid;
}

QString OAIFrontendEndpointProperties::getCustomHttpsProvisioningState() const {
    return m_custom_https_provisioning_state;
}
void OAIFrontendEndpointProperties::setCustomHttpsProvisioningState(const QString &custom_https_provisioning_state) {
    m_custom_https_provisioning_state = custom_https_provisioning_state;
    m_custom_https_provisioning_state_isSet = true;
}

bool OAIFrontendEndpointProperties::is_custom_https_provisioning_state_Set() const{
    return m_custom_https_provisioning_state_isSet;
}

bool OAIFrontendEndpointProperties::is_custom_https_provisioning_state_Valid() const{
    return m_custom_https_provisioning_state_isValid;
}

QString OAIFrontendEndpointProperties::getCustomHttpsProvisioningSubstate() const {
    return m_custom_https_provisioning_substate;
}
void OAIFrontendEndpointProperties::setCustomHttpsProvisioningSubstate(const QString &custom_https_provisioning_substate) {
    m_custom_https_provisioning_substate = custom_https_provisioning_substate;
    m_custom_https_provisioning_substate_isSet = true;
}

bool OAIFrontendEndpointProperties::is_custom_https_provisioning_substate_Set() const{
    return m_custom_https_provisioning_substate_isSet;
}

bool OAIFrontendEndpointProperties::is_custom_https_provisioning_substate_Valid() const{
    return m_custom_https_provisioning_substate_isValid;
}

OAIResourceState OAIFrontendEndpointProperties::getResourceState() const {
    return m_resource_state;
}
void OAIFrontendEndpointProperties::setResourceState(const OAIResourceState &resource_state) {
    m_resource_state = resource_state;
    m_resource_state_isSet = true;
}

bool OAIFrontendEndpointProperties::is_resource_state_Set() const{
    return m_resource_state_isSet;
}

bool OAIFrontendEndpointProperties::is_resource_state_Valid() const{
    return m_resource_state_isValid;
}

QString OAIFrontendEndpointProperties::getHostName() const {
    return m_host_name;
}
void OAIFrontendEndpointProperties::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIFrontendEndpointProperties::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIFrontendEndpointProperties::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAIFrontendEndpointProperties::getSessionAffinityEnabledState() const {
    return m_session_affinity_enabled_state;
}
void OAIFrontendEndpointProperties::setSessionAffinityEnabledState(const QString &session_affinity_enabled_state) {
    m_session_affinity_enabled_state = session_affinity_enabled_state;
    m_session_affinity_enabled_state_isSet = true;
}

bool OAIFrontendEndpointProperties::is_session_affinity_enabled_state_Set() const{
    return m_session_affinity_enabled_state_isSet;
}

bool OAIFrontendEndpointProperties::is_session_affinity_enabled_state_Valid() const{
    return m_session_affinity_enabled_state_isValid;
}

qint32 OAIFrontendEndpointProperties::getSessionAffinityTtlSeconds() const {
    return m_session_affinity_ttl_seconds;
}
void OAIFrontendEndpointProperties::setSessionAffinityTtlSeconds(const qint32 &session_affinity_ttl_seconds) {
    m_session_affinity_ttl_seconds = session_affinity_ttl_seconds;
    m_session_affinity_ttl_seconds_isSet = true;
}

bool OAIFrontendEndpointProperties::is_session_affinity_ttl_seconds_Set() const{
    return m_session_affinity_ttl_seconds_isSet;
}

bool OAIFrontendEndpointProperties::is_session_affinity_ttl_seconds_Valid() const{
    return m_session_affinity_ttl_seconds_isValid;
}

OAIFrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink OAIFrontendEndpointProperties::getWebApplicationFirewallPolicyLink() const {
    return m_web_application_firewall_policy_link;
}
void OAIFrontendEndpointProperties::setWebApplicationFirewallPolicyLink(const OAIFrontendEndpointUpdateParameters_webApplicationFirewallPolicyLink &web_application_firewall_policy_link) {
    m_web_application_firewall_policy_link = web_application_firewall_policy_link;
    m_web_application_firewall_policy_link_isSet = true;
}

bool OAIFrontendEndpointProperties::is_web_application_firewall_policy_link_Set() const{
    return m_web_application_firewall_policy_link_isSet;
}

bool OAIFrontendEndpointProperties::is_web_application_firewall_policy_link_Valid() const{
    return m_web_application_firewall_policy_link_isValid;
}

bool OAIFrontendEndpointProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_https_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_https_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_https_provisioning_substate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_affinity_enabled_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_affinity_ttl_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_application_firewall_policy_link.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrontendEndpointProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
