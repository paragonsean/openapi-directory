/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIForwardingConfiguration.h
 *
 * Describes Forwarding Route.
 */

#ifndef OAIForwardingConfiguration_H
#define OAIForwardingConfiguration_H

#include <QJsonObject>

#include "OAICacheConfiguration.h"
#include "OAIObject.h"
#include "OAIRouteConfiguration.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICacheConfiguration;

class OAIForwardingConfiguration : public OAIObject {
public:
    OAIForwardingConfiguration();
    OAIForwardingConfiguration(QString json);
    ~OAIForwardingConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIObject getBackendPool() const;
    void setBackendPool(const OAIObject &backend_pool);
    bool is_backend_pool_Set() const;
    bool is_backend_pool_Valid() const;

    OAICacheConfiguration getCacheConfiguration() const;
    void setCacheConfiguration(const OAICacheConfiguration &cache_configuration);
    bool is_cache_configuration_Set() const;
    bool is_cache_configuration_Valid() const;

    QString getCustomForwardingPath() const;
    void setCustomForwardingPath(const QString &custom_forwarding_path);
    bool is_custom_forwarding_path_Set() const;
    bool is_custom_forwarding_path_Valid() const;

    QString getForwardingProtocol() const;
    void setForwardingProtocol(const QString &forwarding_protocol);
    bool is_forwarding_protocol_Set() const;
    bool is_forwarding_protocol_Valid() const;

    QString getOdataType() const;
    void setOdataType(const QString &odata_type);
    bool is_odata_type_Set() const;
    bool is_odata_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIObject m_backend_pool;
    bool m_backend_pool_isSet;
    bool m_backend_pool_isValid;

    OAICacheConfiguration m_cache_configuration;
    bool m_cache_configuration_isSet;
    bool m_cache_configuration_isValid;

    QString m_custom_forwarding_path;
    bool m_custom_forwarding_path_isSet;
    bool m_custom_forwarding_path_isValid;

    QString m_forwarding_protocol;
    bool m_forwarding_protocol_isSet;
    bool m_forwarding_protocol_isValid;

    QString m_odata_type;
    bool m_odata_type_isSet;
    bool m_odata_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIForwardingConfiguration)

#endif // OAIForwardingConfiguration_H
