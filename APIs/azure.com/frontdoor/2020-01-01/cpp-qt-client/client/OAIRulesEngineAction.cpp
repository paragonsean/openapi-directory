/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRulesEngineAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRulesEngineAction::OAIRulesEngineAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRulesEngineAction::OAIRulesEngineAction() {
    this->initializeModel();
}

OAIRulesEngineAction::~OAIRulesEngineAction() {}

void OAIRulesEngineAction::initializeModel() {

    m_request_header_actions_isSet = false;
    m_request_header_actions_isValid = false;

    m_response_header_actions_isSet = false;
    m_response_header_actions_isValid = false;

    m_route_configuration_override_isSet = false;
    m_route_configuration_override_isValid = false;
}

void OAIRulesEngineAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRulesEngineAction::fromJsonObject(QJsonObject json) {

    m_request_header_actions_isValid = ::OpenAPI::fromJsonValue(m_request_header_actions, json[QString("requestHeaderActions")]);
    m_request_header_actions_isSet = !json[QString("requestHeaderActions")].isNull() && m_request_header_actions_isValid;

    m_response_header_actions_isValid = ::OpenAPI::fromJsonValue(m_response_header_actions, json[QString("responseHeaderActions")]);
    m_response_header_actions_isSet = !json[QString("responseHeaderActions")].isNull() && m_response_header_actions_isValid;

    m_route_configuration_override_isValid = ::OpenAPI::fromJsonValue(m_route_configuration_override, json[QString("routeConfigurationOverride")]);
    m_route_configuration_override_isSet = !json[QString("routeConfigurationOverride")].isNull() && m_route_configuration_override_isValid;
}

QString OAIRulesEngineAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRulesEngineAction::asJsonObject() const {
    QJsonObject obj;
    if (m_request_header_actions.size() > 0) {
        obj.insert(QString("requestHeaderActions"), ::OpenAPI::toJsonValue(m_request_header_actions));
    }
    if (m_response_header_actions.size() > 0) {
        obj.insert(QString("responseHeaderActions"), ::OpenAPI::toJsonValue(m_response_header_actions));
    }
    if (m_route_configuration_override.isSet()) {
        obj.insert(QString("routeConfigurationOverride"), ::OpenAPI::toJsonValue(m_route_configuration_override));
    }
    return obj;
}

QList<OAIHeaderAction> OAIRulesEngineAction::getRequestHeaderActions() const {
    return m_request_header_actions;
}
void OAIRulesEngineAction::setRequestHeaderActions(const QList<OAIHeaderAction> &request_header_actions) {
    m_request_header_actions = request_header_actions;
    m_request_header_actions_isSet = true;
}

bool OAIRulesEngineAction::is_request_header_actions_Set() const{
    return m_request_header_actions_isSet;
}

bool OAIRulesEngineAction::is_request_header_actions_Valid() const{
    return m_request_header_actions_isValid;
}

QList<OAIHeaderAction> OAIRulesEngineAction::getResponseHeaderActions() const {
    return m_response_header_actions;
}
void OAIRulesEngineAction::setResponseHeaderActions(const QList<OAIHeaderAction> &response_header_actions) {
    m_response_header_actions = response_header_actions;
    m_response_header_actions_isSet = true;
}

bool OAIRulesEngineAction::is_response_header_actions_Set() const{
    return m_response_header_actions_isSet;
}

bool OAIRulesEngineAction::is_response_header_actions_Valid() const{
    return m_response_header_actions_isValid;
}

OAIRouteConfiguration OAIRulesEngineAction::getRouteConfigurationOverride() const {
    return m_route_configuration_override;
}
void OAIRulesEngineAction::setRouteConfigurationOverride(const OAIRouteConfiguration &route_configuration_override) {
    m_route_configuration_override = route_configuration_override;
    m_route_configuration_override_isSet = true;
}

bool OAIRulesEngineAction::is_route_configuration_override_Set() const{
    return m_route_configuration_override_isSet;
}

bool OAIRulesEngineAction::is_route_configuration_override_Valid() const{
    return m_route_configuration_override_isValid;
}

bool OAIRulesEngineAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_header_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_header_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_configuration_override.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRulesEngineAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
