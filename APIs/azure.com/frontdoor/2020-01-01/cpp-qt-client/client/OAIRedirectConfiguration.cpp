/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedirectConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedirectConfiguration::OAIRedirectConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedirectConfiguration::OAIRedirectConfiguration() {
    this->initializeModel();
}

OAIRedirectConfiguration::~OAIRedirectConfiguration() {}

void OAIRedirectConfiguration::initializeModel() {

    m_custom_fragment_isSet = false;
    m_custom_fragment_isValid = false;

    m_custom_host_isSet = false;
    m_custom_host_isValid = false;

    m_custom_path_isSet = false;
    m_custom_path_isValid = false;

    m_custom_query_string_isSet = false;
    m_custom_query_string_isValid = false;

    m_redirect_protocol_isSet = false;
    m_redirect_protocol_isValid = false;

    m_redirect_type_isSet = false;
    m_redirect_type_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;
}

void OAIRedirectConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedirectConfiguration::fromJsonObject(QJsonObject json) {

    m_custom_fragment_isValid = ::OpenAPI::fromJsonValue(m_custom_fragment, json[QString("customFragment")]);
    m_custom_fragment_isSet = !json[QString("customFragment")].isNull() && m_custom_fragment_isValid;

    m_custom_host_isValid = ::OpenAPI::fromJsonValue(m_custom_host, json[QString("customHost")]);
    m_custom_host_isSet = !json[QString("customHost")].isNull() && m_custom_host_isValid;

    m_custom_path_isValid = ::OpenAPI::fromJsonValue(m_custom_path, json[QString("customPath")]);
    m_custom_path_isSet = !json[QString("customPath")].isNull() && m_custom_path_isValid;

    m_custom_query_string_isValid = ::OpenAPI::fromJsonValue(m_custom_query_string, json[QString("customQueryString")]);
    m_custom_query_string_isSet = !json[QString("customQueryString")].isNull() && m_custom_query_string_isValid;

    m_redirect_protocol_isValid = ::OpenAPI::fromJsonValue(m_redirect_protocol, json[QString("redirectProtocol")]);
    m_redirect_protocol_isSet = !json[QString("redirectProtocol")].isNull() && m_redirect_protocol_isValid;

    m_redirect_type_isValid = ::OpenAPI::fromJsonValue(m_redirect_type, json[QString("redirectType")]);
    m_redirect_type_isSet = !json[QString("redirectType")].isNull() && m_redirect_type_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("@odata.type")]);
    m_odata_type_isSet = !json[QString("@odata.type")].isNull() && m_odata_type_isValid;
}

QString OAIRedirectConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedirectConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_fragment_isSet) {
        obj.insert(QString("customFragment"), ::OpenAPI::toJsonValue(m_custom_fragment));
    }
    if (m_custom_host_isSet) {
        obj.insert(QString("customHost"), ::OpenAPI::toJsonValue(m_custom_host));
    }
    if (m_custom_path_isSet) {
        obj.insert(QString("customPath"), ::OpenAPI::toJsonValue(m_custom_path));
    }
    if (m_custom_query_string_isSet) {
        obj.insert(QString("customQueryString"), ::OpenAPI::toJsonValue(m_custom_query_string));
    }
    if (m_redirect_protocol_isSet) {
        obj.insert(QString("redirectProtocol"), ::OpenAPI::toJsonValue(m_redirect_protocol));
    }
    if (m_redirect_type_isSet) {
        obj.insert(QString("redirectType"), ::OpenAPI::toJsonValue(m_redirect_type));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("@odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    return obj;
}

QString OAIRedirectConfiguration::getCustomFragment() const {
    return m_custom_fragment;
}
void OAIRedirectConfiguration::setCustomFragment(const QString &custom_fragment) {
    m_custom_fragment = custom_fragment;
    m_custom_fragment_isSet = true;
}

bool OAIRedirectConfiguration::is_custom_fragment_Set() const{
    return m_custom_fragment_isSet;
}

bool OAIRedirectConfiguration::is_custom_fragment_Valid() const{
    return m_custom_fragment_isValid;
}

QString OAIRedirectConfiguration::getCustomHost() const {
    return m_custom_host;
}
void OAIRedirectConfiguration::setCustomHost(const QString &custom_host) {
    m_custom_host = custom_host;
    m_custom_host_isSet = true;
}

bool OAIRedirectConfiguration::is_custom_host_Set() const{
    return m_custom_host_isSet;
}

bool OAIRedirectConfiguration::is_custom_host_Valid() const{
    return m_custom_host_isValid;
}

QString OAIRedirectConfiguration::getCustomPath() const {
    return m_custom_path;
}
void OAIRedirectConfiguration::setCustomPath(const QString &custom_path) {
    m_custom_path = custom_path;
    m_custom_path_isSet = true;
}

bool OAIRedirectConfiguration::is_custom_path_Set() const{
    return m_custom_path_isSet;
}

bool OAIRedirectConfiguration::is_custom_path_Valid() const{
    return m_custom_path_isValid;
}

QString OAIRedirectConfiguration::getCustomQueryString() const {
    return m_custom_query_string;
}
void OAIRedirectConfiguration::setCustomQueryString(const QString &custom_query_string) {
    m_custom_query_string = custom_query_string;
    m_custom_query_string_isSet = true;
}

bool OAIRedirectConfiguration::is_custom_query_string_Set() const{
    return m_custom_query_string_isSet;
}

bool OAIRedirectConfiguration::is_custom_query_string_Valid() const{
    return m_custom_query_string_isValid;
}

QString OAIRedirectConfiguration::getRedirectProtocol() const {
    return m_redirect_protocol;
}
void OAIRedirectConfiguration::setRedirectProtocol(const QString &redirect_protocol) {
    m_redirect_protocol = redirect_protocol;
    m_redirect_protocol_isSet = true;
}

bool OAIRedirectConfiguration::is_redirect_protocol_Set() const{
    return m_redirect_protocol_isSet;
}

bool OAIRedirectConfiguration::is_redirect_protocol_Valid() const{
    return m_redirect_protocol_isValid;
}

QString OAIRedirectConfiguration::getRedirectType() const {
    return m_redirect_type;
}
void OAIRedirectConfiguration::setRedirectType(const QString &redirect_type) {
    m_redirect_type = redirect_type;
    m_redirect_type_isSet = true;
}

bool OAIRedirectConfiguration::is_redirect_type_Set() const{
    return m_redirect_type_isSet;
}

bool OAIRedirectConfiguration::is_redirect_type_Valid() const{
    return m_redirect_type_isValid;
}

QString OAIRedirectConfiguration::getOdataType() const {
    return m_odata_type;
}
void OAIRedirectConfiguration::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIRedirectConfiguration::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIRedirectConfiguration::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

bool OAIRedirectConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_fragment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedirectConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
