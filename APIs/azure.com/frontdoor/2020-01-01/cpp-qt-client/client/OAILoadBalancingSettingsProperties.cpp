/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadBalancingSettingsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadBalancingSettingsProperties::OAILoadBalancingSettingsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadBalancingSettingsProperties::OAILoadBalancingSettingsProperties() {
    this->initializeModel();
}

OAILoadBalancingSettingsProperties::~OAILoadBalancingSettingsProperties() {}

void OAILoadBalancingSettingsProperties::initializeModel() {

    m_resource_state_isSet = false;
    m_resource_state_isValid = false;

    m_additional_latency_milliseconds_isSet = false;
    m_additional_latency_milliseconds_isValid = false;

    m_sample_size_isSet = false;
    m_sample_size_isValid = false;

    m_successful_samples_required_isSet = false;
    m_successful_samples_required_isValid = false;
}

void OAILoadBalancingSettingsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadBalancingSettingsProperties::fromJsonObject(QJsonObject json) {

    m_resource_state_isValid = ::OpenAPI::fromJsonValue(m_resource_state, json[QString("resourceState")]);
    m_resource_state_isSet = !json[QString("resourceState")].isNull() && m_resource_state_isValid;

    m_additional_latency_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_additional_latency_milliseconds, json[QString("additionalLatencyMilliseconds")]);
    m_additional_latency_milliseconds_isSet = !json[QString("additionalLatencyMilliseconds")].isNull() && m_additional_latency_milliseconds_isValid;

    m_sample_size_isValid = ::OpenAPI::fromJsonValue(m_sample_size, json[QString("sampleSize")]);
    m_sample_size_isSet = !json[QString("sampleSize")].isNull() && m_sample_size_isValid;

    m_successful_samples_required_isValid = ::OpenAPI::fromJsonValue(m_successful_samples_required, json[QString("successfulSamplesRequired")]);
    m_successful_samples_required_isSet = !json[QString("successfulSamplesRequired")].isNull() && m_successful_samples_required_isValid;
}

QString OAILoadBalancingSettingsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadBalancingSettingsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_state.isSet()) {
        obj.insert(QString("resourceState"), ::OpenAPI::toJsonValue(m_resource_state));
    }
    if (m_additional_latency_milliseconds_isSet) {
        obj.insert(QString("additionalLatencyMilliseconds"), ::OpenAPI::toJsonValue(m_additional_latency_milliseconds));
    }
    if (m_sample_size_isSet) {
        obj.insert(QString("sampleSize"), ::OpenAPI::toJsonValue(m_sample_size));
    }
    if (m_successful_samples_required_isSet) {
        obj.insert(QString("successfulSamplesRequired"), ::OpenAPI::toJsonValue(m_successful_samples_required));
    }
    return obj;
}

OAIResourceState OAILoadBalancingSettingsProperties::getResourceState() const {
    return m_resource_state;
}
void OAILoadBalancingSettingsProperties::setResourceState(const OAIResourceState &resource_state) {
    m_resource_state = resource_state;
    m_resource_state_isSet = true;
}

bool OAILoadBalancingSettingsProperties::is_resource_state_Set() const{
    return m_resource_state_isSet;
}

bool OAILoadBalancingSettingsProperties::is_resource_state_Valid() const{
    return m_resource_state_isValid;
}

qint32 OAILoadBalancingSettingsProperties::getAdditionalLatencyMilliseconds() const {
    return m_additional_latency_milliseconds;
}
void OAILoadBalancingSettingsProperties::setAdditionalLatencyMilliseconds(const qint32 &additional_latency_milliseconds) {
    m_additional_latency_milliseconds = additional_latency_milliseconds;
    m_additional_latency_milliseconds_isSet = true;
}

bool OAILoadBalancingSettingsProperties::is_additional_latency_milliseconds_Set() const{
    return m_additional_latency_milliseconds_isSet;
}

bool OAILoadBalancingSettingsProperties::is_additional_latency_milliseconds_Valid() const{
    return m_additional_latency_milliseconds_isValid;
}

qint32 OAILoadBalancingSettingsProperties::getSampleSize() const {
    return m_sample_size;
}
void OAILoadBalancingSettingsProperties::setSampleSize(const qint32 &sample_size) {
    m_sample_size = sample_size;
    m_sample_size_isSet = true;
}

bool OAILoadBalancingSettingsProperties::is_sample_size_Set() const{
    return m_sample_size_isSet;
}

bool OAILoadBalancingSettingsProperties::is_sample_size_Valid() const{
    return m_sample_size_isValid;
}

qint32 OAILoadBalancingSettingsProperties::getSuccessfulSamplesRequired() const {
    return m_successful_samples_required;
}
void OAILoadBalancingSettingsProperties::setSuccessfulSamplesRequired(const qint32 &successful_samples_required) {
    m_successful_samples_required = successful_samples_required;
    m_successful_samples_required_isSet = true;
}

bool OAILoadBalancingSettingsProperties::is_successful_samples_required_Set() const{
    return m_successful_samples_required_isSet;
}

bool OAILoadBalancingSettingsProperties::is_successful_samples_required_Valid() const{
    return m_successful_samples_required_isValid;
}

bool OAILoadBalancingSettingsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_latency_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_samples_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadBalancingSettingsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
