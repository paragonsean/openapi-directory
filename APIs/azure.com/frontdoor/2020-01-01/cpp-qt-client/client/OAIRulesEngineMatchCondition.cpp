/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRulesEngineMatchCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRulesEngineMatchCondition::OAIRulesEngineMatchCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRulesEngineMatchCondition::OAIRulesEngineMatchCondition() {
    this->initializeModel();
}

OAIRulesEngineMatchCondition::~OAIRulesEngineMatchCondition() {}

void OAIRulesEngineMatchCondition::initializeModel() {

    m_negate_condition_isSet = false;
    m_negate_condition_isValid = false;

    m_rules_engine_match_value_isSet = false;
    m_rules_engine_match_value_isValid = false;

    m_rules_engine_match_variable_isSet = false;
    m_rules_engine_match_variable_isValid = false;

    m_rules_engine_operator_isSet = false;
    m_rules_engine_operator_isValid = false;

    m_selector_isSet = false;
    m_selector_isValid = false;

    m_transforms_isSet = false;
    m_transforms_isValid = false;
}

void OAIRulesEngineMatchCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRulesEngineMatchCondition::fromJsonObject(QJsonObject json) {

    m_negate_condition_isValid = ::OpenAPI::fromJsonValue(m_negate_condition, json[QString("negateCondition")]);
    m_negate_condition_isSet = !json[QString("negateCondition")].isNull() && m_negate_condition_isValid;

    m_rules_engine_match_value_isValid = ::OpenAPI::fromJsonValue(m_rules_engine_match_value, json[QString("rulesEngineMatchValue")]);
    m_rules_engine_match_value_isSet = !json[QString("rulesEngineMatchValue")].isNull() && m_rules_engine_match_value_isValid;

    m_rules_engine_match_variable_isValid = ::OpenAPI::fromJsonValue(m_rules_engine_match_variable, json[QString("rulesEngineMatchVariable")]);
    m_rules_engine_match_variable_isSet = !json[QString("rulesEngineMatchVariable")].isNull() && m_rules_engine_match_variable_isValid;

    m_rules_engine_operator_isValid = ::OpenAPI::fromJsonValue(m_rules_engine_operator, json[QString("rulesEngineOperator")]);
    m_rules_engine_operator_isSet = !json[QString("rulesEngineOperator")].isNull() && m_rules_engine_operator_isValid;

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("selector")]);
    m_selector_isSet = !json[QString("selector")].isNull() && m_selector_isValid;

    m_transforms_isValid = ::OpenAPI::fromJsonValue(m_transforms, json[QString("transforms")]);
    m_transforms_isSet = !json[QString("transforms")].isNull() && m_transforms_isValid;
}

QString OAIRulesEngineMatchCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRulesEngineMatchCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_negate_condition_isSet) {
        obj.insert(QString("negateCondition"), ::OpenAPI::toJsonValue(m_negate_condition));
    }
    if (m_rules_engine_match_value.size() > 0) {
        obj.insert(QString("rulesEngineMatchValue"), ::OpenAPI::toJsonValue(m_rules_engine_match_value));
    }
    if (m_rules_engine_match_variable_isSet) {
        obj.insert(QString("rulesEngineMatchVariable"), ::OpenAPI::toJsonValue(m_rules_engine_match_variable));
    }
    if (m_rules_engine_operator_isSet) {
        obj.insert(QString("rulesEngineOperator"), ::OpenAPI::toJsonValue(m_rules_engine_operator));
    }
    if (m_selector_isSet) {
        obj.insert(QString("selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    if (m_transforms.size() > 0) {
        obj.insert(QString("transforms"), ::OpenAPI::toJsonValue(m_transforms));
    }
    return obj;
}

bool OAIRulesEngineMatchCondition::isNegateCondition() const {
    return m_negate_condition;
}
void OAIRulesEngineMatchCondition::setNegateCondition(const bool &negate_condition) {
    m_negate_condition = negate_condition;
    m_negate_condition_isSet = true;
}

bool OAIRulesEngineMatchCondition::is_negate_condition_Set() const{
    return m_negate_condition_isSet;
}

bool OAIRulesEngineMatchCondition::is_negate_condition_Valid() const{
    return m_negate_condition_isValid;
}

QList<QString> OAIRulesEngineMatchCondition::getRulesEngineMatchValue() const {
    return m_rules_engine_match_value;
}
void OAIRulesEngineMatchCondition::setRulesEngineMatchValue(const QList<QString> &rules_engine_match_value) {
    m_rules_engine_match_value = rules_engine_match_value;
    m_rules_engine_match_value_isSet = true;
}

bool OAIRulesEngineMatchCondition::is_rules_engine_match_value_Set() const{
    return m_rules_engine_match_value_isSet;
}

bool OAIRulesEngineMatchCondition::is_rules_engine_match_value_Valid() const{
    return m_rules_engine_match_value_isValid;
}

QString OAIRulesEngineMatchCondition::getRulesEngineMatchVariable() const {
    return m_rules_engine_match_variable;
}
void OAIRulesEngineMatchCondition::setRulesEngineMatchVariable(const QString &rules_engine_match_variable) {
    m_rules_engine_match_variable = rules_engine_match_variable;
    m_rules_engine_match_variable_isSet = true;
}

bool OAIRulesEngineMatchCondition::is_rules_engine_match_variable_Set() const{
    return m_rules_engine_match_variable_isSet;
}

bool OAIRulesEngineMatchCondition::is_rules_engine_match_variable_Valid() const{
    return m_rules_engine_match_variable_isValid;
}

QString OAIRulesEngineMatchCondition::getRulesEngineOperator() const {
    return m_rules_engine_operator;
}
void OAIRulesEngineMatchCondition::setRulesEngineOperator(const QString &rules_engine_operator) {
    m_rules_engine_operator = rules_engine_operator;
    m_rules_engine_operator_isSet = true;
}

bool OAIRulesEngineMatchCondition::is_rules_engine_operator_Set() const{
    return m_rules_engine_operator_isSet;
}

bool OAIRulesEngineMatchCondition::is_rules_engine_operator_Valid() const{
    return m_rules_engine_operator_isValid;
}

QString OAIRulesEngineMatchCondition::getSelector() const {
    return m_selector;
}
void OAIRulesEngineMatchCondition::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIRulesEngineMatchCondition::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIRulesEngineMatchCondition::is_selector_Valid() const{
    return m_selector_isValid;
}

QList<OAITransform> OAIRulesEngineMatchCondition::getTransforms() const {
    return m_transforms;
}
void OAIRulesEngineMatchCondition::setTransforms(const QList<OAITransform> &transforms) {
    m_transforms = transforms;
    m_transforms_isSet = true;
}

bool OAIRulesEngineMatchCondition::is_transforms_Set() const{
    return m_transforms_isSet;
}

bool OAIRulesEngineMatchCondition::is_transforms_Valid() const{
    return m_transforms_isValid;
}

bool OAIRulesEngineMatchCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_negate_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_engine_match_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_engine_match_variable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_engine_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRulesEngineMatchCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_rules_engine_match_value_isValid && m_rules_engine_match_variable_isValid && m_rules_engine_operator_isValid && true;
}

} // namespace OpenAPI
