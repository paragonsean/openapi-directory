/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyVaultCertificateSourceParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyVaultCertificateSourceParameters::OAIKeyVaultCertificateSourceParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyVaultCertificateSourceParameters::OAIKeyVaultCertificateSourceParameters() {
    this->initializeModel();
}

OAIKeyVaultCertificateSourceParameters::~OAIKeyVaultCertificateSourceParameters() {}

void OAIKeyVaultCertificateSourceParameters::initializeModel() {

    m_secret_name_isSet = false;
    m_secret_name_isValid = false;

    m_secret_version_isSet = false;
    m_secret_version_isValid = false;

    m_vault_isSet = false;
    m_vault_isValid = false;
}

void OAIKeyVaultCertificateSourceParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyVaultCertificateSourceParameters::fromJsonObject(QJsonObject json) {

    m_secret_name_isValid = ::OpenAPI::fromJsonValue(m_secret_name, json[QString("secretName")]);
    m_secret_name_isSet = !json[QString("secretName")].isNull() && m_secret_name_isValid;

    m_secret_version_isValid = ::OpenAPI::fromJsonValue(m_secret_version, json[QString("secretVersion")]);
    m_secret_version_isSet = !json[QString("secretVersion")].isNull() && m_secret_version_isValid;

    m_vault_isValid = ::OpenAPI::fromJsonValue(m_vault, json[QString("vault")]);
    m_vault_isSet = !json[QString("vault")].isNull() && m_vault_isValid;
}

QString OAIKeyVaultCertificateSourceParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyVaultCertificateSourceParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_secret_name_isSet) {
        obj.insert(QString("secretName"), ::OpenAPI::toJsonValue(m_secret_name));
    }
    if (m_secret_version_isSet) {
        obj.insert(QString("secretVersion"), ::OpenAPI::toJsonValue(m_secret_version));
    }
    if (m_vault.isSet()) {
        obj.insert(QString("vault"), ::OpenAPI::toJsonValue(m_vault));
    }
    return obj;
}

QString OAIKeyVaultCertificateSourceParameters::getSecretName() const {
    return m_secret_name;
}
void OAIKeyVaultCertificateSourceParameters::setSecretName(const QString &secret_name) {
    m_secret_name = secret_name;
    m_secret_name_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_secret_name_Set() const{
    return m_secret_name_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_secret_name_Valid() const{
    return m_secret_name_isValid;
}

QString OAIKeyVaultCertificateSourceParameters::getSecretVersion() const {
    return m_secret_version;
}
void OAIKeyVaultCertificateSourceParameters::setSecretVersion(const QString &secret_version) {
    m_secret_version = secret_version;
    m_secret_version_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_secret_version_Set() const{
    return m_secret_version_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_secret_version_Valid() const{
    return m_secret_version_isValid;
}

OAIKeyVaultCertificateSourceParameters_vault OAIKeyVaultCertificateSourceParameters::getVault() const {
    return m_vault;
}
void OAIKeyVaultCertificateSourceParameters::setVault(const OAIKeyVaultCertificateSourceParameters_vault &vault) {
    m_vault = vault;
    m_vault_isSet = true;
}

bool OAIKeyVaultCertificateSourceParameters::is_vault_Set() const{
    return m_vault_isSet;
}

bool OAIKeyVaultCertificateSourceParameters::is_vault_Valid() const{
    return m_vault_isValid;
}

bool OAIKeyVaultCertificateSourceParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyVaultCertificateSourceParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
