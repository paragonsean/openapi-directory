/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRulesEngineRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRulesEngineRule::OAIRulesEngineRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRulesEngineRule::OAIRulesEngineRule() {
    this->initializeModel();
}

OAIRulesEngineRule::~OAIRulesEngineRule() {}

void OAIRulesEngineRule::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_match_conditions_isSet = false;
    m_match_conditions_isValid = false;

    m_match_processing_behavior_isSet = false;
    m_match_processing_behavior_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAIRulesEngineRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRulesEngineRule::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_match_conditions_isValid = ::OpenAPI::fromJsonValue(m_match_conditions, json[QString("matchConditions")]);
    m_match_conditions_isSet = !json[QString("matchConditions")].isNull() && m_match_conditions_isValid;

    m_match_processing_behavior_isValid = ::OpenAPI::fromJsonValue(m_match_processing_behavior, json[QString("matchProcessingBehavior")]);
    m_match_processing_behavior_isSet = !json[QString("matchProcessingBehavior")].isNull() && m_match_processing_behavior_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;
}

QString OAIRulesEngineRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRulesEngineRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_match_conditions.size() > 0) {
        obj.insert(QString("matchConditions"), ::OpenAPI::toJsonValue(m_match_conditions));
    }
    if (m_match_processing_behavior_isSet) {
        obj.insert(QString("matchProcessingBehavior"), ::OpenAPI::toJsonValue(m_match_processing_behavior));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

OAIRulesEngineAction OAIRulesEngineRule::getAction() const {
    return m_action;
}
void OAIRulesEngineRule::setAction(const OAIRulesEngineAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIRulesEngineRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAIRulesEngineRule::is_action_Valid() const{
    return m_action_isValid;
}

QList<OAIRulesEngineMatchCondition> OAIRulesEngineRule::getMatchConditions() const {
    return m_match_conditions;
}
void OAIRulesEngineRule::setMatchConditions(const QList<OAIRulesEngineMatchCondition> &match_conditions) {
    m_match_conditions = match_conditions;
    m_match_conditions_isSet = true;
}

bool OAIRulesEngineRule::is_match_conditions_Set() const{
    return m_match_conditions_isSet;
}

bool OAIRulesEngineRule::is_match_conditions_Valid() const{
    return m_match_conditions_isValid;
}

QString OAIRulesEngineRule::getMatchProcessingBehavior() const {
    return m_match_processing_behavior;
}
void OAIRulesEngineRule::setMatchProcessingBehavior(const QString &match_processing_behavior) {
    m_match_processing_behavior = match_processing_behavior;
    m_match_processing_behavior_isSet = true;
}

bool OAIRulesEngineRule::is_match_processing_behavior_Set() const{
    return m_match_processing_behavior_isSet;
}

bool OAIRulesEngineRule::is_match_processing_behavior_Valid() const{
    return m_match_processing_behavior_isValid;
}

QString OAIRulesEngineRule::getName() const {
    return m_name;
}
void OAIRulesEngineRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRulesEngineRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRulesEngineRule::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRulesEngineRule::getPriority() const {
    return m_priority;
}
void OAIRulesEngineRule::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIRulesEngineRule::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIRulesEngineRule::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAIRulesEngineRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_processing_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRulesEngineRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_name_isValid && m_priority_isValid && true;
}

} // namespace OpenAPI
