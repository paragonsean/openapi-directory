/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrontDoorUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrontDoorUpdateParameters::OAIFrontDoorUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrontDoorUpdateParameters::OAIFrontDoorUpdateParameters() {
    this->initializeModel();
}

OAIFrontDoorUpdateParameters::~OAIFrontDoorUpdateParameters() {}

void OAIFrontDoorUpdateParameters::initializeModel() {

    m_backend_pools_isSet = false;
    m_backend_pools_isValid = false;

    m_backend_pools_settings_isSet = false;
    m_backend_pools_settings_isValid = false;

    m_enabled_state_isSet = false;
    m_enabled_state_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_frontend_endpoints_isSet = false;
    m_frontend_endpoints_isValid = false;

    m_health_probe_settings_isSet = false;
    m_health_probe_settings_isValid = false;

    m_load_balancing_settings_isSet = false;
    m_load_balancing_settings_isValid = false;

    m_routing_rules_isSet = false;
    m_routing_rules_isValid = false;
}

void OAIFrontDoorUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrontDoorUpdateParameters::fromJsonObject(QJsonObject json) {

    m_backend_pools_isValid = ::OpenAPI::fromJsonValue(m_backend_pools, json[QString("backendPools")]);
    m_backend_pools_isSet = !json[QString("backendPools")].isNull() && m_backend_pools_isValid;

    m_backend_pools_settings_isValid = ::OpenAPI::fromJsonValue(m_backend_pools_settings, json[QString("backendPoolsSettings")]);
    m_backend_pools_settings_isSet = !json[QString("backendPoolsSettings")].isNull() && m_backend_pools_settings_isValid;

    m_enabled_state_isValid = ::OpenAPI::fromJsonValue(m_enabled_state, json[QString("enabledState")]);
    m_enabled_state_isSet = !json[QString("enabledState")].isNull() && m_enabled_state_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_frontend_endpoints_isValid = ::OpenAPI::fromJsonValue(m_frontend_endpoints, json[QString("frontendEndpoints")]);
    m_frontend_endpoints_isSet = !json[QString("frontendEndpoints")].isNull() && m_frontend_endpoints_isValid;

    m_health_probe_settings_isValid = ::OpenAPI::fromJsonValue(m_health_probe_settings, json[QString("healthProbeSettings")]);
    m_health_probe_settings_isSet = !json[QString("healthProbeSettings")].isNull() && m_health_probe_settings_isValid;

    m_load_balancing_settings_isValid = ::OpenAPI::fromJsonValue(m_load_balancing_settings, json[QString("loadBalancingSettings")]);
    m_load_balancing_settings_isSet = !json[QString("loadBalancingSettings")].isNull() && m_load_balancing_settings_isValid;

    m_routing_rules_isValid = ::OpenAPI::fromJsonValue(m_routing_rules, json[QString("routingRules")]);
    m_routing_rules_isSet = !json[QString("routingRules")].isNull() && m_routing_rules_isValid;
}

QString OAIFrontDoorUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrontDoorUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_pools.size() > 0) {
        obj.insert(QString("backendPools"), ::OpenAPI::toJsonValue(m_backend_pools));
    }
    if (m_backend_pools_settings.isSet()) {
        obj.insert(QString("backendPoolsSettings"), ::OpenAPI::toJsonValue(m_backend_pools_settings));
    }
    if (m_enabled_state_isSet) {
        obj.insert(QString("enabledState"), ::OpenAPI::toJsonValue(m_enabled_state));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_frontend_endpoints.size() > 0) {
        obj.insert(QString("frontendEndpoints"), ::OpenAPI::toJsonValue(m_frontend_endpoints));
    }
    if (m_health_probe_settings.size() > 0) {
        obj.insert(QString("healthProbeSettings"), ::OpenAPI::toJsonValue(m_health_probe_settings));
    }
    if (m_load_balancing_settings.size() > 0) {
        obj.insert(QString("loadBalancingSettings"), ::OpenAPI::toJsonValue(m_load_balancing_settings));
    }
    if (m_routing_rules.size() > 0) {
        obj.insert(QString("routingRules"), ::OpenAPI::toJsonValue(m_routing_rules));
    }
    return obj;
}

QList<OAIBackendPool> OAIFrontDoorUpdateParameters::getBackendPools() const {
    return m_backend_pools;
}
void OAIFrontDoorUpdateParameters::setBackendPools(const QList<OAIBackendPool> &backend_pools) {
    m_backend_pools = backend_pools;
    m_backend_pools_isSet = true;
}

bool OAIFrontDoorUpdateParameters::is_backend_pools_Set() const{
    return m_backend_pools_isSet;
}

bool OAIFrontDoorUpdateParameters::is_backend_pools_Valid() const{
    return m_backend_pools_isValid;
}

OAIBackendPoolsSettings OAIFrontDoorUpdateParameters::getBackendPoolsSettings() const {
    return m_backend_pools_settings;
}
void OAIFrontDoorUpdateParameters::setBackendPoolsSettings(const OAIBackendPoolsSettings &backend_pools_settings) {
    m_backend_pools_settings = backend_pools_settings;
    m_backend_pools_settings_isSet = true;
}

bool OAIFrontDoorUpdateParameters::is_backend_pools_settings_Set() const{
    return m_backend_pools_settings_isSet;
}

bool OAIFrontDoorUpdateParameters::is_backend_pools_settings_Valid() const{
    return m_backend_pools_settings_isValid;
}

QString OAIFrontDoorUpdateParameters::getEnabledState() const {
    return m_enabled_state;
}
void OAIFrontDoorUpdateParameters::setEnabledState(const QString &enabled_state) {
    m_enabled_state = enabled_state;
    m_enabled_state_isSet = true;
}

bool OAIFrontDoorUpdateParameters::is_enabled_state_Set() const{
    return m_enabled_state_isSet;
}

bool OAIFrontDoorUpdateParameters::is_enabled_state_Valid() const{
    return m_enabled_state_isValid;
}

QString OAIFrontDoorUpdateParameters::getFriendlyName() const {
    return m_friendly_name;
}
void OAIFrontDoorUpdateParameters::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIFrontDoorUpdateParameters::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIFrontDoorUpdateParameters::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QList<OAIFrontendEndpoint> OAIFrontDoorUpdateParameters::getFrontendEndpoints() const {
    return m_frontend_endpoints;
}
void OAIFrontDoorUpdateParameters::setFrontendEndpoints(const QList<OAIFrontendEndpoint> &frontend_endpoints) {
    m_frontend_endpoints = frontend_endpoints;
    m_frontend_endpoints_isSet = true;
}

bool OAIFrontDoorUpdateParameters::is_frontend_endpoints_Set() const{
    return m_frontend_endpoints_isSet;
}

bool OAIFrontDoorUpdateParameters::is_frontend_endpoints_Valid() const{
    return m_frontend_endpoints_isValid;
}

QList<OAIHealthProbeSettingsModel> OAIFrontDoorUpdateParameters::getHealthProbeSettings() const {
    return m_health_probe_settings;
}
void OAIFrontDoorUpdateParameters::setHealthProbeSettings(const QList<OAIHealthProbeSettingsModel> &health_probe_settings) {
    m_health_probe_settings = health_probe_settings;
    m_health_probe_settings_isSet = true;
}

bool OAIFrontDoorUpdateParameters::is_health_probe_settings_Set() const{
    return m_health_probe_settings_isSet;
}

bool OAIFrontDoorUpdateParameters::is_health_probe_settings_Valid() const{
    return m_health_probe_settings_isValid;
}

QList<OAILoadBalancingSettingsModel> OAIFrontDoorUpdateParameters::getLoadBalancingSettings() const {
    return m_load_balancing_settings;
}
void OAIFrontDoorUpdateParameters::setLoadBalancingSettings(const QList<OAILoadBalancingSettingsModel> &load_balancing_settings) {
    m_load_balancing_settings = load_balancing_settings;
    m_load_balancing_settings_isSet = true;
}

bool OAIFrontDoorUpdateParameters::is_load_balancing_settings_Set() const{
    return m_load_balancing_settings_isSet;
}

bool OAIFrontDoorUpdateParameters::is_load_balancing_settings_Valid() const{
    return m_load_balancing_settings_isValid;
}

QList<OAIRoutingRule> OAIFrontDoorUpdateParameters::getRoutingRules() const {
    return m_routing_rules;
}
void OAIFrontDoorUpdateParameters::setRoutingRules(const QList<OAIRoutingRule> &routing_rules) {
    m_routing_rules = routing_rules;
    m_routing_rules_isSet = true;
}

bool OAIFrontDoorUpdateParameters::is_routing_rules_Set() const{
    return m_routing_rules_isSet;
}

bool OAIFrontDoorUpdateParameters::is_routing_rules_Valid() const{
    return m_routing_rules_isValid;
}

bool OAIFrontDoorUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_pools_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_probe_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancing_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrontDoorUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
