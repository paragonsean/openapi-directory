# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.front_door_certificate_source_parameters import FrontDoorCertificateSourceParameters
from openapi_server.models.key_vault_certificate_source_parameters import KeyVaultCertificateSourceParameters
from openapi_server import util


class CustomHttpsConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_source: str=None, front_door_certificate_source_parameters: FrontDoorCertificateSourceParameters=None, key_vault_certificate_source_parameters: KeyVaultCertificateSourceParameters=None, minimum_tls_version: str=None, protocol_type: str=None):
        """CustomHttpsConfiguration - a model defined in OpenAPI

        :param certificate_source: The certificate_source of this CustomHttpsConfiguration.
        :param front_door_certificate_source_parameters: The front_door_certificate_source_parameters of this CustomHttpsConfiguration.
        :param key_vault_certificate_source_parameters: The key_vault_certificate_source_parameters of this CustomHttpsConfiguration.
        :param minimum_tls_version: The minimum_tls_version of this CustomHttpsConfiguration.
        :param protocol_type: The protocol_type of this CustomHttpsConfiguration.
        """
        self.openapi_types = {
            'certificate_source': str,
            'front_door_certificate_source_parameters': FrontDoorCertificateSourceParameters,
            'key_vault_certificate_source_parameters': KeyVaultCertificateSourceParameters,
            'minimum_tls_version': str,
            'protocol_type': str
        }

        self.attribute_map = {
            'certificate_source': 'certificateSource',
            'front_door_certificate_source_parameters': 'frontDoorCertificateSourceParameters',
            'key_vault_certificate_source_parameters': 'keyVaultCertificateSourceParameters',
            'minimum_tls_version': 'minimumTlsVersion',
            'protocol_type': 'protocolType'
        }

        self._certificate_source = certificate_source
        self._front_door_certificate_source_parameters = front_door_certificate_source_parameters
        self._key_vault_certificate_source_parameters = key_vault_certificate_source_parameters
        self._minimum_tls_version = minimum_tls_version
        self._protocol_type = protocol_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomHttpsConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomHttpsConfiguration of this CustomHttpsConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_source(self):
        """Gets the certificate_source of this CustomHttpsConfiguration.

        Defines the source of the SSL certificate

        :return: The certificate_source of this CustomHttpsConfiguration.
        :rtype: str
        """
        return self._certificate_source

    @certificate_source.setter
    def certificate_source(self, certificate_source):
        """Sets the certificate_source of this CustomHttpsConfiguration.

        Defines the source of the SSL certificate

        :param certificate_source: The certificate_source of this CustomHttpsConfiguration.
        :type certificate_source: str
        """
        allowed_values = ["AzureKeyVault", "FrontDoor"]  # noqa: E501
        if certificate_source not in allowed_values:
            raise ValueError(
                "Invalid value for `certificate_source` ({0}), must be one of {1}"
                .format(certificate_source, allowed_values)
            )

        self._certificate_source = certificate_source

    @property
    def front_door_certificate_source_parameters(self):
        """Gets the front_door_certificate_source_parameters of this CustomHttpsConfiguration.


        :return: The front_door_certificate_source_parameters of this CustomHttpsConfiguration.
        :rtype: FrontDoorCertificateSourceParameters
        """
        return self._front_door_certificate_source_parameters

    @front_door_certificate_source_parameters.setter
    def front_door_certificate_source_parameters(self, front_door_certificate_source_parameters):
        """Sets the front_door_certificate_source_parameters of this CustomHttpsConfiguration.


        :param front_door_certificate_source_parameters: The front_door_certificate_source_parameters of this CustomHttpsConfiguration.
        :type front_door_certificate_source_parameters: FrontDoorCertificateSourceParameters
        """

        self._front_door_certificate_source_parameters = front_door_certificate_source_parameters

    @property
    def key_vault_certificate_source_parameters(self):
        """Gets the key_vault_certificate_source_parameters of this CustomHttpsConfiguration.


        :return: The key_vault_certificate_source_parameters of this CustomHttpsConfiguration.
        :rtype: KeyVaultCertificateSourceParameters
        """
        return self._key_vault_certificate_source_parameters

    @key_vault_certificate_source_parameters.setter
    def key_vault_certificate_source_parameters(self, key_vault_certificate_source_parameters):
        """Sets the key_vault_certificate_source_parameters of this CustomHttpsConfiguration.


        :param key_vault_certificate_source_parameters: The key_vault_certificate_source_parameters of this CustomHttpsConfiguration.
        :type key_vault_certificate_source_parameters: KeyVaultCertificateSourceParameters
        """

        self._key_vault_certificate_source_parameters = key_vault_certificate_source_parameters

    @property
    def minimum_tls_version(self):
        """Gets the minimum_tls_version of this CustomHttpsConfiguration.

        The minimum TLS version required from the clients to establish an SSL handshake with Front Door.

        :return: The minimum_tls_version of this CustomHttpsConfiguration.
        :rtype: str
        """
        return self._minimum_tls_version

    @minimum_tls_version.setter
    def minimum_tls_version(self, minimum_tls_version):
        """Sets the minimum_tls_version of this CustomHttpsConfiguration.

        The minimum TLS version required from the clients to establish an SSL handshake with Front Door.

        :param minimum_tls_version: The minimum_tls_version of this CustomHttpsConfiguration.
        :type minimum_tls_version: str
        """
        allowed_values = ["1.0", "1.2"]  # noqa: E501
        if minimum_tls_version not in allowed_values:
            raise ValueError(
                "Invalid value for `minimum_tls_version` ({0}), must be one of {1}"
                .format(minimum_tls_version, allowed_values)
            )

        self._minimum_tls_version = minimum_tls_version

    @property
    def protocol_type(self):
        """Gets the protocol_type of this CustomHttpsConfiguration.

        Defines the TLS extension protocol that is used for secure delivery

        :return: The protocol_type of this CustomHttpsConfiguration.
        :rtype: str
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        """Sets the protocol_type of this CustomHttpsConfiguration.

        Defines the TLS extension protocol that is used for secure delivery

        :param protocol_type: The protocol_type of this CustomHttpsConfiguration.
        :type protocol_type: str
        """
        allowed_values = ["ServerNameIndication"]  # noqa: E501
        if protocol_type not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol_type` ({0}), must be one of {1}"
                .format(protocol_type, allowed_values)
            )

        self._protocol_type = protocol_type
