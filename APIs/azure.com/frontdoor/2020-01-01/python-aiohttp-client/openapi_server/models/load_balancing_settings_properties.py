# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_state import ResourceState
from openapi_server import util


class LoadBalancingSettingsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_state: ResourceState=None, additional_latency_milliseconds: int=None, sample_size: int=None, successful_samples_required: int=None):
        """LoadBalancingSettingsProperties - a model defined in OpenAPI

        :param resource_state: The resource_state of this LoadBalancingSettingsProperties.
        :param additional_latency_milliseconds: The additional_latency_milliseconds of this LoadBalancingSettingsProperties.
        :param sample_size: The sample_size of this LoadBalancingSettingsProperties.
        :param successful_samples_required: The successful_samples_required of this LoadBalancingSettingsProperties.
        """
        self.openapi_types = {
            'resource_state': ResourceState,
            'additional_latency_milliseconds': int,
            'sample_size': int,
            'successful_samples_required': int
        }

        self.attribute_map = {
            'resource_state': 'resourceState',
            'additional_latency_milliseconds': 'additionalLatencyMilliseconds',
            'sample_size': 'sampleSize',
            'successful_samples_required': 'successfulSamplesRequired'
        }

        self._resource_state = resource_state
        self._additional_latency_milliseconds = additional_latency_milliseconds
        self._sample_size = sample_size
        self._successful_samples_required = successful_samples_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancingSettingsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancingSettingsProperties of this LoadBalancingSettingsProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_state(self):
        """Gets the resource_state of this LoadBalancingSettingsProperties.


        :return: The resource_state of this LoadBalancingSettingsProperties.
        :rtype: ResourceState
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this LoadBalancingSettingsProperties.


        :param resource_state: The resource_state of this LoadBalancingSettingsProperties.
        :type resource_state: ResourceState
        """

        self._resource_state = resource_state

    @property
    def additional_latency_milliseconds(self):
        """Gets the additional_latency_milliseconds of this LoadBalancingSettingsProperties.

        The additional latency in milliseconds for probes to fall into the lowest latency bucket

        :return: The additional_latency_milliseconds of this LoadBalancingSettingsProperties.
        :rtype: int
        """
        return self._additional_latency_milliseconds

    @additional_latency_milliseconds.setter
    def additional_latency_milliseconds(self, additional_latency_milliseconds):
        """Sets the additional_latency_milliseconds of this LoadBalancingSettingsProperties.

        The additional latency in milliseconds for probes to fall into the lowest latency bucket

        :param additional_latency_milliseconds: The additional_latency_milliseconds of this LoadBalancingSettingsProperties.
        :type additional_latency_milliseconds: int
        """

        self._additional_latency_milliseconds = additional_latency_milliseconds

    @property
    def sample_size(self):
        """Gets the sample_size of this LoadBalancingSettingsProperties.

        The number of samples to consider for load balancing decisions

        :return: The sample_size of this LoadBalancingSettingsProperties.
        :rtype: int
        """
        return self._sample_size

    @sample_size.setter
    def sample_size(self, sample_size):
        """Sets the sample_size of this LoadBalancingSettingsProperties.

        The number of samples to consider for load balancing decisions

        :param sample_size: The sample_size of this LoadBalancingSettingsProperties.
        :type sample_size: int
        """

        self._sample_size = sample_size

    @property
    def successful_samples_required(self):
        """Gets the successful_samples_required of this LoadBalancingSettingsProperties.

        The number of samples within the sample period that must succeed

        :return: The successful_samples_required of this LoadBalancingSettingsProperties.
        :rtype: int
        """
        return self._successful_samples_required

    @successful_samples_required.setter
    def successful_samples_required(self, successful_samples_required):
        """Sets the successful_samples_required of this LoadBalancingSettingsProperties.

        The number of samples within the sample period that must succeed

        :param successful_samples_required: The successful_samples_required of this LoadBalancingSettingsProperties.
        :type successful_samples_required: int
        """

        self._successful_samples_required = successful_samples_required
