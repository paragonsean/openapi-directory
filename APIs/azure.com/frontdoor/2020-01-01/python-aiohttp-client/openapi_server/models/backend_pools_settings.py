# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackendPoolsSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enforce_certificate_name_check: str='Enabled', send_recv_timeout_seconds: int=None):
        """BackendPoolsSettings - a model defined in OpenAPI

        :param enforce_certificate_name_check: The enforce_certificate_name_check of this BackendPoolsSettings.
        :param send_recv_timeout_seconds: The send_recv_timeout_seconds of this BackendPoolsSettings.
        """
        self.openapi_types = {
            'enforce_certificate_name_check': str,
            'send_recv_timeout_seconds': int
        }

        self.attribute_map = {
            'enforce_certificate_name_check': 'enforceCertificateNameCheck',
            'send_recv_timeout_seconds': 'sendRecvTimeoutSeconds'
        }

        self._enforce_certificate_name_check = enforce_certificate_name_check
        self._send_recv_timeout_seconds = send_recv_timeout_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackendPoolsSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackendPoolsSettings of this BackendPoolsSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enforce_certificate_name_check(self):
        """Gets the enforce_certificate_name_check of this BackendPoolsSettings.

        Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.

        :return: The enforce_certificate_name_check of this BackendPoolsSettings.
        :rtype: str
        """
        return self._enforce_certificate_name_check

    @enforce_certificate_name_check.setter
    def enforce_certificate_name_check(self, enforce_certificate_name_check):
        """Sets the enforce_certificate_name_check of this BackendPoolsSettings.

        Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.

        :param enforce_certificate_name_check: The enforce_certificate_name_check of this BackendPoolsSettings.
        :type enforce_certificate_name_check: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if enforce_certificate_name_check not in allowed_values:
            raise ValueError(
                "Invalid value for `enforce_certificate_name_check` ({0}), must be one of {1}"
                .format(enforce_certificate_name_check, allowed_values)
            )

        self._enforce_certificate_name_check = enforce_certificate_name_check

    @property
    def send_recv_timeout_seconds(self):
        """Gets the send_recv_timeout_seconds of this BackendPoolsSettings.

        Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.

        :return: The send_recv_timeout_seconds of this BackendPoolsSettings.
        :rtype: int
        """
        return self._send_recv_timeout_seconds

    @send_recv_timeout_seconds.setter
    def send_recv_timeout_seconds(self, send_recv_timeout_seconds):
        """Sets the send_recv_timeout_seconds of this BackendPoolsSettings.

        Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.

        :param send_recv_timeout_seconds: The send_recv_timeout_seconds of this BackendPoolsSettings.
        :type send_recv_timeout_seconds: int
        """
        if send_recv_timeout_seconds is not None and send_recv_timeout_seconds < 16:
            raise ValueError("Invalid value for `send_recv_timeout_seconds`, must be a value greater than or equal to `16`")

        self._send_recv_timeout_seconds = send_recv_timeout_seconds
