# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HeaderAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, header_action_type: str=None, header_name: str=None, value: str=None):
        """HeaderAction - a model defined in OpenAPI

        :param header_action_type: The header_action_type of this HeaderAction.
        :param header_name: The header_name of this HeaderAction.
        :param value: The value of this HeaderAction.
        """
        self.openapi_types = {
            'header_action_type': str,
            'header_name': str,
            'value': str
        }

        self.attribute_map = {
            'header_action_type': 'headerActionType',
            'header_name': 'headerName',
            'value': 'value'
        }

        self._header_action_type = header_action_type
        self._header_name = header_name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HeaderAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HeaderAction of this HeaderAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def header_action_type(self):
        """Gets the header_action_type of this HeaderAction.

        Which type of manipulation to apply to the header.

        :return: The header_action_type of this HeaderAction.
        :rtype: str
        """
        return self._header_action_type

    @header_action_type.setter
    def header_action_type(self, header_action_type):
        """Sets the header_action_type of this HeaderAction.

        Which type of manipulation to apply to the header.

        :param header_action_type: The header_action_type of this HeaderAction.
        :type header_action_type: str
        """
        allowed_values = ["Append", "Delete", "Overwrite"]  # noqa: E501
        if header_action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `header_action_type` ({0}), must be one of {1}"
                .format(header_action_type, allowed_values)
            )

        self._header_action_type = header_action_type

    @property
    def header_name(self):
        """Gets the header_name of this HeaderAction.

        The name of the header this action will apply to.

        :return: The header_name of this HeaderAction.
        :rtype: str
        """
        return self._header_name

    @header_name.setter
    def header_name(self, header_name):
        """Sets the header_name of this HeaderAction.

        The name of the header this action will apply to.

        :param header_name: The header_name of this HeaderAction.
        :type header_name: str
        """
        if header_name is None:
            raise ValueError("Invalid value for `header_name`, must not be `None`")

        self._header_name = header_name

    @property
    def value(self):
        """Gets the value of this HeaderAction.

        The value to update the given header name with. This value is not used if the actionType is Delete.

        :return: The value of this HeaderAction.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this HeaderAction.

        The value to update the given header name with. This value is not used if the actionType is Delete.

        :param value: The value of this HeaderAction.
        :type value: str
        """

        self._value = value
