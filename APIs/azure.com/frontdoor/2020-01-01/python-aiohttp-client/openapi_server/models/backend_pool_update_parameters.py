# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backend import Backend
from openapi_server.models.backend_pool_update_parameters_health_probe_settings import BackendPoolUpdateParametersHealthProbeSettings
from openapi_server import util


class BackendPoolUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backends: List[Backend]=None, health_probe_settings: BackendPoolUpdateParametersHealthProbeSettings=None, load_balancing_settings: BackendPoolUpdateParametersHealthProbeSettings=None):
        """BackendPoolUpdateParameters - a model defined in OpenAPI

        :param backends: The backends of this BackendPoolUpdateParameters.
        :param health_probe_settings: The health_probe_settings of this BackendPoolUpdateParameters.
        :param load_balancing_settings: The load_balancing_settings of this BackendPoolUpdateParameters.
        """
        self.openapi_types = {
            'backends': List[Backend],
            'health_probe_settings': BackendPoolUpdateParametersHealthProbeSettings,
            'load_balancing_settings': BackendPoolUpdateParametersHealthProbeSettings
        }

        self.attribute_map = {
            'backends': 'backends',
            'health_probe_settings': 'healthProbeSettings',
            'load_balancing_settings': 'loadBalancingSettings'
        }

        self._backends = backends
        self._health_probe_settings = health_probe_settings
        self._load_balancing_settings = load_balancing_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackendPoolUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackendPoolUpdateParameters of this BackendPoolUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backends(self):
        """Gets the backends of this BackendPoolUpdateParameters.

        The set of backends for this pool

        :return: The backends of this BackendPoolUpdateParameters.
        :rtype: List[Backend]
        """
        return self._backends

    @backends.setter
    def backends(self, backends):
        """Sets the backends of this BackendPoolUpdateParameters.

        The set of backends for this pool

        :param backends: The backends of this BackendPoolUpdateParameters.
        :type backends: List[Backend]
        """

        self._backends = backends

    @property
    def health_probe_settings(self):
        """Gets the health_probe_settings of this BackendPoolUpdateParameters.


        :return: The health_probe_settings of this BackendPoolUpdateParameters.
        :rtype: BackendPoolUpdateParametersHealthProbeSettings
        """
        return self._health_probe_settings

    @health_probe_settings.setter
    def health_probe_settings(self, health_probe_settings):
        """Sets the health_probe_settings of this BackendPoolUpdateParameters.


        :param health_probe_settings: The health_probe_settings of this BackendPoolUpdateParameters.
        :type health_probe_settings: BackendPoolUpdateParametersHealthProbeSettings
        """

        self._health_probe_settings = health_probe_settings

    @property
    def load_balancing_settings(self):
        """Gets the load_balancing_settings of this BackendPoolUpdateParameters.


        :return: The load_balancing_settings of this BackendPoolUpdateParameters.
        :rtype: BackendPoolUpdateParametersHealthProbeSettings
        """
        return self._load_balancing_settings

    @load_balancing_settings.setter
    def load_balancing_settings(self, load_balancing_settings):
        """Sets the load_balancing_settings of this BackendPoolUpdateParameters.


        :param load_balancing_settings: The load_balancing_settings of this BackendPoolUpdateParameters.
        :type load_balancing_settings: BackendPoolUpdateParametersHealthProbeSettings
        """

        self._load_balancing_settings = load_balancing_settings
