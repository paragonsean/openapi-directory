# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rules_engine_action import RulesEngineAction
from openapi_server.models.rules_engine_match_condition import RulesEngineMatchCondition
from openapi_server import util


class RulesEngineRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: RulesEngineAction=None, match_conditions: List[RulesEngineMatchCondition]=None, match_processing_behavior: str=None, name: str=None, priority: int=None):
        """RulesEngineRule - a model defined in OpenAPI

        :param action: The action of this RulesEngineRule.
        :param match_conditions: The match_conditions of this RulesEngineRule.
        :param match_processing_behavior: The match_processing_behavior of this RulesEngineRule.
        :param name: The name of this RulesEngineRule.
        :param priority: The priority of this RulesEngineRule.
        """
        self.openapi_types = {
            'action': RulesEngineAction,
            'match_conditions': List[RulesEngineMatchCondition],
            'match_processing_behavior': str,
            'name': str,
            'priority': int
        }

        self.attribute_map = {
            'action': 'action',
            'match_conditions': 'matchConditions',
            'match_processing_behavior': 'matchProcessingBehavior',
            'name': 'name',
            'priority': 'priority'
        }

        self._action = action
        self._match_conditions = match_conditions
        self._match_processing_behavior = match_processing_behavior
        self._name = name
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RulesEngineRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RulesEngineRule of this RulesEngineRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this RulesEngineRule.


        :return: The action of this RulesEngineRule.
        :rtype: RulesEngineAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RulesEngineRule.


        :param action: The action of this RulesEngineRule.
        :type action: RulesEngineAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def match_conditions(self):
        """Gets the match_conditions of this RulesEngineRule.

        A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.

        :return: The match_conditions of this RulesEngineRule.
        :rtype: List[RulesEngineMatchCondition]
        """
        return self._match_conditions

    @match_conditions.setter
    def match_conditions(self, match_conditions):
        """Sets the match_conditions of this RulesEngineRule.

        A list of match conditions that must meet in order for the actions of this rule to run. Having no match conditions means the actions will always run.

        :param match_conditions: The match_conditions of this RulesEngineRule.
        :type match_conditions: List[RulesEngineMatchCondition]
        """

        self._match_conditions = match_conditions

    @property
    def match_processing_behavior(self):
        """Gets the match_processing_behavior of this RulesEngineRule.

        If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.

        :return: The match_processing_behavior of this RulesEngineRule.
        :rtype: str
        """
        return self._match_processing_behavior

    @match_processing_behavior.setter
    def match_processing_behavior(self, match_processing_behavior):
        """Sets the match_processing_behavior of this RulesEngineRule.

        If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue.

        :param match_processing_behavior: The match_processing_behavior of this RulesEngineRule.
        :type match_processing_behavior: str
        """
        allowed_values = ["Continue", "Stop"]  # noqa: E501
        if match_processing_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `match_processing_behavior` ({0}), must be one of {1}"
                .format(match_processing_behavior, allowed_values)
            )

        self._match_processing_behavior = match_processing_behavior

    @property
    def name(self):
        """Gets the name of this RulesEngineRule.

        A name to refer to this specific rule.

        :return: The name of this RulesEngineRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RulesEngineRule.

        A name to refer to this specific rule.

        :param name: The name of this RulesEngineRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this RulesEngineRule.

        A priority assigned to this rule. 

        :return: The priority of this RulesEngineRule.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this RulesEngineRule.

        A priority assigned to this rule. 

        :param priority: The priority of this RulesEngineRule.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority
