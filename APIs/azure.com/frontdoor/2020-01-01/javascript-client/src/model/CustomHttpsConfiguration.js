/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FrontDoorCertificateSourceParameters from './FrontDoorCertificateSourceParameters';
import KeyVaultCertificateSourceParameters from './KeyVaultCertificateSourceParameters';

/**
 * The CustomHttpsConfiguration model module.
 * @module model/CustomHttpsConfiguration
 * @version 2020-01-01
 */
class CustomHttpsConfiguration {
    /**
     * Constructs a new <code>CustomHttpsConfiguration</code>.
     * Https settings for a domain
     * @alias module:model/CustomHttpsConfiguration
     * @param certificateSource {module:model/CustomHttpsConfiguration.CertificateSourceEnum} Defines the source of the SSL certificate
     * @param minimumTlsVersion {module:model/CustomHttpsConfiguration.MinimumTlsVersionEnum} The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
     * @param protocolType {module:model/CustomHttpsConfiguration.ProtocolTypeEnum} Defines the TLS extension protocol that is used for secure delivery
     */
    constructor(certificateSource, minimumTlsVersion, protocolType) { 
        
        CustomHttpsConfiguration.initialize(this, certificateSource, minimumTlsVersion, protocolType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificateSource, minimumTlsVersion, protocolType) { 
        obj['certificateSource'] = certificateSource;
        obj['minimumTlsVersion'] = minimumTlsVersion;
        obj['protocolType'] = protocolType;
    }

    /**
     * Constructs a <code>CustomHttpsConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomHttpsConfiguration} obj Optional instance to populate.
     * @return {module:model/CustomHttpsConfiguration} The populated <code>CustomHttpsConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomHttpsConfiguration();

            if (data.hasOwnProperty('certificateSource')) {
                obj['certificateSource'] = ApiClient.convertToType(data['certificateSource'], 'String');
            }
            if (data.hasOwnProperty('frontDoorCertificateSourceParameters')) {
                obj['frontDoorCertificateSourceParameters'] = FrontDoorCertificateSourceParameters.constructFromObject(data['frontDoorCertificateSourceParameters']);
            }
            if (data.hasOwnProperty('keyVaultCertificateSourceParameters')) {
                obj['keyVaultCertificateSourceParameters'] = KeyVaultCertificateSourceParameters.constructFromObject(data['keyVaultCertificateSourceParameters']);
            }
            if (data.hasOwnProperty('minimumTlsVersion')) {
                obj['minimumTlsVersion'] = ApiClient.convertToType(data['minimumTlsVersion'], 'String');
            }
            if (data.hasOwnProperty('protocolType')) {
                obj['protocolType'] = ApiClient.convertToType(data['protocolType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomHttpsConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomHttpsConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomHttpsConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificateSource'] && !(typeof data['certificateSource'] === 'string' || data['certificateSource'] instanceof String)) {
            throw new Error("Expected the field `certificateSource` to be a primitive type in the JSON string but got " + data['certificateSource']);
        }
        // validate the optional field `frontDoorCertificateSourceParameters`
        if (data['frontDoorCertificateSourceParameters']) { // data not null
          FrontDoorCertificateSourceParameters.validateJSON(data['frontDoorCertificateSourceParameters']);
        }
        // validate the optional field `keyVaultCertificateSourceParameters`
        if (data['keyVaultCertificateSourceParameters']) { // data not null
          KeyVaultCertificateSourceParameters.validateJSON(data['keyVaultCertificateSourceParameters']);
        }
        // ensure the json data is a string
        if (data['minimumTlsVersion'] && !(typeof data['minimumTlsVersion'] === 'string' || data['minimumTlsVersion'] instanceof String)) {
            throw new Error("Expected the field `minimumTlsVersion` to be a primitive type in the JSON string but got " + data['minimumTlsVersion']);
        }
        // ensure the json data is a string
        if (data['protocolType'] && !(typeof data['protocolType'] === 'string' || data['protocolType'] instanceof String)) {
            throw new Error("Expected the field `protocolType` to be a primitive type in the JSON string but got " + data['protocolType']);
        }

        return true;
    }


}

CustomHttpsConfiguration.RequiredProperties = ["certificateSource", "minimumTlsVersion", "protocolType"];

/**
 * Defines the source of the SSL certificate
 * @member {module:model/CustomHttpsConfiguration.CertificateSourceEnum} certificateSource
 */
CustomHttpsConfiguration.prototype['certificateSource'] = undefined;

/**
 * @member {module:model/FrontDoorCertificateSourceParameters} frontDoorCertificateSourceParameters
 */
CustomHttpsConfiguration.prototype['frontDoorCertificateSourceParameters'] = undefined;

/**
 * @member {module:model/KeyVaultCertificateSourceParameters} keyVaultCertificateSourceParameters
 */
CustomHttpsConfiguration.prototype['keyVaultCertificateSourceParameters'] = undefined;

/**
 * The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
 * @member {module:model/CustomHttpsConfiguration.MinimumTlsVersionEnum} minimumTlsVersion
 */
CustomHttpsConfiguration.prototype['minimumTlsVersion'] = undefined;

/**
 * Defines the TLS extension protocol that is used for secure delivery
 * @member {module:model/CustomHttpsConfiguration.ProtocolTypeEnum} protocolType
 */
CustomHttpsConfiguration.prototype['protocolType'] = undefined;





/**
 * Allowed values for the <code>certificateSource</code> property.
 * @enum {String}
 * @readonly
 */
CustomHttpsConfiguration['CertificateSourceEnum'] = {

    /**
     * value: "AzureKeyVault"
     * @const
     */
    "AzureKeyVault": "AzureKeyVault",

    /**
     * value: "FrontDoor"
     * @const
     */
    "FrontDoor": "FrontDoor"
};


/**
 * Allowed values for the <code>minimumTlsVersion</code> property.
 * @enum {String}
 * @readonly
 */
CustomHttpsConfiguration['MinimumTlsVersionEnum'] = {

    /**
     * value: "1.0"
     * @const
     */
    "0": "1.0",

    /**
     * value: "1.2"
     * @const
     */
    "2": "1.2"
};


/**
 * Allowed values for the <code>protocolType</code> property.
 * @enum {String}
 * @readonly
 */
CustomHttpsConfiguration['ProtocolTypeEnum'] = {

    /**
     * value: "ServerNameIndication"
     * @const
     */
    "ServerNameIndication": "ServerNameIndication"
};



export default CustomHttpsConfiguration;

