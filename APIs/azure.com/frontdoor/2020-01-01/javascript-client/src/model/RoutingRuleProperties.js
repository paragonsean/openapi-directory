/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BackendPoolUpdateParametersHealthProbeSettings from './BackendPoolUpdateParametersHealthProbeSettings';
import ResourceState from './ResourceState';
import RouteConfiguration from './RouteConfiguration';
import RoutingRuleUpdateParameters from './RoutingRuleUpdateParameters';

/**
 * The RoutingRuleProperties model module.
 * @module model/RoutingRuleProperties
 * @version 2020-01-01
 */
class RoutingRuleProperties {
    /**
     * Constructs a new <code>RoutingRuleProperties</code>.
     * The JSON object that contains the properties required to create a routing rule.
     * @alias module:model/RoutingRuleProperties
     * @implements module:model/RoutingRuleUpdateParameters
     */
    constructor() { 
        RoutingRuleUpdateParameters.initialize(this);
        RoutingRuleProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RoutingRuleProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoutingRuleProperties} obj Optional instance to populate.
     * @return {module:model/RoutingRuleProperties} The populated <code>RoutingRuleProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoutingRuleProperties();
            RoutingRuleUpdateParameters.constructFromObject(data, obj);

            if (data.hasOwnProperty('resourceState')) {
                obj['resourceState'] = ResourceState.constructFromObject(data['resourceState']);
            }
            if (data.hasOwnProperty('acceptedProtocols')) {
                obj['acceptedProtocols'] = ApiClient.convertToType(data['acceptedProtocols'], ['String']);
            }
            if (data.hasOwnProperty('enabledState')) {
                obj['enabledState'] = ApiClient.convertToType(data['enabledState'], 'String');
            }
            if (data.hasOwnProperty('frontendEndpoints')) {
                obj['frontendEndpoints'] = ApiClient.convertToType(data['frontendEndpoints'], [BackendPoolUpdateParametersHealthProbeSettings]);
            }
            if (data.hasOwnProperty('patternsToMatch')) {
                obj['patternsToMatch'] = ApiClient.convertToType(data['patternsToMatch'], ['String']);
            }
            if (data.hasOwnProperty('routeConfiguration')) {
                obj['routeConfiguration'] = RouteConfiguration.constructFromObject(data['routeConfiguration']);
            }
            if (data.hasOwnProperty('rulesEngine')) {
                obj['rulesEngine'] = BackendPoolUpdateParametersHealthProbeSettings.constructFromObject(data['rulesEngine']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoutingRuleProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoutingRuleProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['acceptedProtocols'])) {
            throw new Error("Expected the field `acceptedProtocols` to be an array in the JSON data but got " + data['acceptedProtocols']);
        }
        // ensure the json data is a string
        if (data['enabledState'] && !(typeof data['enabledState'] === 'string' || data['enabledState'] instanceof String)) {
            throw new Error("Expected the field `enabledState` to be a primitive type in the JSON string but got " + data['enabledState']);
        }
        if (data['frontendEndpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['frontendEndpoints'])) {
                throw new Error("Expected the field `frontendEndpoints` to be an array in the JSON data but got " + data['frontendEndpoints']);
            }
            // validate the optional field `frontendEndpoints` (array)
            for (const item of data['frontendEndpoints']) {
                BackendPoolUpdateParametersHealthProbeSettings.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['patternsToMatch'])) {
            throw new Error("Expected the field `patternsToMatch` to be an array in the JSON data but got " + data['patternsToMatch']);
        }
        // validate the optional field `routeConfiguration`
        if (data['routeConfiguration']) { // data not null
          RouteConfiguration.validateJSON(data['routeConfiguration']);
        }
        // validate the optional field `rulesEngine`
        if (data['rulesEngine']) { // data not null
          BackendPoolUpdateParametersHealthProbeSettings.validateJSON(data['rulesEngine']);
        }

        return true;
    }


}



/**
 * @member {module:model/ResourceState} resourceState
 */
RoutingRuleProperties.prototype['resourceState'] = undefined;

/**
 * Protocol schemes to match for this rule
 * @member {Array.<module:model/RoutingRuleProperties.AcceptedProtocolsEnum>} acceptedProtocols
 */
RoutingRuleProperties.prototype['acceptedProtocols'] = undefined;

/**
 * Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
 * @member {module:model/RoutingRuleProperties.EnabledStateEnum} enabledState
 */
RoutingRuleProperties.prototype['enabledState'] = undefined;

/**
 * Frontend endpoints associated with this rule
 * @member {Array.<module:model/BackendPoolUpdateParametersHealthProbeSettings>} frontendEndpoints
 */
RoutingRuleProperties.prototype['frontendEndpoints'] = undefined;

/**
 * The route patterns of the rule.
 * @member {Array.<String>} patternsToMatch
 */
RoutingRuleProperties.prototype['patternsToMatch'] = undefined;

/**
 * @member {module:model/RouteConfiguration} routeConfiguration
 */
RoutingRuleProperties.prototype['routeConfiguration'] = undefined;

/**
 * @member {module:model/BackendPoolUpdateParametersHealthProbeSettings} rulesEngine
 */
RoutingRuleProperties.prototype['rulesEngine'] = undefined;


// Implement RoutingRuleUpdateParameters interface:
/**
 * Protocol schemes to match for this rule
 * @member {Array.<module:model/RoutingRuleUpdateParameters.AcceptedProtocolsEnum>} acceptedProtocols
 */
RoutingRuleUpdateParameters.prototype['acceptedProtocols'] = undefined;
/**
 * Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
 * @member {module:model/RoutingRuleUpdateParameters.EnabledStateEnum} enabledState
 */
RoutingRuleUpdateParameters.prototype['enabledState'] = undefined;
/**
 * Frontend endpoints associated with this rule
 * @member {Array.<module:model/BackendPoolUpdateParametersHealthProbeSettings>} frontendEndpoints
 */
RoutingRuleUpdateParameters.prototype['frontendEndpoints'] = undefined;
/**
 * The route patterns of the rule.
 * @member {Array.<String>} patternsToMatch
 */
RoutingRuleUpdateParameters.prototype['patternsToMatch'] = undefined;
/**
 * @member {module:model/RouteConfiguration} routeConfiguration
 */
RoutingRuleUpdateParameters.prototype['routeConfiguration'] = undefined;
/**
 * @member {module:model/BackendPoolUpdateParametersHealthProbeSettings} rulesEngine
 */
RoutingRuleUpdateParameters.prototype['rulesEngine'] = undefined;



/**
 * Allowed values for the <code>acceptedProtocols</code> property.
 * @enum {String}
 * @readonly
 */
RoutingRuleProperties['AcceptedProtocolsEnum'] = {

    /**
     * value: "Http"
     * @const
     */
    "Http": "Http",

    /**
     * value: "Https"
     * @const
     */
    "Https": "Https"
};


/**
 * Allowed values for the <code>enabledState</code> property.
 * @enum {String}
 * @readonly
 */
RoutingRuleProperties['EnabledStateEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default RoutingRuleProperties;

