/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2020-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Transform from './Transform';

/**
 * The RulesEngineMatchCondition model module.
 * @module model/RulesEngineMatchCondition
 * @version 2020-01-01
 */
class RulesEngineMatchCondition {
    /**
     * Constructs a new <code>RulesEngineMatchCondition</code>.
     * Define a match condition
     * @alias module:model/RulesEngineMatchCondition
     * @param rulesEngineMatchValue {Array.<String>} Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
     * @param rulesEngineMatchVariable {module:model/RulesEngineMatchCondition.RulesEngineMatchVariableEnum} Match Variable
     * @param rulesEngineOperator {module:model/RulesEngineMatchCondition.RulesEngineOperatorEnum} Describes operator to apply to the match condition.
     */
    constructor(rulesEngineMatchValue, rulesEngineMatchVariable, rulesEngineOperator) { 
        
        RulesEngineMatchCondition.initialize(this, rulesEngineMatchValue, rulesEngineMatchVariable, rulesEngineOperator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, rulesEngineMatchValue, rulesEngineMatchVariable, rulesEngineOperator) { 
        obj['rulesEngineMatchValue'] = rulesEngineMatchValue;
        obj['rulesEngineMatchVariable'] = rulesEngineMatchVariable;
        obj['rulesEngineOperator'] = rulesEngineOperator;
    }

    /**
     * Constructs a <code>RulesEngineMatchCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RulesEngineMatchCondition} obj Optional instance to populate.
     * @return {module:model/RulesEngineMatchCondition} The populated <code>RulesEngineMatchCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RulesEngineMatchCondition();

            if (data.hasOwnProperty('negateCondition')) {
                obj['negateCondition'] = ApiClient.convertToType(data['negateCondition'], 'Boolean');
            }
            if (data.hasOwnProperty('rulesEngineMatchValue')) {
                obj['rulesEngineMatchValue'] = ApiClient.convertToType(data['rulesEngineMatchValue'], ['String']);
            }
            if (data.hasOwnProperty('rulesEngineMatchVariable')) {
                obj['rulesEngineMatchVariable'] = ApiClient.convertToType(data['rulesEngineMatchVariable'], 'String');
            }
            if (data.hasOwnProperty('rulesEngineOperator')) {
                obj['rulesEngineOperator'] = ApiClient.convertToType(data['rulesEngineOperator'], 'String');
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
            if (data.hasOwnProperty('transforms')) {
                obj['transforms'] = ApiClient.convertToType(data['transforms'], [Transform]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RulesEngineMatchCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RulesEngineMatchCondition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RulesEngineMatchCondition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['rulesEngineMatchValue'])) {
            throw new Error("Expected the field `rulesEngineMatchValue` to be an array in the JSON data but got " + data['rulesEngineMatchValue']);
        }
        // ensure the json data is a string
        if (data['rulesEngineMatchVariable'] && !(typeof data['rulesEngineMatchVariable'] === 'string' || data['rulesEngineMatchVariable'] instanceof String)) {
            throw new Error("Expected the field `rulesEngineMatchVariable` to be a primitive type in the JSON string but got " + data['rulesEngineMatchVariable']);
        }
        // ensure the json data is a string
        if (data['rulesEngineOperator'] && !(typeof data['rulesEngineOperator'] === 'string' || data['rulesEngineOperator'] instanceof String)) {
            throw new Error("Expected the field `rulesEngineOperator` to be a primitive type in the JSON string but got " + data['rulesEngineOperator']);
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transforms'])) {
            throw new Error("Expected the field `transforms` to be an array in the JSON data but got " + data['transforms']);
        }

        return true;
    }


}

RulesEngineMatchCondition.RequiredProperties = ["rulesEngineMatchValue", "rulesEngineMatchVariable", "rulesEngineOperator"];

/**
 * Describes if this is negate condition or not
 * @member {Boolean} negateCondition
 */
RulesEngineMatchCondition.prototype['negateCondition'] = undefined;

/**
 * Match values to match against. The operator will apply to each value in here with OR semantics. If any of them match the variable with the given operator this match condition is considered a match.
 * @member {Array.<String>} rulesEngineMatchValue
 */
RulesEngineMatchCondition.prototype['rulesEngineMatchValue'] = undefined;

/**
 * Match Variable
 * @member {module:model/RulesEngineMatchCondition.RulesEngineMatchVariableEnum} rulesEngineMatchVariable
 */
RulesEngineMatchCondition.prototype['rulesEngineMatchVariable'] = undefined;

/**
 * Describes operator to apply to the match condition.
 * @member {module:model/RulesEngineMatchCondition.RulesEngineOperatorEnum} rulesEngineOperator
 */
RulesEngineMatchCondition.prototype['rulesEngineOperator'] = undefined;

/**
 * Name of selector in RequestHeader or RequestBody to be matched
 * @member {String} selector
 */
RulesEngineMatchCondition.prototype['selector'] = undefined;

/**
 * List of transforms
 * @member {Array.<module:model/Transform>} transforms
 */
RulesEngineMatchCondition.prototype['transforms'] = undefined;





/**
 * Allowed values for the <code>rulesEngineMatchVariable</code> property.
 * @enum {String}
 * @readonly
 */
RulesEngineMatchCondition['RulesEngineMatchVariableEnum'] = {

    /**
     * value: "IsMobile"
     * @const
     */
    "IsMobile": "IsMobile",

    /**
     * value: "RemoteAddr"
     * @const
     */
    "RemoteAddr": "RemoteAddr",

    /**
     * value: "RequestMethod"
     * @const
     */
    "RequestMethod": "RequestMethod",

    /**
     * value: "QueryString"
     * @const
     */
    "QueryString": "QueryString",

    /**
     * value: "PostArgs"
     * @const
     */
    "PostArgs": "PostArgs",

    /**
     * value: "RequestUri"
     * @const
     */
    "RequestUri": "RequestUri",

    /**
     * value: "RequestPath"
     * @const
     */
    "RequestPath": "RequestPath",

    /**
     * value: "RequestFilename"
     * @const
     */
    "RequestFilename": "RequestFilename",

    /**
     * value: "RequestFilenameExtension"
     * @const
     */
    "RequestFilenameExtension": "RequestFilenameExtension",

    /**
     * value: "RequestHeader"
     * @const
     */
    "RequestHeader": "RequestHeader",

    /**
     * value: "RequestBody"
     * @const
     */
    "RequestBody": "RequestBody",

    /**
     * value: "RequestScheme"
     * @const
     */
    "RequestScheme": "RequestScheme"
};


/**
 * Allowed values for the <code>rulesEngineOperator</code> property.
 * @enum {String}
 * @readonly
 */
RulesEngineMatchCondition['RulesEngineOperatorEnum'] = {

    /**
     * value: "Any"
     * @const
     */
    "Any": "Any",

    /**
     * value: "IPMatch"
     * @const
     */
    "IPMatch": "IPMatch",

    /**
     * value: "GeoMatch"
     * @const
     */
    "GeoMatch": "GeoMatch",

    /**
     * value: "Equal"
     * @const
     */
    "Equal": "Equal",

    /**
     * value: "Contains"
     * @const
     */
    "Contains": "Contains",

    /**
     * value: "LessThan"
     * @const
     */
    "LessThan": "LessThan",

    /**
     * value: "GreaterThan"
     * @const
     */
    "GreaterThan": "GreaterThan",

    /**
     * value: "LessThanOrEqual"
     * @const
     */
    "LessThanOrEqual": "LessThanOrEqual",

    /**
     * value: "GreaterThanOrEqual"
     * @const
     */
    "GreaterThanOrEqual": "GreaterThanOrEqual",

    /**
     * value: "BeginsWith"
     * @const
     */
    "BeginsWith": "BeginsWith",

    /**
     * value: "EndsWith"
     * @const
     */
    "EndsWith": "EndsWith"
};



export default RulesEngineMatchCondition;

