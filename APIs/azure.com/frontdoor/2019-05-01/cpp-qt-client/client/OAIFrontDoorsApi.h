/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFrontDoorsApi_H
#define OAI_OAIFrontDoorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomHttpsConfiguration.h"
#include "OAIErrorResponse.h"
#include "OAIFrontDoor.h"
#include "OAIFrontDoorListResult.h"
#include "OAIFrontendEndpoint.h"
#include "OAIFrontendEndpointsListResult.h"
#include "OAIPurgeParameters.h"
#include "OAIValidateCustomDomainInput.h"
#include "OAIValidateCustomDomainOutput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFrontDoorsApi : public QObject {
    Q_OBJECT

public:
    OAIFrontDoorsApi(const int timeOut = 0);
    ~OAIFrontDoorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  front_door_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  content_file_paths OAIPurgeParameters [required]
    */
    virtual void endpointsPurgeContent(const QString &subscription_id, const QString &resource_group_name, const QString &front_door_name, const QString &api_version, const OAIPurgeParameters &content_file_paths);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  front_door_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  front_door_parameters OAIFrontDoor [required]
    */
    virtual void frontDoorsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &front_door_name, const QString &api_version, const OAIFrontDoor &front_door_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  front_door_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void frontDoorsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &front_door_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  front_door_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void frontDoorsGet(const QString &subscription_id, const QString &resource_group_name, const QString &front_door_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void frontDoorsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void frontDoorsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  front_door_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  custom_domain_properties OAIValidateCustomDomainInput [required]
    */
    virtual void frontDoorsValidateCustomDomain(const QString &subscription_id, const QString &resource_group_name, const QString &front_door_name, const QString &api_version, const OAIValidateCustomDomainInput &custom_domain_properties);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  front_door_name QString [required]
    * @param[in]  frontend_endpoint_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void frontendEndpointsDisableHttps(const QString &subscription_id, const QString &resource_group_name, const QString &front_door_name, const QString &frontend_endpoint_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  front_door_name QString [required]
    * @param[in]  frontend_endpoint_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  custom_https_configuration OAICustomHttpsConfiguration [required]
    */
    virtual void frontendEndpointsEnableHttps(const QString &subscription_id, const QString &resource_group_name, const QString &front_door_name, const QString &frontend_endpoint_name, const QString &api_version, const OAICustomHttpsConfiguration &custom_https_configuration);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  front_door_name QString [required]
    * @param[in]  frontend_endpoint_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void frontendEndpointsGet(const QString &subscription_id, const QString &resource_group_name, const QString &front_door_name, const QString &frontend_endpoint_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  front_door_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void frontendEndpointsListByFrontDoor(const QString &subscription_id, const QString &resource_group_name, const QString &front_door_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void endpointsPurgeContentCallback(OAIHttpRequestWorker *worker);
    void frontDoorsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void frontDoorsDeleteCallback(OAIHttpRequestWorker *worker);
    void frontDoorsGetCallback(OAIHttpRequestWorker *worker);
    void frontDoorsListCallback(OAIHttpRequestWorker *worker);
    void frontDoorsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void frontDoorsValidateCustomDomainCallback(OAIHttpRequestWorker *worker);
    void frontendEndpointsDisableHttpsCallback(OAIHttpRequestWorker *worker);
    void frontendEndpointsEnableHttpsCallback(OAIHttpRequestWorker *worker);
    void frontendEndpointsGetCallback(OAIHttpRequestWorker *worker);
    void frontendEndpointsListByFrontDoorCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void endpointsPurgeContentSignal();
    void frontDoorsCreateOrUpdateSignal(OAIFrontDoor summary);
    void frontDoorsDeleteSignal();
    void frontDoorsGetSignal(OAIFrontDoor summary);
    void frontDoorsListSignal(OAIFrontDoorListResult summary);
    void frontDoorsListByResourceGroupSignal(OAIFrontDoorListResult summary);
    void frontDoorsValidateCustomDomainSignal(OAIValidateCustomDomainOutput summary);
    void frontendEndpointsDisableHttpsSignal();
    void frontendEndpointsEnableHttpsSignal();
    void frontendEndpointsGetSignal(OAIFrontendEndpoint summary);
    void frontendEndpointsListByFrontDoorSignal(OAIFrontendEndpointsListResult summary);


    void endpointsPurgeContentSignalFull(OAIHttpRequestWorker *worker);
    void frontDoorsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFrontDoor summary);
    void frontDoorsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void frontDoorsGetSignalFull(OAIHttpRequestWorker *worker, OAIFrontDoor summary);
    void frontDoorsListSignalFull(OAIHttpRequestWorker *worker, OAIFrontDoorListResult summary);
    void frontDoorsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIFrontDoorListResult summary);
    void frontDoorsValidateCustomDomainSignalFull(OAIHttpRequestWorker *worker, OAIValidateCustomDomainOutput summary);
    void frontendEndpointsDisableHttpsSignalFull(OAIHttpRequestWorker *worker);
    void frontendEndpointsEnableHttpsSignalFull(OAIHttpRequestWorker *worker);
    void frontendEndpointsGetSignalFull(OAIHttpRequestWorker *worker, OAIFrontendEndpoint summary);
    void frontendEndpointsListByFrontDoorSignalFull(OAIHttpRequestWorker *worker, OAIFrontendEndpointsListResult summary);

    Q_DECL_DEPRECATED_X("Use endpointsPurgeContentSignalError() instead")
    void endpointsPurgeContentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsPurgeContentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsCreateOrUpdateSignalError() instead")
    void frontDoorsCreateOrUpdateSignalE(OAIFrontDoor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsCreateOrUpdateSignalError(OAIFrontDoor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsDeleteSignalError() instead")
    void frontDoorsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsGetSignalError() instead")
    void frontDoorsGetSignalE(OAIFrontDoor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsGetSignalError(OAIFrontDoor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsListSignalError() instead")
    void frontDoorsListSignalE(OAIFrontDoorListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsListSignalError(OAIFrontDoorListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsListByResourceGroupSignalError() instead")
    void frontDoorsListByResourceGroupSignalE(OAIFrontDoorListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsListByResourceGroupSignalError(OAIFrontDoorListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsValidateCustomDomainSignalError() instead")
    void frontDoorsValidateCustomDomainSignalE(OAIValidateCustomDomainOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsValidateCustomDomainSignalError(OAIValidateCustomDomainOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontendEndpointsDisableHttpsSignalError() instead")
    void frontendEndpointsDisableHttpsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void frontendEndpointsDisableHttpsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontendEndpointsEnableHttpsSignalError() instead")
    void frontendEndpointsEnableHttpsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void frontendEndpointsEnableHttpsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontendEndpointsGetSignalError() instead")
    void frontendEndpointsGetSignalE(OAIFrontendEndpoint summary, QNetworkReply::NetworkError error_type, QString error_str);
    void frontendEndpointsGetSignalError(OAIFrontendEndpoint summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontendEndpointsListByFrontDoorSignalError() instead")
    void frontendEndpointsListByFrontDoorSignalE(OAIFrontendEndpointsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void frontendEndpointsListByFrontDoorSignalError(OAIFrontendEndpointsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use endpointsPurgeContentSignalErrorFull() instead")
    void endpointsPurgeContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void endpointsPurgeContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsCreateOrUpdateSignalErrorFull() instead")
    void frontDoorsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsDeleteSignalErrorFull() instead")
    void frontDoorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsGetSignalErrorFull() instead")
    void frontDoorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsListSignalErrorFull() instead")
    void frontDoorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsListByResourceGroupSignalErrorFull() instead")
    void frontDoorsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontDoorsValidateCustomDomainSignalErrorFull() instead")
    void frontDoorsValidateCustomDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void frontDoorsValidateCustomDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontendEndpointsDisableHttpsSignalErrorFull() instead")
    void frontendEndpointsDisableHttpsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void frontendEndpointsDisableHttpsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontendEndpointsEnableHttpsSignalErrorFull() instead")
    void frontendEndpointsEnableHttpsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void frontendEndpointsEnableHttpsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontendEndpointsGetSignalErrorFull() instead")
    void frontendEndpointsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void frontendEndpointsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use frontendEndpointsListByFrontDoorSignalErrorFull() instead")
    void frontendEndpointsListByFrontDoorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void frontendEndpointsListByFrontDoorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
