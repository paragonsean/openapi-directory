/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHealthProbeSettingsProperties.h
 *
 * The JSON object that contains the properties required to create a health probe settings.
 */

#ifndef OAIHealthProbeSettingsProperties_H
#define OAIHealthProbeSettingsProperties_H

#include <QJsonObject>

#include "OAIResourceState.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIHealthProbeSettingsProperties : public OAIObject {
public:
    OAIHealthProbeSettingsProperties();
    OAIHealthProbeSettingsProperties(QString json);
    ~OAIHealthProbeSettingsProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIResourceState getResourceState() const;
    void setResourceState(const OAIResourceState &resource_state);
    bool is_resource_state_Set() const;
    bool is_resource_state_Valid() const;

    QString getEnabledState() const;
    void setEnabledState(const QString &enabled_state);
    bool is_enabled_state_Set() const;
    bool is_enabled_state_Valid() const;

    QString getHealthProbeMethod() const;
    void setHealthProbeMethod(const QString &health_probe_method);
    bool is_health_probe_method_Set() const;
    bool is_health_probe_method_Valid() const;

    qint32 getIntervalInSeconds() const;
    void setIntervalInSeconds(const qint32 &interval_in_seconds);
    bool is_interval_in_seconds_Set() const;
    bool is_interval_in_seconds_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIResourceState m_resource_state;
    bool m_resource_state_isSet;
    bool m_resource_state_isValid;

    QString m_enabled_state;
    bool m_enabled_state_isSet;
    bool m_enabled_state_isValid;

    QString m_health_probe_method;
    bool m_health_probe_method_isSet;
    bool m_health_probe_method_isValid;

    qint32 m_interval_in_seconds;
    bool m_interval_in_seconds_isSet;
    bool m_interval_in_seconds_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHealthProbeSettingsProperties)

#endif // OAIHealthProbeSettingsProperties_H
