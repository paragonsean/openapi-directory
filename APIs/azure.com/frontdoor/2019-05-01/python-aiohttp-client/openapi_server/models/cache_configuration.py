# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CacheConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dynamic_compression: str=None, query_parameter_strip_directive: str=None):
        """CacheConfiguration - a model defined in OpenAPI

        :param dynamic_compression: The dynamic_compression of this CacheConfiguration.
        :param query_parameter_strip_directive: The query_parameter_strip_directive of this CacheConfiguration.
        """
        self.openapi_types = {
            'dynamic_compression': str,
            'query_parameter_strip_directive': str
        }

        self.attribute_map = {
            'dynamic_compression': 'dynamicCompression',
            'query_parameter_strip_directive': 'queryParameterStripDirective'
        }

        self._dynamic_compression = dynamic_compression
        self._query_parameter_strip_directive = query_parameter_strip_directive

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CacheConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CacheConfiguration of this CacheConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dynamic_compression(self):
        """Gets the dynamic_compression of this CacheConfiguration.

        Whether to use dynamic compression for cached content

        :return: The dynamic_compression of this CacheConfiguration.
        :rtype: str
        """
        return self._dynamic_compression

    @dynamic_compression.setter
    def dynamic_compression(self, dynamic_compression):
        """Sets the dynamic_compression of this CacheConfiguration.

        Whether to use dynamic compression for cached content

        :param dynamic_compression: The dynamic_compression of this CacheConfiguration.
        :type dynamic_compression: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if dynamic_compression not in allowed_values:
            raise ValueError(
                "Invalid value for `dynamic_compression` ({0}), must be one of {1}"
                .format(dynamic_compression, allowed_values)
            )

        self._dynamic_compression = dynamic_compression

    @property
    def query_parameter_strip_directive(self):
        """Gets the query_parameter_strip_directive of this CacheConfiguration.

        Treatment of URL query terms when forming the cache key.

        :return: The query_parameter_strip_directive of this CacheConfiguration.
        :rtype: str
        """
        return self._query_parameter_strip_directive

    @query_parameter_strip_directive.setter
    def query_parameter_strip_directive(self, query_parameter_strip_directive):
        """Sets the query_parameter_strip_directive of this CacheConfiguration.

        Treatment of URL query terms when forming the cache key.

        :param query_parameter_strip_directive: The query_parameter_strip_directive of this CacheConfiguration.
        :type query_parameter_strip_directive: str
        """
        allowed_values = ["StripNone", "StripAll"]  # noqa: E501
        if query_parameter_strip_directive not in allowed_values:
            raise ValueError(
                "Invalid value for `query_parameter_strip_directive` ({0}), must be one of {1}"
                .format(query_parameter_strip_directive, allowed_values)
            )

        self._query_parameter_strip_directive = query_parameter_strip_directive
