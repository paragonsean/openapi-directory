# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_https_configuration import CustomHttpsConfiguration
from openapi_server.models.frontend_endpoint_update_parameters_web_application_firewall_policy_link import FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink
from openapi_server.models.resource_state import ResourceState
from openapi_server import util


class FrontendEndpointProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_https_configuration: CustomHttpsConfiguration=None, custom_https_provisioning_state: str=None, custom_https_provisioning_substate: str=None, resource_state: ResourceState=None, host_name: str=None, session_affinity_enabled_state: str=None, session_affinity_ttl_seconds: int=None, web_application_firewall_policy_link: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink=None):
        """FrontendEndpointProperties - a model defined in OpenAPI

        :param custom_https_configuration: The custom_https_configuration of this FrontendEndpointProperties.
        :param custom_https_provisioning_state: The custom_https_provisioning_state of this FrontendEndpointProperties.
        :param custom_https_provisioning_substate: The custom_https_provisioning_substate of this FrontendEndpointProperties.
        :param resource_state: The resource_state of this FrontendEndpointProperties.
        :param host_name: The host_name of this FrontendEndpointProperties.
        :param session_affinity_enabled_state: The session_affinity_enabled_state of this FrontendEndpointProperties.
        :param session_affinity_ttl_seconds: The session_affinity_ttl_seconds of this FrontendEndpointProperties.
        :param web_application_firewall_policy_link: The web_application_firewall_policy_link of this FrontendEndpointProperties.
        """
        self.openapi_types = {
            'custom_https_configuration': CustomHttpsConfiguration,
            'custom_https_provisioning_state': str,
            'custom_https_provisioning_substate': str,
            'resource_state': ResourceState,
            'host_name': str,
            'session_affinity_enabled_state': str,
            'session_affinity_ttl_seconds': int,
            'web_application_firewall_policy_link': FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink
        }

        self.attribute_map = {
            'custom_https_configuration': 'customHttpsConfiguration',
            'custom_https_provisioning_state': 'customHttpsProvisioningState',
            'custom_https_provisioning_substate': 'customHttpsProvisioningSubstate',
            'resource_state': 'resourceState',
            'host_name': 'hostName',
            'session_affinity_enabled_state': 'sessionAffinityEnabledState',
            'session_affinity_ttl_seconds': 'sessionAffinityTtlSeconds',
            'web_application_firewall_policy_link': 'webApplicationFirewallPolicyLink'
        }

        self._custom_https_configuration = custom_https_configuration
        self._custom_https_provisioning_state = custom_https_provisioning_state
        self._custom_https_provisioning_substate = custom_https_provisioning_substate
        self._resource_state = resource_state
        self._host_name = host_name
        self._session_affinity_enabled_state = session_affinity_enabled_state
        self._session_affinity_ttl_seconds = session_affinity_ttl_seconds
        self._web_application_firewall_policy_link = web_application_firewall_policy_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FrontendEndpointProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FrontendEndpointProperties of this FrontendEndpointProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_https_configuration(self):
        """Gets the custom_https_configuration of this FrontendEndpointProperties.


        :return: The custom_https_configuration of this FrontendEndpointProperties.
        :rtype: CustomHttpsConfiguration
        """
        return self._custom_https_configuration

    @custom_https_configuration.setter
    def custom_https_configuration(self, custom_https_configuration):
        """Sets the custom_https_configuration of this FrontendEndpointProperties.


        :param custom_https_configuration: The custom_https_configuration of this FrontendEndpointProperties.
        :type custom_https_configuration: CustomHttpsConfiguration
        """

        self._custom_https_configuration = custom_https_configuration

    @property
    def custom_https_provisioning_state(self):
        """Gets the custom_https_provisioning_state of this FrontendEndpointProperties.

        Provisioning status of Custom Https of the frontendEndpoint.

        :return: The custom_https_provisioning_state of this FrontendEndpointProperties.
        :rtype: str
        """
        return self._custom_https_provisioning_state

    @custom_https_provisioning_state.setter
    def custom_https_provisioning_state(self, custom_https_provisioning_state):
        """Sets the custom_https_provisioning_state of this FrontendEndpointProperties.

        Provisioning status of Custom Https of the frontendEndpoint.

        :param custom_https_provisioning_state: The custom_https_provisioning_state of this FrontendEndpointProperties.
        :type custom_https_provisioning_state: str
        """
        allowed_values = ["Enabling", "Enabled", "Disabling", "Disabled", "Failed"]  # noqa: E501
        if custom_https_provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `custom_https_provisioning_state` ({0}), must be one of {1}"
                .format(custom_https_provisioning_state, allowed_values)
            )

        self._custom_https_provisioning_state = custom_https_provisioning_state

    @property
    def custom_https_provisioning_substate(self):
        """Gets the custom_https_provisioning_substate of this FrontendEndpointProperties.

        Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.

        :return: The custom_https_provisioning_substate of this FrontendEndpointProperties.
        :rtype: str
        """
        return self._custom_https_provisioning_substate

    @custom_https_provisioning_substate.setter
    def custom_https_provisioning_substate(self, custom_https_provisioning_substate):
        """Sets the custom_https_provisioning_substate of this FrontendEndpointProperties.

        Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.

        :param custom_https_provisioning_substate: The custom_https_provisioning_substate of this FrontendEndpointProperties.
        :type custom_https_provisioning_substate: str
        """
        allowed_values = ["SubmittingDomainControlValidationRequest", "PendingDomainControlValidationREquestApproval", "DomainControlValidationRequestApproved", "DomainControlValidationRequestRejected", "DomainControlValidationRequestTimedOut", "IssuingCertificate", "DeployingCertificate", "CertificateDeployed", "DeletingCertificate", "CertificateDeleted"]  # noqa: E501
        if custom_https_provisioning_substate not in allowed_values:
            raise ValueError(
                "Invalid value for `custom_https_provisioning_substate` ({0}), must be one of {1}"
                .format(custom_https_provisioning_substate, allowed_values)
            )

        self._custom_https_provisioning_substate = custom_https_provisioning_substate

    @property
    def resource_state(self):
        """Gets the resource_state of this FrontendEndpointProperties.


        :return: The resource_state of this FrontendEndpointProperties.
        :rtype: ResourceState
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this FrontendEndpointProperties.


        :param resource_state: The resource_state of this FrontendEndpointProperties.
        :type resource_state: ResourceState
        """

        self._resource_state = resource_state

    @property
    def host_name(self):
        """Gets the host_name of this FrontendEndpointProperties.

        The host name of the frontendEndpoint. Must be a domain name.

        :return: The host_name of this FrontendEndpointProperties.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this FrontendEndpointProperties.

        The host name of the frontendEndpoint. Must be a domain name.

        :param host_name: The host_name of this FrontendEndpointProperties.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def session_affinity_enabled_state(self):
        """Gets the session_affinity_enabled_state of this FrontendEndpointProperties.

        Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'

        :return: The session_affinity_enabled_state of this FrontendEndpointProperties.
        :rtype: str
        """
        return self._session_affinity_enabled_state

    @session_affinity_enabled_state.setter
    def session_affinity_enabled_state(self, session_affinity_enabled_state):
        """Sets the session_affinity_enabled_state of this FrontendEndpointProperties.

        Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'

        :param session_affinity_enabled_state: The session_affinity_enabled_state of this FrontendEndpointProperties.
        :type session_affinity_enabled_state: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if session_affinity_enabled_state not in allowed_values:
            raise ValueError(
                "Invalid value for `session_affinity_enabled_state` ({0}), must be one of {1}"
                .format(session_affinity_enabled_state, allowed_values)
            )

        self._session_affinity_enabled_state = session_affinity_enabled_state

    @property
    def session_affinity_ttl_seconds(self):
        """Gets the session_affinity_ttl_seconds of this FrontendEndpointProperties.

        UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.

        :return: The session_affinity_ttl_seconds of this FrontendEndpointProperties.
        :rtype: int
        """
        return self._session_affinity_ttl_seconds

    @session_affinity_ttl_seconds.setter
    def session_affinity_ttl_seconds(self, session_affinity_ttl_seconds):
        """Sets the session_affinity_ttl_seconds of this FrontendEndpointProperties.

        UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.

        :param session_affinity_ttl_seconds: The session_affinity_ttl_seconds of this FrontendEndpointProperties.
        :type session_affinity_ttl_seconds: int
        """

        self._session_affinity_ttl_seconds = session_affinity_ttl_seconds

    @property
    def web_application_firewall_policy_link(self):
        """Gets the web_application_firewall_policy_link of this FrontendEndpointProperties.


        :return: The web_application_firewall_policy_link of this FrontendEndpointProperties.
        :rtype: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink
        """
        return self._web_application_firewall_policy_link

    @web_application_firewall_policy_link.setter
    def web_application_firewall_policy_link(self, web_application_firewall_policy_link):
        """Sets the web_application_firewall_policy_link of this FrontendEndpointProperties.


        :param web_application_firewall_policy_link: The web_application_firewall_policy_link of this FrontendEndpointProperties.
        :type web_application_firewall_policy_link: FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink
        """

        self._web_application_firewall_policy_link = web_application_firewall_policy_link
