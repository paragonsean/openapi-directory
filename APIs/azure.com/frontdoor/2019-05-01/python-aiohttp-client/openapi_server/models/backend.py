# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Backend(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, backend_host_header: str=None, enabled_state: str=None, http_port: int=None, https_port: int=None, priority: int=None, weight: int=None):
        """Backend - a model defined in OpenAPI

        :param address: The address of this Backend.
        :param backend_host_header: The backend_host_header of this Backend.
        :param enabled_state: The enabled_state of this Backend.
        :param http_port: The http_port of this Backend.
        :param https_port: The https_port of this Backend.
        :param priority: The priority of this Backend.
        :param weight: The weight of this Backend.
        """
        self.openapi_types = {
            'address': str,
            'backend_host_header': str,
            'enabled_state': str,
            'http_port': int,
            'https_port': int,
            'priority': int,
            'weight': int
        }

        self.attribute_map = {
            'address': 'address',
            'backend_host_header': 'backendHostHeader',
            'enabled_state': 'enabledState',
            'http_port': 'httpPort',
            'https_port': 'httpsPort',
            'priority': 'priority',
            'weight': 'weight'
        }

        self._address = address
        self._backend_host_header = backend_host_header
        self._enabled_state = enabled_state
        self._http_port = http_port
        self._https_port = https_port
        self._priority = priority
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Backend':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Backend of this Backend.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Backend.

        Location of the backend (IP address or FQDN)

        :return: The address of this Backend.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Backend.

        Location of the backend (IP address or FQDN)

        :param address: The address of this Backend.
        :type address: str
        """

        self._address = address

    @property
    def backend_host_header(self):
        """Gets the backend_host_header of this Backend.

        The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.

        :return: The backend_host_header of this Backend.
        :rtype: str
        """
        return self._backend_host_header

    @backend_host_header.setter
    def backend_host_header(self, backend_host_header):
        """Sets the backend_host_header of this Backend.

        The value to use as the host header sent to the backend. If blank or unspecified, this defaults to the incoming host.

        :param backend_host_header: The backend_host_header of this Backend.
        :type backend_host_header: str
        """

        self._backend_host_header = backend_host_header

    @property
    def enabled_state(self):
        """Gets the enabled_state of this Backend.

        Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'

        :return: The enabled_state of this Backend.
        :rtype: str
        """
        return self._enabled_state

    @enabled_state.setter
    def enabled_state(self, enabled_state):
        """Sets the enabled_state of this Backend.

        Whether to enable use of this backend. Permitted values are 'Enabled' or 'Disabled'

        :param enabled_state: The enabled_state of this Backend.
        :type enabled_state: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if enabled_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled_state` ({0}), must be one of {1}"
                .format(enabled_state, allowed_values)
            )

        self._enabled_state = enabled_state

    @property
    def http_port(self):
        """Gets the http_port of this Backend.

        The HTTP TCP port number. Must be between 1 and 65535.

        :return: The http_port of this Backend.
        :rtype: int
        """
        return self._http_port

    @http_port.setter
    def http_port(self, http_port):
        """Sets the http_port of this Backend.

        The HTTP TCP port number. Must be between 1 and 65535.

        :param http_port: The http_port of this Backend.
        :type http_port: int
        """
        if http_port is not None and http_port > 65535:
            raise ValueError("Invalid value for `http_port`, must be a value less than or equal to `65535`")
        if http_port is not None and http_port < 1:
            raise ValueError("Invalid value for `http_port`, must be a value greater than or equal to `1`")

        self._http_port = http_port

    @property
    def https_port(self):
        """Gets the https_port of this Backend.

        The HTTPS TCP port number. Must be between 1 and 65535.

        :return: The https_port of this Backend.
        :rtype: int
        """
        return self._https_port

    @https_port.setter
    def https_port(self, https_port):
        """Sets the https_port of this Backend.

        The HTTPS TCP port number. Must be between 1 and 65535.

        :param https_port: The https_port of this Backend.
        :type https_port: int
        """
        if https_port is not None and https_port > 65535:
            raise ValueError("Invalid value for `https_port`, must be a value less than or equal to `65535`")
        if https_port is not None and https_port < 1:
            raise ValueError("Invalid value for `https_port`, must be a value greater than or equal to `1`")

        self._https_port = https_port

    @property
    def priority(self):
        """Gets the priority of this Backend.

        Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.

        :return: The priority of this Backend.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Backend.

        Priority to use for load balancing. Higher priorities will not be used for load balancing if any lower priority backend is healthy.

        :param priority: The priority of this Backend.
        :type priority: int
        """
        if priority is not None and priority > 5:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `5`")
        if priority is not None and priority < 1:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")

        self._priority = priority

    @property
    def weight(self):
        """Gets the weight of this Backend.

        Weight of this endpoint for load balancing purposes.

        :return: The weight of this Backend.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Backend.

        Weight of this endpoint for load balancing purposes.

        :param weight: The weight of this Backend.
        :type weight: int
        """
        if weight is not None and weight > 1000:
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `1000`")
        if weight is not None and weight < 1:
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `1`")

        self._weight = weight
