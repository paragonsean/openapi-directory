# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_certificate_source_parameters_vault import KeyVaultCertificateSourceParametersVault
from openapi_server import util


class KeyVaultCertificateSourceParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret_name: str=None, secret_version: str=None, vault: KeyVaultCertificateSourceParametersVault=None):
        """KeyVaultCertificateSourceParameters - a model defined in OpenAPI

        :param secret_name: The secret_name of this KeyVaultCertificateSourceParameters.
        :param secret_version: The secret_version of this KeyVaultCertificateSourceParameters.
        :param vault: The vault of this KeyVaultCertificateSourceParameters.
        """
        self.openapi_types = {
            'secret_name': str,
            'secret_version': str,
            'vault': KeyVaultCertificateSourceParametersVault
        }

        self.attribute_map = {
            'secret_name': 'secretName',
            'secret_version': 'secretVersion',
            'vault': 'vault'
        }

        self._secret_name = secret_name
        self._secret_version = secret_version
        self._vault = vault

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyVaultCertificateSourceParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyVaultCertificateSourceParameters of this KeyVaultCertificateSourceParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret_name(self):
        """Gets the secret_name of this KeyVaultCertificateSourceParameters.

        The name of the Key Vault secret representing the full certificate PFX

        :return: The secret_name of this KeyVaultCertificateSourceParameters.
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this KeyVaultCertificateSourceParameters.

        The name of the Key Vault secret representing the full certificate PFX

        :param secret_name: The secret_name of this KeyVaultCertificateSourceParameters.
        :type secret_name: str
        """

        self._secret_name = secret_name

    @property
    def secret_version(self):
        """Gets the secret_version of this KeyVaultCertificateSourceParameters.

        The version of the Key Vault secret representing the full certificate PFX

        :return: The secret_version of this KeyVaultCertificateSourceParameters.
        :rtype: str
        """
        return self._secret_version

    @secret_version.setter
    def secret_version(self, secret_version):
        """Sets the secret_version of this KeyVaultCertificateSourceParameters.

        The version of the Key Vault secret representing the full certificate PFX

        :param secret_version: The secret_version of this KeyVaultCertificateSourceParameters.
        :type secret_version: str
        """

        self._secret_version = secret_version

    @property
    def vault(self):
        """Gets the vault of this KeyVaultCertificateSourceParameters.


        :return: The vault of this KeyVaultCertificateSourceParameters.
        :rtype: KeyVaultCertificateSourceParametersVault
        """
        return self._vault

    @vault.setter
    def vault(self, vault):
        """Sets the vault of this KeyVaultCertificateSourceParameters.


        :param vault: The vault of this KeyVaultCertificateSourceParameters.
        :type vault: KeyVaultCertificateSourceParametersVault
        """

        self._vault = vault
