/**
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomHttpsConfiguration from '../model/CustomHttpsConfiguration';
import ErrorResponse from '../model/ErrorResponse';
import FrontDoor from '../model/FrontDoor';
import FrontDoorListResult from '../model/FrontDoorListResult';
import FrontendEndpoint from '../model/FrontendEndpoint';
import FrontendEndpointsListResult from '../model/FrontendEndpointsListResult';
import PurgeParameters from '../model/PurgeParameters';
import ValidateCustomDomainInput from '../model/ValidateCustomDomainInput';
import ValidateCustomDomainOutput from '../model/ValidateCustomDomainOutput';

/**
* FrontDoors service.
* @module api/FrontDoorsApi
* @version 2019-05-01
*/
export default class FrontDoorsApi {

    /**
    * Constructs a new FrontDoorsApi. 
    * @alias module:api/FrontDoorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the endpointsPurgeContent operation.
     * @callback module:api/FrontDoorsApi~endpointsPurgeContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a content from Front Door.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} frontDoorName Name of the Front Door which is globally unique.
     * @param {String} apiVersion Client API version.
     * @param {module:model/PurgeParameters} contentFilePaths The path to the content to be purged. Path can be a full URL, e.g. '/pictures/city.png' which removes a single file, or a directory with a wildcard, e.g. '/pictures/_*' which removes all folders and files in the directory.
     * @param {module:api/FrontDoorsApi~endpointsPurgeContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    endpointsPurgeContent(subscriptionId, resourceGroupName, frontDoorName, apiVersion, contentFilePaths, callback) {
      let postBody = contentFilePaths;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling endpointsPurgeContent");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling endpointsPurgeContent");
      }
      // verify the required parameter 'frontDoorName' is set
      if (frontDoorName === undefined || frontDoorName === null) {
        throw new Error("Missing the required parameter 'frontDoorName' when calling endpointsPurgeContent");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling endpointsPurgeContent");
      }
      // verify the required parameter 'contentFilePaths' is set
      if (contentFilePaths === undefined || contentFilePaths === null) {
        throw new Error("Missing the required parameter 'contentFilePaths' when calling endpointsPurgeContent");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'frontDoorName': frontDoorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/purge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the frontDoorsCreateOrUpdate operation.
     * @callback module:api/FrontDoorsApi~frontDoorsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontDoor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Front Door with a Front Door name under the specified subscription and resource group.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} frontDoorName Name of the Front Door which is globally unique.
     * @param {String} apiVersion Client API version.
     * @param {module:model/FrontDoor} frontDoorParameters Front Door properties needed to create a new Front Door.
     * @param {module:api/FrontDoorsApi~frontDoorsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontDoor}
     */
    frontDoorsCreateOrUpdate(subscriptionId, resourceGroupName, frontDoorName, apiVersion, frontDoorParameters, callback) {
      let postBody = frontDoorParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling frontDoorsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling frontDoorsCreateOrUpdate");
      }
      // verify the required parameter 'frontDoorName' is set
      if (frontDoorName === undefined || frontDoorName === null) {
        throw new Error("Missing the required parameter 'frontDoorName' when calling frontDoorsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling frontDoorsCreateOrUpdate");
      }
      // verify the required parameter 'frontDoorParameters' is set
      if (frontDoorParameters === undefined || frontDoorParameters === null) {
        throw new Error("Missing the required parameter 'frontDoorParameters' when calling frontDoorsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'frontDoorName': frontDoorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FrontDoor;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the frontDoorsDelete operation.
     * @callback module:api/FrontDoorsApi~frontDoorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing Front Door with the specified parameters.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} frontDoorName Name of the Front Door which is globally unique.
     * @param {String} apiVersion Client API version.
     * @param {module:api/FrontDoorsApi~frontDoorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    frontDoorsDelete(subscriptionId, resourceGroupName, frontDoorName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling frontDoorsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling frontDoorsDelete");
      }
      // verify the required parameter 'frontDoorName' is set
      if (frontDoorName === undefined || frontDoorName === null) {
        throw new Error("Missing the required parameter 'frontDoorName' when calling frontDoorsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling frontDoorsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'frontDoorName': frontDoorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the frontDoorsGet operation.
     * @callback module:api/FrontDoorsApi~frontDoorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontDoor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Front Door with the specified Front Door name under the specified subscription and resource group.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} frontDoorName Name of the Front Door which is globally unique.
     * @param {String} apiVersion Client API version.
     * @param {module:api/FrontDoorsApi~frontDoorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontDoor}
     */
    frontDoorsGet(subscriptionId, resourceGroupName, frontDoorName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling frontDoorsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling frontDoorsGet");
      }
      // verify the required parameter 'frontDoorName' is set
      if (frontDoorName === undefined || frontDoorName === null) {
        throw new Error("Missing the required parameter 'frontDoorName' when calling frontDoorsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling frontDoorsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'frontDoorName': frontDoorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FrontDoor;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the frontDoorsList operation.
     * @callback module:api/FrontDoorsApi~frontDoorsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontDoorListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the Front Doors within an Azure subscription.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {module:api/FrontDoorsApi~frontDoorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontDoorListResult}
     */
    frontDoorsList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling frontDoorsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling frontDoorsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FrontDoorListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/frontDoors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the frontDoorsListByResourceGroup operation.
     * @callback module:api/FrontDoorsApi~frontDoorsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontDoorListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the Front Doors within a resource group under a subscription.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} apiVersion Client API version.
     * @param {module:api/FrontDoorsApi~frontDoorsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontDoorListResult}
     */
    frontDoorsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling frontDoorsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling frontDoorsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling frontDoorsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FrontDoorListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the frontDoorsValidateCustomDomain operation.
     * @callback module:api/FrontDoorsApi~frontDoorsValidateCustomDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateCustomDomainOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates the custom domain mapping to ensure it maps to the correct Front Door endpoint in DNS.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} frontDoorName Name of the Front Door which is globally unique.
     * @param {String} apiVersion Client API version.
     * @param {module:model/ValidateCustomDomainInput} customDomainProperties Custom domain to be validated.
     * @param {module:api/FrontDoorsApi~frontDoorsValidateCustomDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateCustomDomainOutput}
     */
    frontDoorsValidateCustomDomain(subscriptionId, resourceGroupName, frontDoorName, apiVersion, customDomainProperties, callback) {
      let postBody = customDomainProperties;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling frontDoorsValidateCustomDomain");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling frontDoorsValidateCustomDomain");
      }
      // verify the required parameter 'frontDoorName' is set
      if (frontDoorName === undefined || frontDoorName === null) {
        throw new Error("Missing the required parameter 'frontDoorName' when calling frontDoorsValidateCustomDomain");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling frontDoorsValidateCustomDomain");
      }
      // verify the required parameter 'customDomainProperties' is set
      if (customDomainProperties === undefined || customDomainProperties === null) {
        throw new Error("Missing the required parameter 'customDomainProperties' when calling frontDoorsValidateCustomDomain");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'frontDoorName': frontDoorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ValidateCustomDomainOutput;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/validateCustomDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the frontendEndpointsDisableHttps operation.
     * @callback module:api/FrontDoorsApi~frontendEndpointsDisableHttpsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables a frontendEndpoint for HTTPS traffic
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} frontDoorName Name of the Front Door which is globally unique.
     * @param {String} frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param {String} apiVersion Client API version.
     * @param {module:api/FrontDoorsApi~frontendEndpointsDisableHttpsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    frontendEndpointsDisableHttps(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling frontendEndpointsDisableHttps");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling frontendEndpointsDisableHttps");
      }
      // verify the required parameter 'frontDoorName' is set
      if (frontDoorName === undefined || frontDoorName === null) {
        throw new Error("Missing the required parameter 'frontDoorName' when calling frontendEndpointsDisableHttps");
      }
      // verify the required parameter 'frontendEndpointName' is set
      if (frontendEndpointName === undefined || frontendEndpointName === null) {
        throw new Error("Missing the required parameter 'frontendEndpointName' when calling frontendEndpointsDisableHttps");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling frontendEndpointsDisableHttps");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'frontDoorName': frontDoorName,
        'frontendEndpointName': frontendEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}/disableHttps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the frontendEndpointsEnableHttps operation.
     * @callback module:api/FrontDoorsApi~frontendEndpointsEnableHttpsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables a frontendEndpoint for HTTPS traffic
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} frontDoorName Name of the Front Door which is globally unique.
     * @param {String} frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param {String} apiVersion Client API version.
     * @param {module:model/CustomHttpsConfiguration} customHttpsConfiguration The configuration specifying how to enable HTTPS
     * @param {module:api/FrontDoorsApi~frontendEndpointsEnableHttpsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    frontendEndpointsEnableHttps(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, customHttpsConfiguration, callback) {
      let postBody = customHttpsConfiguration;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling frontendEndpointsEnableHttps");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling frontendEndpointsEnableHttps");
      }
      // verify the required parameter 'frontDoorName' is set
      if (frontDoorName === undefined || frontDoorName === null) {
        throw new Error("Missing the required parameter 'frontDoorName' when calling frontendEndpointsEnableHttps");
      }
      // verify the required parameter 'frontendEndpointName' is set
      if (frontendEndpointName === undefined || frontendEndpointName === null) {
        throw new Error("Missing the required parameter 'frontendEndpointName' when calling frontendEndpointsEnableHttps");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling frontendEndpointsEnableHttps");
      }
      // verify the required parameter 'customHttpsConfiguration' is set
      if (customHttpsConfiguration === undefined || customHttpsConfiguration === null) {
        throw new Error("Missing the required parameter 'customHttpsConfiguration' when calling frontendEndpointsEnableHttps");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'frontDoorName': frontDoorName,
        'frontendEndpointName': frontendEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}/enableHttps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the frontendEndpointsGet operation.
     * @callback module:api/FrontDoorsApi~frontendEndpointsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontendEndpoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Frontend endpoint with the specified name within the specified Front Door.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} frontDoorName Name of the Front Door which is globally unique.
     * @param {String} frontendEndpointName Name of the Frontend endpoint which is unique within the Front Door.
     * @param {String} apiVersion Client API version.
     * @param {module:api/FrontDoorsApi~frontendEndpointsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontendEndpoint}
     */
    frontendEndpointsGet(subscriptionId, resourceGroupName, frontDoorName, frontendEndpointName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling frontendEndpointsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling frontendEndpointsGet");
      }
      // verify the required parameter 'frontDoorName' is set
      if (frontDoorName === undefined || frontDoorName === null) {
        throw new Error("Missing the required parameter 'frontDoorName' when calling frontendEndpointsGet");
      }
      // verify the required parameter 'frontendEndpointName' is set
      if (frontendEndpointName === undefined || frontendEndpointName === null) {
        throw new Error("Missing the required parameter 'frontendEndpointName' when calling frontendEndpointsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling frontendEndpointsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'frontDoorName': frontDoorName,
        'frontendEndpointName': frontendEndpointName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FrontendEndpoint;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints/{frontendEndpointName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the frontendEndpointsListByFrontDoor operation.
     * @callback module:api/FrontDoorsApi~frontendEndpointsListByFrontDoorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FrontendEndpointsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the frontend endpoints within a Front Door.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the Resource group within the Azure subscription.
     * @param {String} frontDoorName Name of the Front Door which is globally unique.
     * @param {String} apiVersion Client API version.
     * @param {module:api/FrontDoorsApi~frontendEndpointsListByFrontDoorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FrontendEndpointsListResult}
     */
    frontendEndpointsListByFrontDoor(subscriptionId, resourceGroupName, frontDoorName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling frontendEndpointsListByFrontDoor");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling frontendEndpointsListByFrontDoor");
      }
      // verify the required parameter 'frontDoorName' is set
      if (frontDoorName === undefined || frontDoorName === null) {
        throw new Error("Missing the required parameter 'frontDoorName' when calling frontendEndpointsListByFrontDoor");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling frontendEndpointsListByFrontDoor");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'frontDoorName': frontDoorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FrontendEndpointsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/frontDoors/{frontDoorName}/frontendEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
