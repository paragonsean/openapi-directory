/*
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResourceState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The JSON object that contains the properties required to create load balancing settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:31.612735-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoadBalancingSettingsProperties {
  public static final String SERIALIZED_NAME_RESOURCE_STATE = "resourceState";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATE)
  private ResourceState resourceState;

  public static final String SERIALIZED_NAME_ADDITIONAL_LATENCY_MILLISECONDS = "additionalLatencyMilliseconds";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_LATENCY_MILLISECONDS)
  private Integer additionalLatencyMilliseconds;

  public static final String SERIALIZED_NAME_SAMPLE_SIZE = "sampleSize";
  @SerializedName(SERIALIZED_NAME_SAMPLE_SIZE)
  private Integer sampleSize;

  public static final String SERIALIZED_NAME_SUCCESSFUL_SAMPLES_REQUIRED = "successfulSamplesRequired";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_SAMPLES_REQUIRED)
  private Integer successfulSamplesRequired;

  public LoadBalancingSettingsProperties() {
  }

  public LoadBalancingSettingsProperties resourceState(ResourceState resourceState) {
    this.resourceState = resourceState;
    return this;
  }

  /**
   * Get resourceState
   * @return resourceState
   */
  @javax.annotation.Nullable
  public ResourceState getResourceState() {
    return resourceState;
  }

  public void setResourceState(ResourceState resourceState) {
    this.resourceState = resourceState;
  }


  public LoadBalancingSettingsProperties additionalLatencyMilliseconds(Integer additionalLatencyMilliseconds) {
    this.additionalLatencyMilliseconds = additionalLatencyMilliseconds;
    return this;
  }

  /**
   * The additional latency in milliseconds for probes to fall into the lowest latency bucket
   * @return additionalLatencyMilliseconds
   */
  @javax.annotation.Nullable
  public Integer getAdditionalLatencyMilliseconds() {
    return additionalLatencyMilliseconds;
  }

  public void setAdditionalLatencyMilliseconds(Integer additionalLatencyMilliseconds) {
    this.additionalLatencyMilliseconds = additionalLatencyMilliseconds;
  }


  public LoadBalancingSettingsProperties sampleSize(Integer sampleSize) {
    this.sampleSize = sampleSize;
    return this;
  }

  /**
   * The number of samples to consider for load balancing decisions
   * @return sampleSize
   */
  @javax.annotation.Nullable
  public Integer getSampleSize() {
    return sampleSize;
  }

  public void setSampleSize(Integer sampleSize) {
    this.sampleSize = sampleSize;
  }


  public LoadBalancingSettingsProperties successfulSamplesRequired(Integer successfulSamplesRequired) {
    this.successfulSamplesRequired = successfulSamplesRequired;
    return this;
  }

  /**
   * The number of samples within the sample period that must succeed
   * @return successfulSamplesRequired
   */
  @javax.annotation.Nullable
  public Integer getSuccessfulSamplesRequired() {
    return successfulSamplesRequired;
  }

  public void setSuccessfulSamplesRequired(Integer successfulSamplesRequired) {
    this.successfulSamplesRequired = successfulSamplesRequired;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadBalancingSettingsProperties loadBalancingSettingsProperties = (LoadBalancingSettingsProperties) o;
    return Objects.equals(this.resourceState, loadBalancingSettingsProperties.resourceState) &&
        Objects.equals(this.additionalLatencyMilliseconds, loadBalancingSettingsProperties.additionalLatencyMilliseconds) &&
        Objects.equals(this.sampleSize, loadBalancingSettingsProperties.sampleSize) &&
        Objects.equals(this.successfulSamplesRequired, loadBalancingSettingsProperties.successfulSamplesRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceState, additionalLatencyMilliseconds, sampleSize, successfulSamplesRequired);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadBalancingSettingsProperties {\n");
    sb.append("    resourceState: ").append(toIndentedString(resourceState)).append("\n");
    sb.append("    additionalLatencyMilliseconds: ").append(toIndentedString(additionalLatencyMilliseconds)).append("\n");
    sb.append("    sampleSize: ").append(toIndentedString(sampleSize)).append("\n");
    sb.append("    successfulSamplesRequired: ").append(toIndentedString(successfulSamplesRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalLatencyMilliseconds");
    openapiFields.add("sampleSize");
    openapiFields.add("successfulSamplesRequired");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoadBalancingSettingsProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadBalancingSettingsProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadBalancingSettingsProperties is not found in the empty JSON string", LoadBalancingSettingsProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadBalancingSettingsProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadBalancingSettingsProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `resourceState`
      if (jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) {
        ResourceState.validateJsonElement(jsonObj.get("resourceState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadBalancingSettingsProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadBalancingSettingsProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadBalancingSettingsProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadBalancingSettingsProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadBalancingSettingsProperties>() {
           @Override
           public void write(JsonWriter out, LoadBalancingSettingsProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadBalancingSettingsProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoadBalancingSettingsProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoadBalancingSettingsProperties
   * @throws IOException if the JSON string is invalid with respect to LoadBalancingSettingsProperties
   */
  public static LoadBalancingSettingsProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadBalancingSettingsProperties.class);
  }

  /**
   * Convert an instance of LoadBalancingSettingsProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

