/*
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CustomHttpsConfiguration;
import org.openapitools.client.model.FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink;
import org.openapitools.client.model.ResourceState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The JSON object that contains the properties required to create a frontend endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:31.612735-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FrontendEndpointProperties {
  public static final String SERIALIZED_NAME_CUSTOM_HTTPS_CONFIGURATION = "customHttpsConfiguration";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HTTPS_CONFIGURATION)
  private CustomHttpsConfiguration customHttpsConfiguration;

  /**
   * Provisioning status of Custom Https of the frontendEndpoint.
   */
  @JsonAdapter(CustomHttpsProvisioningStateEnum.Adapter.class)
  public enum CustomHttpsProvisioningStateEnum {
    ENABLING("Enabling"),
    
    ENABLED("Enabled"),
    
    DISABLING("Disabling"),
    
    DISABLED("Disabled"),
    
    FAILED("Failed");

    private String value;

    CustomHttpsProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomHttpsProvisioningStateEnum fromValue(String value) {
      for (CustomHttpsProvisioningStateEnum b : CustomHttpsProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomHttpsProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomHttpsProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomHttpsProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomHttpsProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomHttpsProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOM_HTTPS_PROVISIONING_STATE = "customHttpsProvisioningState";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HTTPS_PROVISIONING_STATE)
  private CustomHttpsProvisioningStateEnum customHttpsProvisioningState;

  /**
   * Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
   */
  @JsonAdapter(CustomHttpsProvisioningSubstateEnum.Adapter.class)
  public enum CustomHttpsProvisioningSubstateEnum {
    SUBMITTING_DOMAIN_CONTROL_VALIDATION_REQUEST("SubmittingDomainControlValidationRequest"),
    
    PENDING_DOMAIN_CONTROL_VALIDATION_R_EQUEST_APPROVAL("PendingDomainControlValidationREquestApproval"),
    
    DOMAIN_CONTROL_VALIDATION_REQUEST_APPROVED("DomainControlValidationRequestApproved"),
    
    DOMAIN_CONTROL_VALIDATION_REQUEST_REJECTED("DomainControlValidationRequestRejected"),
    
    DOMAIN_CONTROL_VALIDATION_REQUEST_TIMED_OUT("DomainControlValidationRequestTimedOut"),
    
    ISSUING_CERTIFICATE("IssuingCertificate"),
    
    DEPLOYING_CERTIFICATE("DeployingCertificate"),
    
    CERTIFICATE_DEPLOYED("CertificateDeployed"),
    
    DELETING_CERTIFICATE("DeletingCertificate"),
    
    CERTIFICATE_DELETED("CertificateDeleted");

    private String value;

    CustomHttpsProvisioningSubstateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomHttpsProvisioningSubstateEnum fromValue(String value) {
      for (CustomHttpsProvisioningSubstateEnum b : CustomHttpsProvisioningSubstateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomHttpsProvisioningSubstateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomHttpsProvisioningSubstateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomHttpsProvisioningSubstateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomHttpsProvisioningSubstateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomHttpsProvisioningSubstateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOM_HTTPS_PROVISIONING_SUBSTATE = "customHttpsProvisioningSubstate";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HTTPS_PROVISIONING_SUBSTATE)
  private CustomHttpsProvisioningSubstateEnum customHttpsProvisioningSubstate;

  public static final String SERIALIZED_NAME_RESOURCE_STATE = "resourceState";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATE)
  private ResourceState resourceState;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  /**
   * Whether to allow session affinity on this host. Valid options are &#39;Enabled&#39; or &#39;Disabled&#39;
   */
  @JsonAdapter(SessionAffinityEnabledStateEnum.Adapter.class)
  public enum SessionAffinityEnabledStateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    SessionAffinityEnabledStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SessionAffinityEnabledStateEnum fromValue(String value) {
      for (SessionAffinityEnabledStateEnum b : SessionAffinityEnabledStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SessionAffinityEnabledStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SessionAffinityEnabledStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SessionAffinityEnabledStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SessionAffinityEnabledStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SessionAffinityEnabledStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SESSION_AFFINITY_ENABLED_STATE = "sessionAffinityEnabledState";
  @SerializedName(SERIALIZED_NAME_SESSION_AFFINITY_ENABLED_STATE)
  private SessionAffinityEnabledStateEnum sessionAffinityEnabledState;

  public static final String SERIALIZED_NAME_SESSION_AFFINITY_TTL_SECONDS = "sessionAffinityTtlSeconds";
  @SerializedName(SERIALIZED_NAME_SESSION_AFFINITY_TTL_SECONDS)
  private Integer sessionAffinityTtlSeconds;

  public static final String SERIALIZED_NAME_WEB_APPLICATION_FIREWALL_POLICY_LINK = "webApplicationFirewallPolicyLink";
  @SerializedName(SERIALIZED_NAME_WEB_APPLICATION_FIREWALL_POLICY_LINK)
  private FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink;

  public FrontendEndpointProperties() {
  }

  public FrontendEndpointProperties(
     CustomHttpsProvisioningStateEnum customHttpsProvisioningState, 
     CustomHttpsProvisioningSubstateEnum customHttpsProvisioningSubstate
  ) {
    this();
    this.customHttpsProvisioningState = customHttpsProvisioningState;
    this.customHttpsProvisioningSubstate = customHttpsProvisioningSubstate;
  }

  public FrontendEndpointProperties customHttpsConfiguration(CustomHttpsConfiguration customHttpsConfiguration) {
    this.customHttpsConfiguration = customHttpsConfiguration;
    return this;
  }

  /**
   * Get customHttpsConfiguration
   * @return customHttpsConfiguration
   */
  @javax.annotation.Nullable
  public CustomHttpsConfiguration getCustomHttpsConfiguration() {
    return customHttpsConfiguration;
  }

  public void setCustomHttpsConfiguration(CustomHttpsConfiguration customHttpsConfiguration) {
    this.customHttpsConfiguration = customHttpsConfiguration;
  }


  /**
   * Provisioning status of Custom Https of the frontendEndpoint.
   * @return customHttpsProvisioningState
   */
  @javax.annotation.Nullable
  public CustomHttpsProvisioningStateEnum getCustomHttpsProvisioningState() {
    return customHttpsProvisioningState;
  }



  /**
   * Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
   * @return customHttpsProvisioningSubstate
   */
  @javax.annotation.Nullable
  public CustomHttpsProvisioningSubstateEnum getCustomHttpsProvisioningSubstate() {
    return customHttpsProvisioningSubstate;
  }



  public FrontendEndpointProperties resourceState(ResourceState resourceState) {
    this.resourceState = resourceState;
    return this;
  }

  /**
   * Get resourceState
   * @return resourceState
   */
  @javax.annotation.Nullable
  public ResourceState getResourceState() {
    return resourceState;
  }

  public void setResourceState(ResourceState resourceState) {
    this.resourceState = resourceState;
  }


  public FrontendEndpointProperties hostName(String hostName) {
    this.hostName = hostName;
    return this;
  }

  /**
   * The host name of the frontendEndpoint. Must be a domain name.
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }

  public void setHostName(String hostName) {
    this.hostName = hostName;
  }


  public FrontendEndpointProperties sessionAffinityEnabledState(SessionAffinityEnabledStateEnum sessionAffinityEnabledState) {
    this.sessionAffinityEnabledState = sessionAffinityEnabledState;
    return this;
  }

  /**
   * Whether to allow session affinity on this host. Valid options are &#39;Enabled&#39; or &#39;Disabled&#39;
   * @return sessionAffinityEnabledState
   */
  @javax.annotation.Nullable
  public SessionAffinityEnabledStateEnum getSessionAffinityEnabledState() {
    return sessionAffinityEnabledState;
  }

  public void setSessionAffinityEnabledState(SessionAffinityEnabledStateEnum sessionAffinityEnabledState) {
    this.sessionAffinityEnabledState = sessionAffinityEnabledState;
  }


  public FrontendEndpointProperties sessionAffinityTtlSeconds(Integer sessionAffinityTtlSeconds) {
    this.sessionAffinityTtlSeconds = sessionAffinityTtlSeconds;
    return this;
  }

  /**
   * UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
   * @return sessionAffinityTtlSeconds
   */
  @javax.annotation.Nullable
  public Integer getSessionAffinityTtlSeconds() {
    return sessionAffinityTtlSeconds;
  }

  public void setSessionAffinityTtlSeconds(Integer sessionAffinityTtlSeconds) {
    this.sessionAffinityTtlSeconds = sessionAffinityTtlSeconds;
  }


  public FrontendEndpointProperties webApplicationFirewallPolicyLink(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink) {
    this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
    return this;
  }

  /**
   * Get webApplicationFirewallPolicyLink
   * @return webApplicationFirewallPolicyLink
   */
  @javax.annotation.Nullable
  public FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink getWebApplicationFirewallPolicyLink() {
    return webApplicationFirewallPolicyLink;
  }

  public void setWebApplicationFirewallPolicyLink(FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink webApplicationFirewallPolicyLink) {
    this.webApplicationFirewallPolicyLink = webApplicationFirewallPolicyLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FrontendEndpointProperties frontendEndpointProperties = (FrontendEndpointProperties) o;
    return Objects.equals(this.customHttpsConfiguration, frontendEndpointProperties.customHttpsConfiguration) &&
        Objects.equals(this.customHttpsProvisioningState, frontendEndpointProperties.customHttpsProvisioningState) &&
        Objects.equals(this.customHttpsProvisioningSubstate, frontendEndpointProperties.customHttpsProvisioningSubstate) &&
        Objects.equals(this.resourceState, frontendEndpointProperties.resourceState) &&
        Objects.equals(this.hostName, frontendEndpointProperties.hostName) &&
        Objects.equals(this.sessionAffinityEnabledState, frontendEndpointProperties.sessionAffinityEnabledState) &&
        Objects.equals(this.sessionAffinityTtlSeconds, frontendEndpointProperties.sessionAffinityTtlSeconds) &&
        Objects.equals(this.webApplicationFirewallPolicyLink, frontendEndpointProperties.webApplicationFirewallPolicyLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customHttpsConfiguration, customHttpsProvisioningState, customHttpsProvisioningSubstate, resourceState, hostName, sessionAffinityEnabledState, sessionAffinityTtlSeconds, webApplicationFirewallPolicyLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FrontendEndpointProperties {\n");
    sb.append("    customHttpsConfiguration: ").append(toIndentedString(customHttpsConfiguration)).append("\n");
    sb.append("    customHttpsProvisioningState: ").append(toIndentedString(customHttpsProvisioningState)).append("\n");
    sb.append("    customHttpsProvisioningSubstate: ").append(toIndentedString(customHttpsProvisioningSubstate)).append("\n");
    sb.append("    resourceState: ").append(toIndentedString(resourceState)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    sessionAffinityEnabledState: ").append(toIndentedString(sessionAffinityEnabledState)).append("\n");
    sb.append("    sessionAffinityTtlSeconds: ").append(toIndentedString(sessionAffinityTtlSeconds)).append("\n");
    sb.append("    webApplicationFirewallPolicyLink: ").append(toIndentedString(webApplicationFirewallPolicyLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostName");
    openapiFields.add("sessionAffinityEnabledState");
    openapiFields.add("sessionAffinityTtlSeconds");
    openapiFields.add("webApplicationFirewallPolicyLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FrontendEndpointProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FrontendEndpointProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FrontendEndpointProperties is not found in the empty JSON string", FrontendEndpointProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FrontendEndpointProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FrontendEndpointProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customHttpsConfiguration`
      if (jsonObj.get("customHttpsConfiguration") != null && !jsonObj.get("customHttpsConfiguration").isJsonNull()) {
        CustomHttpsConfiguration.validateJsonElement(jsonObj.get("customHttpsConfiguration"));
      }
      if ((jsonObj.get("customHttpsProvisioningState") != null && !jsonObj.get("customHttpsProvisioningState").isJsonNull()) && !jsonObj.get("customHttpsProvisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customHttpsProvisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customHttpsProvisioningState").toString()));
      }
      // validate the optional field `customHttpsProvisioningState`
      if (jsonObj.get("customHttpsProvisioningState") != null && !jsonObj.get("customHttpsProvisioningState").isJsonNull()) {
        CustomHttpsProvisioningStateEnum.validateJsonElement(jsonObj.get("customHttpsProvisioningState"));
      }
      if ((jsonObj.get("customHttpsProvisioningSubstate") != null && !jsonObj.get("customHttpsProvisioningSubstate").isJsonNull()) && !jsonObj.get("customHttpsProvisioningSubstate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customHttpsProvisioningSubstate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customHttpsProvisioningSubstate").toString()));
      }
      // validate the optional field `customHttpsProvisioningSubstate`
      if (jsonObj.get("customHttpsProvisioningSubstate") != null && !jsonObj.get("customHttpsProvisioningSubstate").isJsonNull()) {
        CustomHttpsProvisioningSubstateEnum.validateJsonElement(jsonObj.get("customHttpsProvisioningSubstate"));
      }
      // validate the optional field `resourceState`
      if (jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) {
        ResourceState.validateJsonElement(jsonObj.get("resourceState"));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if ((jsonObj.get("sessionAffinityEnabledState") != null && !jsonObj.get("sessionAffinityEnabledState").isJsonNull()) && !jsonObj.get("sessionAffinityEnabledState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionAffinityEnabledState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionAffinityEnabledState").toString()));
      }
      // validate the optional field `sessionAffinityEnabledState`
      if (jsonObj.get("sessionAffinityEnabledState") != null && !jsonObj.get("sessionAffinityEnabledState").isJsonNull()) {
        SessionAffinityEnabledStateEnum.validateJsonElement(jsonObj.get("sessionAffinityEnabledState"));
      }
      // validate the optional field `webApplicationFirewallPolicyLink`
      if (jsonObj.get("webApplicationFirewallPolicyLink") != null && !jsonObj.get("webApplicationFirewallPolicyLink").isJsonNull()) {
        FrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink.validateJsonElement(jsonObj.get("webApplicationFirewallPolicyLink"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FrontendEndpointProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FrontendEndpointProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FrontendEndpointProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FrontendEndpointProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<FrontendEndpointProperties>() {
           @Override
           public void write(JsonWriter out, FrontendEndpointProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FrontendEndpointProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FrontendEndpointProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FrontendEndpointProperties
   * @throws IOException if the JSON string is invalid with respect to FrontendEndpointProperties
   */
  public static FrontendEndpointProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FrontendEndpointProperties.class);
  }

  /**
   * Convert an instance of FrontendEndpointProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

