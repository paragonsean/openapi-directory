/*
 * FrontDoorManagementClient
 * Use these APIs to manage Azure Front Door resources through the Azure Resource Manager. You must make sure that requests made to these resources are secure.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BackendPool;
import org.openapitools.client.model.BackendPoolsSettings;
import org.openapitools.client.model.FrontendEndpoint;
import org.openapitools.client.model.HealthProbeSettingsModel;
import org.openapitools.client.model.LoadBalancingSettingsModel;
import org.openapitools.client.model.ResourceState;
import org.openapitools.client.model.RoutingRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The JSON object that contains the properties required to create an endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:31.612735-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FrontDoorProperties {
  public static final String SERIALIZED_NAME_CNAME = "cname";
  @SerializedName(SERIALIZED_NAME_CNAME)
  private String cname;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_STATE = "resourceState";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATE)
  private ResourceState resourceState;

  public static final String SERIALIZED_NAME_BACKEND_POOLS = "backendPools";
  @SerializedName(SERIALIZED_NAME_BACKEND_POOLS)
  private List<BackendPool> backendPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKEND_POOLS_SETTINGS = "backendPoolsSettings";
  @SerializedName(SERIALIZED_NAME_BACKEND_POOLS_SETTINGS)
  private BackendPoolsSettings backendPoolsSettings;

  /**
   * Operational status of the Front Door load balancer. Permitted values are &#39;Enabled&#39; or &#39;Disabled&#39;
   */
  @JsonAdapter(EnabledStateEnum.Adapter.class)
  public enum EnabledStateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    EnabledStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnabledStateEnum fromValue(String value) {
      for (EnabledStateEnum b : EnabledStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnabledStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnabledStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnabledStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnabledStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnabledStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENABLED_STATE = "enabledState";
  @SerializedName(SERIALIZED_NAME_ENABLED_STATE)
  private EnabledStateEnum enabledState;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_FRONTEND_ENDPOINTS = "frontendEndpoints";
  @SerializedName(SERIALIZED_NAME_FRONTEND_ENDPOINTS)
  private List<FrontendEndpoint> frontendEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_HEALTH_PROBE_SETTINGS = "healthProbeSettings";
  @SerializedName(SERIALIZED_NAME_HEALTH_PROBE_SETTINGS)
  private List<HealthProbeSettingsModel> healthProbeSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_BALANCING_SETTINGS = "loadBalancingSettings";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCING_SETTINGS)
  private List<LoadBalancingSettingsModel> loadBalancingSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUTING_RULES = "routingRules";
  @SerializedName(SERIALIZED_NAME_ROUTING_RULES)
  private List<RoutingRule> routingRules = new ArrayList<>();

  public FrontDoorProperties() {
  }

  public FrontDoorProperties(
     String cname, 
     String provisioningState
  ) {
    this();
    this.cname = cname;
    this.provisioningState = provisioningState;
  }

  /**
   * The host that each frontendEndpoint must CNAME to.
   * @return cname
   */
  @javax.annotation.Nullable
  public String getCname() {
    return cname;
  }



  /**
   * Provisioning state of the Front Door.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public FrontDoorProperties resourceState(ResourceState resourceState) {
    this.resourceState = resourceState;
    return this;
  }

  /**
   * Get resourceState
   * @return resourceState
   */
  @javax.annotation.Nullable
  public ResourceState getResourceState() {
    return resourceState;
  }

  public void setResourceState(ResourceState resourceState) {
    this.resourceState = resourceState;
  }


  public FrontDoorProperties backendPools(List<BackendPool> backendPools) {
    this.backendPools = backendPools;
    return this;
  }

  public FrontDoorProperties addBackendPoolsItem(BackendPool backendPoolsItem) {
    if (this.backendPools == null) {
      this.backendPools = new ArrayList<>();
    }
    this.backendPools.add(backendPoolsItem);
    return this;
  }

  /**
   * Backend pools available to routing rules.
   * @return backendPools
   */
  @javax.annotation.Nullable
  public List<BackendPool> getBackendPools() {
    return backendPools;
  }

  public void setBackendPools(List<BackendPool> backendPools) {
    this.backendPools = backendPools;
  }


  public FrontDoorProperties backendPoolsSettings(BackendPoolsSettings backendPoolsSettings) {
    this.backendPoolsSettings = backendPoolsSettings;
    return this;
  }

  /**
   * Get backendPoolsSettings
   * @return backendPoolsSettings
   */
  @javax.annotation.Nullable
  public BackendPoolsSettings getBackendPoolsSettings() {
    return backendPoolsSettings;
  }

  public void setBackendPoolsSettings(BackendPoolsSettings backendPoolsSettings) {
    this.backendPoolsSettings = backendPoolsSettings;
  }


  public FrontDoorProperties enabledState(EnabledStateEnum enabledState) {
    this.enabledState = enabledState;
    return this;
  }

  /**
   * Operational status of the Front Door load balancer. Permitted values are &#39;Enabled&#39; or &#39;Disabled&#39;
   * @return enabledState
   */
  @javax.annotation.Nullable
  public EnabledStateEnum getEnabledState() {
    return enabledState;
  }

  public void setEnabledState(EnabledStateEnum enabledState) {
    this.enabledState = enabledState;
  }


  public FrontDoorProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * A friendly name for the frontDoor
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public FrontDoorProperties frontendEndpoints(List<FrontendEndpoint> frontendEndpoints) {
    this.frontendEndpoints = frontendEndpoints;
    return this;
  }

  public FrontDoorProperties addFrontendEndpointsItem(FrontendEndpoint frontendEndpointsItem) {
    if (this.frontendEndpoints == null) {
      this.frontendEndpoints = new ArrayList<>();
    }
    this.frontendEndpoints.add(frontendEndpointsItem);
    return this;
  }

  /**
   * Frontend endpoints available to routing rules.
   * @return frontendEndpoints
   */
  @javax.annotation.Nullable
  public List<FrontendEndpoint> getFrontendEndpoints() {
    return frontendEndpoints;
  }

  public void setFrontendEndpoints(List<FrontendEndpoint> frontendEndpoints) {
    this.frontendEndpoints = frontendEndpoints;
  }


  public FrontDoorProperties healthProbeSettings(List<HealthProbeSettingsModel> healthProbeSettings) {
    this.healthProbeSettings = healthProbeSettings;
    return this;
  }

  public FrontDoorProperties addHealthProbeSettingsItem(HealthProbeSettingsModel healthProbeSettingsItem) {
    if (this.healthProbeSettings == null) {
      this.healthProbeSettings = new ArrayList<>();
    }
    this.healthProbeSettings.add(healthProbeSettingsItem);
    return this;
  }

  /**
   * Health probe settings associated with this Front Door instance.
   * @return healthProbeSettings
   */
  @javax.annotation.Nullable
  public List<HealthProbeSettingsModel> getHealthProbeSettings() {
    return healthProbeSettings;
  }

  public void setHealthProbeSettings(List<HealthProbeSettingsModel> healthProbeSettings) {
    this.healthProbeSettings = healthProbeSettings;
  }


  public FrontDoorProperties loadBalancingSettings(List<LoadBalancingSettingsModel> loadBalancingSettings) {
    this.loadBalancingSettings = loadBalancingSettings;
    return this;
  }

  public FrontDoorProperties addLoadBalancingSettingsItem(LoadBalancingSettingsModel loadBalancingSettingsItem) {
    if (this.loadBalancingSettings == null) {
      this.loadBalancingSettings = new ArrayList<>();
    }
    this.loadBalancingSettings.add(loadBalancingSettingsItem);
    return this;
  }

  /**
   * Load balancing settings associated with this Front Door instance.
   * @return loadBalancingSettings
   */
  @javax.annotation.Nullable
  public List<LoadBalancingSettingsModel> getLoadBalancingSettings() {
    return loadBalancingSettings;
  }

  public void setLoadBalancingSettings(List<LoadBalancingSettingsModel> loadBalancingSettings) {
    this.loadBalancingSettings = loadBalancingSettings;
  }


  public FrontDoorProperties routingRules(List<RoutingRule> routingRules) {
    this.routingRules = routingRules;
    return this;
  }

  public FrontDoorProperties addRoutingRulesItem(RoutingRule routingRulesItem) {
    if (this.routingRules == null) {
      this.routingRules = new ArrayList<>();
    }
    this.routingRules.add(routingRulesItem);
    return this;
  }

  /**
   * Routing rules associated with this Front Door.
   * @return routingRules
   */
  @javax.annotation.Nullable
  public List<RoutingRule> getRoutingRules() {
    return routingRules;
  }

  public void setRoutingRules(List<RoutingRule> routingRules) {
    this.routingRules = routingRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FrontDoorProperties frontDoorProperties = (FrontDoorProperties) o;
    return Objects.equals(this.cname, frontDoorProperties.cname) &&
        Objects.equals(this.provisioningState, frontDoorProperties.provisioningState) &&
        Objects.equals(this.resourceState, frontDoorProperties.resourceState) &&
        Objects.equals(this.backendPools, frontDoorProperties.backendPools) &&
        Objects.equals(this.backendPoolsSettings, frontDoorProperties.backendPoolsSettings) &&
        Objects.equals(this.enabledState, frontDoorProperties.enabledState) &&
        Objects.equals(this.friendlyName, frontDoorProperties.friendlyName) &&
        Objects.equals(this.frontendEndpoints, frontDoorProperties.frontendEndpoints) &&
        Objects.equals(this.healthProbeSettings, frontDoorProperties.healthProbeSettings) &&
        Objects.equals(this.loadBalancingSettings, frontDoorProperties.loadBalancingSettings) &&
        Objects.equals(this.routingRules, frontDoorProperties.routingRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cname, provisioningState, resourceState, backendPools, backendPoolsSettings, enabledState, friendlyName, frontendEndpoints, healthProbeSettings, loadBalancingSettings, routingRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FrontDoorProperties {\n");
    sb.append("    cname: ").append(toIndentedString(cname)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceState: ").append(toIndentedString(resourceState)).append("\n");
    sb.append("    backendPools: ").append(toIndentedString(backendPools)).append("\n");
    sb.append("    backendPoolsSettings: ").append(toIndentedString(backendPoolsSettings)).append("\n");
    sb.append("    enabledState: ").append(toIndentedString(enabledState)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    frontendEndpoints: ").append(toIndentedString(frontendEndpoints)).append("\n");
    sb.append("    healthProbeSettings: ").append(toIndentedString(healthProbeSettings)).append("\n");
    sb.append("    loadBalancingSettings: ").append(toIndentedString(loadBalancingSettings)).append("\n");
    sb.append("    routingRules: ").append(toIndentedString(routingRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendPools");
    openapiFields.add("backendPoolsSettings");
    openapiFields.add("enabledState");
    openapiFields.add("friendlyName");
    openapiFields.add("frontendEndpoints");
    openapiFields.add("healthProbeSettings");
    openapiFields.add("loadBalancingSettings");
    openapiFields.add("routingRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FrontDoorProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FrontDoorProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FrontDoorProperties is not found in the empty JSON string", FrontDoorProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FrontDoorProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FrontDoorProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cname") != null && !jsonObj.get("cname").isJsonNull()) && !jsonObj.get("cname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cname").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `resourceState`
      if (jsonObj.get("resourceState") != null && !jsonObj.get("resourceState").isJsonNull()) {
        ResourceState.validateJsonElement(jsonObj.get("resourceState"));
      }
      if (jsonObj.get("backendPools") != null && !jsonObj.get("backendPools").isJsonNull()) {
        JsonArray jsonArraybackendPools = jsonObj.getAsJsonArray("backendPools");
        if (jsonArraybackendPools != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backendPools").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backendPools` to be an array in the JSON string but got `%s`", jsonObj.get("backendPools").toString()));
          }

          // validate the optional field `backendPools` (array)
          for (int i = 0; i < jsonArraybackendPools.size(); i++) {
            BackendPool.validateJsonElement(jsonArraybackendPools.get(i));
          };
        }
      }
      // validate the optional field `backendPoolsSettings`
      if (jsonObj.get("backendPoolsSettings") != null && !jsonObj.get("backendPoolsSettings").isJsonNull()) {
        BackendPoolsSettings.validateJsonElement(jsonObj.get("backendPoolsSettings"));
      }
      if ((jsonObj.get("enabledState") != null && !jsonObj.get("enabledState").isJsonNull()) && !jsonObj.get("enabledState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabledState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enabledState").toString()));
      }
      // validate the optional field `enabledState`
      if (jsonObj.get("enabledState") != null && !jsonObj.get("enabledState").isJsonNull()) {
        EnabledStateEnum.validateJsonElement(jsonObj.get("enabledState"));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if (jsonObj.get("frontendEndpoints") != null && !jsonObj.get("frontendEndpoints").isJsonNull()) {
        JsonArray jsonArrayfrontendEndpoints = jsonObj.getAsJsonArray("frontendEndpoints");
        if (jsonArrayfrontendEndpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("frontendEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `frontendEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("frontendEndpoints").toString()));
          }

          // validate the optional field `frontendEndpoints` (array)
          for (int i = 0; i < jsonArrayfrontendEndpoints.size(); i++) {
            FrontendEndpoint.validateJsonElement(jsonArrayfrontendEndpoints.get(i));
          };
        }
      }
      if (jsonObj.get("healthProbeSettings") != null && !jsonObj.get("healthProbeSettings").isJsonNull()) {
        JsonArray jsonArrayhealthProbeSettings = jsonObj.getAsJsonArray("healthProbeSettings");
        if (jsonArrayhealthProbeSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthProbeSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthProbeSettings` to be an array in the JSON string but got `%s`", jsonObj.get("healthProbeSettings").toString()));
          }

          // validate the optional field `healthProbeSettings` (array)
          for (int i = 0; i < jsonArrayhealthProbeSettings.size(); i++) {
            HealthProbeSettingsModel.validateJsonElement(jsonArrayhealthProbeSettings.get(i));
          };
        }
      }
      if (jsonObj.get("loadBalancingSettings") != null && !jsonObj.get("loadBalancingSettings").isJsonNull()) {
        JsonArray jsonArrayloadBalancingSettings = jsonObj.getAsJsonArray("loadBalancingSettings");
        if (jsonArrayloadBalancingSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loadBalancingSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loadBalancingSettings` to be an array in the JSON string but got `%s`", jsonObj.get("loadBalancingSettings").toString()));
          }

          // validate the optional field `loadBalancingSettings` (array)
          for (int i = 0; i < jsonArrayloadBalancingSettings.size(); i++) {
            LoadBalancingSettingsModel.validateJsonElement(jsonArrayloadBalancingSettings.get(i));
          };
        }
      }
      if (jsonObj.get("routingRules") != null && !jsonObj.get("routingRules").isJsonNull()) {
        JsonArray jsonArrayroutingRules = jsonObj.getAsJsonArray("routingRules");
        if (jsonArrayroutingRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("routingRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `routingRules` to be an array in the JSON string but got `%s`", jsonObj.get("routingRules").toString()));
          }

          // validate the optional field `routingRules` (array)
          for (int i = 0; i < jsonArrayroutingRules.size(); i++) {
            RoutingRule.validateJsonElement(jsonArrayroutingRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FrontDoorProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FrontDoorProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FrontDoorProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FrontDoorProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<FrontDoorProperties>() {
           @Override
           public void write(JsonWriter out, FrontDoorProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FrontDoorProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FrontDoorProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FrontDoorProperties
   * @throws IOException if the JSON string is invalid with respect to FrontDoorProperties
   */
  public static FrontDoorProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FrontDoorProperties.class);
  }

  /**
   * Convert an instance of FrontDoorProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

