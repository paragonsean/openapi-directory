# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IpPoolModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_prefix: str=None, end_ip_address: str=None, number_of_allocated_ip_addresses: int=None, number_of_ip_addresses: int=None, number_of_ip_addresses_in_transition: int=None, start_ip_address: str=None):
        """IpPoolModel - a model defined in OpenAPI

        :param address_prefix: The address_prefix of this IpPoolModel.
        :param end_ip_address: The end_ip_address of this IpPoolModel.
        :param number_of_allocated_ip_addresses: The number_of_allocated_ip_addresses of this IpPoolModel.
        :param number_of_ip_addresses: The number_of_ip_addresses of this IpPoolModel.
        :param number_of_ip_addresses_in_transition: The number_of_ip_addresses_in_transition of this IpPoolModel.
        :param start_ip_address: The start_ip_address of this IpPoolModel.
        """
        self.openapi_types = {
            'address_prefix': str,
            'end_ip_address': str,
            'number_of_allocated_ip_addresses': int,
            'number_of_ip_addresses': int,
            'number_of_ip_addresses_in_transition': int,
            'start_ip_address': str
        }

        self.attribute_map = {
            'address_prefix': 'addressPrefix',
            'end_ip_address': 'endIpAddress',
            'number_of_allocated_ip_addresses': 'numberOfAllocatedIpAddresses',
            'number_of_ip_addresses': 'numberOfIpAddresses',
            'number_of_ip_addresses_in_transition': 'numberOfIpAddressesInTransition',
            'start_ip_address': 'startIpAddress'
        }

        self._address_prefix = address_prefix
        self._end_ip_address = end_ip_address
        self._number_of_allocated_ip_addresses = number_of_allocated_ip_addresses
        self._number_of_ip_addresses = number_of_ip_addresses
        self._number_of_ip_addresses_in_transition = number_of_ip_addresses_in_transition
        self._start_ip_address = start_ip_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpPoolModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpPoolModel of this IpPoolModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_prefix(self):
        """Gets the address_prefix of this IpPoolModel.

        The address prefix.

        :return: The address_prefix of this IpPoolModel.
        :rtype: str
        """
        return self._address_prefix

    @address_prefix.setter
    def address_prefix(self, address_prefix):
        """Sets the address_prefix of this IpPoolModel.

        The address prefix.

        :param address_prefix: The address_prefix of this IpPoolModel.
        :type address_prefix: str
        """

        self._address_prefix = address_prefix

    @property
    def end_ip_address(self):
        """Gets the end_ip_address of this IpPoolModel.

        The ending IP address.

        :return: The end_ip_address of this IpPoolModel.
        :rtype: str
        """
        return self._end_ip_address

    @end_ip_address.setter
    def end_ip_address(self, end_ip_address):
        """Sets the end_ip_address of this IpPoolModel.

        The ending IP address.

        :param end_ip_address: The end_ip_address of this IpPoolModel.
        :type end_ip_address: str
        """

        self._end_ip_address = end_ip_address

    @property
    def number_of_allocated_ip_addresses(self):
        """Gets the number_of_allocated_ip_addresses of this IpPoolModel.

        The number of currently allocated IP addresses.

        :return: The number_of_allocated_ip_addresses of this IpPoolModel.
        :rtype: int
        """
        return self._number_of_allocated_ip_addresses

    @number_of_allocated_ip_addresses.setter
    def number_of_allocated_ip_addresses(self, number_of_allocated_ip_addresses):
        """Sets the number_of_allocated_ip_addresses of this IpPoolModel.

        The number of currently allocated IP addresses.

        :param number_of_allocated_ip_addresses: The number_of_allocated_ip_addresses of this IpPoolModel.
        :type number_of_allocated_ip_addresses: int
        """

        self._number_of_allocated_ip_addresses = number_of_allocated_ip_addresses

    @property
    def number_of_ip_addresses(self):
        """Gets the number_of_ip_addresses of this IpPoolModel.

        The total number of IP addresses.

        :return: The number_of_ip_addresses of this IpPoolModel.
        :rtype: int
        """
        return self._number_of_ip_addresses

    @number_of_ip_addresses.setter
    def number_of_ip_addresses(self, number_of_ip_addresses):
        """Sets the number_of_ip_addresses of this IpPoolModel.

        The total number of IP addresses.

        :param number_of_ip_addresses: The number_of_ip_addresses of this IpPoolModel.
        :type number_of_ip_addresses: int
        """

        self._number_of_ip_addresses = number_of_ip_addresses

    @property
    def number_of_ip_addresses_in_transition(self):
        """Gets the number_of_ip_addresses_in_transition of this IpPoolModel.

        The current number of IP addresses in transition.

        :return: The number_of_ip_addresses_in_transition of this IpPoolModel.
        :rtype: int
        """
        return self._number_of_ip_addresses_in_transition

    @number_of_ip_addresses_in_transition.setter
    def number_of_ip_addresses_in_transition(self, number_of_ip_addresses_in_transition):
        """Sets the number_of_ip_addresses_in_transition of this IpPoolModel.

        The current number of IP addresses in transition.

        :param number_of_ip_addresses_in_transition: The number_of_ip_addresses_in_transition of this IpPoolModel.
        :type number_of_ip_addresses_in_transition: int
        """

        self._number_of_ip_addresses_in_transition = number_of_ip_addresses_in_transition

    @property
    def start_ip_address(self):
        """Gets the start_ip_address of this IpPoolModel.

        The starting IP address.

        :return: The start_ip_address of this IpPoolModel.
        :rtype: str
        """
        return self._start_ip_address

    @start_ip_address.setter
    def start_ip_address(self, start_ip_address):
        """Sets the start_ip_address of this IpPoolModel.

        The starting IP address.

        :param start_ip_address: The start_ip_address of this IpPoolModel.
        :type start_ip_address: str
        """

        self._start_ip_address = start_ip_address
