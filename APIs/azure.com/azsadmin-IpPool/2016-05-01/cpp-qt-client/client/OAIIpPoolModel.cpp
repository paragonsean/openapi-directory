/**
 * FabricAdminClient
 * IP pool operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpPoolModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpPoolModel::OAIIpPoolModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpPoolModel::OAIIpPoolModel() {
    this->initializeModel();
}

OAIIpPoolModel::~OAIIpPoolModel() {}

void OAIIpPoolModel::initializeModel() {

    m_address_prefix_isSet = false;
    m_address_prefix_isValid = false;

    m_end_ip_address_isSet = false;
    m_end_ip_address_isValid = false;

    m_number_of_allocated_ip_addresses_isSet = false;
    m_number_of_allocated_ip_addresses_isValid = false;

    m_number_of_ip_addresses_isSet = false;
    m_number_of_ip_addresses_isValid = false;

    m_number_of_ip_addresses_in_transition_isSet = false;
    m_number_of_ip_addresses_in_transition_isValid = false;

    m_start_ip_address_isSet = false;
    m_start_ip_address_isValid = false;
}

void OAIIpPoolModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpPoolModel::fromJsonObject(QJsonObject json) {

    m_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_address_prefix, json[QString("addressPrefix")]);
    m_address_prefix_isSet = !json[QString("addressPrefix")].isNull() && m_address_prefix_isValid;

    m_end_ip_address_isValid = ::OpenAPI::fromJsonValue(m_end_ip_address, json[QString("endIpAddress")]);
    m_end_ip_address_isSet = !json[QString("endIpAddress")].isNull() && m_end_ip_address_isValid;

    m_number_of_allocated_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_number_of_allocated_ip_addresses, json[QString("numberOfAllocatedIpAddresses")]);
    m_number_of_allocated_ip_addresses_isSet = !json[QString("numberOfAllocatedIpAddresses")].isNull() && m_number_of_allocated_ip_addresses_isValid;

    m_number_of_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_number_of_ip_addresses, json[QString("numberOfIpAddresses")]);
    m_number_of_ip_addresses_isSet = !json[QString("numberOfIpAddresses")].isNull() && m_number_of_ip_addresses_isValid;

    m_number_of_ip_addresses_in_transition_isValid = ::OpenAPI::fromJsonValue(m_number_of_ip_addresses_in_transition, json[QString("numberOfIpAddressesInTransition")]);
    m_number_of_ip_addresses_in_transition_isSet = !json[QString("numberOfIpAddressesInTransition")].isNull() && m_number_of_ip_addresses_in_transition_isValid;

    m_start_ip_address_isValid = ::OpenAPI::fromJsonValue(m_start_ip_address, json[QString("startIpAddress")]);
    m_start_ip_address_isSet = !json[QString("startIpAddress")].isNull() && m_start_ip_address_isValid;
}

QString OAIIpPoolModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpPoolModel::asJsonObject() const {
    QJsonObject obj;
    if (m_address_prefix_isSet) {
        obj.insert(QString("addressPrefix"), ::OpenAPI::toJsonValue(m_address_prefix));
    }
    if (m_end_ip_address_isSet) {
        obj.insert(QString("endIpAddress"), ::OpenAPI::toJsonValue(m_end_ip_address));
    }
    if (m_number_of_allocated_ip_addresses_isSet) {
        obj.insert(QString("numberOfAllocatedIpAddresses"), ::OpenAPI::toJsonValue(m_number_of_allocated_ip_addresses));
    }
    if (m_number_of_ip_addresses_isSet) {
        obj.insert(QString("numberOfIpAddresses"), ::OpenAPI::toJsonValue(m_number_of_ip_addresses));
    }
    if (m_number_of_ip_addresses_in_transition_isSet) {
        obj.insert(QString("numberOfIpAddressesInTransition"), ::OpenAPI::toJsonValue(m_number_of_ip_addresses_in_transition));
    }
    if (m_start_ip_address_isSet) {
        obj.insert(QString("startIpAddress"), ::OpenAPI::toJsonValue(m_start_ip_address));
    }
    return obj;
}

QString OAIIpPoolModel::getAddressPrefix() const {
    return m_address_prefix;
}
void OAIIpPoolModel::setAddressPrefix(const QString &address_prefix) {
    m_address_prefix = address_prefix;
    m_address_prefix_isSet = true;
}

bool OAIIpPoolModel::is_address_prefix_Set() const{
    return m_address_prefix_isSet;
}

bool OAIIpPoolModel::is_address_prefix_Valid() const{
    return m_address_prefix_isValid;
}

QString OAIIpPoolModel::getEndIpAddress() const {
    return m_end_ip_address;
}
void OAIIpPoolModel::setEndIpAddress(const QString &end_ip_address) {
    m_end_ip_address = end_ip_address;
    m_end_ip_address_isSet = true;
}

bool OAIIpPoolModel::is_end_ip_address_Set() const{
    return m_end_ip_address_isSet;
}

bool OAIIpPoolModel::is_end_ip_address_Valid() const{
    return m_end_ip_address_isValid;
}

qint64 OAIIpPoolModel::getNumberOfAllocatedIpAddresses() const {
    return m_number_of_allocated_ip_addresses;
}
void OAIIpPoolModel::setNumberOfAllocatedIpAddresses(const qint64 &number_of_allocated_ip_addresses) {
    m_number_of_allocated_ip_addresses = number_of_allocated_ip_addresses;
    m_number_of_allocated_ip_addresses_isSet = true;
}

bool OAIIpPoolModel::is_number_of_allocated_ip_addresses_Set() const{
    return m_number_of_allocated_ip_addresses_isSet;
}

bool OAIIpPoolModel::is_number_of_allocated_ip_addresses_Valid() const{
    return m_number_of_allocated_ip_addresses_isValid;
}

qint64 OAIIpPoolModel::getNumberOfIpAddresses() const {
    return m_number_of_ip_addresses;
}
void OAIIpPoolModel::setNumberOfIpAddresses(const qint64 &number_of_ip_addresses) {
    m_number_of_ip_addresses = number_of_ip_addresses;
    m_number_of_ip_addresses_isSet = true;
}

bool OAIIpPoolModel::is_number_of_ip_addresses_Set() const{
    return m_number_of_ip_addresses_isSet;
}

bool OAIIpPoolModel::is_number_of_ip_addresses_Valid() const{
    return m_number_of_ip_addresses_isValid;
}

qint64 OAIIpPoolModel::getNumberOfIpAddressesInTransition() const {
    return m_number_of_ip_addresses_in_transition;
}
void OAIIpPoolModel::setNumberOfIpAddressesInTransition(const qint64 &number_of_ip_addresses_in_transition) {
    m_number_of_ip_addresses_in_transition = number_of_ip_addresses_in_transition;
    m_number_of_ip_addresses_in_transition_isSet = true;
}

bool OAIIpPoolModel::is_number_of_ip_addresses_in_transition_Set() const{
    return m_number_of_ip_addresses_in_transition_isSet;
}

bool OAIIpPoolModel::is_number_of_ip_addresses_in_transition_Valid() const{
    return m_number_of_ip_addresses_in_transition_isValid;
}

QString OAIIpPoolModel::getStartIpAddress() const {
    return m_start_ip_address;
}
void OAIIpPoolModel::setStartIpAddress(const QString &start_ip_address) {
    m_start_ip_address = start_ip_address;
    m_start_ip_address_isSet = true;
}

bool OAIIpPoolModel::is_start_ip_address_Set() const{
    return m_start_ip_address_isSet;
}

bool OAIIpPoolModel::is_start_ip_address_Valid() const{
    return m_start_ip_address_isValid;
}

bool OAIIpPoolModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_allocated_ip_addresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_ip_addresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_ip_addresses_in_transition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpPoolModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
