/**
 * MonitorClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LocalizableString from './LocalizableString';
import MetricAvailability from './MetricAvailability';
import Unit from './Unit';

/**
 * The MetricDefinition model module.
 * @module model/MetricDefinition
 * @version 2016-03-01
 */
class MetricDefinition {
    /**
     * Constructs a new <code>MetricDefinition</code>.
     * Metric definition class specifies the metadata for a metric.
     * @alias module:model/MetricDefinition
     */
    constructor() { 
        
        MetricDefinition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricDefinition} obj Optional instance to populate.
     * @return {module:model/MetricDefinition} The populated <code>MetricDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricDefinition();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metricAvailabilities')) {
                obj['metricAvailabilities'] = ApiClient.convertToType(data['metricAvailabilities'], [MetricAvailability]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = LocalizableString.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('primaryAggregationType')) {
                obj['primaryAggregationType'] = ApiClient.convertToType(data['primaryAggregationType'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = Unit.constructFromObject(data['unit']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricDefinition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['metricAvailabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricAvailabilities'])) {
                throw new Error("Expected the field `metricAvailabilities` to be an array in the JSON data but got " + data['metricAvailabilities']);
            }
            // validate the optional field `metricAvailabilities` (array)
            for (const item of data['metricAvailabilities']) {
                MetricAvailability.validateJSON(item);
            };
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          LocalizableString.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['primaryAggregationType'] && !(typeof data['primaryAggregationType'] === 'string' || data['primaryAggregationType'] instanceof String)) {
            throw new Error("Expected the field `primaryAggregationType` to be a primitive type in the JSON string but got " + data['primaryAggregationType']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }

        return true;
    }


}



/**
 * the resource identifier of the metric definition.
 * @member {String} id
 */
MetricDefinition.prototype['id'] = undefined;

/**
 * the collection of what aggregation intervals are available to be queried.
 * @member {Array.<module:model/MetricAvailability>} metricAvailabilities
 */
MetricDefinition.prototype['metricAvailabilities'] = undefined;

/**
 * @member {module:model/LocalizableString} name
 */
MetricDefinition.prototype['name'] = undefined;

/**
 * the primary aggregation type value defining how to use the values for display.
 * @member {module:model/MetricDefinition.PrimaryAggregationTypeEnum} primaryAggregationType
 */
MetricDefinition.prototype['primaryAggregationType'] = undefined;

/**
 * the resource identifier of the resource that emitted the metric.
 * @member {String} resourceId
 */
MetricDefinition.prototype['resourceId'] = undefined;

/**
 * @member {module:model/Unit} unit
 */
MetricDefinition.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>primaryAggregationType</code> property.
 * @enum {String}
 * @readonly
 */
MetricDefinition['PrimaryAggregationTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Average"
     * @const
     */
    "Average": "Average",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "Minimum"
     * @const
     */
    "Minimum": "Minimum",

    /**
     * value: "Maximum"
     * @const
     */
    "Maximum": "Maximum",

    /**
     * value: "Total"
     * @const
     */
    "Total": "Total"
};



export default MetricDefinition;

