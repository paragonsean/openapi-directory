/*
 * MonitorClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LocalizableString;
import org.openapitools.client.model.MetricAvailability;
import org.openapitools.client.model.Unit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metric definition class specifies the metadata for a metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:10.996825-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricDefinition {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METRIC_AVAILABILITIES = "metricAvailabilities";
  @SerializedName(SERIALIZED_NAME_METRIC_AVAILABILITIES)
  private List<MetricAvailability> metricAvailabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private LocalizableString name;

  /**
   * the primary aggregation type value defining how to use the values for display.
   */
  @JsonAdapter(PrimaryAggregationTypeEnum.Adapter.class)
  public enum PrimaryAggregationTypeEnum {
    NONE("None"),
    
    AVERAGE("Average"),
    
    COUNT("Count"),
    
    MINIMUM("Minimum"),
    
    MAXIMUM("Maximum"),
    
    TOTAL("Total");

    private String value;

    PrimaryAggregationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PrimaryAggregationTypeEnum fromValue(String value) {
      for (PrimaryAggregationTypeEnum b : PrimaryAggregationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PrimaryAggregationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PrimaryAggregationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PrimaryAggregationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PrimaryAggregationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PrimaryAggregationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRIMARY_AGGREGATION_TYPE = "primaryAggregationType";
  @SerializedName(SERIALIZED_NAME_PRIMARY_AGGREGATION_TYPE)
  private PrimaryAggregationTypeEnum primaryAggregationType;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private Unit unit;

  public MetricDefinition() {
  }

  public MetricDefinition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * the resource identifier of the metric definition.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MetricDefinition metricAvailabilities(List<MetricAvailability> metricAvailabilities) {
    this.metricAvailabilities = metricAvailabilities;
    return this;
  }

  public MetricDefinition addMetricAvailabilitiesItem(MetricAvailability metricAvailabilitiesItem) {
    if (this.metricAvailabilities == null) {
      this.metricAvailabilities = new ArrayList<>();
    }
    this.metricAvailabilities.add(metricAvailabilitiesItem);
    return this;
  }

  /**
   * the collection of what aggregation intervals are available to be queried.
   * @return metricAvailabilities
   */
  @javax.annotation.Nullable
  public List<MetricAvailability> getMetricAvailabilities() {
    return metricAvailabilities;
  }

  public void setMetricAvailabilities(List<MetricAvailability> metricAvailabilities) {
    this.metricAvailabilities = metricAvailabilities;
  }


  public MetricDefinition name(LocalizableString name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public LocalizableString getName() {
    return name;
  }

  public void setName(LocalizableString name) {
    this.name = name;
  }


  public MetricDefinition primaryAggregationType(PrimaryAggregationTypeEnum primaryAggregationType) {
    this.primaryAggregationType = primaryAggregationType;
    return this;
  }

  /**
   * the primary aggregation type value defining how to use the values for display.
   * @return primaryAggregationType
   */
  @javax.annotation.Nullable
  public PrimaryAggregationTypeEnum getPrimaryAggregationType() {
    return primaryAggregationType;
  }

  public void setPrimaryAggregationType(PrimaryAggregationTypeEnum primaryAggregationType) {
    this.primaryAggregationType = primaryAggregationType;
  }


  public MetricDefinition resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * the resource identifier of the resource that emitted the metric.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public MetricDefinition unit(Unit unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public Unit getUnit() {
    return unit;
  }

  public void setUnit(Unit unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDefinition metricDefinition = (MetricDefinition) o;
    return Objects.equals(this.id, metricDefinition.id) &&
        Objects.equals(this.metricAvailabilities, metricDefinition.metricAvailabilities) &&
        Objects.equals(this.name, metricDefinition.name) &&
        Objects.equals(this.primaryAggregationType, metricDefinition.primaryAggregationType) &&
        Objects.equals(this.resourceId, metricDefinition.resourceId) &&
        Objects.equals(this.unit, metricDefinition.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, metricAvailabilities, name, primaryAggregationType, resourceId, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDefinition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metricAvailabilities: ").append(toIndentedString(metricAvailabilities)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryAggregationType: ").append(toIndentedString(primaryAggregationType)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("metricAvailabilities");
    openapiFields.add("name");
    openapiFields.add("primaryAggregationType");
    openapiFields.add("resourceId");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricDefinition is not found in the empty JSON string", MetricDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("metricAvailabilities") != null && !jsonObj.get("metricAvailabilities").isJsonNull()) {
        JsonArray jsonArraymetricAvailabilities = jsonObj.getAsJsonArray("metricAvailabilities");
        if (jsonArraymetricAvailabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricAvailabilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricAvailabilities` to be an array in the JSON string but got `%s`", jsonObj.get("metricAvailabilities").toString()));
          }

          // validate the optional field `metricAvailabilities` (array)
          for (int i = 0; i < jsonArraymetricAvailabilities.size(); i++) {
            MetricAvailability.validateJsonElement(jsonArraymetricAvailabilities.get(i));
          };
        }
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        LocalizableString.validateJsonElement(jsonObj.get("name"));
      }
      if ((jsonObj.get("primaryAggregationType") != null && !jsonObj.get("primaryAggregationType").isJsonNull()) && !jsonObj.get("primaryAggregationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAggregationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAggregationType").toString()));
      }
      // validate the optional field `primaryAggregationType`
      if (jsonObj.get("primaryAggregationType") != null && !jsonObj.get("primaryAggregationType").isJsonNull()) {
        PrimaryAggregationTypeEnum.validateJsonElement(jsonObj.get("primaryAggregationType"));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        Unit.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricDefinition>() {
           @Override
           public void write(JsonWriter out, MetricDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricDefinition
   * @throws IOException if the JSON string is invalid with respect to MetricDefinition
   */
  public static MetricDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricDefinition.class);
  }

  /**
   * Convert an instance of MetricDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

