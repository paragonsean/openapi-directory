# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateHistoryProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, immutability_period_since_creation_in_days: int=None, object_identifier: str=None, tenant_id: str=None, timestamp: datetime=None, update: str=None, upn: str=None):
        """UpdateHistoryProperty - a model defined in OpenAPI

        :param immutability_period_since_creation_in_days: The immutability_period_since_creation_in_days of this UpdateHistoryProperty.
        :param object_identifier: The object_identifier of this UpdateHistoryProperty.
        :param tenant_id: The tenant_id of this UpdateHistoryProperty.
        :param timestamp: The timestamp of this UpdateHistoryProperty.
        :param update: The update of this UpdateHistoryProperty.
        :param upn: The upn of this UpdateHistoryProperty.
        """
        self.openapi_types = {
            'immutability_period_since_creation_in_days': int,
            'object_identifier': str,
            'tenant_id': str,
            'timestamp': datetime,
            'update': str,
            'upn': str
        }

        self.attribute_map = {
            'immutability_period_since_creation_in_days': 'immutabilityPeriodSinceCreationInDays',
            'object_identifier': 'objectIdentifier',
            'tenant_id': 'tenantId',
            'timestamp': 'timestamp',
            'update': 'update',
            'upn': 'upn'
        }

        self._immutability_period_since_creation_in_days = immutability_period_since_creation_in_days
        self._object_identifier = object_identifier
        self._tenant_id = tenant_id
        self._timestamp = timestamp
        self._update = update
        self._upn = upn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateHistoryProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateHistoryProperty of this UpdateHistoryProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def immutability_period_since_creation_in_days(self):
        """Gets the immutability_period_since_creation_in_days of this UpdateHistoryProperty.

        The immutability period for the blobs in the container since the policy creation, in days.

        :return: The immutability_period_since_creation_in_days of this UpdateHistoryProperty.
        :rtype: int
        """
        return self._immutability_period_since_creation_in_days

    @immutability_period_since_creation_in_days.setter
    def immutability_period_since_creation_in_days(self, immutability_period_since_creation_in_days):
        """Sets the immutability_period_since_creation_in_days of this UpdateHistoryProperty.

        The immutability period for the blobs in the container since the policy creation, in days.

        :param immutability_period_since_creation_in_days: The immutability_period_since_creation_in_days of this UpdateHistoryProperty.
        :type immutability_period_since_creation_in_days: int
        """

        self._immutability_period_since_creation_in_days = immutability_period_since_creation_in_days

    @property
    def object_identifier(self):
        """Gets the object_identifier of this UpdateHistoryProperty.

        Returns the Object ID of the user who updated the ImmutabilityPolicy.

        :return: The object_identifier of this UpdateHistoryProperty.
        :rtype: str
        """
        return self._object_identifier

    @object_identifier.setter
    def object_identifier(self, object_identifier):
        """Sets the object_identifier of this UpdateHistoryProperty.

        Returns the Object ID of the user who updated the ImmutabilityPolicy.

        :param object_identifier: The object_identifier of this UpdateHistoryProperty.
        :type object_identifier: str
        """

        self._object_identifier = object_identifier

    @property
    def tenant_id(self):
        """Gets the tenant_id of this UpdateHistoryProperty.

        Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.

        :return: The tenant_id of this UpdateHistoryProperty.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this UpdateHistoryProperty.

        Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.

        :param tenant_id: The tenant_id of this UpdateHistoryProperty.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def timestamp(self):
        """Gets the timestamp of this UpdateHistoryProperty.

        Returns the date and time the ImmutabilityPolicy was updated.

        :return: The timestamp of this UpdateHistoryProperty.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this UpdateHistoryProperty.

        Returns the date and time the ImmutabilityPolicy was updated.

        :param timestamp: The timestamp of this UpdateHistoryProperty.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def update(self):
        """Gets the update of this UpdateHistoryProperty.

        The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.

        :return: The update of this UpdateHistoryProperty.
        :rtype: str
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this UpdateHistoryProperty.

        The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.

        :param update: The update of this UpdateHistoryProperty.
        :type update: str
        """
        allowed_values = ["put", "lock", "extend"]  # noqa: E501
        if update not in allowed_values:
            raise ValueError(
                "Invalid value for `update` ({0}), must be one of {1}"
                .format(update, allowed_values)
            )

        self._update = update

    @property
    def upn(self):
        """Gets the upn of this UpdateHistoryProperty.

        Returns the User Principal Name of the user who updated the ImmutabilityPolicy.

        :return: The upn of this UpdateHistoryProperty.
        :rtype: str
        """
        return self._upn

    @upn.setter
    def upn(self, upn):
        """Sets the upn of this UpdateHistoryProperty.

        Returns the User Principal Name of the user who updated the ImmutabilityPolicy.

        :param upn: The upn of this UpdateHistoryProperty.
        :type upn: str
        """

        self._upn = upn
