/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaseContainerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaseContainerRequest::OAILeaseContainerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaseContainerRequest::OAILeaseContainerRequest() {
    this->initializeModel();
}

OAILeaseContainerRequest::~OAILeaseContainerRequest() {}

void OAILeaseContainerRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_break_period_isSet = false;
    m_break_period_isValid = false;

    m_lease_duration_isSet = false;
    m_lease_duration_isValid = false;

    m_lease_id_isSet = false;
    m_lease_id_isValid = false;

    m_proposed_lease_id_isSet = false;
    m_proposed_lease_id_isValid = false;
}

void OAILeaseContainerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaseContainerRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_break_period_isValid = ::OpenAPI::fromJsonValue(m_break_period, json[QString("breakPeriod")]);
    m_break_period_isSet = !json[QString("breakPeriod")].isNull() && m_break_period_isValid;

    m_lease_duration_isValid = ::OpenAPI::fromJsonValue(m_lease_duration, json[QString("leaseDuration")]);
    m_lease_duration_isSet = !json[QString("leaseDuration")].isNull() && m_lease_duration_isValid;

    m_lease_id_isValid = ::OpenAPI::fromJsonValue(m_lease_id, json[QString("leaseId")]);
    m_lease_id_isSet = !json[QString("leaseId")].isNull() && m_lease_id_isValid;

    m_proposed_lease_id_isValid = ::OpenAPI::fromJsonValue(m_proposed_lease_id, json[QString("proposedLeaseId")]);
    m_proposed_lease_id_isSet = !json[QString("proposedLeaseId")].isNull() && m_proposed_lease_id_isValid;
}

QString OAILeaseContainerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaseContainerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_break_period_isSet) {
        obj.insert(QString("breakPeriod"), ::OpenAPI::toJsonValue(m_break_period));
    }
    if (m_lease_duration_isSet) {
        obj.insert(QString("leaseDuration"), ::OpenAPI::toJsonValue(m_lease_duration));
    }
    if (m_lease_id_isSet) {
        obj.insert(QString("leaseId"), ::OpenAPI::toJsonValue(m_lease_id));
    }
    if (m_proposed_lease_id_isSet) {
        obj.insert(QString("proposedLeaseId"), ::OpenAPI::toJsonValue(m_proposed_lease_id));
    }
    return obj;
}

QString OAILeaseContainerRequest::getAction() const {
    return m_action;
}
void OAILeaseContainerRequest::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAILeaseContainerRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAILeaseContainerRequest::is_action_Valid() const{
    return m_action_isValid;
}

qint32 OAILeaseContainerRequest::getBreakPeriod() const {
    return m_break_period;
}
void OAILeaseContainerRequest::setBreakPeriod(const qint32 &break_period) {
    m_break_period = break_period;
    m_break_period_isSet = true;
}

bool OAILeaseContainerRequest::is_break_period_Set() const{
    return m_break_period_isSet;
}

bool OAILeaseContainerRequest::is_break_period_Valid() const{
    return m_break_period_isValid;
}

qint32 OAILeaseContainerRequest::getLeaseDuration() const {
    return m_lease_duration;
}
void OAILeaseContainerRequest::setLeaseDuration(const qint32 &lease_duration) {
    m_lease_duration = lease_duration;
    m_lease_duration_isSet = true;
}

bool OAILeaseContainerRequest::is_lease_duration_Set() const{
    return m_lease_duration_isSet;
}

bool OAILeaseContainerRequest::is_lease_duration_Valid() const{
    return m_lease_duration_isValid;
}

QString OAILeaseContainerRequest::getLeaseId() const {
    return m_lease_id;
}
void OAILeaseContainerRequest::setLeaseId(const QString &lease_id) {
    m_lease_id = lease_id;
    m_lease_id_isSet = true;
}

bool OAILeaseContainerRequest::is_lease_id_Set() const{
    return m_lease_id_isSet;
}

bool OAILeaseContainerRequest::is_lease_id_Valid() const{
    return m_lease_id_isValid;
}

QString OAILeaseContainerRequest::getProposedLeaseId() const {
    return m_proposed_lease_id;
}
void OAILeaseContainerRequest::setProposedLeaseId(const QString &proposed_lease_id) {
    m_proposed_lease_id = proposed_lease_id;
    m_proposed_lease_id_isSet = true;
}

bool OAILeaseContainerRequest::is_proposed_lease_id_Set() const{
    return m_proposed_lease_id_isSet;
}

bool OAILeaseContainerRequest::is_proposed_lease_id_Valid() const{
    return m_proposed_lease_id_isValid;
}

bool OAILeaseContainerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_break_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposed_lease_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaseContainerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && true;
}

} // namespace OpenAPI
