/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILeaseContainerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILeaseContainerResponse::OAILeaseContainerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILeaseContainerResponse::OAILeaseContainerResponse() {
    this->initializeModel();
}

OAILeaseContainerResponse::~OAILeaseContainerResponse() {}

void OAILeaseContainerResponse::initializeModel() {

    m_lease_id_isSet = false;
    m_lease_id_isValid = false;

    m_lease_time_seconds_isSet = false;
    m_lease_time_seconds_isValid = false;
}

void OAILeaseContainerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILeaseContainerResponse::fromJsonObject(QJsonObject json) {

    m_lease_id_isValid = ::OpenAPI::fromJsonValue(m_lease_id, json[QString("leaseId")]);
    m_lease_id_isSet = !json[QString("leaseId")].isNull() && m_lease_id_isValid;

    m_lease_time_seconds_isValid = ::OpenAPI::fromJsonValue(m_lease_time_seconds, json[QString("leaseTimeSeconds")]);
    m_lease_time_seconds_isSet = !json[QString("leaseTimeSeconds")].isNull() && m_lease_time_seconds_isValid;
}

QString OAILeaseContainerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILeaseContainerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_lease_id_isSet) {
        obj.insert(QString("leaseId"), ::OpenAPI::toJsonValue(m_lease_id));
    }
    if (m_lease_time_seconds_isSet) {
        obj.insert(QString("leaseTimeSeconds"), ::OpenAPI::toJsonValue(m_lease_time_seconds));
    }
    return obj;
}

QString OAILeaseContainerResponse::getLeaseId() const {
    return m_lease_id;
}
void OAILeaseContainerResponse::setLeaseId(const QString &lease_id) {
    m_lease_id = lease_id;
    m_lease_id_isSet = true;
}

bool OAILeaseContainerResponse::is_lease_id_Set() const{
    return m_lease_id_isSet;
}

bool OAILeaseContainerResponse::is_lease_id_Valid() const{
    return m_lease_id_isValid;
}

QString OAILeaseContainerResponse::getLeaseTimeSeconds() const {
    return m_lease_time_seconds;
}
void OAILeaseContainerResponse::setLeaseTimeSeconds(const QString &lease_time_seconds) {
    m_lease_time_seconds = lease_time_seconds;
    m_lease_time_seconds_isSet = true;
}

bool OAILeaseContainerResponse::is_lease_time_seconds_Set() const{
    return m_lease_time_seconds_isSet;
}

bool OAILeaseContainerResponse::is_lease_time_seconds_Valid() const{
    return m_lease_time_seconds_isValid;
}

bool OAILeaseContainerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lease_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_time_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILeaseContainerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
