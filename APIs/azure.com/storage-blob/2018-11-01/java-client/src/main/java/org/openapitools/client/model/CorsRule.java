/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies a CORS rule for the Blob service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:51.287170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CorsRule {
  public static final String SERIALIZED_NAME_ALLOWED_HEADERS = "allowedHeaders";
  @SerializedName(SERIALIZED_NAME_ALLOWED_HEADERS)
  private List<String> allowedHeaders = new ArrayList<>();

  /**
   * Gets or Sets allowedMethods
   */
  @JsonAdapter(AllowedMethodsEnum.Adapter.class)
  public enum AllowedMethodsEnum {
    DELETE("DELETE"),
    
    GET("GET"),
    
    HEAD("HEAD"),
    
    MERGE("MERGE"),
    
    POST("POST"),
    
    OPTIONS("OPTIONS"),
    
    PUT("PUT");

    private String value;

    AllowedMethodsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedMethodsEnum fromValue(String value) {
      for (AllowedMethodsEnum b : AllowedMethodsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedMethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedMethodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedMethodsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedMethodsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowedMethodsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_METHODS = "allowedMethods";
  @SerializedName(SERIALIZED_NAME_ALLOWED_METHODS)
  private List<AllowedMethodsEnum> allowedMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_ORIGINS = "allowedOrigins";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ORIGINS)
  private List<String> allowedOrigins = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPOSED_HEADERS = "exposedHeaders";
  @SerializedName(SERIALIZED_NAME_EXPOSED_HEADERS)
  private List<String> exposedHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_AGE_IN_SECONDS = "maxAgeInSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_AGE_IN_SECONDS)
  private Integer maxAgeInSeconds;

  public CorsRule() {
  }

  public CorsRule allowedHeaders(List<String> allowedHeaders) {
    this.allowedHeaders = allowedHeaders;
    return this;
  }

  public CorsRule addAllowedHeadersItem(String allowedHeadersItem) {
    if (this.allowedHeaders == null) {
      this.allowedHeaders = new ArrayList<>();
    }
    this.allowedHeaders.add(allowedHeadersItem);
    return this;
  }

  /**
   * Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin request.
   * @return allowedHeaders
   */
  @javax.annotation.Nonnull
  public List<String> getAllowedHeaders() {
    return allowedHeaders;
  }

  public void setAllowedHeaders(List<String> allowedHeaders) {
    this.allowedHeaders = allowedHeaders;
  }


  public CorsRule allowedMethods(List<AllowedMethodsEnum> allowedMethods) {
    this.allowedMethods = allowedMethods;
    return this;
  }

  public CorsRule addAllowedMethodsItem(AllowedMethodsEnum allowedMethodsItem) {
    if (this.allowedMethods == null) {
      this.allowedMethods = new ArrayList<>();
    }
    this.allowedMethods.add(allowedMethodsItem);
    return this;
  }

  /**
   * Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the origin.
   * @return allowedMethods
   */
  @javax.annotation.Nonnull
  public List<AllowedMethodsEnum> getAllowedMethods() {
    return allowedMethods;
  }

  public void setAllowedMethods(List<AllowedMethodsEnum> allowedMethods) {
    this.allowedMethods = allowedMethods;
  }


  public CorsRule allowedOrigins(List<String> allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
    return this;
  }

  public CorsRule addAllowedOriginsItem(String allowedOriginsItem) {
    if (this.allowedOrigins == null) {
      this.allowedOrigins = new ArrayList<>();
    }
    this.allowedOrigins.add(allowedOriginsItem);
    return this;
  }

  /**
   * Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or \&quot;*\&quot; to allow all domains
   * @return allowedOrigins
   */
  @javax.annotation.Nonnull
  public List<String> getAllowedOrigins() {
    return allowedOrigins;
  }

  public void setAllowedOrigins(List<String> allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
  }


  public CorsRule exposedHeaders(List<String> exposedHeaders) {
    this.exposedHeaders = exposedHeaders;
    return this;
  }

  public CorsRule addExposedHeadersItem(String exposedHeadersItem) {
    if (this.exposedHeaders == null) {
      this.exposedHeaders = new ArrayList<>();
    }
    this.exposedHeaders.add(exposedHeadersItem);
    return this;
  }

  /**
   * Required if CorsRule element is present. A list of response headers to expose to CORS clients.
   * @return exposedHeaders
   */
  @javax.annotation.Nonnull
  public List<String> getExposedHeaders() {
    return exposedHeaders;
  }

  public void setExposedHeaders(List<String> exposedHeaders) {
    this.exposedHeaders = exposedHeaders;
  }


  public CorsRule maxAgeInSeconds(Integer maxAgeInSeconds) {
    this.maxAgeInSeconds = maxAgeInSeconds;
    return this;
  }

  /**
   * Required if CorsRule element is present. The number of seconds that the client/browser should cache a preflight response.
   * @return maxAgeInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getMaxAgeInSeconds() {
    return maxAgeInSeconds;
  }

  public void setMaxAgeInSeconds(Integer maxAgeInSeconds) {
    this.maxAgeInSeconds = maxAgeInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CorsRule corsRule = (CorsRule) o;
    return Objects.equals(this.allowedHeaders, corsRule.allowedHeaders) &&
        Objects.equals(this.allowedMethods, corsRule.allowedMethods) &&
        Objects.equals(this.allowedOrigins, corsRule.allowedOrigins) &&
        Objects.equals(this.exposedHeaders, corsRule.exposedHeaders) &&
        Objects.equals(this.maxAgeInSeconds, corsRule.maxAgeInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedHeaders, allowedMethods, allowedOrigins, exposedHeaders, maxAgeInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CorsRule {\n");
    sb.append("    allowedHeaders: ").append(toIndentedString(allowedHeaders)).append("\n");
    sb.append("    allowedMethods: ").append(toIndentedString(allowedMethods)).append("\n");
    sb.append("    allowedOrigins: ").append(toIndentedString(allowedOrigins)).append("\n");
    sb.append("    exposedHeaders: ").append(toIndentedString(exposedHeaders)).append("\n");
    sb.append("    maxAgeInSeconds: ").append(toIndentedString(maxAgeInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedHeaders");
    openapiFields.add("allowedMethods");
    openapiFields.add("allowedOrigins");
    openapiFields.add("exposedHeaders");
    openapiFields.add("maxAgeInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowedHeaders");
    openapiRequiredFields.add("allowedMethods");
    openapiRequiredFields.add("allowedOrigins");
    openapiRequiredFields.add("exposedHeaders");
    openapiRequiredFields.add("maxAgeInSeconds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CorsRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CorsRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CorsRule is not found in the empty JSON string", CorsRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CorsRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CorsRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CorsRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("allowedHeaders") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowedHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("allowedHeaders").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("allowedMethods") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowedMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedMethods` to be an array in the JSON string but got `%s`", jsonObj.get("allowedMethods").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("allowedOrigins") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowedOrigins").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedOrigins` to be an array in the JSON string but got `%s`", jsonObj.get("allowedOrigins").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("exposedHeaders") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("exposedHeaders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exposedHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("exposedHeaders").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CorsRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CorsRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CorsRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CorsRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CorsRule>() {
           @Override
           public void write(JsonWriter out, CorsRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CorsRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CorsRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CorsRule
   * @throws IOException if the JSON string is invalid with respect to CorsRule
   */
  public static CorsRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CorsRule.class);
  }

  /**
   * Convert an instance of CorsRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

