/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lease Container request schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:51.287170-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LeaseContainerRequest {
  /**
   * Specifies the lease action. Can be one of the available actions.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ACQUIRE("Acquire"),
    
    RENEW("Renew"),
    
    CHANGE("Change"),
    
    RELEASE("Release"),
    
    BREAK("Break");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_BREAK_PERIOD = "breakPeriod";
  @SerializedName(SERIALIZED_NAME_BREAK_PERIOD)
  private Integer breakPeriod;

  public static final String SERIALIZED_NAME_LEASE_DURATION = "leaseDuration";
  @SerializedName(SERIALIZED_NAME_LEASE_DURATION)
  private Integer leaseDuration;

  public static final String SERIALIZED_NAME_LEASE_ID = "leaseId";
  @SerializedName(SERIALIZED_NAME_LEASE_ID)
  private String leaseId;

  public static final String SERIALIZED_NAME_PROPOSED_LEASE_ID = "proposedLeaseId";
  @SerializedName(SERIALIZED_NAME_PROPOSED_LEASE_ID)
  private String proposedLeaseId;

  public LeaseContainerRequest() {
  }

  public LeaseContainerRequest action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Specifies the lease action. Can be one of the available actions.
   * @return action
   */
  @javax.annotation.Nonnull
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public LeaseContainerRequest breakPeriod(Integer breakPeriod) {
    this.breakPeriod = breakPeriod;
    return this;
  }

  /**
   * Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60.
   * @return breakPeriod
   */
  @javax.annotation.Nullable
  public Integer getBreakPeriod() {
    return breakPeriod;
  }

  public void setBreakPeriod(Integer breakPeriod) {
    this.breakPeriod = breakPeriod;
  }


  public LeaseContainerRequest leaseDuration(Integer leaseDuration) {
    this.leaseDuration = leaseDuration;
    return this;
  }

  /**
   * Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires.
   * @return leaseDuration
   */
  @javax.annotation.Nullable
  public Integer getLeaseDuration() {
    return leaseDuration;
  }

  public void setLeaseDuration(Integer leaseDuration) {
    this.leaseDuration = leaseDuration;
  }


  public LeaseContainerRequest leaseId(String leaseId) {
    this.leaseId = leaseId;
    return this;
  }

  /**
   * Identifies the lease. Can be specified in any valid GUID string format.
   * @return leaseId
   */
  @javax.annotation.Nullable
  public String getLeaseId() {
    return leaseId;
  }

  public void setLeaseId(String leaseId) {
    this.leaseId = leaseId;
  }


  public LeaseContainerRequest proposedLeaseId(String proposedLeaseId) {
    this.proposedLeaseId = proposedLeaseId;
    return this;
  }

  /**
   * Optional for acquire, required for change. Proposed lease ID, in a GUID string format.
   * @return proposedLeaseId
   */
  @javax.annotation.Nullable
  public String getProposedLeaseId() {
    return proposedLeaseId;
  }

  public void setProposedLeaseId(String proposedLeaseId) {
    this.proposedLeaseId = proposedLeaseId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeaseContainerRequest leaseContainerRequest = (LeaseContainerRequest) o;
    return Objects.equals(this.action, leaseContainerRequest.action) &&
        Objects.equals(this.breakPeriod, leaseContainerRequest.breakPeriod) &&
        Objects.equals(this.leaseDuration, leaseContainerRequest.leaseDuration) &&
        Objects.equals(this.leaseId, leaseContainerRequest.leaseId) &&
        Objects.equals(this.proposedLeaseId, leaseContainerRequest.proposedLeaseId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, breakPeriod, leaseDuration, leaseId, proposedLeaseId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeaseContainerRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    breakPeriod: ").append(toIndentedString(breakPeriod)).append("\n");
    sb.append("    leaseDuration: ").append(toIndentedString(leaseDuration)).append("\n");
    sb.append("    leaseId: ").append(toIndentedString(leaseId)).append("\n");
    sb.append("    proposedLeaseId: ").append(toIndentedString(proposedLeaseId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("breakPeriod");
    openapiFields.add("leaseDuration");
    openapiFields.add("leaseId");
    openapiFields.add("proposedLeaseId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LeaseContainerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LeaseContainerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LeaseContainerRequest is not found in the empty JSON string", LeaseContainerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LeaseContainerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LeaseContainerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LeaseContainerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the required field `action`
      ActionEnum.validateJsonElement(jsonObj.get("action"));
      if ((jsonObj.get("leaseId") != null && !jsonObj.get("leaseId").isJsonNull()) && !jsonObj.get("leaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaseId").toString()));
      }
      if ((jsonObj.get("proposedLeaseId") != null && !jsonObj.get("proposedLeaseId").isJsonNull()) && !jsonObj.get("proposedLeaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proposedLeaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proposedLeaseId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LeaseContainerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LeaseContainerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LeaseContainerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LeaseContainerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LeaseContainerRequest>() {
           @Override
           public void write(JsonWriter out, LeaseContainerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LeaseContainerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LeaseContainerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LeaseContainerRequest
   * @throws IOException if the JSON string is invalid with respect to LeaseContainerRequest
   */
  public static LeaseContainerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LeaseContainerRequest.class);
  }

  /**
   * Convert an instance of LeaseContainerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

