/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBlobContainersApi_H
#define OAI_OAIBlobContainersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBlobContainer.h"
#include "OAIImmutabilityPolicy.h"
#include "OAILeaseContainerRequest.h"
#include "OAILeaseContainerResponse.h"
#include "OAILegalHold.h"
#include "OAIListContainerItems.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBlobContainersApi : public QObject {
    Q_OBJECT

public:
    OAIBlobContainersApi(const int timeOut = 0);
    ~OAIBlobContainersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  legal_hold OAILegalHold [required]
    */
    virtual void blobContainersClearLegalHold(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &api_version, const QString &subscription_id, const OAILegalHold &legal_hold);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  blob_container OAIBlobContainer [required]
    */
    virtual void blobContainersCreate(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &api_version, const QString &subscription_id, const OAIBlobContainer &blob_container);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  immutability_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  parameters OAIImmutabilityPolicy [optional]
    */
    virtual void blobContainersCreateOrUpdateImmutabilityPolicy(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &immutability_policy_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIImmutabilityPolicy> &parameters = ::OpenAPI::OptionalParam<OAIImmutabilityPolicy>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void blobContainersDelete(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  immutability_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  if_match QString [required]
    */
    virtual void blobContainersDeleteImmutabilityPolicy(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &immutability_policy_name, const QString &api_version, const QString &subscription_id, const QString &if_match);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  parameters OAIImmutabilityPolicy [optional]
    */
    virtual void blobContainersExtendImmutabilityPolicy(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &api_version, const QString &subscription_id, const QString &if_match, const ::OpenAPI::OptionalParam<OAIImmutabilityPolicy> &parameters = ::OpenAPI::OptionalParam<OAIImmutabilityPolicy>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void blobContainersGet(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  immutability_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void blobContainersGetImmutabilityPolicy(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &immutability_policy_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAILeaseContainerRequest [optional]
    */
    virtual void blobContainersLease(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAILeaseContainerRequest> &parameters = ::OpenAPI::OptionalParam<OAILeaseContainerRequest>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void blobContainersList(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  if_match QString [required]
    */
    virtual void blobContainersLockImmutabilityPolicy(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &api_version, const QString &subscription_id, const QString &if_match);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  legal_hold OAILegalHold [required]
    */
    virtual void blobContainersSetLegalHold(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &api_version, const QString &subscription_id, const OAILegalHold &legal_hold);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  blob_container OAIBlobContainer [required]
    */
    virtual void blobContainersUpdate(const QString &resource_group_name, const QString &account_name, const QString &container_name, const QString &api_version, const QString &subscription_id, const OAIBlobContainer &blob_container);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void blobContainersClearLegalHoldCallback(OAIHttpRequestWorker *worker);
    void blobContainersCreateCallback(OAIHttpRequestWorker *worker);
    void blobContainersCreateOrUpdateImmutabilityPolicyCallback(OAIHttpRequestWorker *worker);
    void blobContainersDeleteCallback(OAIHttpRequestWorker *worker);
    void blobContainersDeleteImmutabilityPolicyCallback(OAIHttpRequestWorker *worker);
    void blobContainersExtendImmutabilityPolicyCallback(OAIHttpRequestWorker *worker);
    void blobContainersGetCallback(OAIHttpRequestWorker *worker);
    void blobContainersGetImmutabilityPolicyCallback(OAIHttpRequestWorker *worker);
    void blobContainersLeaseCallback(OAIHttpRequestWorker *worker);
    void blobContainersListCallback(OAIHttpRequestWorker *worker);
    void blobContainersLockImmutabilityPolicyCallback(OAIHttpRequestWorker *worker);
    void blobContainersSetLegalHoldCallback(OAIHttpRequestWorker *worker);
    void blobContainersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void blobContainersClearLegalHoldSignal(OAILegalHold summary);
    void blobContainersCreateSignal(OAIBlobContainer summary);
    void blobContainersCreateOrUpdateImmutabilityPolicySignal(OAIImmutabilityPolicy summary);
    void blobContainersDeleteSignal();
    void blobContainersDeleteImmutabilityPolicySignal(OAIImmutabilityPolicy summary);
    void blobContainersExtendImmutabilityPolicySignal(OAIImmutabilityPolicy summary);
    void blobContainersGetSignal(OAIBlobContainer summary);
    void blobContainersGetImmutabilityPolicySignal(OAIImmutabilityPolicy summary);
    void blobContainersLeaseSignal(OAILeaseContainerResponse summary);
    void blobContainersListSignal(OAIListContainerItems summary);
    void blobContainersLockImmutabilityPolicySignal(OAIImmutabilityPolicy summary);
    void blobContainersSetLegalHoldSignal(OAILegalHold summary);
    void blobContainersUpdateSignal(OAIBlobContainer summary);


    void blobContainersClearLegalHoldSignalFull(OAIHttpRequestWorker *worker, OAILegalHold summary);
    void blobContainersCreateSignalFull(OAIHttpRequestWorker *worker, OAIBlobContainer summary);
    void blobContainersCreateOrUpdateImmutabilityPolicySignalFull(OAIHttpRequestWorker *worker, OAIImmutabilityPolicy summary);
    void blobContainersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void blobContainersDeleteImmutabilityPolicySignalFull(OAIHttpRequestWorker *worker, OAIImmutabilityPolicy summary);
    void blobContainersExtendImmutabilityPolicySignalFull(OAIHttpRequestWorker *worker, OAIImmutabilityPolicy summary);
    void blobContainersGetSignalFull(OAIHttpRequestWorker *worker, OAIBlobContainer summary);
    void blobContainersGetImmutabilityPolicySignalFull(OAIHttpRequestWorker *worker, OAIImmutabilityPolicy summary);
    void blobContainersLeaseSignalFull(OAIHttpRequestWorker *worker, OAILeaseContainerResponse summary);
    void blobContainersListSignalFull(OAIHttpRequestWorker *worker, OAIListContainerItems summary);
    void blobContainersLockImmutabilityPolicySignalFull(OAIHttpRequestWorker *worker, OAIImmutabilityPolicy summary);
    void blobContainersSetLegalHoldSignalFull(OAIHttpRequestWorker *worker, OAILegalHold summary);
    void blobContainersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBlobContainer summary);

    Q_DECL_DEPRECATED_X("Use blobContainersClearLegalHoldSignalError() instead")
    void blobContainersClearLegalHoldSignalE(OAILegalHold summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersClearLegalHoldSignalError(OAILegalHold summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersCreateSignalError() instead")
    void blobContainersCreateSignalE(OAIBlobContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersCreateSignalError(OAIBlobContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersCreateOrUpdateImmutabilityPolicySignalError() instead")
    void blobContainersCreateOrUpdateImmutabilityPolicySignalE(OAIImmutabilityPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersCreateOrUpdateImmutabilityPolicySignalError(OAIImmutabilityPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersDeleteSignalError() instead")
    void blobContainersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersDeleteImmutabilityPolicySignalError() instead")
    void blobContainersDeleteImmutabilityPolicySignalE(OAIImmutabilityPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersDeleteImmutabilityPolicySignalError(OAIImmutabilityPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersExtendImmutabilityPolicySignalError() instead")
    void blobContainersExtendImmutabilityPolicySignalE(OAIImmutabilityPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersExtendImmutabilityPolicySignalError(OAIImmutabilityPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersGetSignalError() instead")
    void blobContainersGetSignalE(OAIBlobContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersGetSignalError(OAIBlobContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersGetImmutabilityPolicySignalError() instead")
    void blobContainersGetImmutabilityPolicySignalE(OAIImmutabilityPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersGetImmutabilityPolicySignalError(OAIImmutabilityPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersLeaseSignalError() instead")
    void blobContainersLeaseSignalE(OAILeaseContainerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersLeaseSignalError(OAILeaseContainerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersListSignalError() instead")
    void blobContainersListSignalE(OAIListContainerItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersListSignalError(OAIListContainerItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersLockImmutabilityPolicySignalError() instead")
    void blobContainersLockImmutabilityPolicySignalE(OAIImmutabilityPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersLockImmutabilityPolicySignalError(OAIImmutabilityPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersSetLegalHoldSignalError() instead")
    void blobContainersSetLegalHoldSignalE(OAILegalHold summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersSetLegalHoldSignalError(OAILegalHold summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersUpdateSignalError() instead")
    void blobContainersUpdateSignalE(OAIBlobContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersUpdateSignalError(OAIBlobContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use blobContainersClearLegalHoldSignalErrorFull() instead")
    void blobContainersClearLegalHoldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersClearLegalHoldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersCreateSignalErrorFull() instead")
    void blobContainersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersCreateOrUpdateImmutabilityPolicySignalErrorFull() instead")
    void blobContainersCreateOrUpdateImmutabilityPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersCreateOrUpdateImmutabilityPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersDeleteSignalErrorFull() instead")
    void blobContainersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersDeleteImmutabilityPolicySignalErrorFull() instead")
    void blobContainersDeleteImmutabilityPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersDeleteImmutabilityPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersExtendImmutabilityPolicySignalErrorFull() instead")
    void blobContainersExtendImmutabilityPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersExtendImmutabilityPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersGetSignalErrorFull() instead")
    void blobContainersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersGetImmutabilityPolicySignalErrorFull() instead")
    void blobContainersGetImmutabilityPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersGetImmutabilityPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersLeaseSignalErrorFull() instead")
    void blobContainersLeaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersLeaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersListSignalErrorFull() instead")
    void blobContainersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersLockImmutabilityPolicySignalErrorFull() instead")
    void blobContainersLockImmutabilityPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersLockImmutabilityPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersSetLegalHoldSignalErrorFull() instead")
    void blobContainersSetLegalHoldSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersSetLegalHoldSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use blobContainersUpdateSignalErrorFull() instead")
    void blobContainersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blobContainersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
