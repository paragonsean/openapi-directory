/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagProperty::OAITagProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagProperty::OAITagProperty() {
    this->initializeModel();
}

OAITagProperty::~OAITagProperty() {}

void OAITagProperty::initializeModel() {

    m_object_identifier_isSet = false;
    m_object_identifier_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_upn_isSet = false;
    m_upn_isValid = false;
}

void OAITagProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagProperty::fromJsonObject(QJsonObject json) {

    m_object_identifier_isValid = ::OpenAPI::fromJsonValue(m_object_identifier, json[QString("objectIdentifier")]);
    m_object_identifier_isSet = !json[QString("objectIdentifier")].isNull() && m_object_identifier_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_upn_isValid = ::OpenAPI::fromJsonValue(m_upn, json[QString("upn")]);
    m_upn_isSet = !json[QString("upn")].isNull() && m_upn_isValid;
}

QString OAITagProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_object_identifier_isSet) {
        obj.insert(QString("objectIdentifier"), ::OpenAPI::toJsonValue(m_object_identifier));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_upn_isSet) {
        obj.insert(QString("upn"), ::OpenAPI::toJsonValue(m_upn));
    }
    return obj;
}

QString OAITagProperty::getObjectIdentifier() const {
    return m_object_identifier;
}
void OAITagProperty::setObjectIdentifier(const QString &object_identifier) {
    m_object_identifier = object_identifier;
    m_object_identifier_isSet = true;
}

bool OAITagProperty::is_object_identifier_Set() const{
    return m_object_identifier_isSet;
}

bool OAITagProperty::is_object_identifier_Valid() const{
    return m_object_identifier_isValid;
}

QString OAITagProperty::getTag() const {
    return m_tag;
}
void OAITagProperty::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAITagProperty::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAITagProperty::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAITagProperty::getTenantId() const {
    return m_tenant_id;
}
void OAITagProperty::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAITagProperty::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAITagProperty::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QDateTime OAITagProperty::getTimestamp() const {
    return m_timestamp;
}
void OAITagProperty::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAITagProperty::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAITagProperty::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAITagProperty::getUpn() const {
    return m_upn;
}
void OAITagProperty::setUpn(const QString &upn) {
    m_upn = upn;
    m_upn_isSet = true;
}

bool OAITagProperty::is_upn_Set() const{
    return m_upn_isSet;
}

bool OAITagProperty::is_upn_Valid() const{
    return m_upn_isValid;
}

bool OAITagProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
