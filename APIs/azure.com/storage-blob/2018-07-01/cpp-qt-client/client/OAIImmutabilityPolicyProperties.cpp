/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImmutabilityPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImmutabilityPolicyProperties::OAIImmutabilityPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImmutabilityPolicyProperties::OAIImmutabilityPolicyProperties() {
    this->initializeModel();
}

OAIImmutabilityPolicyProperties::~OAIImmutabilityPolicyProperties() {}

void OAIImmutabilityPolicyProperties::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_update_history_isSet = false;
    m_update_history_isValid = false;
}

void OAIImmutabilityPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImmutabilityPolicyProperties::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_update_history_isValid = ::OpenAPI::fromJsonValue(m_update_history, json[QString("updateHistory")]);
    m_update_history_isSet = !json[QString("updateHistory")].isNull() && m_update_history_isValid;
}

QString OAIImmutabilityPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImmutabilityPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_update_history.size() > 0) {
        obj.insert(QString("updateHistory"), ::OpenAPI::toJsonValue(m_update_history));
    }
    return obj;
}

QString OAIImmutabilityPolicyProperties::getEtag() const {
    return m_etag;
}
void OAIImmutabilityPolicyProperties::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIImmutabilityPolicyProperties::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIImmutabilityPolicyProperties::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIImmutabilityPolicyProperty OAIImmutabilityPolicyProperties::getProperties() const {
    return m_properties;
}
void OAIImmutabilityPolicyProperties::setProperties(const OAIImmutabilityPolicyProperty &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIImmutabilityPolicyProperties::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIImmutabilityPolicyProperties::is_properties_Valid() const{
    return m_properties_isValid;
}

QList<OAIUpdateHistoryProperty> OAIImmutabilityPolicyProperties::getUpdateHistory() const {
    return m_update_history;
}
void OAIImmutabilityPolicyProperties::setUpdateHistory(const QList<OAIUpdateHistoryProperty> &update_history) {
    m_update_history = update_history;
    m_update_history_isSet = true;
}

bool OAIImmutabilityPolicyProperties::is_update_history_Set() const{
    return m_update_history_isSet;
}

bool OAIImmutabilityPolicyProperties::is_update_history_Valid() const{
    return m_update_history_isValid;
}

bool OAIImmutabilityPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImmutabilityPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
