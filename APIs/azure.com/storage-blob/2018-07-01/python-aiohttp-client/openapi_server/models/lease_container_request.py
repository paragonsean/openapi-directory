# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LeaseContainerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, break_period: int=None, lease_duration: int=None, lease_id: str=None, proposed_lease_id: str=None):
        """LeaseContainerRequest - a model defined in OpenAPI

        :param action: The action of this LeaseContainerRequest.
        :param break_period: The break_period of this LeaseContainerRequest.
        :param lease_duration: The lease_duration of this LeaseContainerRequest.
        :param lease_id: The lease_id of this LeaseContainerRequest.
        :param proposed_lease_id: The proposed_lease_id of this LeaseContainerRequest.
        """
        self.openapi_types = {
            'action': str,
            'break_period': int,
            'lease_duration': int,
            'lease_id': str,
            'proposed_lease_id': str
        }

        self.attribute_map = {
            'action': 'action',
            'break_period': 'breakPeriod',
            'lease_duration': 'leaseDuration',
            'lease_id': 'leaseId',
            'proposed_lease_id': 'proposedLeaseId'
        }

        self._action = action
        self._break_period = break_period
        self._lease_duration = lease_duration
        self._lease_id = lease_id
        self._proposed_lease_id = proposed_lease_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LeaseContainerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LeaseContainerRequest of this LeaseContainerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this LeaseContainerRequest.

        Specifies the lease action. Can be one of the available actions.

        :return: The action of this LeaseContainerRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this LeaseContainerRequest.

        Specifies the lease action. Can be one of the available actions.

        :param action: The action of this LeaseContainerRequest.
        :type action: str
        """
        allowed_values = ["Acquire", "Renew", "Change", "Release", "Break"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def break_period(self):
        """Gets the break_period of this LeaseContainerRequest.

        Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60.

        :return: The break_period of this LeaseContainerRequest.
        :rtype: int
        """
        return self._break_period

    @break_period.setter
    def break_period(self, break_period):
        """Sets the break_period of this LeaseContainerRequest.

        Optional. For a break action, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60.

        :param break_period: The break_period of this LeaseContainerRequest.
        :type break_period: int
        """

        self._break_period = break_period

    @property
    def lease_duration(self):
        """Gets the lease_duration of this LeaseContainerRequest.

        Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires.

        :return: The lease_duration of this LeaseContainerRequest.
        :rtype: int
        """
        return self._lease_duration

    @lease_duration.setter
    def lease_duration(self, lease_duration):
        """Sets the lease_duration of this LeaseContainerRequest.

        Required for acquire. Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires.

        :param lease_duration: The lease_duration of this LeaseContainerRequest.
        :type lease_duration: int
        """

        self._lease_duration = lease_duration

    @property
    def lease_id(self):
        """Gets the lease_id of this LeaseContainerRequest.

        Identifies the lease. Can be specified in any valid GUID string format.

        :return: The lease_id of this LeaseContainerRequest.
        :rtype: str
        """
        return self._lease_id

    @lease_id.setter
    def lease_id(self, lease_id):
        """Sets the lease_id of this LeaseContainerRequest.

        Identifies the lease. Can be specified in any valid GUID string format.

        :param lease_id: The lease_id of this LeaseContainerRequest.
        :type lease_id: str
        """

        self._lease_id = lease_id

    @property
    def proposed_lease_id(self):
        """Gets the proposed_lease_id of this LeaseContainerRequest.

        Optional for acquire, required for change. Proposed lease ID, in a GUID string format.

        :return: The proposed_lease_id of this LeaseContainerRequest.
        :rtype: str
        """
        return self._proposed_lease_id

    @proposed_lease_id.setter
    def proposed_lease_id(self, proposed_lease_id):
        """Sets the proposed_lease_id of this LeaseContainerRequest.

        Optional for acquire, required for change. Proposed lease ID, in a GUID string format.

        :param proposed_lease_id: The proposed_lease_id of this LeaseContainerRequest.
        :type proposed_lease_id: str
        """

        self._proposed_lease_id = proposed_lease_id
