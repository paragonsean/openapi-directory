# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegalHold(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_legal_hold: bool=None, tags: List[str]=None):
        """LegalHold - a model defined in OpenAPI

        :param has_legal_hold: The has_legal_hold of this LegalHold.
        :param tags: The tags of this LegalHold.
        """
        self.openapi_types = {
            'has_legal_hold': bool,
            'tags': List[str]
        }

        self.attribute_map = {
            'has_legal_hold': 'hasLegalHold',
            'tags': 'tags'
        }

        self._has_legal_hold = has_legal_hold
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalHold':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalHold of this LegalHold.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_legal_hold(self):
        """Gets the has_legal_hold of this LegalHold.

        The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.

        :return: The has_legal_hold of this LegalHold.
        :rtype: bool
        """
        return self._has_legal_hold

    @has_legal_hold.setter
    def has_legal_hold(self, has_legal_hold):
        """Sets the has_legal_hold of this LegalHold.

        The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.

        :param has_legal_hold: The has_legal_hold of this LegalHold.
        :type has_legal_hold: bool
        """

        self._has_legal_hold = has_legal_hold

    @property
    def tags(self):
        """Gets the tags of this LegalHold.

        Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.

        :return: The tags of this LegalHold.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LegalHold.

        Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP.

        :param tags: The tags of this LegalHold.
        :type tags: List[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
