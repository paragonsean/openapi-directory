# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.immutability_policy_properties import ImmutabilityPolicyProperties
from openapi_server.models.legal_hold_properties import LegalHoldProperties
from openapi_server import util


class ContainerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_immutability_policy: bool=None, has_legal_hold: bool=None, immutability_policy: ImmutabilityPolicyProperties=None, last_modified_time: datetime=None, lease_duration: str=None, lease_state: str=None, lease_status: str=None, legal_hold: LegalHoldProperties=None, metadata: Dict[str, str]=None, public_access: str=None):
        """ContainerProperties - a model defined in OpenAPI

        :param has_immutability_policy: The has_immutability_policy of this ContainerProperties.
        :param has_legal_hold: The has_legal_hold of this ContainerProperties.
        :param immutability_policy: The immutability_policy of this ContainerProperties.
        :param last_modified_time: The last_modified_time of this ContainerProperties.
        :param lease_duration: The lease_duration of this ContainerProperties.
        :param lease_state: The lease_state of this ContainerProperties.
        :param lease_status: The lease_status of this ContainerProperties.
        :param legal_hold: The legal_hold of this ContainerProperties.
        :param metadata: The metadata of this ContainerProperties.
        :param public_access: The public_access of this ContainerProperties.
        """
        self.openapi_types = {
            'has_immutability_policy': bool,
            'has_legal_hold': bool,
            'immutability_policy': ImmutabilityPolicyProperties,
            'last_modified_time': datetime,
            'lease_duration': str,
            'lease_state': str,
            'lease_status': str,
            'legal_hold': LegalHoldProperties,
            'metadata': Dict[str, str],
            'public_access': str
        }

        self.attribute_map = {
            'has_immutability_policy': 'hasImmutabilityPolicy',
            'has_legal_hold': 'hasLegalHold',
            'immutability_policy': 'immutabilityPolicy',
            'last_modified_time': 'lastModifiedTime',
            'lease_duration': 'leaseDuration',
            'lease_state': 'leaseState',
            'lease_status': 'leaseStatus',
            'legal_hold': 'legalHold',
            'metadata': 'metadata',
            'public_access': 'publicAccess'
        }

        self._has_immutability_policy = has_immutability_policy
        self._has_legal_hold = has_legal_hold
        self._immutability_policy = immutability_policy
        self._last_modified_time = last_modified_time
        self._lease_duration = lease_duration
        self._lease_state = lease_state
        self._lease_status = lease_status
        self._legal_hold = legal_hold
        self._metadata = metadata
        self._public_access = public_access

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerProperties of this ContainerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_immutability_policy(self):
        """Gets the has_immutability_policy of this ContainerProperties.

        The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.

        :return: The has_immutability_policy of this ContainerProperties.
        :rtype: bool
        """
        return self._has_immutability_policy

    @has_immutability_policy.setter
    def has_immutability_policy(self, has_immutability_policy):
        """Sets the has_immutability_policy of this ContainerProperties.

        The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.

        :param has_immutability_policy: The has_immutability_policy of this ContainerProperties.
        :type has_immutability_policy: bool
        """

        self._has_immutability_policy = has_immutability_policy

    @property
    def has_legal_hold(self):
        """Gets the has_legal_hold of this ContainerProperties.

        The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.

        :return: The has_legal_hold of this ContainerProperties.
        :rtype: bool
        """
        return self._has_legal_hold

    @has_legal_hold.setter
    def has_legal_hold(self, has_legal_hold):
        """Sets the has_legal_hold of this ContainerProperties.

        The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account.

        :param has_legal_hold: The has_legal_hold of this ContainerProperties.
        :type has_legal_hold: bool
        """

        self._has_legal_hold = has_legal_hold

    @property
    def immutability_policy(self):
        """Gets the immutability_policy of this ContainerProperties.


        :return: The immutability_policy of this ContainerProperties.
        :rtype: ImmutabilityPolicyProperties
        """
        return self._immutability_policy

    @immutability_policy.setter
    def immutability_policy(self, immutability_policy):
        """Sets the immutability_policy of this ContainerProperties.


        :param immutability_policy: The immutability_policy of this ContainerProperties.
        :type immutability_policy: ImmutabilityPolicyProperties
        """

        self._immutability_policy = immutability_policy

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this ContainerProperties.

        Returns the date and time the container was last modified.

        :return: The last_modified_time of this ContainerProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this ContainerProperties.

        Returns the date and time the container was last modified.

        :param last_modified_time: The last_modified_time of this ContainerProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def lease_duration(self):
        """Gets the lease_duration of this ContainerProperties.

        Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.

        :return: The lease_duration of this ContainerProperties.
        :rtype: str
        """
        return self._lease_duration

    @lease_duration.setter
    def lease_duration(self, lease_duration):
        """Sets the lease_duration of this ContainerProperties.

        Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.

        :param lease_duration: The lease_duration of this ContainerProperties.
        :type lease_duration: str
        """
        allowed_values = ["Infinite", "Fixed"]  # noqa: E501
        if lease_duration not in allowed_values:
            raise ValueError(
                "Invalid value for `lease_duration` ({0}), must be one of {1}"
                .format(lease_duration, allowed_values)
            )

        self._lease_duration = lease_duration

    @property
    def lease_state(self):
        """Gets the lease_state of this ContainerProperties.

        Lease state of the container.

        :return: The lease_state of this ContainerProperties.
        :rtype: str
        """
        return self._lease_state

    @lease_state.setter
    def lease_state(self, lease_state):
        """Sets the lease_state of this ContainerProperties.

        Lease state of the container.

        :param lease_state: The lease_state of this ContainerProperties.
        :type lease_state: str
        """
        allowed_values = ["Available", "Leased", "Expired", "Breaking", "Broken"]  # noqa: E501
        if lease_state not in allowed_values:
            raise ValueError(
                "Invalid value for `lease_state` ({0}), must be one of {1}"
                .format(lease_state, allowed_values)
            )

        self._lease_state = lease_state

    @property
    def lease_status(self):
        """Gets the lease_status of this ContainerProperties.

        The lease status of the container.

        :return: The lease_status of this ContainerProperties.
        :rtype: str
        """
        return self._lease_status

    @lease_status.setter
    def lease_status(self, lease_status):
        """Sets the lease_status of this ContainerProperties.

        The lease status of the container.

        :param lease_status: The lease_status of this ContainerProperties.
        :type lease_status: str
        """
        allowed_values = ["Locked", "Unlocked"]  # noqa: E501
        if lease_status not in allowed_values:
            raise ValueError(
                "Invalid value for `lease_status` ({0}), must be one of {1}"
                .format(lease_status, allowed_values)
            )

        self._lease_status = lease_status

    @property
    def legal_hold(self):
        """Gets the legal_hold of this ContainerProperties.


        :return: The legal_hold of this ContainerProperties.
        :rtype: LegalHoldProperties
        """
        return self._legal_hold

    @legal_hold.setter
    def legal_hold(self, legal_hold):
        """Sets the legal_hold of this ContainerProperties.


        :param legal_hold: The legal_hold of this ContainerProperties.
        :type legal_hold: LegalHoldProperties
        """

        self._legal_hold = legal_hold

    @property
    def metadata(self):
        """Gets the metadata of this ContainerProperties.

        A name-value pair to associate with the container as metadata.

        :return: The metadata of this ContainerProperties.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ContainerProperties.

        A name-value pair to associate with the container as metadata.

        :param metadata: The metadata of this ContainerProperties.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def public_access(self):
        """Gets the public_access of this ContainerProperties.

        Specifies whether data in the container may be accessed publicly and the level of access.

        :return: The public_access of this ContainerProperties.
        :rtype: str
        """
        return self._public_access

    @public_access.setter
    def public_access(self, public_access):
        """Sets the public_access of this ContainerProperties.

        Specifies whether data in the container may be accessed publicly and the level of access.

        :param public_access: The public_access of this ContainerProperties.
        :type public_access: str
        """
        allowed_values = ["Container", "Blob", "None"]  # noqa: E501
        if public_access not in allowed_values:
            raise ValueError(
                "Invalid value for `public_access` ({0}), must be one of {1}"
                .format(public_access, allowed_values)
            )

        self._public_access = public_access
