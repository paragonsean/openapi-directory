# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImmutabilityPolicyProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, immutability_period_since_creation_in_days: int=None, state: str=None):
        """ImmutabilityPolicyProperty - a model defined in OpenAPI

        :param immutability_period_since_creation_in_days: The immutability_period_since_creation_in_days of this ImmutabilityPolicyProperty.
        :param state: The state of this ImmutabilityPolicyProperty.
        """
        self.openapi_types = {
            'immutability_period_since_creation_in_days': int,
            'state': str
        }

        self.attribute_map = {
            'immutability_period_since_creation_in_days': 'immutabilityPeriodSinceCreationInDays',
            'state': 'state'
        }

        self._immutability_period_since_creation_in_days = immutability_period_since_creation_in_days
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImmutabilityPolicyProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImmutabilityPolicyProperty of this ImmutabilityPolicyProperty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def immutability_period_since_creation_in_days(self):
        """Gets the immutability_period_since_creation_in_days of this ImmutabilityPolicyProperty.

        The immutability period for the blobs in the container since the policy creation, in days.

        :return: The immutability_period_since_creation_in_days of this ImmutabilityPolicyProperty.
        :rtype: int
        """
        return self._immutability_period_since_creation_in_days

    @immutability_period_since_creation_in_days.setter
    def immutability_period_since_creation_in_days(self, immutability_period_since_creation_in_days):
        """Sets the immutability_period_since_creation_in_days of this ImmutabilityPolicyProperty.

        The immutability period for the blobs in the container since the policy creation, in days.

        :param immutability_period_since_creation_in_days: The immutability_period_since_creation_in_days of this ImmutabilityPolicyProperty.
        :type immutability_period_since_creation_in_days: int
        """
        if immutability_period_since_creation_in_days is None:
            raise ValueError("Invalid value for `immutability_period_since_creation_in_days`, must not be `None`")

        self._immutability_period_since_creation_in_days = immutability_period_since_creation_in_days

    @property
    def state(self):
        """Gets the state of this ImmutabilityPolicyProperty.

        The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.

        :return: The state of this ImmutabilityPolicyProperty.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImmutabilityPolicyProperty.

        The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.

        :param state: The state of this ImmutabilityPolicyProperty.
        :type state: str
        """
        allowed_values = ["Locked", "Unlocked"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
