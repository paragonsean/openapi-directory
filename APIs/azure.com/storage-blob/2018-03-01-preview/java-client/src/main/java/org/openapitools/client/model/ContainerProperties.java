/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ImmutabilityPolicyProperties;
import org.openapitools.client.model.LegalHoldProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:59.970663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerProperties {
  public static final String SERIALIZED_NAME_HAS_IMMUTABILITY_POLICY = "hasImmutabilityPolicy";
  @SerializedName(SERIALIZED_NAME_HAS_IMMUTABILITY_POLICY)
  private Boolean hasImmutabilityPolicy;

  public static final String SERIALIZED_NAME_HAS_LEGAL_HOLD = "hasLegalHold";
  @SerializedName(SERIALIZED_NAME_HAS_LEGAL_HOLD)
  private Boolean hasLegalHold;

  public static final String SERIALIZED_NAME_IMMUTABILITY_POLICY = "immutabilityPolicy";
  @SerializedName(SERIALIZED_NAME_IMMUTABILITY_POLICY)
  private ImmutabilityPolicyProperties immutabilityPolicy;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  /**
   * Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
   */
  @JsonAdapter(LeaseDurationEnum.Adapter.class)
  public enum LeaseDurationEnum {
    INFINITE("Infinite"),
    
    FIXED("Fixed");

    private String value;

    LeaseDurationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LeaseDurationEnum fromValue(String value) {
      for (LeaseDurationEnum b : LeaseDurationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LeaseDurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LeaseDurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LeaseDurationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LeaseDurationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LeaseDurationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEASE_DURATION = "leaseDuration";
  @SerializedName(SERIALIZED_NAME_LEASE_DURATION)
  private LeaseDurationEnum leaseDuration;

  /**
   * Lease state of the container.
   */
  @JsonAdapter(LeaseStateEnum.Adapter.class)
  public enum LeaseStateEnum {
    AVAILABLE("Available"),
    
    LEASED("Leased"),
    
    EXPIRED("Expired"),
    
    BREAKING("Breaking"),
    
    BROKEN("Broken");

    private String value;

    LeaseStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LeaseStateEnum fromValue(String value) {
      for (LeaseStateEnum b : LeaseStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LeaseStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LeaseStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LeaseStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LeaseStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LeaseStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEASE_STATE = "leaseState";
  @SerializedName(SERIALIZED_NAME_LEASE_STATE)
  private LeaseStateEnum leaseState;

  /**
   * The lease status of the container.
   */
  @JsonAdapter(LeaseStatusEnum.Adapter.class)
  public enum LeaseStatusEnum {
    LOCKED("Locked"),
    
    UNLOCKED("Unlocked");

    private String value;

    LeaseStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LeaseStatusEnum fromValue(String value) {
      for (LeaseStatusEnum b : LeaseStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LeaseStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LeaseStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LeaseStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LeaseStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LeaseStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEASE_STATUS = "leaseStatus";
  @SerializedName(SERIALIZED_NAME_LEASE_STATUS)
  private LeaseStatusEnum leaseStatus;

  public static final String SERIALIZED_NAME_LEGAL_HOLD = "legalHold";
  @SerializedName(SERIALIZED_NAME_LEGAL_HOLD)
  private LegalHoldProperties legalHold;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  /**
   * Specifies whether data in the container may be accessed publicly and the level of access.
   */
  @JsonAdapter(PublicAccessEnum.Adapter.class)
  public enum PublicAccessEnum {
    CONTAINER("Container"),
    
    BLOB("Blob"),
    
    NONE("None");

    private String value;

    PublicAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublicAccessEnum fromValue(String value) {
      for (PublicAccessEnum b : PublicAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PublicAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublicAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublicAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PublicAccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PublicAccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUBLIC_ACCESS = "publicAccess";
  @SerializedName(SERIALIZED_NAME_PUBLIC_ACCESS)
  private PublicAccessEnum publicAccess;

  public ContainerProperties() {
  }

  public ContainerProperties(
     Boolean hasImmutabilityPolicy, 
     Boolean hasLegalHold, 
     OffsetDateTime lastModifiedTime, 
     LeaseDurationEnum leaseDuration, 
     LeaseStateEnum leaseState, 
     LeaseStatusEnum leaseStatus
  ) {
    this();
    this.hasImmutabilityPolicy = hasImmutabilityPolicy;
    this.hasLegalHold = hasLegalHold;
    this.lastModifiedTime = lastModifiedTime;
    this.leaseDuration = leaseDuration;
    this.leaseState = leaseState;
    this.leaseStatus = leaseStatus;
  }

  /**
   * The hasImmutabilityPolicy public property is set to true by SRP if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
   * @return hasImmutabilityPolicy
   */
  @javax.annotation.Nullable
  public Boolean getHasImmutabilityPolicy() {
    return hasImmutabilityPolicy;
  }



  /**
   * The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold&#x3D;true for a given account.
   * @return hasLegalHold
   */
  @javax.annotation.Nullable
  public Boolean getHasLegalHold() {
    return hasLegalHold;
  }



  public ContainerProperties immutabilityPolicy(ImmutabilityPolicyProperties immutabilityPolicy) {
    this.immutabilityPolicy = immutabilityPolicy;
    return this;
  }

  /**
   * Get immutabilityPolicy
   * @return immutabilityPolicy
   */
  @javax.annotation.Nullable
  public ImmutabilityPolicyProperties getImmutabilityPolicy() {
    return immutabilityPolicy;
  }

  public void setImmutabilityPolicy(ImmutabilityPolicyProperties immutabilityPolicy) {
    this.immutabilityPolicy = immutabilityPolicy;
  }


  /**
   * Returns the date and time the container was last modified.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }



  /**
   * Specifies whether the lease on a container is of infinite or fixed duration, only when the container is leased.
   * @return leaseDuration
   */
  @javax.annotation.Nullable
  public LeaseDurationEnum getLeaseDuration() {
    return leaseDuration;
  }



  /**
   * Lease state of the container.
   * @return leaseState
   */
  @javax.annotation.Nullable
  public LeaseStateEnum getLeaseState() {
    return leaseState;
  }



  /**
   * The lease status of the container.
   * @return leaseStatus
   */
  @javax.annotation.Nullable
  public LeaseStatusEnum getLeaseStatus() {
    return leaseStatus;
  }



  public ContainerProperties legalHold(LegalHoldProperties legalHold) {
    this.legalHold = legalHold;
    return this;
  }

  /**
   * Get legalHold
   * @return legalHold
   */
  @javax.annotation.Nullable
  public LegalHoldProperties getLegalHold() {
    return legalHold;
  }

  public void setLegalHold(LegalHoldProperties legalHold) {
    this.legalHold = legalHold;
  }


  public ContainerProperties metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ContainerProperties putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * A name-value pair to associate with the container as metadata.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public ContainerProperties publicAccess(PublicAccessEnum publicAccess) {
    this.publicAccess = publicAccess;
    return this;
  }

  /**
   * Specifies whether data in the container may be accessed publicly and the level of access.
   * @return publicAccess
   */
  @javax.annotation.Nullable
  public PublicAccessEnum getPublicAccess() {
    return publicAccess;
  }

  public void setPublicAccess(PublicAccessEnum publicAccess) {
    this.publicAccess = publicAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerProperties containerProperties = (ContainerProperties) o;
    return Objects.equals(this.hasImmutabilityPolicy, containerProperties.hasImmutabilityPolicy) &&
        Objects.equals(this.hasLegalHold, containerProperties.hasLegalHold) &&
        Objects.equals(this.immutabilityPolicy, containerProperties.immutabilityPolicy) &&
        Objects.equals(this.lastModifiedTime, containerProperties.lastModifiedTime) &&
        Objects.equals(this.leaseDuration, containerProperties.leaseDuration) &&
        Objects.equals(this.leaseState, containerProperties.leaseState) &&
        Objects.equals(this.leaseStatus, containerProperties.leaseStatus) &&
        Objects.equals(this.legalHold, containerProperties.legalHold) &&
        Objects.equals(this.metadata, containerProperties.metadata) &&
        Objects.equals(this.publicAccess, containerProperties.publicAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasImmutabilityPolicy, hasLegalHold, immutabilityPolicy, lastModifiedTime, leaseDuration, leaseState, leaseStatus, legalHold, metadata, publicAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerProperties {\n");
    sb.append("    hasImmutabilityPolicy: ").append(toIndentedString(hasImmutabilityPolicy)).append("\n");
    sb.append("    hasLegalHold: ").append(toIndentedString(hasLegalHold)).append("\n");
    sb.append("    immutabilityPolicy: ").append(toIndentedString(immutabilityPolicy)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    leaseDuration: ").append(toIndentedString(leaseDuration)).append("\n");
    sb.append("    leaseState: ").append(toIndentedString(leaseState)).append("\n");
    sb.append("    leaseStatus: ").append(toIndentedString(leaseStatus)).append("\n");
    sb.append("    legalHold: ").append(toIndentedString(legalHold)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    publicAccess: ").append(toIndentedString(publicAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hasImmutabilityPolicy");
    openapiFields.add("hasLegalHold");
    openapiFields.add("immutabilityPolicy");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("leaseDuration");
    openapiFields.add("leaseState");
    openapiFields.add("leaseStatus");
    openapiFields.add("legalHold");
    openapiFields.add("metadata");
    openapiFields.add("publicAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerProperties is not found in the empty JSON string", ContainerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `immutabilityPolicy`
      if (jsonObj.get("immutabilityPolicy") != null && !jsonObj.get("immutabilityPolicy").isJsonNull()) {
        ImmutabilityPolicyProperties.validateJsonElement(jsonObj.get("immutabilityPolicy"));
      }
      if ((jsonObj.get("leaseDuration") != null && !jsonObj.get("leaseDuration").isJsonNull()) && !jsonObj.get("leaseDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaseDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaseDuration").toString()));
      }
      // validate the optional field `leaseDuration`
      if (jsonObj.get("leaseDuration") != null && !jsonObj.get("leaseDuration").isJsonNull()) {
        LeaseDurationEnum.validateJsonElement(jsonObj.get("leaseDuration"));
      }
      if ((jsonObj.get("leaseState") != null && !jsonObj.get("leaseState").isJsonNull()) && !jsonObj.get("leaseState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaseState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaseState").toString()));
      }
      // validate the optional field `leaseState`
      if (jsonObj.get("leaseState") != null && !jsonObj.get("leaseState").isJsonNull()) {
        LeaseStateEnum.validateJsonElement(jsonObj.get("leaseState"));
      }
      if ((jsonObj.get("leaseStatus") != null && !jsonObj.get("leaseStatus").isJsonNull()) && !jsonObj.get("leaseStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leaseStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leaseStatus").toString()));
      }
      // validate the optional field `leaseStatus`
      if (jsonObj.get("leaseStatus") != null && !jsonObj.get("leaseStatus").isJsonNull()) {
        LeaseStatusEnum.validateJsonElement(jsonObj.get("leaseStatus"));
      }
      // validate the optional field `legalHold`
      if (jsonObj.get("legalHold") != null && !jsonObj.get("legalHold").isJsonNull()) {
        LegalHoldProperties.validateJsonElement(jsonObj.get("legalHold"));
      }
      if ((jsonObj.get("publicAccess") != null && !jsonObj.get("publicAccess").isJsonNull()) && !jsonObj.get("publicAccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicAccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicAccess").toString()));
      }
      // validate the optional field `publicAccess`
      if (jsonObj.get("publicAccess") != null && !jsonObj.get("publicAccess").isJsonNull()) {
        PublicAccessEnum.validateJsonElement(jsonObj.get("publicAccess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerProperties>() {
           @Override
           public void write(JsonWriter out, ContainerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerProperties
   * @throws IOException if the JSON string is invalid with respect to ContainerProperties
   */
  public static ContainerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerProperties.class);
  }

  /**
   * Convert an instance of ContainerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

