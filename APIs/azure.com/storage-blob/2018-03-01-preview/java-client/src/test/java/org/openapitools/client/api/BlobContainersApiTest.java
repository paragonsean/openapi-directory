/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BlobContainer;
import org.openapitools.client.model.ImmutabilityPolicy;
import org.openapitools.client.model.LeaseContainerRequest;
import org.openapitools.client.model.LeaseContainerResponse;
import org.openapitools.client.model.LegalHold;
import org.openapitools.client.model.ListContainerItems;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BlobContainersApi
 */
@Disabled
public class BlobContainersApiTest {

    private final BlobContainersApi api = new BlobContainersApi();

    /**
     * Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersClearLegalHoldTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String apiVersion = null;
        String subscriptionId = null;
        LegalHold legalHold = null;
        LegalHold response = api.blobContainersClearLegalHold(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold);
        // TODO: test validations
    }

    /**
     * Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersCreateTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String apiVersion = null;
        String subscriptionId = null;
        BlobContainer blobContainer = null;
        BlobContainer response = api.blobContainersCreate(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer);
        // TODO: test validations
    }

    /**
     * Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersCreateOrUpdateImmutabilityPolicyTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String immutabilityPolicyName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String ifMatch = null;
        ImmutabilityPolicy parameters = null;
        ImmutabilityPolicy response = api.blobContainersCreateOrUpdateImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, parameters);
        // TODO: test validations
    }

    /**
     * Deletes specified container under its account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.blobContainersDelete(resourceGroupName, accountName, containerName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersDeleteImmutabilityPolicyTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String immutabilityPolicyName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String ifMatch = null;
        ImmutabilityPolicy response = api.blobContainersDeleteImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch);
        // TODO: test validations
    }

    /**
     * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersExtendImmutabilityPolicyTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String ifMatch = null;
        ImmutabilityPolicy parameters = null;
        ImmutabilityPolicy response = api.blobContainersExtendImmutabilityPolicy(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch, parameters);
        // TODO: test validations
    }

    /**
     * Gets properties of a specified container. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersGetTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String apiVersion = null;
        String subscriptionId = null;
        BlobContainer response = api.blobContainersGet(resourceGroupName, accountName, containerName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the existing immutability policy along with the corresponding ETag in response headers and body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersGetImmutabilityPolicyTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String immutabilityPolicyName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String ifMatch = null;
        ImmutabilityPolicy response = api.blobContainersGetImmutabilityPolicy(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch);
        // TODO: test validations
    }

    /**
     * The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersLeaseTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String apiVersion = null;
        String subscriptionId = null;
        LeaseContainerRequest parameters = null;
        LeaseContainerResponse response = api.blobContainersLease(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersListTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ListContainerItems response = api.blobContainersList(resourceGroupName, accountName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersLockImmutabilityPolicyTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String ifMatch = null;
        ImmutabilityPolicy response = api.blobContainersLockImmutabilityPolicy(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch);
        // TODO: test validations
    }

    /**
     * Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersSetLegalHoldTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String apiVersion = null;
        String subscriptionId = null;
        LegalHold legalHold = null;
        LegalHold response = api.blobContainersSetLegalHold(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold);
        // TODO: test validations
    }

    /**
     * Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn&#39;t already exist. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void blobContainersUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String containerName = null;
        String apiVersion = null;
        String subscriptionId = null;
        BlobContainer blobContainer = null;
        BlobContainer response = api.blobContainersUpdate(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer);
        // TODO: test validations
    }

}
