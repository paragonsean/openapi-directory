/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateHistoryProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateHistoryProperty::OAIUpdateHistoryProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateHistoryProperty::OAIUpdateHistoryProperty() {
    this->initializeModel();
}

OAIUpdateHistoryProperty::~OAIUpdateHistoryProperty() {}

void OAIUpdateHistoryProperty::initializeModel() {

    m_immutability_period_since_creation_in_days_isSet = false;
    m_immutability_period_since_creation_in_days_isValid = false;

    m_object_identifier_isSet = false;
    m_object_identifier_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_update_isSet = false;
    m_update_isValid = false;

    m_upn_isSet = false;
    m_upn_isValid = false;
}

void OAIUpdateHistoryProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateHistoryProperty::fromJsonObject(QJsonObject json) {

    m_immutability_period_since_creation_in_days_isValid = ::OpenAPI::fromJsonValue(m_immutability_period_since_creation_in_days, json[QString("immutabilityPeriodSinceCreationInDays")]);
    m_immutability_period_since_creation_in_days_isSet = !json[QString("immutabilityPeriodSinceCreationInDays")].isNull() && m_immutability_period_since_creation_in_days_isValid;

    m_object_identifier_isValid = ::OpenAPI::fromJsonValue(m_object_identifier, json[QString("objectIdentifier")]);
    m_object_identifier_isSet = !json[QString("objectIdentifier")].isNull() && m_object_identifier_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_update_isValid = ::OpenAPI::fromJsonValue(m_update, json[QString("update")]);
    m_update_isSet = !json[QString("update")].isNull() && m_update_isValid;

    m_upn_isValid = ::OpenAPI::fromJsonValue(m_upn, json[QString("upn")]);
    m_upn_isSet = !json[QString("upn")].isNull() && m_upn_isValid;
}

QString OAIUpdateHistoryProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateHistoryProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_immutability_period_since_creation_in_days_isSet) {
        obj.insert(QString("immutabilityPeriodSinceCreationInDays"), ::OpenAPI::toJsonValue(m_immutability_period_since_creation_in_days));
    }
    if (m_object_identifier_isSet) {
        obj.insert(QString("objectIdentifier"), ::OpenAPI::toJsonValue(m_object_identifier));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_update_isSet) {
        obj.insert(QString("update"), ::OpenAPI::toJsonValue(m_update));
    }
    if (m_upn_isSet) {
        obj.insert(QString("upn"), ::OpenAPI::toJsonValue(m_upn));
    }
    return obj;
}

qint32 OAIUpdateHistoryProperty::getImmutabilityPeriodSinceCreationInDays() const {
    return m_immutability_period_since_creation_in_days;
}
void OAIUpdateHistoryProperty::setImmutabilityPeriodSinceCreationInDays(const qint32 &immutability_period_since_creation_in_days) {
    m_immutability_period_since_creation_in_days = immutability_period_since_creation_in_days;
    m_immutability_period_since_creation_in_days_isSet = true;
}

bool OAIUpdateHistoryProperty::is_immutability_period_since_creation_in_days_Set() const{
    return m_immutability_period_since_creation_in_days_isSet;
}

bool OAIUpdateHistoryProperty::is_immutability_period_since_creation_in_days_Valid() const{
    return m_immutability_period_since_creation_in_days_isValid;
}

QString OAIUpdateHistoryProperty::getObjectIdentifier() const {
    return m_object_identifier;
}
void OAIUpdateHistoryProperty::setObjectIdentifier(const QString &object_identifier) {
    m_object_identifier = object_identifier;
    m_object_identifier_isSet = true;
}

bool OAIUpdateHistoryProperty::is_object_identifier_Set() const{
    return m_object_identifier_isSet;
}

bool OAIUpdateHistoryProperty::is_object_identifier_Valid() const{
    return m_object_identifier_isValid;
}

QString OAIUpdateHistoryProperty::getTenantId() const {
    return m_tenant_id;
}
void OAIUpdateHistoryProperty::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIUpdateHistoryProperty::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIUpdateHistoryProperty::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QDateTime OAIUpdateHistoryProperty::getTimestamp() const {
    return m_timestamp;
}
void OAIUpdateHistoryProperty::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIUpdateHistoryProperty::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIUpdateHistoryProperty::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIUpdateHistoryProperty::getUpdate() const {
    return m_update;
}
void OAIUpdateHistoryProperty::setUpdate(const QString &update) {
    m_update = update;
    m_update_isSet = true;
}

bool OAIUpdateHistoryProperty::is_update_Set() const{
    return m_update_isSet;
}

bool OAIUpdateHistoryProperty::is_update_Valid() const{
    return m_update_isValid;
}

QString OAIUpdateHistoryProperty::getUpn() const {
    return m_upn;
}
void OAIUpdateHistoryProperty::setUpn(const QString &upn) {
    m_upn = upn;
    m_upn_isSet = true;
}

bool OAIUpdateHistoryProperty::is_upn_Set() const{
    return m_upn_isSet;
}

bool OAIUpdateHistoryProperty::is_upn_Valid() const{
    return m_upn_isValid;
}

bool OAIUpdateHistoryProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_immutability_period_since_creation_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateHistoryProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
