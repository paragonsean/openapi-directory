/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerProperties::OAIContainerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerProperties::OAIContainerProperties() {
    this->initializeModel();
}

OAIContainerProperties::~OAIContainerProperties() {}

void OAIContainerProperties::initializeModel() {

    m_has_immutability_policy_isSet = false;
    m_has_immutability_policy_isValid = false;

    m_has_legal_hold_isSet = false;
    m_has_legal_hold_isValid = false;

    m_immutability_policy_isSet = false;
    m_immutability_policy_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_lease_duration_isSet = false;
    m_lease_duration_isValid = false;

    m_lease_state_isSet = false;
    m_lease_state_isValid = false;

    m_lease_status_isSet = false;
    m_lease_status_isValid = false;

    m_legal_hold_isSet = false;
    m_legal_hold_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_public_access_isSet = false;
    m_public_access_isValid = false;
}

void OAIContainerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerProperties::fromJsonObject(QJsonObject json) {

    m_has_immutability_policy_isValid = ::OpenAPI::fromJsonValue(m_has_immutability_policy, json[QString("hasImmutabilityPolicy")]);
    m_has_immutability_policy_isSet = !json[QString("hasImmutabilityPolicy")].isNull() && m_has_immutability_policy_isValid;

    m_has_legal_hold_isValid = ::OpenAPI::fromJsonValue(m_has_legal_hold, json[QString("hasLegalHold")]);
    m_has_legal_hold_isSet = !json[QString("hasLegalHold")].isNull() && m_has_legal_hold_isValid;

    m_immutability_policy_isValid = ::OpenAPI::fromJsonValue(m_immutability_policy, json[QString("immutabilityPolicy")]);
    m_immutability_policy_isSet = !json[QString("immutabilityPolicy")].isNull() && m_immutability_policy_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_lease_duration_isValid = ::OpenAPI::fromJsonValue(m_lease_duration, json[QString("leaseDuration")]);
    m_lease_duration_isSet = !json[QString("leaseDuration")].isNull() && m_lease_duration_isValid;

    m_lease_state_isValid = ::OpenAPI::fromJsonValue(m_lease_state, json[QString("leaseState")]);
    m_lease_state_isSet = !json[QString("leaseState")].isNull() && m_lease_state_isValid;

    m_lease_status_isValid = ::OpenAPI::fromJsonValue(m_lease_status, json[QString("leaseStatus")]);
    m_lease_status_isSet = !json[QString("leaseStatus")].isNull() && m_lease_status_isValid;

    m_legal_hold_isValid = ::OpenAPI::fromJsonValue(m_legal_hold, json[QString("legalHold")]);
    m_legal_hold_isSet = !json[QString("legalHold")].isNull() && m_legal_hold_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_public_access_isValid = ::OpenAPI::fromJsonValue(m_public_access, json[QString("publicAccess")]);
    m_public_access_isSet = !json[QString("publicAccess")].isNull() && m_public_access_isValid;
}

QString OAIContainerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_has_immutability_policy_isSet) {
        obj.insert(QString("hasImmutabilityPolicy"), ::OpenAPI::toJsonValue(m_has_immutability_policy));
    }
    if (m_has_legal_hold_isSet) {
        obj.insert(QString("hasLegalHold"), ::OpenAPI::toJsonValue(m_has_legal_hold));
    }
    if (m_immutability_policy.isSet()) {
        obj.insert(QString("immutabilityPolicy"), ::OpenAPI::toJsonValue(m_immutability_policy));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_lease_duration_isSet) {
        obj.insert(QString("leaseDuration"), ::OpenAPI::toJsonValue(m_lease_duration));
    }
    if (m_lease_state_isSet) {
        obj.insert(QString("leaseState"), ::OpenAPI::toJsonValue(m_lease_state));
    }
    if (m_lease_status_isSet) {
        obj.insert(QString("leaseStatus"), ::OpenAPI::toJsonValue(m_lease_status));
    }
    if (m_legal_hold.isSet()) {
        obj.insert(QString("legalHold"), ::OpenAPI::toJsonValue(m_legal_hold));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_public_access_isSet) {
        obj.insert(QString("publicAccess"), ::OpenAPI::toJsonValue(m_public_access));
    }
    return obj;
}

bool OAIContainerProperties::isHasImmutabilityPolicy() const {
    return m_has_immutability_policy;
}
void OAIContainerProperties::setHasImmutabilityPolicy(const bool &has_immutability_policy) {
    m_has_immutability_policy = has_immutability_policy;
    m_has_immutability_policy_isSet = true;
}

bool OAIContainerProperties::is_has_immutability_policy_Set() const{
    return m_has_immutability_policy_isSet;
}

bool OAIContainerProperties::is_has_immutability_policy_Valid() const{
    return m_has_immutability_policy_isValid;
}

bool OAIContainerProperties::isHasLegalHold() const {
    return m_has_legal_hold;
}
void OAIContainerProperties::setHasLegalHold(const bool &has_legal_hold) {
    m_has_legal_hold = has_legal_hold;
    m_has_legal_hold_isSet = true;
}

bool OAIContainerProperties::is_has_legal_hold_Set() const{
    return m_has_legal_hold_isSet;
}

bool OAIContainerProperties::is_has_legal_hold_Valid() const{
    return m_has_legal_hold_isValid;
}

OAIImmutabilityPolicyProperties OAIContainerProperties::getImmutabilityPolicy() const {
    return m_immutability_policy;
}
void OAIContainerProperties::setImmutabilityPolicy(const OAIImmutabilityPolicyProperties &immutability_policy) {
    m_immutability_policy = immutability_policy;
    m_immutability_policy_isSet = true;
}

bool OAIContainerProperties::is_immutability_policy_Set() const{
    return m_immutability_policy_isSet;
}

bool OAIContainerProperties::is_immutability_policy_Valid() const{
    return m_immutability_policy_isValid;
}

QDateTime OAIContainerProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIContainerProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIContainerProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIContainerProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIContainerProperties::getLeaseDuration() const {
    return m_lease_duration;
}
void OAIContainerProperties::setLeaseDuration(const QString &lease_duration) {
    m_lease_duration = lease_duration;
    m_lease_duration_isSet = true;
}

bool OAIContainerProperties::is_lease_duration_Set() const{
    return m_lease_duration_isSet;
}

bool OAIContainerProperties::is_lease_duration_Valid() const{
    return m_lease_duration_isValid;
}

QString OAIContainerProperties::getLeaseState() const {
    return m_lease_state;
}
void OAIContainerProperties::setLeaseState(const QString &lease_state) {
    m_lease_state = lease_state;
    m_lease_state_isSet = true;
}

bool OAIContainerProperties::is_lease_state_Set() const{
    return m_lease_state_isSet;
}

bool OAIContainerProperties::is_lease_state_Valid() const{
    return m_lease_state_isValid;
}

QString OAIContainerProperties::getLeaseStatus() const {
    return m_lease_status;
}
void OAIContainerProperties::setLeaseStatus(const QString &lease_status) {
    m_lease_status = lease_status;
    m_lease_status_isSet = true;
}

bool OAIContainerProperties::is_lease_status_Set() const{
    return m_lease_status_isSet;
}

bool OAIContainerProperties::is_lease_status_Valid() const{
    return m_lease_status_isValid;
}

OAILegalHoldProperties OAIContainerProperties::getLegalHold() const {
    return m_legal_hold;
}
void OAIContainerProperties::setLegalHold(const OAILegalHoldProperties &legal_hold) {
    m_legal_hold = legal_hold;
    m_legal_hold_isSet = true;
}

bool OAIContainerProperties::is_legal_hold_Set() const{
    return m_legal_hold_isSet;
}

bool OAIContainerProperties::is_legal_hold_Valid() const{
    return m_legal_hold_isValid;
}

QMap<QString, QString> OAIContainerProperties::getMetadata() const {
    return m_metadata;
}
void OAIContainerProperties::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIContainerProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIContainerProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIContainerProperties::getPublicAccess() const {
    return m_public_access;
}
void OAIContainerProperties::setPublicAccess(const QString &public_access) {
    m_public_access = public_access;
    m_public_access_isSet = true;
}

bool OAIContainerProperties::is_public_access_Set() const{
    return m_public_access_isSet;
}

bool OAIContainerProperties::is_public_access_Valid() const{
    return m_public_access_isValid;
}

bool OAIContainerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_immutability_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_legal_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immutability_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lease_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_hold.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_access_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
