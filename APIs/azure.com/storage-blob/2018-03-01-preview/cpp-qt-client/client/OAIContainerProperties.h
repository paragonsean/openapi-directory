/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainerProperties.h
 *
 * The properties of a container.
 */

#ifndef OAIContainerProperties_H
#define OAIContainerProperties_H

#include <QJsonObject>

#include "OAIImmutabilityPolicyProperties.h"
#include "OAILegalHoldProperties.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImmutabilityPolicyProperties;
class OAILegalHoldProperties;

class OAIContainerProperties : public OAIObject {
public:
    OAIContainerProperties();
    OAIContainerProperties(QString json);
    ~OAIContainerProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isHasImmutabilityPolicy() const;
    void setHasImmutabilityPolicy(const bool &has_immutability_policy);
    bool is_has_immutability_policy_Set() const;
    bool is_has_immutability_policy_Valid() const;

    bool isHasLegalHold() const;
    void setHasLegalHold(const bool &has_legal_hold);
    bool is_has_legal_hold_Set() const;
    bool is_has_legal_hold_Valid() const;

    OAIImmutabilityPolicyProperties getImmutabilityPolicy() const;
    void setImmutabilityPolicy(const OAIImmutabilityPolicyProperties &immutability_policy);
    bool is_immutability_policy_Set() const;
    bool is_immutability_policy_Valid() const;

    QDateTime getLastModifiedTime() const;
    void setLastModifiedTime(const QDateTime &last_modified_time);
    bool is_last_modified_time_Set() const;
    bool is_last_modified_time_Valid() const;

    QString getLeaseDuration() const;
    void setLeaseDuration(const QString &lease_duration);
    bool is_lease_duration_Set() const;
    bool is_lease_duration_Valid() const;

    QString getLeaseState() const;
    void setLeaseState(const QString &lease_state);
    bool is_lease_state_Set() const;
    bool is_lease_state_Valid() const;

    QString getLeaseStatus() const;
    void setLeaseStatus(const QString &lease_status);
    bool is_lease_status_Set() const;
    bool is_lease_status_Valid() const;

    OAILegalHoldProperties getLegalHold() const;
    void setLegalHold(const OAILegalHoldProperties &legal_hold);
    bool is_legal_hold_Set() const;
    bool is_legal_hold_Valid() const;

    QMap<QString, QString> getMetadata() const;
    void setMetadata(const QMap<QString, QString> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getPublicAccess() const;
    void setPublicAccess(const QString &public_access);
    bool is_public_access_Set() const;
    bool is_public_access_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_has_immutability_policy;
    bool m_has_immutability_policy_isSet;
    bool m_has_immutability_policy_isValid;

    bool m_has_legal_hold;
    bool m_has_legal_hold_isSet;
    bool m_has_legal_hold_isValid;

    OAIImmutabilityPolicyProperties m_immutability_policy;
    bool m_immutability_policy_isSet;
    bool m_immutability_policy_isValid;

    QDateTime m_last_modified_time;
    bool m_last_modified_time_isSet;
    bool m_last_modified_time_isValid;

    QString m_lease_duration;
    bool m_lease_duration_isSet;
    bool m_lease_duration_isValid;

    QString m_lease_state;
    bool m_lease_state_isSet;
    bool m_lease_state_isValid;

    QString m_lease_status;
    bool m_lease_status_isSet;
    bool m_lease_status_isValid;

    OAILegalHoldProperties m_legal_hold;
    bool m_legal_hold_isSet;
    bool m_legal_hold_isValid;

    QMap<QString, QString> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_public_access;
    bool m_public_access_isSet;
    bool m_public_access_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainerProperties)

#endif // OAIContainerProperties_H
