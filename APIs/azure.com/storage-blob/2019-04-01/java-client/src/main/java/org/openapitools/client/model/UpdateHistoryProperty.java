/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An update history of the ImmutabilityPolicy of a blob container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:54.134641-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateHistoryProperty {
  public static final String SERIALIZED_NAME_IMMUTABILITY_PERIOD_SINCE_CREATION_IN_DAYS = "immutabilityPeriodSinceCreationInDays";
  @SerializedName(SERIALIZED_NAME_IMMUTABILITY_PERIOD_SINCE_CREATION_IN_DAYS)
  private Integer immutabilityPeriodSinceCreationInDays;

  public static final String SERIALIZED_NAME_OBJECT_IDENTIFIER = "objectIdentifier";
  @SerializedName(SERIALIZED_NAME_OBJECT_IDENTIFIER)
  private String objectIdentifier;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  /**
   * The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.
   */
  @JsonAdapter(UpdateEnum.Adapter.class)
  public enum UpdateEnum {
    PUT("put"),
    
    LOCK("lock"),
    
    EXTEND("extend");

    private String value;

    UpdateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdateEnum fromValue(String value) {
      for (UpdateEnum b : UpdateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpdateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpdateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpdateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private UpdateEnum update;

  public static final String SERIALIZED_NAME_UPN = "upn";
  @SerializedName(SERIALIZED_NAME_UPN)
  private String upn;

  public UpdateHistoryProperty() {
  }

  public UpdateHistoryProperty(
     Integer immutabilityPeriodSinceCreationInDays, 
     String objectIdentifier, 
     String tenantId, 
     OffsetDateTime timestamp, 
     UpdateEnum update, 
     String upn
  ) {
    this();
    this.immutabilityPeriodSinceCreationInDays = immutabilityPeriodSinceCreationInDays;
    this.objectIdentifier = objectIdentifier;
    this.tenantId = tenantId;
    this.timestamp = timestamp;
    this.update = update;
    this.upn = upn;
  }

  /**
   * The immutability period for the blobs in the container since the policy creation, in days.
   * @return immutabilityPeriodSinceCreationInDays
   */
  @javax.annotation.Nullable
  public Integer getImmutabilityPeriodSinceCreationInDays() {
    return immutabilityPeriodSinceCreationInDays;
  }



  /**
   * Returns the Object ID of the user who updated the ImmutabilityPolicy.
   * @return objectIdentifier
   */
  @javax.annotation.Nullable
  public String getObjectIdentifier() {
    return objectIdentifier;
  }



  /**
   * Returns the Tenant ID that issued the token for the user who updated the ImmutabilityPolicy.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }



  /**
   * Returns the date and time the ImmutabilityPolicy was updated.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }



  /**
   * The ImmutabilityPolicy update type of a blob container, possible values include: put, lock and extend.
   * @return update
   */
  @javax.annotation.Nullable
  public UpdateEnum getUpdate() {
    return update;
  }



  /**
   * Returns the User Principal Name of the user who updated the ImmutabilityPolicy.
   * @return upn
   */
  @javax.annotation.Nullable
  public String getUpn() {
    return upn;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateHistoryProperty updateHistoryProperty = (UpdateHistoryProperty) o;
    return Objects.equals(this.immutabilityPeriodSinceCreationInDays, updateHistoryProperty.immutabilityPeriodSinceCreationInDays) &&
        Objects.equals(this.objectIdentifier, updateHistoryProperty.objectIdentifier) &&
        Objects.equals(this.tenantId, updateHistoryProperty.tenantId) &&
        Objects.equals(this.timestamp, updateHistoryProperty.timestamp) &&
        Objects.equals(this.update, updateHistoryProperty.update) &&
        Objects.equals(this.upn, updateHistoryProperty.upn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(immutabilityPeriodSinceCreationInDays, objectIdentifier, tenantId, timestamp, update, upn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateHistoryProperty {\n");
    sb.append("    immutabilityPeriodSinceCreationInDays: ").append(toIndentedString(immutabilityPeriodSinceCreationInDays)).append("\n");
    sb.append("    objectIdentifier: ").append(toIndentedString(objectIdentifier)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    upn: ").append(toIndentedString(upn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("immutabilityPeriodSinceCreationInDays");
    openapiFields.add("objectIdentifier");
    openapiFields.add("tenantId");
    openapiFields.add("timestamp");
    openapiFields.add("update");
    openapiFields.add("upn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateHistoryProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateHistoryProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateHistoryProperty is not found in the empty JSON string", UpdateHistoryProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateHistoryProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateHistoryProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("objectIdentifier") != null && !jsonObj.get("objectIdentifier").isJsonNull()) && !jsonObj.get("objectIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectIdentifier").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) && !jsonObj.get("update").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `update` to be a primitive type in the JSON string but got `%s`", jsonObj.get("update").toString()));
      }
      // validate the optional field `update`
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        UpdateEnum.validateJsonElement(jsonObj.get("update"));
      }
      if ((jsonObj.get("upn") != null && !jsonObj.get("upn").isJsonNull()) && !jsonObj.get("upn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateHistoryProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateHistoryProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateHistoryProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateHistoryProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateHistoryProperty>() {
           @Override
           public void write(JsonWriter out, UpdateHistoryProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateHistoryProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateHistoryProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateHistoryProperty
   * @throws IOException if the JSON string is invalid with respect to UpdateHistoryProperty
   */
  public static UpdateHistoryProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateHistoryProperty.class);
  }

  /**
   * Convert an instance of UpdateHistoryProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

