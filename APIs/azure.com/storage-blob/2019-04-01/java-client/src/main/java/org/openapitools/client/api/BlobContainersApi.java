/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BlobContainer;
import org.openapitools.client.model.ImmutabilityPolicy;
import org.openapitools.client.model.LeaseContainerRequest;
import org.openapitools.client.model.LeaseContainerResponse;
import org.openapitools.client.model.LegalHold;
import org.openapitools.client.model.ListContainerItems;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlobContainersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BlobContainersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlobContainersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for blobContainersClearLegalHold
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param legalHold The LegalHold property that will be clear from a blob container. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Clear legal hold tags for Container completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersClearLegalHoldCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LegalHold legalHold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = legalHold;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/clearLegalHold"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersClearLegalHoldValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LegalHold legalHold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersClearLegalHold(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersClearLegalHold(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersClearLegalHold(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersClearLegalHold(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersClearLegalHold(Async)");
        }

        // verify the required parameter 'legalHold' is set
        if (legalHold == null) {
            throw new ApiException("Missing the required parameter 'legalHold' when calling blobContainersClearLegalHold(Async)");
        }

        return blobContainersClearLegalHoldCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold, _callback);

    }

    /**
     * 
     * Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param legalHold The LegalHold property that will be clear from a blob container. (required)
     * @return LegalHold
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Clear legal hold tags for Container completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public LegalHold blobContainersClearLegalHold(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LegalHold legalHold) throws ApiException {
        ApiResponse<LegalHold> localVarResp = blobContainersClearLegalHoldWithHttpInfo(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold);
        return localVarResp.getData();
    }

    /**
     * 
     * Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param legalHold The LegalHold property that will be clear from a blob container. (required)
     * @return ApiResponse&lt;LegalHold&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Clear legal hold tags for Container completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LegalHold> blobContainersClearLegalHoldWithHttpInfo(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LegalHold legalHold) throws ApiException {
        okhttp3.Call localVarCall = blobContainersClearLegalHoldValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold, null);
        Type localVarReturnType = new TypeToken<LegalHold>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Clears legal hold tags. Clearing the same or non-existent tag results in an idempotent operation. ClearLegalHold clears out only the specified tags in the request.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param legalHold The LegalHold property that will be clear from a blob container. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Clear legal hold tags for Container completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersClearLegalHoldAsync(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LegalHold legalHold, final ApiCallback<LegalHold> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersClearLegalHoldValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold, _callback);
        Type localVarReturnType = new TypeToken<LegalHold>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersCreate
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param blobContainer Properties of the blob container to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The Container is already created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created -- Create Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersCreateCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, BlobContainer blobContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blobContainer;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersCreateValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, BlobContainer blobContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersCreate(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersCreate(Async)");
        }

        // verify the required parameter 'blobContainer' is set
        if (blobContainer == null) {
            throw new ApiException("Missing the required parameter 'blobContainer' when calling blobContainersCreate(Async)");
        }

        return blobContainersCreateCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer, _callback);

    }

    /**
     * 
     * Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. 
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param blobContainer Properties of the blob container to create. (required)
     * @return BlobContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The Container is already created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created -- Create Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public BlobContainer blobContainersCreate(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, BlobContainer blobContainer) throws ApiException {
        ApiResponse<BlobContainer> localVarResp = blobContainersCreateWithHttpInfo(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. 
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param blobContainer Properties of the blob container to create. (required)
     * @return ApiResponse&lt;BlobContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The Container is already created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created -- Create Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlobContainer> blobContainersCreateWithHttpInfo(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, BlobContainer blobContainer) throws ApiException {
        okhttp3.Call localVarCall = blobContainersCreateValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer, null);
        Type localVarReturnType = new TypeToken<BlobContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new container under the specified account as described by request body. The container resource includes metadata and properties for that container. It does not include a list of the blobs contained by the container. 
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param blobContainer Properties of the blob container to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The Container is already created. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created -- Create Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersCreateAsync(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, BlobContainer blobContainer, final ApiCallback<BlobContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersCreateValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer, _callback);
        Type localVarReturnType = new TypeToken<BlobContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersCreateOrUpdateImmutabilityPolicy
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (optional)
     * @param parameters The ImmutabilityPolicy Properties that will be created or updated to a blob container. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Creates or updates container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersCreateOrUpdateImmutabilityPolicyCall(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, ImmutabilityPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "immutabilityPolicyName" + "}", localVarApiClient.escapeString(immutabilityPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersCreateOrUpdateImmutabilityPolicyValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, ImmutabilityPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersCreateOrUpdateImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersCreateOrUpdateImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersCreateOrUpdateImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'immutabilityPolicyName' is set
        if (immutabilityPolicyName == null) {
            throw new ApiException("Missing the required parameter 'immutabilityPolicyName' when calling blobContainersCreateOrUpdateImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersCreateOrUpdateImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersCreateOrUpdateImmutabilityPolicy(Async)");
        }

        return blobContainersCreateOrUpdateImmutabilityPolicyCall(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, parameters, _callback);

    }

    /**
     * 
     * Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (optional)
     * @param parameters The ImmutabilityPolicy Properties that will be created or updated to a blob container. (optional)
     * @return ImmutabilityPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Creates or updates container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public ImmutabilityPolicy blobContainersCreateOrUpdateImmutabilityPolicy(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, ImmutabilityPolicy parameters) throws ApiException {
        ApiResponse<ImmutabilityPolicy> localVarResp = blobContainersCreateOrUpdateImmutabilityPolicyWithHttpInfo(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (optional)
     * @param parameters The ImmutabilityPolicy Properties that will be created or updated to a blob container. (optional)
     * @return ApiResponse&lt;ImmutabilityPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Creates or updates container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public ApiResponse<ImmutabilityPolicy> blobContainersCreateOrUpdateImmutabilityPolicyWithHttpInfo(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, ImmutabilityPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = blobContainersCreateOrUpdateImmutabilityPolicyValidateBeforeCall(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, parameters, null);
        Type localVarReturnType = new TypeToken<ImmutabilityPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an unlocked immutability policy. ETag in If-Match is honored if given but not required for this operation.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (optional)
     * @param parameters The ImmutabilityPolicy Properties that will be created or updated to a blob container. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Creates or updates container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersCreateOrUpdateImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, ImmutabilityPolicy parameters, final ApiCallback<ImmutabilityPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersCreateOrUpdateImmutabilityPolicyValidateBeforeCall(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, parameters, _callback);
        Type localVarReturnType = new TypeToken<ImmutabilityPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersDelete
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Delete Container operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content -- The Container not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersDeleteCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersDeleteValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersDelete(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersDelete(Async)");
        }

        return blobContainersDeleteCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes specified container under its account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Delete Container operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content -- The Container not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void blobContainersDelete(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId) throws ApiException {
        blobContainersDeleteWithHttpInfo(resourceGroupName, accountName, containerName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes specified container under its account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Delete Container operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content -- The Container not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> blobContainersDeleteWithHttpInfo(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = blobContainersDeleteValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes specified container under its account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Delete Container operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content -- The Container not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersDeleteAsync(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersDeleteValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersDeleteImmutabilityPolicy
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deletes container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersDeleteImmutabilityPolicyCall(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "immutabilityPolicyName" + "}", localVarApiClient.escapeString(immutabilityPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersDeleteImmutabilityPolicyValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersDeleteImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersDeleteImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersDeleteImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'immutabilityPolicyName' is set
        if (immutabilityPolicyName == null) {
            throw new ApiException("Missing the required parameter 'immutabilityPolicyName' when calling blobContainersDeleteImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersDeleteImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersDeleteImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling blobContainersDeleteImmutabilityPolicy(Async)");
        }

        return blobContainersDeleteImmutabilityPolicyCall(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, _callback);

    }

    /**
     * 
     * Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @return ImmutabilityPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deletes container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public ImmutabilityPolicy blobContainersDeleteImmutabilityPolicy(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        ApiResponse<ImmutabilityPolicy> localVarResp = blobContainersDeleteImmutabilityPolicyWithHttpInfo(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @return ApiResponse&lt;ImmutabilityPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deletes container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public ApiResponse<ImmutabilityPolicy> blobContainersDeleteImmutabilityPolicyWithHttpInfo(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = blobContainersDeleteImmutabilityPolicyValidateBeforeCall(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, null);
        Type localVarReturnType = new TypeToken<ImmutabilityPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Aborts an unlocked immutability policy. The response of delete has immutabilityPeriodSinceCreationInDays set to 0. ETag in If-Match is required for this operation. Deleting a locked immutability policy is not allowed, only way is to delete the container after deleting all blobs inside the container.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Deletes container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersDeleteImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback<ImmutabilityPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersDeleteImmutabilityPolicyValidateBeforeCall(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<ImmutabilityPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersExtendImmutabilityPolicy
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @param parameters The ImmutabilityPolicy Properties that will be extended for a blob container. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Extends container ImmutabilityPolicy operation completed successfully.. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersExtendImmutabilityPolicyCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, String ifMatch, ImmutabilityPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/extend"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersExtendImmutabilityPolicyValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, String ifMatch, ImmutabilityPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersExtendImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersExtendImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersExtendImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersExtendImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersExtendImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling blobContainersExtendImmutabilityPolicy(Async)");
        }

        return blobContainersExtendImmutabilityPolicyCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch, parameters, _callback);

    }

    /**
     * 
     * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @param parameters The ImmutabilityPolicy Properties that will be extended for a blob container. (optional)
     * @return ImmutabilityPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Extends container ImmutabilityPolicy operation completed successfully.. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public ImmutabilityPolicy blobContainersExtendImmutabilityPolicy(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, String ifMatch, ImmutabilityPolicy parameters) throws ApiException {
        ApiResponse<ImmutabilityPolicy> localVarResp = blobContainersExtendImmutabilityPolicyWithHttpInfo(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @param parameters The ImmutabilityPolicy Properties that will be extended for a blob container. (optional)
     * @return ApiResponse&lt;ImmutabilityPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Extends container ImmutabilityPolicy operation completed successfully.. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public ApiResponse<ImmutabilityPolicy> blobContainersExtendImmutabilityPolicyWithHttpInfo(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, String ifMatch, ImmutabilityPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = blobContainersExtendImmutabilityPolicyValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch, parameters, null);
        Type localVarReturnType = new TypeToken<ImmutabilityPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Extends the immutabilityPeriodSinceCreationInDays of a locked immutabilityPolicy. The only action allowed on a Locked policy will be this action. ETag in If-Match is required for this operation.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @param parameters The ImmutabilityPolicy Properties that will be extended for a blob container. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Extends container ImmutabilityPolicy operation completed successfully.. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersExtendImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, String ifMatch, ImmutabilityPolicy parameters, final ApiCallback<ImmutabilityPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersExtendImmutabilityPolicyValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch, parameters, _callback);
        Type localVarReturnType = new TypeToken<ImmutabilityPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersGet
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersGetCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersGetValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersGet(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersGet(Async)");
        }

        return blobContainersGetCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets properties of a specified container. 
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return BlobContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public BlobContainer blobContainersGet(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<BlobContainer> localVarResp = blobContainersGetWithHttpInfo(resourceGroupName, accountName, containerName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets properties of a specified container. 
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;BlobContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlobContainer> blobContainersGetWithHttpInfo(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = blobContainersGetValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<BlobContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets properties of a specified container. 
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersGetAsync(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, final ApiCallback<BlobContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersGetValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<BlobContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersGetImmutabilityPolicy
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Gets container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersGetImmutabilityPolicyCall(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/{immutabilityPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "immutabilityPolicyName" + "}", localVarApiClient.escapeString(immutabilityPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersGetImmutabilityPolicyValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersGetImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersGetImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersGetImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'immutabilityPolicyName' is set
        if (immutabilityPolicyName == null) {
            throw new ApiException("Missing the required parameter 'immutabilityPolicyName' when calling blobContainersGetImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersGetImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersGetImmutabilityPolicy(Async)");
        }

        return blobContainersGetImmutabilityPolicyCall(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, _callback);

    }

    /**
     * 
     * Gets the existing immutability policy along with the corresponding ETag in response headers and body.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (optional)
     * @return ImmutabilityPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Gets container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public ImmutabilityPolicy blobContainersGetImmutabilityPolicy(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        ApiResponse<ImmutabilityPolicy> localVarResp = blobContainersGetImmutabilityPolicyWithHttpInfo(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the existing immutability policy along with the corresponding ETag in response headers and body.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (optional)
     * @return ApiResponse&lt;ImmutabilityPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Gets container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public ApiResponse<ImmutabilityPolicy> blobContainersGetImmutabilityPolicyWithHttpInfo(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = blobContainersGetImmutabilityPolicyValidateBeforeCall(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, null);
        Type localVarReturnType = new TypeToken<ImmutabilityPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the existing immutability policy along with the corresponding ETag in response headers and body.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param immutabilityPolicyName The name of the blob container immutabilityPolicy within the specified storage account. ImmutabilityPolicy Name must be &#39;default&#39; (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Gets container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersGetImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String immutabilityPolicyName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback<ImmutabilityPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersGetImmutabilityPolicyValidateBeforeCall(resourceGroupName, accountName, containerName, immutabilityPolicyName, apiVersion, subscriptionId, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<ImmutabilityPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersLease
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Lease Container request body. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Lease Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersLeaseCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LeaseContainerRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/lease"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersLeaseValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LeaseContainerRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersLease(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersLease(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersLease(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersLease(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersLease(Async)");
        }

        return blobContainersLeaseCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Lease Container request body. (optional)
     * @return LeaseContainerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Lease Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public LeaseContainerResponse blobContainersLease(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LeaseContainerRequest parameters) throws ApiException {
        ApiResponse<LeaseContainerResponse> localVarResp = blobContainersLeaseWithHttpInfo(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Lease Container request body. (optional)
     * @return ApiResponse&lt;LeaseContainerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Lease Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LeaseContainerResponse> blobContainersLeaseWithHttpInfo(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LeaseContainerRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = blobContainersLeaseValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<LeaseContainerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The Lease Container operation establishes and manages a lock on a container for delete operations. The lock duration can be 15 to 60 seconds, or can be infinite.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Lease Container request body. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Lease Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersLeaseAsync(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LeaseContainerRequest parameters, final ApiCallback<LeaseContainerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersLeaseValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<LeaseContainerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersList
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $skipToken Optional. Continuation token for the list operation. (optional)
     * @param $maxpagesize Optional. Specified maximum number of containers that can be included in the list. (optional)
     * @param $filter Optional. When specified, only container names starting with the filter will be listed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- List Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersListCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String $skipToken, String $maxpagesize, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        if ($maxpagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$maxpagesize", $maxpagesize));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersListValidateBeforeCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String $skipToken, String $maxpagesize, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersList(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersList(Async)");
        }

        return blobContainersListCall(resourceGroupName, accountName, apiVersion, subscriptionId, $skipToken, $maxpagesize, $filter, _callback);

    }

    /**
     * 
     * Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $skipToken Optional. Continuation token for the list operation. (optional)
     * @param $maxpagesize Optional. Specified maximum number of containers that can be included in the list. (optional)
     * @param $filter Optional. When specified, only container names starting with the filter will be listed. (optional)
     * @return ListContainerItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- List Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ListContainerItems blobContainersList(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String $skipToken, String $maxpagesize, String $filter) throws ApiException {
        ApiResponse<ListContainerItems> localVarResp = blobContainersListWithHttpInfo(resourceGroupName, accountName, apiVersion, subscriptionId, $skipToken, $maxpagesize, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $skipToken Optional. Continuation token for the list operation. (optional)
     * @param $maxpagesize Optional. Specified maximum number of containers that can be included in the list. (optional)
     * @param $filter Optional. When specified, only container names starting with the filter will be listed. (optional)
     * @return ApiResponse&lt;ListContainerItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- List Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListContainerItems> blobContainersListWithHttpInfo(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String $skipToken, String $maxpagesize, String $filter) throws ApiException {
        okhttp3.Call localVarCall = blobContainersListValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, $skipToken, $maxpagesize, $filter, null);
        Type localVarReturnType = new TypeToken<ListContainerItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all containers and does not support a prefix like data plane. Also SRP today does not return continuation token.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $skipToken Optional. Continuation token for the list operation. (optional)
     * @param $maxpagesize Optional. Specified maximum number of containers that can be included in the list. (optional)
     * @param $filter Optional. When specified, only container names starting with the filter will be listed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- List Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersListAsync(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String $skipToken, String $maxpagesize, String $filter, final ApiCallback<ListContainerItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersListValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, $skipToken, $maxpagesize, $filter, _callback);
        Type localVarReturnType = new TypeToken<ListContainerItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersLockImmutabilityPolicy
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Locks container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersLockImmutabilityPolicyCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/immutabilityPolicies/default/lock"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersLockImmutabilityPolicyValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersLockImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersLockImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersLockImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersLockImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersLockImmutabilityPolicy(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling blobContainersLockImmutabilityPolicy(Async)");
        }

        return blobContainersLockImmutabilityPolicyCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch, _callback);

    }

    /**
     * 
     * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @return ImmutabilityPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Locks container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public ImmutabilityPolicy blobContainersLockImmutabilityPolicy(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        ApiResponse<ImmutabilityPolicy> localVarResp = blobContainersLockImmutabilityPolicyWithHttpInfo(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @return ApiResponse&lt;ImmutabilityPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Locks container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public ApiResponse<ImmutabilityPolicy> blobContainersLockImmutabilityPolicyWithHttpInfo(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = blobContainersLockImmutabilityPolicyValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch, null);
        Type localVarReturnType = new TypeToken<ImmutabilityPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets the ImmutabilityPolicy to Locked state. The only action allowed on a Locked policy is ExtendImmutabilityPolicy action. ETag in If-Match is required for this operation.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The entity state (ETag) version of the immutability policy to update. A value of \&quot;*\&quot; can be used to apply the operation only if the immutability policy already exists. If omitted, this operation will always be applied. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Locks container ImmutabilityPolicy operation completed successfully. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersLockImmutabilityPolicyAsync(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback<ImmutabilityPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersLockImmutabilityPolicyValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<ImmutabilityPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersSetLegalHold
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param legalHold The LegalHold property that will be set to a blob container. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Set legal hold tags for Container completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersSetLegalHoldCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LegalHold legalHold, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = legalHold;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}/setLegalHold"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersSetLegalHoldValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LegalHold legalHold, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersSetLegalHold(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersSetLegalHold(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersSetLegalHold(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersSetLegalHold(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersSetLegalHold(Async)");
        }

        // verify the required parameter 'legalHold' is set
        if (legalHold == null) {
            throw new ApiException("Missing the required parameter 'legalHold' when calling blobContainersSetLegalHold(Async)");
        }

        return blobContainersSetLegalHoldCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold, _callback);

    }

    /**
     * 
     * Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param legalHold The LegalHold property that will be set to a blob container. (required)
     * @return LegalHold
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Set legal hold tags for Container completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public LegalHold blobContainersSetLegalHold(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LegalHold legalHold) throws ApiException {
        ApiResponse<LegalHold> localVarResp = blobContainersSetLegalHoldWithHttpInfo(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param legalHold The LegalHold property that will be set to a blob container. (required)
     * @return ApiResponse&lt;LegalHold&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Set legal hold tags for Container completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LegalHold> blobContainersSetLegalHoldWithHttpInfo(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LegalHold legalHold) throws ApiException {
        okhttp3.Call localVarCall = blobContainersSetLegalHoldValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold, null);
        Type localVarReturnType = new TypeToken<LegalHold>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets legal hold tags. Setting the same tag results in an idempotent operation. SetLegalHold follows an append pattern and does not clear out the existing tags that are not specified in the request.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param legalHold The LegalHold property that will be set to a blob container. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Set legal hold tags for Container completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersSetLegalHoldAsync(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, LegalHold legalHold, final ApiCallback<LegalHold> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersSetLegalHoldValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, legalHold, _callback);
        Type localVarReturnType = new TypeToken<LegalHold>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for blobContainersUpdate
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param blobContainer Properties to update for the blob container. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Update Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersUpdateCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, BlobContainer blobContainer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = blobContainer;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/blobServices/default/containers/{containerName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blobContainersUpdateValidateBeforeCall(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, BlobContainer blobContainer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling blobContainersUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling blobContainersUpdate(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling blobContainersUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling blobContainersUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling blobContainersUpdate(Async)");
        }

        // verify the required parameter 'blobContainer' is set
        if (blobContainer == null) {
            throw new ApiException("Missing the required parameter 'blobContainer' when calling blobContainersUpdate(Async)");
        }

        return blobContainersUpdateCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer, _callback);

    }

    /**
     * 
     * Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn&#39;t already exist. 
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param blobContainer Properties to update for the blob container. (required)
     * @return BlobContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Update Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public BlobContainer blobContainersUpdate(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, BlobContainer blobContainer) throws ApiException {
        ApiResponse<BlobContainer> localVarResp = blobContainersUpdateWithHttpInfo(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn&#39;t already exist. 
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param blobContainer Properties to update for the blob container. (required)
     * @return ApiResponse&lt;BlobContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Update Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BlobContainer> blobContainersUpdateWithHttpInfo(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, BlobContainer blobContainer) throws ApiException {
        okhttp3.Call localVarCall = blobContainersUpdateValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer, null);
        Type localVarReturnType = new TypeToken<BlobContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates container properties as specified in request body. Properties not mentioned in the request will be unchanged. Update fails if the specified container doesn&#39;t already exist. 
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param containerName The name of the blob container within the specified storage account. Blob container names must be between 3 and 63 characters in length and use numbers, lower-case letters and dash (-) only. Every dash (-) character must be immediately preceded and followed by a letter or number. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param blobContainer Properties to update for the blob container. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Update Container operation completed successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blobContainersUpdateAsync(String resourceGroupName, String accountName, String containerName, String apiVersion, String subscriptionId, BlobContainer blobContainer, final ApiCallback<BlobContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = blobContainersUpdateValidateBeforeCall(resourceGroupName, accountName, containerName, apiVersion, subscriptionId, blobContainer, _callback);
        Type localVarReturnType = new TypeToken<BlobContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
