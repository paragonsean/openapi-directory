/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of an ImmutabilityPolicy of a blob container.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:40:54.134641-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImmutabilityPolicyProperty {
  public static final String SERIALIZED_NAME_IMMUTABILITY_PERIOD_SINCE_CREATION_IN_DAYS = "immutabilityPeriodSinceCreationInDays";
  @SerializedName(SERIALIZED_NAME_IMMUTABILITY_PERIOD_SINCE_CREATION_IN_DAYS)
  private Integer immutabilityPeriodSinceCreationInDays;

  /**
   * The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    LOCKED("Locked"),
    
    UNLOCKED("Unlocked");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public ImmutabilityPolicyProperty() {
  }

  public ImmutabilityPolicyProperty(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public ImmutabilityPolicyProperty immutabilityPeriodSinceCreationInDays(Integer immutabilityPeriodSinceCreationInDays) {
    this.immutabilityPeriodSinceCreationInDays = immutabilityPeriodSinceCreationInDays;
    return this;
  }

  /**
   * The immutability period for the blobs in the container since the policy creation, in days.
   * @return immutabilityPeriodSinceCreationInDays
   */
  @javax.annotation.Nonnull
  public Integer getImmutabilityPeriodSinceCreationInDays() {
    return immutabilityPeriodSinceCreationInDays;
  }

  public void setImmutabilityPeriodSinceCreationInDays(Integer immutabilityPeriodSinceCreationInDays) {
    this.immutabilityPeriodSinceCreationInDays = immutabilityPeriodSinceCreationInDays;
  }


  /**
   * The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImmutabilityPolicyProperty immutabilityPolicyProperty = (ImmutabilityPolicyProperty) o;
    return Objects.equals(this.immutabilityPeriodSinceCreationInDays, immutabilityPolicyProperty.immutabilityPeriodSinceCreationInDays) &&
        Objects.equals(this.state, immutabilityPolicyProperty.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(immutabilityPeriodSinceCreationInDays, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImmutabilityPolicyProperty {\n");
    sb.append("    immutabilityPeriodSinceCreationInDays: ").append(toIndentedString(immutabilityPeriodSinceCreationInDays)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("immutabilityPeriodSinceCreationInDays");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("immutabilityPeriodSinceCreationInDays");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImmutabilityPolicyProperty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImmutabilityPolicyProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImmutabilityPolicyProperty is not found in the empty JSON string", ImmutabilityPolicyProperty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImmutabilityPolicyProperty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImmutabilityPolicyProperty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImmutabilityPolicyProperty.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImmutabilityPolicyProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImmutabilityPolicyProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImmutabilityPolicyProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImmutabilityPolicyProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<ImmutabilityPolicyProperty>() {
           @Override
           public void write(JsonWriter out, ImmutabilityPolicyProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImmutabilityPolicyProperty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImmutabilityPolicyProperty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImmutabilityPolicyProperty
   * @throws IOException if the JSON string is invalid with respect to ImmutabilityPolicyProperty
   */
  public static ImmutabilityPolicyProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImmutabilityPolicyProperty.class);
  }

  /**
   * Convert an instance of ImmutabilityPolicyProperty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

