/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImmutabilityPolicyProperty model module.
 * @module model/ImmutabilityPolicyProperty
 * @version 2019-04-01
 */
class ImmutabilityPolicyProperty {
    /**
     * Constructs a new <code>ImmutabilityPolicyProperty</code>.
     * The properties of an ImmutabilityPolicy of a blob container.
     * @alias module:model/ImmutabilityPolicyProperty
     * @param immutabilityPeriodSinceCreationInDays {Number} The immutability period for the blobs in the container since the policy creation, in days.
     */
    constructor(immutabilityPeriodSinceCreationInDays) { 
        
        ImmutabilityPolicyProperty.initialize(this, immutabilityPeriodSinceCreationInDays);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, immutabilityPeriodSinceCreationInDays) { 
        obj['immutabilityPeriodSinceCreationInDays'] = immutabilityPeriodSinceCreationInDays;
    }

    /**
     * Constructs a <code>ImmutabilityPolicyProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImmutabilityPolicyProperty} obj Optional instance to populate.
     * @return {module:model/ImmutabilityPolicyProperty} The populated <code>ImmutabilityPolicyProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImmutabilityPolicyProperty();

            if (data.hasOwnProperty('immutabilityPeriodSinceCreationInDays')) {
                obj['immutabilityPeriodSinceCreationInDays'] = ApiClient.convertToType(data['immutabilityPeriodSinceCreationInDays'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImmutabilityPolicyProperty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImmutabilityPolicyProperty</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImmutabilityPolicyProperty.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

ImmutabilityPolicyProperty.RequiredProperties = ["immutabilityPeriodSinceCreationInDays"];

/**
 * The immutability period for the blobs in the container since the policy creation, in days.
 * @member {Number} immutabilityPeriodSinceCreationInDays
 */
ImmutabilityPolicyProperty.prototype['immutabilityPeriodSinceCreationInDays'] = undefined;

/**
 * The ImmutabilityPolicy state of a blob container, possible values include: Locked and Unlocked.
 * @member {module:model/ImmutabilityPolicyProperty.StateEnum} state
 */
ImmutabilityPolicyProperty.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ImmutabilityPolicyProperty['StateEnum'] = {

    /**
     * value: "Locked"
     * @const
     */
    "Locked": "Locked",

    /**
     * value: "Unlocked"
     * @const
     */
    "Unlocked": "Unlocked"
};



export default ImmutabilityPolicyProperty;

