# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CorsRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_headers: List[str]=None, allowed_methods: List[str]=None, allowed_origins: List[str]=None, exposed_headers: List[str]=None, max_age_in_seconds: int=None):
        """CorsRule - a model defined in OpenAPI

        :param allowed_headers: The allowed_headers of this CorsRule.
        :param allowed_methods: The allowed_methods of this CorsRule.
        :param allowed_origins: The allowed_origins of this CorsRule.
        :param exposed_headers: The exposed_headers of this CorsRule.
        :param max_age_in_seconds: The max_age_in_seconds of this CorsRule.
        """
        self.openapi_types = {
            'allowed_headers': List[str],
            'allowed_methods': List[str],
            'allowed_origins': List[str],
            'exposed_headers': List[str],
            'max_age_in_seconds': int
        }

        self.attribute_map = {
            'allowed_headers': 'allowedHeaders',
            'allowed_methods': 'allowedMethods',
            'allowed_origins': 'allowedOrigins',
            'exposed_headers': 'exposedHeaders',
            'max_age_in_seconds': 'maxAgeInSeconds'
        }

        self._allowed_headers = allowed_headers
        self._allowed_methods = allowed_methods
        self._allowed_origins = allowed_origins
        self._exposed_headers = exposed_headers
        self._max_age_in_seconds = max_age_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CorsRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CorsRule of this CorsRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_headers(self):
        """Gets the allowed_headers of this CorsRule.

        Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin request.

        :return: The allowed_headers of this CorsRule.
        :rtype: List[str]
        """
        return self._allowed_headers

    @allowed_headers.setter
    def allowed_headers(self, allowed_headers):
        """Sets the allowed_headers of this CorsRule.

        Required if CorsRule element is present. A list of headers allowed to be part of the cross-origin request.

        :param allowed_headers: The allowed_headers of this CorsRule.
        :type allowed_headers: List[str]
        """
        if allowed_headers is None:
            raise ValueError("Invalid value for `allowed_headers`, must not be `None`")

        self._allowed_headers = allowed_headers

    @property
    def allowed_methods(self):
        """Gets the allowed_methods of this CorsRule.

        Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the origin.

        :return: The allowed_methods of this CorsRule.
        :rtype: List[str]
        """
        return self._allowed_methods

    @allowed_methods.setter
    def allowed_methods(self, allowed_methods):
        """Sets the allowed_methods of this CorsRule.

        Required if CorsRule element is present. A list of HTTP methods that are allowed to be executed by the origin.

        :param allowed_methods: The allowed_methods of this CorsRule.
        :type allowed_methods: List[str]
        """
        allowed_values = ["DELETE", "GET", "HEAD", "MERGE", "POST", "OPTIONS", "PUT"]  # noqa: E501
        if not set(allowed_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_methods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allowed_methods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_methods = allowed_methods

    @property
    def allowed_origins(self):
        """Gets the allowed_origins of this CorsRule.

        Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains

        :return: The allowed_origins of this CorsRule.
        :rtype: List[str]
        """
        return self._allowed_origins

    @allowed_origins.setter
    def allowed_origins(self, allowed_origins):
        """Sets the allowed_origins of this CorsRule.

        Required if CorsRule element is present. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains

        :param allowed_origins: The allowed_origins of this CorsRule.
        :type allowed_origins: List[str]
        """
        if allowed_origins is None:
            raise ValueError("Invalid value for `allowed_origins`, must not be `None`")

        self._allowed_origins = allowed_origins

    @property
    def exposed_headers(self):
        """Gets the exposed_headers of this CorsRule.

        Required if CorsRule element is present. A list of response headers to expose to CORS clients.

        :return: The exposed_headers of this CorsRule.
        :rtype: List[str]
        """
        return self._exposed_headers

    @exposed_headers.setter
    def exposed_headers(self, exposed_headers):
        """Sets the exposed_headers of this CorsRule.

        Required if CorsRule element is present. A list of response headers to expose to CORS clients.

        :param exposed_headers: The exposed_headers of this CorsRule.
        :type exposed_headers: List[str]
        """
        if exposed_headers is None:
            raise ValueError("Invalid value for `exposed_headers`, must not be `None`")

        self._exposed_headers = exposed_headers

    @property
    def max_age_in_seconds(self):
        """Gets the max_age_in_seconds of this CorsRule.

        Required if CorsRule element is present. The number of seconds that the client/browser should cache a preflight response.

        :return: The max_age_in_seconds of this CorsRule.
        :rtype: int
        """
        return self._max_age_in_seconds

    @max_age_in_seconds.setter
    def max_age_in_seconds(self, max_age_in_seconds):
        """Sets the max_age_in_seconds of this CorsRule.

        Required if CorsRule element is present. The number of seconds that the client/browser should cache a preflight response.

        :param max_age_in_seconds: The max_age_in_seconds of this CorsRule.
        :type max_age_in_seconds: int
        """
        if max_age_in_seconds is None:
            raise ValueError("Invalid value for `max_age_in_seconds`, must not be `None`")

        self._max_age_in_seconds = max_age_in_seconds
