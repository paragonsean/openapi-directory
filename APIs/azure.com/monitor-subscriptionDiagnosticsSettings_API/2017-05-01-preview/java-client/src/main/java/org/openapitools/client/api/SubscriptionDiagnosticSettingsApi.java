/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.SubscriptionDiagnosticSettingsResource;
import org.openapitools.client.model.SubscriptionDiagnosticSettingsResourceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionDiagnosticSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionDiagnosticSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionDiagnosticSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for subscriptionDiagnosticSettingsCreateOrUpdate
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @param parameters Parameters supplied to the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to create a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDiagnosticSettingsCreateOrUpdateCall(String subscriptionId, String apiVersion, String name, SubscriptionDiagnosticSettingsResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDiagnosticSettingsCreateOrUpdateValidateBeforeCall(String subscriptionId, String apiVersion, String name, SubscriptionDiagnosticSettingsResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionDiagnosticSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionDiagnosticSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling subscriptionDiagnosticSettingsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling subscriptionDiagnosticSettingsCreateOrUpdate(Async)");
        }

        return subscriptionDiagnosticSettingsCreateOrUpdateCall(subscriptionId, apiVersion, name, parameters, _callback);

    }

    /**
     * 
     * Creates or updates subscription diagnostic settings for the specified resource.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @param parameters Parameters supplied to the operation. (required)
     * @return SubscriptionDiagnosticSettingsResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to create a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionDiagnosticSettingsResource subscriptionDiagnosticSettingsCreateOrUpdate(String subscriptionId, String apiVersion, String name, SubscriptionDiagnosticSettingsResource parameters) throws ApiException {
        ApiResponse<SubscriptionDiagnosticSettingsResource> localVarResp = subscriptionDiagnosticSettingsCreateOrUpdateWithHttpInfo(subscriptionId, apiVersion, name, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates subscription diagnostic settings for the specified resource.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @param parameters Parameters supplied to the operation. (required)
     * @return ApiResponse&lt;SubscriptionDiagnosticSettingsResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to create a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionDiagnosticSettingsResource> subscriptionDiagnosticSettingsCreateOrUpdateWithHttpInfo(String subscriptionId, String apiVersion, String name, SubscriptionDiagnosticSettingsResource parameters) throws ApiException {
        okhttp3.Call localVarCall = subscriptionDiagnosticSettingsCreateOrUpdateValidateBeforeCall(subscriptionId, apiVersion, name, parameters, null);
        Type localVarReturnType = new TypeToken<SubscriptionDiagnosticSettingsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates subscription diagnostic settings for the specified resource.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @param parameters Parameters supplied to the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to create a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDiagnosticSettingsCreateOrUpdateAsync(String subscriptionId, String apiVersion, String name, SubscriptionDiagnosticSettingsResource parameters, final ApiCallback<SubscriptionDiagnosticSettingsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionDiagnosticSettingsCreateOrUpdateValidateBeforeCall(subscriptionId, apiVersion, name, parameters, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionDiagnosticSettingsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionDiagnosticSettingsDelete
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to remove a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successful request to remove a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDiagnosticSettingsDeleteCall(String subscriptionId, String apiVersion, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDiagnosticSettingsDeleteValidateBeforeCall(String subscriptionId, String apiVersion, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionDiagnosticSettingsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionDiagnosticSettingsDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling subscriptionDiagnosticSettingsDelete(Async)");
        }

        return subscriptionDiagnosticSettingsDeleteCall(subscriptionId, apiVersion, name, _callback);

    }

    /**
     * 
     * Deletes existing subscription diagnostic settings for the specified resource.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to remove a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successful request to remove a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionDiagnosticSettingsDelete(String subscriptionId, String apiVersion, String name) throws ApiException {
        subscriptionDiagnosticSettingsDeleteWithHttpInfo(subscriptionId, apiVersion, name);
    }

    /**
     * 
     * Deletes existing subscription diagnostic settings for the specified resource.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to remove a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successful request to remove a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionDiagnosticSettingsDeleteWithHttpInfo(String subscriptionId, String apiVersion, String name) throws ApiException {
        okhttp3.Call localVarCall = subscriptionDiagnosticSettingsDeleteValidateBeforeCall(subscriptionId, apiVersion, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes existing subscription diagnostic settings for the specified resource.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to remove a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successful request to remove a subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDiagnosticSettingsDeleteAsync(String subscriptionId, String apiVersion, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionDiagnosticSettingsDeleteValidateBeforeCall(subscriptionId, apiVersion, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionDiagnosticSettingsGet
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get more information about diagnostic setting. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDiagnosticSettingsGetCall(String subscriptionId, String apiVersion, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDiagnosticSettingsGetValidateBeforeCall(String subscriptionId, String apiVersion, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionDiagnosticSettingsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionDiagnosticSettingsGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling subscriptionDiagnosticSettingsGet(Async)");
        }

        return subscriptionDiagnosticSettingsGetCall(subscriptionId, apiVersion, name, _callback);

    }

    /**
     * 
     * Gets the active subscription diagnostic settings for the specified resource.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @return SubscriptionDiagnosticSettingsResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get more information about diagnostic setting. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionDiagnosticSettingsResource subscriptionDiagnosticSettingsGet(String subscriptionId, String apiVersion, String name) throws ApiException {
        ApiResponse<SubscriptionDiagnosticSettingsResource> localVarResp = subscriptionDiagnosticSettingsGetWithHttpInfo(subscriptionId, apiVersion, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the active subscription diagnostic settings for the specified resource.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @return ApiResponse&lt;SubscriptionDiagnosticSettingsResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get more information about diagnostic setting. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionDiagnosticSettingsResource> subscriptionDiagnosticSettingsGetWithHttpInfo(String subscriptionId, String apiVersion, String name) throws ApiException {
        okhttp3.Call localVarCall = subscriptionDiagnosticSettingsGetValidateBeforeCall(subscriptionId, apiVersion, name, null);
        Type localVarReturnType = new TypeToken<SubscriptionDiagnosticSettingsResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the active subscription diagnostic settings for the specified resource.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param name The name of the diagnostic setting. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get more information about diagnostic setting. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDiagnosticSettingsGetAsync(String subscriptionId, String apiVersion, String name, final ApiCallback<SubscriptionDiagnosticSettingsResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionDiagnosticSettingsGetValidateBeforeCall(subscriptionId, apiVersion, name, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionDiagnosticSettingsResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionDiagnosticSettingsList
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get more information about subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDiagnosticSettingsListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/microsoft.insights/diagnosticSettings"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDiagnosticSettingsListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionDiagnosticSettingsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionDiagnosticSettingsList(Async)");
        }

        return subscriptionDiagnosticSettingsListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the active subscription diagnostic settings list for the specified subscriptionId.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return SubscriptionDiagnosticSettingsResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get more information about subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionDiagnosticSettingsResourceCollection subscriptionDiagnosticSettingsList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SubscriptionDiagnosticSettingsResourceCollection> localVarResp = subscriptionDiagnosticSettingsListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the active subscription diagnostic settings list for the specified subscriptionId.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;SubscriptionDiagnosticSettingsResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get more information about subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionDiagnosticSettingsResourceCollection> subscriptionDiagnosticSettingsListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = subscriptionDiagnosticSettingsListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SubscriptionDiagnosticSettingsResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the active subscription diagnostic settings list for the specified subscriptionId.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get more information about subscription diagnostic setting </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDiagnosticSettingsListAsync(String subscriptionId, String apiVersion, final ApiCallback<SubscriptionDiagnosticSettingsResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionDiagnosticSettingsListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionDiagnosticSettingsResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
