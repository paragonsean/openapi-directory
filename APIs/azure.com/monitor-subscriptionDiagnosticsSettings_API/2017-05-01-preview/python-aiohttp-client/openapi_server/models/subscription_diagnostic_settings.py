# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_log_settings import SubscriptionLogSettings
from openapi_server import util


class SubscriptionDiagnosticSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_hub_authorization_rule_id: str=None, event_hub_name: str=None, logs: List[SubscriptionLogSettings]=None, service_bus_rule_id: str=None, storage_account_id: str=None, workspace_id: str=None):
        """SubscriptionDiagnosticSettings - a model defined in OpenAPI

        :param event_hub_authorization_rule_id: The event_hub_authorization_rule_id of this SubscriptionDiagnosticSettings.
        :param event_hub_name: The event_hub_name of this SubscriptionDiagnosticSettings.
        :param logs: The logs of this SubscriptionDiagnosticSettings.
        :param service_bus_rule_id: The service_bus_rule_id of this SubscriptionDiagnosticSettings.
        :param storage_account_id: The storage_account_id of this SubscriptionDiagnosticSettings.
        :param workspace_id: The workspace_id of this SubscriptionDiagnosticSettings.
        """
        self.openapi_types = {
            'event_hub_authorization_rule_id': str,
            'event_hub_name': str,
            'logs': List[SubscriptionLogSettings],
            'service_bus_rule_id': str,
            'storage_account_id': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'event_hub_authorization_rule_id': 'eventHubAuthorizationRuleId',
            'event_hub_name': 'eventHubName',
            'logs': 'logs',
            'service_bus_rule_id': 'serviceBusRuleId',
            'storage_account_id': 'storageAccountId',
            'workspace_id': 'workspaceId'
        }

        self._event_hub_authorization_rule_id = event_hub_authorization_rule_id
        self._event_hub_name = event_hub_name
        self._logs = logs
        self._service_bus_rule_id = service_bus_rule_id
        self._storage_account_id = storage_account_id
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionDiagnosticSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionDiagnosticSettings of this SubscriptionDiagnosticSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_hub_authorization_rule_id(self):
        """Gets the event_hub_authorization_rule_id of this SubscriptionDiagnosticSettings.

        The resource Id for the event hub authorization rule.

        :return: The event_hub_authorization_rule_id of this SubscriptionDiagnosticSettings.
        :rtype: str
        """
        return self._event_hub_authorization_rule_id

    @event_hub_authorization_rule_id.setter
    def event_hub_authorization_rule_id(self, event_hub_authorization_rule_id):
        """Sets the event_hub_authorization_rule_id of this SubscriptionDiagnosticSettings.

        The resource Id for the event hub authorization rule.

        :param event_hub_authorization_rule_id: The event_hub_authorization_rule_id of this SubscriptionDiagnosticSettings.
        :type event_hub_authorization_rule_id: str
        """

        self._event_hub_authorization_rule_id = event_hub_authorization_rule_id

    @property
    def event_hub_name(self):
        """Gets the event_hub_name of this SubscriptionDiagnosticSettings.

        The name of the event hub. If none is specified, the default event hub will be selected.

        :return: The event_hub_name of this SubscriptionDiagnosticSettings.
        :rtype: str
        """
        return self._event_hub_name

    @event_hub_name.setter
    def event_hub_name(self, event_hub_name):
        """Sets the event_hub_name of this SubscriptionDiagnosticSettings.

        The name of the event hub. If none is specified, the default event hub will be selected.

        :param event_hub_name: The event_hub_name of this SubscriptionDiagnosticSettings.
        :type event_hub_name: str
        """

        self._event_hub_name = event_hub_name

    @property
    def logs(self):
        """Gets the logs of this SubscriptionDiagnosticSettings.

        The list of logs settings.

        :return: The logs of this SubscriptionDiagnosticSettings.
        :rtype: List[SubscriptionLogSettings]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this SubscriptionDiagnosticSettings.

        The list of logs settings.

        :param logs: The logs of this SubscriptionDiagnosticSettings.
        :type logs: List[SubscriptionLogSettings]
        """

        self._logs = logs

    @property
    def service_bus_rule_id(self):
        """Gets the service_bus_rule_id of this SubscriptionDiagnosticSettings.

        The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.

        :return: The service_bus_rule_id of this SubscriptionDiagnosticSettings.
        :rtype: str
        """
        return self._service_bus_rule_id

    @service_bus_rule_id.setter
    def service_bus_rule_id(self, service_bus_rule_id):
        """Sets the service_bus_rule_id of this SubscriptionDiagnosticSettings.

        The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.

        :param service_bus_rule_id: The service_bus_rule_id of this SubscriptionDiagnosticSettings.
        :type service_bus_rule_id: str
        """

        self._service_bus_rule_id = service_bus_rule_id

    @property
    def storage_account_id(self):
        """Gets the storage_account_id of this SubscriptionDiagnosticSettings.

        The resource ID of the storage account to which you would like to send Diagnostic Logs.

        :return: The storage_account_id of this SubscriptionDiagnosticSettings.
        :rtype: str
        """
        return self._storage_account_id

    @storage_account_id.setter
    def storage_account_id(self, storage_account_id):
        """Sets the storage_account_id of this SubscriptionDiagnosticSettings.

        The resource ID of the storage account to which you would like to send Diagnostic Logs.

        :param storage_account_id: The storage_account_id of this SubscriptionDiagnosticSettings.
        :type storage_account_id: str
        """

        self._storage_account_id = storage_account_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this SubscriptionDiagnosticSettings.

        The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2

        :return: The workspace_id of this SubscriptionDiagnosticSettings.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this SubscriptionDiagnosticSettings.

        The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2

        :param workspace_id: The workspace_id of this SubscriptionDiagnosticSettings.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id
