/*
 * ManagedNetworkManagementClient
 * The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a Managed Network Group
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:05.083066-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedNetworkGroupProperties {
  public static final String SERIALIZED_NAME_MANAGEMENT_GROUPS = "managementGroups";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_GROUPS)
  private List<ResourceId> managementGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List<ResourceId> subnets = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBSCRIPTIONS = "subscriptions";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTIONS)
  private List<ResourceId> subscriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORKS = "virtualNetworks";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORKS)
  private List<ResourceId> virtualNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  /**
   * Provisioning state of the ManagedNetwork resource.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed"),
    
    SUCCEEDED("Succeeded");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public ManagedNetworkGroupProperties() {
  }

  public ManagedNetworkGroupProperties(
     String etag, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.etag = etag;
    this.provisioningState = provisioningState;
  }

  public ManagedNetworkGroupProperties managementGroups(List<ResourceId> managementGroups) {
    this.managementGroups = managementGroups;
    return this;
  }

  public ManagedNetworkGroupProperties addManagementGroupsItem(ResourceId managementGroupsItem) {
    if (this.managementGroups == null) {
      this.managementGroups = new ArrayList<>();
    }
    this.managementGroups.add(managementGroupsItem);
    return this;
  }

  /**
   * The collection of management groups covered by the Managed Network
   * @return managementGroups
   */
  @javax.annotation.Nullable
  public List<ResourceId> getManagementGroups() {
    return managementGroups;
  }

  public void setManagementGroups(List<ResourceId> managementGroups) {
    this.managementGroups = managementGroups;
  }


  public ManagedNetworkGroupProperties subnets(List<ResourceId> subnets) {
    this.subnets = subnets;
    return this;
  }

  public ManagedNetworkGroupProperties addSubnetsItem(ResourceId subnetsItem) {
    if (this.subnets == null) {
      this.subnets = new ArrayList<>();
    }
    this.subnets.add(subnetsItem);
    return this;
  }

  /**
   * The collection of  subnets covered by the Managed Network
   * @return subnets
   */
  @javax.annotation.Nullable
  public List<ResourceId> getSubnets() {
    return subnets;
  }

  public void setSubnets(List<ResourceId> subnets) {
    this.subnets = subnets;
  }


  public ManagedNetworkGroupProperties subscriptions(List<ResourceId> subscriptions) {
    this.subscriptions = subscriptions;
    return this;
  }

  public ManagedNetworkGroupProperties addSubscriptionsItem(ResourceId subscriptionsItem) {
    if (this.subscriptions == null) {
      this.subscriptions = new ArrayList<>();
    }
    this.subscriptions.add(subscriptionsItem);
    return this;
  }

  /**
   * The collection of subscriptions covered by the Managed Network
   * @return subscriptions
   */
  @javax.annotation.Nullable
  public List<ResourceId> getSubscriptions() {
    return subscriptions;
  }

  public void setSubscriptions(List<ResourceId> subscriptions) {
    this.subscriptions = subscriptions;
  }


  public ManagedNetworkGroupProperties virtualNetworks(List<ResourceId> virtualNetworks) {
    this.virtualNetworks = virtualNetworks;
    return this;
  }

  public ManagedNetworkGroupProperties addVirtualNetworksItem(ResourceId virtualNetworksItem) {
    if (this.virtualNetworks == null) {
      this.virtualNetworks = new ArrayList<>();
    }
    this.virtualNetworks.add(virtualNetworksItem);
    return this;
  }

  /**
   * The collection of virtual nets covered by the Managed Network
   * @return virtualNetworks
   */
  @javax.annotation.Nullable
  public List<ResourceId> getVirtualNetworks() {
    return virtualNetworks;
  }

  public void setVirtualNetworks(List<ResourceId> virtualNetworks) {
    this.virtualNetworks = virtualNetworks;
  }


  /**
   * A unique read-only string that changes whenever the resource is updated.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  /**
   * Provisioning state of the ManagedNetwork resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedNetworkGroupProperties managedNetworkGroupProperties = (ManagedNetworkGroupProperties) o;
    return Objects.equals(this.managementGroups, managedNetworkGroupProperties.managementGroups) &&
        Objects.equals(this.subnets, managedNetworkGroupProperties.subnets) &&
        Objects.equals(this.subscriptions, managedNetworkGroupProperties.subscriptions) &&
        Objects.equals(this.virtualNetworks, managedNetworkGroupProperties.virtualNetworks) &&
        Objects.equals(this.etag, managedNetworkGroupProperties.etag) &&
        Objects.equals(this.provisioningState, managedNetworkGroupProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(managementGroups, subnets, subscriptions, virtualNetworks, etag, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedNetworkGroupProperties {\n");
    sb.append("    managementGroups: ").append(toIndentedString(managementGroups)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("    subscriptions: ").append(toIndentedString(subscriptions)).append("\n");
    sb.append("    virtualNetworks: ").append(toIndentedString(virtualNetworks)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("etag");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedNetworkGroupProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedNetworkGroupProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedNetworkGroupProperties is not found in the empty JSON string", ManagedNetworkGroupProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedNetworkGroupProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedNetworkGroupProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("managementGroups") != null && !jsonObj.get("managementGroups").isJsonNull()) {
        JsonArray jsonArraymanagementGroups = jsonObj.getAsJsonArray("managementGroups");
        if (jsonArraymanagementGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("managementGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `managementGroups` to be an array in the JSON string but got `%s`", jsonObj.get("managementGroups").toString()));
          }

          // validate the optional field `managementGroups` (array)
          for (int i = 0; i < jsonArraymanagementGroups.size(); i++) {
            ResourceId.validateJsonElement(jsonArraymanagementGroups.get(i));
          };
        }
      }
      if (jsonObj.get("subnets") != null && !jsonObj.get("subnets").isJsonNull()) {
        JsonArray jsonArraysubnets = jsonObj.getAsJsonArray("subnets");
        if (jsonArraysubnets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subnets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subnets` to be an array in the JSON string but got `%s`", jsonObj.get("subnets").toString()));
          }

          // validate the optional field `subnets` (array)
          for (int i = 0; i < jsonArraysubnets.size(); i++) {
            ResourceId.validateJsonElement(jsonArraysubnets.get(i));
          };
        }
      }
      if (jsonObj.get("subscriptions") != null && !jsonObj.get("subscriptions").isJsonNull()) {
        JsonArray jsonArraysubscriptions = jsonObj.getAsJsonArray("subscriptions");
        if (jsonArraysubscriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subscriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subscriptions` to be an array in the JSON string but got `%s`", jsonObj.get("subscriptions").toString()));
          }

          // validate the optional field `subscriptions` (array)
          for (int i = 0; i < jsonArraysubscriptions.size(); i++) {
            ResourceId.validateJsonElement(jsonArraysubscriptions.get(i));
          };
        }
      }
      if (jsonObj.get("virtualNetworks") != null && !jsonObj.get("virtualNetworks").isJsonNull()) {
        JsonArray jsonArrayvirtualNetworks = jsonObj.getAsJsonArray("virtualNetworks");
        if (jsonArrayvirtualNetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualNetworks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("virtualNetworks").toString()));
          }

          // validate the optional field `virtualNetworks` (array)
          for (int i = 0; i < jsonArrayvirtualNetworks.size(); i++) {
            ResourceId.validateJsonElement(jsonArrayvirtualNetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedNetworkGroupProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedNetworkGroupProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedNetworkGroupProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedNetworkGroupProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedNetworkGroupProperties>() {
           @Override
           public void write(JsonWriter out, ManagedNetworkGroupProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedNetworkGroupProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedNetworkGroupProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedNetworkGroupProperties
   * @throws IOException if the JSON string is invalid with respect to ManagedNetworkGroupProperties
   */
  public static ManagedNetworkGroupProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedNetworkGroupProperties.class);
  }

  /**
   * Convert an instance of ManagedNetworkGroupProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

