# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScopeAssignmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_managed_network: str=None, etag: str=None, provisioning_state: str=None):
        """ScopeAssignmentProperties - a model defined in OpenAPI

        :param assigned_managed_network: The assigned_managed_network of this ScopeAssignmentProperties.
        :param etag: The etag of this ScopeAssignmentProperties.
        :param provisioning_state: The provisioning_state of this ScopeAssignmentProperties.
        """
        self.openapi_types = {
            'assigned_managed_network': str,
            'etag': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'assigned_managed_network': 'assignedManagedNetwork',
            'etag': 'etag',
            'provisioning_state': 'provisioningState'
        }

        self._assigned_managed_network = assigned_managed_network
        self._etag = etag
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScopeAssignmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScopeAssignmentProperties of this ScopeAssignmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_managed_network(self):
        """Gets the assigned_managed_network of this ScopeAssignmentProperties.

        The managed network ID with scope will be assigned to.

        :return: The assigned_managed_network of this ScopeAssignmentProperties.
        :rtype: str
        """
        return self._assigned_managed_network

    @assigned_managed_network.setter
    def assigned_managed_network(self, assigned_managed_network):
        """Sets the assigned_managed_network of this ScopeAssignmentProperties.

        The managed network ID with scope will be assigned to.

        :param assigned_managed_network: The assigned_managed_network of this ScopeAssignmentProperties.
        :type assigned_managed_network: str
        """

        self._assigned_managed_network = assigned_managed_network

    @property
    def etag(self):
        """Gets the etag of this ScopeAssignmentProperties.

        A unique read-only string that changes whenever the resource is updated.

        :return: The etag of this ScopeAssignmentProperties.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ScopeAssignmentProperties.

        A unique read-only string that changes whenever the resource is updated.

        :param etag: The etag of this ScopeAssignmentProperties.
        :type etag: str
        """

        self._etag = etag

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ScopeAssignmentProperties.

        Provisioning state of the ManagedNetwork resource.

        :return: The provisioning_state of this ScopeAssignmentProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ScopeAssignmentProperties.

        Provisioning state of the ManagedNetwork resource.

        :param provisioning_state: The provisioning_state of this ScopeAssignmentProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Updating", "Deleting", "Failed", "Succeeded"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
