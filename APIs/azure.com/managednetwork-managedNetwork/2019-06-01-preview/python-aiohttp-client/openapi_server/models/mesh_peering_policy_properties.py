# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_id import ResourceId
from openapi_server import util


class MeshPeeringPolicyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mesh: List[ResourceId]=None, hub: ResourceId=None, spokes: List[ResourceId]=None, type: str=None, etag: str=None, provisioning_state: str=None):
        """MeshPeeringPolicyProperties - a model defined in OpenAPI

        :param mesh: The mesh of this MeshPeeringPolicyProperties.
        :param hub: The hub of this MeshPeeringPolicyProperties.
        :param spokes: The spokes of this MeshPeeringPolicyProperties.
        :param type: The type of this MeshPeeringPolicyProperties.
        :param etag: The etag of this MeshPeeringPolicyProperties.
        :param provisioning_state: The provisioning_state of this MeshPeeringPolicyProperties.
        """
        self.openapi_types = {
            'mesh': List[ResourceId],
            'hub': ResourceId,
            'spokes': List[ResourceId],
            'type': str,
            'etag': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'mesh': 'mesh',
            'hub': 'hub',
            'spokes': 'spokes',
            'type': 'type',
            'etag': 'etag',
            'provisioning_state': 'provisioningState'
        }

        self._mesh = mesh
        self._hub = hub
        self._spokes = spokes
        self._type = type
        self._etag = etag
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MeshPeeringPolicyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MeshPeeringPolicyProperties of this MeshPeeringPolicyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mesh(self):
        """Gets the mesh of this MeshPeeringPolicyProperties.

        Gets or sets the mesh group IDs

        :return: The mesh of this MeshPeeringPolicyProperties.
        :rtype: List[ResourceId]
        """
        return self._mesh

    @mesh.setter
    def mesh(self, mesh):
        """Sets the mesh of this MeshPeeringPolicyProperties.

        Gets or sets the mesh group IDs

        :param mesh: The mesh of this MeshPeeringPolicyProperties.
        :type mesh: List[ResourceId]
        """

        self._mesh = mesh

    @property
    def hub(self):
        """Gets the hub of this MeshPeeringPolicyProperties.


        :return: The hub of this MeshPeeringPolicyProperties.
        :rtype: ResourceId
        """
        return self._hub

    @hub.setter
    def hub(self, hub):
        """Sets the hub of this MeshPeeringPolicyProperties.


        :param hub: The hub of this MeshPeeringPolicyProperties.
        :type hub: ResourceId
        """

        self._hub = hub

    @property
    def spokes(self):
        """Gets the spokes of this MeshPeeringPolicyProperties.

        Gets or sets the spokes group IDs

        :return: The spokes of this MeshPeeringPolicyProperties.
        :rtype: List[ResourceId]
        """
        return self._spokes

    @spokes.setter
    def spokes(self, spokes):
        """Sets the spokes of this MeshPeeringPolicyProperties.

        Gets or sets the spokes group IDs

        :param spokes: The spokes of this MeshPeeringPolicyProperties.
        :type spokes: List[ResourceId]
        """

        self._spokes = spokes

    @property
    def type(self):
        """Gets the type of this MeshPeeringPolicyProperties.

        Gets or sets the connectivity type of a network structure policy

        :return: The type of this MeshPeeringPolicyProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MeshPeeringPolicyProperties.

        Gets or sets the connectivity type of a network structure policy

        :param type: The type of this MeshPeeringPolicyProperties.
        :type type: str
        """
        allowed_values = ["HubAndSpokeTopology", "MeshTopology"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def etag(self):
        """Gets the etag of this MeshPeeringPolicyProperties.

        A unique read-only string that changes whenever the resource is updated.

        :return: The etag of this MeshPeeringPolicyProperties.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this MeshPeeringPolicyProperties.

        A unique read-only string that changes whenever the resource is updated.

        :param etag: The etag of this MeshPeeringPolicyProperties.
        :type etag: str
        """

        self._etag = etag

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this MeshPeeringPolicyProperties.

        Provisioning state of the ManagedNetwork resource.

        :return: The provisioning_state of this MeshPeeringPolicyProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this MeshPeeringPolicyProperties.

        Provisioning state of the ManagedNetwork resource.

        :param provisioning_state: The provisioning_state of this MeshPeeringPolicyProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Updating", "Deleting", "Failed", "Succeeded"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
