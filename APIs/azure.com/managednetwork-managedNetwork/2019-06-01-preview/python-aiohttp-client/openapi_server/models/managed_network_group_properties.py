# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_id import ResourceId
from openapi_server import util


class ManagedNetworkGroupProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, management_groups: List[ResourceId]=None, subnets: List[ResourceId]=None, subscriptions: List[ResourceId]=None, virtual_networks: List[ResourceId]=None, etag: str=None, provisioning_state: str=None):
        """ManagedNetworkGroupProperties - a model defined in OpenAPI

        :param management_groups: The management_groups of this ManagedNetworkGroupProperties.
        :param subnets: The subnets of this ManagedNetworkGroupProperties.
        :param subscriptions: The subscriptions of this ManagedNetworkGroupProperties.
        :param virtual_networks: The virtual_networks of this ManagedNetworkGroupProperties.
        :param etag: The etag of this ManagedNetworkGroupProperties.
        :param provisioning_state: The provisioning_state of this ManagedNetworkGroupProperties.
        """
        self.openapi_types = {
            'management_groups': List[ResourceId],
            'subnets': List[ResourceId],
            'subscriptions': List[ResourceId],
            'virtual_networks': List[ResourceId],
            'etag': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'management_groups': 'managementGroups',
            'subnets': 'subnets',
            'subscriptions': 'subscriptions',
            'virtual_networks': 'virtualNetworks',
            'etag': 'etag',
            'provisioning_state': 'provisioningState'
        }

        self._management_groups = management_groups
        self._subnets = subnets
        self._subscriptions = subscriptions
        self._virtual_networks = virtual_networks
        self._etag = etag
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedNetworkGroupProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedNetworkGroupProperties of this ManagedNetworkGroupProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def management_groups(self):
        """Gets the management_groups of this ManagedNetworkGroupProperties.

        The collection of management groups covered by the Managed Network

        :return: The management_groups of this ManagedNetworkGroupProperties.
        :rtype: List[ResourceId]
        """
        return self._management_groups

    @management_groups.setter
    def management_groups(self, management_groups):
        """Sets the management_groups of this ManagedNetworkGroupProperties.

        The collection of management groups covered by the Managed Network

        :param management_groups: The management_groups of this ManagedNetworkGroupProperties.
        :type management_groups: List[ResourceId]
        """

        self._management_groups = management_groups

    @property
    def subnets(self):
        """Gets the subnets of this ManagedNetworkGroupProperties.

        The collection of  subnets covered by the Managed Network

        :return: The subnets of this ManagedNetworkGroupProperties.
        :rtype: List[ResourceId]
        """
        return self._subnets

    @subnets.setter
    def subnets(self, subnets):
        """Sets the subnets of this ManagedNetworkGroupProperties.

        The collection of  subnets covered by the Managed Network

        :param subnets: The subnets of this ManagedNetworkGroupProperties.
        :type subnets: List[ResourceId]
        """

        self._subnets = subnets

    @property
    def subscriptions(self):
        """Gets the subscriptions of this ManagedNetworkGroupProperties.

        The collection of subscriptions covered by the Managed Network

        :return: The subscriptions of this ManagedNetworkGroupProperties.
        :rtype: List[ResourceId]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this ManagedNetworkGroupProperties.

        The collection of subscriptions covered by the Managed Network

        :param subscriptions: The subscriptions of this ManagedNetworkGroupProperties.
        :type subscriptions: List[ResourceId]
        """

        self._subscriptions = subscriptions

    @property
    def virtual_networks(self):
        """Gets the virtual_networks of this ManagedNetworkGroupProperties.

        The collection of virtual nets covered by the Managed Network

        :return: The virtual_networks of this ManagedNetworkGroupProperties.
        :rtype: List[ResourceId]
        """
        return self._virtual_networks

    @virtual_networks.setter
    def virtual_networks(self, virtual_networks):
        """Sets the virtual_networks of this ManagedNetworkGroupProperties.

        The collection of virtual nets covered by the Managed Network

        :param virtual_networks: The virtual_networks of this ManagedNetworkGroupProperties.
        :type virtual_networks: List[ResourceId]
        """

        self._virtual_networks = virtual_networks

    @property
    def etag(self):
        """Gets the etag of this ManagedNetworkGroupProperties.

        A unique read-only string that changes whenever the resource is updated.

        :return: The etag of this ManagedNetworkGroupProperties.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ManagedNetworkGroupProperties.

        A unique read-only string that changes whenever the resource is updated.

        :param etag: The etag of this ManagedNetworkGroupProperties.
        :type etag: str
        """

        self._etag = etag

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ManagedNetworkGroupProperties.

        Provisioning state of the ManagedNetwork resource.

        :return: The provisioning_state of this ManagedNetworkGroupProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ManagedNetworkGroupProperties.

        Provisioning state of the ManagedNetwork resource.

        :param provisioning_state: The provisioning_state of this ManagedNetworkGroupProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Updating", "Deleting", "Failed", "Succeeded"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
