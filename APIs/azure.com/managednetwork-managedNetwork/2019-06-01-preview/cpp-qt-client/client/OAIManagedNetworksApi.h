/**
 * ManagedNetworkManagementClient
 * The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagedNetworksApi_H
#define OAI_OAIManagedNetworksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIManagedNetwork.h"
#include "OAIManagedNetworkListResult.h"
#include "OAIManagedNetworkUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagedNetworksApi : public QObject {
    Q_OBJECT

public:
    OAIManagedNetworksApi(const int timeOut = 0);
    ~OAIManagedNetworksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_network_name QString [required]
    * @param[in]  managed_network OAIManagedNetwork [required]
    */
    virtual void managedNetworksCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &managed_network_name, const OAIManagedNetwork &managed_network);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_network_name QString [required]
    */
    virtual void managedNetworksDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &managed_network_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_network_name QString [required]
    */
    virtual void managedNetworksGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &managed_network_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void managedNetworksListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void managedNetworksListBySubscription(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  managed_network_name QString [required]
    * @param[in]  parameters OAIManagedNetworkUpdate [required]
    */
    virtual void managedNetworksUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &managed_network_name, const OAIManagedNetworkUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void managedNetworksCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void managedNetworksDeleteCallback(OAIHttpRequestWorker *worker);
    void managedNetworksGetCallback(OAIHttpRequestWorker *worker);
    void managedNetworksListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void managedNetworksListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void managedNetworksUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void managedNetworksCreateOrUpdateSignal(OAIManagedNetwork summary);
    void managedNetworksDeleteSignal();
    void managedNetworksGetSignal(OAIManagedNetwork summary);
    void managedNetworksListByResourceGroupSignal(OAIManagedNetworkListResult summary);
    void managedNetworksListBySubscriptionSignal(OAIManagedNetworkListResult summary);
    void managedNetworksUpdateSignal(OAIManagedNetwork summary);


    void managedNetworksCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManagedNetwork summary);
    void managedNetworksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void managedNetworksGetSignalFull(OAIHttpRequestWorker *worker, OAIManagedNetwork summary);
    void managedNetworksListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIManagedNetworkListResult summary);
    void managedNetworksListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIManagedNetworkListResult summary);
    void managedNetworksUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManagedNetwork summary);

    Q_DECL_DEPRECATED_X("Use managedNetworksCreateOrUpdateSignalError() instead")
    void managedNetworksCreateOrUpdateSignalE(OAIManagedNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksCreateOrUpdateSignalError(OAIManagedNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedNetworksDeleteSignalError() instead")
    void managedNetworksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedNetworksGetSignalError() instead")
    void managedNetworksGetSignalE(OAIManagedNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksGetSignalError(OAIManagedNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedNetworksListByResourceGroupSignalError() instead")
    void managedNetworksListByResourceGroupSignalE(OAIManagedNetworkListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksListByResourceGroupSignalError(OAIManagedNetworkListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedNetworksListBySubscriptionSignalError() instead")
    void managedNetworksListBySubscriptionSignalE(OAIManagedNetworkListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksListBySubscriptionSignalError(OAIManagedNetworkListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedNetworksUpdateSignalError() instead")
    void managedNetworksUpdateSignalE(OAIManagedNetwork summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksUpdateSignalError(OAIManagedNetwork summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use managedNetworksCreateOrUpdateSignalErrorFull() instead")
    void managedNetworksCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedNetworksDeleteSignalErrorFull() instead")
    void managedNetworksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedNetworksGetSignalErrorFull() instead")
    void managedNetworksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedNetworksListByResourceGroupSignalErrorFull() instead")
    void managedNetworksListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedNetworksListBySubscriptionSignalErrorFull() instead")
    void managedNetworksListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedNetworksUpdateSignalErrorFull() instead")
    void managedNetworksUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedNetworksUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
