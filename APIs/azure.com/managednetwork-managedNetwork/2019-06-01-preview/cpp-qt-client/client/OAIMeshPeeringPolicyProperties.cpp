/**
 * ManagedNetworkManagementClient
 * The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeshPeeringPolicyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeshPeeringPolicyProperties::OAIMeshPeeringPolicyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeshPeeringPolicyProperties::OAIMeshPeeringPolicyProperties() {
    this->initializeModel();
}

OAIMeshPeeringPolicyProperties::~OAIMeshPeeringPolicyProperties() {}

void OAIMeshPeeringPolicyProperties::initializeModel() {

    m_mesh_isSet = false;
    m_mesh_isValid = false;

    m_hub_isSet = false;
    m_hub_isValid = false;

    m_spokes_isSet = false;
    m_spokes_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIMeshPeeringPolicyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeshPeeringPolicyProperties::fromJsonObject(QJsonObject json) {

    m_mesh_isValid = ::OpenAPI::fromJsonValue(m_mesh, json[QString("mesh")]);
    m_mesh_isSet = !json[QString("mesh")].isNull() && m_mesh_isValid;

    m_hub_isValid = ::OpenAPI::fromJsonValue(m_hub, json[QString("hub")]);
    m_hub_isSet = !json[QString("hub")].isNull() && m_hub_isValid;

    m_spokes_isValid = ::OpenAPI::fromJsonValue(m_spokes, json[QString("spokes")]);
    m_spokes_isSet = !json[QString("spokes")].isNull() && m_spokes_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIMeshPeeringPolicyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeshPeeringPolicyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_mesh.size() > 0) {
        obj.insert(QString("mesh"), ::OpenAPI::toJsonValue(m_mesh));
    }
    if (m_hub.isSet()) {
        obj.insert(QString("hub"), ::OpenAPI::toJsonValue(m_hub));
    }
    if (m_spokes.size() > 0) {
        obj.insert(QString("spokes"), ::OpenAPI::toJsonValue(m_spokes));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QList<OAIResourceId> OAIMeshPeeringPolicyProperties::getMesh() const {
    return m_mesh;
}
void OAIMeshPeeringPolicyProperties::setMesh(const QList<OAIResourceId> &mesh) {
    m_mesh = mesh;
    m_mesh_isSet = true;
}

bool OAIMeshPeeringPolicyProperties::is_mesh_Set() const{
    return m_mesh_isSet;
}

bool OAIMeshPeeringPolicyProperties::is_mesh_Valid() const{
    return m_mesh_isValid;
}

OAIResourceId OAIMeshPeeringPolicyProperties::getHub() const {
    return m_hub;
}
void OAIMeshPeeringPolicyProperties::setHub(const OAIResourceId &hub) {
    m_hub = hub;
    m_hub_isSet = true;
}

bool OAIMeshPeeringPolicyProperties::is_hub_Set() const{
    return m_hub_isSet;
}

bool OAIMeshPeeringPolicyProperties::is_hub_Valid() const{
    return m_hub_isValid;
}

QList<OAIResourceId> OAIMeshPeeringPolicyProperties::getSpokes() const {
    return m_spokes;
}
void OAIMeshPeeringPolicyProperties::setSpokes(const QList<OAIResourceId> &spokes) {
    m_spokes = spokes;
    m_spokes_isSet = true;
}

bool OAIMeshPeeringPolicyProperties::is_spokes_Set() const{
    return m_spokes_isSet;
}

bool OAIMeshPeeringPolicyProperties::is_spokes_Valid() const{
    return m_spokes_isValid;
}

QString OAIMeshPeeringPolicyProperties::getType() const {
    return m_type;
}
void OAIMeshPeeringPolicyProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMeshPeeringPolicyProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMeshPeeringPolicyProperties::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMeshPeeringPolicyProperties::getEtag() const {
    return m_etag;
}
void OAIMeshPeeringPolicyProperties::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIMeshPeeringPolicyProperties::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIMeshPeeringPolicyProperties::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIMeshPeeringPolicyProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIMeshPeeringPolicyProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIMeshPeeringPolicyProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIMeshPeeringPolicyProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIMeshPeeringPolicyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mesh.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spokes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeshPeeringPolicyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
