/**
 * ManagedNetworkManagementClient
 * The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedNetworkProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedNetworkProperties::OAIManagedNetworkProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedNetworkProperties::OAIManagedNetworkProperties() {
    this->initializeModel();
}

OAIManagedNetworkProperties::~OAIManagedNetworkProperties() {}

void OAIManagedNetworkProperties::initializeModel() {

    m_connectivity_isSet = false;
    m_connectivity_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIManagedNetworkProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedNetworkProperties::fromJsonObject(QJsonObject json) {

    m_connectivity_isValid = ::OpenAPI::fromJsonValue(m_connectivity, json[QString("connectivity")]);
    m_connectivity_isSet = !json[QString("connectivity")].isNull() && m_connectivity_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIManagedNetworkProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedNetworkProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_connectivity.isSet()) {
        obj.insert(QString("connectivity"), ::OpenAPI::toJsonValue(m_connectivity));
    }
    if (m_scope.isSet()) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

OAIConnectivityCollection OAIManagedNetworkProperties::getConnectivity() const {
    return m_connectivity;
}
void OAIManagedNetworkProperties::setConnectivity(const OAIConnectivityCollection &connectivity) {
    m_connectivity = connectivity;
    m_connectivity_isSet = true;
}

bool OAIManagedNetworkProperties::is_connectivity_Set() const{
    return m_connectivity_isSet;
}

bool OAIManagedNetworkProperties::is_connectivity_Valid() const{
    return m_connectivity_isValid;
}

OAIScope OAIManagedNetworkProperties::getScope() const {
    return m_scope;
}
void OAIManagedNetworkProperties::setScope(const OAIScope &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIManagedNetworkProperties::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIManagedNetworkProperties::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIManagedNetworkProperties::getEtag() const {
    return m_etag;
}
void OAIManagedNetworkProperties::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIManagedNetworkProperties::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIManagedNetworkProperties::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIManagedNetworkProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIManagedNetworkProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIManagedNetworkProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIManagedNetworkProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIManagedNetworkProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connectivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedNetworkProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
