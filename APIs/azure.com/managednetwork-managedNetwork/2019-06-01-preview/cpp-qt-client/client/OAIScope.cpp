/**
 * ManagedNetworkManagementClient
 * The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScope::OAIScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScope::OAIScope() {
    this->initializeModel();
}

OAIScope::~OAIScope() {}

void OAIScope::initializeModel() {

    m_management_groups_isSet = false;
    m_management_groups_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_subscriptions_isSet = false;
    m_subscriptions_isValid = false;

    m_virtual_networks_isSet = false;
    m_virtual_networks_isValid = false;
}

void OAIScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScope::fromJsonObject(QJsonObject json) {

    m_management_groups_isValid = ::OpenAPI::fromJsonValue(m_management_groups, json[QString("managementGroups")]);
    m_management_groups_isSet = !json[QString("managementGroups")].isNull() && m_management_groups_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;

    m_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_subscriptions, json[QString("subscriptions")]);
    m_subscriptions_isSet = !json[QString("subscriptions")].isNull() && m_subscriptions_isValid;

    m_virtual_networks_isValid = ::OpenAPI::fromJsonValue(m_virtual_networks, json[QString("virtualNetworks")]);
    m_virtual_networks_isSet = !json[QString("virtualNetworks")].isNull() && m_virtual_networks_isValid;
}

QString OAIScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScope::asJsonObject() const {
    QJsonObject obj;
    if (m_management_groups.size() > 0) {
        obj.insert(QString("managementGroups"), ::OpenAPI::toJsonValue(m_management_groups));
    }
    if (m_subnets.size() > 0) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_subscriptions.size() > 0) {
        obj.insert(QString("subscriptions"), ::OpenAPI::toJsonValue(m_subscriptions));
    }
    if (m_virtual_networks.size() > 0) {
        obj.insert(QString("virtualNetworks"), ::OpenAPI::toJsonValue(m_virtual_networks));
    }
    return obj;
}

QList<OAIResourceId> OAIScope::getManagementGroups() const {
    return m_management_groups;
}
void OAIScope::setManagementGroups(const QList<OAIResourceId> &management_groups) {
    m_management_groups = management_groups;
    m_management_groups_isSet = true;
}

bool OAIScope::is_management_groups_Set() const{
    return m_management_groups_isSet;
}

bool OAIScope::is_management_groups_Valid() const{
    return m_management_groups_isValid;
}

QList<OAIResourceId> OAIScope::getSubnets() const {
    return m_subnets;
}
void OAIScope::setSubnets(const QList<OAIResourceId> &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIScope::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIScope::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QList<OAIResourceId> OAIScope::getSubscriptions() const {
    return m_subscriptions;
}
void OAIScope::setSubscriptions(const QList<OAIResourceId> &subscriptions) {
    m_subscriptions = subscriptions;
    m_subscriptions_isSet = true;
}

bool OAIScope::is_subscriptions_Set() const{
    return m_subscriptions_isSet;
}

bool OAIScope::is_subscriptions_Valid() const{
    return m_subscriptions_isValid;
}

QList<OAIResourceId> OAIScope::getVirtualNetworks() const {
    return m_virtual_networks;
}
void OAIScope::setVirtualNetworks(const QList<OAIResourceId> &virtual_networks) {
    m_virtual_networks = virtual_networks;
    m_virtual_networks_isSet = true;
}

bool OAIScope::is_virtual_networks_Set() const{
    return m_virtual_networks_isSet;
}

bool OAIScope::is_virtual_networks_Valid() const{
    return m_virtual_networks_isValid;
}

bool OAIScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_management_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
