/**
 * ManagedNetworkManagementClient
 * The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceId from './ResourceId';
import ResourceProperties from './ResourceProperties';

/**
 * The ManagedNetworkGroupProperties model module.
 * @module model/ManagedNetworkGroupProperties
 * @version 2019-06-01-preview
 */
class ManagedNetworkGroupProperties {
    /**
     * Constructs a new <code>ManagedNetworkGroupProperties</code>.
     * Properties of a Managed Network Group
     * @alias module:model/ManagedNetworkGroupProperties
     * @implements module:model/ResourceProperties
     */
    constructor() { 
        ResourceProperties.initialize(this);
        ManagedNetworkGroupProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagedNetworkGroupProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedNetworkGroupProperties} obj Optional instance to populate.
     * @return {module:model/ManagedNetworkGroupProperties} The populated <code>ManagedNetworkGroupProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedNetworkGroupProperties();
            ResourceProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('managementGroups')) {
                obj['managementGroups'] = ApiClient.convertToType(data['managementGroups'], [ResourceId]);
            }
            if (data.hasOwnProperty('subnets')) {
                obj['subnets'] = ApiClient.convertToType(data['subnets'], [ResourceId]);
            }
            if (data.hasOwnProperty('subscriptions')) {
                obj['subscriptions'] = ApiClient.convertToType(data['subscriptions'], [ResourceId]);
            }
            if (data.hasOwnProperty('virtualNetworks')) {
                obj['virtualNetworks'] = ApiClient.convertToType(data['virtualNetworks'], [ResourceId]);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedNetworkGroupProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedNetworkGroupProperties</code>.
     */
    static validateJSON(data) {
        if (data['managementGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['managementGroups'])) {
                throw new Error("Expected the field `managementGroups` to be an array in the JSON data but got " + data['managementGroups']);
            }
            // validate the optional field `managementGroups` (array)
            for (const item of data['managementGroups']) {
                ResourceId.validateJSON(item);
            };
        }
        if (data['subnets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subnets'])) {
                throw new Error("Expected the field `subnets` to be an array in the JSON data but got " + data['subnets']);
            }
            // validate the optional field `subnets` (array)
            for (const item of data['subnets']) {
                ResourceId.validateJSON(item);
            };
        }
        if (data['subscriptions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subscriptions'])) {
                throw new Error("Expected the field `subscriptions` to be an array in the JSON data but got " + data['subscriptions']);
            }
            // validate the optional field `subscriptions` (array)
            for (const item of data['subscriptions']) {
                ResourceId.validateJSON(item);
            };
        }
        if (data['virtualNetworks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['virtualNetworks'])) {
                throw new Error("Expected the field `virtualNetworks` to be an array in the JSON data but got " + data['virtualNetworks']);
            }
            // validate the optional field `virtualNetworks` (array)
            for (const item of data['virtualNetworks']) {
                ResourceId.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * The collection of management groups covered by the Managed Network
 * @member {Array.<module:model/ResourceId>} managementGroups
 */
ManagedNetworkGroupProperties.prototype['managementGroups'] = undefined;

/**
 * The collection of  subnets covered by the Managed Network
 * @member {Array.<module:model/ResourceId>} subnets
 */
ManagedNetworkGroupProperties.prototype['subnets'] = undefined;

/**
 * The collection of subscriptions covered by the Managed Network
 * @member {Array.<module:model/ResourceId>} subscriptions
 */
ManagedNetworkGroupProperties.prototype['subscriptions'] = undefined;

/**
 * The collection of virtual nets covered by the Managed Network
 * @member {Array.<module:model/ResourceId>} virtualNetworks
 */
ManagedNetworkGroupProperties.prototype['virtualNetworks'] = undefined;

/**
 * A unique read-only string that changes whenever the resource is updated.
 * @member {String} etag
 */
ManagedNetworkGroupProperties.prototype['etag'] = undefined;

/**
 * Provisioning state of the ManagedNetwork resource.
 * @member {module:model/ManagedNetworkGroupProperties.ProvisioningStateEnum} provisioningState
 */
ManagedNetworkGroupProperties.prototype['provisioningState'] = undefined;


// Implement ResourceProperties interface:
/**
 * A unique read-only string that changes whenever the resource is updated.
 * @member {String} etag
 */
ResourceProperties.prototype['etag'] = undefined;
/**
 * Provisioning state of the ManagedNetwork resource.
 * @member {module:model/ResourceProperties.ProvisioningStateEnum} provisioningState
 */
ResourceProperties.prototype['provisioningState'] = undefined;



/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ManagedNetworkGroupProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded"
};



export default ManagedNetworkGroupProperties;

