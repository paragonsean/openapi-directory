/**
 * ManagedNetworkManagementClient
 * The Microsoft Azure Managed Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to programmatically view, control, change, and monitor your entire Azure network centrally and with ease.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ManagedNetworkPeeringPolicyProperties from './ManagedNetworkPeeringPolicyProperties';
import ResourceId from './ResourceId';

/**
 * The MeshPeeringPolicyProperties model module.
 * @module model/MeshPeeringPolicyProperties
 * @version 2019-06-01-preview
 */
class MeshPeeringPolicyProperties {
    /**
     * Constructs a new <code>MeshPeeringPolicyProperties</code>.
     * Properties of a Mesh Peering Policy
     * @alias module:model/MeshPeeringPolicyProperties
     * @implements module:model/ManagedNetworkPeeringPolicyProperties
     * @param type {module:model/MeshPeeringPolicyProperties.TypeEnum} Gets or sets the connectivity type of a network structure policy
     */
    constructor(type) { 
        ManagedNetworkPeeringPolicyProperties.initialize(this);
        MeshPeeringPolicyProperties.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>MeshPeeringPolicyProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MeshPeeringPolicyProperties} obj Optional instance to populate.
     * @return {module:model/MeshPeeringPolicyProperties} The populated <code>MeshPeeringPolicyProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MeshPeeringPolicyProperties();
            ManagedNetworkPeeringPolicyProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('mesh')) {
                obj['mesh'] = ApiClient.convertToType(data['mesh'], [ResourceId]);
            }
            if (data.hasOwnProperty('hub')) {
                obj['hub'] = ResourceId.constructFromObject(data['hub']);
            }
            if (data.hasOwnProperty('spokes')) {
                obj['spokes'] = ApiClient.convertToType(data['spokes'], [ResourceId]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MeshPeeringPolicyProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MeshPeeringPolicyProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MeshPeeringPolicyProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['mesh']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mesh'])) {
                throw new Error("Expected the field `mesh` to be an array in the JSON data but got " + data['mesh']);
            }
            // validate the optional field `mesh` (array)
            for (const item of data['mesh']) {
                ResourceId.validateJSON(item);
            };
        }
        // validate the optional field `hub`
        if (data['hub']) { // data not null
          ResourceId.validateJSON(data['hub']);
        }
        if (data['spokes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['spokes'])) {
                throw new Error("Expected the field `spokes` to be an array in the JSON data but got " + data['spokes']);
            }
            // validate the optional field `spokes` (array)
            for (const item of data['spokes']) {
                ResourceId.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}

MeshPeeringPolicyProperties.RequiredProperties = ["type"];

/**
 * Gets or sets the mesh group IDs
 * @member {Array.<module:model/ResourceId>} mesh
 */
MeshPeeringPolicyProperties.prototype['mesh'] = undefined;

/**
 * @member {module:model/ResourceId} hub
 */
MeshPeeringPolicyProperties.prototype['hub'] = undefined;

/**
 * Gets or sets the spokes group IDs
 * @member {Array.<module:model/ResourceId>} spokes
 */
MeshPeeringPolicyProperties.prototype['spokes'] = undefined;

/**
 * Gets or sets the connectivity type of a network structure policy
 * @member {module:model/MeshPeeringPolicyProperties.TypeEnum} type
 */
MeshPeeringPolicyProperties.prototype['type'] = undefined;

/**
 * A unique read-only string that changes whenever the resource is updated.
 * @member {String} etag
 */
MeshPeeringPolicyProperties.prototype['etag'] = undefined;

/**
 * Provisioning state of the ManagedNetwork resource.
 * @member {module:model/MeshPeeringPolicyProperties.ProvisioningStateEnum} provisioningState
 */
MeshPeeringPolicyProperties.prototype['provisioningState'] = undefined;


// Implement ManagedNetworkPeeringPolicyProperties interface:
/**
 * A unique read-only string that changes whenever the resource is updated.
 * @member {String} etag
 */
ManagedNetworkPeeringPolicyProperties.prototype['etag'] = undefined;
/**
 * Provisioning state of the ManagedNetwork resource.
 * @member {module:model/ManagedNetworkPeeringPolicyProperties.ProvisioningStateEnum} provisioningState
 */
ManagedNetworkPeeringPolicyProperties.prototype['provisioningState'] = undefined;



/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MeshPeeringPolicyProperties['TypeEnum'] = {

    /**
     * value: "HubAndSpokeTopology"
     * @const
     */
    "HubAndSpokeTopology": "HubAndSpokeTopology",

    /**
     * value: "MeshTopology"
     * @const
     */
    "MeshTopology": "MeshTopology"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
MeshPeeringPolicyProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded"
};



export default MeshPeeringPolicyProperties;

