# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RetryPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, retry_count: int=None, retry_interval: str=None, retry_type: str=None):
        """RetryPolicy - a model defined in OpenAPI

        :param retry_count: The retry_count of this RetryPolicy.
        :param retry_interval: The retry_interval of this RetryPolicy.
        :param retry_type: The retry_type of this RetryPolicy.
        """
        self.openapi_types = {
            'retry_count': int,
            'retry_interval': str,
            'retry_type': str
        }

        self.attribute_map = {
            'retry_count': 'retryCount',
            'retry_interval': 'retryInterval',
            'retry_type': 'retryType'
        }

        self._retry_count = retry_count
        self._retry_interval = retry_interval
        self._retry_type = retry_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RetryPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RetryPolicy of this RetryPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def retry_count(self):
        """Gets the retry_count of this RetryPolicy.

        Gets or sets the number of times a retry should be attempted.

        :return: The retry_count of this RetryPolicy.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this RetryPolicy.

        Gets or sets the number of times a retry should be attempted.

        :param retry_count: The retry_count of this RetryPolicy.
        :type retry_count: int
        """

        self._retry_count = retry_count

    @property
    def retry_interval(self):
        """Gets the retry_interval of this RetryPolicy.

        Gets or sets the retry interval between retries.

        :return: The retry_interval of this RetryPolicy.
        :rtype: str
        """
        return self._retry_interval

    @retry_interval.setter
    def retry_interval(self, retry_interval):
        """Sets the retry_interval of this RetryPolicy.

        Gets or sets the retry interval between retries.

        :param retry_interval: The retry_interval of this RetryPolicy.
        :type retry_interval: str
        """

        self._retry_interval = retry_interval

    @property
    def retry_type(self):
        """Gets the retry_type of this RetryPolicy.

        Gets or sets the retry strategy to be used.

        :return: The retry_type of this RetryPolicy.
        :rtype: str
        """
        return self._retry_type

    @retry_type.setter
    def retry_type(self, retry_type):
        """Sets the retry_type of this RetryPolicy.

        Gets or sets the retry strategy to be used.

        :param retry_type: The retry_type of this RetryPolicy.
        :type retry_type: str
        """
        allowed_values = ["None", "Fixed"]  # noqa: E501
        if retry_type not in allowed_values:
            raise ValueError(
                "Invalid value for `retry_type` ({0}), must be one of {1}"
                .format(retry_type, allowed_values)
            )

        self._retry_type = retry_type
