# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_execution_status import JobExecutionStatus
from openapi_server import util


class JobHistoryDefinitionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_name: str=None, end_time: datetime=None, expected_execution_time: datetime=None, message: str=None, repeat_count: int=None, retry_count: int=None, start_time: datetime=None, status: JobExecutionStatus=None):
        """JobHistoryDefinitionProperties - a model defined in OpenAPI

        :param action_name: The action_name of this JobHistoryDefinitionProperties.
        :param end_time: The end_time of this JobHistoryDefinitionProperties.
        :param expected_execution_time: The expected_execution_time of this JobHistoryDefinitionProperties.
        :param message: The message of this JobHistoryDefinitionProperties.
        :param repeat_count: The repeat_count of this JobHistoryDefinitionProperties.
        :param retry_count: The retry_count of this JobHistoryDefinitionProperties.
        :param start_time: The start_time of this JobHistoryDefinitionProperties.
        :param status: The status of this JobHistoryDefinitionProperties.
        """
        self.openapi_types = {
            'action_name': str,
            'end_time': datetime,
            'expected_execution_time': datetime,
            'message': str,
            'repeat_count': int,
            'retry_count': int,
            'start_time': datetime,
            'status': JobExecutionStatus
        }

        self.attribute_map = {
            'action_name': 'actionName',
            'end_time': 'endTime',
            'expected_execution_time': 'expectedExecutionTime',
            'message': 'message',
            'repeat_count': 'repeatCount',
            'retry_count': 'retryCount',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._action_name = action_name
        self._end_time = end_time
        self._expected_execution_time = expected_execution_time
        self._message = message
        self._repeat_count = repeat_count
        self._retry_count = retry_count
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobHistoryDefinitionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobHistoryDefinitionProperties of this JobHistoryDefinitionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_name(self):
        """Gets the action_name of this JobHistoryDefinitionProperties.

        Gets the job history action name.

        :return: The action_name of this JobHistoryDefinitionProperties.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this JobHistoryDefinitionProperties.

        Gets the job history action name.

        :param action_name: The action_name of this JobHistoryDefinitionProperties.
        :type action_name: str
        """
        allowed_values = ["MainAction", "ErrorAction"]  # noqa: E501
        if action_name not in allowed_values:
            raise ValueError(
                "Invalid value for `action_name` ({0}), must be one of {1}"
                .format(action_name, allowed_values)
            )

        self._action_name = action_name

    @property
    def end_time(self):
        """Gets the end_time of this JobHistoryDefinitionProperties.

        Gets the end time for this job.

        :return: The end_time of this JobHistoryDefinitionProperties.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobHistoryDefinitionProperties.

        Gets the end time for this job.

        :param end_time: The end_time of this JobHistoryDefinitionProperties.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def expected_execution_time(self):
        """Gets the expected_execution_time of this JobHistoryDefinitionProperties.

        Gets the expected execution time for this job.

        :return: The expected_execution_time of this JobHistoryDefinitionProperties.
        :rtype: datetime
        """
        return self._expected_execution_time

    @expected_execution_time.setter
    def expected_execution_time(self, expected_execution_time):
        """Sets the expected_execution_time of this JobHistoryDefinitionProperties.

        Gets the expected execution time for this job.

        :param expected_execution_time: The expected_execution_time of this JobHistoryDefinitionProperties.
        :type expected_execution_time: datetime
        """

        self._expected_execution_time = expected_execution_time

    @property
    def message(self):
        """Gets the message of this JobHistoryDefinitionProperties.

        Gets the message for the job history.

        :return: The message of this JobHistoryDefinitionProperties.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JobHistoryDefinitionProperties.

        Gets the message for the job history.

        :param message: The message of this JobHistoryDefinitionProperties.
        :type message: str
        """

        self._message = message

    @property
    def repeat_count(self):
        """Gets the repeat_count of this JobHistoryDefinitionProperties.

        Gets the repeat count for the job.

        :return: The repeat_count of this JobHistoryDefinitionProperties.
        :rtype: int
        """
        return self._repeat_count

    @repeat_count.setter
    def repeat_count(self, repeat_count):
        """Sets the repeat_count of this JobHistoryDefinitionProperties.

        Gets the repeat count for the job.

        :param repeat_count: The repeat_count of this JobHistoryDefinitionProperties.
        :type repeat_count: int
        """

        self._repeat_count = repeat_count

    @property
    def retry_count(self):
        """Gets the retry_count of this JobHistoryDefinitionProperties.

        Gets the retry count for job.

        :return: The retry_count of this JobHistoryDefinitionProperties.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this JobHistoryDefinitionProperties.

        Gets the retry count for job.

        :param retry_count: The retry_count of this JobHistoryDefinitionProperties.
        :type retry_count: int
        """

        self._retry_count = retry_count

    @property
    def start_time(self):
        """Gets the start_time of this JobHistoryDefinitionProperties.

        Gets the start time for this job.

        :return: The start_time of this JobHistoryDefinitionProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobHistoryDefinitionProperties.

        Gets the start time for this job.

        :param start_time: The start_time of this JobHistoryDefinitionProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this JobHistoryDefinitionProperties.


        :return: The status of this JobHistoryDefinitionProperties.
        :rtype: JobExecutionStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobHistoryDefinitionProperties.


        :param status: The status of this JobHistoryDefinitionProperties.
        :type status: JobExecutionStatus
        """

        self._status = status
