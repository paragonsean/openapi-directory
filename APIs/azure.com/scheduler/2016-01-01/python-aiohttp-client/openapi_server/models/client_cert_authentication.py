# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientCertAuthentication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_expiration_date: datetime=None, certificate_subject_name: str=None, certificate_thumbprint: str=None, password: str=None, pfx: str=None, type: str=None):
        """ClientCertAuthentication - a model defined in OpenAPI

        :param certificate_expiration_date: The certificate_expiration_date of this ClientCertAuthentication.
        :param certificate_subject_name: The certificate_subject_name of this ClientCertAuthentication.
        :param certificate_thumbprint: The certificate_thumbprint of this ClientCertAuthentication.
        :param password: The password of this ClientCertAuthentication.
        :param pfx: The pfx of this ClientCertAuthentication.
        :param type: The type of this ClientCertAuthentication.
        """
        self.openapi_types = {
            'certificate_expiration_date': datetime,
            'certificate_subject_name': str,
            'certificate_thumbprint': str,
            'password': str,
            'pfx': str,
            'type': str
        }

        self.attribute_map = {
            'certificate_expiration_date': 'certificateExpirationDate',
            'certificate_subject_name': 'certificateSubjectName',
            'certificate_thumbprint': 'certificateThumbprint',
            'password': 'password',
            'pfx': 'pfx',
            'type': 'type'
        }

        self._certificate_expiration_date = certificate_expiration_date
        self._certificate_subject_name = certificate_subject_name
        self._certificate_thumbprint = certificate_thumbprint
        self._password = password
        self._pfx = pfx
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientCertAuthentication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientCertAuthentication of this ClientCertAuthentication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_expiration_date(self):
        """Gets the certificate_expiration_date of this ClientCertAuthentication.

        Gets or sets the certificate expiration date.

        :return: The certificate_expiration_date of this ClientCertAuthentication.
        :rtype: datetime
        """
        return self._certificate_expiration_date

    @certificate_expiration_date.setter
    def certificate_expiration_date(self, certificate_expiration_date):
        """Sets the certificate_expiration_date of this ClientCertAuthentication.

        Gets or sets the certificate expiration date.

        :param certificate_expiration_date: The certificate_expiration_date of this ClientCertAuthentication.
        :type certificate_expiration_date: datetime
        """

        self._certificate_expiration_date = certificate_expiration_date

    @property
    def certificate_subject_name(self):
        """Gets the certificate_subject_name of this ClientCertAuthentication.

        Gets or sets the certificate subject name.

        :return: The certificate_subject_name of this ClientCertAuthentication.
        :rtype: str
        """
        return self._certificate_subject_name

    @certificate_subject_name.setter
    def certificate_subject_name(self, certificate_subject_name):
        """Sets the certificate_subject_name of this ClientCertAuthentication.

        Gets or sets the certificate subject name.

        :param certificate_subject_name: The certificate_subject_name of this ClientCertAuthentication.
        :type certificate_subject_name: str
        """

        self._certificate_subject_name = certificate_subject_name

    @property
    def certificate_thumbprint(self):
        """Gets the certificate_thumbprint of this ClientCertAuthentication.

        Gets or sets the certificate thumbprint.

        :return: The certificate_thumbprint of this ClientCertAuthentication.
        :rtype: str
        """
        return self._certificate_thumbprint

    @certificate_thumbprint.setter
    def certificate_thumbprint(self, certificate_thumbprint):
        """Sets the certificate_thumbprint of this ClientCertAuthentication.

        Gets or sets the certificate thumbprint.

        :param certificate_thumbprint: The certificate_thumbprint of this ClientCertAuthentication.
        :type certificate_thumbprint: str
        """

        self._certificate_thumbprint = certificate_thumbprint

    @property
    def password(self):
        """Gets the password of this ClientCertAuthentication.

        Gets or sets the password.

        :return: The password of this ClientCertAuthentication.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ClientCertAuthentication.

        Gets or sets the password.

        :param password: The password of this ClientCertAuthentication.
        :type password: str
        """

        self._password = password

    @property
    def pfx(self):
        """Gets the pfx of this ClientCertAuthentication.

        Gets or sets the pfx.

        :return: The pfx of this ClientCertAuthentication.
        :rtype: str
        """
        return self._pfx

    @pfx.setter
    def pfx(self, pfx):
        """Sets the pfx of this ClientCertAuthentication.

        Gets or sets the pfx.

        :param pfx: The pfx of this ClientCertAuthentication.
        :type pfx: str
        """

        self._pfx = pfx

    @property
    def type(self):
        """Gets the type of this ClientCertAuthentication.

        Gets or sets the http authentication type.

        :return: The type of this ClientCertAuthentication.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClientCertAuthentication.

        Gets or sets the http authentication type.

        :param type: The type of this ClientCertAuthentication.
        :type type: str
        """
        allowed_values = ["NotSpecified", "ClientCertificate", "ActiveDirectoryOAuth", "Basic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
