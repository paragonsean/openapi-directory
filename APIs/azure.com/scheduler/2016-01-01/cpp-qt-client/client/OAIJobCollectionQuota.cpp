/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobCollectionQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobCollectionQuota::OAIJobCollectionQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobCollectionQuota::OAIJobCollectionQuota() {
    this->initializeModel();
}

OAIJobCollectionQuota::~OAIJobCollectionQuota() {}

void OAIJobCollectionQuota::initializeModel() {

    m_max_job_count_isSet = false;
    m_max_job_count_isValid = false;

    m_max_job_occurrence_isSet = false;
    m_max_job_occurrence_isValid = false;

    m_max_recurrence_isSet = false;
    m_max_recurrence_isValid = false;
}

void OAIJobCollectionQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobCollectionQuota::fromJsonObject(QJsonObject json) {

    m_max_job_count_isValid = ::OpenAPI::fromJsonValue(m_max_job_count, json[QString("maxJobCount")]);
    m_max_job_count_isSet = !json[QString("maxJobCount")].isNull() && m_max_job_count_isValid;

    m_max_job_occurrence_isValid = ::OpenAPI::fromJsonValue(m_max_job_occurrence, json[QString("maxJobOccurrence")]);
    m_max_job_occurrence_isSet = !json[QString("maxJobOccurrence")].isNull() && m_max_job_occurrence_isValid;

    m_max_recurrence_isValid = ::OpenAPI::fromJsonValue(m_max_recurrence, json[QString("maxRecurrence")]);
    m_max_recurrence_isSet = !json[QString("maxRecurrence")].isNull() && m_max_recurrence_isValid;
}

QString OAIJobCollectionQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobCollectionQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_max_job_count_isSet) {
        obj.insert(QString("maxJobCount"), ::OpenAPI::toJsonValue(m_max_job_count));
    }
    if (m_max_job_occurrence_isSet) {
        obj.insert(QString("maxJobOccurrence"), ::OpenAPI::toJsonValue(m_max_job_occurrence));
    }
    if (m_max_recurrence.isSet()) {
        obj.insert(QString("maxRecurrence"), ::OpenAPI::toJsonValue(m_max_recurrence));
    }
    return obj;
}

qint32 OAIJobCollectionQuota::getMaxJobCount() const {
    return m_max_job_count;
}
void OAIJobCollectionQuota::setMaxJobCount(const qint32 &max_job_count) {
    m_max_job_count = max_job_count;
    m_max_job_count_isSet = true;
}

bool OAIJobCollectionQuota::is_max_job_count_Set() const{
    return m_max_job_count_isSet;
}

bool OAIJobCollectionQuota::is_max_job_count_Valid() const{
    return m_max_job_count_isValid;
}

qint32 OAIJobCollectionQuota::getMaxJobOccurrence() const {
    return m_max_job_occurrence;
}
void OAIJobCollectionQuota::setMaxJobOccurrence(const qint32 &max_job_occurrence) {
    m_max_job_occurrence = max_job_occurrence;
    m_max_job_occurrence_isSet = true;
}

bool OAIJobCollectionQuota::is_max_job_occurrence_Set() const{
    return m_max_job_occurrence_isSet;
}

bool OAIJobCollectionQuota::is_max_job_occurrence_Valid() const{
    return m_max_job_occurrence_isValid;
}

OAIJobMaxRecurrence OAIJobCollectionQuota::getMaxRecurrence() const {
    return m_max_recurrence;
}
void OAIJobCollectionQuota::setMaxRecurrence(const OAIJobMaxRecurrence &max_recurrence) {
    m_max_recurrence = max_recurrence;
    m_max_recurrence_isSet = true;
}

bool OAIJobCollectionQuota::is_max_recurrence_Set() const{
    return m_max_recurrence_isSet;
}

bool OAIJobCollectionQuota::is_max_recurrence_Valid() const{
    return m_max_recurrence_isValid;
}

bool OAIJobCollectionQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_job_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_job_occurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobCollectionQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
