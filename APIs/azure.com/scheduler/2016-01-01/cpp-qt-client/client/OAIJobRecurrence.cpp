/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobRecurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobRecurrence::OAIJobRecurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobRecurrence::OAIJobRecurrence() {
    this->initializeModel();
}

OAIJobRecurrence::~OAIJobRecurrence() {}

void OAIJobRecurrence::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;
}

void OAIJobRecurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobRecurrence::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;
}

QString OAIJobRecurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobRecurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    return obj;
}

qint32 OAIJobRecurrence::getCount() const {
    return m_count;
}
void OAIJobRecurrence::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIJobRecurrence::is_count_Set() const{
    return m_count_isSet;
}

bool OAIJobRecurrence::is_count_Valid() const{
    return m_count_isValid;
}

QDateTime OAIJobRecurrence::getEndTime() const {
    return m_end_time;
}
void OAIJobRecurrence::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJobRecurrence::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJobRecurrence::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIJobRecurrence::getFrequency() const {
    return m_frequency;
}
void OAIJobRecurrence::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIJobRecurrence::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIJobRecurrence::is_frequency_Valid() const{
    return m_frequency_isValid;
}

qint32 OAIJobRecurrence::getInterval() const {
    return m_interval;
}
void OAIJobRecurrence::setInterval(const qint32 &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIJobRecurrence::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIJobRecurrence::is_interval_Valid() const{
    return m_interval_isValid;
}

OAIJobRecurrenceSchedule OAIJobRecurrence::getSchedule() const {
    return m_schedule;
}
void OAIJobRecurrence::setSchedule(const OAIJobRecurrenceSchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIJobRecurrence::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIJobRecurrence::is_schedule_Valid() const{
    return m_schedule_isValid;
}

bool OAIJobRecurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobRecurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
