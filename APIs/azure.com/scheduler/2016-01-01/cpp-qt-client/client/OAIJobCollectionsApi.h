/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobCollectionsApi_H
#define OAI_OAIJobCollectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJobCollectionDefinition.h"
#include "OAIJobCollectionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobCollectionsApi : public QObject {
    Q_OBJECT

public:
    OAIJobCollectionsApi(const int timeOut = 0);
    ~OAIJobCollectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  job_collection OAIJobCollectionDefinition [required]
    */
    virtual void jobCollectionsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &api_version, const OAIJobCollectionDefinition &job_collection);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobCollectionsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobCollectionsDisable(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobCollectionsEnable(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobCollectionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobCollectionsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobCollectionsListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  job_collection OAIJobCollectionDefinition [required]
    */
    virtual void jobCollectionsPatch(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &api_version, const OAIJobCollectionDefinition &job_collection);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobCollectionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void jobCollectionsDeleteCallback(OAIHttpRequestWorker *worker);
    void jobCollectionsDisableCallback(OAIHttpRequestWorker *worker);
    void jobCollectionsEnableCallback(OAIHttpRequestWorker *worker);
    void jobCollectionsGetCallback(OAIHttpRequestWorker *worker);
    void jobCollectionsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void jobCollectionsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void jobCollectionsPatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobCollectionsCreateOrUpdateSignal(OAIJobCollectionDefinition summary);
    void jobCollectionsDeleteSignal();
    void jobCollectionsDisableSignal();
    void jobCollectionsEnableSignal();
    void jobCollectionsGetSignal(OAIJobCollectionDefinition summary);
    void jobCollectionsListByResourceGroupSignal(OAIJobCollectionListResult summary);
    void jobCollectionsListBySubscriptionSignal(OAIJobCollectionListResult summary);
    void jobCollectionsPatchSignal(OAIJobCollectionDefinition summary);


    void jobCollectionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJobCollectionDefinition summary);
    void jobCollectionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jobCollectionsDisableSignalFull(OAIHttpRequestWorker *worker);
    void jobCollectionsEnableSignalFull(OAIHttpRequestWorker *worker);
    void jobCollectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobCollectionDefinition summary);
    void jobCollectionsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIJobCollectionListResult summary);
    void jobCollectionsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIJobCollectionListResult summary);
    void jobCollectionsPatchSignalFull(OAIHttpRequestWorker *worker, OAIJobCollectionDefinition summary);

    Q_DECL_DEPRECATED_X("Use jobCollectionsCreateOrUpdateSignalError() instead")
    void jobCollectionsCreateOrUpdateSignalE(OAIJobCollectionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsCreateOrUpdateSignalError(OAIJobCollectionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsDeleteSignalError() instead")
    void jobCollectionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsDisableSignalError() instead")
    void jobCollectionsDisableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsDisableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsEnableSignalError() instead")
    void jobCollectionsEnableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsEnableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsGetSignalError() instead")
    void jobCollectionsGetSignalE(OAIJobCollectionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsGetSignalError(OAIJobCollectionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsListByResourceGroupSignalError() instead")
    void jobCollectionsListByResourceGroupSignalE(OAIJobCollectionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsListByResourceGroupSignalError(OAIJobCollectionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsListBySubscriptionSignalError() instead")
    void jobCollectionsListBySubscriptionSignalE(OAIJobCollectionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsListBySubscriptionSignalError(OAIJobCollectionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsPatchSignalError() instead")
    void jobCollectionsPatchSignalE(OAIJobCollectionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsPatchSignalError(OAIJobCollectionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobCollectionsCreateOrUpdateSignalErrorFull() instead")
    void jobCollectionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsDeleteSignalErrorFull() instead")
    void jobCollectionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsDisableSignalErrorFull() instead")
    void jobCollectionsDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsEnableSignalErrorFull() instead")
    void jobCollectionsEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsGetSignalErrorFull() instead")
    void jobCollectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsListByResourceGroupSignalErrorFull() instead")
    void jobCollectionsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsListBySubscriptionSignalErrorFull() instead")
    void jobCollectionsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobCollectionsPatchSignalErrorFull() instead")
    void jobCollectionsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCollectionsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
