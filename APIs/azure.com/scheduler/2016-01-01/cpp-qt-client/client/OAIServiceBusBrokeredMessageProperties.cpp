/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceBusBrokeredMessageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceBusBrokeredMessageProperties::OAIServiceBusBrokeredMessageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceBusBrokeredMessageProperties::OAIServiceBusBrokeredMessageProperties() {
    this->initializeModel();
}

OAIServiceBusBrokeredMessageProperties::~OAIServiceBusBrokeredMessageProperties() {}

void OAIServiceBusBrokeredMessageProperties::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_force_persistence_isSet = false;
    m_force_persistence_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_partition_key_isSet = false;
    m_partition_key_isValid = false;

    m_reply_to_isSet = false;
    m_reply_to_isValid = false;

    m_reply_to_session_id_isSet = false;
    m_reply_to_session_id_isValid = false;

    m_scheduled_enqueue_time_utc_isSet = false;
    m_scheduled_enqueue_time_utc_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_time_to_live_isSet = false;
    m_time_to_live_isValid = false;

    m_to_isSet = false;
    m_to_isValid = false;

    m_via_partition_key_isSet = false;
    m_via_partition_key_isValid = false;
}

void OAIServiceBusBrokeredMessageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceBusBrokeredMessageProperties::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_force_persistence_isValid = ::OpenAPI::fromJsonValue(m_force_persistence, json[QString("forcePersistence")]);
    m_force_persistence_isSet = !json[QString("forcePersistence")].isNull() && m_force_persistence_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_partition_key_isValid = ::OpenAPI::fromJsonValue(m_partition_key, json[QString("partitionKey")]);
    m_partition_key_isSet = !json[QString("partitionKey")].isNull() && m_partition_key_isValid;

    m_reply_to_isValid = ::OpenAPI::fromJsonValue(m_reply_to, json[QString("replyTo")]);
    m_reply_to_isSet = !json[QString("replyTo")].isNull() && m_reply_to_isValid;

    m_reply_to_session_id_isValid = ::OpenAPI::fromJsonValue(m_reply_to_session_id, json[QString("replyToSessionId")]);
    m_reply_to_session_id_isSet = !json[QString("replyToSessionId")].isNull() && m_reply_to_session_id_isValid;

    m_scheduled_enqueue_time_utc_isValid = ::OpenAPI::fromJsonValue(m_scheduled_enqueue_time_utc, json[QString("scheduledEnqueueTimeUtc")]);
    m_scheduled_enqueue_time_utc_isSet = !json[QString("scheduledEnqueueTimeUtc")].isNull() && m_scheduled_enqueue_time_utc_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_time_to_live, json[QString("timeToLive")]);
    m_time_to_live_isSet = !json[QString("timeToLive")].isNull() && m_time_to_live_isValid;

    m_to_isValid = ::OpenAPI::fromJsonValue(m_to, json[QString("to")]);
    m_to_isSet = !json[QString("to")].isNull() && m_to_isValid;

    m_via_partition_key_isValid = ::OpenAPI::fromJsonValue(m_via_partition_key, json[QString("viaPartitionKey")]);
    m_via_partition_key_isSet = !json[QString("viaPartitionKey")].isNull() && m_via_partition_key_isValid;
}

QString OAIServiceBusBrokeredMessageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceBusBrokeredMessageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_force_persistence_isSet) {
        obj.insert(QString("forcePersistence"), ::OpenAPI::toJsonValue(m_force_persistence));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_partition_key_isSet) {
        obj.insert(QString("partitionKey"), ::OpenAPI::toJsonValue(m_partition_key));
    }
    if (m_reply_to_isSet) {
        obj.insert(QString("replyTo"), ::OpenAPI::toJsonValue(m_reply_to));
    }
    if (m_reply_to_session_id_isSet) {
        obj.insert(QString("replyToSessionId"), ::OpenAPI::toJsonValue(m_reply_to_session_id));
    }
    if (m_scheduled_enqueue_time_utc_isSet) {
        obj.insert(QString("scheduledEnqueueTimeUtc"), ::OpenAPI::toJsonValue(m_scheduled_enqueue_time_utc));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_time_to_live_isSet) {
        obj.insert(QString("timeToLive"), ::OpenAPI::toJsonValue(m_time_to_live));
    }
    if (m_to_isSet) {
        obj.insert(QString("to"), ::OpenAPI::toJsonValue(m_to));
    }
    if (m_via_partition_key_isSet) {
        obj.insert(QString("viaPartitionKey"), ::OpenAPI::toJsonValue(m_via_partition_key));
    }
    return obj;
}

QString OAIServiceBusBrokeredMessageProperties::getContentType() const {
    return m_content_type;
}
void OAIServiceBusBrokeredMessageProperties::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIServiceBusBrokeredMessageProperties::getCorrelationId() const {
    return m_correlation_id;
}
void OAIServiceBusBrokeredMessageProperties::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

bool OAIServiceBusBrokeredMessageProperties::isForcePersistence() const {
    return m_force_persistence;
}
void OAIServiceBusBrokeredMessageProperties::setForcePersistence(const bool &force_persistence) {
    m_force_persistence = force_persistence;
    m_force_persistence_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_force_persistence_Set() const{
    return m_force_persistence_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_force_persistence_Valid() const{
    return m_force_persistence_isValid;
}

QString OAIServiceBusBrokeredMessageProperties::getLabel() const {
    return m_label;
}
void OAIServiceBusBrokeredMessageProperties::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_label_Set() const{
    return m_label_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIServiceBusBrokeredMessageProperties::getMessageId() const {
    return m_message_id;
}
void OAIServiceBusBrokeredMessageProperties::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIServiceBusBrokeredMessageProperties::getPartitionKey() const {
    return m_partition_key;
}
void OAIServiceBusBrokeredMessageProperties::setPartitionKey(const QString &partition_key) {
    m_partition_key = partition_key;
    m_partition_key_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_partition_key_Set() const{
    return m_partition_key_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_partition_key_Valid() const{
    return m_partition_key_isValid;
}

QString OAIServiceBusBrokeredMessageProperties::getReplyTo() const {
    return m_reply_to;
}
void OAIServiceBusBrokeredMessageProperties::setReplyTo(const QString &reply_to) {
    m_reply_to = reply_to;
    m_reply_to_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_reply_to_Set() const{
    return m_reply_to_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_reply_to_Valid() const{
    return m_reply_to_isValid;
}

QString OAIServiceBusBrokeredMessageProperties::getReplyToSessionId() const {
    return m_reply_to_session_id;
}
void OAIServiceBusBrokeredMessageProperties::setReplyToSessionId(const QString &reply_to_session_id) {
    m_reply_to_session_id = reply_to_session_id;
    m_reply_to_session_id_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_reply_to_session_id_Set() const{
    return m_reply_to_session_id_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_reply_to_session_id_Valid() const{
    return m_reply_to_session_id_isValid;
}

QDateTime OAIServiceBusBrokeredMessageProperties::getScheduledEnqueueTimeUtc() const {
    return m_scheduled_enqueue_time_utc;
}
void OAIServiceBusBrokeredMessageProperties::setScheduledEnqueueTimeUtc(const QDateTime &scheduled_enqueue_time_utc) {
    m_scheduled_enqueue_time_utc = scheduled_enqueue_time_utc;
    m_scheduled_enqueue_time_utc_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_scheduled_enqueue_time_utc_Set() const{
    return m_scheduled_enqueue_time_utc_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_scheduled_enqueue_time_utc_Valid() const{
    return m_scheduled_enqueue_time_utc_isValid;
}

QString OAIServiceBusBrokeredMessageProperties::getSessionId() const {
    return m_session_id;
}
void OAIServiceBusBrokeredMessageProperties::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QDateTime OAIServiceBusBrokeredMessageProperties::getTimeToLive() const {
    return m_time_to_live;
}
void OAIServiceBusBrokeredMessageProperties::setTimeToLive(const QDateTime &time_to_live) {
    m_time_to_live = time_to_live;
    m_time_to_live_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_time_to_live_Set() const{
    return m_time_to_live_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_time_to_live_Valid() const{
    return m_time_to_live_isValid;
}

QString OAIServiceBusBrokeredMessageProperties::getTo() const {
    return m_to;
}
void OAIServiceBusBrokeredMessageProperties::setTo(const QString &to) {
    m_to = to;
    m_to_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_to_Set() const{
    return m_to_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_to_Valid() const{
    return m_to_isValid;
}

QString OAIServiceBusBrokeredMessageProperties::getViaPartitionKey() const {
    return m_via_partition_key;
}
void OAIServiceBusBrokeredMessageProperties::setViaPartitionKey(const QString &via_partition_key) {
    m_via_partition_key = via_partition_key;
    m_via_partition_key_isSet = true;
}

bool OAIServiceBusBrokeredMessageProperties::is_via_partition_key_Set() const{
    return m_via_partition_key_isSet;
}

bool OAIServiceBusBrokeredMessageProperties::is_via_partition_key_Valid() const{
    return m_via_partition_key_isValid;
}

bool OAIServiceBusBrokeredMessageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_persistence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_enqueue_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_via_partition_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceBusBrokeredMessageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
