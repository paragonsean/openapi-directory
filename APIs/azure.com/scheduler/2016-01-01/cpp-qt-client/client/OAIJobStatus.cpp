/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobStatus::OAIJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobStatus::OAIJobStatus() {
    this->initializeModel();
}

OAIJobStatus::~OAIJobStatus() {}

void OAIJobStatus::initializeModel() {

    m_execution_count_isSet = false;
    m_execution_count_isValid = false;

    m_failure_count_isSet = false;
    m_failure_count_isValid = false;

    m_faulted_count_isSet = false;
    m_faulted_count_isValid = false;

    m_last_execution_time_isSet = false;
    m_last_execution_time_isValid = false;

    m_next_execution_time_isSet = false;
    m_next_execution_time_isValid = false;
}

void OAIJobStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobStatus::fromJsonObject(QJsonObject json) {

    m_execution_count_isValid = ::OpenAPI::fromJsonValue(m_execution_count, json[QString("executionCount")]);
    m_execution_count_isSet = !json[QString("executionCount")].isNull() && m_execution_count_isValid;

    m_failure_count_isValid = ::OpenAPI::fromJsonValue(m_failure_count, json[QString("failureCount")]);
    m_failure_count_isSet = !json[QString("failureCount")].isNull() && m_failure_count_isValid;

    m_faulted_count_isValid = ::OpenAPI::fromJsonValue(m_faulted_count, json[QString("faultedCount")]);
    m_faulted_count_isSet = !json[QString("faultedCount")].isNull() && m_faulted_count_isValid;

    m_last_execution_time_isValid = ::OpenAPI::fromJsonValue(m_last_execution_time, json[QString("lastExecutionTime")]);
    m_last_execution_time_isSet = !json[QString("lastExecutionTime")].isNull() && m_last_execution_time_isValid;

    m_next_execution_time_isValid = ::OpenAPI::fromJsonValue(m_next_execution_time, json[QString("nextExecutionTime")]);
    m_next_execution_time_isSet = !json[QString("nextExecutionTime")].isNull() && m_next_execution_time_isValid;
}

QString OAIJobStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_count_isSet) {
        obj.insert(QString("executionCount"), ::OpenAPI::toJsonValue(m_execution_count));
    }
    if (m_failure_count_isSet) {
        obj.insert(QString("failureCount"), ::OpenAPI::toJsonValue(m_failure_count));
    }
    if (m_faulted_count_isSet) {
        obj.insert(QString("faultedCount"), ::OpenAPI::toJsonValue(m_faulted_count));
    }
    if (m_last_execution_time_isSet) {
        obj.insert(QString("lastExecutionTime"), ::OpenAPI::toJsonValue(m_last_execution_time));
    }
    if (m_next_execution_time_isSet) {
        obj.insert(QString("nextExecutionTime"), ::OpenAPI::toJsonValue(m_next_execution_time));
    }
    return obj;
}

qint32 OAIJobStatus::getExecutionCount() const {
    return m_execution_count;
}
void OAIJobStatus::setExecutionCount(const qint32 &execution_count) {
    m_execution_count = execution_count;
    m_execution_count_isSet = true;
}

bool OAIJobStatus::is_execution_count_Set() const{
    return m_execution_count_isSet;
}

bool OAIJobStatus::is_execution_count_Valid() const{
    return m_execution_count_isValid;
}

qint32 OAIJobStatus::getFailureCount() const {
    return m_failure_count;
}
void OAIJobStatus::setFailureCount(const qint32 &failure_count) {
    m_failure_count = failure_count;
    m_failure_count_isSet = true;
}

bool OAIJobStatus::is_failure_count_Set() const{
    return m_failure_count_isSet;
}

bool OAIJobStatus::is_failure_count_Valid() const{
    return m_failure_count_isValid;
}

qint32 OAIJobStatus::getFaultedCount() const {
    return m_faulted_count;
}
void OAIJobStatus::setFaultedCount(const qint32 &faulted_count) {
    m_faulted_count = faulted_count;
    m_faulted_count_isSet = true;
}

bool OAIJobStatus::is_faulted_count_Set() const{
    return m_faulted_count_isSet;
}

bool OAIJobStatus::is_faulted_count_Valid() const{
    return m_faulted_count_isValid;
}

QDateTime OAIJobStatus::getLastExecutionTime() const {
    return m_last_execution_time;
}
void OAIJobStatus::setLastExecutionTime(const QDateTime &last_execution_time) {
    m_last_execution_time = last_execution_time;
    m_last_execution_time_isSet = true;
}

bool OAIJobStatus::is_last_execution_time_Set() const{
    return m_last_execution_time_isSet;
}

bool OAIJobStatus::is_last_execution_time_Valid() const{
    return m_last_execution_time_isValid;
}

QDateTime OAIJobStatus::getNextExecutionTime() const {
    return m_next_execution_time;
}
void OAIJobStatus::setNextExecutionTime(const QDateTime &next_execution_time) {
    m_next_execution_time = next_execution_time;
    m_next_execution_time_isSet = true;
}

bool OAIJobStatus::is_next_execution_time_Set() const{
    return m_next_execution_time_isSet;
}

bool OAIJobStatus::is_next_execution_time_Valid() const{
    return m_next_execution_time_isValid;
}

bool OAIJobStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faulted_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
