/*
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HttpRequest;
import org.openapitools.client.model.JobErrorAction;
import org.openapitools.client.model.RetryPolicy;
import org.openapitools.client.model.ServiceBusQueueMessage;
import org.openapitools.client.model.ServiceBusTopicMessage;
import org.openapitools.client.model.StorageQueueMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:17.820815-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobAction {
  public static final String SERIALIZED_NAME_ERROR_ACTION = "errorAction";
  @SerializedName(SERIALIZED_NAME_ERROR_ACTION)
  private JobErrorAction errorAction;

  public static final String SERIALIZED_NAME_QUEUE_MESSAGE = "queueMessage";
  @SerializedName(SERIALIZED_NAME_QUEUE_MESSAGE)
  private StorageQueueMessage queueMessage;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private HttpRequest request;

  public static final String SERIALIZED_NAME_RETRY_POLICY = "retryPolicy";
  @SerializedName(SERIALIZED_NAME_RETRY_POLICY)
  private RetryPolicy retryPolicy;

  public static final String SERIALIZED_NAME_SERVICE_BUS_QUEUE_MESSAGE = "serviceBusQueueMessage";
  @SerializedName(SERIALIZED_NAME_SERVICE_BUS_QUEUE_MESSAGE)
  private ServiceBusQueueMessage serviceBusQueueMessage;

  public static final String SERIALIZED_NAME_SERVICE_BUS_TOPIC_MESSAGE = "serviceBusTopicMessage";
  @SerializedName(SERIALIZED_NAME_SERVICE_BUS_TOPIC_MESSAGE)
  private ServiceBusTopicMessage serviceBusTopicMessage;

  /**
   * Gets or sets the job action type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    HTTP("Http"),
    
    HTTPS("Https"),
    
    STORAGE_QUEUE("StorageQueue"),
    
    SERVICE_BUS_QUEUE("ServiceBusQueue"),
    
    SERVICE_BUS_TOPIC("ServiceBusTopic");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public JobAction() {
  }

  public JobAction errorAction(JobErrorAction errorAction) {
    this.errorAction = errorAction;
    return this;
  }

  /**
   * Get errorAction
   * @return errorAction
   */
  @javax.annotation.Nullable
  public JobErrorAction getErrorAction() {
    return errorAction;
  }

  public void setErrorAction(JobErrorAction errorAction) {
    this.errorAction = errorAction;
  }


  public JobAction queueMessage(StorageQueueMessage queueMessage) {
    this.queueMessage = queueMessage;
    return this;
  }

  /**
   * Get queueMessage
   * @return queueMessage
   */
  @javax.annotation.Nullable
  public StorageQueueMessage getQueueMessage() {
    return queueMessage;
  }

  public void setQueueMessage(StorageQueueMessage queueMessage) {
    this.queueMessage = queueMessage;
  }


  public JobAction request(HttpRequest request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nullable
  public HttpRequest getRequest() {
    return request;
  }

  public void setRequest(HttpRequest request) {
    this.request = request;
  }


  public JobAction retryPolicy(RetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
    return this;
  }

  /**
   * Get retryPolicy
   * @return retryPolicy
   */
  @javax.annotation.Nullable
  public RetryPolicy getRetryPolicy() {
    return retryPolicy;
  }

  public void setRetryPolicy(RetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
  }


  public JobAction serviceBusQueueMessage(ServiceBusQueueMessage serviceBusQueueMessage) {
    this.serviceBusQueueMessage = serviceBusQueueMessage;
    return this;
  }

  /**
   * Get serviceBusQueueMessage
   * @return serviceBusQueueMessage
   */
  @javax.annotation.Nullable
  public ServiceBusQueueMessage getServiceBusQueueMessage() {
    return serviceBusQueueMessage;
  }

  public void setServiceBusQueueMessage(ServiceBusQueueMessage serviceBusQueueMessage) {
    this.serviceBusQueueMessage = serviceBusQueueMessage;
  }


  public JobAction serviceBusTopicMessage(ServiceBusTopicMessage serviceBusTopicMessage) {
    this.serviceBusTopicMessage = serviceBusTopicMessage;
    return this;
  }

  /**
   * Get serviceBusTopicMessage
   * @return serviceBusTopicMessage
   */
  @javax.annotation.Nullable
  public ServiceBusTopicMessage getServiceBusTopicMessage() {
    return serviceBusTopicMessage;
  }

  public void setServiceBusTopicMessage(ServiceBusTopicMessage serviceBusTopicMessage) {
    this.serviceBusTopicMessage = serviceBusTopicMessage;
  }


  public JobAction type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the job action type.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobAction jobAction = (JobAction) o;
    return Objects.equals(this.errorAction, jobAction.errorAction) &&
        Objects.equals(this.queueMessage, jobAction.queueMessage) &&
        Objects.equals(this.request, jobAction.request) &&
        Objects.equals(this.retryPolicy, jobAction.retryPolicy) &&
        Objects.equals(this.serviceBusQueueMessage, jobAction.serviceBusQueueMessage) &&
        Objects.equals(this.serviceBusTopicMessage, jobAction.serviceBusTopicMessage) &&
        Objects.equals(this.type, jobAction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorAction, queueMessage, request, retryPolicy, serviceBusQueueMessage, serviceBusTopicMessage, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobAction {\n");
    sb.append("    errorAction: ").append(toIndentedString(errorAction)).append("\n");
    sb.append("    queueMessage: ").append(toIndentedString(queueMessage)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    retryPolicy: ").append(toIndentedString(retryPolicy)).append("\n");
    sb.append("    serviceBusQueueMessage: ").append(toIndentedString(serviceBusQueueMessage)).append("\n");
    sb.append("    serviceBusTopicMessage: ").append(toIndentedString(serviceBusTopicMessage)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorAction");
    openapiFields.add("queueMessage");
    openapiFields.add("request");
    openapiFields.add("retryPolicy");
    openapiFields.add("serviceBusQueueMessage");
    openapiFields.add("serviceBusTopicMessage");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobAction is not found in the empty JSON string", JobAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `errorAction`
      if (jsonObj.get("errorAction") != null && !jsonObj.get("errorAction").isJsonNull()) {
        JobErrorAction.validateJsonElement(jsonObj.get("errorAction"));
      }
      // validate the optional field `queueMessage`
      if (jsonObj.get("queueMessage") != null && !jsonObj.get("queueMessage").isJsonNull()) {
        StorageQueueMessage.validateJsonElement(jsonObj.get("queueMessage"));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        HttpRequest.validateJsonElement(jsonObj.get("request"));
      }
      // validate the optional field `retryPolicy`
      if (jsonObj.get("retryPolicy") != null && !jsonObj.get("retryPolicy").isJsonNull()) {
        RetryPolicy.validateJsonElement(jsonObj.get("retryPolicy"));
      }
      // validate the optional field `serviceBusQueueMessage`
      if (jsonObj.get("serviceBusQueueMessage") != null && !jsonObj.get("serviceBusQueueMessage").isJsonNull()) {
        ServiceBusQueueMessage.validateJsonElement(jsonObj.get("serviceBusQueueMessage"));
      }
      // validate the optional field `serviceBusTopicMessage`
      if (jsonObj.get("serviceBusTopicMessage") != null && !jsonObj.get("serviceBusTopicMessage").isJsonNull()) {
        ServiceBusTopicMessage.validateJsonElement(jsonObj.get("serviceBusTopicMessage"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobAction.class));

       return (TypeAdapter<T>) new TypeAdapter<JobAction>() {
           @Override
           public void write(JsonWriter out, JobAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobAction
   * @throws IOException if the JSON string is invalid with respect to JobAction
   */
  public static JobAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobAction.class);
  }

  /**
   * Convert an instance of JobAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

