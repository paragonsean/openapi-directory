/*
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:17.820815-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobStatus {
  public static final String SERIALIZED_NAME_EXECUTION_COUNT = "executionCount";
  @SerializedName(SERIALIZED_NAME_EXECUTION_COUNT)
  private Integer executionCount;

  public static final String SERIALIZED_NAME_FAILURE_COUNT = "failureCount";
  @SerializedName(SERIALIZED_NAME_FAILURE_COUNT)
  private Integer failureCount;

  public static final String SERIALIZED_NAME_FAULTED_COUNT = "faultedCount";
  @SerializedName(SERIALIZED_NAME_FAULTED_COUNT)
  private Integer faultedCount;

  public static final String SERIALIZED_NAME_LAST_EXECUTION_TIME = "lastExecutionTime";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION_TIME)
  private OffsetDateTime lastExecutionTime;

  public static final String SERIALIZED_NAME_NEXT_EXECUTION_TIME = "nextExecutionTime";
  @SerializedName(SERIALIZED_NAME_NEXT_EXECUTION_TIME)
  private OffsetDateTime nextExecutionTime;

  public JobStatus() {
  }

  public JobStatus(
     Integer executionCount, 
     Integer failureCount, 
     Integer faultedCount, 
     OffsetDateTime lastExecutionTime, 
     OffsetDateTime nextExecutionTime
  ) {
    this();
    this.executionCount = executionCount;
    this.failureCount = failureCount;
    this.faultedCount = faultedCount;
    this.lastExecutionTime = lastExecutionTime;
    this.nextExecutionTime = nextExecutionTime;
  }

  /**
   * Gets the number of times this job has executed.
   * @return executionCount
   */
  @javax.annotation.Nullable
  public Integer getExecutionCount() {
    return executionCount;
  }



  /**
   * Gets the number of times this job has failed.
   * @return failureCount
   */
  @javax.annotation.Nullable
  public Integer getFailureCount() {
    return failureCount;
  }



  /**
   * Gets the number of faulted occurrences (occurrences that were retried and failed as many times as the retry policy states).
   * @return faultedCount
   */
  @javax.annotation.Nullable
  public Integer getFaultedCount() {
    return faultedCount;
  }



  /**
   * Gets the time the last occurrence executed in ISO-8601 format.  Could be empty if job has not run yet.
   * @return lastExecutionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastExecutionTime() {
    return lastExecutionTime;
  }



  /**
   * Gets the time of the next occurrence in ISO-8601 format. Could be empty if the job is completed.
   * @return nextExecutionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextExecutionTime() {
    return nextExecutionTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobStatus jobStatus = (JobStatus) o;
    return Objects.equals(this.executionCount, jobStatus.executionCount) &&
        Objects.equals(this.failureCount, jobStatus.failureCount) &&
        Objects.equals(this.faultedCount, jobStatus.faultedCount) &&
        Objects.equals(this.lastExecutionTime, jobStatus.lastExecutionTime) &&
        Objects.equals(this.nextExecutionTime, jobStatus.nextExecutionTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionCount, failureCount, faultedCount, lastExecutionTime, nextExecutionTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobStatus {\n");
    sb.append("    executionCount: ").append(toIndentedString(executionCount)).append("\n");
    sb.append("    failureCount: ").append(toIndentedString(failureCount)).append("\n");
    sb.append("    faultedCount: ").append(toIndentedString(faultedCount)).append("\n");
    sb.append("    lastExecutionTime: ").append(toIndentedString(lastExecutionTime)).append("\n");
    sb.append("    nextExecutionTime: ").append(toIndentedString(nextExecutionTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("executionCount");
    openapiFields.add("failureCount");
    openapiFields.add("faultedCount");
    openapiFields.add("lastExecutionTime");
    openapiFields.add("nextExecutionTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobStatus is not found in the empty JSON string", JobStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<JobStatus>() {
           @Override
           public void write(JsonWriter out, JobStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobStatus
   * @throws IOException if the JSON string is invalid with respect to JobStatus
   */
  public static JobStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobStatus.class);
  }

  /**
   * Convert an instance of JobStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

