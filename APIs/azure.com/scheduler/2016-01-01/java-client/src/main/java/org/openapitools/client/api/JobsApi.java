/*
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JobDefinition;
import org.openapitools.client.model.JobHistoryListResult;
import org.openapitools.client.model.JobListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobsCreateOrUpdate
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param job The job definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The job has been successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, JobDefinition job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = job;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, JobDefinition job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'job' is set
        if (job == null) {
            throw new ApiException("Missing the required parameter 'job' when calling jobsCreateOrUpdate(Async)");
        }

        return jobsCreateOrUpdateCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, job, _callback);

    }

    /**
     * 
     * Provisions a new job or updates an existing job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param job The job definition. (required)
     * @return JobDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The job has been successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public JobDefinition jobsCreateOrUpdate(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, JobDefinition job) throws ApiException {
        ApiResponse<JobDefinition> localVarResp = jobsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, job);
        return localVarResp.getData();
    }

    /**
     * 
     * Provisions a new job or updates an existing job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param job The job definition. (required)
     * @return ApiResponse&lt;JobDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The job has been successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDefinition> jobsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, JobDefinition job) throws ApiException {
        okhttp3.Call localVarCall = jobsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, job, null);
        Type localVarReturnType = new TypeToken<JobDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provisions a new job or updates an existing job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param job The job definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The job has been successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, JobDefinition job, final ApiCallback<JobDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, job, _callback);
        Type localVarReturnType = new TypeToken<JobDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsDelete
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsDeleteCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsDelete(Async)");
        }

        return jobsDeleteCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void jobsDelete(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion) throws ApiException {
        jobsDeleteWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion);
    }

    /**
     * 
     * Deletes a job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsDeleteAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsGet
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsGet(Async)");
        }

        return jobsGetCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @return JobDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public JobDefinition jobsGet(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion) throws ApiException {
        ApiResponse<JobDefinition> localVarResp = jobsGetWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;JobDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDefinition> jobsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, null);
        Type localVarReturnType = new TypeToken<JobDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, final ApiCallback<JobDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JobDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsList
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of jobs to request, in the of range [1..100]. (optional)
     * @param $skip The (0-based) index of the job history list from which to begin requesting entries. (optional)
     * @param $filter The filter to apply on the job state. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, Integer $top, Integer $skip, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, Integer $top, Integer $skip, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsList(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsList(Async)");
        }

        return jobsListCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, $top, $skip, $filter, _callback);

    }

    /**
     * 
     * Lists all jobs under the specified job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of jobs to request, in the of range [1..100]. (optional)
     * @param $skip The (0-based) index of the job history list from which to begin requesting entries. (optional)
     * @param $filter The filter to apply on the job state. (optional)
     * @return JobListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public JobListResult jobsList(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, Integer $top, Integer $skip, String $filter) throws ApiException {
        ApiResponse<JobListResult> localVarResp = jobsListWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, $top, $skip, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all jobs under the specified job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of jobs to request, in the of range [1..100]. (optional)
     * @param $skip The (0-based) index of the job history list from which to begin requesting entries. (optional)
     * @param $filter The filter to apply on the job state. (optional)
     * @return ApiResponse&lt;JobListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobListResult> jobsListWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, Integer $top, Integer $skip, String $filter) throws ApiException {
        okhttp3.Call localVarCall = jobsListValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, $top, $skip, $filter, null);
        Type localVarReturnType = new TypeToken<JobListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all jobs under the specified job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of jobs to request, in the of range [1..100]. (optional)
     * @param $skip The (0-based) index of the job history list from which to begin requesting entries. (optional)
     * @param $filter The filter to apply on the job state. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, Integer $top, Integer $skip, String $filter, final ApiCallback<JobListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, $top, $skip, $filter, _callback);
        Type localVarReturnType = new TypeToken<JobListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsListJobHistory
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param $top the number of job history to request, in the of range [1..100]. (optional)
     * @param $skip The (0-based) index of the job history list from which to begin requesting entries. (optional)
     * @param $filter The filter to apply on the job state. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job histories have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListJobHistoryCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, Integer $top, Integer $skip, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/history"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListJobHistoryValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, Integer $top, Integer $skip, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsListJobHistory(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsListJobHistory(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobsListJobHistory(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsListJobHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsListJobHistory(Async)");
        }

        return jobsListJobHistoryCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, $top, $skip, $filter, _callback);

    }

    /**
     * 
     * Lists job history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param $top the number of job history to request, in the of range [1..100]. (optional)
     * @param $skip The (0-based) index of the job history list from which to begin requesting entries. (optional)
     * @param $filter The filter to apply on the job state. (optional)
     * @return JobHistoryListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job histories have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public JobHistoryListResult jobsListJobHistory(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, Integer $top, Integer $skip, String $filter) throws ApiException {
        ApiResponse<JobHistoryListResult> localVarResp = jobsListJobHistoryWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, $top, $skip, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists job history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param $top the number of job history to request, in the of range [1..100]. (optional)
     * @param $skip The (0-based) index of the job history list from which to begin requesting entries. (optional)
     * @param $filter The filter to apply on the job state. (optional)
     * @return ApiResponse&lt;JobHistoryListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job histories have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobHistoryListResult> jobsListJobHistoryWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, Integer $top, Integer $skip, String $filter) throws ApiException {
        okhttp3.Call localVarCall = jobsListJobHistoryValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, $top, $skip, $filter, null);
        Type localVarReturnType = new TypeToken<JobHistoryListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists job history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param $top the number of job history to request, in the of range [1..100]. (optional)
     * @param $skip The (0-based) index of the job history list from which to begin requesting entries. (optional)
     * @param $filter The filter to apply on the job state. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job histories have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListJobHistoryAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, Integer $top, Integer $skip, String $filter, final ApiCallback<JobHistoryListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListJobHistoryValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, $top, $skip, $filter, _callback);
        Type localVarReturnType = new TypeToken<JobHistoryListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsPatch
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param job The job definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully patched. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPatchCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, JobDefinition job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = job;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsPatchValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, JobDefinition job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsPatch(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsPatch(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobsPatch(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsPatch(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsPatch(Async)");
        }

        // verify the required parameter 'job' is set
        if (job == null) {
            throw new ApiException("Missing the required parameter 'job' when calling jobsPatch(Async)");
        }

        return jobsPatchCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, job, _callback);

    }

    /**
     * 
     * Patches an existing job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param job The job definition. (required)
     * @return JobDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully patched. </td><td>  -  </td></tr>
     </table>
     */
    public JobDefinition jobsPatch(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, JobDefinition job) throws ApiException {
        ApiResponse<JobDefinition> localVarResp = jobsPatchWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, job);
        return localVarResp.getData();
    }

    /**
     * 
     * Patches an existing job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param job The job definition. (required)
     * @return ApiResponse&lt;JobDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully patched. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDefinition> jobsPatchWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, JobDefinition job) throws ApiException {
        okhttp3.Call localVarCall = jobsPatchValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, job, null);
        Type localVarReturnType = new TypeToken<JobDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patches an existing job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param job The job definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully patched. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsPatchAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, JobDefinition job, final ApiCallback<JobDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsPatchValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, job, _callback);
        Type localVarReturnType = new TypeToken<JobDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsRun
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully run. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsRunCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/run"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsRunValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsRun(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsRun(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobsRun(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsRun(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsRun(Async)");
        }

        return jobsRunCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, _callback);

    }

    /**
     * 
     * Runs a job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully run. </td><td>  -  </td></tr>
     </table>
     */
    public void jobsRun(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion) throws ApiException {
        jobsRunWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion);
    }

    /**
     * 
     * Runs a job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully run. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsRunWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsRunValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Runs a job.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param jobName The job name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job has been successfully run. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsRunAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String jobName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsRunValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
