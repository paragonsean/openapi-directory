/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HttpAuthentication model module.
 * @module model/HttpAuthentication
 * @version 2016-01-01
 */
class HttpAuthentication {
    /**
     * Constructs a new <code>HttpAuthentication</code>.
     * @alias module:model/HttpAuthentication
     */
    constructor() { 
        
        HttpAuthentication.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpAuthentication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpAuthentication} obj Optional instance to populate.
     * @return {module:model/HttpAuthentication} The populated <code>HttpAuthentication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpAuthentication();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpAuthentication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpAuthentication</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Gets or sets the http authentication type.
 * @member {module:model/HttpAuthentication.TypeEnum} type
 */
HttpAuthentication.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
HttpAuthentication['TypeEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "ClientCertificate"
     * @const
     */
    "ClientCertificate": "ClientCertificate",

    /**
     * value: "ActiveDirectoryOAuth"
     * @const
     */
    "ActiveDirectoryOAuth": "ActiveDirectoryOAuth",

    /**
     * value: "Basic"
     * @const
     */
    "Basic": "Basic"
};



export default HttpAuthentication;

