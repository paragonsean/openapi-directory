/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2014-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RetryPolicy model module.
 * @module model/RetryPolicy
 * @version 2014-08-01-preview
 */
class RetryPolicy {
    /**
     * Constructs a new <code>RetryPolicy</code>.
     * @alias module:model/RetryPolicy
     */
    constructor() { 
        
        RetryPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RetryPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RetryPolicy} obj Optional instance to populate.
     * @return {module:model/RetryPolicy} The populated <code>RetryPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RetryPolicy();

            if (data.hasOwnProperty('retryCount')) {
                obj['retryCount'] = ApiClient.convertToType(data['retryCount'], 'Number');
            }
            if (data.hasOwnProperty('retryInterval')) {
                obj['retryInterval'] = ApiClient.convertToType(data['retryInterval'], 'String');
            }
            if (data.hasOwnProperty('retryType')) {
                obj['retryType'] = ApiClient.convertToType(data['retryType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RetryPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RetryPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['retryInterval'] && !(typeof data['retryInterval'] === 'string' || data['retryInterval'] instanceof String)) {
            throw new Error("Expected the field `retryInterval` to be a primitive type in the JSON string but got " + data['retryInterval']);
        }
        // ensure the json data is a string
        if (data['retryType'] && !(typeof data['retryType'] === 'string' || data['retryType'] instanceof String)) {
            throw new Error("Expected the field `retryType` to be a primitive type in the JSON string but got " + data['retryType']);
        }

        return true;
    }


}



/**
 * Gets or sets the number of times a retry should be attempted.
 * @member {Number} retryCount
 */
RetryPolicy.prototype['retryCount'] = undefined;

/**
 * Gets or sets the retry interval between retries.
 * @member {String} retryInterval
 */
RetryPolicy.prototype['retryInterval'] = undefined;

/**
 * Gets or sets the retry strategy to be used.
 * @member {module:model/RetryPolicy.RetryTypeEnum} retryType
 */
RetryPolicy.prototype['retryType'] = undefined;





/**
 * Allowed values for the <code>retryType</code> property.
 * @enum {String}
 * @readonly
 */
RetryPolicy['RetryTypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Fixed"
     * @const
     */
    "Fixed": "Fixed"
};



export default RetryPolicy;

