/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2014-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JobDefinition from '../model/JobDefinition';
import JobHistoryListResult from '../model/JobHistoryListResult';
import JobListResult from '../model/JobListResult';

/**
* Jobs service.
* @module api/JobsApi
* @version 2014-08-01-preview
*/
export default class JobsApi {

    /**
    * Constructs a new JobsApi. 
    * @alias module:api/JobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobsCreateOrUpdate operation.
     * @callback module:api/JobsApi~jobsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions a new job or updates an existing job.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} jobName The job name.
     * @param {String} apiVersion The API version.
     * @param {module:model/JobDefinition} job The job definition.
     * @param {module:api/JobsApi~jobsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDefinition}
     */
    jobsCreateOrUpdate(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, job, callback) {
      let postBody = job;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsCreateOrUpdate");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobsCreateOrUpdate");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsCreateOrUpdate");
      }
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling jobsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsDelete operation.
     * @callback module:api/JobsApi~jobsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a job.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} jobName The job name.
     * @param {String} apiVersion The API version.
     * @param {module:api/JobsApi~jobsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobsDelete(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsDelete");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobsDelete");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsGet operation.
     * @callback module:api/JobsApi~jobsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a job.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} jobName The job name.
     * @param {String} apiVersion The API version.
     * @param {module:api/JobsApi~jobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDefinition}
     */
    jobsGet(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsGet");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobsGet");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsList operation.
     * @callback module:api/JobsApi~jobsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all jobs under the specified job collection.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of jobs to request, in the of range [1..100].
     * @param {Number} [skip] The (0-based) index of the job history list from which to begin requesting entries.
     * @param {String} [filter] The filter to apply on the job state.
     * @param {module:api/JobsApi~jobsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobListResult}
     */
    jobsList(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsList");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsListJobHistory operation.
     * @callback module:api/JobsApi~jobsListJobHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobHistoryListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists job history.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} jobName The job name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] the number of job history to request, in the of range [1..100].
     * @param {Number} [skip] The (0-based) index of the job history list from which to begin requesting entries.
     * @param {String} [filter] The filter to apply on the job state.
     * @param {module:api/JobsApi~jobsListJobHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobHistoryListResult}
     */
    jobsListJobHistory(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsListJobHistory");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsListJobHistory");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobsListJobHistory");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsListJobHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsListJobHistory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$skip': opts['skip'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobHistoryListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsPatch operation.
     * @callback module:api/JobsApi~jobsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches an existing job.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} jobName The job name.
     * @param {String} apiVersion The API version.
     * @param {module:model/JobDefinition} job The job definition.
     * @param {module:api/JobsApi~jobsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDefinition}
     */
    jobsPatch(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, job, callback) {
      let postBody = job;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsPatch");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsPatch");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobsPatch");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsPatch");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsPatch");
      }
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling jobsPatch");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsRun operation.
     * @callback module:api/JobsApi~jobsRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs a job.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} jobName The job name.
     * @param {String} apiVersion The API version.
     * @param {module:api/JobsApi~jobsRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobsRun(subscriptionId, resourceGroupName, jobCollectionName, jobName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsRun");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsRun");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobsRun");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsRun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsRun");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName,
        'jobName': jobName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/jobs/{jobName}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
