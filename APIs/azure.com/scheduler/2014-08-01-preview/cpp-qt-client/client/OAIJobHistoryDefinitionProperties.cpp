/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2014-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobHistoryDefinitionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobHistoryDefinitionProperties::OAIJobHistoryDefinitionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobHistoryDefinitionProperties::OAIJobHistoryDefinitionProperties() {
    this->initializeModel();
}

OAIJobHistoryDefinitionProperties::~OAIJobHistoryDefinitionProperties() {}

void OAIJobHistoryDefinitionProperties::initializeModel() {

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_expected_execution_time_isSet = false;
    m_expected_execution_time_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_repeat_count_isSet = false;
    m_repeat_count_isValid = false;

    m_retry_count_isSet = false;
    m_retry_count_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIJobHistoryDefinitionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobHistoryDefinitionProperties::fromJsonObject(QJsonObject json) {

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("actionName")]);
    m_action_name_isSet = !json[QString("actionName")].isNull() && m_action_name_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_expected_execution_time_isValid = ::OpenAPI::fromJsonValue(m_expected_execution_time, json[QString("expectedExecutionTime")]);
    m_expected_execution_time_isSet = !json[QString("expectedExecutionTime")].isNull() && m_expected_execution_time_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_repeat_count_isValid = ::OpenAPI::fromJsonValue(m_repeat_count, json[QString("repeatCount")]);
    m_repeat_count_isSet = !json[QString("repeatCount")].isNull() && m_repeat_count_isValid;

    m_retry_count_isValid = ::OpenAPI::fromJsonValue(m_retry_count, json[QString("retryCount")]);
    m_retry_count_isSet = !json[QString("retryCount")].isNull() && m_retry_count_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIJobHistoryDefinitionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobHistoryDefinitionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_action_name_isSet) {
        obj.insert(QString("actionName"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_expected_execution_time_isSet) {
        obj.insert(QString("expectedExecutionTime"), ::OpenAPI::toJsonValue(m_expected_execution_time));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_repeat_count_isSet) {
        obj.insert(QString("repeatCount"), ::OpenAPI::toJsonValue(m_repeat_count));
    }
    if (m_retry_count_isSet) {
        obj.insert(QString("retryCount"), ::OpenAPI::toJsonValue(m_retry_count));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIJobHistoryDefinitionProperties::getActionName() const {
    return m_action_name;
}
void OAIJobHistoryDefinitionProperties::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAIJobHistoryDefinitionProperties::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAIJobHistoryDefinitionProperties::is_action_name_Valid() const{
    return m_action_name_isValid;
}

QDateTime OAIJobHistoryDefinitionProperties::getEndTime() const {
    return m_end_time;
}
void OAIJobHistoryDefinitionProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIJobHistoryDefinitionProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIJobHistoryDefinitionProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QDateTime OAIJobHistoryDefinitionProperties::getExpectedExecutionTime() const {
    return m_expected_execution_time;
}
void OAIJobHistoryDefinitionProperties::setExpectedExecutionTime(const QDateTime &expected_execution_time) {
    m_expected_execution_time = expected_execution_time;
    m_expected_execution_time_isSet = true;
}

bool OAIJobHistoryDefinitionProperties::is_expected_execution_time_Set() const{
    return m_expected_execution_time_isSet;
}

bool OAIJobHistoryDefinitionProperties::is_expected_execution_time_Valid() const{
    return m_expected_execution_time_isValid;
}

QString OAIJobHistoryDefinitionProperties::getMessage() const {
    return m_message;
}
void OAIJobHistoryDefinitionProperties::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIJobHistoryDefinitionProperties::is_message_Set() const{
    return m_message_isSet;
}

bool OAIJobHistoryDefinitionProperties::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIJobHistoryDefinitionProperties::getRepeatCount() const {
    return m_repeat_count;
}
void OAIJobHistoryDefinitionProperties::setRepeatCount(const qint32 &repeat_count) {
    m_repeat_count = repeat_count;
    m_repeat_count_isSet = true;
}

bool OAIJobHistoryDefinitionProperties::is_repeat_count_Set() const{
    return m_repeat_count_isSet;
}

bool OAIJobHistoryDefinitionProperties::is_repeat_count_Valid() const{
    return m_repeat_count_isValid;
}

qint32 OAIJobHistoryDefinitionProperties::getRetryCount() const {
    return m_retry_count;
}
void OAIJobHistoryDefinitionProperties::setRetryCount(const qint32 &retry_count) {
    m_retry_count = retry_count;
    m_retry_count_isSet = true;
}

bool OAIJobHistoryDefinitionProperties::is_retry_count_Set() const{
    return m_retry_count_isSet;
}

bool OAIJobHistoryDefinitionProperties::is_retry_count_Valid() const{
    return m_retry_count_isValid;
}

QDateTime OAIJobHistoryDefinitionProperties::getStartTime() const {
    return m_start_time;
}
void OAIJobHistoryDefinitionProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobHistoryDefinitionProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobHistoryDefinitionProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIJobExecutionStatus OAIJobHistoryDefinitionProperties::getStatus() const {
    return m_status;
}
void OAIJobHistoryDefinitionProperties::setStatus(const OAIJobExecutionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobHistoryDefinitionProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobHistoryDefinitionProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIJobHistoryDefinitionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobHistoryDefinitionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
