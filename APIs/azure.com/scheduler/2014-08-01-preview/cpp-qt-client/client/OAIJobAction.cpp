/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2014-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobAction::OAIJobAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobAction::OAIJobAction() {
    this->initializeModel();
}

OAIJobAction::~OAIJobAction() {}

void OAIJobAction::initializeModel() {

    m_error_action_isSet = false;
    m_error_action_isValid = false;

    m_queue_message_isSet = false;
    m_queue_message_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_retry_policy_isSet = false;
    m_retry_policy_isValid = false;

    m_service_bus_queue_message_isSet = false;
    m_service_bus_queue_message_isValid = false;

    m_service_bus_topic_message_isSet = false;
    m_service_bus_topic_message_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIJobAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobAction::fromJsonObject(QJsonObject json) {

    m_error_action_isValid = ::OpenAPI::fromJsonValue(m_error_action, json[QString("errorAction")]);
    m_error_action_isSet = !json[QString("errorAction")].isNull() && m_error_action_isValid;

    m_queue_message_isValid = ::OpenAPI::fromJsonValue(m_queue_message, json[QString("queueMessage")]);
    m_queue_message_isSet = !json[QString("queueMessage")].isNull() && m_queue_message_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_retry_policy_isValid = ::OpenAPI::fromJsonValue(m_retry_policy, json[QString("retryPolicy")]);
    m_retry_policy_isSet = !json[QString("retryPolicy")].isNull() && m_retry_policy_isValid;

    m_service_bus_queue_message_isValid = ::OpenAPI::fromJsonValue(m_service_bus_queue_message, json[QString("serviceBusQueueMessage")]);
    m_service_bus_queue_message_isSet = !json[QString("serviceBusQueueMessage")].isNull() && m_service_bus_queue_message_isValid;

    m_service_bus_topic_message_isValid = ::OpenAPI::fromJsonValue(m_service_bus_topic_message, json[QString("serviceBusTopicMessage")]);
    m_service_bus_topic_message_isSet = !json[QString("serviceBusTopicMessage")].isNull() && m_service_bus_topic_message_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIJobAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobAction::asJsonObject() const {
    QJsonObject obj;
    if (m_error_action.isSet()) {
        obj.insert(QString("errorAction"), ::OpenAPI::toJsonValue(m_error_action));
    }
    if (m_queue_message.isSet()) {
        obj.insert(QString("queueMessage"), ::OpenAPI::toJsonValue(m_queue_message));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_retry_policy.isSet()) {
        obj.insert(QString("retryPolicy"), ::OpenAPI::toJsonValue(m_retry_policy));
    }
    if (m_service_bus_queue_message.isSet()) {
        obj.insert(QString("serviceBusQueueMessage"), ::OpenAPI::toJsonValue(m_service_bus_queue_message));
    }
    if (m_service_bus_topic_message.isSet()) {
        obj.insert(QString("serviceBusTopicMessage"), ::OpenAPI::toJsonValue(m_service_bus_topic_message));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIJobErrorAction OAIJobAction::getErrorAction() const {
    return m_error_action;
}
void OAIJobAction::setErrorAction(const OAIJobErrorAction &error_action) {
    m_error_action = error_action;
    m_error_action_isSet = true;
}

bool OAIJobAction::is_error_action_Set() const{
    return m_error_action_isSet;
}

bool OAIJobAction::is_error_action_Valid() const{
    return m_error_action_isValid;
}

OAIStorageQueueMessage OAIJobAction::getQueueMessage() const {
    return m_queue_message;
}
void OAIJobAction::setQueueMessage(const OAIStorageQueueMessage &queue_message) {
    m_queue_message = queue_message;
    m_queue_message_isSet = true;
}

bool OAIJobAction::is_queue_message_Set() const{
    return m_queue_message_isSet;
}

bool OAIJobAction::is_queue_message_Valid() const{
    return m_queue_message_isValid;
}

OAIHttpRequest OAIJobAction::getRequest() const {
    return m_request;
}
void OAIJobAction::setRequest(const OAIHttpRequest &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIJobAction::is_request_Set() const{
    return m_request_isSet;
}

bool OAIJobAction::is_request_Valid() const{
    return m_request_isValid;
}

OAIRetryPolicy OAIJobAction::getRetryPolicy() const {
    return m_retry_policy;
}
void OAIJobAction::setRetryPolicy(const OAIRetryPolicy &retry_policy) {
    m_retry_policy = retry_policy;
    m_retry_policy_isSet = true;
}

bool OAIJobAction::is_retry_policy_Set() const{
    return m_retry_policy_isSet;
}

bool OAIJobAction::is_retry_policy_Valid() const{
    return m_retry_policy_isValid;
}

OAIServiceBusQueueMessage OAIJobAction::getServiceBusQueueMessage() const {
    return m_service_bus_queue_message;
}
void OAIJobAction::setServiceBusQueueMessage(const OAIServiceBusQueueMessage &service_bus_queue_message) {
    m_service_bus_queue_message = service_bus_queue_message;
    m_service_bus_queue_message_isSet = true;
}

bool OAIJobAction::is_service_bus_queue_message_Set() const{
    return m_service_bus_queue_message_isSet;
}

bool OAIJobAction::is_service_bus_queue_message_Valid() const{
    return m_service_bus_queue_message_isValid;
}

OAIServiceBusTopicMessage OAIJobAction::getServiceBusTopicMessage() const {
    return m_service_bus_topic_message;
}
void OAIJobAction::setServiceBusTopicMessage(const OAIServiceBusTopicMessage &service_bus_topic_message) {
    m_service_bus_topic_message = service_bus_topic_message;
    m_service_bus_topic_message_isSet = true;
}

bool OAIJobAction::is_service_bus_topic_message_Set() const{
    return m_service_bus_topic_message_isSet;
}

bool OAIJobAction::is_service_bus_topic_message_Valid() const{
    return m_service_bus_topic_message_isValid;
}

QString OAIJobAction::getType() const {
    return m_type;
}
void OAIJobAction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJobAction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJobAction::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJobAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_bus_queue_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_bus_topic_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
