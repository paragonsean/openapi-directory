/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2014-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientCertAuthentication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientCertAuthentication::OAIClientCertAuthentication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientCertAuthentication::OAIClientCertAuthentication() {
    this->initializeModel();
}

OAIClientCertAuthentication::~OAIClientCertAuthentication() {}

void OAIClientCertAuthentication::initializeModel() {

    m_certificate_expiration_date_isSet = false;
    m_certificate_expiration_date_isValid = false;

    m_certificate_subject_name_isSet = false;
    m_certificate_subject_name_isValid = false;

    m_certificate_thumbprint_isSet = false;
    m_certificate_thumbprint_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_pfx_isSet = false;
    m_pfx_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIClientCertAuthentication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientCertAuthentication::fromJsonObject(QJsonObject json) {

    m_certificate_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_certificate_expiration_date, json[QString("certificateExpirationDate")]);
    m_certificate_expiration_date_isSet = !json[QString("certificateExpirationDate")].isNull() && m_certificate_expiration_date_isValid;

    m_certificate_subject_name_isValid = ::OpenAPI::fromJsonValue(m_certificate_subject_name, json[QString("certificateSubjectName")]);
    m_certificate_subject_name_isSet = !json[QString("certificateSubjectName")].isNull() && m_certificate_subject_name_isValid;

    m_certificate_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_certificate_thumbprint, json[QString("certificateThumbprint")]);
    m_certificate_thumbprint_isSet = !json[QString("certificateThumbprint")].isNull() && m_certificate_thumbprint_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_pfx_isValid = ::OpenAPI::fromJsonValue(m_pfx, json[QString("pfx")]);
    m_pfx_isSet = !json[QString("pfx")].isNull() && m_pfx_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIClientCertAuthentication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientCertAuthentication::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_expiration_date_isSet) {
        obj.insert(QString("certificateExpirationDate"), ::OpenAPI::toJsonValue(m_certificate_expiration_date));
    }
    if (m_certificate_subject_name_isSet) {
        obj.insert(QString("certificateSubjectName"), ::OpenAPI::toJsonValue(m_certificate_subject_name));
    }
    if (m_certificate_thumbprint_isSet) {
        obj.insert(QString("certificateThumbprint"), ::OpenAPI::toJsonValue(m_certificate_thumbprint));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_pfx_isSet) {
        obj.insert(QString("pfx"), ::OpenAPI::toJsonValue(m_pfx));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAIClientCertAuthentication::getCertificateExpirationDate() const {
    return m_certificate_expiration_date;
}
void OAIClientCertAuthentication::setCertificateExpirationDate(const QDateTime &certificate_expiration_date) {
    m_certificate_expiration_date = certificate_expiration_date;
    m_certificate_expiration_date_isSet = true;
}

bool OAIClientCertAuthentication::is_certificate_expiration_date_Set() const{
    return m_certificate_expiration_date_isSet;
}

bool OAIClientCertAuthentication::is_certificate_expiration_date_Valid() const{
    return m_certificate_expiration_date_isValid;
}

QString OAIClientCertAuthentication::getCertificateSubjectName() const {
    return m_certificate_subject_name;
}
void OAIClientCertAuthentication::setCertificateSubjectName(const QString &certificate_subject_name) {
    m_certificate_subject_name = certificate_subject_name;
    m_certificate_subject_name_isSet = true;
}

bool OAIClientCertAuthentication::is_certificate_subject_name_Set() const{
    return m_certificate_subject_name_isSet;
}

bool OAIClientCertAuthentication::is_certificate_subject_name_Valid() const{
    return m_certificate_subject_name_isValid;
}

QString OAIClientCertAuthentication::getCertificateThumbprint() const {
    return m_certificate_thumbprint;
}
void OAIClientCertAuthentication::setCertificateThumbprint(const QString &certificate_thumbprint) {
    m_certificate_thumbprint = certificate_thumbprint;
    m_certificate_thumbprint_isSet = true;
}

bool OAIClientCertAuthentication::is_certificate_thumbprint_Set() const{
    return m_certificate_thumbprint_isSet;
}

bool OAIClientCertAuthentication::is_certificate_thumbprint_Valid() const{
    return m_certificate_thumbprint_isValid;
}

QString OAIClientCertAuthentication::getPassword() const {
    return m_password;
}
void OAIClientCertAuthentication::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIClientCertAuthentication::is_password_Set() const{
    return m_password_isSet;
}

bool OAIClientCertAuthentication::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIClientCertAuthentication::getPfx() const {
    return m_pfx;
}
void OAIClientCertAuthentication::setPfx(const QString &pfx) {
    m_pfx = pfx;
    m_pfx_isSet = true;
}

bool OAIClientCertAuthentication::is_pfx_Set() const{
    return m_pfx_isSet;
}

bool OAIClientCertAuthentication::is_pfx_Valid() const{
    return m_pfx_isValid;
}

QString OAIClientCertAuthentication::getType() const {
    return m_type;
}
void OAIClientCertAuthentication::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIClientCertAuthentication::is_type_Set() const{
    return m_type_isSet;
}

bool OAIClientCertAuthentication::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIClientCertAuthentication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_subject_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pfx_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientCertAuthentication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
