/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2014-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageQueueMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageQueueMessage::OAIStorageQueueMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageQueueMessage::OAIStorageQueueMessage() {
    this->initializeModel();
}

OAIStorageQueueMessage::~OAIStorageQueueMessage() {}

void OAIStorageQueueMessage::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_queue_name_isSet = false;
    m_queue_name_isValid = false;

    m_sas_token_isSet = false;
    m_sas_token_isValid = false;

    m_storage_account_isSet = false;
    m_storage_account_isValid = false;
}

void OAIStorageQueueMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageQueueMessage::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_queue_name_isValid = ::OpenAPI::fromJsonValue(m_queue_name, json[QString("queueName")]);
    m_queue_name_isSet = !json[QString("queueName")].isNull() && m_queue_name_isValid;

    m_sas_token_isValid = ::OpenAPI::fromJsonValue(m_sas_token, json[QString("sasToken")]);
    m_sas_token_isSet = !json[QString("sasToken")].isNull() && m_sas_token_isValid;

    m_storage_account_isValid = ::OpenAPI::fromJsonValue(m_storage_account, json[QString("storageAccount")]);
    m_storage_account_isSet = !json[QString("storageAccount")].isNull() && m_storage_account_isValid;
}

QString OAIStorageQueueMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageQueueMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_queue_name_isSet) {
        obj.insert(QString("queueName"), ::OpenAPI::toJsonValue(m_queue_name));
    }
    if (m_sas_token_isSet) {
        obj.insert(QString("sasToken"), ::OpenAPI::toJsonValue(m_sas_token));
    }
    if (m_storage_account_isSet) {
        obj.insert(QString("storageAccount"), ::OpenAPI::toJsonValue(m_storage_account));
    }
    return obj;
}

QString OAIStorageQueueMessage::getMessage() const {
    return m_message;
}
void OAIStorageQueueMessage::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIStorageQueueMessage::is_message_Set() const{
    return m_message_isSet;
}

bool OAIStorageQueueMessage::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIStorageQueueMessage::getQueueName() const {
    return m_queue_name;
}
void OAIStorageQueueMessage::setQueueName(const QString &queue_name) {
    m_queue_name = queue_name;
    m_queue_name_isSet = true;
}

bool OAIStorageQueueMessage::is_queue_name_Set() const{
    return m_queue_name_isSet;
}

bool OAIStorageQueueMessage::is_queue_name_Valid() const{
    return m_queue_name_isValid;
}

QString OAIStorageQueueMessage::getSasToken() const {
    return m_sas_token;
}
void OAIStorageQueueMessage::setSasToken(const QString &sas_token) {
    m_sas_token = sas_token;
    m_sas_token_isSet = true;
}

bool OAIStorageQueueMessage::is_sas_token_Set() const{
    return m_sas_token_isSet;
}

bool OAIStorageQueueMessage::is_sas_token_Valid() const{
    return m_sas_token_isValid;
}

QString OAIStorageQueueMessage::getStorageAccount() const {
    return m_storage_account;
}
void OAIStorageQueueMessage::setStorageAccount(const QString &storage_account) {
    m_storage_account = storage_account;
    m_storage_account_isSet = true;
}

bool OAIStorageQueueMessage::is_storage_account_Set() const{
    return m_storage_account_isSet;
}

bool OAIStorageQueueMessage::is_storage_account_Valid() const{
    return m_storage_account_isValid;
}

bool OAIStorageQueueMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sas_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageQueueMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
