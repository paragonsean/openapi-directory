# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobRecurrenceScheduleMonthlyOccurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, occurrence: int=None, day: str=None):
        """JobRecurrenceScheduleMonthlyOccurrence - a model defined in OpenAPI

        :param occurrence: The occurrence of this JobRecurrenceScheduleMonthlyOccurrence.
        :param day: The day of this JobRecurrenceScheduleMonthlyOccurrence.
        """
        self.openapi_types = {
            'occurrence': int,
            'day': str
        }

        self.attribute_map = {
            'occurrence': 'Occurrence',
            'day': 'day'
        }

        self._occurrence = occurrence
        self._day = day

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobRecurrenceScheduleMonthlyOccurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobRecurrenceScheduleMonthlyOccurrence of this JobRecurrenceScheduleMonthlyOccurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def occurrence(self):
        """Gets the occurrence of this JobRecurrenceScheduleMonthlyOccurrence.

        Gets or sets the occurrence. Must be between -5 and 5.

        :return: The occurrence of this JobRecurrenceScheduleMonthlyOccurrence.
        :rtype: int
        """
        return self._occurrence

    @occurrence.setter
    def occurrence(self, occurrence):
        """Sets the occurrence of this JobRecurrenceScheduleMonthlyOccurrence.

        Gets or sets the occurrence. Must be between -5 and 5.

        :param occurrence: The occurrence of this JobRecurrenceScheduleMonthlyOccurrence.
        :type occurrence: int
        """

        self._occurrence = occurrence

    @property
    def day(self):
        """Gets the day of this JobRecurrenceScheduleMonthlyOccurrence.

        Gets or sets the day. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.

        :return: The day of this JobRecurrenceScheduleMonthlyOccurrence.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this JobRecurrenceScheduleMonthlyOccurrence.

        Gets or sets the day. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.

        :param day: The day of this JobRecurrenceScheduleMonthlyOccurrence.
        :type day: str
        """
        allowed_values = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]  # noqa: E501
        if day not in allowed_values:
            raise ValueError(
                "Invalid value for `day` ({0}), must be one of {1}"
                .format(day, allowed_values)
            )

        self._day = day
