/*
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2014-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ServiceBusAuthentication;
import org.openapitools.client.model.ServiceBusBrokeredMessageProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceBusMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:14.666835-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceBusMessage {
  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private ServiceBusAuthentication authentication;

  public static final String SERIALIZED_NAME_BROKERED_MESSAGE_PROPERTIES = "brokeredMessageProperties";
  @SerializedName(SERIALIZED_NAME_BROKERED_MESSAGE_PROPERTIES)
  private ServiceBusBrokeredMessageProperties brokeredMessageProperties;

  public static final String SERIALIZED_NAME_CUSTOM_MESSAGE_PROPERTIES = "customMessageProperties";
  @SerializedName(SERIALIZED_NAME_CUSTOM_MESSAGE_PROPERTIES)
  private Map<String, String> customMessageProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  /**
   * Gets or sets the transport type.
   */
  @JsonAdapter(TransportTypeEnum.Adapter.class)
  public enum TransportTypeEnum {
    NOT_SPECIFIED("NotSpecified"),
    
    NET_MESSAGING("NetMessaging"),
    
    AMQP("AMQP");

    private String value;

    TransportTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransportTypeEnum fromValue(String value) {
      for (TransportTypeEnum b : TransportTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransportTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransportTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransportTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransportTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransportTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSPORT_TYPE = "transportType";
  @SerializedName(SERIALIZED_NAME_TRANSPORT_TYPE)
  private TransportTypeEnum transportType;

  public ServiceBusMessage() {
  }

  public ServiceBusMessage authentication(ServiceBusAuthentication authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Get authentication
   * @return authentication
   */
  @javax.annotation.Nullable
  public ServiceBusAuthentication getAuthentication() {
    return authentication;
  }

  public void setAuthentication(ServiceBusAuthentication authentication) {
    this.authentication = authentication;
  }


  public ServiceBusMessage brokeredMessageProperties(ServiceBusBrokeredMessageProperties brokeredMessageProperties) {
    this.brokeredMessageProperties = brokeredMessageProperties;
    return this;
  }

  /**
   * Get brokeredMessageProperties
   * @return brokeredMessageProperties
   */
  @javax.annotation.Nullable
  public ServiceBusBrokeredMessageProperties getBrokeredMessageProperties() {
    return brokeredMessageProperties;
  }

  public void setBrokeredMessageProperties(ServiceBusBrokeredMessageProperties brokeredMessageProperties) {
    this.brokeredMessageProperties = brokeredMessageProperties;
  }


  public ServiceBusMessage customMessageProperties(Map<String, String> customMessageProperties) {
    this.customMessageProperties = customMessageProperties;
    return this;
  }

  public ServiceBusMessage putCustomMessagePropertiesItem(String key, String customMessagePropertiesItem) {
    if (this.customMessageProperties == null) {
      this.customMessageProperties = new HashMap<>();
    }
    this.customMessageProperties.put(key, customMessagePropertiesItem);
    return this;
  }

  /**
   * Gets or sets the custom message properties.
   * @return customMessageProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomMessageProperties() {
    return customMessageProperties;
  }

  public void setCustomMessageProperties(Map<String, String> customMessageProperties) {
    this.customMessageProperties = customMessageProperties;
  }


  public ServiceBusMessage message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Gets or sets the message.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ServiceBusMessage namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Gets or sets the namespace.
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public ServiceBusMessage transportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
    return this;
  }

  /**
   * Gets or sets the transport type.
   * @return transportType
   */
  @javax.annotation.Nullable
  public TransportTypeEnum getTransportType() {
    return transportType;
  }

  public void setTransportType(TransportTypeEnum transportType) {
    this.transportType = transportType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceBusMessage serviceBusMessage = (ServiceBusMessage) o;
    return Objects.equals(this.authentication, serviceBusMessage.authentication) &&
        Objects.equals(this.brokeredMessageProperties, serviceBusMessage.brokeredMessageProperties) &&
        Objects.equals(this.customMessageProperties, serviceBusMessage.customMessageProperties) &&
        Objects.equals(this.message, serviceBusMessage.message) &&
        Objects.equals(this.namespace, serviceBusMessage.namespace) &&
        Objects.equals(this.transportType, serviceBusMessage.transportType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authentication, brokeredMessageProperties, customMessageProperties, message, namespace, transportType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceBusMessage {\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    brokeredMessageProperties: ").append(toIndentedString(brokeredMessageProperties)).append("\n");
    sb.append("    customMessageProperties: ").append(toIndentedString(customMessageProperties)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    transportType: ").append(toIndentedString(transportType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authentication");
    openapiFields.add("brokeredMessageProperties");
    openapiFields.add("customMessageProperties");
    openapiFields.add("message");
    openapiFields.add("namespace");
    openapiFields.add("transportType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceBusMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceBusMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceBusMessage is not found in the empty JSON string", ServiceBusMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceBusMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceBusMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authentication`
      if (jsonObj.get("authentication") != null && !jsonObj.get("authentication").isJsonNull()) {
        ServiceBusAuthentication.validateJsonElement(jsonObj.get("authentication"));
      }
      // validate the optional field `brokeredMessageProperties`
      if (jsonObj.get("brokeredMessageProperties") != null && !jsonObj.get("brokeredMessageProperties").isJsonNull()) {
        ServiceBusBrokeredMessageProperties.validateJsonElement(jsonObj.get("brokeredMessageProperties"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("transportType") != null && !jsonObj.get("transportType").isJsonNull()) && !jsonObj.get("transportType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transportType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transportType").toString()));
      }
      // validate the optional field `transportType`
      if (jsonObj.get("transportType") != null && !jsonObj.get("transportType").isJsonNull()) {
        TransportTypeEnum.validateJsonElement(jsonObj.get("transportType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceBusMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceBusMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceBusMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceBusMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceBusMessage>() {
           @Override
           public void write(JsonWriter out, ServiceBusMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceBusMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceBusMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceBusMessage
   * @throws IOException if the JSON string is invalid with respect to ServiceBusMessage
   */
  public static ServiceBusMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceBusMessage.class);
  }

  /**
   * Convert an instance of ServiceBusMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

