/*
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2014-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ClientCertAuthentication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:14.666835-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientCertAuthentication {
  public static final String SERIALIZED_NAME_CERTIFICATE_EXPIRATION_DATE = "certificateExpirationDate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_EXPIRATION_DATE)
  private OffsetDateTime certificateExpirationDate;

  public static final String SERIALIZED_NAME_CERTIFICATE_SUBJECT_NAME = "certificateSubjectName";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_SUBJECT_NAME)
  private String certificateSubjectName;

  public static final String SERIALIZED_NAME_CERTIFICATE_THUMBPRINT = "certificateThumbprint";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_THUMBPRINT)
  private String certificateThumbprint;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PFX = "pfx";
  @SerializedName(SERIALIZED_NAME_PFX)
  private String pfx;

  /**
   * Gets or sets the http authentication type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NOT_SPECIFIED("NotSpecified"),
    
    CLIENT_CERTIFICATE("ClientCertificate"),
    
    ACTIVE_DIRECTORY_O_AUTH("ActiveDirectoryOAuth"),
    
    BASIC("Basic");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ClientCertAuthentication() {
  }

  public ClientCertAuthentication certificateExpirationDate(OffsetDateTime certificateExpirationDate) {
    this.certificateExpirationDate = certificateExpirationDate;
    return this;
  }

  /**
   * Gets or sets the certificate expiration date.
   * @return certificateExpirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCertificateExpirationDate() {
    return certificateExpirationDate;
  }

  public void setCertificateExpirationDate(OffsetDateTime certificateExpirationDate) {
    this.certificateExpirationDate = certificateExpirationDate;
  }


  public ClientCertAuthentication certificateSubjectName(String certificateSubjectName) {
    this.certificateSubjectName = certificateSubjectName;
    return this;
  }

  /**
   * Gets or sets the certificate subject name.
   * @return certificateSubjectName
   */
  @javax.annotation.Nullable
  public String getCertificateSubjectName() {
    return certificateSubjectName;
  }

  public void setCertificateSubjectName(String certificateSubjectName) {
    this.certificateSubjectName = certificateSubjectName;
  }


  public ClientCertAuthentication certificateThumbprint(String certificateThumbprint) {
    this.certificateThumbprint = certificateThumbprint;
    return this;
  }

  /**
   * Gets or sets the certificate thumbprint.
   * @return certificateThumbprint
   */
  @javax.annotation.Nullable
  public String getCertificateThumbprint() {
    return certificateThumbprint;
  }

  public void setCertificateThumbprint(String certificateThumbprint) {
    this.certificateThumbprint = certificateThumbprint;
  }


  public ClientCertAuthentication password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Gets or sets the password.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public ClientCertAuthentication pfx(String pfx) {
    this.pfx = pfx;
    return this;
  }

  /**
   * Gets or sets the pfx.
   * @return pfx
   */
  @javax.annotation.Nullable
  public String getPfx() {
    return pfx;
  }

  public void setPfx(String pfx) {
    this.pfx = pfx;
  }


  public ClientCertAuthentication type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Gets or sets the http authentication type.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientCertAuthentication clientCertAuthentication = (ClientCertAuthentication) o;
    return Objects.equals(this.certificateExpirationDate, clientCertAuthentication.certificateExpirationDate) &&
        Objects.equals(this.certificateSubjectName, clientCertAuthentication.certificateSubjectName) &&
        Objects.equals(this.certificateThumbprint, clientCertAuthentication.certificateThumbprint) &&
        Objects.equals(this.password, clientCertAuthentication.password) &&
        Objects.equals(this.pfx, clientCertAuthentication.pfx) &&
        Objects.equals(this.type, clientCertAuthentication.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateExpirationDate, certificateSubjectName, certificateThumbprint, password, pfx, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientCertAuthentication {\n");
    sb.append("    certificateExpirationDate: ").append(toIndentedString(certificateExpirationDate)).append("\n");
    sb.append("    certificateSubjectName: ").append(toIndentedString(certificateSubjectName)).append("\n");
    sb.append("    certificateThumbprint: ").append(toIndentedString(certificateThumbprint)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pfx: ").append(toIndentedString(pfx)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientCertAuthentication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientCertAuthentication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientCertAuthentication is not found in the empty JSON string", ClientCertAuthentication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientCertAuthentication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientCertAuthentication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificateSubjectName") != null && !jsonObj.get("certificateSubjectName").isJsonNull()) && !jsonObj.get("certificateSubjectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateSubjectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateSubjectName").toString()));
      }
      if ((jsonObj.get("certificateThumbprint") != null && !jsonObj.get("certificateThumbprint").isJsonNull()) && !jsonObj.get("certificateThumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateThumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateThumbprint").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("pfx") != null && !jsonObj.get("pfx").isJsonNull()) && !jsonObj.get("pfx").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pfx` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pfx").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientCertAuthentication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientCertAuthentication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientCertAuthentication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientCertAuthentication.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientCertAuthentication>() {
           @Override
           public void write(JsonWriter out, ClientCertAuthentication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientCertAuthentication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientCertAuthentication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientCertAuthentication
   * @throws IOException if the JSON string is invalid with respect to ClientCertAuthentication
   */
  public static ClientCertAuthentication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientCertAuthentication.class);
  }

  /**
   * Convert an instance of ClientCertAuthentication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

