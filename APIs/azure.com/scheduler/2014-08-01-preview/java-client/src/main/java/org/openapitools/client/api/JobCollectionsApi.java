/*
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2014-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JobCollectionDefinition;
import org.openapitools.client.model.JobCollectionListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobCollectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobCollectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobCollectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobCollectionsCreateOrUpdate
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param jobCollection The job collection definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The job collection has been successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, JobCollectionDefinition jobCollection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobCollection;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobCollectionsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, JobCollectionDefinition jobCollection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobCollectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobCollectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobCollectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobCollectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'jobCollection' is set
        if (jobCollection == null) {
            throw new ApiException("Missing the required parameter 'jobCollection' when calling jobCollectionsCreateOrUpdate(Async)");
        }

        return jobCollectionsCreateOrUpdateCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, jobCollection, _callback);

    }

    /**
     * 
     * Provisions a new job collection or updates an existing job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param jobCollection The job collection definition. (required)
     * @return JobCollectionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The job collection has been successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public JobCollectionDefinition jobCollectionsCreateOrUpdate(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, JobCollectionDefinition jobCollection) throws ApiException {
        ApiResponse<JobCollectionDefinition> localVarResp = jobCollectionsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, jobCollection);
        return localVarResp.getData();
    }

    /**
     * 
     * Provisions a new job collection or updates an existing job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param jobCollection The job collection definition. (required)
     * @return ApiResponse&lt;JobCollectionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The job collection has been successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobCollectionDefinition> jobCollectionsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, JobCollectionDefinition jobCollection) throws ApiException {
        okhttp3.Call localVarCall = jobCollectionsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, jobCollection, null);
        Type localVarReturnType = new TypeToken<JobCollectionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provisions a new job collection or updates an existing job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param jobCollection The job collection definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The job collection has been successfully created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, JobCollectionDefinition jobCollection, final ApiCallback<JobCollectionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobCollectionsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, jobCollection, _callback);
        Type localVarReturnType = new TypeToken<JobCollectionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobCollectionsDelete
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsDeleteCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobCollectionsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobCollectionsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobCollectionsDelete(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobCollectionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobCollectionsDelete(Async)");
        }

        return jobCollectionsDeleteCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void jobCollectionsDelete(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion) throws ApiException {
        jobCollectionsDeleteWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, apiVersion);
    }

    /**
     * 
     * Deletes a job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobCollectionsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobCollectionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsDeleteAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobCollectionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobCollectionsDisable
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All of the jobs in the job collection have been successfully disabled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsDisableCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/disable"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobCollectionsDisableValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobCollectionsDisable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobCollectionsDisable(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobCollectionsDisable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobCollectionsDisable(Async)");
        }

        return jobCollectionsDisableCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, _callback);

    }

    /**
     * 
     * Disables all of the jobs in the job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All of the jobs in the job collection have been successfully disabled. </td><td>  -  </td></tr>
     </table>
     */
    public void jobCollectionsDisable(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion) throws ApiException {
        jobCollectionsDisableWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, apiVersion);
    }

    /**
     * 
     * Disables all of the jobs in the job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All of the jobs in the job collection have been successfully disabled. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobCollectionsDisableWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobCollectionsDisableValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disables all of the jobs in the job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All of the jobs in the job collection have been successfully disabled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsDisableAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobCollectionsDisableValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobCollectionsEnable
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All of the jobs in the job collection have been successfully enabled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsEnableCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/enable"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobCollectionsEnableValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobCollectionsEnable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobCollectionsEnable(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobCollectionsEnable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobCollectionsEnable(Async)");
        }

        return jobCollectionsEnableCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, _callback);

    }

    /**
     * 
     * Enables all of the jobs in the job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All of the jobs in the job collection have been successfully enabled. </td><td>  -  </td></tr>
     </table>
     */
    public void jobCollectionsEnable(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion) throws ApiException {
        jobCollectionsEnableWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, apiVersion);
    }

    /**
     * 
     * Enables all of the jobs in the job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All of the jobs in the job collection have been successfully enabled. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobCollectionsEnableWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobCollectionsEnableValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Enables all of the jobs in the job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All of the jobs in the job collection have been successfully enabled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsEnableAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobCollectionsEnableValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobCollectionsGet
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsGetCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobCollectionsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobCollectionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobCollectionsGet(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobCollectionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobCollectionsGet(Async)");
        }

        return jobCollectionsGetCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @return JobCollectionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public JobCollectionDefinition jobCollectionsGet(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion) throws ApiException {
        ApiResponse<JobCollectionDefinition> localVarResp = jobCollectionsGetWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;JobCollectionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobCollectionDefinition> jobCollectionsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobCollectionsGetValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<JobCollectionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsGetAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, final ApiCallback<JobCollectionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobCollectionsGetValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JobCollectionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobCollectionsListByResourceGroup
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collections have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobCollectionsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobCollectionsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobCollectionsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobCollectionsListByResourceGroup(Async)");
        }

        return jobCollectionsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Gets all job collections under specified resource group.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return JobCollectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collections have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public JobCollectionListResult jobCollectionsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<JobCollectionListResult> localVarResp = jobCollectionsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all job collections under specified resource group.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;JobCollectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collections have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobCollectionListResult> jobCollectionsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobCollectionsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<JobCollectionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all job collections under specified resource group.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collections have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<JobCollectionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobCollectionsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JobCollectionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobCollectionsListBySubscription
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collections have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Scheduler/jobCollections"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobCollectionsListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobCollectionsListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobCollectionsListBySubscription(Async)");
        }

        return jobCollectionsListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets all job collections under specified subscription.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion The API version. (required)
     * @return JobCollectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collections have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public JobCollectionListResult jobCollectionsListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<JobCollectionListResult> localVarResp = jobCollectionsListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all job collections under specified subscription.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;JobCollectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collections have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobCollectionListResult> jobCollectionsListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobCollectionsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<JobCollectionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all job collections under specified subscription.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collections have been successfully returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<JobCollectionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobCollectionsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JobCollectionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobCollectionsPatch
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param jobCollection The job collection definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully patched. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsPatchCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, JobCollectionDefinition jobCollection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobCollection;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobCollectionName" + "}", localVarApiClient.escapeString(jobCollectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobCollectionsPatchValidateBeforeCall(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, JobCollectionDefinition jobCollection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobCollectionsPatch(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobCollectionsPatch(Async)");
        }

        // verify the required parameter 'jobCollectionName' is set
        if (jobCollectionName == null) {
            throw new ApiException("Missing the required parameter 'jobCollectionName' when calling jobCollectionsPatch(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobCollectionsPatch(Async)");
        }

        // verify the required parameter 'jobCollection' is set
        if (jobCollection == null) {
            throw new ApiException("Missing the required parameter 'jobCollection' when calling jobCollectionsPatch(Async)");
        }

        return jobCollectionsPatchCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, jobCollection, _callback);

    }

    /**
     * 
     * Patches an existing job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param jobCollection The job collection definition. (required)
     * @return JobCollectionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully patched. </td><td>  -  </td></tr>
     </table>
     */
    public JobCollectionDefinition jobCollectionsPatch(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, JobCollectionDefinition jobCollection) throws ApiException {
        ApiResponse<JobCollectionDefinition> localVarResp = jobCollectionsPatchWithHttpInfo(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, jobCollection);
        return localVarResp.getData();
    }

    /**
     * 
     * Patches an existing job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param jobCollection The job collection definition. (required)
     * @return ApiResponse&lt;JobCollectionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully patched. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobCollectionDefinition> jobCollectionsPatchWithHttpInfo(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, JobCollectionDefinition jobCollection) throws ApiException {
        okhttp3.Call localVarCall = jobCollectionsPatchValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, jobCollection, null);
        Type localVarReturnType = new TypeToken<JobCollectionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Patches an existing job collection.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param jobCollectionName The job collection name. (required)
     * @param apiVersion The API version. (required)
     * @param jobCollection The job collection definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job collection has been successfully patched. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobCollectionsPatchAsync(String subscriptionId, String resourceGroupName, String jobCollectionName, String apiVersion, JobCollectionDefinition jobCollection, final ApiCallback<JobCollectionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobCollectionsPatchValidateBeforeCall(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, jobCollection, _callback);
        Type localVarReturnType = new TypeToken<JobCollectionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
