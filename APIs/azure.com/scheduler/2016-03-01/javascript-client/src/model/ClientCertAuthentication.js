/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpAuthentication from './HttpAuthentication';

/**
 * The ClientCertAuthentication model module.
 * @module model/ClientCertAuthentication
 * @version 2016-03-01
 */
class ClientCertAuthentication {
    /**
     * Constructs a new <code>ClientCertAuthentication</code>.
     * @alias module:model/ClientCertAuthentication
     * @extends module:model/HttpAuthentication
     * @implements module:model/HttpAuthentication
     * @param type {module:model/ClientCertAuthentication.TypeEnum} Gets or sets the HTTP authentication type.
     */
    constructor(type) { 
        HttpAuthentication.initialize(this, type);
        ClientCertAuthentication.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
    }

    /**
     * Constructs a <code>ClientCertAuthentication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientCertAuthentication} obj Optional instance to populate.
     * @return {module:model/ClientCertAuthentication} The populated <code>ClientCertAuthentication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientCertAuthentication();
            HttpAuthentication.constructFromObject(data, obj);
            HttpAuthentication.constructFromObject(data, obj);

            if (data.hasOwnProperty('certificateExpirationDate')) {
                obj['certificateExpirationDate'] = ApiClient.convertToType(data['certificateExpirationDate'], 'Date');
            }
            if (data.hasOwnProperty('certificateSubjectName')) {
                obj['certificateSubjectName'] = ApiClient.convertToType(data['certificateSubjectName'], 'String');
            }
            if (data.hasOwnProperty('certificateThumbprint')) {
                obj['certificateThumbprint'] = ApiClient.convertToType(data['certificateThumbprint'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('pfx')) {
                obj['pfx'] = ApiClient.convertToType(data['pfx'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientCertAuthentication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientCertAuthentication</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClientCertAuthentication.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificateSubjectName'] && !(typeof data['certificateSubjectName'] === 'string' || data['certificateSubjectName'] instanceof String)) {
            throw new Error("Expected the field `certificateSubjectName` to be a primitive type in the JSON string but got " + data['certificateSubjectName']);
        }
        // ensure the json data is a string
        if (data['certificateThumbprint'] && !(typeof data['certificateThumbprint'] === 'string' || data['certificateThumbprint'] instanceof String)) {
            throw new Error("Expected the field `certificateThumbprint` to be a primitive type in the JSON string but got " + data['certificateThumbprint']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['pfx'] && !(typeof data['pfx'] === 'string' || data['pfx'] instanceof String)) {
            throw new Error("Expected the field `pfx` to be a primitive type in the JSON string but got " + data['pfx']);
        }

        return true;
    }


}

ClientCertAuthentication.RequiredProperties = ["type"];

/**
 * Gets or sets the certificate expiration date.
 * @member {Date} certificateExpirationDate
 */
ClientCertAuthentication.prototype['certificateExpirationDate'] = undefined;

/**
 * Gets or sets the certificate subject name.
 * @member {String} certificateSubjectName
 */
ClientCertAuthentication.prototype['certificateSubjectName'] = undefined;

/**
 * Gets or sets the certificate thumbprint.
 * @member {String} certificateThumbprint
 */
ClientCertAuthentication.prototype['certificateThumbprint'] = undefined;

/**
 * Gets or sets the certificate password, return value will always be empty.
 * @member {String} password
 */
ClientCertAuthentication.prototype['password'] = undefined;

/**
 * Gets or sets the pfx certificate. Accepts certification in base64 encoding, return value will always be empty.
 * @member {String} pfx
 */
ClientCertAuthentication.prototype['pfx'] = undefined;


// Implement HttpAuthentication interface:
/**
 * Gets or sets the HTTP authentication type.
 * @member {module:model/HttpAuthentication.TypeEnum} type
 */
HttpAuthentication.prototype['type'] = undefined;




export default ClientCertAuthentication;

