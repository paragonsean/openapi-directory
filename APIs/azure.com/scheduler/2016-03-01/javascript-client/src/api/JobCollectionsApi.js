/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JobCollectionDefinition from '../model/JobCollectionDefinition';
import JobCollectionListResult from '../model/JobCollectionListResult';

/**
* JobCollections service.
* @module api/JobCollectionsApi
* @version 2016-03-01
*/
export default class JobCollectionsApi {

    /**
    * Constructs a new JobCollectionsApi. 
    * @alias module:api/JobCollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobCollectionsCreateOrUpdate operation.
     * @callback module:api/JobCollectionsApi~jobCollectionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobCollectionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions a new job collection or updates an existing job collection.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} apiVersion The API version.
     * @param {module:model/JobCollectionDefinition} jobCollection The job collection definition.
     * @param {module:api/JobCollectionsApi~jobCollectionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobCollectionDefinition}
     */
    jobCollectionsCreateOrUpdate(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, jobCollection, callback) {
      let postBody = jobCollection;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobCollectionsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobCollectionsCreateOrUpdate");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobCollectionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobCollectionsCreateOrUpdate");
      }
      // verify the required parameter 'jobCollection' is set
      if (jobCollection === undefined || jobCollection === null) {
        throw new Error("Missing the required parameter 'jobCollection' when calling jobCollectionsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobCollectionDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCollectionsDelete operation.
     * @callback module:api/JobCollectionsApi~jobCollectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a job collection.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} apiVersion The API version.
     * @param {module:api/JobCollectionsApi~jobCollectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobCollectionsDelete(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobCollectionsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobCollectionsDelete");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobCollectionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobCollectionsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCollectionsDisable operation.
     * @callback module:api/JobCollectionsApi~jobCollectionsDisableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables all of the jobs in the job collection.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} apiVersion The API version.
     * @param {module:api/JobCollectionsApi~jobCollectionsDisableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobCollectionsDisable(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobCollectionsDisable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobCollectionsDisable");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobCollectionsDisable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobCollectionsDisable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCollectionsEnable operation.
     * @callback module:api/JobCollectionsApi~jobCollectionsEnableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables all of the jobs in the job collection.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} apiVersion The API version.
     * @param {module:api/JobCollectionsApi~jobCollectionsEnableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobCollectionsEnable(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobCollectionsEnable");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobCollectionsEnable");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobCollectionsEnable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobCollectionsEnable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCollectionsGet operation.
     * @callback module:api/JobCollectionsApi~jobCollectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobCollectionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a job collection.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} apiVersion The API version.
     * @param {module:api/JobCollectionsApi~jobCollectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobCollectionDefinition}
     */
    jobCollectionsGet(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobCollectionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobCollectionsGet");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobCollectionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobCollectionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobCollectionDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCollectionsListByResourceGroup operation.
     * @callback module:api/JobCollectionsApi~jobCollectionsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobCollectionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all job collections under specified resource group.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:api/JobCollectionsApi~jobCollectionsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobCollectionListResult}
     */
    jobCollectionsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobCollectionsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobCollectionsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobCollectionsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobCollectionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCollectionsListBySubscription operation.
     * @callback module:api/JobCollectionsApi~jobCollectionsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobCollectionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all job collections under specified subscription.
     * @param {String} subscriptionId The subscription id.
     * @param {String} apiVersion The API version.
     * @param {module:api/JobCollectionsApi~jobCollectionsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobCollectionListResult}
     */
    jobCollectionsListBySubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobCollectionsListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobCollectionsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobCollectionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Scheduler/jobCollections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobCollectionsPatch operation.
     * @callback module:api/JobCollectionsApi~jobCollectionsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobCollectionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches an existing job collection.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} jobCollectionName The job collection name.
     * @param {String} apiVersion The API version.
     * @param {module:model/JobCollectionDefinition} jobCollection The job collection definition.
     * @param {module:api/JobCollectionsApi~jobCollectionsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobCollectionDefinition}
     */
    jobCollectionsPatch(subscriptionId, resourceGroupName, jobCollectionName, apiVersion, jobCollection, callback) {
      let postBody = jobCollection;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobCollectionsPatch");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobCollectionsPatch");
      }
      // verify the required parameter 'jobCollectionName' is set
      if (jobCollectionName === undefined || jobCollectionName === null) {
        throw new Error("Missing the required parameter 'jobCollectionName' when calling jobCollectionsPatch");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobCollectionsPatch");
      }
      // verify the required parameter 'jobCollection' is set
      if (jobCollection === undefined || jobCollection === null) {
        throw new Error("Missing the required parameter 'jobCollection' when calling jobCollectionsPatch");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobCollectionName': jobCollectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobCollectionDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Scheduler/jobCollections/{jobCollectionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
