/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceBusQueueMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceBusQueueMessage::OAIServiceBusQueueMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceBusQueueMessage::OAIServiceBusQueueMessage() {
    this->initializeModel();
}

OAIServiceBusQueueMessage::~OAIServiceBusQueueMessage() {}

void OAIServiceBusQueueMessage::initializeModel() {

    m_queue_name_isSet = false;
    m_queue_name_isValid = false;

    m_authentication_isSet = false;
    m_authentication_isValid = false;

    m_brokered_message_properties_isSet = false;
    m_brokered_message_properties_isValid = false;

    m_custom_message_properties_isSet = false;
    m_custom_message_properties_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_transport_type_isSet = false;
    m_transport_type_isValid = false;
}

void OAIServiceBusQueueMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceBusQueueMessage::fromJsonObject(QJsonObject json) {

    m_queue_name_isValid = ::OpenAPI::fromJsonValue(m_queue_name, json[QString("queueName")]);
    m_queue_name_isSet = !json[QString("queueName")].isNull() && m_queue_name_isValid;

    m_authentication_isValid = ::OpenAPI::fromJsonValue(m_authentication, json[QString("authentication")]);
    m_authentication_isSet = !json[QString("authentication")].isNull() && m_authentication_isValid;

    m_brokered_message_properties_isValid = ::OpenAPI::fromJsonValue(m_brokered_message_properties, json[QString("brokeredMessageProperties")]);
    m_brokered_message_properties_isSet = !json[QString("brokeredMessageProperties")].isNull() && m_brokered_message_properties_isValid;

    m_custom_message_properties_isValid = ::OpenAPI::fromJsonValue(m_custom_message_properties, json[QString("customMessageProperties")]);
    m_custom_message_properties_isSet = !json[QString("customMessageProperties")].isNull() && m_custom_message_properties_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_transport_type_isValid = ::OpenAPI::fromJsonValue(m_transport_type, json[QString("transportType")]);
    m_transport_type_isSet = !json[QString("transportType")].isNull() && m_transport_type_isValid;
}

QString OAIServiceBusQueueMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceBusQueueMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_queue_name_isSet) {
        obj.insert(QString("queueName"), ::OpenAPI::toJsonValue(m_queue_name));
    }
    if (m_authentication.isSet()) {
        obj.insert(QString("authentication"), ::OpenAPI::toJsonValue(m_authentication));
    }
    if (m_brokered_message_properties.isSet()) {
        obj.insert(QString("brokeredMessageProperties"), ::OpenAPI::toJsonValue(m_brokered_message_properties));
    }
    if (m_custom_message_properties.size() > 0) {
        obj.insert(QString("customMessageProperties"), ::OpenAPI::toJsonValue(m_custom_message_properties));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_transport_type_isSet) {
        obj.insert(QString("transportType"), ::OpenAPI::toJsonValue(m_transport_type));
    }
    return obj;
}

QString OAIServiceBusQueueMessage::getQueueName() const {
    return m_queue_name;
}
void OAIServiceBusQueueMessage::setQueueName(const QString &queue_name) {
    m_queue_name = queue_name;
    m_queue_name_isSet = true;
}

bool OAIServiceBusQueueMessage::is_queue_name_Set() const{
    return m_queue_name_isSet;
}

bool OAIServiceBusQueueMessage::is_queue_name_Valid() const{
    return m_queue_name_isValid;
}

OAIServiceBusAuthentication OAIServiceBusQueueMessage::getAuthentication() const {
    return m_authentication;
}
void OAIServiceBusQueueMessage::setAuthentication(const OAIServiceBusAuthentication &authentication) {
    m_authentication = authentication;
    m_authentication_isSet = true;
}

bool OAIServiceBusQueueMessage::is_authentication_Set() const{
    return m_authentication_isSet;
}

bool OAIServiceBusQueueMessage::is_authentication_Valid() const{
    return m_authentication_isValid;
}

OAIServiceBusBrokeredMessageProperties OAIServiceBusQueueMessage::getBrokeredMessageProperties() const {
    return m_brokered_message_properties;
}
void OAIServiceBusQueueMessage::setBrokeredMessageProperties(const OAIServiceBusBrokeredMessageProperties &brokered_message_properties) {
    m_brokered_message_properties = brokered_message_properties;
    m_brokered_message_properties_isSet = true;
}

bool OAIServiceBusQueueMessage::is_brokered_message_properties_Set() const{
    return m_brokered_message_properties_isSet;
}

bool OAIServiceBusQueueMessage::is_brokered_message_properties_Valid() const{
    return m_brokered_message_properties_isValid;
}

QMap<QString, QString> OAIServiceBusQueueMessage::getCustomMessageProperties() const {
    return m_custom_message_properties;
}
void OAIServiceBusQueueMessage::setCustomMessageProperties(const QMap<QString, QString> &custom_message_properties) {
    m_custom_message_properties = custom_message_properties;
    m_custom_message_properties_isSet = true;
}

bool OAIServiceBusQueueMessage::is_custom_message_properties_Set() const{
    return m_custom_message_properties_isSet;
}

bool OAIServiceBusQueueMessage::is_custom_message_properties_Valid() const{
    return m_custom_message_properties_isValid;
}

QString OAIServiceBusQueueMessage::getMessage() const {
    return m_message;
}
void OAIServiceBusQueueMessage::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIServiceBusQueueMessage::is_message_Set() const{
    return m_message_isSet;
}

bool OAIServiceBusQueueMessage::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIServiceBusQueueMessage::getRNamespace() const {
    return m_r_namespace;
}
void OAIServiceBusQueueMessage::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIServiceBusQueueMessage::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIServiceBusQueueMessage::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIServiceBusQueueMessage::getTransportType() const {
    return m_transport_type;
}
void OAIServiceBusQueueMessage::setTransportType(const QString &transport_type) {
    m_transport_type = transport_type;
    m_transport_type_isSet = true;
}

bool OAIServiceBusQueueMessage::is_transport_type_Set() const{
    return m_transport_type_isSet;
}

bool OAIServiceBusQueueMessage::is_transport_type_Valid() const{
    return m_transport_type_isValid;
}

bool OAIServiceBusQueueMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_queue_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brokered_message_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_message_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transport_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceBusQueueMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
