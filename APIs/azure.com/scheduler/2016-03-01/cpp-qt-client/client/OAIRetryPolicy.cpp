/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetryPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetryPolicy::OAIRetryPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetryPolicy::OAIRetryPolicy() {
    this->initializeModel();
}

OAIRetryPolicy::~OAIRetryPolicy() {}

void OAIRetryPolicy::initializeModel() {

    m_retry_count_isSet = false;
    m_retry_count_isValid = false;

    m_retry_interval_isSet = false;
    m_retry_interval_isValid = false;

    m_retry_type_isSet = false;
    m_retry_type_isValid = false;
}

void OAIRetryPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetryPolicy::fromJsonObject(QJsonObject json) {

    m_retry_count_isValid = ::OpenAPI::fromJsonValue(m_retry_count, json[QString("retryCount")]);
    m_retry_count_isSet = !json[QString("retryCount")].isNull() && m_retry_count_isValid;

    m_retry_interval_isValid = ::OpenAPI::fromJsonValue(m_retry_interval, json[QString("retryInterval")]);
    m_retry_interval_isSet = !json[QString("retryInterval")].isNull() && m_retry_interval_isValid;

    m_retry_type_isValid = ::OpenAPI::fromJsonValue(m_retry_type, json[QString("retryType")]);
    m_retry_type_isSet = !json[QString("retryType")].isNull() && m_retry_type_isValid;
}

QString OAIRetryPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetryPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_retry_count_isSet) {
        obj.insert(QString("retryCount"), ::OpenAPI::toJsonValue(m_retry_count));
    }
    if (m_retry_interval_isSet) {
        obj.insert(QString("retryInterval"), ::OpenAPI::toJsonValue(m_retry_interval));
    }
    if (m_retry_type_isSet) {
        obj.insert(QString("retryType"), ::OpenAPI::toJsonValue(m_retry_type));
    }
    return obj;
}

qint32 OAIRetryPolicy::getRetryCount() const {
    return m_retry_count;
}
void OAIRetryPolicy::setRetryCount(const qint32 &retry_count) {
    m_retry_count = retry_count;
    m_retry_count_isSet = true;
}

bool OAIRetryPolicy::is_retry_count_Set() const{
    return m_retry_count_isSet;
}

bool OAIRetryPolicy::is_retry_count_Valid() const{
    return m_retry_count_isValid;
}

QString OAIRetryPolicy::getRetryInterval() const {
    return m_retry_interval;
}
void OAIRetryPolicy::setRetryInterval(const QString &retry_interval) {
    m_retry_interval = retry_interval;
    m_retry_interval_isSet = true;
}

bool OAIRetryPolicy::is_retry_interval_Set() const{
    return m_retry_interval_isSet;
}

bool OAIRetryPolicy::is_retry_interval_Valid() const{
    return m_retry_interval_isValid;
}

QString OAIRetryPolicy::getRetryType() const {
    return m_retry_type;
}
void OAIRetryPolicy::setRetryType(const QString &retry_type) {
    m_retry_type = retry_type;
    m_retry_type_isSet = true;
}

bool OAIRetryPolicy::is_retry_type_Set() const{
    return m_retry_type_isSet;
}

bool OAIRetryPolicy::is_retry_type_Valid() const{
    return m_retry_type_isValid;
}

bool OAIRetryPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetryPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
