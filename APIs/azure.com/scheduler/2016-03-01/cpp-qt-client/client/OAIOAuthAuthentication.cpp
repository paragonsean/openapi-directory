/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOAuthAuthentication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOAuthAuthentication::OAIOAuthAuthentication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOAuthAuthentication::OAIOAuthAuthentication() {
    this->initializeModel();
}

OAIOAuthAuthentication::~OAIOAuthAuthentication() {}

void OAIOAuthAuthentication::initializeModel() {

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIOAuthAuthentication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOAuthAuthentication::fromJsonObject(QJsonObject json) {

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIOAuthAuthentication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOAuthAuthentication::asJsonObject() const {
    QJsonObject obj;
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIOAuthAuthentication::getAudience() const {
    return m_audience;
}
void OAIOAuthAuthentication::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAIOAuthAuthentication::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAIOAuthAuthentication::is_audience_Valid() const{
    return m_audience_isValid;
}

QString OAIOAuthAuthentication::getClientId() const {
    return m_client_id;
}
void OAIOAuthAuthentication::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOAuthAuthentication::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOAuthAuthentication::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIOAuthAuthentication::getSecret() const {
    return m_secret;
}
void OAIOAuthAuthentication::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIOAuthAuthentication::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIOAuthAuthentication::is_secret_Valid() const{
    return m_secret_isValid;
}

QString OAIOAuthAuthentication::getTenant() const {
    return m_tenant;
}
void OAIOAuthAuthentication::setTenant(const QString &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIOAuthAuthentication::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIOAuthAuthentication::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIOAuthAuthentication::getType() const {
    return m_type;
}
void OAIOAuthAuthentication::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIOAuthAuthentication::is_type_Set() const{
    return m_type_isSet;
}

bool OAIOAuthAuthentication::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIOAuthAuthentication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOAuthAuthentication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
