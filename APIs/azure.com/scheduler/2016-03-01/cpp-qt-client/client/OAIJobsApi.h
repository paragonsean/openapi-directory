/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobsApi_H
#define OAI_OAIJobsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJobDefinition.h"
#include "OAIJobHistoryListResult.h"
#include "OAIJobListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobsApi : public QObject {
    Q_OBJECT

public:
    OAIJobsApi(const int timeOut = 0);
    ~OAIJobsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  job OAIJobDefinition [required]
    */
    virtual void jobsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &job_name, const QString &api_version, const OAIJobDefinition &job);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &job_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobsGet(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &job_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void jobsList(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void jobsListJobHistory(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &job_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  job OAIJobDefinition [required]
    */
    virtual void jobsPatch(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &job_name, const QString &api_version, const OAIJobDefinition &job);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  job_collection_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobsRun(const QString &subscription_id, const QString &resource_group_name, const QString &job_collection_name, const QString &job_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void jobsDeleteCallback(OAIHttpRequestWorker *worker);
    void jobsGetCallback(OAIHttpRequestWorker *worker);
    void jobsListCallback(OAIHttpRequestWorker *worker);
    void jobsListJobHistoryCallback(OAIHttpRequestWorker *worker);
    void jobsPatchCallback(OAIHttpRequestWorker *worker);
    void jobsRunCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobsCreateOrUpdateSignal(OAIJobDefinition summary);
    void jobsDeleteSignal();
    void jobsGetSignal(OAIJobDefinition summary);
    void jobsListSignal(OAIJobListResult summary);
    void jobsListJobHistorySignal(OAIJobHistoryListResult summary);
    void jobsPatchSignal(OAIJobDefinition summary);
    void jobsRunSignal();


    void jobsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJobDefinition summary);
    void jobsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jobsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobDefinition summary);
    void jobsListSignalFull(OAIHttpRequestWorker *worker, OAIJobListResult summary);
    void jobsListJobHistorySignalFull(OAIHttpRequestWorker *worker, OAIJobHistoryListResult summary);
    void jobsPatchSignalFull(OAIHttpRequestWorker *worker, OAIJobDefinition summary);
    void jobsRunSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use jobsCreateOrUpdateSignalError() instead")
    void jobsCreateOrUpdateSignalE(OAIJobDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCreateOrUpdateSignalError(OAIJobDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsDeleteSignalError() instead")
    void jobsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalError() instead")
    void jobsGetSignalE(OAIJobDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalError(OAIJobDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListSignalError() instead")
    void jobsListSignalE(OAIJobListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListSignalError(OAIJobListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListJobHistorySignalError() instead")
    void jobsListJobHistorySignalE(OAIJobHistoryListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListJobHistorySignalError(OAIJobHistoryListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsPatchSignalError() instead")
    void jobsPatchSignalE(OAIJobDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsPatchSignalError(OAIJobDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsRunSignalError() instead")
    void jobsRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobsRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobsCreateOrUpdateSignalErrorFull() instead")
    void jobsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsDeleteSignalErrorFull() instead")
    void jobsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalErrorFull() instead")
    void jobsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListSignalErrorFull() instead")
    void jobsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListJobHistorySignalErrorFull() instead")
    void jobsListJobHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListJobHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsPatchSignalErrorFull() instead")
    void jobsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsRunSignalErrorFull() instead")
    void jobsRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
