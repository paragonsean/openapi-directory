/**
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobProperties::OAIJobProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobProperties::OAIJobProperties() {
    this->initializeModel();
}

OAIJobProperties::~OAIJobProperties() {}

void OAIJobProperties::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIJobProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobProperties::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("recurrence")]);
    m_recurrence_isSet = !json[QString("recurrence")].isNull() && m_recurrence_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIJobProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_recurrence.isSet()) {
        obj.insert(QString("recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIJobAction OAIJobProperties::getAction() const {
    return m_action;
}
void OAIJobProperties::setAction(const OAIJobAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIJobProperties::is_action_Set() const{
    return m_action_isSet;
}

bool OAIJobProperties::is_action_Valid() const{
    return m_action_isValid;
}

OAIJobRecurrence OAIJobProperties::getRecurrence() const {
    return m_recurrence;
}
void OAIJobProperties::setRecurrence(const OAIJobRecurrence &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIJobProperties::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIJobProperties::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

QDateTime OAIJobProperties::getStartTime() const {
    return m_start_time;
}
void OAIJobProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIJobProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIJobProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIJobState OAIJobProperties::getState() const {
    return m_state;
}
void OAIJobProperties::setState(const OAIJobState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJobProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJobProperties::is_state_Valid() const{
    return m_state_isValid;
}

OAIJobStatus OAIJobProperties::getStatus() const {
    return m_status;
}
void OAIJobProperties::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIJobProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
