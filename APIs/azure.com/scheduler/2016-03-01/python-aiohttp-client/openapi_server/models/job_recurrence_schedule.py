# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_recurrence_schedule_monthly_occurrence import JobRecurrenceScheduleMonthlyOccurrence
from openapi_server import util


class JobRecurrenceSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hours: List[int]=None, minutes: List[int]=None, month_days: List[int]=None, monthly_occurrences: List[JobRecurrenceScheduleMonthlyOccurrence]=None, week_days: List[str]=None):
        """JobRecurrenceSchedule - a model defined in OpenAPI

        :param hours: The hours of this JobRecurrenceSchedule.
        :param minutes: The minutes of this JobRecurrenceSchedule.
        :param month_days: The month_days of this JobRecurrenceSchedule.
        :param monthly_occurrences: The monthly_occurrences of this JobRecurrenceSchedule.
        :param week_days: The week_days of this JobRecurrenceSchedule.
        """
        self.openapi_types = {
            'hours': List[int],
            'minutes': List[int],
            'month_days': List[int],
            'monthly_occurrences': List[JobRecurrenceScheduleMonthlyOccurrence],
            'week_days': List[str]
        }

        self.attribute_map = {
            'hours': 'hours',
            'minutes': 'minutes',
            'month_days': 'monthDays',
            'monthly_occurrences': 'monthlyOccurrences',
            'week_days': 'weekDays'
        }

        self._hours = hours
        self._minutes = minutes
        self._month_days = month_days
        self._monthly_occurrences = monthly_occurrences
        self._week_days = week_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobRecurrenceSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobRecurrenceSchedule of this JobRecurrenceSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hours(self):
        """Gets the hours of this JobRecurrenceSchedule.

        Gets or sets the hours of the day that the job should execute at.

        :return: The hours of this JobRecurrenceSchedule.
        :rtype: List[int]
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this JobRecurrenceSchedule.

        Gets or sets the hours of the day that the job should execute at.

        :param hours: The hours of this JobRecurrenceSchedule.
        :type hours: List[int]
        """

        self._hours = hours

    @property
    def minutes(self):
        """Gets the minutes of this JobRecurrenceSchedule.

        Gets or sets the minutes of the hour that the job should execute at.

        :return: The minutes of this JobRecurrenceSchedule.
        :rtype: List[int]
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this JobRecurrenceSchedule.

        Gets or sets the minutes of the hour that the job should execute at.

        :param minutes: The minutes of this JobRecurrenceSchedule.
        :type minutes: List[int]
        """

        self._minutes = minutes

    @property
    def month_days(self):
        """Gets the month_days of this JobRecurrenceSchedule.

        Gets or sets the days of the month that the job should execute on. Must be between 1 and 31.

        :return: The month_days of this JobRecurrenceSchedule.
        :rtype: List[int]
        """
        return self._month_days

    @month_days.setter
    def month_days(self, month_days):
        """Sets the month_days of this JobRecurrenceSchedule.

        Gets or sets the days of the month that the job should execute on. Must be between 1 and 31.

        :param month_days: The month_days of this JobRecurrenceSchedule.
        :type month_days: List[int]
        """

        self._month_days = month_days

    @property
    def monthly_occurrences(self):
        """Gets the monthly_occurrences of this JobRecurrenceSchedule.

        Gets or sets the occurrences of days within a month.

        :return: The monthly_occurrences of this JobRecurrenceSchedule.
        :rtype: List[JobRecurrenceScheduleMonthlyOccurrence]
        """
        return self._monthly_occurrences

    @monthly_occurrences.setter
    def monthly_occurrences(self, monthly_occurrences):
        """Sets the monthly_occurrences of this JobRecurrenceSchedule.

        Gets or sets the occurrences of days within a month.

        :param monthly_occurrences: The monthly_occurrences of this JobRecurrenceSchedule.
        :type monthly_occurrences: List[JobRecurrenceScheduleMonthlyOccurrence]
        """

        self._monthly_occurrences = monthly_occurrences

    @property
    def week_days(self):
        """Gets the week_days of this JobRecurrenceSchedule.

        Gets or sets the days of the week that the job should execute on.

        :return: The week_days of this JobRecurrenceSchedule.
        :rtype: List[str]
        """
        return self._week_days

    @week_days.setter
    def week_days(self, week_days):
        """Sets the week_days of this JobRecurrenceSchedule.

        Gets or sets the days of the week that the job should execute on.

        :param week_days: The week_days of this JobRecurrenceSchedule.
        :type week_days: List[str]
        """
        allowed_values = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]  # noqa: E501
        if not set(week_days).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `week_days` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(week_days) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._week_days = week_days
