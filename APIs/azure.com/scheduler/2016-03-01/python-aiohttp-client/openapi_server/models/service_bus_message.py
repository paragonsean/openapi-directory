# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_bus_authentication import ServiceBusAuthentication
from openapi_server.models.service_bus_brokered_message_properties import ServiceBusBrokeredMessageProperties
from openapi_server import util


class ServiceBusMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: ServiceBusAuthentication=None, brokered_message_properties: ServiceBusBrokeredMessageProperties=None, custom_message_properties: Dict[str, str]=None, message: str=None, namespace: str=None, transport_type: str=None):
        """ServiceBusMessage - a model defined in OpenAPI

        :param authentication: The authentication of this ServiceBusMessage.
        :param brokered_message_properties: The brokered_message_properties of this ServiceBusMessage.
        :param custom_message_properties: The custom_message_properties of this ServiceBusMessage.
        :param message: The message of this ServiceBusMessage.
        :param namespace: The namespace of this ServiceBusMessage.
        :param transport_type: The transport_type of this ServiceBusMessage.
        """
        self.openapi_types = {
            'authentication': ServiceBusAuthentication,
            'brokered_message_properties': ServiceBusBrokeredMessageProperties,
            'custom_message_properties': Dict[str, str],
            'message': str,
            'namespace': str,
            'transport_type': str
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'brokered_message_properties': 'brokeredMessageProperties',
            'custom_message_properties': 'customMessageProperties',
            'message': 'message',
            'namespace': 'namespace',
            'transport_type': 'transportType'
        }

        self._authentication = authentication
        self._brokered_message_properties = brokered_message_properties
        self._custom_message_properties = custom_message_properties
        self._message = message
        self._namespace = namespace
        self._transport_type = transport_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceBusMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceBusMessage of this ServiceBusMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this ServiceBusMessage.


        :return: The authentication of this ServiceBusMessage.
        :rtype: ServiceBusAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this ServiceBusMessage.


        :param authentication: The authentication of this ServiceBusMessage.
        :type authentication: ServiceBusAuthentication
        """

        self._authentication = authentication

    @property
    def brokered_message_properties(self):
        """Gets the brokered_message_properties of this ServiceBusMessage.


        :return: The brokered_message_properties of this ServiceBusMessage.
        :rtype: ServiceBusBrokeredMessageProperties
        """
        return self._brokered_message_properties

    @brokered_message_properties.setter
    def brokered_message_properties(self, brokered_message_properties):
        """Sets the brokered_message_properties of this ServiceBusMessage.


        :param brokered_message_properties: The brokered_message_properties of this ServiceBusMessage.
        :type brokered_message_properties: ServiceBusBrokeredMessageProperties
        """

        self._brokered_message_properties = brokered_message_properties

    @property
    def custom_message_properties(self):
        """Gets the custom_message_properties of this ServiceBusMessage.

        Gets or sets the custom message properties.

        :return: The custom_message_properties of this ServiceBusMessage.
        :rtype: Dict[str, str]
        """
        return self._custom_message_properties

    @custom_message_properties.setter
    def custom_message_properties(self, custom_message_properties):
        """Sets the custom_message_properties of this ServiceBusMessage.

        Gets or sets the custom message properties.

        :param custom_message_properties: The custom_message_properties of this ServiceBusMessage.
        :type custom_message_properties: Dict[str, str]
        """

        self._custom_message_properties = custom_message_properties

    @property
    def message(self):
        """Gets the message of this ServiceBusMessage.

        Gets or sets the message.

        :return: The message of this ServiceBusMessage.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ServiceBusMessage.

        Gets or sets the message.

        :param message: The message of this ServiceBusMessage.
        :type message: str
        """

        self._message = message

    @property
    def namespace(self):
        """Gets the namespace of this ServiceBusMessage.

        Gets or sets the namespace.

        :return: The namespace of this ServiceBusMessage.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ServiceBusMessage.

        Gets or sets the namespace.

        :param namespace: The namespace of this ServiceBusMessage.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def transport_type(self):
        """Gets the transport_type of this ServiceBusMessage.

        Gets or sets the transport type.

        :return: The transport_type of this ServiceBusMessage.
        :rtype: str
        """
        return self._transport_type

    @transport_type.setter
    def transport_type(self, transport_type):
        """Sets the transport_type of this ServiceBusMessage.

        Gets or sets the transport type.

        :param transport_type: The transport_type of this ServiceBusMessage.
        :type transport_type: str
        """
        allowed_values = ["NotSpecified", "NetMessaging", "AMQP"]  # noqa: E501
        if transport_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_type` ({0}), must be one of {1}"
                .format(transport_type, allowed_values)
            )

        self._transport_type = transport_type
