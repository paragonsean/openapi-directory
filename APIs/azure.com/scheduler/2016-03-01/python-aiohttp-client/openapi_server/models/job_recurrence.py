# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_recurrence_schedule import JobRecurrenceSchedule
from openapi_server import util


class JobRecurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, end_time: datetime=None, frequency: str=None, interval: int=None, schedule: JobRecurrenceSchedule=None):
        """JobRecurrence - a model defined in OpenAPI

        :param count: The count of this JobRecurrence.
        :param end_time: The end_time of this JobRecurrence.
        :param frequency: The frequency of this JobRecurrence.
        :param interval: The interval of this JobRecurrence.
        :param schedule: The schedule of this JobRecurrence.
        """
        self.openapi_types = {
            'count': int,
            'end_time': datetime,
            'frequency': str,
            'interval': int,
            'schedule': JobRecurrenceSchedule
        }

        self.attribute_map = {
            'count': 'count',
            'end_time': 'endTime',
            'frequency': 'frequency',
            'interval': 'interval',
            'schedule': 'schedule'
        }

        self._count = count
        self._end_time = end_time
        self._frequency = frequency
        self._interval = interval
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobRecurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobRecurrence of this JobRecurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this JobRecurrence.

        Gets or sets the maximum number of times that the job should run.

        :return: The count of this JobRecurrence.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this JobRecurrence.

        Gets or sets the maximum number of times that the job should run.

        :param count: The count of this JobRecurrence.
        :type count: int
        """

        self._count = count

    @property
    def end_time(self):
        """Gets the end_time of this JobRecurrence.

        Gets or sets the time at which the job will complete.

        :return: The end_time of this JobRecurrence.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobRecurrence.

        Gets or sets the time at which the job will complete.

        :param end_time: The end_time of this JobRecurrence.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def frequency(self):
        """Gets the frequency of this JobRecurrence.

        Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).

        :return: The frequency of this JobRecurrence.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this JobRecurrence.

        Gets or sets the frequency of recurrence (second, minute, hour, day, week, month).

        :param frequency: The frequency of this JobRecurrence.
        :type frequency: str
        """
        allowed_values = ["Minute", "Hour", "Day", "Week", "Month"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def interval(self):
        """Gets the interval of this JobRecurrence.

        Gets or sets the interval between retries.

        :return: The interval of this JobRecurrence.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this JobRecurrence.

        Gets or sets the interval between retries.

        :param interval: The interval of this JobRecurrence.
        :type interval: int
        """

        self._interval = interval

    @property
    def schedule(self):
        """Gets the schedule of this JobRecurrence.


        :return: The schedule of this JobRecurrence.
        :rtype: JobRecurrenceSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this JobRecurrence.


        :param schedule: The schedule of this JobRecurrence.
        :type schedule: JobRecurrenceSchedule
        """

        self._schedule = schedule
