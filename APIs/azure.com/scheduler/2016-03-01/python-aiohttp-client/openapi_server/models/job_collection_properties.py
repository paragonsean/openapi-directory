# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_collection_quota import JobCollectionQuota
from openapi_server.models.sku import Sku
from openapi_server import util


class JobCollectionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quota: JobCollectionQuota=None, sku: Sku=None, state: str=None):
        """JobCollectionProperties - a model defined in OpenAPI

        :param quota: The quota of this JobCollectionProperties.
        :param sku: The sku of this JobCollectionProperties.
        :param state: The state of this JobCollectionProperties.
        """
        self.openapi_types = {
            'quota': JobCollectionQuota,
            'sku': Sku,
            'state': str
        }

        self.attribute_map = {
            'quota': 'quota',
            'sku': 'sku',
            'state': 'state'
        }

        self._quota = quota
        self._sku = sku
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobCollectionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobCollectionProperties of this JobCollectionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quota(self):
        """Gets the quota of this JobCollectionProperties.


        :return: The quota of this JobCollectionProperties.
        :rtype: JobCollectionQuota
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this JobCollectionProperties.


        :param quota: The quota of this JobCollectionProperties.
        :type quota: JobCollectionQuota
        """

        self._quota = quota

    @property
    def sku(self):
        """Gets the sku of this JobCollectionProperties.


        :return: The sku of this JobCollectionProperties.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this JobCollectionProperties.


        :param sku: The sku of this JobCollectionProperties.
        :type sku: Sku
        """

        self._sku = sku

    @property
    def state(self):
        """Gets the state of this JobCollectionProperties.

        Gets or sets the state.

        :return: The state of this JobCollectionProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobCollectionProperties.

        Gets or sets the state.

        :param state: The state of this JobCollectionProperties.
        :type state: str
        """
        allowed_values = ["Enabled", "Disabled", "Suspended", "Deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
