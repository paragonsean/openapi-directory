# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_action import JobAction
from openapi_server.models.job_recurrence import JobRecurrence
from openapi_server.models.job_state import JobState
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class JobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: JobAction=None, recurrence: JobRecurrence=None, start_time: datetime=None, state: JobState=None, status: JobStatus=None):
        """JobProperties - a model defined in OpenAPI

        :param action: The action of this JobProperties.
        :param recurrence: The recurrence of this JobProperties.
        :param start_time: The start_time of this JobProperties.
        :param state: The state of this JobProperties.
        :param status: The status of this JobProperties.
        """
        self.openapi_types = {
            'action': JobAction,
            'recurrence': JobRecurrence,
            'start_time': datetime,
            'state': JobState,
            'status': JobStatus
        }

        self.attribute_map = {
            'action': 'action',
            'recurrence': 'recurrence',
            'start_time': 'startTime',
            'state': 'state',
            'status': 'status'
        }

        self._action = action
        self._recurrence = recurrence
        self._start_time = start_time
        self._state = state
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobProperties of this JobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this JobProperties.


        :return: The action of this JobProperties.
        :rtype: JobAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this JobProperties.


        :param action: The action of this JobProperties.
        :type action: JobAction
        """

        self._action = action

    @property
    def recurrence(self):
        """Gets the recurrence of this JobProperties.


        :return: The recurrence of this JobProperties.
        :rtype: JobRecurrence
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this JobProperties.


        :param recurrence: The recurrence of this JobProperties.
        :type recurrence: JobRecurrence
        """

        self._recurrence = recurrence

    @property
    def start_time(self):
        """Gets the start_time of this JobProperties.

        Gets or sets the job start time.

        :return: The start_time of this JobProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobProperties.

        Gets or sets the job start time.

        :param start_time: The start_time of this JobProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this JobProperties.


        :return: The state of this JobProperties.
        :rtype: JobState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobProperties.


        :param state: The state of this JobProperties.
        :type state: JobState
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this JobProperties.


        :return: The status of this JobProperties.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobProperties.


        :param status: The status of this JobProperties.
        :type status: JobStatus
        """

        self._status = status
