# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_count: int=None, failure_count: int=None, faulted_count: int=None, last_execution_time: datetime=None, next_execution_time: datetime=None):
        """JobStatus - a model defined in OpenAPI

        :param execution_count: The execution_count of this JobStatus.
        :param failure_count: The failure_count of this JobStatus.
        :param faulted_count: The faulted_count of this JobStatus.
        :param last_execution_time: The last_execution_time of this JobStatus.
        :param next_execution_time: The next_execution_time of this JobStatus.
        """
        self.openapi_types = {
            'execution_count': int,
            'failure_count': int,
            'faulted_count': int,
            'last_execution_time': datetime,
            'next_execution_time': datetime
        }

        self.attribute_map = {
            'execution_count': 'executionCount',
            'failure_count': 'failureCount',
            'faulted_count': 'faultedCount',
            'last_execution_time': 'lastExecutionTime',
            'next_execution_time': 'nextExecutionTime'
        }

        self._execution_count = execution_count
        self._failure_count = failure_count
        self._faulted_count = faulted_count
        self._last_execution_time = last_execution_time
        self._next_execution_time = next_execution_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobStatus of this JobStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_count(self):
        """Gets the execution_count of this JobStatus.

        Gets the number of times this job has executed.

        :return: The execution_count of this JobStatus.
        :rtype: int
        """
        return self._execution_count

    @execution_count.setter
    def execution_count(self, execution_count):
        """Sets the execution_count of this JobStatus.

        Gets the number of times this job has executed.

        :param execution_count: The execution_count of this JobStatus.
        :type execution_count: int
        """

        self._execution_count = execution_count

    @property
    def failure_count(self):
        """Gets the failure_count of this JobStatus.

        Gets the number of times this job has failed.

        :return: The failure_count of this JobStatus.
        :rtype: int
        """
        return self._failure_count

    @failure_count.setter
    def failure_count(self, failure_count):
        """Sets the failure_count of this JobStatus.

        Gets the number of times this job has failed.

        :param failure_count: The failure_count of this JobStatus.
        :type failure_count: int
        """

        self._failure_count = failure_count

    @property
    def faulted_count(self):
        """Gets the faulted_count of this JobStatus.

        Gets the number of faulted occurrences (occurrences that were retried and failed as many times as the retry policy states).

        :return: The faulted_count of this JobStatus.
        :rtype: int
        """
        return self._faulted_count

    @faulted_count.setter
    def faulted_count(self, faulted_count):
        """Sets the faulted_count of this JobStatus.

        Gets the number of faulted occurrences (occurrences that were retried and failed as many times as the retry policy states).

        :param faulted_count: The faulted_count of this JobStatus.
        :type faulted_count: int
        """

        self._faulted_count = faulted_count

    @property
    def last_execution_time(self):
        """Gets the last_execution_time of this JobStatus.

        Gets the time the last occurrence executed in ISO-8601 format.  Could be empty if job has not run yet.

        :return: The last_execution_time of this JobStatus.
        :rtype: datetime
        """
        return self._last_execution_time

    @last_execution_time.setter
    def last_execution_time(self, last_execution_time):
        """Sets the last_execution_time of this JobStatus.

        Gets the time the last occurrence executed in ISO-8601 format.  Could be empty if job has not run yet.

        :param last_execution_time: The last_execution_time of this JobStatus.
        :type last_execution_time: datetime
        """

        self._last_execution_time = last_execution_time

    @property
    def next_execution_time(self):
        """Gets the next_execution_time of this JobStatus.

        Gets the time of the next occurrence in ISO-8601 format. Could be empty if the job is completed.

        :return: The next_execution_time of this JobStatus.
        :rtype: datetime
        """
        return self._next_execution_time

    @next_execution_time.setter
    def next_execution_time(self, next_execution_time):
        """Sets the next_execution_time of this JobStatus.

        Gets the time of the next occurrence in ISO-8601 format. Could be empty if the job is completed.

        :param next_execution_time: The next_execution_time of this JobStatus.
        :type next_execution_time: datetime
        """

        self._next_execution_time = next_execution_time
