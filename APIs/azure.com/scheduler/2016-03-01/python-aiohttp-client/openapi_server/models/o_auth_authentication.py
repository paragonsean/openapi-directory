# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_authentication import HttpAuthentication
from openapi_server import util


class OAuthAuthentication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audience: str=None, client_id: str=None, secret: str=None, tenant: str=None, type: str=None):
        """OAuthAuthentication - a model defined in OpenAPI

        :param audience: The audience of this OAuthAuthentication.
        :param client_id: The client_id of this OAuthAuthentication.
        :param secret: The secret of this OAuthAuthentication.
        :param tenant: The tenant of this OAuthAuthentication.
        :param type: The type of this OAuthAuthentication.
        """
        self.openapi_types = {
            'audience': str,
            'client_id': str,
            'secret': str,
            'tenant': str,
            'type': str
        }

        self.attribute_map = {
            'audience': 'audience',
            'client_id': 'clientId',
            'secret': 'secret',
            'tenant': 'tenant',
            'type': 'type'
        }

        self._audience = audience
        self._client_id = client_id
        self._secret = secret
        self._tenant = tenant
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuthAuthentication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuthAuthentication of this OAuthAuthentication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audience(self):
        """Gets the audience of this OAuthAuthentication.

        Gets or sets the audience.

        :return: The audience of this OAuthAuthentication.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this OAuthAuthentication.

        Gets or sets the audience.

        :param audience: The audience of this OAuthAuthentication.
        :type audience: str
        """

        self._audience = audience

    @property
    def client_id(self):
        """Gets the client_id of this OAuthAuthentication.

        Gets or sets the client identifier.

        :return: The client_id of this OAuthAuthentication.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuthAuthentication.

        Gets or sets the client identifier.

        :param client_id: The client_id of this OAuthAuthentication.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def secret(self):
        """Gets the secret of this OAuthAuthentication.

        Gets or sets the secret, return value will always be empty.

        :return: The secret of this OAuthAuthentication.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this OAuthAuthentication.

        Gets or sets the secret, return value will always be empty.

        :param secret: The secret of this OAuthAuthentication.
        :type secret: str
        """

        self._secret = secret

    @property
    def tenant(self):
        """Gets the tenant of this OAuthAuthentication.

        Gets or sets the tenant.

        :return: The tenant of this OAuthAuthentication.
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this OAuthAuthentication.

        Gets or sets the tenant.

        :param tenant: The tenant of this OAuthAuthentication.
        :type tenant: str
        """

        self._tenant = tenant

    @property
    def type(self):
        """Gets the type of this OAuthAuthentication.

        Gets or sets the HTTP authentication type.

        :return: The type of this OAuthAuthentication.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OAuthAuthentication.

        Gets or sets the HTTP authentication type.

        :param type: The type of this OAuthAuthentication.
        :type type: str
        """
        allowed_values = ["NotSpecified", "ClientCertificate", "ActiveDirectoryOAuth", "Basic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
