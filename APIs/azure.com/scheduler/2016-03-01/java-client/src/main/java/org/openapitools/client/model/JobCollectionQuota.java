/*
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JobMaxRecurrence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobCollectionQuota
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:16.074547-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobCollectionQuota {
  public static final String SERIALIZED_NAME_MAX_JOB_COUNT = "maxJobCount";
  @SerializedName(SERIALIZED_NAME_MAX_JOB_COUNT)
  private Integer maxJobCount;

  public static final String SERIALIZED_NAME_MAX_JOB_OCCURRENCE = "maxJobOccurrence";
  @SerializedName(SERIALIZED_NAME_MAX_JOB_OCCURRENCE)
  private Integer maxJobOccurrence;

  public static final String SERIALIZED_NAME_MAX_RECURRENCE = "maxRecurrence";
  @SerializedName(SERIALIZED_NAME_MAX_RECURRENCE)
  private JobMaxRecurrence maxRecurrence;

  public JobCollectionQuota() {
  }

  public JobCollectionQuota maxJobCount(Integer maxJobCount) {
    this.maxJobCount = maxJobCount;
    return this;
  }

  /**
   * Gets or set the maximum job count.
   * @return maxJobCount
   */
  @javax.annotation.Nullable
  public Integer getMaxJobCount() {
    return maxJobCount;
  }

  public void setMaxJobCount(Integer maxJobCount) {
    this.maxJobCount = maxJobCount;
  }


  public JobCollectionQuota maxJobOccurrence(Integer maxJobOccurrence) {
    this.maxJobOccurrence = maxJobOccurrence;
    return this;
  }

  /**
   * Gets or sets the maximum job occurrence.
   * @return maxJobOccurrence
   */
  @javax.annotation.Nullable
  public Integer getMaxJobOccurrence() {
    return maxJobOccurrence;
  }

  public void setMaxJobOccurrence(Integer maxJobOccurrence) {
    this.maxJobOccurrence = maxJobOccurrence;
  }


  public JobCollectionQuota maxRecurrence(JobMaxRecurrence maxRecurrence) {
    this.maxRecurrence = maxRecurrence;
    return this;
  }

  /**
   * Get maxRecurrence
   * @return maxRecurrence
   */
  @javax.annotation.Nullable
  public JobMaxRecurrence getMaxRecurrence() {
    return maxRecurrence;
  }

  public void setMaxRecurrence(JobMaxRecurrence maxRecurrence) {
    this.maxRecurrence = maxRecurrence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobCollectionQuota jobCollectionQuota = (JobCollectionQuota) o;
    return Objects.equals(this.maxJobCount, jobCollectionQuota.maxJobCount) &&
        Objects.equals(this.maxJobOccurrence, jobCollectionQuota.maxJobOccurrence) &&
        Objects.equals(this.maxRecurrence, jobCollectionQuota.maxRecurrence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxJobCount, maxJobOccurrence, maxRecurrence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobCollectionQuota {\n");
    sb.append("    maxJobCount: ").append(toIndentedString(maxJobCount)).append("\n");
    sb.append("    maxJobOccurrence: ").append(toIndentedString(maxJobOccurrence)).append("\n");
    sb.append("    maxRecurrence: ").append(toIndentedString(maxRecurrence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxJobCount");
    openapiFields.add("maxJobOccurrence");
    openapiFields.add("maxRecurrence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobCollectionQuota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobCollectionQuota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobCollectionQuota is not found in the empty JSON string", JobCollectionQuota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobCollectionQuota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobCollectionQuota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `maxRecurrence`
      if (jsonObj.get("maxRecurrence") != null && !jsonObj.get("maxRecurrence").isJsonNull()) {
        JobMaxRecurrence.validateJsonElement(jsonObj.get("maxRecurrence"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobCollectionQuota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobCollectionQuota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobCollectionQuota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobCollectionQuota.class));

       return (TypeAdapter<T>) new TypeAdapter<JobCollectionQuota>() {
           @Override
           public void write(JsonWriter out, JobCollectionQuota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobCollectionQuota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobCollectionQuota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobCollectionQuota
   * @throws IOException if the JSON string is invalid with respect to JobCollectionQuota
   */
  public static JobCollectionQuota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobCollectionQuota.class);
  }

  /**
   * Convert an instance of JobCollectionQuota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

