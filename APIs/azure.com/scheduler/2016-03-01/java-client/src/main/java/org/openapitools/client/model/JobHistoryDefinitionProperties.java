/*
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.JobExecutionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobHistoryDefinitionProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:16.074547-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobHistoryDefinitionProperties {
  /**
   * Gets the job history action name.
   */
  @JsonAdapter(ActionNameEnum.Adapter.class)
  public enum ActionNameEnum {
    MAIN_ACTION("MainAction"),
    
    ERROR_ACTION("ErrorAction");

    private String value;

    ActionNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionNameEnum fromValue(String value) {
      for (ActionNameEnum b : ActionNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_NAME = "actionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private ActionNameEnum actionName;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EXPECTED_EXECUTION_TIME = "expectedExecutionTime";
  @SerializedName(SERIALIZED_NAME_EXPECTED_EXECUTION_TIME)
  private OffsetDateTime expectedExecutionTime;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_REPEAT_COUNT = "repeatCount";
  @SerializedName(SERIALIZED_NAME_REPEAT_COUNT)
  private Integer repeatCount;

  public static final String SERIALIZED_NAME_RETRY_COUNT = "retryCount";
  @SerializedName(SERIALIZED_NAME_RETRY_COUNT)
  private Integer retryCount;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private JobExecutionStatus status;

  public JobHistoryDefinitionProperties() {
  }

  public JobHistoryDefinitionProperties(
     ActionNameEnum actionName, 
     OffsetDateTime endTime, 
     OffsetDateTime expectedExecutionTime, 
     String message, 
     Integer repeatCount, 
     Integer retryCount, 
     OffsetDateTime startTime
  ) {
    this();
    this.actionName = actionName;
    this.endTime = endTime;
    this.expectedExecutionTime = expectedExecutionTime;
    this.message = message;
    this.repeatCount = repeatCount;
    this.retryCount = retryCount;
    this.startTime = startTime;
  }

  /**
   * Gets the job history action name.
   * @return actionName
   */
  @javax.annotation.Nullable
  public ActionNameEnum getActionName() {
    return actionName;
  }



  /**
   * Gets the end time for this job.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  /**
   * Gets the expected execution time for this job.
   * @return expectedExecutionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpectedExecutionTime() {
    return expectedExecutionTime;
  }



  /**
   * Gets the message for the job history.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }



  /**
   * Gets the repeat count for the job.
   * @return repeatCount
   */
  @javax.annotation.Nullable
  public Integer getRepeatCount() {
    return repeatCount;
  }



  /**
   * Gets the retry count for job.
   * @return retryCount
   */
  @javax.annotation.Nullable
  public Integer getRetryCount() {
    return retryCount;
  }



  /**
   * Gets the start time for this job.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  public JobHistoryDefinitionProperties status(JobExecutionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public JobExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(JobExecutionStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobHistoryDefinitionProperties jobHistoryDefinitionProperties = (JobHistoryDefinitionProperties) o;
    return Objects.equals(this.actionName, jobHistoryDefinitionProperties.actionName) &&
        Objects.equals(this.endTime, jobHistoryDefinitionProperties.endTime) &&
        Objects.equals(this.expectedExecutionTime, jobHistoryDefinitionProperties.expectedExecutionTime) &&
        Objects.equals(this.message, jobHistoryDefinitionProperties.message) &&
        Objects.equals(this.repeatCount, jobHistoryDefinitionProperties.repeatCount) &&
        Objects.equals(this.retryCount, jobHistoryDefinitionProperties.retryCount) &&
        Objects.equals(this.startTime, jobHistoryDefinitionProperties.startTime) &&
        Objects.equals(this.status, jobHistoryDefinitionProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionName, endTime, expectedExecutionTime, message, repeatCount, retryCount, startTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobHistoryDefinitionProperties {\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    expectedExecutionTime: ").append(toIndentedString(expectedExecutionTime)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    repeatCount: ").append(toIndentedString(repeatCount)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionName");
    openapiFields.add("endTime");
    openapiFields.add("expectedExecutionTime");
    openapiFields.add("message");
    openapiFields.add("repeatCount");
    openapiFields.add("retryCount");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobHistoryDefinitionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobHistoryDefinitionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobHistoryDefinitionProperties is not found in the empty JSON string", JobHistoryDefinitionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobHistoryDefinitionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobHistoryDefinitionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionName") != null && !jsonObj.get("actionName").isJsonNull()) && !jsonObj.get("actionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionName").toString()));
      }
      // validate the optional field `actionName`
      if (jsonObj.get("actionName") != null && !jsonObj.get("actionName").isJsonNull()) {
        ActionNameEnum.validateJsonElement(jsonObj.get("actionName"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        JobExecutionStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobHistoryDefinitionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobHistoryDefinitionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobHistoryDefinitionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobHistoryDefinitionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobHistoryDefinitionProperties>() {
           @Override
           public void write(JsonWriter out, JobHistoryDefinitionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobHistoryDefinitionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobHistoryDefinitionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobHistoryDefinitionProperties
   * @throws IOException if the JSON string is invalid with respect to JobHistoryDefinitionProperties
   */
  public static JobHistoryDefinitionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobHistoryDefinitionProperties.class);
  }

  /**
   * Convert an instance of JobHistoryDefinitionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

