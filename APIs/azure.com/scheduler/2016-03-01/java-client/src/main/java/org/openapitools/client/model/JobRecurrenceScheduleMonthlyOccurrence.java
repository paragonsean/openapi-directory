/*
 * SchedulerManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobRecurrenceScheduleMonthlyOccurrence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:39:16.074547-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobRecurrenceScheduleMonthlyOccurrence {
  public static final String SERIALIZED_NAME_OCCURRENCE = "Occurrence";
  @SerializedName(SERIALIZED_NAME_OCCURRENCE)
  private Integer occurrence;

  /**
   * Gets or sets the day. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
   */
  @JsonAdapter(DayEnum.Adapter.class)
  public enum DayEnum {
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday"),
    
    SUNDAY("Sunday");

    private String value;

    DayEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DayEnum fromValue(String value) {
      for (DayEnum b : DayEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DayEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DayEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DayEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DayEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DayEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAY = "day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private DayEnum day;

  public JobRecurrenceScheduleMonthlyOccurrence() {
  }

  public JobRecurrenceScheduleMonthlyOccurrence occurrence(Integer occurrence) {
    this.occurrence = occurrence;
    return this;
  }

  /**
   * Gets or sets the occurrence. Must be between -5 and 5.
   * @return occurrence
   */
  @javax.annotation.Nullable
  public Integer getOccurrence() {
    return occurrence;
  }

  public void setOccurrence(Integer occurrence) {
    this.occurrence = occurrence;
  }


  public JobRecurrenceScheduleMonthlyOccurrence day(DayEnum day) {
    this.day = day;
    return this;
  }

  /**
   * Gets or sets the day. Must be one of monday, tuesday, wednesday, thursday, friday, saturday, sunday.
   * @return day
   */
  @javax.annotation.Nullable
  public DayEnum getDay() {
    return day;
  }

  public void setDay(DayEnum day) {
    this.day = day;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobRecurrenceScheduleMonthlyOccurrence jobRecurrenceScheduleMonthlyOccurrence = (JobRecurrenceScheduleMonthlyOccurrence) o;
    return Objects.equals(this.occurrence, jobRecurrenceScheduleMonthlyOccurrence.occurrence) &&
        Objects.equals(this.day, jobRecurrenceScheduleMonthlyOccurrence.day);
  }

  @Override
  public int hashCode() {
    return Objects.hash(occurrence, day);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobRecurrenceScheduleMonthlyOccurrence {\n");
    sb.append("    occurrence: ").append(toIndentedString(occurrence)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Occurrence");
    openapiFields.add("day");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobRecurrenceScheduleMonthlyOccurrence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobRecurrenceScheduleMonthlyOccurrence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobRecurrenceScheduleMonthlyOccurrence is not found in the empty JSON string", JobRecurrenceScheduleMonthlyOccurrence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobRecurrenceScheduleMonthlyOccurrence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobRecurrenceScheduleMonthlyOccurrence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("day") != null && !jsonObj.get("day").isJsonNull()) && !jsonObj.get("day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("day").toString()));
      }
      // validate the optional field `day`
      if (jsonObj.get("day") != null && !jsonObj.get("day").isJsonNull()) {
        DayEnum.validateJsonElement(jsonObj.get("day"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobRecurrenceScheduleMonthlyOccurrence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobRecurrenceScheduleMonthlyOccurrence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobRecurrenceScheduleMonthlyOccurrence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobRecurrenceScheduleMonthlyOccurrence.class));

       return (TypeAdapter<T>) new TypeAdapter<JobRecurrenceScheduleMonthlyOccurrence>() {
           @Override
           public void write(JsonWriter out, JobRecurrenceScheduleMonthlyOccurrence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobRecurrenceScheduleMonthlyOccurrence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobRecurrenceScheduleMonthlyOccurrence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobRecurrenceScheduleMonthlyOccurrence
   * @throws IOException if the JSON string is invalid with respect to JobRecurrenceScheduleMonthlyOccurrence
   */
  public static JobRecurrenceScheduleMonthlyOccurrence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobRecurrenceScheduleMonthlyOccurrence.class);
  }

  /**
   * Convert an instance of JobRecurrenceScheduleMonthlyOccurrence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

