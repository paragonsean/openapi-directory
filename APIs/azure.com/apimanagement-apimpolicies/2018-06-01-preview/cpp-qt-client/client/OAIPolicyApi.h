/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Global Policies in Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPolicyApi_H
#define OAI_OAIPolicyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPolicy_Get_200_response.h"
#include "OAIPolicy_ListByService_200_response.h"
#include "OAIPolicy_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPolicyApi : public QObject {
    Q_OBJECT

public:
    OAIPolicyApi(const int timeOut = 0);
    ~OAIPolicyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPolicy_Get_200_response [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void policyCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &policy_id, const QString &api_version, const QString &subscription_id, const OAIPolicy_Get_200_response &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void policyDelete(const QString &resource_group_name, const QString &service_name, const QString &policy_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void policyGet(const QString &resource_group_name, const QString &service_name, const QString &policy_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void policyGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &policy_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void policyListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void policyCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void policyDeleteCallback(OAIHttpRequestWorker *worker);
    void policyGetCallback(OAIHttpRequestWorker *worker);
    void policyGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void policyListByServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void policyCreateOrUpdateSignal(OAIPolicy_Get_200_response summary);
    void policyDeleteSignal();
    void policyGetSignal(OAIPolicy_Get_200_response summary);
    void policyGetEntityTagSignal();
    void policyListByServiceSignal(OAIPolicy_ListByService_200_response summary);


    void policyCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPolicy_Get_200_response summary);
    void policyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void policyGetSignalFull(OAIHttpRequestWorker *worker, OAIPolicy_Get_200_response summary);
    void policyGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void policyListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIPolicy_ListByService_200_response summary);

    Q_DECL_DEPRECATED_X("Use policyCreateOrUpdateSignalError() instead")
    void policyCreateOrUpdateSignalE(OAIPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyCreateOrUpdateSignalError(OAIPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyDeleteSignalError() instead")
    void policyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void policyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyGetSignalError() instead")
    void policyGetSignalE(OAIPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyGetSignalError(OAIPolicy_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyGetEntityTagSignalError() instead")
    void policyGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void policyGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyListByServiceSignalError() instead")
    void policyListByServiceSignalE(OAIPolicy_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyListByServiceSignalError(OAIPolicy_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use policyCreateOrUpdateSignalErrorFull() instead")
    void policyCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyDeleteSignalErrorFull() instead")
    void policyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyGetSignalErrorFull() instead")
    void policyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyGetEntityTagSignalErrorFull() instead")
    void policyGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyListByServiceSignalErrorFull() instead")
    void policyListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
