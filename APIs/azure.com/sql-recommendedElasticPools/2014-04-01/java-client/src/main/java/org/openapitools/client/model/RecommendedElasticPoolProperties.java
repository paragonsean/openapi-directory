/*
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecommendedElasticPoolMetric;
import org.openapitools.client.model.RecommendedElasticPoolPropertiesDatabasesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of a recommended elastic pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:09.213257-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendedElasticPoolProperties {
  public static final String SERIALIZED_NAME_DATABASE_DTU_MAX = "databaseDtuMax";
  @SerializedName(SERIALIZED_NAME_DATABASE_DTU_MAX)
  private Double databaseDtuMax;

  public static final String SERIALIZED_NAME_DATABASE_DTU_MIN = "databaseDtuMin";
  @SerializedName(SERIALIZED_NAME_DATABASE_DTU_MIN)
  private Double databaseDtuMin;

  /**
   * The edition of the recommended elastic pool. The ElasticPoolEdition enumeration contains all the valid editions.
   */
  @JsonAdapter(DatabaseEditionEnum.Adapter.class)
  public enum DatabaseEditionEnum {
    BASIC("Basic"),
    
    STANDARD("Standard"),
    
    PREMIUM("Premium"),
    
    GENERAL_PURPOSE("GeneralPurpose"),
    
    BUSINESS_CRITICAL("BusinessCritical");

    private String value;

    DatabaseEditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatabaseEditionEnum fromValue(String value) {
      for (DatabaseEditionEnum b : DatabaseEditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatabaseEditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatabaseEditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatabaseEditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatabaseEditionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatabaseEditionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATABASE_EDITION = "databaseEdition";
  @SerializedName(SERIALIZED_NAME_DATABASE_EDITION)
  private DatabaseEditionEnum databaseEdition;

  public static final String SERIALIZED_NAME_DATABASES = "databases";
  @SerializedName(SERIALIZED_NAME_DATABASES)
  private List<RecommendedElasticPoolPropertiesDatabasesInner> databases = new ArrayList<>();

  public static final String SERIALIZED_NAME_DTU = "dtu";
  @SerializedName(SERIALIZED_NAME_DTU)
  private Double dtu;

  public static final String SERIALIZED_NAME_MAX_OBSERVED_DTU = "maxObservedDtu";
  @SerializedName(SERIALIZED_NAME_MAX_OBSERVED_DTU)
  private Double maxObservedDtu;

  public static final String SERIALIZED_NAME_MAX_OBSERVED_STORAGE_M_B = "maxObservedStorageMB";
  @SerializedName(SERIALIZED_NAME_MAX_OBSERVED_STORAGE_M_B)
  private Double maxObservedStorageMB;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<RecommendedElasticPoolMetric> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBSERVATION_PERIOD_END = "observationPeriodEnd";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_PERIOD_END)
  private OffsetDateTime observationPeriodEnd;

  public static final String SERIALIZED_NAME_OBSERVATION_PERIOD_START = "observationPeriodStart";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_PERIOD_START)
  private OffsetDateTime observationPeriodStart;

  public static final String SERIALIZED_NAME_STORAGE_M_B = "storageMB";
  @SerializedName(SERIALIZED_NAME_STORAGE_M_B)
  private Double storageMB;

  public RecommendedElasticPoolProperties() {
  }

  public RecommendedElasticPoolProperties(
     DatabaseEditionEnum databaseEdition, 
     List<RecommendedElasticPoolPropertiesDatabasesInner> databases, 
     Double maxObservedDtu, 
     Double maxObservedStorageMB, 
     List<RecommendedElasticPoolMetric> metrics, 
     OffsetDateTime observationPeriodEnd, 
     OffsetDateTime observationPeriodStart
  ) {
    this();
    this.databaseEdition = databaseEdition;
    this.databases = databases;
    this.maxObservedDtu = maxObservedDtu;
    this.maxObservedStorageMB = maxObservedStorageMB;
    this.metrics = metrics;
    this.observationPeriodEnd = observationPeriodEnd;
    this.observationPeriodStart = observationPeriodStart;
  }

  public RecommendedElasticPoolProperties databaseDtuMax(Double databaseDtuMax) {
    this.databaseDtuMax = databaseDtuMax;
    return this;
  }

  /**
   * The maximum DTU for the database.
   * @return databaseDtuMax
   */
  @javax.annotation.Nullable
  public Double getDatabaseDtuMax() {
    return databaseDtuMax;
  }

  public void setDatabaseDtuMax(Double databaseDtuMax) {
    this.databaseDtuMax = databaseDtuMax;
  }


  public RecommendedElasticPoolProperties databaseDtuMin(Double databaseDtuMin) {
    this.databaseDtuMin = databaseDtuMin;
    return this;
  }

  /**
   * The minimum DTU for the database.
   * @return databaseDtuMin
   */
  @javax.annotation.Nullable
  public Double getDatabaseDtuMin() {
    return databaseDtuMin;
  }

  public void setDatabaseDtuMin(Double databaseDtuMin) {
    this.databaseDtuMin = databaseDtuMin;
  }


  /**
   * The edition of the recommended elastic pool. The ElasticPoolEdition enumeration contains all the valid editions.
   * @return databaseEdition
   */
  @javax.annotation.Nullable
  public DatabaseEditionEnum getDatabaseEdition() {
    return databaseEdition;
  }



  /**
   * The list of databases in this pool. Expanded property
   * @return databases
   */
  @javax.annotation.Nullable
  public List<RecommendedElasticPoolPropertiesDatabasesInner> getDatabases() {
    return databases;
  }



  public RecommendedElasticPoolProperties dtu(Double dtu) {
    this.dtu = dtu;
    return this;
  }

  /**
   * The DTU for the recommended elastic pool.
   * @return dtu
   */
  @javax.annotation.Nullable
  public Double getDtu() {
    return dtu;
  }

  public void setDtu(Double dtu) {
    this.dtu = dtu;
  }


  /**
   * Gets maximum observed DTU.
   * @return maxObservedDtu
   */
  @javax.annotation.Nullable
  public Double getMaxObservedDtu() {
    return maxObservedDtu;
  }



  /**
   * Gets maximum observed storage in megabytes.
   * @return maxObservedStorageMB
   */
  @javax.annotation.Nullable
  public Double getMaxObservedStorageMB() {
    return maxObservedStorageMB;
  }



  /**
   * The list of databases housed in the server. Expanded property
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<RecommendedElasticPoolMetric> getMetrics() {
    return metrics;
  }



  /**
   * The observation period start (ISO8601 format).
   * @return observationPeriodEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getObservationPeriodEnd() {
    return observationPeriodEnd;
  }



  /**
   * The observation period start (ISO8601 format).
   * @return observationPeriodStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getObservationPeriodStart() {
    return observationPeriodStart;
  }



  public RecommendedElasticPoolProperties storageMB(Double storageMB) {
    this.storageMB = storageMB;
    return this;
  }

  /**
   * Gets storage size in megabytes.
   * @return storageMB
   */
  @javax.annotation.Nullable
  public Double getStorageMB() {
    return storageMB;
  }

  public void setStorageMB(Double storageMB) {
    this.storageMB = storageMB;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendedElasticPoolProperties recommendedElasticPoolProperties = (RecommendedElasticPoolProperties) o;
    return Objects.equals(this.databaseDtuMax, recommendedElasticPoolProperties.databaseDtuMax) &&
        Objects.equals(this.databaseDtuMin, recommendedElasticPoolProperties.databaseDtuMin) &&
        Objects.equals(this.databaseEdition, recommendedElasticPoolProperties.databaseEdition) &&
        Objects.equals(this.databases, recommendedElasticPoolProperties.databases) &&
        Objects.equals(this.dtu, recommendedElasticPoolProperties.dtu) &&
        Objects.equals(this.maxObservedDtu, recommendedElasticPoolProperties.maxObservedDtu) &&
        Objects.equals(this.maxObservedStorageMB, recommendedElasticPoolProperties.maxObservedStorageMB) &&
        Objects.equals(this.metrics, recommendedElasticPoolProperties.metrics) &&
        Objects.equals(this.observationPeriodEnd, recommendedElasticPoolProperties.observationPeriodEnd) &&
        Objects.equals(this.observationPeriodStart, recommendedElasticPoolProperties.observationPeriodStart) &&
        Objects.equals(this.storageMB, recommendedElasticPoolProperties.storageMB);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseDtuMax, databaseDtuMin, databaseEdition, databases, dtu, maxObservedDtu, maxObservedStorageMB, metrics, observationPeriodEnd, observationPeriodStart, storageMB);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendedElasticPoolProperties {\n");
    sb.append("    databaseDtuMax: ").append(toIndentedString(databaseDtuMax)).append("\n");
    sb.append("    databaseDtuMin: ").append(toIndentedString(databaseDtuMin)).append("\n");
    sb.append("    databaseEdition: ").append(toIndentedString(databaseEdition)).append("\n");
    sb.append("    databases: ").append(toIndentedString(databases)).append("\n");
    sb.append("    dtu: ").append(toIndentedString(dtu)).append("\n");
    sb.append("    maxObservedDtu: ").append(toIndentedString(maxObservedDtu)).append("\n");
    sb.append("    maxObservedStorageMB: ").append(toIndentedString(maxObservedStorageMB)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    observationPeriodEnd: ").append(toIndentedString(observationPeriodEnd)).append("\n");
    sb.append("    observationPeriodStart: ").append(toIndentedString(observationPeriodStart)).append("\n");
    sb.append("    storageMB: ").append(toIndentedString(storageMB)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("databaseDtuMax");
    openapiFields.add("databaseDtuMin");
    openapiFields.add("databaseEdition");
    openapiFields.add("databases");
    openapiFields.add("dtu");
    openapiFields.add("maxObservedDtu");
    openapiFields.add("maxObservedStorageMB");
    openapiFields.add("metrics");
    openapiFields.add("observationPeriodEnd");
    openapiFields.add("observationPeriodStart");
    openapiFields.add("storageMB");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendedElasticPoolProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendedElasticPoolProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendedElasticPoolProperties is not found in the empty JSON string", RecommendedElasticPoolProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendedElasticPoolProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendedElasticPoolProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("databaseEdition") != null && !jsonObj.get("databaseEdition").isJsonNull()) && !jsonObj.get("databaseEdition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseEdition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseEdition").toString()));
      }
      // validate the optional field `databaseEdition`
      if (jsonObj.get("databaseEdition") != null && !jsonObj.get("databaseEdition").isJsonNull()) {
        DatabaseEditionEnum.validateJsonElement(jsonObj.get("databaseEdition"));
      }
      if (jsonObj.get("databases") != null && !jsonObj.get("databases").isJsonNull()) {
        JsonArray jsonArraydatabases = jsonObj.getAsJsonArray("databases");
        if (jsonArraydatabases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("databases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `databases` to be an array in the JSON string but got `%s`", jsonObj.get("databases").toString()));
          }

          // validate the optional field `databases` (array)
          for (int i = 0; i < jsonArraydatabases.size(); i++) {
            RecommendedElasticPoolPropertiesDatabasesInner.validateJsonElement(jsonArraydatabases.get(i));
          };
        }
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            RecommendedElasticPoolMetric.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendedElasticPoolProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendedElasticPoolProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendedElasticPoolProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendedElasticPoolProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendedElasticPoolProperties>() {
           @Override
           public void write(JsonWriter out, RecommendedElasticPoolProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendedElasticPoolProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendedElasticPoolProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendedElasticPoolProperties
   * @throws IOException if the JSON string is invalid with respect to RecommendedElasticPoolProperties
   */
  public static RecommendedElasticPoolProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendedElasticPoolProperties.class);
  }

  /**
   * Convert an instance of RecommendedElasticPoolProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

