# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommended_elastic_pool_metric import RecommendedElasticPoolMetric
from openapi_server.models.recommended_elastic_pool_properties_databases_inner import RecommendedElasticPoolPropertiesDatabasesInner
from openapi_server import util


class RecommendedElasticPoolProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_dtu_max: float=None, database_dtu_min: float=None, database_edition: str=None, databases: List[RecommendedElasticPoolPropertiesDatabasesInner]=None, dtu: float=None, max_observed_dtu: float=None, max_observed_storage_mb: float=None, metrics: List[RecommendedElasticPoolMetric]=None, observation_period_end: datetime=None, observation_period_start: datetime=None, storage_mb: float=None):
        """RecommendedElasticPoolProperties - a model defined in OpenAPI

        :param database_dtu_max: The database_dtu_max of this RecommendedElasticPoolProperties.
        :param database_dtu_min: The database_dtu_min of this RecommendedElasticPoolProperties.
        :param database_edition: The database_edition of this RecommendedElasticPoolProperties.
        :param databases: The databases of this RecommendedElasticPoolProperties.
        :param dtu: The dtu of this RecommendedElasticPoolProperties.
        :param max_observed_dtu: The max_observed_dtu of this RecommendedElasticPoolProperties.
        :param max_observed_storage_mb: The max_observed_storage_mb of this RecommendedElasticPoolProperties.
        :param metrics: The metrics of this RecommendedElasticPoolProperties.
        :param observation_period_end: The observation_period_end of this RecommendedElasticPoolProperties.
        :param observation_period_start: The observation_period_start of this RecommendedElasticPoolProperties.
        :param storage_mb: The storage_mb of this RecommendedElasticPoolProperties.
        """
        self.openapi_types = {
            'database_dtu_max': float,
            'database_dtu_min': float,
            'database_edition': str,
            'databases': List[RecommendedElasticPoolPropertiesDatabasesInner],
            'dtu': float,
            'max_observed_dtu': float,
            'max_observed_storage_mb': float,
            'metrics': List[RecommendedElasticPoolMetric],
            'observation_period_end': datetime,
            'observation_period_start': datetime,
            'storage_mb': float
        }

        self.attribute_map = {
            'database_dtu_max': 'databaseDtuMax',
            'database_dtu_min': 'databaseDtuMin',
            'database_edition': 'databaseEdition',
            'databases': 'databases',
            'dtu': 'dtu',
            'max_observed_dtu': 'maxObservedDtu',
            'max_observed_storage_mb': 'maxObservedStorageMB',
            'metrics': 'metrics',
            'observation_period_end': 'observationPeriodEnd',
            'observation_period_start': 'observationPeriodStart',
            'storage_mb': 'storageMB'
        }

        self._database_dtu_max = database_dtu_max
        self._database_dtu_min = database_dtu_min
        self._database_edition = database_edition
        self._databases = databases
        self._dtu = dtu
        self._max_observed_dtu = max_observed_dtu
        self._max_observed_storage_mb = max_observed_storage_mb
        self._metrics = metrics
        self._observation_period_end = observation_period_end
        self._observation_period_start = observation_period_start
        self._storage_mb = storage_mb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendedElasticPoolProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendedElasticPoolProperties of this RecommendedElasticPoolProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_dtu_max(self):
        """Gets the database_dtu_max of this RecommendedElasticPoolProperties.

        The maximum DTU for the database.

        :return: The database_dtu_max of this RecommendedElasticPoolProperties.
        :rtype: float
        """
        return self._database_dtu_max

    @database_dtu_max.setter
    def database_dtu_max(self, database_dtu_max):
        """Sets the database_dtu_max of this RecommendedElasticPoolProperties.

        The maximum DTU for the database.

        :param database_dtu_max: The database_dtu_max of this RecommendedElasticPoolProperties.
        :type database_dtu_max: float
        """

        self._database_dtu_max = database_dtu_max

    @property
    def database_dtu_min(self):
        """Gets the database_dtu_min of this RecommendedElasticPoolProperties.

        The minimum DTU for the database.

        :return: The database_dtu_min of this RecommendedElasticPoolProperties.
        :rtype: float
        """
        return self._database_dtu_min

    @database_dtu_min.setter
    def database_dtu_min(self, database_dtu_min):
        """Sets the database_dtu_min of this RecommendedElasticPoolProperties.

        The minimum DTU for the database.

        :param database_dtu_min: The database_dtu_min of this RecommendedElasticPoolProperties.
        :type database_dtu_min: float
        """

        self._database_dtu_min = database_dtu_min

    @property
    def database_edition(self):
        """Gets the database_edition of this RecommendedElasticPoolProperties.

        The edition of the recommended elastic pool. The ElasticPoolEdition enumeration contains all the valid editions.

        :return: The database_edition of this RecommendedElasticPoolProperties.
        :rtype: str
        """
        return self._database_edition

    @database_edition.setter
    def database_edition(self, database_edition):
        """Sets the database_edition of this RecommendedElasticPoolProperties.

        The edition of the recommended elastic pool. The ElasticPoolEdition enumeration contains all the valid editions.

        :param database_edition: The database_edition of this RecommendedElasticPoolProperties.
        :type database_edition: str
        """
        allowed_values = ["Basic", "Standard", "Premium", "GeneralPurpose", "BusinessCritical"]  # noqa: E501
        if database_edition not in allowed_values:
            raise ValueError(
                "Invalid value for `database_edition` ({0}), must be one of {1}"
                .format(database_edition, allowed_values)
            )

        self._database_edition = database_edition

    @property
    def databases(self):
        """Gets the databases of this RecommendedElasticPoolProperties.

        The list of databases in this pool. Expanded property

        :return: The databases of this RecommendedElasticPoolProperties.
        :rtype: List[RecommendedElasticPoolPropertiesDatabasesInner]
        """
        return self._databases

    @databases.setter
    def databases(self, databases):
        """Sets the databases of this RecommendedElasticPoolProperties.

        The list of databases in this pool. Expanded property

        :param databases: The databases of this RecommendedElasticPoolProperties.
        :type databases: List[RecommendedElasticPoolPropertiesDatabasesInner]
        """

        self._databases = databases

    @property
    def dtu(self):
        """Gets the dtu of this RecommendedElasticPoolProperties.

        The DTU for the recommended elastic pool.

        :return: The dtu of this RecommendedElasticPoolProperties.
        :rtype: float
        """
        return self._dtu

    @dtu.setter
    def dtu(self, dtu):
        """Sets the dtu of this RecommendedElasticPoolProperties.

        The DTU for the recommended elastic pool.

        :param dtu: The dtu of this RecommendedElasticPoolProperties.
        :type dtu: float
        """

        self._dtu = dtu

    @property
    def max_observed_dtu(self):
        """Gets the max_observed_dtu of this RecommendedElasticPoolProperties.

        Gets maximum observed DTU.

        :return: The max_observed_dtu of this RecommendedElasticPoolProperties.
        :rtype: float
        """
        return self._max_observed_dtu

    @max_observed_dtu.setter
    def max_observed_dtu(self, max_observed_dtu):
        """Sets the max_observed_dtu of this RecommendedElasticPoolProperties.

        Gets maximum observed DTU.

        :param max_observed_dtu: The max_observed_dtu of this RecommendedElasticPoolProperties.
        :type max_observed_dtu: float
        """

        self._max_observed_dtu = max_observed_dtu

    @property
    def max_observed_storage_mb(self):
        """Gets the max_observed_storage_mb of this RecommendedElasticPoolProperties.

        Gets maximum observed storage in megabytes.

        :return: The max_observed_storage_mb of this RecommendedElasticPoolProperties.
        :rtype: float
        """
        return self._max_observed_storage_mb

    @max_observed_storage_mb.setter
    def max_observed_storage_mb(self, max_observed_storage_mb):
        """Sets the max_observed_storage_mb of this RecommendedElasticPoolProperties.

        Gets maximum observed storage in megabytes.

        :param max_observed_storage_mb: The max_observed_storage_mb of this RecommendedElasticPoolProperties.
        :type max_observed_storage_mb: float
        """

        self._max_observed_storage_mb = max_observed_storage_mb

    @property
    def metrics(self):
        """Gets the metrics of this RecommendedElasticPoolProperties.

        The list of databases housed in the server. Expanded property

        :return: The metrics of this RecommendedElasticPoolProperties.
        :rtype: List[RecommendedElasticPoolMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this RecommendedElasticPoolProperties.

        The list of databases housed in the server. Expanded property

        :param metrics: The metrics of this RecommendedElasticPoolProperties.
        :type metrics: List[RecommendedElasticPoolMetric]
        """

        self._metrics = metrics

    @property
    def observation_period_end(self):
        """Gets the observation_period_end of this RecommendedElasticPoolProperties.

        The observation period start (ISO8601 format).

        :return: The observation_period_end of this RecommendedElasticPoolProperties.
        :rtype: datetime
        """
        return self._observation_period_end

    @observation_period_end.setter
    def observation_period_end(self, observation_period_end):
        """Sets the observation_period_end of this RecommendedElasticPoolProperties.

        The observation period start (ISO8601 format).

        :param observation_period_end: The observation_period_end of this RecommendedElasticPoolProperties.
        :type observation_period_end: datetime
        """

        self._observation_period_end = observation_period_end

    @property
    def observation_period_start(self):
        """Gets the observation_period_start of this RecommendedElasticPoolProperties.

        The observation period start (ISO8601 format).

        :return: The observation_period_start of this RecommendedElasticPoolProperties.
        :rtype: datetime
        """
        return self._observation_period_start

    @observation_period_start.setter
    def observation_period_start(self, observation_period_start):
        """Sets the observation_period_start of this RecommendedElasticPoolProperties.

        The observation period start (ISO8601 format).

        :param observation_period_start: The observation_period_start of this RecommendedElasticPoolProperties.
        :type observation_period_start: datetime
        """

        self._observation_period_start = observation_period_start

    @property
    def storage_mb(self):
        """Gets the storage_mb of this RecommendedElasticPoolProperties.

        Gets storage size in megabytes.

        :return: The storage_mb of this RecommendedElasticPoolProperties.
        :rtype: float
        """
        return self._storage_mb

    @storage_mb.setter
    def storage_mb(self, storage_mb):
        """Sets the storage_mb of this RecommendedElasticPoolProperties.

        Gets storage size in megabytes.

        :param storage_mb: The storage_mb of this RecommendedElasticPoolProperties.
        :type storage_mb: float
        """

        self._storage_mb = storage_mb
