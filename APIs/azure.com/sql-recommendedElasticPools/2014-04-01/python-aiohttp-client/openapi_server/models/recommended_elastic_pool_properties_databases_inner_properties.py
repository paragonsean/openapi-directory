# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recommended_elastic_pool_properties_databases_inner_properties_recommended_index_inner import RecommendedElasticPoolPropertiesDatabasesInnerPropertiesRecommendedIndexInner
from openapi_server.models.recommended_elastic_pool_properties_databases_inner_properties_service_tier_advisors_inner import RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInner
from openapi_server.models.recommended_elastic_pool_properties_databases_inner_properties_transparent_data_encryption_inner import RecommendedElasticPoolPropertiesDatabasesInnerPropertiesTransparentDataEncryptionInner
from openapi_server import util


class RecommendedElasticPoolPropertiesDatabasesInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collation: str=None, containment_state: int=None, create_mode: str=None, creation_date: datetime=None, current_service_objective_id: str=None, database_id: str=None, default_secondary_location: str=None, earliest_restore_date: datetime=None, edition: str=None, elastic_pool_name: str=None, failover_group_id: str=None, max_size_bytes: str=None, read_scale: str=None, recommended_index: List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesRecommendedIndexInner]=None, recovery_services_recovery_point_resource_id: str=None, requested_service_objective_id: str=None, requested_service_objective_name: str=None, restore_point_in_time: datetime=None, sample_name: str=None, service_level_objective: str=None, service_tier_advisors: List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInner]=None, source_database_deletion_date: datetime=None, source_database_id: str=None, status: str=None, transparent_data_encryption: List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesTransparentDataEncryptionInner]=None, zone_redundant: bool=None):
        """RecommendedElasticPoolPropertiesDatabasesInnerProperties - a model defined in OpenAPI

        :param collation: The collation of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param containment_state: The containment_state of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param create_mode: The create_mode of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param creation_date: The creation_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param current_service_objective_id: The current_service_objective_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param database_id: The database_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param default_secondary_location: The default_secondary_location of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param earliest_restore_date: The earliest_restore_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param edition: The edition of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param elastic_pool_name: The elastic_pool_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param failover_group_id: The failover_group_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param max_size_bytes: The max_size_bytes of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param read_scale: The read_scale of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param recommended_index: The recommended_index of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param recovery_services_recovery_point_resource_id: The recovery_services_recovery_point_resource_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param requested_service_objective_id: The requested_service_objective_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param requested_service_objective_name: The requested_service_objective_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param restore_point_in_time: The restore_point_in_time of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param sample_name: The sample_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param service_level_objective: The service_level_objective of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param service_tier_advisors: The service_tier_advisors of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param source_database_deletion_date: The source_database_deletion_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param source_database_id: The source_database_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param status: The status of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param transparent_data_encryption: The transparent_data_encryption of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :param zone_redundant: The zone_redundant of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        """
        self.openapi_types = {
            'collation': str,
            'containment_state': int,
            'create_mode': str,
            'creation_date': datetime,
            'current_service_objective_id': str,
            'database_id': str,
            'default_secondary_location': str,
            'earliest_restore_date': datetime,
            'edition': str,
            'elastic_pool_name': str,
            'failover_group_id': str,
            'max_size_bytes': str,
            'read_scale': str,
            'recommended_index': List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesRecommendedIndexInner],
            'recovery_services_recovery_point_resource_id': str,
            'requested_service_objective_id': str,
            'requested_service_objective_name': str,
            'restore_point_in_time': datetime,
            'sample_name': str,
            'service_level_objective': str,
            'service_tier_advisors': List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInner],
            'source_database_deletion_date': datetime,
            'source_database_id': str,
            'status': str,
            'transparent_data_encryption': List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesTransparentDataEncryptionInner],
            'zone_redundant': bool
        }

        self.attribute_map = {
            'collation': 'collation',
            'containment_state': 'containmentState',
            'create_mode': 'createMode',
            'creation_date': 'creationDate',
            'current_service_objective_id': 'currentServiceObjectiveId',
            'database_id': 'databaseId',
            'default_secondary_location': 'defaultSecondaryLocation',
            'earliest_restore_date': 'earliestRestoreDate',
            'edition': 'edition',
            'elastic_pool_name': 'elasticPoolName',
            'failover_group_id': 'failoverGroupId',
            'max_size_bytes': 'maxSizeBytes',
            'read_scale': 'readScale',
            'recommended_index': 'recommendedIndex',
            'recovery_services_recovery_point_resource_id': 'recoveryServicesRecoveryPointResourceId',
            'requested_service_objective_id': 'requestedServiceObjectiveId',
            'requested_service_objective_name': 'requestedServiceObjectiveName',
            'restore_point_in_time': 'restorePointInTime',
            'sample_name': 'sampleName',
            'service_level_objective': 'serviceLevelObjective',
            'service_tier_advisors': 'serviceTierAdvisors',
            'source_database_deletion_date': 'sourceDatabaseDeletionDate',
            'source_database_id': 'sourceDatabaseId',
            'status': 'status',
            'transparent_data_encryption': 'transparentDataEncryption',
            'zone_redundant': 'zoneRedundant'
        }

        self._collation = collation
        self._containment_state = containment_state
        self._create_mode = create_mode
        self._creation_date = creation_date
        self._current_service_objective_id = current_service_objective_id
        self._database_id = database_id
        self._default_secondary_location = default_secondary_location
        self._earliest_restore_date = earliest_restore_date
        self._edition = edition
        self._elastic_pool_name = elastic_pool_name
        self._failover_group_id = failover_group_id
        self._max_size_bytes = max_size_bytes
        self._read_scale = read_scale
        self._recommended_index = recommended_index
        self._recovery_services_recovery_point_resource_id = recovery_services_recovery_point_resource_id
        self._requested_service_objective_id = requested_service_objective_id
        self._requested_service_objective_name = requested_service_objective_name
        self._restore_point_in_time = restore_point_in_time
        self._sample_name = sample_name
        self._service_level_objective = service_level_objective
        self._service_tier_advisors = service_tier_advisors
        self._source_database_deletion_date = source_database_deletion_date
        self._source_database_id = source_database_id
        self._status = status
        self._transparent_data_encryption = transparent_data_encryption
        self._zone_redundant = zone_redundant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendedElasticPoolPropertiesDatabasesInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendedElasticPoolProperties_databases_inner_properties of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collation(self):
        """Gets the collation of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The collation of the database. If createMode is not Default, this value is ignored.

        :return: The collation of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._collation

    @collation.setter
    def collation(self, collation):
        """Sets the collation of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The collation of the database. If createMode is not Default, this value is ignored.

        :param collation: The collation of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type collation: str
        """

        self._collation = collation

    @property
    def containment_state(self):
        """Gets the containment_state of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The containment state of the database.

        :return: The containment_state of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: int
        """
        return self._containment_state

    @containment_state.setter
    def containment_state(self, containment_state):
        """Sets the containment_state of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The containment state of the database.

        :param containment_state: The containment_state of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type containment_state: int
        """

        self._containment_state = containment_state

    @property
    def create_mode(self):
        """Gets the create_mode of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Specifies the mode of database creation.  Default: regular database creation.  Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.  OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.  PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.  Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.  Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.  RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.  Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.

        :return: The create_mode of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._create_mode

    @create_mode.setter
    def create_mode(self, create_mode):
        """Sets the create_mode of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Specifies the mode of database creation.  Default: regular database creation.  Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.  OnlineSecondary/NonReadableSecondary: creates a database as a (readable or nonreadable) secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.  PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.  Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.  Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.  RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.  Copy, NonReadableSecondary, OnlineSecondary and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.

        :param create_mode: The create_mode of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type create_mode: str
        """
        allowed_values = ["Copy", "Default", "NonReadableSecondary", "OnlineSecondary", "PointInTimeRestore", "Recovery", "Restore", "RestoreLongTermRetentionBackup"]  # noqa: E501
        if create_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `create_mode` ({0}), must be one of {1}"
                .format(create_mode, allowed_values)
            )

        self._create_mode = create_mode

    @property
    def creation_date(self):
        """Gets the creation_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The creation date of the database (ISO8601 format).

        :return: The creation_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The creation date of the database (ISO8601 format).

        :param creation_date: The creation_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def current_service_objective_id(self):
        """Gets the current_service_objective_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The current service level objective ID of the database. This is the ID of the service level objective that is currently active.

        :return: The current_service_objective_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._current_service_objective_id

    @current_service_objective_id.setter
    def current_service_objective_id(self, current_service_objective_id):
        """Sets the current_service_objective_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The current service level objective ID of the database. This is the ID of the service level objective that is currently active.

        :param current_service_objective_id: The current_service_objective_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type current_service_objective_id: str
        """

        self._current_service_objective_id = current_service_objective_id

    @property
    def database_id(self):
        """Gets the database_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The ID of the database.

        :return: The database_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The ID of the database.

        :param database_id: The database_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type database_id: str
        """

        self._database_id = database_id

    @property
    def default_secondary_location(self):
        """Gets the default_secondary_location of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The default secondary region for this database.

        :return: The default_secondary_location of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._default_secondary_location

    @default_secondary_location.setter
    def default_secondary_location(self, default_secondary_location):
        """Sets the default_secondary_location of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The default secondary region for this database.

        :param default_secondary_location: The default_secondary_location of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type default_secondary_location: str
        """

        self._default_secondary_location = default_secondary_location

    @property
    def earliest_restore_date(self):
        """Gets the earliest_restore_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        This records the earliest start date and time that restore is available for this database (ISO8601 format).

        :return: The earliest_restore_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: datetime
        """
        return self._earliest_restore_date

    @earliest_restore_date.setter
    def earliest_restore_date(self, earliest_restore_date):
        """Sets the earliest_restore_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        This records the earliest start date and time that restore is available for this database (ISO8601 format).

        :param earliest_restore_date: The earliest_restore_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type earliest_restore_date: datetime
        """

        self._earliest_restore_date = earliest_restore_date

    @property
    def edition(self):
        """Gets the edition of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The edition of the database. The DatabaseEditions enumeration contains all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.    The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:    ```azurecli  az sql db list-editions -l <location> -o table  ````    ```powershell  Get-AzSqlServerServiceObjective -Location <location>  ````  

        :return: The edition of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The edition of the database. The DatabaseEditions enumeration contains all the valid editions. If createMode is NonReadableSecondary or OnlineSecondary, this value is ignored.    The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:    ```azurecli  az sql db list-editions -l <location> -o table  ````    ```powershell  Get-AzSqlServerServiceObjective -Location <location>  ````  

        :param edition: The edition of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type edition: str
        """
        allowed_values = ["Web", "Business", "Basic", "Standard", "Premium", "PremiumRS", "Free", "Stretch", "DataWarehouse", "System", "System2", "GeneralPurpose", "BusinessCritical", "Hyperscale"]  # noqa: E501
        if edition not in allowed_values:
            raise ValueError(
                "Invalid value for `edition` ({0}), must be one of {1}"
                .format(edition, allowed_values)
            )

        self._edition = edition

    @property
    def elastic_pool_name(self):
        """Gets the elastic_pool_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The name of the elastic pool the database is in. If elasticPoolName and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition.

        :return: The elastic_pool_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._elastic_pool_name

    @elastic_pool_name.setter
    def elastic_pool_name(self, elastic_pool_name):
        """Sets the elastic_pool_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The name of the elastic pool the database is in. If elasticPoolName and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveName is ignored. Not supported for DataWarehouse edition.

        :param elastic_pool_name: The elastic_pool_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type elastic_pool_name: str
        """

        self._elastic_pool_name = elastic_pool_name

    @property
    def failover_group_id(self):
        """Gets the failover_group_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The resource identifier of the failover group containing this database.

        :return: The failover_group_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._failover_group_id

    @failover_group_id.setter
    def failover_group_id(self, failover_group_id):
        """Sets the failover_group_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The resource identifier of the failover group containing this database.

        :param failover_group_id: The failover_group_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type failover_group_id: str
        """

        self._failover_group_id = failover_group_id

    @property
    def max_size_bytes(self):
        """Gets the max_size_bytes of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The max size of the database expressed in bytes. If createMode is not Default, this value is ignored. To see possible values, query the capabilities API (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to by operationId: \"Capabilities_ListByLocation.\"

        :return: The max_size_bytes of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._max_size_bytes

    @max_size_bytes.setter
    def max_size_bytes(self, max_size_bytes):
        """Sets the max_size_bytes of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The max size of the database expressed in bytes. If createMode is not Default, this value is ignored. To see possible values, query the capabilities API (/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationID}/capabilities) referred to by operationId: \"Capabilities_ListByLocation.\"

        :param max_size_bytes: The max_size_bytes of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type max_size_bytes: str
        """

        self._max_size_bytes = max_size_bytes

    @property
    def read_scale(self):
        """Gets the read_scale of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Conditional. If the database is a geo-secondary, readScale indicates whether read-only connections are allowed to this database or not. Not supported for DataWarehouse edition.

        :return: The read_scale of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._read_scale

    @read_scale.setter
    def read_scale(self, read_scale):
        """Sets the read_scale of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Conditional. If the database is a geo-secondary, readScale indicates whether read-only connections are allowed to this database or not. Not supported for DataWarehouse edition.

        :param read_scale: The read_scale of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type read_scale: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if read_scale not in allowed_values:
            raise ValueError(
                "Invalid value for `read_scale` ({0}), must be one of {1}"
                .format(read_scale, allowed_values)
            )

        self._read_scale = read_scale

    @property
    def recommended_index(self):
        """Gets the recommended_index of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The recommended indices for this database.

        :return: The recommended_index of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesRecommendedIndexInner]
        """
        return self._recommended_index

    @recommended_index.setter
    def recommended_index(self, recommended_index):
        """Sets the recommended_index of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The recommended indices for this database.

        :param recommended_index: The recommended_index of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type recommended_index: List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesRecommendedIndexInner]
        """

        self._recommended_index = recommended_index

    @property
    def recovery_services_recovery_point_resource_id(self):
        """Gets the recovery_services_recovery_point_resource_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Conditional. If createMode is RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the recovery point to restore from.

        :return: The recovery_services_recovery_point_resource_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._recovery_services_recovery_point_resource_id

    @recovery_services_recovery_point_resource_id.setter
    def recovery_services_recovery_point_resource_id(self, recovery_services_recovery_point_resource_id):
        """Sets the recovery_services_recovery_point_resource_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Conditional. If createMode is RestoreLongTermRetentionBackup, then this value is required. Specifies the resource ID of the recovery point to restore from.

        :param recovery_services_recovery_point_resource_id: The recovery_services_recovery_point_resource_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type recovery_services_recovery_point_resource_id: str
        """

        self._recovery_services_recovery_point_resource_id = recovery_services_recovery_point_resource_id

    @property
    def requested_service_objective_id(self):
        """Gets the requested_service_objective_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The configured service level objective ID of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of currentServiceObjectiveId property. If requestedServiceObjectiveId and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveId overrides the value of requestedServiceObjectiveName.    The list of SKUs may vary by region and support offer. To determine the service objective ids that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API.

        :return: The requested_service_objective_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._requested_service_objective_id

    @requested_service_objective_id.setter
    def requested_service_objective_id(self, requested_service_objective_id):
        """Sets the requested_service_objective_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The configured service level objective ID of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of currentServiceObjectiveId property. If requestedServiceObjectiveId and requestedServiceObjectiveName are both updated, the value of requestedServiceObjectiveId overrides the value of requestedServiceObjectiveName.    The list of SKUs may vary by region and support offer. To determine the service objective ids that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API.

        :param requested_service_objective_id: The requested_service_objective_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type requested_service_objective_id: str
        """

        self._requested_service_objective_id = requested_service_objective_id

    @property
    def requested_service_objective_name(self):
        """Gets the requested_service_objective_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property.     The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:    ```azurecli  az sql db list-editions -l <location> -o table  ````    ```powershell  Get-AzSqlServerServiceObjective -Location <location>  ````  

        :return: The requested_service_objective_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._requested_service_objective_name

    @requested_service_objective_name.setter
    def requested_service_objective_name(self, requested_service_objective_name):
        """Sets the requested_service_objective_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The name of the configured service level objective of the database. This is the service level objective that is in the process of being applied to the database. Once successfully updated, it will match the value of serviceLevelObjective property.     The list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:    ```azurecli  az sql db list-editions -l <location> -o table  ````    ```powershell  Get-AzSqlServerServiceObjective -Location <location>  ````  

        :param requested_service_objective_name: The requested_service_objective_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type requested_service_objective_name: str
        """
        allowed_values = ["System", "System0", "System1", "System2", "System3", "System4", "System2L", "System3L", "System4L", "Free", "Basic", "S0", "S1", "S2", "S3", "S4", "S6", "S7", "S9", "S12", "P1", "P2", "P3", "P4", "P6", "P11", "P15", "PRS1", "PRS2", "PRS4", "PRS6", "DW100", "DW200", "DW300", "DW400", "DW500", "DW600", "DW1000", "DW1200", "DW1000c", "DW1500", "DW1500c", "DW2000", "DW2000c", "DW3000", "DW2500c", "DW3000c", "DW6000", "DW5000c", "DW6000c", "DW7500c", "DW10000c", "DW15000c", "DW30000c", "DS100", "DS200", "DS300", "DS400", "DS500", "DS600", "DS1000", "DS1200", "DS1500", "DS2000", "ElasticPool"]  # noqa: E501
        if requested_service_objective_name not in allowed_values:
            raise ValueError(
                "Invalid value for `requested_service_objective_name` ({0}), must be one of {1}"
                .format(requested_service_objective_name, allowed_values)
            )

        self._requested_service_objective_name = requested_service_objective_name

    @property
    def restore_point_in_time(self):
        """Gets the restore_point_in_time of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Conditional. If createMode is PointInTimeRestore, this value is required. If createMode is Restore, this value is optional. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. Must be greater than or equal to the source database's earliestRestoreDate value.

        :return: The restore_point_in_time of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: datetime
        """
        return self._restore_point_in_time

    @restore_point_in_time.setter
    def restore_point_in_time(self, restore_point_in_time):
        """Sets the restore_point_in_time of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Conditional. If createMode is PointInTimeRestore, this value is required. If createMode is Restore, this value is optional. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database. Must be greater than or equal to the source database's earliestRestoreDate value.

        :param restore_point_in_time: The restore_point_in_time of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type restore_point_in_time: datetime
        """

        self._restore_point_in_time = restore_point_in_time

    @property
    def sample_name(self):
        """Gets the sample_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.

        :return: The sample_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._sample_name

    @sample_name.setter
    def sample_name(self, sample_name):
        """Sets the sample_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Indicates the name of the sample schema to apply when creating this database. If createMode is not Default, this value is ignored. Not supported for DataWarehouse edition.

        :param sample_name: The sample_name of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type sample_name: str
        """
        allowed_values = ["AdventureWorksLT"]  # noqa: E501
        if sample_name not in allowed_values:
            raise ValueError(
                "Invalid value for `sample_name` ({0}), must be one of {1}"
                .format(sample_name, allowed_values)
            )

        self._sample_name = sample_name

    @property
    def service_level_objective(self):
        """Gets the service_level_objective of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The current service level objective of the database.

        :return: The service_level_objective of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._service_level_objective

    @service_level_objective.setter
    def service_level_objective(self, service_level_objective):
        """Sets the service_level_objective of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The current service level objective of the database.

        :param service_level_objective: The service_level_objective of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type service_level_objective: str
        """
        allowed_values = ["System", "System0", "System1", "System2", "System3", "System4", "System2L", "System3L", "System4L", "Free", "Basic", "S0", "S1", "S2", "S3", "S4", "S6", "S7", "S9", "S12", "P1", "P2", "P3", "P4", "P6", "P11", "P15", "PRS1", "PRS2", "PRS4", "PRS6", "DW100", "DW200", "DW300", "DW400", "DW500", "DW600", "DW1000", "DW1200", "DW1000c", "DW1500", "DW1500c", "DW2000", "DW2000c", "DW3000", "DW2500c", "DW3000c", "DW6000", "DW5000c", "DW6000c", "DW7500c", "DW10000c", "DW15000c", "DW30000c", "DS100", "DS200", "DS300", "DS400", "DS500", "DS600", "DS1000", "DS1200", "DS1500", "DS2000", "ElasticPool"]  # noqa: E501
        if service_level_objective not in allowed_values:
            raise ValueError(
                "Invalid value for `service_level_objective` ({0}), must be one of {1}"
                .format(service_level_objective, allowed_values)
            )

        self._service_level_objective = service_level_objective

    @property
    def service_tier_advisors(self):
        """Gets the service_tier_advisors of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The list of service tier advisors for this database. Expanded property

        :return: The service_tier_advisors of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInner]
        """
        return self._service_tier_advisors

    @service_tier_advisors.setter
    def service_tier_advisors(self, service_tier_advisors):
        """Sets the service_tier_advisors of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The list of service tier advisors for this database. Expanded property

        :param service_tier_advisors: The service_tier_advisors of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type service_tier_advisors: List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesServiceTierAdvisorsInner]
        """

        self._service_tier_advisors = service_tier_advisors

    @property
    def source_database_deletion_date(self):
        """Gets the source_database_deletion_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Conditional. If createMode is Restore and sourceDatabaseId is the deleted database's original resource id when it existed (as opposed to its current restorable dropped database id), then this value is required. Specifies the time that the database was deleted.

        :return: The source_database_deletion_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: datetime
        """
        return self._source_database_deletion_date

    @source_database_deletion_date.setter
    def source_database_deletion_date(self, source_database_deletion_date):
        """Sets the source_database_deletion_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Conditional. If createMode is Restore and sourceDatabaseId is the deleted database's original resource id when it existed (as opposed to its current restorable dropped database id), then this value is required. Specifies the time that the database was deleted.

        :param source_database_deletion_date: The source_database_deletion_date of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type source_database_deletion_date: datetime
        """

        self._source_database_deletion_date = source_database_deletion_date

    @property
    def source_database_id(self):
        """Gets the source_database_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the resource ID of the source database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source database must be the same as the new database being created.

        :return: The source_database_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._source_database_id

    @source_database_id.setter
    def source_database_id(self, source_database_id):
        """Sets the source_database_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Conditional. If createMode is Copy, NonReadableSecondary, OnlineSecondary, PointInTimeRestore, Recovery, or Restore, then this value is required. Specifies the resource ID of the source database. If createMode is NonReadableSecondary or OnlineSecondary, the name of the source database must be the same as the new database being created.

        :param source_database_id: The source_database_id of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type source_database_id: str
        """

        self._source_database_id = source_database_id

    @property
    def status(self):
        """Gets the status of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The status of the database.

        :return: The status of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The status of the database.

        :param status: The status of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type status: str
        """

        self._status = status

    @property
    def transparent_data_encryption(self):
        """Gets the transparent_data_encryption of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The transparent data encryption info for this database.

        :return: The transparent_data_encryption of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesTransparentDataEncryptionInner]
        """
        return self._transparent_data_encryption

    @transparent_data_encryption.setter
    def transparent_data_encryption(self, transparent_data_encryption):
        """Sets the transparent_data_encryption of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        The transparent data encryption info for this database.

        :param transparent_data_encryption: The transparent_data_encryption of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type transparent_data_encryption: List[RecommendedElasticPoolPropertiesDatabasesInnerPropertiesTransparentDataEncryptionInner]
        """

        self._transparent_data_encryption = transparent_data_encryption

    @property
    def zone_redundant(self):
        """Gets the zone_redundant of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.

        :return: The zone_redundant of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :rtype: bool
        """
        return self._zone_redundant

    @zone_redundant.setter
    def zone_redundant(self, zone_redundant):
        """Sets the zone_redundant of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.

        Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.

        :param zone_redundant: The zone_redundant of this RecommendedElasticPoolPropertiesDatabasesInnerProperties.
        :type zone_redundant: bool
        """

        self._zone_redundant = zone_redundant
