/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database resources including recommendations and operations.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendedElasticPoolProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendedElasticPoolProperties::OAIRecommendedElasticPoolProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendedElasticPoolProperties::OAIRecommendedElasticPoolProperties() {
    this->initializeModel();
}

OAIRecommendedElasticPoolProperties::~OAIRecommendedElasticPoolProperties() {}

void OAIRecommendedElasticPoolProperties::initializeModel() {

    m_database_dtu_max_isSet = false;
    m_database_dtu_max_isValid = false;

    m_database_dtu_min_isSet = false;
    m_database_dtu_min_isValid = false;

    m_database_edition_isSet = false;
    m_database_edition_isValid = false;

    m_databases_isSet = false;
    m_databases_isValid = false;

    m_dtu_isSet = false;
    m_dtu_isValid = false;

    m_max_observed_dtu_isSet = false;
    m_max_observed_dtu_isValid = false;

    m_max_observed_storage_mb_isSet = false;
    m_max_observed_storage_mb_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_observation_period_end_isSet = false;
    m_observation_period_end_isValid = false;

    m_observation_period_start_isSet = false;
    m_observation_period_start_isValid = false;

    m_storage_mb_isSet = false;
    m_storage_mb_isValid = false;
}

void OAIRecommendedElasticPoolProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendedElasticPoolProperties::fromJsonObject(QJsonObject json) {

    m_database_dtu_max_isValid = ::OpenAPI::fromJsonValue(m_database_dtu_max, json[QString("databaseDtuMax")]);
    m_database_dtu_max_isSet = !json[QString("databaseDtuMax")].isNull() && m_database_dtu_max_isValid;

    m_database_dtu_min_isValid = ::OpenAPI::fromJsonValue(m_database_dtu_min, json[QString("databaseDtuMin")]);
    m_database_dtu_min_isSet = !json[QString("databaseDtuMin")].isNull() && m_database_dtu_min_isValid;

    m_database_edition_isValid = ::OpenAPI::fromJsonValue(m_database_edition, json[QString("databaseEdition")]);
    m_database_edition_isSet = !json[QString("databaseEdition")].isNull() && m_database_edition_isValid;

    m_databases_isValid = ::OpenAPI::fromJsonValue(m_databases, json[QString("databases")]);
    m_databases_isSet = !json[QString("databases")].isNull() && m_databases_isValid;

    m_dtu_isValid = ::OpenAPI::fromJsonValue(m_dtu, json[QString("dtu")]);
    m_dtu_isSet = !json[QString("dtu")].isNull() && m_dtu_isValid;

    m_max_observed_dtu_isValid = ::OpenAPI::fromJsonValue(m_max_observed_dtu, json[QString("maxObservedDtu")]);
    m_max_observed_dtu_isSet = !json[QString("maxObservedDtu")].isNull() && m_max_observed_dtu_isValid;

    m_max_observed_storage_mb_isValid = ::OpenAPI::fromJsonValue(m_max_observed_storage_mb, json[QString("maxObservedStorageMB")]);
    m_max_observed_storage_mb_isSet = !json[QString("maxObservedStorageMB")].isNull() && m_max_observed_storage_mb_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_observation_period_end_isValid = ::OpenAPI::fromJsonValue(m_observation_period_end, json[QString("observationPeriodEnd")]);
    m_observation_period_end_isSet = !json[QString("observationPeriodEnd")].isNull() && m_observation_period_end_isValid;

    m_observation_period_start_isValid = ::OpenAPI::fromJsonValue(m_observation_period_start, json[QString("observationPeriodStart")]);
    m_observation_period_start_isSet = !json[QString("observationPeriodStart")].isNull() && m_observation_period_start_isValid;

    m_storage_mb_isValid = ::OpenAPI::fromJsonValue(m_storage_mb, json[QString("storageMB")]);
    m_storage_mb_isSet = !json[QString("storageMB")].isNull() && m_storage_mb_isValid;
}

QString OAIRecommendedElasticPoolProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendedElasticPoolProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_database_dtu_max_isSet) {
        obj.insert(QString("databaseDtuMax"), ::OpenAPI::toJsonValue(m_database_dtu_max));
    }
    if (m_database_dtu_min_isSet) {
        obj.insert(QString("databaseDtuMin"), ::OpenAPI::toJsonValue(m_database_dtu_min));
    }
    if (m_database_edition_isSet) {
        obj.insert(QString("databaseEdition"), ::OpenAPI::toJsonValue(m_database_edition));
    }
    if (m_databases.size() > 0) {
        obj.insert(QString("databases"), ::OpenAPI::toJsonValue(m_databases));
    }
    if (m_dtu_isSet) {
        obj.insert(QString("dtu"), ::OpenAPI::toJsonValue(m_dtu));
    }
    if (m_max_observed_dtu_isSet) {
        obj.insert(QString("maxObservedDtu"), ::OpenAPI::toJsonValue(m_max_observed_dtu));
    }
    if (m_max_observed_storage_mb_isSet) {
        obj.insert(QString("maxObservedStorageMB"), ::OpenAPI::toJsonValue(m_max_observed_storage_mb));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_observation_period_end_isSet) {
        obj.insert(QString("observationPeriodEnd"), ::OpenAPI::toJsonValue(m_observation_period_end));
    }
    if (m_observation_period_start_isSet) {
        obj.insert(QString("observationPeriodStart"), ::OpenAPI::toJsonValue(m_observation_period_start));
    }
    if (m_storage_mb_isSet) {
        obj.insert(QString("storageMB"), ::OpenAPI::toJsonValue(m_storage_mb));
    }
    return obj;
}

double OAIRecommendedElasticPoolProperties::getDatabaseDtuMax() const {
    return m_database_dtu_max;
}
void OAIRecommendedElasticPoolProperties::setDatabaseDtuMax(const double &database_dtu_max) {
    m_database_dtu_max = database_dtu_max;
    m_database_dtu_max_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_database_dtu_max_Set() const{
    return m_database_dtu_max_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_database_dtu_max_Valid() const{
    return m_database_dtu_max_isValid;
}

double OAIRecommendedElasticPoolProperties::getDatabaseDtuMin() const {
    return m_database_dtu_min;
}
void OAIRecommendedElasticPoolProperties::setDatabaseDtuMin(const double &database_dtu_min) {
    m_database_dtu_min = database_dtu_min;
    m_database_dtu_min_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_database_dtu_min_Set() const{
    return m_database_dtu_min_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_database_dtu_min_Valid() const{
    return m_database_dtu_min_isValid;
}

QString OAIRecommendedElasticPoolProperties::getDatabaseEdition() const {
    return m_database_edition;
}
void OAIRecommendedElasticPoolProperties::setDatabaseEdition(const QString &database_edition) {
    m_database_edition = database_edition;
    m_database_edition_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_database_edition_Set() const{
    return m_database_edition_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_database_edition_Valid() const{
    return m_database_edition_isValid;
}

QList<OAIRecommendedElasticPoolProperties_databases_inner> OAIRecommendedElasticPoolProperties::getDatabases() const {
    return m_databases;
}
void OAIRecommendedElasticPoolProperties::setDatabases(const QList<OAIRecommendedElasticPoolProperties_databases_inner> &databases) {
    m_databases = databases;
    m_databases_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_databases_Set() const{
    return m_databases_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_databases_Valid() const{
    return m_databases_isValid;
}

double OAIRecommendedElasticPoolProperties::getDtu() const {
    return m_dtu;
}
void OAIRecommendedElasticPoolProperties::setDtu(const double &dtu) {
    m_dtu = dtu;
    m_dtu_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_dtu_Set() const{
    return m_dtu_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_dtu_Valid() const{
    return m_dtu_isValid;
}

double OAIRecommendedElasticPoolProperties::getMaxObservedDtu() const {
    return m_max_observed_dtu;
}
void OAIRecommendedElasticPoolProperties::setMaxObservedDtu(const double &max_observed_dtu) {
    m_max_observed_dtu = max_observed_dtu;
    m_max_observed_dtu_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_max_observed_dtu_Set() const{
    return m_max_observed_dtu_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_max_observed_dtu_Valid() const{
    return m_max_observed_dtu_isValid;
}

double OAIRecommendedElasticPoolProperties::getMaxObservedStorageMb() const {
    return m_max_observed_storage_mb;
}
void OAIRecommendedElasticPoolProperties::setMaxObservedStorageMb(const double &max_observed_storage_mb) {
    m_max_observed_storage_mb = max_observed_storage_mb;
    m_max_observed_storage_mb_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_max_observed_storage_mb_Set() const{
    return m_max_observed_storage_mb_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_max_observed_storage_mb_Valid() const{
    return m_max_observed_storage_mb_isValid;
}

QList<OAIRecommendedElasticPoolMetric> OAIRecommendedElasticPoolProperties::getMetrics() const {
    return m_metrics;
}
void OAIRecommendedElasticPoolProperties::setMetrics(const QList<OAIRecommendedElasticPoolMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QDateTime OAIRecommendedElasticPoolProperties::getObservationPeriodEnd() const {
    return m_observation_period_end;
}
void OAIRecommendedElasticPoolProperties::setObservationPeriodEnd(const QDateTime &observation_period_end) {
    m_observation_period_end = observation_period_end;
    m_observation_period_end_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_observation_period_end_Set() const{
    return m_observation_period_end_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_observation_period_end_Valid() const{
    return m_observation_period_end_isValid;
}

QDateTime OAIRecommendedElasticPoolProperties::getObservationPeriodStart() const {
    return m_observation_period_start;
}
void OAIRecommendedElasticPoolProperties::setObservationPeriodStart(const QDateTime &observation_period_start) {
    m_observation_period_start = observation_period_start;
    m_observation_period_start_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_observation_period_start_Set() const{
    return m_observation_period_start_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_observation_period_start_Valid() const{
    return m_observation_period_start_isValid;
}

double OAIRecommendedElasticPoolProperties::getStorageMb() const {
    return m_storage_mb;
}
void OAIRecommendedElasticPoolProperties::setStorageMb(const double &storage_mb) {
    m_storage_mb = storage_mb;
    m_storage_mb_isSet = true;
}

bool OAIRecommendedElasticPoolProperties::is_storage_mb_Set() const{
    return m_storage_mb_isSet;
}

bool OAIRecommendedElasticPoolProperties::is_storage_mb_Valid() const{
    return m_storage_mb_isValid;
}

bool OAIRecommendedElasticPoolProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_dtu_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_dtu_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_databases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_observed_dtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_observed_storage_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observation_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_mb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendedElasticPoolProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
