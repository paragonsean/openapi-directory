/*
 * FabricAdminClient
 * Fabric location operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * All properties of a fabric location resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:00.494323-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FabricLocationModel {
  public static final String SERIALIZED_NAME_EXCLUSIVE_ADMIN_OPERATION_NAME = "exclusiveAdminOperationName";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_ADMIN_OPERATION_NAME)
  private String exclusiveAdminOperationName;

  public static final String SERIALIZED_NAME_EXCLUSIVE_ADMIN_OPERATION_RUNNING = "exclusiveAdminOperationRunning";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_ADMIN_OPERATION_RUNNING)
  private Boolean exclusiveAdminOperationRunning;

  public static final String SERIALIZED_NAME_EXTERNAL_D_N_S_I_P_ADDRESS01 = "externalDNSIPAddress01";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_D_N_S_I_P_ADDRESS01)
  private String externalDNSIPAddress01;

  public static final String SERIALIZED_NAME_EXTERNAL_D_N_S_I_P_ADDRESS02 = "externalDNSIPAddress02";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_D_N_S_I_P_ADDRESS02)
  private String externalDNSIPAddress02;

  public static final String SERIALIZED_NAME_PEP_IP_ADDRESSES = "pepIpAddresses";
  @SerializedName(SERIALIZED_NAME_PEP_IP_ADDRESSES)
  private List<String> pepIpAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHUT_DOWN_ACTION_PLAN_END_TIME = "shutDownActionPlanEndTime";
  @SerializedName(SERIALIZED_NAME_SHUT_DOWN_ACTION_PLAN_END_TIME)
  private OffsetDateTime shutDownActionPlanEndTime;

  public static final String SERIALIZED_NAME_SHUT_DOWN_ACTION_PLAN_START_TIME = "shutDownActionPlanStartTime";
  @SerializedName(SERIALIZED_NAME_SHUT_DOWN_ACTION_PLAN_START_TIME)
  private OffsetDateTime shutDownActionPlanStartTime;

  public static final String SERIALIZED_NAME_STAMP_INFORMATION_ID = "stampInformationId";
  @SerializedName(SERIALIZED_NAME_STAMP_INFORMATION_ID)
  private String stampInformationId;

  public static final String SERIALIZED_NAME_START_UP_ACTION_PLAN_END_TIME = "startUpActionPlanEndTime";
  @SerializedName(SERIALIZED_NAME_START_UP_ACTION_PLAN_END_TIME)
  private OffsetDateTime startUpActionPlanEndTime;

  public static final String SERIALIZED_NAME_START_UP_ACTION_PLAN_START_TIME = "startUpActionPlanStartTime";
  @SerializedName(SERIALIZED_NAME_START_UP_ACTION_PLAN_START_TIME)
  private OffsetDateTime startUpActionPlanStartTime;

  public static final String SERIALIZED_NAME_TIME_SERVER = "timeServer";
  @SerializedName(SERIALIZED_NAME_TIME_SERVER)
  private String timeServer;

  public FabricLocationModel() {
  }

  public FabricLocationModel exclusiveAdminOperationName(String exclusiveAdminOperationName) {
    this.exclusiveAdminOperationName = exclusiveAdminOperationName;
    return this;
  }

  /**
   * Name of the running exclusive admin operation.
   * @return exclusiveAdminOperationName
   */
  @javax.annotation.Nullable
  public String getExclusiveAdminOperationName() {
    return exclusiveAdminOperationName;
  }

  public void setExclusiveAdminOperationName(String exclusiveAdminOperationName) {
    this.exclusiveAdminOperationName = exclusiveAdminOperationName;
  }


  public FabricLocationModel exclusiveAdminOperationRunning(Boolean exclusiveAdminOperationRunning) {
    this.exclusiveAdminOperationRunning = exclusiveAdminOperationRunning;
    return this;
  }

  /**
   * Value for whether an exclusive admin operation is running.
   * @return exclusiveAdminOperationRunning
   */
  @javax.annotation.Nullable
  public Boolean getExclusiveAdminOperationRunning() {
    return exclusiveAdminOperationRunning;
  }

  public void setExclusiveAdminOperationRunning(Boolean exclusiveAdminOperationRunning) {
    this.exclusiveAdminOperationRunning = exclusiveAdminOperationRunning;
  }


  public FabricLocationModel externalDNSIPAddress01(String externalDNSIPAddress01) {
    this.externalDNSIPAddress01 = externalDNSIPAddress01;
    return this;
  }

  /**
   * First external IP address of the DNS server.
   * @return externalDNSIPAddress01
   */
  @javax.annotation.Nullable
  public String getExternalDNSIPAddress01() {
    return externalDNSIPAddress01;
  }

  public void setExternalDNSIPAddress01(String externalDNSIPAddress01) {
    this.externalDNSIPAddress01 = externalDNSIPAddress01;
  }


  public FabricLocationModel externalDNSIPAddress02(String externalDNSIPAddress02) {
    this.externalDNSIPAddress02 = externalDNSIPAddress02;
    return this;
  }

  /**
   * Second external IP Address of the DNS server.
   * @return externalDNSIPAddress02
   */
  @javax.annotation.Nullable
  public String getExternalDNSIPAddress02() {
    return externalDNSIPAddress02;
  }

  public void setExternalDNSIPAddress02(String externalDNSIPAddress02) {
    this.externalDNSIPAddress02 = externalDNSIPAddress02;
  }


  public FabricLocationModel pepIpAddresses(List<String> pepIpAddresses) {
    this.pepIpAddresses = pepIpAddresses;
    return this;
  }

  public FabricLocationModel addPepIpAddressesItem(String pepIpAddressesItem) {
    if (this.pepIpAddresses == null) {
      this.pepIpAddresses = new ArrayList<>();
    }
    this.pepIpAddresses.add(pepIpAddressesItem);
    return this;
  }

  /**
   * The IP addresses of the privileged endpoints.
   * @return pepIpAddresses
   */
  @javax.annotation.Nullable
  public List<String> getPepIpAddresses() {
    return pepIpAddresses;
  }

  public void setPepIpAddresses(List<String> pepIpAddresses) {
    this.pepIpAddresses = pepIpAddresses;
  }


  public FabricLocationModel shutDownActionPlanEndTime(OffsetDateTime shutDownActionPlanEndTime) {
    this.shutDownActionPlanEndTime = shutDownActionPlanEndTime;
    return this;
  }

  /**
   * Last known stamp stop time for the shut down action plan.
   * @return shutDownActionPlanEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShutDownActionPlanEndTime() {
    return shutDownActionPlanEndTime;
  }

  public void setShutDownActionPlanEndTime(OffsetDateTime shutDownActionPlanEndTime) {
    this.shutDownActionPlanEndTime = shutDownActionPlanEndTime;
  }


  public FabricLocationModel shutDownActionPlanStartTime(OffsetDateTime shutDownActionPlanStartTime) {
    this.shutDownActionPlanStartTime = shutDownActionPlanStartTime;
    return this;
  }

  /**
   * Last known stamp start time for the shut down action plan
   * @return shutDownActionPlanStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getShutDownActionPlanStartTime() {
    return shutDownActionPlanStartTime;
  }

  public void setShutDownActionPlanStartTime(OffsetDateTime shutDownActionPlanStartTime) {
    this.shutDownActionPlanStartTime = shutDownActionPlanStartTime;
  }


  public FabricLocationModel stampInformationId(String stampInformationId) {
    this.stampInformationId = stampInformationId;
    return this;
  }

  /**
   * The deployment id of the stamp.
   * @return stampInformationId
   */
  @javax.annotation.Nullable
  public String getStampInformationId() {
    return stampInformationId;
  }

  public void setStampInformationId(String stampInformationId) {
    this.stampInformationId = stampInformationId;
  }


  public FabricLocationModel startUpActionPlanEndTime(OffsetDateTime startUpActionPlanEndTime) {
    this.startUpActionPlanEndTime = startUpActionPlanEndTime;
    return this;
  }

  /**
   * Last known stamp stop time for the start up action plan.
   * @return startUpActionPlanEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartUpActionPlanEndTime() {
    return startUpActionPlanEndTime;
  }

  public void setStartUpActionPlanEndTime(OffsetDateTime startUpActionPlanEndTime) {
    this.startUpActionPlanEndTime = startUpActionPlanEndTime;
  }


  public FabricLocationModel startUpActionPlanStartTime(OffsetDateTime startUpActionPlanStartTime) {
    this.startUpActionPlanStartTime = startUpActionPlanStartTime;
    return this;
  }

  /**
   * Last known stamp start time for the start up action plan.
   * @return startUpActionPlanStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartUpActionPlanStartTime() {
    return startUpActionPlanStartTime;
  }

  public void setStartUpActionPlanStartTime(OffsetDateTime startUpActionPlanStartTime) {
    this.startUpActionPlanStartTime = startUpActionPlanStartTime;
  }


  public FabricLocationModel timeServer(String timeServer) {
    this.timeServer = timeServer;
    return this;
  }

  /**
   * The IP address of the time server.
   * @return timeServer
   */
  @javax.annotation.Nullable
  public String getTimeServer() {
    return timeServer;
  }

  public void setTimeServer(String timeServer) {
    this.timeServer = timeServer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FabricLocationModel fabricLocationModel = (FabricLocationModel) o;
    return Objects.equals(this.exclusiveAdminOperationName, fabricLocationModel.exclusiveAdminOperationName) &&
        Objects.equals(this.exclusiveAdminOperationRunning, fabricLocationModel.exclusiveAdminOperationRunning) &&
        Objects.equals(this.externalDNSIPAddress01, fabricLocationModel.externalDNSIPAddress01) &&
        Objects.equals(this.externalDNSIPAddress02, fabricLocationModel.externalDNSIPAddress02) &&
        Objects.equals(this.pepIpAddresses, fabricLocationModel.pepIpAddresses) &&
        Objects.equals(this.shutDownActionPlanEndTime, fabricLocationModel.shutDownActionPlanEndTime) &&
        Objects.equals(this.shutDownActionPlanStartTime, fabricLocationModel.shutDownActionPlanStartTime) &&
        Objects.equals(this.stampInformationId, fabricLocationModel.stampInformationId) &&
        Objects.equals(this.startUpActionPlanEndTime, fabricLocationModel.startUpActionPlanEndTime) &&
        Objects.equals(this.startUpActionPlanStartTime, fabricLocationModel.startUpActionPlanStartTime) &&
        Objects.equals(this.timeServer, fabricLocationModel.timeServer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exclusiveAdminOperationName, exclusiveAdminOperationRunning, externalDNSIPAddress01, externalDNSIPAddress02, pepIpAddresses, shutDownActionPlanEndTime, shutDownActionPlanStartTime, stampInformationId, startUpActionPlanEndTime, startUpActionPlanStartTime, timeServer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FabricLocationModel {\n");
    sb.append("    exclusiveAdminOperationName: ").append(toIndentedString(exclusiveAdminOperationName)).append("\n");
    sb.append("    exclusiveAdminOperationRunning: ").append(toIndentedString(exclusiveAdminOperationRunning)).append("\n");
    sb.append("    externalDNSIPAddress01: ").append(toIndentedString(externalDNSIPAddress01)).append("\n");
    sb.append("    externalDNSIPAddress02: ").append(toIndentedString(externalDNSIPAddress02)).append("\n");
    sb.append("    pepIpAddresses: ").append(toIndentedString(pepIpAddresses)).append("\n");
    sb.append("    shutDownActionPlanEndTime: ").append(toIndentedString(shutDownActionPlanEndTime)).append("\n");
    sb.append("    shutDownActionPlanStartTime: ").append(toIndentedString(shutDownActionPlanStartTime)).append("\n");
    sb.append("    stampInformationId: ").append(toIndentedString(stampInformationId)).append("\n");
    sb.append("    startUpActionPlanEndTime: ").append(toIndentedString(startUpActionPlanEndTime)).append("\n");
    sb.append("    startUpActionPlanStartTime: ").append(toIndentedString(startUpActionPlanStartTime)).append("\n");
    sb.append("    timeServer: ").append(toIndentedString(timeServer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exclusiveAdminOperationName");
    openapiFields.add("exclusiveAdminOperationRunning");
    openapiFields.add("externalDNSIPAddress01");
    openapiFields.add("externalDNSIPAddress02");
    openapiFields.add("pepIpAddresses");
    openapiFields.add("shutDownActionPlanEndTime");
    openapiFields.add("shutDownActionPlanStartTime");
    openapiFields.add("stampInformationId");
    openapiFields.add("startUpActionPlanEndTime");
    openapiFields.add("startUpActionPlanStartTime");
    openapiFields.add("timeServer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FabricLocationModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FabricLocationModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FabricLocationModel is not found in the empty JSON string", FabricLocationModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FabricLocationModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FabricLocationModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("exclusiveAdminOperationName") != null && !jsonObj.get("exclusiveAdminOperationName").isJsonNull()) && !jsonObj.get("exclusiveAdminOperationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclusiveAdminOperationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclusiveAdminOperationName").toString()));
      }
      if ((jsonObj.get("externalDNSIPAddress01") != null && !jsonObj.get("externalDNSIPAddress01").isJsonNull()) && !jsonObj.get("externalDNSIPAddress01").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDNSIPAddress01` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDNSIPAddress01").toString()));
      }
      if ((jsonObj.get("externalDNSIPAddress02") != null && !jsonObj.get("externalDNSIPAddress02").isJsonNull()) && !jsonObj.get("externalDNSIPAddress02").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalDNSIPAddress02` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalDNSIPAddress02").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pepIpAddresses") != null && !jsonObj.get("pepIpAddresses").isJsonNull() && !jsonObj.get("pepIpAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pepIpAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("pepIpAddresses").toString()));
      }
      if ((jsonObj.get("stampInformationId") != null && !jsonObj.get("stampInformationId").isJsonNull()) && !jsonObj.get("stampInformationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stampInformationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stampInformationId").toString()));
      }
      if ((jsonObj.get("timeServer") != null && !jsonObj.get("timeServer").isJsonNull()) && !jsonObj.get("timeServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeServer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FabricLocationModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FabricLocationModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FabricLocationModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FabricLocationModel.class));

       return (TypeAdapter<T>) new TypeAdapter<FabricLocationModel>() {
           @Override
           public void write(JsonWriter out, FabricLocationModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FabricLocationModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FabricLocationModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FabricLocationModel
   * @throws IOException if the JSON string is invalid with respect to FabricLocationModel
   */
  public static FabricLocationModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FabricLocationModel.class);
  }

  /**
   * Convert an instance of FabricLocationModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

