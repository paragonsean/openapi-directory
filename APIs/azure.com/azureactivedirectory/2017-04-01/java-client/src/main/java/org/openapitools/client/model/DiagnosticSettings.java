/*
 * azureactivedirectory
 * Azure Active Directory Client.
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LogSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The diagnostic settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:59.338365-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiagnosticSettings {
  public static final String SERIALIZED_NAME_EVENT_HUB_AUTHORIZATION_RULE_ID = "eventHubAuthorizationRuleId";
  @SerializedName(SERIALIZED_NAME_EVENT_HUB_AUTHORIZATION_RULE_ID)
  private String eventHubAuthorizationRuleId;

  public static final String SERIALIZED_NAME_EVENT_HUB_NAME = "eventHubName";
  @SerializedName(SERIALIZED_NAME_EVENT_HUB_NAME)
  private String eventHubName;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<LogSettings> logs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_BUS_RULE_ID = "serviceBusRuleId";
  @SerializedName(SERIALIZED_NAME_SERVICE_BUS_RULE_ID)
  private String serviceBusRuleId;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_ID = "storageAccountId";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_ID)
  private String storageAccountId;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public DiagnosticSettings() {
  }

  public DiagnosticSettings eventHubAuthorizationRuleId(String eventHubAuthorizationRuleId) {
    this.eventHubAuthorizationRuleId = eventHubAuthorizationRuleId;
    return this;
  }

  /**
   * The resource Id for the event hub authorization rule.
   * @return eventHubAuthorizationRuleId
   */
  @javax.annotation.Nullable
  public String getEventHubAuthorizationRuleId() {
    return eventHubAuthorizationRuleId;
  }

  public void setEventHubAuthorizationRuleId(String eventHubAuthorizationRuleId) {
    this.eventHubAuthorizationRuleId = eventHubAuthorizationRuleId;
  }


  public DiagnosticSettings eventHubName(String eventHubName) {
    this.eventHubName = eventHubName;
    return this;
  }

  /**
   * The name of the event hub. If none is specified, the default event hub will be selected.
   * @return eventHubName
   */
  @javax.annotation.Nullable
  public String getEventHubName() {
    return eventHubName;
  }

  public void setEventHubName(String eventHubName) {
    this.eventHubName = eventHubName;
  }


  public DiagnosticSettings logs(List<LogSettings> logs) {
    this.logs = logs;
    return this;
  }

  public DiagnosticSettings addLogsItem(LogSettings logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

  /**
   * The list of logs settings.
   * @return logs
   */
  @javax.annotation.Nullable
  public List<LogSettings> getLogs() {
    return logs;
  }

  public void setLogs(List<LogSettings> logs) {
    this.logs = logs;
  }


  public DiagnosticSettings serviceBusRuleId(String serviceBusRuleId) {
    this.serviceBusRuleId = serviceBusRuleId;
    return this;
  }

  /**
   * The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
   * @return serviceBusRuleId
   */
  @javax.annotation.Nullable
  public String getServiceBusRuleId() {
    return serviceBusRuleId;
  }

  public void setServiceBusRuleId(String serviceBusRuleId) {
    this.serviceBusRuleId = serviceBusRuleId;
  }


  public DiagnosticSettings storageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
    return this;
  }

  /**
   * The resource ID of the storage account to which you would like to send Diagnostic Logs.
   * @return storageAccountId
   */
  @javax.annotation.Nullable
  public String getStorageAccountId() {
    return storageAccountId;
  }

  public void setStorageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
  }


  public DiagnosticSettings workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
   * @return workspaceId
   */
  @javax.annotation.Nullable
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticSettings diagnosticSettings = (DiagnosticSettings) o;
    return Objects.equals(this.eventHubAuthorizationRuleId, diagnosticSettings.eventHubAuthorizationRuleId) &&
        Objects.equals(this.eventHubName, diagnosticSettings.eventHubName) &&
        Objects.equals(this.logs, diagnosticSettings.logs) &&
        Objects.equals(this.serviceBusRuleId, diagnosticSettings.serviceBusRuleId) &&
        Objects.equals(this.storageAccountId, diagnosticSettings.storageAccountId) &&
        Objects.equals(this.workspaceId, diagnosticSettings.workspaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventHubAuthorizationRuleId, eventHubName, logs, serviceBusRuleId, storageAccountId, workspaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticSettings {\n");
    sb.append("    eventHubAuthorizationRuleId: ").append(toIndentedString(eventHubAuthorizationRuleId)).append("\n");
    sb.append("    eventHubName: ").append(toIndentedString(eventHubName)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    serviceBusRuleId: ").append(toIndentedString(serviceBusRuleId)).append("\n");
    sb.append("    storageAccountId: ").append(toIndentedString(storageAccountId)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventHubAuthorizationRuleId");
    openapiFields.add("eventHubName");
    openapiFields.add("logs");
    openapiFields.add("serviceBusRuleId");
    openapiFields.add("storageAccountId");
    openapiFields.add("workspaceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiagnosticSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiagnosticSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiagnosticSettings is not found in the empty JSON string", DiagnosticSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiagnosticSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiagnosticSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventHubAuthorizationRuleId") != null && !jsonObj.get("eventHubAuthorizationRuleId").isJsonNull()) && !jsonObj.get("eventHubAuthorizationRuleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventHubAuthorizationRuleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventHubAuthorizationRuleId").toString()));
      }
      if ((jsonObj.get("eventHubName") != null && !jsonObj.get("eventHubName").isJsonNull()) && !jsonObj.get("eventHubName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventHubName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventHubName").toString()));
      }
      if (jsonObj.get("logs") != null && !jsonObj.get("logs").isJsonNull()) {
        JsonArray jsonArraylogs = jsonObj.getAsJsonArray("logs");
        if (jsonArraylogs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logs` to be an array in the JSON string but got `%s`", jsonObj.get("logs").toString()));
          }

          // validate the optional field `logs` (array)
          for (int i = 0; i < jsonArraylogs.size(); i++) {
            LogSettings.validateJsonElement(jsonArraylogs.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceBusRuleId") != null && !jsonObj.get("serviceBusRuleId").isJsonNull()) && !jsonObj.get("serviceBusRuleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceBusRuleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceBusRuleId").toString()));
      }
      if ((jsonObj.get("storageAccountId") != null && !jsonObj.get("storageAccountId").isJsonNull()) && !jsonObj.get("storageAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountId").toString()));
      }
      if ((jsonObj.get("workspaceId") != null && !jsonObj.get("workspaceId").isJsonNull()) && !jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiagnosticSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiagnosticSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiagnosticSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiagnosticSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<DiagnosticSettings>() {
           @Override
           public void write(JsonWriter out, DiagnosticSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiagnosticSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiagnosticSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiagnosticSettings
   * @throws IOException if the JSON string is invalid with respect to DiagnosticSettings
   */
  public static DiagnosticSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiagnosticSettings.class);
  }

  /**
   * Convert an instance of DiagnosticSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

