# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display import Display
from openapi_server import util


class OperationsDiscovery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display: Display=None, name: str=None, origin: str=None, properties: object=None):
        """OperationsDiscovery - a model defined in OpenAPI

        :param display: The display of this OperationsDiscovery.
        :param name: The name of this OperationsDiscovery.
        :param origin: The origin of this OperationsDiscovery.
        :param properties: The properties of this OperationsDiscovery.
        """
        self.openapi_types = {
            'display': Display,
            'name': str,
            'origin': str,
            'properties': object
        }

        self.attribute_map = {
            'display': 'display',
            'name': 'name',
            'origin': 'origin',
            'properties': 'properties'
        }

        self._display = display
        self._name = name
        self._origin = origin
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationsDiscovery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationsDiscovery of this OperationsDiscovery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display(self):
        """Gets the display of this OperationsDiscovery.


        :return: The display of this OperationsDiscovery.
        :rtype: Display
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this OperationsDiscovery.


        :param display: The display of this OperationsDiscovery.
        :type display: Display
        """

        self._display = display

    @property
    def name(self):
        """Gets the name of this OperationsDiscovery.

        Name of the API. The name of the operation being performed on this particular object. It should match the action name that appears in RBAC / the event service. Examples of operations include: * Microsoft.Compute/virtualMachine/capture/action * Microsoft.Compute/virtualMachine/restart/action * Microsoft.Compute/virtualMachine/write * Microsoft.Compute/virtualMachine/read * Microsoft.Compute/virtualMachine/delete Each action should include, in order: (1) Resource Provider Namespace (2) Type hierarchy for which the action applies (e.g. server/databases for a SQL Azure database) (3) Read, Write, Action or Delete indicating which type applies. If it is a PUT/PATCH on a collection or named value, Write should be used. If it is a GET, Read should be used. If it is a DELETE, Delete should be used. If it is a POST, Action should be used.

        :return: The name of this OperationsDiscovery.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperationsDiscovery.

        Name of the API. The name of the operation being performed on this particular object. It should match the action name that appears in RBAC / the event service. Examples of operations include: * Microsoft.Compute/virtualMachine/capture/action * Microsoft.Compute/virtualMachine/restart/action * Microsoft.Compute/virtualMachine/write * Microsoft.Compute/virtualMachine/read * Microsoft.Compute/virtualMachine/delete Each action should include, in order: (1) Resource Provider Namespace (2) Type hierarchy for which the action applies (e.g. server/databases for a SQL Azure database) (3) Read, Write, Action or Delete indicating which type applies. If it is a PUT/PATCH on a collection or named value, Write should be used. If it is a GET, Read should be used. If it is a DELETE, Delete should be used. If it is a POST, Action should be used.

        :param name: The name of this OperationsDiscovery.
        :type name: str
        """

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this OperationsDiscovery.

        Origin. The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. Default value is \"user,system\"

        :return: The origin of this OperationsDiscovery.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this OperationsDiscovery.

        Origin. The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. Default value is \"user,system\"

        :param origin: The origin of this OperationsDiscovery.
        :type origin: str
        """

        self._origin = origin

    @property
    def properties(self):
        """Gets the properties of this OperationsDiscovery.

        ClientDiscovery properties.

        :return: The properties of this OperationsDiscovery.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this OperationsDiscovery.

        ClientDiscovery properties.

        :param properties: The properties of this OperationsDiscovery.
        :type properties: object
        """

        self._properties = properties
