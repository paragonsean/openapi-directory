# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retention_policy import RetentionPolicy
from openapi_server import util


class LogSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, enabled: bool=None, retention_policy: RetentionPolicy=None):
        """LogSettings - a model defined in OpenAPI

        :param category: The category of this LogSettings.
        :param enabled: The enabled of this LogSettings.
        :param retention_policy: The retention_policy of this LogSettings.
        """
        self.openapi_types = {
            'category': str,
            'enabled': bool,
            'retention_policy': RetentionPolicy
        }

        self.attribute_map = {
            'category': 'category',
            'enabled': 'enabled',
            'retention_policy': 'retentionPolicy'
        }

        self._category = category
        self._enabled = enabled
        self._retention_policy = retention_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogSettings of this LogSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this LogSettings.

        Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.

        :return: The category of this LogSettings.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this LogSettings.

        Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.

        :param category: The category of this LogSettings.
        :type category: str
        """
        allowed_values = ["AuditLogs", "SignInLogs"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def enabled(self):
        """Gets the enabled of this LogSettings.

        A value indicating whether this log is enabled.

        :return: The enabled of this LogSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LogSettings.

        A value indicating whether this log is enabled.

        :param enabled: The enabled of this LogSettings.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def retention_policy(self):
        """Gets the retention_policy of this LogSettings.


        :return: The retention_policy of this LogSettings.
        :rtype: RetentionPolicy
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this LogSettings.


        :param retention_policy: The retention_policy of this LogSettings.
        :type retention_policy: RetentionPolicy
        """

        self._retention_policy = retention_policy
