/**
 * MariaDBManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecommendedActionsApi_H
#define OAI_OAIRecommendedActionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRecommendationAction.h"
#include "OAIRecommendationActionsResultList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRecommendedActionsApi : public QObject {
    Q_OBJECT

public:
    OAIRecommendedActionsApi(const int timeOut = 0);
    ~OAIRecommendedActionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  advisor_name QString [required]
    * @param[in]  recommended_action_name QString [required]
    */
    virtual void recommendedActionsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &advisor_name, const QString &recommended_action_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  advisor_name QString [required]
    * @param[in]  session_id QString [optional]
    */
    virtual void recommendedActionsListByServer(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &advisor_name, const ::OpenAPI::OptionalParam<QString> &session_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void recommendedActionsGetCallback(OAIHttpRequestWorker *worker);
    void recommendedActionsListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void recommendedActionsGetSignal(OAIRecommendationAction summary);
    void recommendedActionsListByServerSignal(OAIRecommendationActionsResultList summary);


    void recommendedActionsGetSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationAction summary);
    void recommendedActionsListByServerSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationActionsResultList summary);

    Q_DECL_DEPRECATED_X("Use recommendedActionsGetSignalError() instead")
    void recommendedActionsGetSignalE(OAIRecommendationAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendedActionsGetSignalError(OAIRecommendationAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendedActionsListByServerSignalError() instead")
    void recommendedActionsListByServerSignalE(OAIRecommendationActionsResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendedActionsListByServerSignalError(OAIRecommendationActionsResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use recommendedActionsGetSignalErrorFull() instead")
    void recommendedActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendedActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendedActionsListByServerSignalErrorFull() instead")
    void recommendedActionsListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendedActionsListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
