/*
 * MariaDBManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RecommendedActionSessionsOperationStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationBasedRecommendedActionSessionsOperationStatusApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocationBasedRecommendedActionSessionsOperationStatusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationBasedRecommendedActionSessionsOperationStatusApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for locationBasedRecommendedActionSessionsOperationStatusGet
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param locationName The name of the location. (required)
     * @param operationId The operation identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationBasedRecommendedActionSessionsOperationStatusGetCall(String apiVersion, String subscriptionId, String locationName, String operationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DBforMariaDB/locations/{locationName}/recommendedActionSessionsAzureAsyncOperation/{operationId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationBasedRecommendedActionSessionsOperationStatusGetValidateBeforeCall(String apiVersion, String subscriptionId, String locationName, String operationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling locationBasedRecommendedActionSessionsOperationStatusGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling locationBasedRecommendedActionSessionsOperationStatusGet(Async)");
        }

        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling locationBasedRecommendedActionSessionsOperationStatusGet(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling locationBasedRecommendedActionSessionsOperationStatusGet(Async)");
        }

        return locationBasedRecommendedActionSessionsOperationStatusGetCall(apiVersion, subscriptionId, locationName, operationId, _callback);

    }

    /**
     * 
     * Recommendation action session operation status.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param locationName The name of the location. (required)
     * @param operationId The operation identifier. (required)
     * @return RecommendedActionSessionsOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public RecommendedActionSessionsOperationStatus locationBasedRecommendedActionSessionsOperationStatusGet(String apiVersion, String subscriptionId, String locationName, String operationId) throws ApiException {
        ApiResponse<RecommendedActionSessionsOperationStatus> localVarResp = locationBasedRecommendedActionSessionsOperationStatusGetWithHttpInfo(apiVersion, subscriptionId, locationName, operationId);
        return localVarResp.getData();
    }

    /**
     * 
     * Recommendation action session operation status.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param locationName The name of the location. (required)
     * @param operationId The operation identifier. (required)
     * @return ApiResponse&lt;RecommendedActionSessionsOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendedActionSessionsOperationStatus> locationBasedRecommendedActionSessionsOperationStatusGetWithHttpInfo(String apiVersion, String subscriptionId, String locationName, String operationId) throws ApiException {
        okhttp3.Call localVarCall = locationBasedRecommendedActionSessionsOperationStatusGetValidateBeforeCall(apiVersion, subscriptionId, locationName, operationId, null);
        Type localVarReturnType = new TypeToken<RecommendedActionSessionsOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Recommendation action session operation status.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param locationName The name of the location. (required)
     * @param operationId The operation identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationBasedRecommendedActionSessionsOperationStatusGetAsync(String apiVersion, String subscriptionId, String locationName, String operationId, final ApiCallback<RecommendedActionSessionsOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationBasedRecommendedActionSessionsOperationStatusGetValidateBeforeCall(apiVersion, subscriptionId, locationName, operationId, _callback);
        Type localVarReturnType = new TypeToken<RecommendedActionSessionsOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
