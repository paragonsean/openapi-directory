/*
 * MariaDBManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a recommendation action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:53.056765-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecommendationActionProperties {
  public static final String SERIALIZED_NAME_ACTION_ID = "actionId";
  @SerializedName(SERIALIZED_NAME_ACTION_ID)
  private Integer actionId;

  public static final String SERIALIZED_NAME_ADVISOR_NAME = "advisorName";
  @SerializedName(SERIALIZED_NAME_ADVISOR_NAME)
  private String advisorName;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Map<String, String> details = new HashMap<>();

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expirationTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private OffsetDateTime expirationTime;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RECOMMENDATION_TYPE = "recommendationType";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_TYPE)
  private String recommendationType;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public RecommendationActionProperties() {
  }

  public RecommendationActionProperties actionId(Integer actionId) {
    this.actionId = actionId;
    return this;
  }

  /**
   * Recommendation action identifier.
   * @return actionId
   */
  @javax.annotation.Nullable
  public Integer getActionId() {
    return actionId;
  }

  public void setActionId(Integer actionId) {
    this.actionId = actionId;
  }


  public RecommendationActionProperties advisorName(String advisorName) {
    this.advisorName = advisorName;
    return this;
  }

  /**
   * Advisor name.
   * @return advisorName
   */
  @javax.annotation.Nullable
  public String getAdvisorName() {
    return advisorName;
  }

  public void setAdvisorName(String advisorName) {
    this.advisorName = advisorName;
  }


  public RecommendationActionProperties createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Recommendation action creation time.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public RecommendationActionProperties details(Map<String, String> details) {
    this.details = details;
    return this;
  }

  public RecommendationActionProperties putDetailsItem(String key, String detailsItem) {
    if (this.details == null) {
      this.details = new HashMap<>();
    }
    this.details.put(key, detailsItem);
    return this;
  }

  /**
   * Recommendation action details.
   * @return details
   */
  @javax.annotation.Nullable
  public Map<String, String> getDetails() {
    return details;
  }

  public void setDetails(Map<String, String> details) {
    this.details = details;
  }


  public RecommendationActionProperties expirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

  /**
   * Recommendation action expiration time.
   * @return expirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(OffsetDateTime expirationTime) {
    this.expirationTime = expirationTime;
  }


  public RecommendationActionProperties reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Recommendation action reason.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public RecommendationActionProperties recommendationType(String recommendationType) {
    this.recommendationType = recommendationType;
    return this;
  }

  /**
   * Recommendation action type.
   * @return recommendationType
   */
  @javax.annotation.Nullable
  public String getRecommendationType() {
    return recommendationType;
  }

  public void setRecommendationType(String recommendationType) {
    this.recommendationType = recommendationType;
  }


  public RecommendationActionProperties sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Recommendation action session identifier.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecommendationActionProperties recommendationActionProperties = (RecommendationActionProperties) o;
    return Objects.equals(this.actionId, recommendationActionProperties.actionId) &&
        Objects.equals(this.advisorName, recommendationActionProperties.advisorName) &&
        Objects.equals(this.createdTime, recommendationActionProperties.createdTime) &&
        Objects.equals(this.details, recommendationActionProperties.details) &&
        Objects.equals(this.expirationTime, recommendationActionProperties.expirationTime) &&
        Objects.equals(this.reason, recommendationActionProperties.reason) &&
        Objects.equals(this.recommendationType, recommendationActionProperties.recommendationType) &&
        Objects.equals(this.sessionId, recommendationActionProperties.sessionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionId, advisorName, createdTime, details, expirationTime, reason, recommendationType, sessionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecommendationActionProperties {\n");
    sb.append("    actionId: ").append(toIndentedString(actionId)).append("\n");
    sb.append("    advisorName: ").append(toIndentedString(advisorName)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    recommendationType: ").append(toIndentedString(recommendationType)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionId");
    openapiFields.add("advisorName");
    openapiFields.add("createdTime");
    openapiFields.add("details");
    openapiFields.add("expirationTime");
    openapiFields.add("reason");
    openapiFields.add("recommendationType");
    openapiFields.add("sessionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecommendationActionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecommendationActionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecommendationActionProperties is not found in the empty JSON string", RecommendationActionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecommendationActionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecommendationActionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advisorName") != null && !jsonObj.get("advisorName").isJsonNull()) && !jsonObj.get("advisorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advisorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advisorName").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("recommendationType") != null && !jsonObj.get("recommendationType").isJsonNull()) && !jsonObj.get("recommendationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendationType").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecommendationActionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecommendationActionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecommendationActionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecommendationActionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RecommendationActionProperties>() {
           @Override
           public void write(JsonWriter out, RecommendationActionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecommendationActionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecommendationActionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecommendationActionProperties
   * @throws IOException if the JSON string is invalid with respect to RecommendationActionProperties
   */
  public static RecommendationActionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecommendationActionProperties.class);
  }

  /**
   * Convert an instance of RecommendationActionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

