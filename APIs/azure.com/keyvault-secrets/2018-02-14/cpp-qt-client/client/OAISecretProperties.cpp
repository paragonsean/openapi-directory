/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2018-02-14
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecretProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecretProperties::OAISecretProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecretProperties::OAISecretProperties() {
    this->initializeModel();
}

OAISecretProperties::~OAISecretProperties() {}

void OAISecretProperties::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_secret_uri_isSet = false;
    m_secret_uri_isValid = false;

    m_secret_uri_with_version_isSet = false;
    m_secret_uri_with_version_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISecretProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecretProperties::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_secret_uri_isValid = ::OpenAPI::fromJsonValue(m_secret_uri, json[QString("secretUri")]);
    m_secret_uri_isSet = !json[QString("secretUri")].isNull() && m_secret_uri_isValid;

    m_secret_uri_with_version_isValid = ::OpenAPI::fromJsonValue(m_secret_uri_with_version, json[QString("secretUriWithVersion")]);
    m_secret_uri_with_version_isSet = !json[QString("secretUriWithVersion")].isNull() && m_secret_uri_with_version_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISecretProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecretProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_secret_uri_isSet) {
        obj.insert(QString("secretUri"), ::OpenAPI::toJsonValue(m_secret_uri));
    }
    if (m_secret_uri_with_version_isSet) {
        obj.insert(QString("secretUriWithVersion"), ::OpenAPI::toJsonValue(m_secret_uri_with_version));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAISecretAttributes OAISecretProperties::getAttributes() const {
    return m_attributes;
}
void OAISecretProperties::setAttributes(const OAISecretAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISecretProperties::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISecretProperties::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAISecretProperties::getContentType() const {
    return m_content_type;
}
void OAISecretProperties::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAISecretProperties::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAISecretProperties::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAISecretProperties::getSecretUri() const {
    return m_secret_uri;
}
void OAISecretProperties::setSecretUri(const QString &secret_uri) {
    m_secret_uri = secret_uri;
    m_secret_uri_isSet = true;
}

bool OAISecretProperties::is_secret_uri_Set() const{
    return m_secret_uri_isSet;
}

bool OAISecretProperties::is_secret_uri_Valid() const{
    return m_secret_uri_isValid;
}

QString OAISecretProperties::getSecretUriWithVersion() const {
    return m_secret_uri_with_version;
}
void OAISecretProperties::setSecretUriWithVersion(const QString &secret_uri_with_version) {
    m_secret_uri_with_version = secret_uri_with_version;
    m_secret_uri_with_version_isSet = true;
}

bool OAISecretProperties::is_secret_uri_with_version_Set() const{
    return m_secret_uri_with_version_isSet;
}

bool OAISecretProperties::is_secret_uri_with_version_Valid() const{
    return m_secret_uri_with_version_isValid;
}

QString OAISecretProperties::getValue() const {
    return m_value;
}
void OAISecretProperties::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISecretProperties::is_value_Set() const{
    return m_value_isSet;
}

bool OAISecretProperties::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISecretProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_uri_with_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecretProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
