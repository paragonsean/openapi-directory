/*
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2018-02-14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SecretAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the secret
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:30.790992-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SecretProperties {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private SecretAttributes attributes;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_SECRET_URI = "secretUri";
  @SerializedName(SERIALIZED_NAME_SECRET_URI)
  private String secretUri;

  public static final String SERIALIZED_NAME_SECRET_URI_WITH_VERSION = "secretUriWithVersion";
  @SerializedName(SERIALIZED_NAME_SECRET_URI_WITH_VERSION)
  private String secretUriWithVersion;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public SecretProperties() {
  }

  public SecretProperties(
     String secretUri, 
     String secretUriWithVersion
  ) {
    this();
    this.secretUri = secretUri;
    this.secretUriWithVersion = secretUriWithVersion;
  }

  public SecretProperties attributes(SecretAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public SecretAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(SecretAttributes attributes) {
    this.attributes = attributes;
  }


  public SecretProperties contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The content type of the secret.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  /**
   * The URI to retrieve the current version of the secret.
   * @return secretUri
   */
  @javax.annotation.Nullable
  public String getSecretUri() {
    return secretUri;
  }



  /**
   * The URI to retrieve the specific version of the secret.
   * @return secretUriWithVersion
   */
  @javax.annotation.Nullable
  public String getSecretUriWithVersion() {
    return secretUriWithVersion;
  }



  public SecretProperties value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The value of the secret. NOTE: &#39;value&#39; will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecretProperties secretProperties = (SecretProperties) o;
    return Objects.equals(this.attributes, secretProperties.attributes) &&
        Objects.equals(this.contentType, secretProperties.contentType) &&
        Objects.equals(this.secretUri, secretProperties.secretUri) &&
        Objects.equals(this.secretUriWithVersion, secretProperties.secretUriWithVersion) &&
        Objects.equals(this.value, secretProperties.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, contentType, secretUri, secretUriWithVersion, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecretProperties {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    secretUri: ").append(toIndentedString(secretUri)).append("\n");
    sb.append("    secretUriWithVersion: ").append(toIndentedString(secretUriWithVersion)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("contentType");
    openapiFields.add("secretUri");
    openapiFields.add("secretUriWithVersion");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecretProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecretProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecretProperties is not found in the empty JSON string", SecretProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecretProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecretProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        SecretAttributes.validateJsonElement(jsonObj.get("attributes"));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("secretUri") != null && !jsonObj.get("secretUri").isJsonNull()) && !jsonObj.get("secretUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretUri").toString()));
      }
      if ((jsonObj.get("secretUriWithVersion") != null && !jsonObj.get("secretUriWithVersion").isJsonNull()) && !jsonObj.get("secretUriWithVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretUriWithVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretUriWithVersion").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecretProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecretProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecretProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecretProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SecretProperties>() {
           @Override
           public void write(JsonWriter out, SecretProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecretProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecretProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecretProperties
   * @throws IOException if the JSON string is invalid with respect to SecretProperties
   */
  public static SecretProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecretProperties.class);
  }

  /**
   * Convert an instance of SecretProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

