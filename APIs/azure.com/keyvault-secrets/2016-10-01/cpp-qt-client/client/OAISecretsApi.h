/**
 * KeyVaultManagementClient
 * The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.
 *
 * The version of the OpenAPI document: 2016-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISecretsApi_H
#define OAI_OAISecretsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISecret.h"
#include "OAISecretCreateOrUpdateParameters.h"
#include "OAISecretListResult.h"
#include "OAISecretPatchParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISecretsApi : public QObject {
    Q_OBJECT

public:
    OAISecretsApi(const int timeOut = 0);
    ~OAISecretsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vault_name QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISecretCreateOrUpdateParameters [required]
    */
    virtual void secretsCreateOrUpdate(const QString &resource_group_name, const QString &vault_name, const QString &secret_name, const QString &api_version, const QString &subscription_id, const OAISecretCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vault_name QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void secretsGet(const QString &resource_group_name, const QString &vault_name, const QString &secret_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vault_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void secretsList(const QString &resource_group_name, const QString &vault_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  vault_name QString [required]
    * @param[in]  secret_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISecretPatchParameters [required]
    */
    virtual void secretsUpdate(const QString &resource_group_name, const QString &vault_name, const QString &secret_name, const QString &api_version, const QString &subscription_id, const OAISecretPatchParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void secretsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void secretsGetCallback(OAIHttpRequestWorker *worker);
    void secretsListCallback(OAIHttpRequestWorker *worker);
    void secretsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void secretsCreateOrUpdateSignal(OAISecret summary);
    void secretsGetSignal(OAISecret summary);
    void secretsListSignal(OAISecretListResult summary);
    void secretsUpdateSignal(OAISecret summary);


    void secretsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void secretsGetSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);
    void secretsListSignalFull(OAIHttpRequestWorker *worker, OAISecretListResult summary);
    void secretsUpdateSignalFull(OAIHttpRequestWorker *worker, OAISecret summary);

    Q_DECL_DEPRECATED_X("Use secretsCreateOrUpdateSignalError() instead")
    void secretsCreateOrUpdateSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsCreateOrUpdateSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsGetSignalError() instead")
    void secretsGetSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsGetSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsListSignalError() instead")
    void secretsListSignalE(OAISecretListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsListSignalError(OAISecretListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsUpdateSignalError() instead")
    void secretsUpdateSignalE(OAISecret summary, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsUpdateSignalError(OAISecret summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use secretsCreateOrUpdateSignalErrorFull() instead")
    void secretsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsGetSignalErrorFull() instead")
    void secretsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsListSignalErrorFull() instead")
    void secretsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use secretsUpdateSignalErrorFull() instead")
    void secretsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void secretsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
