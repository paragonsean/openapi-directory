# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cache_health import CacheHealth
from openapi_server.models.cache_upgrade_status import CacheUpgradeStatus
from openapi_server import util


class CacheProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_size_gb: int=None, health: CacheHealth=None, mount_addresses: List[str]=None, provisioning_state: str=None, subnet: str=None, upgrade_status: CacheUpgradeStatus=None):
        """CacheProperties - a model defined in OpenAPI

        :param cache_size_gb: The cache_size_gb of this CacheProperties.
        :param health: The health of this CacheProperties.
        :param mount_addresses: The mount_addresses of this CacheProperties.
        :param provisioning_state: The provisioning_state of this CacheProperties.
        :param subnet: The subnet of this CacheProperties.
        :param upgrade_status: The upgrade_status of this CacheProperties.
        """
        self.openapi_types = {
            'cache_size_gb': int,
            'health': CacheHealth,
            'mount_addresses': List[str],
            'provisioning_state': str,
            'subnet': str,
            'upgrade_status': CacheUpgradeStatus
        }

        self.attribute_map = {
            'cache_size_gb': 'cacheSizeGB',
            'health': 'health',
            'mount_addresses': 'mountAddresses',
            'provisioning_state': 'provisioningState',
            'subnet': 'subnet',
            'upgrade_status': 'upgradeStatus'
        }

        self._cache_size_gb = cache_size_gb
        self._health = health
        self._mount_addresses = mount_addresses
        self._provisioning_state = provisioning_state
        self._subnet = subnet
        self._upgrade_status = upgrade_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CacheProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cache_properties of this CacheProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_size_gb(self):
        """Gets the cache_size_gb of this CacheProperties.

        The size of this cache's cache, in GB.

        :return: The cache_size_gb of this CacheProperties.
        :rtype: int
        """
        return self._cache_size_gb

    @cache_size_gb.setter
    def cache_size_gb(self, cache_size_gb):
        """Sets the cache_size_gb of this CacheProperties.

        The size of this cache's cache, in GB.

        :param cache_size_gb: The cache_size_gb of this CacheProperties.
        :type cache_size_gb: int
        """

        self._cache_size_gb = cache_size_gb

    @property
    def health(self):
        """Gets the health of this CacheProperties.


        :return: The health of this CacheProperties.
        :rtype: CacheHealth
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this CacheProperties.


        :param health: The health of this CacheProperties.
        :type health: CacheHealth
        """

        self._health = health

    @property
    def mount_addresses(self):
        """Gets the mount_addresses of this CacheProperties.

        Array of IP addresses that can be used by clients mounting this Cache.

        :return: The mount_addresses of this CacheProperties.
        :rtype: List[str]
        """
        return self._mount_addresses

    @mount_addresses.setter
    def mount_addresses(self, mount_addresses):
        """Sets the mount_addresses of this CacheProperties.

        Array of IP addresses that can be used by clients mounting this Cache.

        :param mount_addresses: The mount_addresses of this CacheProperties.
        :type mount_addresses: List[str]
        """

        self._mount_addresses = mount_addresses

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this CacheProperties.

        ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property

        :return: The provisioning_state of this CacheProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this CacheProperties.

        ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property

        :param provisioning_state: The provisioning_state of this CacheProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Failed", "Cancelled", "Creating", "Deleting", "Updating"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def subnet(self):
        """Gets the subnet of this CacheProperties.

        A fully qualified URL.

        :return: The subnet of this CacheProperties.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this CacheProperties.

        A fully qualified URL.

        :param subnet: The subnet of this CacheProperties.
        :type subnet: str
        """

        self._subnet = subnet

    @property
    def upgrade_status(self):
        """Gets the upgrade_status of this CacheProperties.


        :return: The upgrade_status of this CacheProperties.
        :rtype: CacheUpgradeStatus
        """
        return self._upgrade_status

    @upgrade_status.setter
    def upgrade_status(self, upgrade_status):
        """Sets the upgrade_status of this CacheProperties.


        :param upgrade_status: The upgrade_status of this CacheProperties.
        :type upgrade_status: CacheUpgradeStatus
        """

        self._upgrade_status = upgrade_status
