# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CacheUpgradeStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_firmware_version: str=None, firmware_update_deadline: datetime=None, firmware_update_status: str=None, last_firmware_update: datetime=None, pending_firmware_version: str=None):
        """CacheUpgradeStatus - a model defined in OpenAPI

        :param current_firmware_version: The current_firmware_version of this CacheUpgradeStatus.
        :param firmware_update_deadline: The firmware_update_deadline of this CacheUpgradeStatus.
        :param firmware_update_status: The firmware_update_status of this CacheUpgradeStatus.
        :param last_firmware_update: The last_firmware_update of this CacheUpgradeStatus.
        :param pending_firmware_version: The pending_firmware_version of this CacheUpgradeStatus.
        """
        self.openapi_types = {
            'current_firmware_version': str,
            'firmware_update_deadline': datetime,
            'firmware_update_status': str,
            'last_firmware_update': datetime,
            'pending_firmware_version': str
        }

        self.attribute_map = {
            'current_firmware_version': 'currentFirmwareVersion',
            'firmware_update_deadline': 'firmwareUpdateDeadline',
            'firmware_update_status': 'firmwareUpdateStatus',
            'last_firmware_update': 'lastFirmwareUpdate',
            'pending_firmware_version': 'pendingFirmwareVersion'
        }

        self._current_firmware_version = current_firmware_version
        self._firmware_update_deadline = firmware_update_deadline
        self._firmware_update_status = firmware_update_status
        self._last_firmware_update = last_firmware_update
        self._pending_firmware_version = pending_firmware_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CacheUpgradeStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CacheUpgradeStatus of this CacheUpgradeStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_firmware_version(self):
        """Gets the current_firmware_version of this CacheUpgradeStatus.

        Version string of the firmware currently installed on this cache.

        :return: The current_firmware_version of this CacheUpgradeStatus.
        :rtype: str
        """
        return self._current_firmware_version

    @current_firmware_version.setter
    def current_firmware_version(self, current_firmware_version):
        """Sets the current_firmware_version of this CacheUpgradeStatus.

        Version string of the firmware currently installed on this cache.

        :param current_firmware_version: The current_firmware_version of this CacheUpgradeStatus.
        :type current_firmware_version: str
        """

        self._current_firmware_version = current_firmware_version

    @property
    def firmware_update_deadline(self):
        """Gets the firmware_update_deadline of this CacheUpgradeStatus.

        Time at which the pending firmware update will automatically be installed on the cache.

        :return: The firmware_update_deadline of this CacheUpgradeStatus.
        :rtype: datetime
        """
        return self._firmware_update_deadline

    @firmware_update_deadline.setter
    def firmware_update_deadline(self, firmware_update_deadline):
        """Sets the firmware_update_deadline of this CacheUpgradeStatus.

        Time at which the pending firmware update will automatically be installed on the cache.

        :param firmware_update_deadline: The firmware_update_deadline of this CacheUpgradeStatus.
        :type firmware_update_deadline: datetime
        """

        self._firmware_update_deadline = firmware_update_deadline

    @property
    def firmware_update_status(self):
        """Gets the firmware_update_status of this CacheUpgradeStatus.

        True if there is a firmware update ready to install on this cache.  The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.

        :return: The firmware_update_status of this CacheUpgradeStatus.
        :rtype: str
        """
        return self._firmware_update_status

    @firmware_update_status.setter
    def firmware_update_status(self, firmware_update_status):
        """Sets the firmware_update_status of this CacheUpgradeStatus.

        True if there is a firmware update ready to install on this cache.  The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.

        :param firmware_update_status: The firmware_update_status of this CacheUpgradeStatus.
        :type firmware_update_status: str
        """
        allowed_values = ["available", "unavailable"]  # noqa: E501
        if firmware_update_status not in allowed_values:
            raise ValueError(
                "Invalid value for `firmware_update_status` ({0}), must be one of {1}"
                .format(firmware_update_status, allowed_values)
            )

        self._firmware_update_status = firmware_update_status

    @property
    def last_firmware_update(self):
        """Gets the last_firmware_update of this CacheUpgradeStatus.

        Time of the last successful firmware update.

        :return: The last_firmware_update of this CacheUpgradeStatus.
        :rtype: datetime
        """
        return self._last_firmware_update

    @last_firmware_update.setter
    def last_firmware_update(self, last_firmware_update):
        """Sets the last_firmware_update of this CacheUpgradeStatus.

        Time of the last successful firmware update.

        :param last_firmware_update: The last_firmware_update of this CacheUpgradeStatus.
        :type last_firmware_update: datetime
        """

        self._last_firmware_update = last_firmware_update

    @property
    def pending_firmware_version(self):
        """Gets the pending_firmware_version of this CacheUpgradeStatus.

        When firmwareUpdateAvailable is true, this field holds the version string for the update.

        :return: The pending_firmware_version of this CacheUpgradeStatus.
        :rtype: str
        """
        return self._pending_firmware_version

    @pending_firmware_version.setter
    def pending_firmware_version(self, pending_firmware_version):
        """Sets the pending_firmware_version of this CacheUpgradeStatus.

        When firmwareUpdateAvailable is true, this field holds the version string for the update.

        :param pending_firmware_version: The pending_firmware_version of this CacheUpgradeStatus.
        :type pending_firmware_version: str
        """

        self._pending_firmware_version = pending_firmware_version
