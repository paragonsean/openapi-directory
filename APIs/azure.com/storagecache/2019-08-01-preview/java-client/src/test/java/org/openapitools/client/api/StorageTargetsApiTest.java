/*
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage caches.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.StorageTarget;
import org.openapitools.client.model.StorageTargetsResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorageTargetsApi
 */
@Disabled
public class StorageTargetsApiTest {

    private final StorageTargetsApi api = new StorageTargetsApi();

    /**
     * Create/update a storage target.  This operation is allowed at any time, but if the cache is down or unhealthy, the actual creation/modification of the storage target may be delayed until the cache is healthy again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageTargetsCreateTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        String storageTargetName = null;
        StorageTarget storagetarget = null;
        StorageTarget response = api.storageTargetsCreate(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, storagetarget);
        // TODO: test validations
    }

    /**
     * Removes a storage target from a cache.  This operation is allowed at any time, but if the cache is down or unhealthy, the actual removal of the storage target may be delayed until the cache is healthy again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageTargetsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        String storageTargetName = null;
        Object response = api.storageTargetsDelete(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName);
        // TODO: test validations
    }

    /**
     * Returns a storage target from a cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageTargetsGetTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        String storageTargetName = null;
        StorageTarget response = api.storageTargetsGet(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName);
        // TODO: test validations
    }

    /**
     * Returns the StorageTargets for this cache in the subscription and resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageTargetsListByCacheTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        StorageTargetsResult response = api.storageTargetsListByCache(resourceGroupName, apiVersion, subscriptionId, cacheName);
        // TODO: test validations
    }

    /**
     * Update a storage target.  This operation is allowed at any time, but if the cache is down or unhealthy, the actual creation/modification of the storage target may be delayed until the cache is healthy again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageTargetsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        String storageTargetName = null;
        StorageTarget storagetarget = null;
        StorageTarget response = api.storageTargetsUpdate(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, storagetarget);
        // TODO: test validations
    }

}
