/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage caches.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CacheHealth from './CacheHealth';
import CacheUpgradeStatus from './CacheUpgradeStatus';

/**
 * The CacheProperties model module.
 * @module model/CacheProperties
 * @version 2019-08-01-preview
 */
class CacheProperties {
    /**
     * Constructs a new <code>CacheProperties</code>.
     * Properties for the cache.
     * @alias module:model/CacheProperties
     */
    constructor() { 
        
        CacheProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CacheProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CacheProperties} obj Optional instance to populate.
     * @return {module:model/CacheProperties} The populated <code>CacheProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CacheProperties();

            if (data.hasOwnProperty('cacheSizeGB')) {
                obj['cacheSizeGB'] = ApiClient.convertToType(data['cacheSizeGB'], 'Number');
            }
            if (data.hasOwnProperty('health')) {
                obj['health'] = CacheHealth.constructFromObject(data['health']);
            }
            if (data.hasOwnProperty('mountAddresses')) {
                obj['mountAddresses'] = ApiClient.convertToType(data['mountAddresses'], ['String']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('subnet')) {
                obj['subnet'] = ApiClient.convertToType(data['subnet'], 'String');
            }
            if (data.hasOwnProperty('upgradeStatus')) {
                obj['upgradeStatus'] = CacheUpgradeStatus.constructFromObject(data['upgradeStatus']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CacheProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CacheProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `health`
        if (data['health']) { // data not null
          CacheHealth.validateJSON(data['health']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mountAddresses'])) {
            throw new Error("Expected the field `mountAddresses` to be an array in the JSON data but got " + data['mountAddresses']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['subnet'] && !(typeof data['subnet'] === 'string' || data['subnet'] instanceof String)) {
            throw new Error("Expected the field `subnet` to be a primitive type in the JSON string but got " + data['subnet']);
        }
        // validate the optional field `upgradeStatus`
        if (data['upgradeStatus']) { // data not null
          CacheUpgradeStatus.validateJSON(data['upgradeStatus']);
        }

        return true;
    }


}



/**
 * The size of this cache's cache, in GB.
 * @member {Number} cacheSizeGB
 */
CacheProperties.prototype['cacheSizeGB'] = undefined;

/**
 * @member {module:model/CacheHealth} health
 */
CacheProperties.prototype['health'] = undefined;

/**
 * Array of IP addresses that can be used by clients mounting this Cache.
 * @member {Array.<String>} mountAddresses
 */
CacheProperties.prototype['mountAddresses'] = undefined;

/**
 * ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
 * @member {module:model/CacheProperties.ProvisioningStateEnum} provisioningState
 */
CacheProperties.prototype['provisioningState'] = undefined;

/**
 * A fully qualified URL.
 * @member {String} subnet
 */
CacheProperties.prototype['subnet'] = undefined;

/**
 * @member {module:model/CacheUpgradeStatus} upgradeStatus
 */
CacheProperties.prototype['upgradeStatus'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
CacheProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating"
};



export default CacheProperties;

