/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage caches.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NamespaceJunction model module.
 * @module model/NamespaceJunction
 * @version 2019-08-01-preview
 */
class NamespaceJunction {
    /**
     * Constructs a new <code>NamespaceJunction</code>.
     * A namespace junction.
     * @alias module:model/NamespaceJunction
     */
    constructor() { 
        
        NamespaceJunction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NamespaceJunction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamespaceJunction} obj Optional instance to populate.
     * @return {module:model/NamespaceJunction} The populated <code>NamespaceJunction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamespaceJunction();

            if (data.hasOwnProperty('namespacePath')) {
                obj['namespacePath'] = ApiClient.convertToType(data['namespacePath'], 'String');
            }
            if (data.hasOwnProperty('nfsExport')) {
                obj['nfsExport'] = ApiClient.convertToType(data['nfsExport'], 'String');
            }
            if (data.hasOwnProperty('targetPath')) {
                obj['targetPath'] = ApiClient.convertToType(data['targetPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NamespaceJunction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NamespaceJunction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['namespacePath'] && !(typeof data['namespacePath'] === 'string' || data['namespacePath'] instanceof String)) {
            throw new Error("Expected the field `namespacePath` to be a primitive type in the JSON string but got " + data['namespacePath']);
        }
        // ensure the json data is a string
        if (data['nfsExport'] && !(typeof data['nfsExport'] === 'string' || data['nfsExport'] instanceof String)) {
            throw new Error("Expected the field `nfsExport` to be a primitive type in the JSON string but got " + data['nfsExport']);
        }
        // ensure the json data is a string
        if (data['targetPath'] && !(typeof data['targetPath'] === 'string' || data['targetPath'] instanceof String)) {
            throw new Error("Expected the field `targetPath` to be a primitive type in the JSON string but got " + data['targetPath']);
        }

        return true;
    }


}



/**
 * Namespace path on a cache for a storage target.
 * @member {String} namespacePath
 */
NamespaceJunction.prototype['namespacePath'] = undefined;

/**
 * NFS export where targetPath exists.
 * @member {String} nfsExport
 */
NamespaceJunction.prototype['nfsExport'] = undefined;

/**
 * Path in storage target to which namespacePath points.
 * @member {String} targetPath
 */
NamespaceJunction.prototype['targetPath'] = undefined;






export default NamespaceJunction;

