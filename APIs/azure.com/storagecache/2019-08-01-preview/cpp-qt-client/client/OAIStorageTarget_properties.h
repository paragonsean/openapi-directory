/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage caches.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStorageTarget_properties.h
 *
 * Properties of the storage target.
 */

#ifndef OAIStorageTarget_properties_H
#define OAIStorageTarget_properties_H

#include <QJsonObject>

#include "OAIClfsTarget.h"
#include "OAINamespaceJunction.h"
#include "OAINfs3Target.h"
#include "OAIUnknownTarget.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClfsTarget;
class OAINamespaceJunction;
class OAINfs3Target;
class OAIUnknownTarget;

class OAIStorageTarget_properties : public OAIObject {
public:
    OAIStorageTarget_properties();
    OAIStorageTarget_properties(QString json);
    ~OAIStorageTarget_properties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIClfsTarget getClfs() const;
    void setClfs(const OAIClfsTarget &clfs);
    bool is_clfs_Set() const;
    bool is_clfs_Valid() const;

    QList<OAINamespaceJunction> getJunctions() const;
    void setJunctions(const QList<OAINamespaceJunction> &junctions);
    bool is_junctions_Set() const;
    bool is_junctions_Valid() const;

    OAINfs3Target getNfs3() const;
    void setNfs3(const OAINfs3Target &nfs3);
    bool is_nfs3_Set() const;
    bool is_nfs3_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getTargetType() const;
    void setTargetType(const QString &target_type);
    bool is_target_type_Set() const;
    bool is_target_type_Valid() const;

    OAIUnknownTarget getUnknown() const;
    void setUnknown(const OAIUnknownTarget &unknown);
    bool is_unknown_Set() const;
    bool is_unknown_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIClfsTarget m_clfs;
    bool m_clfs_isSet;
    bool m_clfs_isValid;

    QList<OAINamespaceJunction> m_junctions;
    bool m_junctions_isSet;
    bool m_junctions_isValid;

    OAINfs3Target m_nfs3;
    bool m_nfs3_isSet;
    bool m_nfs3_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_target_type;
    bool m_target_type_isSet;
    bool m_target_type_isValid;

    OAIUnknownTarget m_unknown;
    bool m_unknown_isSet;
    bool m_unknown_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStorageTarget_properties)

#endif // OAIStorageTarget_properties_H
