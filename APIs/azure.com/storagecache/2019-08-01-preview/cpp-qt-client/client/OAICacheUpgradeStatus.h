/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage caches.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICacheUpgradeStatus.h
 *
 * Properties describing the software upgrade state of the cache
 */

#ifndef OAICacheUpgradeStatus_H
#define OAICacheUpgradeStatus_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICacheUpgradeStatus : public OAIObject {
public:
    OAICacheUpgradeStatus();
    OAICacheUpgradeStatus(QString json);
    ~OAICacheUpgradeStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCurrentFirmwareVersion() const;
    void setCurrentFirmwareVersion(const QString &current_firmware_version);
    bool is_current_firmware_version_Set() const;
    bool is_current_firmware_version_Valid() const;

    QDateTime getFirmwareUpdateDeadline() const;
    void setFirmwareUpdateDeadline(const QDateTime &firmware_update_deadline);
    bool is_firmware_update_deadline_Set() const;
    bool is_firmware_update_deadline_Valid() const;

    QString getFirmwareUpdateStatus() const;
    void setFirmwareUpdateStatus(const QString &firmware_update_status);
    bool is_firmware_update_status_Set() const;
    bool is_firmware_update_status_Valid() const;

    QDateTime getLastFirmwareUpdate() const;
    void setLastFirmwareUpdate(const QDateTime &last_firmware_update);
    bool is_last_firmware_update_Set() const;
    bool is_last_firmware_update_Valid() const;

    QString getPendingFirmwareVersion() const;
    void setPendingFirmwareVersion(const QString &pending_firmware_version);
    bool is_pending_firmware_version_Set() const;
    bool is_pending_firmware_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_current_firmware_version;
    bool m_current_firmware_version_isSet;
    bool m_current_firmware_version_isValid;

    QDateTime m_firmware_update_deadline;
    bool m_firmware_update_deadline_isSet;
    bool m_firmware_update_deadline_isValid;

    QString m_firmware_update_status;
    bool m_firmware_update_status_isSet;
    bool m_firmware_update_status_isValid;

    QDateTime m_last_firmware_update;
    bool m_last_firmware_update_isSet;
    bool m_last_firmware_update_isValid;

    QString m_pending_firmware_version;
    bool m_pending_firmware_version_isSet;
    bool m_pending_firmware_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICacheUpgradeStatus)

#endif // OAICacheUpgradeStatus_H
