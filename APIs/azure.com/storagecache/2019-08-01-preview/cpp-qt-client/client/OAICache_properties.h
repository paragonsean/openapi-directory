/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage caches.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICache_properties.h
 *
 * Properties for the cache.
 */

#ifndef OAICache_properties_H
#define OAICache_properties_H

#include <QJsonObject>

#include "OAICacheHealth.h"
#include "OAICacheUpgradeStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICacheHealth;
class OAICacheUpgradeStatus;

class OAICache_properties : public OAIObject {
public:
    OAICache_properties();
    OAICache_properties(QString json);
    ~OAICache_properties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCacheSizeGb() const;
    void setCacheSizeGb(const qint32 &cache_size_gb);
    bool is_cache_size_gb_Set() const;
    bool is_cache_size_gb_Valid() const;

    OAICacheHealth getHealth() const;
    void setHealth(const OAICacheHealth &health);
    bool is_health_Set() const;
    bool is_health_Valid() const;

    QList<QString> getMountAddresses() const;
    void setMountAddresses(const QList<QString> &mount_addresses);
    bool is_mount_addresses_Set() const;
    bool is_mount_addresses_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getSubnet() const;
    void setSubnet(const QString &subnet);
    bool is_subnet_Set() const;
    bool is_subnet_Valid() const;

    OAICacheUpgradeStatus getUpgradeStatus() const;
    void setUpgradeStatus(const OAICacheUpgradeStatus &upgrade_status);
    bool is_upgrade_status_Set() const;
    bool is_upgrade_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cache_size_gb;
    bool m_cache_size_gb_isSet;
    bool m_cache_size_gb_isValid;

    OAICacheHealth m_health;
    bool m_health_isSet;
    bool m_health_isValid;

    QList<QString> m_mount_addresses;
    bool m_mount_addresses_isSet;
    bool m_mount_addresses_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_subnet;
    bool m_subnet_isSet;
    bool m_subnet_isValid;

    OAICacheUpgradeStatus m_upgrade_status;
    bool m_upgrade_status_isSet;
    bool m_upgrade_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICache_properties)

#endif // OAICache_properties_H
