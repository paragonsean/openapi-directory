/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage caches.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICacheHealth.h
 *
 * An indication of cache health.  Gives more information about health than just that related to provisioning.
 */

#ifndef OAICacheHealth_H
#define OAICacheHealth_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICacheHealth : public OAIObject {
public:
    OAICacheHealth();
    OAICacheHealth(QString json);
    ~OAICacheHealth() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStatusDescription() const;
    void setStatusDescription(const QString &status_description);
    bool is_status_description_Set() const;
    bool is_status_description_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_status_description;
    bool m_status_description_isSet;
    bool m_status_description_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICacheHealth)

#endif // OAICacheHealth_H
