/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage caches.
 *
 * The version of the OpenAPI document: 2019-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResourceSku.h
 *
 * A resource SKU
 */

#ifndef OAIResourceSku_H
#define OAIResourceSku_H

#include <QJsonObject>

#include "OAIResourceSkuCapabilities.h"
#include "OAIResourceSkuLocationInfo.h"
#include "OAIRestriction.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIResourceSkuCapabilities;
class OAIResourceSkuLocationInfo;
class OAIRestriction;

class OAIResourceSku : public OAIObject {
public:
    OAIResourceSku();
    OAIResourceSku(QString json);
    ~OAIResourceSku() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIResourceSkuCapabilities> getCapabilities() const;
    void setCapabilities(const QList<OAIResourceSkuCapabilities> &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QList<OAIResourceSkuLocationInfo> getLocationInfo() const;
    void setLocationInfo(const QList<OAIResourceSkuLocationInfo> &location_info);
    bool is_location_info_Set() const;
    bool is_location_info_Valid() const;

    QList<QString> getLocations() const;
    void setLocations(const QList<QString> &locations);
    bool is_locations_Set() const;
    bool is_locations_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QList<OAIRestriction> getRestrictions() const;
    void setRestrictions(const QList<OAIRestriction> &restrictions);
    bool is_restrictions_Set() const;
    bool is_restrictions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIResourceSkuCapabilities> m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QList<OAIResourceSkuLocationInfo> m_location_info;
    bool m_location_info_isSet;
    bool m_location_info_isValid;

    QList<QString> m_locations;
    bool m_locations_isSet;
    bool m_locations_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QList<OAIRestriction> m_restrictions;
    bool m_restrictions_isSet;
    bool m_restrictions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResourceSku)

#endif // OAIResourceSku_H
