/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import StorageTarget from '../model/StorageTarget';
import StorageTargetsResult from '../model/StorageTargetsResult';

/**
* StorageTargets service.
* @module api/StorageTargetsApi
* @version 2019-11-01
*/
export default class StorageTargetsApi {

    /**
    * Constructs a new StorageTargetsApi. 
    * @alias module:api/StorageTargetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storageTargetsCreateOrUpdate operation.
     * @callback module:api/StorageTargetsApi~storageTargetsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageTarget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
     * @param {String} resourceGroupName Target resource group.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} cacheName Name of Cache.
     * @param {String} storageTargetName Name of the Storage Target.
     * @param {Object} opts Optional parameters
     * @param {module:model/StorageTarget} [storagetarget] Object containing the definition of a Storage Target.
     * @param {module:api/StorageTargetsApi~storageTargetsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageTarget}
     */
    storageTargetsCreateOrUpdate(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, opts, callback) {
      opts = opts || {};
      let postBody = opts['storagetarget'];
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling storageTargetsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling storageTargetsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling storageTargetsCreateOrUpdate");
      }
      // verify the required parameter 'cacheName' is set
      if (cacheName === undefined || cacheName === null) {
        throw new Error("Missing the required parameter 'cacheName' when calling storageTargetsCreateOrUpdate");
      }
      // verify the required parameter 'storageTargetName' is set
      if (storageTargetName === undefined || storageTargetName === null) {
        throw new Error("Missing the required parameter 'storageTargetName' when calling storageTargetsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'cacheName': cacheName,
        'storageTargetName': storageTargetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StorageTarget;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageTargetsDelete operation.
     * @callback module:api/StorageTargetsApi~storageTargetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be flushed before the Storage Target will be deleted.
     * @param {String} resourceGroupName Target resource group.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} cacheName Name of Cache.
     * @param {String} storageTargetName Name of Storage Target.
     * @param {module:api/StorageTargetsApi~storageTargetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    storageTargetsDelete(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling storageTargetsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling storageTargetsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling storageTargetsDelete");
      }
      // verify the required parameter 'cacheName' is set
      if (cacheName === undefined || cacheName === null) {
        throw new Error("Missing the required parameter 'cacheName' when calling storageTargetsDelete");
      }
      // verify the required parameter 'storageTargetName' is set
      if (storageTargetName === undefined || storageTargetName === null) {
        throw new Error("Missing the required parameter 'storageTargetName' when calling storageTargetsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'cacheName': cacheName,
        'storageTargetName': storageTargetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageTargetsGet operation.
     * @callback module:api/StorageTargetsApi~storageTargetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageTarget} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a Storage Target from a Cache.
     * @param {String} resourceGroupName Target resource group.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} cacheName Name of Cache.
     * @param {String} storageTargetName Name of the Storage Target.
     * @param {module:api/StorageTargetsApi~storageTargetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageTarget}
     */
    storageTargetsGet(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling storageTargetsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling storageTargetsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling storageTargetsGet");
      }
      // verify the required parameter 'cacheName' is set
      if (cacheName === undefined || cacheName === null) {
        throw new Error("Missing the required parameter 'cacheName' when calling storageTargetsGet");
      }
      // verify the required parameter 'storageTargetName' is set
      if (storageTargetName === undefined || storageTargetName === null) {
        throw new Error("Missing the required parameter 'storageTargetName' when calling storageTargetsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'cacheName': cacheName,
        'storageTargetName': storageTargetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageTarget;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageTargetsListByCache operation.
     * @callback module:api/StorageTargetsApi~storageTargetsListByCacheCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageTargetsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Storage Targets for the specified Cache.
     * @param {String} resourceGroupName Target resource group.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} cacheName Name of Cache.
     * @param {module:api/StorageTargetsApi~storageTargetsListByCacheCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageTargetsResult}
     */
    storageTargetsListByCache(resourceGroupName, apiVersion, subscriptionId, cacheName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling storageTargetsListByCache");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling storageTargetsListByCache");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling storageTargetsListByCache");
      }
      // verify the required parameter 'cacheName' is set
      if (cacheName === undefined || cacheName === null) {
        throw new Error("Missing the required parameter 'cacheName' when calling storageTargetsListByCache");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'cacheName': cacheName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StorageTargetsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
