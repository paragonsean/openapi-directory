/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CacheUpgradeStatus model module.
 * @module model/CacheUpgradeStatus
 * @version 2019-11-01
 */
class CacheUpgradeStatus {
    /**
     * Constructs a new <code>CacheUpgradeStatus</code>.
     * Properties describing the software upgrade state of the Cache.
     * @alias module:model/CacheUpgradeStatus
     */
    constructor() { 
        
        CacheUpgradeStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CacheUpgradeStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CacheUpgradeStatus} obj Optional instance to populate.
     * @return {module:model/CacheUpgradeStatus} The populated <code>CacheUpgradeStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CacheUpgradeStatus();

            if (data.hasOwnProperty('currentFirmwareVersion')) {
                obj['currentFirmwareVersion'] = ApiClient.convertToType(data['currentFirmwareVersion'], 'String');
            }
            if (data.hasOwnProperty('firmwareUpdateDeadline')) {
                obj['firmwareUpdateDeadline'] = ApiClient.convertToType(data['firmwareUpdateDeadline'], 'Date');
            }
            if (data.hasOwnProperty('firmwareUpdateStatus')) {
                obj['firmwareUpdateStatus'] = ApiClient.convertToType(data['firmwareUpdateStatus'], 'String');
            }
            if (data.hasOwnProperty('lastFirmwareUpdate')) {
                obj['lastFirmwareUpdate'] = ApiClient.convertToType(data['lastFirmwareUpdate'], 'Date');
            }
            if (data.hasOwnProperty('pendingFirmwareVersion')) {
                obj['pendingFirmwareVersion'] = ApiClient.convertToType(data['pendingFirmwareVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CacheUpgradeStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CacheUpgradeStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currentFirmwareVersion'] && !(typeof data['currentFirmwareVersion'] === 'string' || data['currentFirmwareVersion'] instanceof String)) {
            throw new Error("Expected the field `currentFirmwareVersion` to be a primitive type in the JSON string but got " + data['currentFirmwareVersion']);
        }
        // ensure the json data is a string
        if (data['firmwareUpdateStatus'] && !(typeof data['firmwareUpdateStatus'] === 'string' || data['firmwareUpdateStatus'] instanceof String)) {
            throw new Error("Expected the field `firmwareUpdateStatus` to be a primitive type in the JSON string but got " + data['firmwareUpdateStatus']);
        }
        // ensure the json data is a string
        if (data['pendingFirmwareVersion'] && !(typeof data['pendingFirmwareVersion'] === 'string' || data['pendingFirmwareVersion'] instanceof String)) {
            throw new Error("Expected the field `pendingFirmwareVersion` to be a primitive type in the JSON string but got " + data['pendingFirmwareVersion']);
        }

        return true;
    }


}



/**
 * Version string of the firmware currently installed on this Cache.
 * @member {String} currentFirmwareVersion
 */
CacheUpgradeStatus.prototype['currentFirmwareVersion'] = undefined;

/**
 * Time at which the pending firmware update will automatically be installed on the Cache.
 * @member {Date} firmwareUpdateDeadline
 */
CacheUpgradeStatus.prototype['firmwareUpdateDeadline'] = undefined;

/**
 * True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
 * @member {module:model/CacheUpgradeStatus.FirmwareUpdateStatusEnum} firmwareUpdateStatus
 */
CacheUpgradeStatus.prototype['firmwareUpdateStatus'] = undefined;

/**
 * Time of the last successful firmware update.
 * @member {Date} lastFirmwareUpdate
 */
CacheUpgradeStatus.prototype['lastFirmwareUpdate'] = undefined;

/**
 * When firmwareUpdateAvailable is true, this field holds the version string for the update.
 * @member {String} pendingFirmwareVersion
 */
CacheUpgradeStatus.prototype['pendingFirmwareVersion'] = undefined;





/**
 * Allowed values for the <code>firmwareUpdateStatus</code> property.
 * @enum {String}
 * @readonly
 */
CacheUpgradeStatus['FirmwareUpdateStatusEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "unavailable"
     * @const
     */
    "unavailable": "unavailable"
};



export default CacheUpgradeStatus;

