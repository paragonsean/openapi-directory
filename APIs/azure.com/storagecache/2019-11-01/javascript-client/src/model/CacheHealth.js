/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CacheHealth model module.
 * @module model/CacheHealth
 * @version 2019-11-01
 */
class CacheHealth {
    /**
     * Constructs a new <code>CacheHealth</code>.
     * An indication of Cache health. Gives more information about health than just that related to provisioning.
     * @alias module:model/CacheHealth
     */
    constructor() { 
        
        CacheHealth.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CacheHealth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CacheHealth} obj Optional instance to populate.
     * @return {module:model/CacheHealth} The populated <code>CacheHealth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CacheHealth();

            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('statusDescription')) {
                obj['statusDescription'] = ApiClient.convertToType(data['statusDescription'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CacheHealth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CacheHealth</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['statusDescription'] && !(typeof data['statusDescription'] === 'string' || data['statusDescription'] instanceof String)) {
            throw new Error("Expected the field `statusDescription` to be a primitive type in the JSON string but got " + data['statusDescription']);
        }

        return true;
    }


}



/**
 * List of Cache health states.
 * @member {module:model/CacheHealth.StateEnum} state
 */
CacheHealth.prototype['state'] = undefined;

/**
 * Describes explanation of state.
 * @member {String} statusDescription
 */
CacheHealth.prototype['statusDescription'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CacheHealth['StateEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Healthy"
     * @const
     */
    "Healthy": "Healthy",

    /**
     * value: "Degraded"
     * @const
     */
    "Degraded": "Degraded",

    /**
     * value: "Down"
     * @const
     */
    "Down": "Down",

    /**
     * value: "Transitioning"
     * @const
     */
    "Transitioning": "Transitioning",

    /**
     * value: "Stopping"
     * @const
     */
    "Stopping": "Stopping",

    /**
     * value: "Stopped"
     * @const
     */
    "Stopped": "Stopped",

    /**
     * value: "Upgrading"
     * @const
     */
    "Upgrading": "Upgrading",

    /**
     * value: "Flushing"
     * @const
     */
    "Flushing": "Flushing"
};



export default CacheHealth;

