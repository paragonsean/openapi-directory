/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UsageModelDisplay from './UsageModelDisplay';

/**
 * The UsageModel model module.
 * @module model/UsageModel
 * @version 2019-11-01
 */
class UsageModel {
    /**
     * Constructs a new <code>UsageModel</code>.
     * A usage model.
     * @alias module:model/UsageModel
     */
    constructor() { 
        
        UsageModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UsageModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsageModel} obj Optional instance to populate.
     * @return {module:model/UsageModel} The populated <code>UsageModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsageModel();

            if (data.hasOwnProperty('display')) {
                obj['display'] = UsageModelDisplay.constructFromObject(data['display']);
            }
            if (data.hasOwnProperty('modelName')) {
                obj['modelName'] = ApiClient.convertToType(data['modelName'], 'String');
            }
            if (data.hasOwnProperty('targetType')) {
                obj['targetType'] = ApiClient.convertToType(data['targetType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsageModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsageModel</code>.
     */
    static validateJSON(data) {
        // validate the optional field `display`
        if (data['display']) { // data not null
          UsageModelDisplay.validateJSON(data['display']);
        }
        // ensure the json data is a string
        if (data['modelName'] && !(typeof data['modelName'] === 'string' || data['modelName'] instanceof String)) {
            throw new Error("Expected the field `modelName` to be a primitive type in the JSON string but got " + data['modelName']);
        }
        // ensure the json data is a string
        if (data['targetType'] && !(typeof data['targetType'] === 'string' || data['targetType'] instanceof String)) {
            throw new Error("Expected the field `targetType` to be a primitive type in the JSON string but got " + data['targetType']);
        }

        return true;
    }


}



/**
 * @member {module:model/UsageModelDisplay} display
 */
UsageModel.prototype['display'] = undefined;

/**
 * Non-localized keyword name for this usage model.
 * @member {String} modelName
 */
UsageModel.prototype['modelName'] = undefined;

/**
 * The type of Storage Target to which this model is applicable (only nfs3 as of this version).
 * @member {String} targetType
 */
UsageModel.prototype['targetType'] = undefined;






export default UsageModel;

