# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_sku_capabilities import ResourceSkuCapabilities
from openapi_server.models.resource_sku_location_info import ResourceSkuLocationInfo
from openapi_server.models.restriction import Restriction
from openapi_server import util


class ResourceSku(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[ResourceSkuCapabilities]=None, location_info: List[ResourceSkuLocationInfo]=None, locations: List[str]=None, name: str=None, resource_type: str=None, restrictions: List[Restriction]=None):
        """ResourceSku - a model defined in OpenAPI

        :param capabilities: The capabilities of this ResourceSku.
        :param location_info: The location_info of this ResourceSku.
        :param locations: The locations of this ResourceSku.
        :param name: The name of this ResourceSku.
        :param resource_type: The resource_type of this ResourceSku.
        :param restrictions: The restrictions of this ResourceSku.
        """
        self.openapi_types = {
            'capabilities': List[ResourceSkuCapabilities],
            'location_info': List[ResourceSkuLocationInfo],
            'locations': List[str],
            'name': str,
            'resource_type': str,
            'restrictions': List[Restriction]
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'location_info': 'locationInfo',
            'locations': 'locations',
            'name': 'name',
            'resource_type': 'resourceType',
            'restrictions': 'restrictions'
        }

        self._capabilities = capabilities
        self._location_info = location_info
        self._locations = locations
        self._name = name
        self._resource_type = resource_type
        self._restrictions = restrictions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceSku':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceSku of this ResourceSku.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this ResourceSku.

        A list of capabilities of this SKU, such as throughput or ops/sec.

        :return: The capabilities of this ResourceSku.
        :rtype: List[ResourceSkuCapabilities]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this ResourceSku.

        A list of capabilities of this SKU, such as throughput or ops/sec.

        :param capabilities: The capabilities of this ResourceSku.
        :type capabilities: List[ResourceSkuCapabilities]
        """

        self._capabilities = capabilities

    @property
    def location_info(self):
        """Gets the location_info of this ResourceSku.

        The set of locations that the SKU is available.

        :return: The location_info of this ResourceSku.
        :rtype: List[ResourceSkuLocationInfo]
        """
        return self._location_info

    @location_info.setter
    def location_info(self, location_info):
        """Sets the location_info of this ResourceSku.

        The set of locations that the SKU is available.

        :param location_info: The location_info of this ResourceSku.
        :type location_info: List[ResourceSkuLocationInfo]
        """

        self._location_info = location_info

    @property
    def locations(self):
        """Gets the locations of this ResourceSku.

        The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g., West US, East US, Southeast Asia, etc.).

        :return: The locations of this ResourceSku.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this ResourceSku.

        The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g., West US, East US, Southeast Asia, etc.).

        :param locations: The locations of this ResourceSku.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this ResourceSku.

        The name of this SKU.

        :return: The name of this ResourceSku.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceSku.

        The name of this SKU.

        :param name: The name of this ResourceSku.
        :type name: str
        """

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceSku.

        The type of resource the SKU applies to.

        :return: The resource_type of this ResourceSku.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceSku.

        The type of resource the SKU applies to.

        :param resource_type: The resource_type of this ResourceSku.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def restrictions(self):
        """Gets the restrictions of this ResourceSku.

        The restrictions preventing this SKU from being used. This is empty if there are no restrictions.

        :return: The restrictions of this ResourceSku.
        :rtype: List[Restriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this ResourceSku.

        The restrictions preventing this SKU from being used. This is empty if there are no restrictions.

        :param restrictions: The restrictions of this ResourceSku.
        :type restrictions: List[Restriction]
        """

        self._restrictions = restrictions
