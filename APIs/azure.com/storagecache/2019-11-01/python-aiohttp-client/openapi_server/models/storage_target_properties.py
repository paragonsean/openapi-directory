# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clfs_target import ClfsTarget
from openapi_server.models.namespace_junction import NamespaceJunction
from openapi_server.models.nfs3_target import Nfs3Target
from openapi_server.models.unknown_target import UnknownTarget
from openapi_server import util


class StorageTargetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clfs: ClfsTarget=None, junctions: List[NamespaceJunction]=None, nfs3: Nfs3Target=None, provisioning_state: str=None, target_type: str=None, unknown: UnknownTarget=None):
        """StorageTargetProperties - a model defined in OpenAPI

        :param clfs: The clfs of this StorageTargetProperties.
        :param junctions: The junctions of this StorageTargetProperties.
        :param nfs3: The nfs3 of this StorageTargetProperties.
        :param provisioning_state: The provisioning_state of this StorageTargetProperties.
        :param target_type: The target_type of this StorageTargetProperties.
        :param unknown: The unknown of this StorageTargetProperties.
        """
        self.openapi_types = {
            'clfs': ClfsTarget,
            'junctions': List[NamespaceJunction],
            'nfs3': Nfs3Target,
            'provisioning_state': str,
            'target_type': str,
            'unknown': UnknownTarget
        }

        self.attribute_map = {
            'clfs': 'clfs',
            'junctions': 'junctions',
            'nfs3': 'nfs3',
            'provisioning_state': 'provisioningState',
            'target_type': 'targetType',
            'unknown': 'unknown'
        }

        self._clfs = clfs
        self._junctions = junctions
        self._nfs3 = nfs3
        self._provisioning_state = provisioning_state
        self._target_type = target_type
        self._unknown = unknown

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageTargetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageTarget_properties of this StorageTargetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clfs(self):
        """Gets the clfs of this StorageTargetProperties.


        :return: The clfs of this StorageTargetProperties.
        :rtype: ClfsTarget
        """
        return self._clfs

    @clfs.setter
    def clfs(self, clfs):
        """Sets the clfs of this StorageTargetProperties.


        :param clfs: The clfs of this StorageTargetProperties.
        :type clfs: ClfsTarget
        """

        self._clfs = clfs

    @property
    def junctions(self):
        """Gets the junctions of this StorageTargetProperties.

        List of Cache namespace junctions to target for namespace associations.

        :return: The junctions of this StorageTargetProperties.
        :rtype: List[NamespaceJunction]
        """
        return self._junctions

    @junctions.setter
    def junctions(self, junctions):
        """Sets the junctions of this StorageTargetProperties.

        List of Cache namespace junctions to target for namespace associations.

        :param junctions: The junctions of this StorageTargetProperties.
        :type junctions: List[NamespaceJunction]
        """

        self._junctions = junctions

    @property
    def nfs3(self):
        """Gets the nfs3 of this StorageTargetProperties.


        :return: The nfs3 of this StorageTargetProperties.
        :rtype: Nfs3Target
        """
        return self._nfs3

    @nfs3.setter
    def nfs3(self, nfs3):
        """Sets the nfs3 of this StorageTargetProperties.


        :param nfs3: The nfs3 of this StorageTargetProperties.
        :type nfs3: Nfs3Target
        """

        self._nfs3 = nfs3

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this StorageTargetProperties.

        ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property

        :return: The provisioning_state of this StorageTargetProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this StorageTargetProperties.

        ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property

        :param provisioning_state: The provisioning_state of this StorageTargetProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Failed", "Cancelled", "Creating", "Deleting", "Updating"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def target_type(self):
        """Gets the target_type of this StorageTargetProperties.

        Type of the Storage Target.

        :return: The target_type of this StorageTargetProperties.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this StorageTargetProperties.

        Type of the Storage Target.

        :param target_type: The target_type of this StorageTargetProperties.
        :type target_type: str
        """
        allowed_values = ["nfs3", "clfs", "unknown"]  # noqa: E501
        if target_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_type` ({0}), must be one of {1}"
                .format(target_type, allowed_values)
            )

        self._target_type = target_type

    @property
    def unknown(self):
        """Gets the unknown of this StorageTargetProperties.


        :return: The unknown of this StorageTargetProperties.
        :rtype: UnknownTarget
        """
        return self._unknown

    @unknown.setter
    def unknown(self, unknown):
        """Sets the unknown of this StorageTargetProperties.


        :param unknown: The unknown of this StorageTargetProperties.
        :type unknown: UnknownTarget
        """

        self._unknown = unknown
