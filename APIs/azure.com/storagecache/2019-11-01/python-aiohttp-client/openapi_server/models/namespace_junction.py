# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NamespaceJunction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace_path: str=None, nfs_export: str=None, target_path: str=None):
        """NamespaceJunction - a model defined in OpenAPI

        :param namespace_path: The namespace_path of this NamespaceJunction.
        :param nfs_export: The nfs_export of this NamespaceJunction.
        :param target_path: The target_path of this NamespaceJunction.
        """
        self.openapi_types = {
            'namespace_path': str,
            'nfs_export': str,
            'target_path': str
        }

        self.attribute_map = {
            'namespace_path': 'namespacePath',
            'nfs_export': 'nfsExport',
            'target_path': 'targetPath'
        }

        self._namespace_path = namespace_path
        self._nfs_export = nfs_export
        self._target_path = target_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamespaceJunction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NamespaceJunction of this NamespaceJunction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace_path(self):
        """Gets the namespace_path of this NamespaceJunction.

        Namespace path on a Cache for a Storage Target.

        :return: The namespace_path of this NamespaceJunction.
        :rtype: str
        """
        return self._namespace_path

    @namespace_path.setter
    def namespace_path(self, namespace_path):
        """Sets the namespace_path of this NamespaceJunction.

        Namespace path on a Cache for a Storage Target.

        :param namespace_path: The namespace_path of this NamespaceJunction.
        :type namespace_path: str
        """

        self._namespace_path = namespace_path

    @property
    def nfs_export(self):
        """Gets the nfs_export of this NamespaceJunction.

        NFS export where targetPath exists.

        :return: The nfs_export of this NamespaceJunction.
        :rtype: str
        """
        return self._nfs_export

    @nfs_export.setter
    def nfs_export(self, nfs_export):
        """Sets the nfs_export of this NamespaceJunction.

        NFS export where targetPath exists.

        :param nfs_export: The nfs_export of this NamespaceJunction.
        :type nfs_export: str
        """

        self._nfs_export = nfs_export

    @property
    def target_path(self):
        """Gets the target_path of this NamespaceJunction.

        Path in Storage Target to which namespacePath points.

        :return: The target_path of this NamespaceJunction.
        :rtype: str
        """
        return self._target_path

    @target_path.setter
    def target_path(self, target_path):
        """Sets the target_path of this NamespaceJunction.

        Path in Storage Target to which namespacePath points.

        :param target_path: The target_path of this NamespaceJunction.
        :type target_path: str
        """

        self._target_path = target_path
