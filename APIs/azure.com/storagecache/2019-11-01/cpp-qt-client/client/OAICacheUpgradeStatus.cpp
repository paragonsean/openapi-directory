/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICacheUpgradeStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICacheUpgradeStatus::OAICacheUpgradeStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICacheUpgradeStatus::OAICacheUpgradeStatus() {
    this->initializeModel();
}

OAICacheUpgradeStatus::~OAICacheUpgradeStatus() {}

void OAICacheUpgradeStatus::initializeModel() {

    m_current_firmware_version_isSet = false;
    m_current_firmware_version_isValid = false;

    m_firmware_update_deadline_isSet = false;
    m_firmware_update_deadline_isValid = false;

    m_firmware_update_status_isSet = false;
    m_firmware_update_status_isValid = false;

    m_last_firmware_update_isSet = false;
    m_last_firmware_update_isValid = false;

    m_pending_firmware_version_isSet = false;
    m_pending_firmware_version_isValid = false;
}

void OAICacheUpgradeStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICacheUpgradeStatus::fromJsonObject(QJsonObject json) {

    m_current_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_current_firmware_version, json[QString("currentFirmwareVersion")]);
    m_current_firmware_version_isSet = !json[QString("currentFirmwareVersion")].isNull() && m_current_firmware_version_isValid;

    m_firmware_update_deadline_isValid = ::OpenAPI::fromJsonValue(m_firmware_update_deadline, json[QString("firmwareUpdateDeadline")]);
    m_firmware_update_deadline_isSet = !json[QString("firmwareUpdateDeadline")].isNull() && m_firmware_update_deadline_isValid;

    m_firmware_update_status_isValid = ::OpenAPI::fromJsonValue(m_firmware_update_status, json[QString("firmwareUpdateStatus")]);
    m_firmware_update_status_isSet = !json[QString("firmwareUpdateStatus")].isNull() && m_firmware_update_status_isValid;

    m_last_firmware_update_isValid = ::OpenAPI::fromJsonValue(m_last_firmware_update, json[QString("lastFirmwareUpdate")]);
    m_last_firmware_update_isSet = !json[QString("lastFirmwareUpdate")].isNull() && m_last_firmware_update_isValid;

    m_pending_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_pending_firmware_version, json[QString("pendingFirmwareVersion")]);
    m_pending_firmware_version_isSet = !json[QString("pendingFirmwareVersion")].isNull() && m_pending_firmware_version_isValid;
}

QString OAICacheUpgradeStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICacheUpgradeStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_current_firmware_version_isSet) {
        obj.insert(QString("currentFirmwareVersion"), ::OpenAPI::toJsonValue(m_current_firmware_version));
    }
    if (m_firmware_update_deadline_isSet) {
        obj.insert(QString("firmwareUpdateDeadline"), ::OpenAPI::toJsonValue(m_firmware_update_deadline));
    }
    if (m_firmware_update_status_isSet) {
        obj.insert(QString("firmwareUpdateStatus"), ::OpenAPI::toJsonValue(m_firmware_update_status));
    }
    if (m_last_firmware_update_isSet) {
        obj.insert(QString("lastFirmwareUpdate"), ::OpenAPI::toJsonValue(m_last_firmware_update));
    }
    if (m_pending_firmware_version_isSet) {
        obj.insert(QString("pendingFirmwareVersion"), ::OpenAPI::toJsonValue(m_pending_firmware_version));
    }
    return obj;
}

QString OAICacheUpgradeStatus::getCurrentFirmwareVersion() const {
    return m_current_firmware_version;
}
void OAICacheUpgradeStatus::setCurrentFirmwareVersion(const QString &current_firmware_version) {
    m_current_firmware_version = current_firmware_version;
    m_current_firmware_version_isSet = true;
}

bool OAICacheUpgradeStatus::is_current_firmware_version_Set() const{
    return m_current_firmware_version_isSet;
}

bool OAICacheUpgradeStatus::is_current_firmware_version_Valid() const{
    return m_current_firmware_version_isValid;
}

QDateTime OAICacheUpgradeStatus::getFirmwareUpdateDeadline() const {
    return m_firmware_update_deadline;
}
void OAICacheUpgradeStatus::setFirmwareUpdateDeadline(const QDateTime &firmware_update_deadline) {
    m_firmware_update_deadline = firmware_update_deadline;
    m_firmware_update_deadline_isSet = true;
}

bool OAICacheUpgradeStatus::is_firmware_update_deadline_Set() const{
    return m_firmware_update_deadline_isSet;
}

bool OAICacheUpgradeStatus::is_firmware_update_deadline_Valid() const{
    return m_firmware_update_deadline_isValid;
}

QString OAICacheUpgradeStatus::getFirmwareUpdateStatus() const {
    return m_firmware_update_status;
}
void OAICacheUpgradeStatus::setFirmwareUpdateStatus(const QString &firmware_update_status) {
    m_firmware_update_status = firmware_update_status;
    m_firmware_update_status_isSet = true;
}

bool OAICacheUpgradeStatus::is_firmware_update_status_Set() const{
    return m_firmware_update_status_isSet;
}

bool OAICacheUpgradeStatus::is_firmware_update_status_Valid() const{
    return m_firmware_update_status_isValid;
}

QDateTime OAICacheUpgradeStatus::getLastFirmwareUpdate() const {
    return m_last_firmware_update;
}
void OAICacheUpgradeStatus::setLastFirmwareUpdate(const QDateTime &last_firmware_update) {
    m_last_firmware_update = last_firmware_update;
    m_last_firmware_update_isSet = true;
}

bool OAICacheUpgradeStatus::is_last_firmware_update_Set() const{
    return m_last_firmware_update_isSet;
}

bool OAICacheUpgradeStatus::is_last_firmware_update_Valid() const{
    return m_last_firmware_update_isValid;
}

QString OAICacheUpgradeStatus::getPendingFirmwareVersion() const {
    return m_pending_firmware_version;
}
void OAICacheUpgradeStatus::setPendingFirmwareVersion(const QString &pending_firmware_version) {
    m_pending_firmware_version = pending_firmware_version;
    m_pending_firmware_version_isSet = true;
}

bool OAICacheUpgradeStatus::is_pending_firmware_version_Set() const{
    return m_pending_firmware_version_isSet;
}

bool OAICacheUpgradeStatus::is_pending_firmware_version_Valid() const{
    return m_pending_firmware_version_isValid;
}

bool OAICacheUpgradeStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_update_deadline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_update_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_firmware_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICacheUpgradeStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
