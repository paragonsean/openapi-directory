/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceSku.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceSku::OAIResourceSku(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceSku::OAIResourceSku() {
    this->initializeModel();
}

OAIResourceSku::~OAIResourceSku() {}

void OAIResourceSku::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_location_info_isSet = false;
    m_location_info_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;
}

void OAIResourceSku::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceSku::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_location_info_isValid = ::OpenAPI::fromJsonValue(m_location_info, json[QString("locationInfo")]);
    m_location_info_isSet = !json[QString("locationInfo")].isNull() && m_location_info_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;
}

QString OAIResourceSku::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceSku::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_location_info.size() > 0) {
        obj.insert(QString("locationInfo"), ::OpenAPI::toJsonValue(m_location_info));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_restrictions.size() > 0) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    return obj;
}

QList<OAIResourceSkuCapabilities> OAIResourceSku::getCapabilities() const {
    return m_capabilities;
}
void OAIResourceSku::setCapabilities(const QList<OAIResourceSkuCapabilities> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIResourceSku::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIResourceSku::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QList<OAIResourceSkuLocationInfo> OAIResourceSku::getLocationInfo() const {
    return m_location_info;
}
void OAIResourceSku::setLocationInfo(const QList<OAIResourceSkuLocationInfo> &location_info) {
    m_location_info = location_info;
    m_location_info_isSet = true;
}

bool OAIResourceSku::is_location_info_Set() const{
    return m_location_info_isSet;
}

bool OAIResourceSku::is_location_info_Valid() const{
    return m_location_info_isValid;
}

QList<QString> OAIResourceSku::getLocations() const {
    return m_locations;
}
void OAIResourceSku::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIResourceSku::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIResourceSku::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIResourceSku::getName() const {
    return m_name;
}
void OAIResourceSku::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceSku::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceSku::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIResourceSku::getResourceType() const {
    return m_resource_type;
}
void OAIResourceSku::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIResourceSku::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIResourceSku::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList<OAIRestriction> OAIResourceSku::getRestrictions() const {
    return m_restrictions;
}
void OAIResourceSku::setRestrictions(const QList<OAIRestriction> &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIResourceSku::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIResourceSku::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

bool OAIResourceSku::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceSku::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
