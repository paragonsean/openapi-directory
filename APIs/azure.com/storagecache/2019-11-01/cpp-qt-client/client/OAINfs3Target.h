/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINfs3Target.h
 *
 * An NFSv3 mount point for use as a Storage Target.
 */

#ifndef OAINfs3Target_H
#define OAINfs3Target_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINfs3Target : public OAIObject {
public:
    OAINfs3Target();
    OAINfs3Target(QString json);
    ~OAINfs3Target() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTarget() const;
    void setTarget(const QString &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    QString getUsageModel() const;
    void setUsageModel(const QString &usage_model);
    bool is_usage_model_Set() const;
    bool is_usage_model_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_target;
    bool m_target_isSet;
    bool m_target_isValid;

    QString m_usage_model;
    bool m_usage_model_isSet;
    bool m_usage_model_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINfs3Target)

#endif // OAINfs3Target_H
