/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICacheHealth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICacheHealth::OAICacheHealth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICacheHealth::OAICacheHealth() {
    this->initializeModel();
}

OAICacheHealth::~OAICacheHealth() {}

void OAICacheHealth::initializeModel() {

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_description_isSet = false;
    m_status_description_isValid = false;
}

void OAICacheHealth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICacheHealth::fromJsonObject(QJsonObject json) {

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_description_isValid = ::OpenAPI::fromJsonValue(m_status_description, json[QString("statusDescription")]);
    m_status_description_isSet = !json[QString("statusDescription")].isNull() && m_status_description_isValid;
}

QString OAICacheHealth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICacheHealth::asJsonObject() const {
    QJsonObject obj;
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_description_isSet) {
        obj.insert(QString("statusDescription"), ::OpenAPI::toJsonValue(m_status_description));
    }
    return obj;
}

QString OAICacheHealth::getState() const {
    return m_state;
}
void OAICacheHealth::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICacheHealth::is_state_Set() const{
    return m_state_isSet;
}

bool OAICacheHealth::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICacheHealth::getStatusDescription() const {
    return m_status_description;
}
void OAICacheHealth::setStatusDescription(const QString &status_description) {
    m_status_description = status_description;
    m_status_description_isSet = true;
}

bool OAICacheHealth::is_status_description_Set() const{
    return m_status_description_isSet;
}

bool OAICacheHealth::is_status_description_Valid() const{
    return m_status_description_isValid;
}

bool OAICacheHealth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICacheHealth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
