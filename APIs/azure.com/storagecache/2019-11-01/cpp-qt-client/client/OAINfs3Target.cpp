/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINfs3Target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINfs3Target::OAINfs3Target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINfs3Target::OAINfs3Target() {
    this->initializeModel();
}

OAINfs3Target::~OAINfs3Target() {}

void OAINfs3Target::initializeModel() {

    m_target_isSet = false;
    m_target_isValid = false;

    m_usage_model_isSet = false;
    m_usage_model_isValid = false;
}

void OAINfs3Target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINfs3Target::fromJsonObject(QJsonObject json) {

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_usage_model_isValid = ::OpenAPI::fromJsonValue(m_usage_model, json[QString("usageModel")]);
    m_usage_model_isSet = !json[QString("usageModel")].isNull() && m_usage_model_isValid;
}

QString OAINfs3Target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINfs3Target::asJsonObject() const {
    QJsonObject obj;
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_usage_model_isSet) {
        obj.insert(QString("usageModel"), ::OpenAPI::toJsonValue(m_usage_model));
    }
    return obj;
}

QString OAINfs3Target::getTarget() const {
    return m_target;
}
void OAINfs3Target::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAINfs3Target::is_target_Set() const{
    return m_target_isSet;
}

bool OAINfs3Target::is_target_Valid() const{
    return m_target_isValid;
}

QString OAINfs3Target::getUsageModel() const {
    return m_usage_model;
}
void OAINfs3Target::setUsageModel(const QString &usage_model) {
    m_usage_model = usage_model;
    m_usage_model_isSet = true;
}

bool OAINfs3Target::is_usage_model_Set() const{
    return m_usage_model_isSet;
}

bool OAINfs3Target::is_usage_model_Valid() const{
    return m_usage_model_isValid;
}

bool OAINfs3Target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_model_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINfs3Target::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
