/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceSkuLocationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceSkuLocationInfo::OAIResourceSkuLocationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceSkuLocationInfo::OAIResourceSkuLocationInfo() {
    this->initializeModel();
}

OAIResourceSkuLocationInfo::~OAIResourceSkuLocationInfo() {}

void OAIResourceSkuLocationInfo::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;

    m_zones_isSet = false;
    m_zones_isValid = false;
}

void OAIResourceSkuLocationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceSkuLocationInfo::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_zones_isValid = ::OpenAPI::fromJsonValue(m_zones, json[QString("zones")]);
    m_zones_isSet = !json[QString("zones")].isNull() && m_zones_isValid;
}

QString OAIResourceSkuLocationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceSkuLocationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_zones.size() > 0) {
        obj.insert(QString("zones"), ::OpenAPI::toJsonValue(m_zones));
    }
    return obj;
}

QString OAIResourceSkuLocationInfo::getLocation() const {
    return m_location;
}
void OAIResourceSkuLocationInfo::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIResourceSkuLocationInfo::is_location_Set() const{
    return m_location_isSet;
}

bool OAIResourceSkuLocationInfo::is_location_Valid() const{
    return m_location_isValid;
}

QList<QString> OAIResourceSkuLocationInfo::getZones() const {
    return m_zones;
}
void OAIResourceSkuLocationInfo::setZones(const QList<QString> &zones) {
    m_zones = zones;
    m_zones_isSet = true;
}

bool OAIResourceSkuLocationInfo::is_zones_Set() const{
    return m_zones_isSet;
}

bool OAIResourceSkuLocationInfo::is_zones_Valid() const{
    return m_zones_isValid;
}

bool OAIResourceSkuLocationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zones.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceSkuLocationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
