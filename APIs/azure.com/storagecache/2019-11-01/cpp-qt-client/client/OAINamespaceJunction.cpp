/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespaceJunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespaceJunction::OAINamespaceJunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespaceJunction::OAINamespaceJunction() {
    this->initializeModel();
}

OAINamespaceJunction::~OAINamespaceJunction() {}

void OAINamespaceJunction::initializeModel() {

    m_namespace_path_isSet = false;
    m_namespace_path_isValid = false;

    m_nfs_export_isSet = false;
    m_nfs_export_isValid = false;

    m_target_path_isSet = false;
    m_target_path_isValid = false;
}

void OAINamespaceJunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespaceJunction::fromJsonObject(QJsonObject json) {

    m_namespace_path_isValid = ::OpenAPI::fromJsonValue(m_namespace_path, json[QString("namespacePath")]);
    m_namespace_path_isSet = !json[QString("namespacePath")].isNull() && m_namespace_path_isValid;

    m_nfs_export_isValid = ::OpenAPI::fromJsonValue(m_nfs_export, json[QString("nfsExport")]);
    m_nfs_export_isSet = !json[QString("nfsExport")].isNull() && m_nfs_export_isValid;

    m_target_path_isValid = ::OpenAPI::fromJsonValue(m_target_path, json[QString("targetPath")]);
    m_target_path_isSet = !json[QString("targetPath")].isNull() && m_target_path_isValid;
}

QString OAINamespaceJunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespaceJunction::asJsonObject() const {
    QJsonObject obj;
    if (m_namespace_path_isSet) {
        obj.insert(QString("namespacePath"), ::OpenAPI::toJsonValue(m_namespace_path));
    }
    if (m_nfs_export_isSet) {
        obj.insert(QString("nfsExport"), ::OpenAPI::toJsonValue(m_nfs_export));
    }
    if (m_target_path_isSet) {
        obj.insert(QString("targetPath"), ::OpenAPI::toJsonValue(m_target_path));
    }
    return obj;
}

QString OAINamespaceJunction::getNamespacePath() const {
    return m_namespace_path;
}
void OAINamespaceJunction::setNamespacePath(const QString &namespace_path) {
    m_namespace_path = namespace_path;
    m_namespace_path_isSet = true;
}

bool OAINamespaceJunction::is_namespace_path_Set() const{
    return m_namespace_path_isSet;
}

bool OAINamespaceJunction::is_namespace_path_Valid() const{
    return m_namespace_path_isValid;
}

QString OAINamespaceJunction::getNfsExport() const {
    return m_nfs_export;
}
void OAINamespaceJunction::setNfsExport(const QString &nfs_export) {
    m_nfs_export = nfs_export;
    m_nfs_export_isSet = true;
}

bool OAINamespaceJunction::is_nfs_export_Set() const{
    return m_nfs_export_isSet;
}

bool OAINamespaceJunction::is_nfs_export_Valid() const{
    return m_nfs_export_isValid;
}

QString OAINamespaceJunction::getTargetPath() const {
    return m_target_path;
}
void OAINamespaceJunction::setTargetPath(const QString &target_path) {
    m_target_path = target_path;
    m_target_path_isSet = true;
}

bool OAINamespaceJunction::is_target_path_Set() const{
    return m_target_path_isSet;
}

bool OAINamespaceJunction::is_target_path_Valid() const{
    return m_target_path_isValid;
}

bool OAINamespaceJunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_namespace_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_export_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespaceJunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
