/**
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICachesApi_H
#define OAI_OAICachesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICache.h"
#include "OAICachesListResult.h"
#include "OAICloudError.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICachesApi : public QObject {
    Q_OBJECT

public:
    OAICachesApi(const int timeOut = 0);
    ~OAICachesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  cache_name QString [required]
    * @param[in]  cache OAICache [optional]
    */
    virtual void cachesCreateOrUpdate(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &cache_name, const ::OpenAPI::OptionalParam<OAICache> &cache = ::OpenAPI::OptionalParam<OAICache>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cache_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void cachesDelete(const QString &resource_group_name, const QString &cache_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  cache_name QString [required]
    */
    virtual void cachesFlush(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &cache_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cache_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void cachesGet(const QString &resource_group_name, const QString &cache_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void cachesList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void cachesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  cache_name QString [required]
    */
    virtual void cachesStart(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &cache_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  cache_name QString [required]
    */
    virtual void cachesStop(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &cache_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  cache_name QString [required]
    * @param[in]  cache OAICache [optional]
    */
    virtual void cachesUpdate(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &cache_name, const ::OpenAPI::OptionalParam<OAICache> &cache = ::OpenAPI::OptionalParam<OAICache>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  cache_name QString [required]
    */
    virtual void cachesUpgradeFirmware(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &cache_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cachesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void cachesDeleteCallback(OAIHttpRequestWorker *worker);
    void cachesFlushCallback(OAIHttpRequestWorker *worker);
    void cachesGetCallback(OAIHttpRequestWorker *worker);
    void cachesListCallback(OAIHttpRequestWorker *worker);
    void cachesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void cachesStartCallback(OAIHttpRequestWorker *worker);
    void cachesStopCallback(OAIHttpRequestWorker *worker);
    void cachesUpdateCallback(OAIHttpRequestWorker *worker);
    void cachesUpgradeFirmwareCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cachesCreateOrUpdateSignal(OAICache summary);
    void cachesDeleteSignal(OAIObject summary);
    void cachesFlushSignal(OAIObject summary);
    void cachesGetSignal(OAICache summary);
    void cachesListSignal(OAICachesListResult summary);
    void cachesListByResourceGroupSignal(OAICachesListResult summary);
    void cachesStartSignal(OAIObject summary);
    void cachesStopSignal(OAIObject summary);
    void cachesUpdateSignal(OAICache summary);
    void cachesUpgradeFirmwareSignal(OAIObject summary);


    void cachesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAICache summary);
    void cachesDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cachesFlushSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cachesGetSignalFull(OAIHttpRequestWorker *worker, OAICache summary);
    void cachesListSignalFull(OAIHttpRequestWorker *worker, OAICachesListResult summary);
    void cachesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAICachesListResult summary);
    void cachesStartSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cachesStopSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void cachesUpdateSignalFull(OAIHttpRequestWorker *worker, OAICache summary);
    void cachesUpgradeFirmwareSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use cachesCreateOrUpdateSignalError() instead")
    void cachesCreateOrUpdateSignalE(OAICache summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesCreateOrUpdateSignalError(OAICache summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesDeleteSignalError() instead")
    void cachesDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesFlushSignalError() instead")
    void cachesFlushSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesFlushSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesGetSignalError() instead")
    void cachesGetSignalE(OAICache summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesGetSignalError(OAICache summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesListSignalError() instead")
    void cachesListSignalE(OAICachesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesListSignalError(OAICachesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesListByResourceGroupSignalError() instead")
    void cachesListByResourceGroupSignalE(OAICachesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesListByResourceGroupSignalError(OAICachesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesStartSignalError() instead")
    void cachesStartSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesStartSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesStopSignalError() instead")
    void cachesStopSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesStopSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesUpdateSignalError() instead")
    void cachesUpdateSignalE(OAICache summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesUpdateSignalError(OAICache summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesUpgradeFirmwareSignalError() instead")
    void cachesUpgradeFirmwareSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesUpgradeFirmwareSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cachesCreateOrUpdateSignalErrorFull() instead")
    void cachesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesDeleteSignalErrorFull() instead")
    void cachesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesFlushSignalErrorFull() instead")
    void cachesFlushSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesFlushSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesGetSignalErrorFull() instead")
    void cachesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesListSignalErrorFull() instead")
    void cachesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesListByResourceGroupSignalErrorFull() instead")
    void cachesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesStartSignalErrorFull() instead")
    void cachesStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesStopSignalErrorFull() instead")
    void cachesStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesUpdateSignalErrorFull() instead")
    void cachesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cachesUpgradeFirmwareSignalErrorFull() instead")
    void cachesUpgradeFirmwareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cachesUpgradeFirmwareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
