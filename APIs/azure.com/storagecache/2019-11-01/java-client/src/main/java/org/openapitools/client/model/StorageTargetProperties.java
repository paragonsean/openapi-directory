/*
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClfsTarget;
import org.openapitools.client.model.NamespaceJunction;
import org.openapitools.client.model.Nfs3Target;
import org.openapitools.client.model.UnknownTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the Storage Target.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:27.690488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageTargetProperties {
  public static final String SERIALIZED_NAME_CLFS = "clfs";
  @SerializedName(SERIALIZED_NAME_CLFS)
  private ClfsTarget clfs;

  public static final String SERIALIZED_NAME_JUNCTIONS = "junctions";
  @SerializedName(SERIALIZED_NAME_JUNCTIONS)
  private List<NamespaceJunction> junctions = new ArrayList<>();

  public static final String SERIALIZED_NAME_NFS3 = "nfs3";
  @SerializedName(SERIALIZED_NAME_NFS3)
  private Nfs3Target nfs3;

  /**
   * ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELLED("Cancelled"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    UPDATING("Updating");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  /**
   * Type of the Storage Target.
   */
  @JsonAdapter(TargetTypeEnum.Adapter.class)
  public enum TargetTypeEnum {
    NFS3("nfs3"),
    
    CLFS("clfs"),
    
    UNKNOWN("unknown");

    private String value;

    TargetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetTypeEnum fromValue(String value) {
      for (TargetTypeEnum b : TargetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_TYPE = "targetType";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPE)
  private TargetTypeEnum targetType;

  public static final String SERIALIZED_NAME_UNKNOWN = "unknown";
  @SerializedName(SERIALIZED_NAME_UNKNOWN)
  private UnknownTarget unknown;

  public StorageTargetProperties() {
  }

  public StorageTargetProperties clfs(ClfsTarget clfs) {
    this.clfs = clfs;
    return this;
  }

  /**
   * Get clfs
   * @return clfs
   */
  @javax.annotation.Nullable
  public ClfsTarget getClfs() {
    return clfs;
  }

  public void setClfs(ClfsTarget clfs) {
    this.clfs = clfs;
  }


  public StorageTargetProperties junctions(List<NamespaceJunction> junctions) {
    this.junctions = junctions;
    return this;
  }

  public StorageTargetProperties addJunctionsItem(NamespaceJunction junctionsItem) {
    if (this.junctions == null) {
      this.junctions = new ArrayList<>();
    }
    this.junctions.add(junctionsItem);
    return this;
  }

  /**
   * List of Cache namespace junctions to target for namespace associations.
   * @return junctions
   */
  @javax.annotation.Nullable
  public List<NamespaceJunction> getJunctions() {
    return junctions;
  }

  public void setJunctions(List<NamespaceJunction> junctions) {
    this.junctions = junctions;
  }


  public StorageTargetProperties nfs3(Nfs3Target nfs3) {
    this.nfs3 = nfs3;
    return this;
  }

  /**
   * Get nfs3
   * @return nfs3
   */
  @javax.annotation.Nullable
  public Nfs3Target getNfs3() {
    return nfs3;
  }

  public void setNfs3(Nfs3Target nfs3) {
    this.nfs3 = nfs3;
  }


  public StorageTargetProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  public StorageTargetProperties targetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
    return this;
  }

  /**
   * Type of the Storage Target.
   * @return targetType
   */
  @javax.annotation.Nullable
  public TargetTypeEnum getTargetType() {
    return targetType;
  }

  public void setTargetType(TargetTypeEnum targetType) {
    this.targetType = targetType;
  }


  public StorageTargetProperties unknown(UnknownTarget unknown) {
    this.unknown = unknown;
    return this;
  }

  /**
   * Get unknown
   * @return unknown
   */
  @javax.annotation.Nullable
  public UnknownTarget getUnknown() {
    return unknown;
  }

  public void setUnknown(UnknownTarget unknown) {
    this.unknown = unknown;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageTargetProperties storageTargetProperties = (StorageTargetProperties) o;
    return Objects.equals(this.clfs, storageTargetProperties.clfs) &&
        Objects.equals(this.junctions, storageTargetProperties.junctions) &&
        Objects.equals(this.nfs3, storageTargetProperties.nfs3) &&
        Objects.equals(this.provisioningState, storageTargetProperties.provisioningState) &&
        Objects.equals(this.targetType, storageTargetProperties.targetType) &&
        Objects.equals(this.unknown, storageTargetProperties.unknown);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clfs, junctions, nfs3, provisioningState, targetType, unknown);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageTargetProperties {\n");
    sb.append("    clfs: ").append(toIndentedString(clfs)).append("\n");
    sb.append("    junctions: ").append(toIndentedString(junctions)).append("\n");
    sb.append("    nfs3: ").append(toIndentedString(nfs3)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("    unknown: ").append(toIndentedString(unknown)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clfs");
    openapiFields.add("junctions");
    openapiFields.add("nfs3");
    openapiFields.add("provisioningState");
    openapiFields.add("targetType");
    openapiFields.add("unknown");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageTargetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageTargetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageTargetProperties is not found in the empty JSON string", StorageTargetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageTargetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageTargetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clfs`
      if (jsonObj.get("clfs") != null && !jsonObj.get("clfs").isJsonNull()) {
        ClfsTarget.validateJsonElement(jsonObj.get("clfs"));
      }
      if (jsonObj.get("junctions") != null && !jsonObj.get("junctions").isJsonNull()) {
        JsonArray jsonArrayjunctions = jsonObj.getAsJsonArray("junctions");
        if (jsonArrayjunctions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("junctions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `junctions` to be an array in the JSON string but got `%s`", jsonObj.get("junctions").toString()));
          }

          // validate the optional field `junctions` (array)
          for (int i = 0; i < jsonArrayjunctions.size(); i++) {
            NamespaceJunction.validateJsonElement(jsonArrayjunctions.get(i));
          };
        }
      }
      // validate the optional field `nfs3`
      if (jsonObj.get("nfs3") != null && !jsonObj.get("nfs3").isJsonNull()) {
        Nfs3Target.validateJsonElement(jsonObj.get("nfs3"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("targetType") != null && !jsonObj.get("targetType").isJsonNull()) && !jsonObj.get("targetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetType").toString()));
      }
      // validate the optional field `targetType`
      if (jsonObj.get("targetType") != null && !jsonObj.get("targetType").isJsonNull()) {
        TargetTypeEnum.validateJsonElement(jsonObj.get("targetType"));
      }
      // validate the optional field `unknown`
      if (jsonObj.get("unknown") != null && !jsonObj.get("unknown").isJsonNull()) {
        UnknownTarget.validateJsonElement(jsonObj.get("unknown"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageTargetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageTargetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageTargetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageTargetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageTargetProperties>() {
           @Override
           public void write(JsonWriter out, StorageTargetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageTargetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageTargetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageTargetProperties
   * @throws IOException if the JSON string is invalid with respect to StorageTargetProperties
   */
  public static StorageTargetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageTargetProperties.class);
  }

  /**
   * Convert an instance of StorageTargetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

