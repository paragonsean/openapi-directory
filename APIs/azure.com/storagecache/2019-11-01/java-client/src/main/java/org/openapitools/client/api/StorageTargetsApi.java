/*
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.StorageTarget;
import org.openapitools.client.model.StorageTargetsResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageTargetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StorageTargetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageTargetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storageTargetsCreateOrUpdate
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of the Storage Target. (required)
     * @param storagetarget Object containing the definition of a Storage Target. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage Target has been created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Storage Target creation or update has been initiated. Poll the new Storage Target&#39;s provisioningState property to monitor creation progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageTargetsCreateOrUpdateCall(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, StorageTarget storagetarget, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storagetarget;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "cacheName" + "}", localVarApiClient.escapeString(cacheName.toString()))
            .replace("{" + "storageTargetName" + "}", localVarApiClient.escapeString(storageTargetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageTargetsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, StorageTarget storagetarget, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageTargetsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageTargetsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageTargetsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'cacheName' is set
        if (cacheName == null) {
            throw new ApiException("Missing the required parameter 'cacheName' when calling storageTargetsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'storageTargetName' is set
        if (storageTargetName == null) {
            throw new ApiException("Missing the required parameter 'storageTargetName' when calling storageTargetsCreateOrUpdate(Async)");
        }

        return storageTargetsCreateOrUpdateCall(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, storagetarget, _callback);

    }

    /**
     * 
     * Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of the Storage Target. (required)
     * @param storagetarget Object containing the definition of a Storage Target. (optional)
     * @return StorageTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage Target has been created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Storage Target creation or update has been initiated. Poll the new Storage Target&#39;s provisioningState property to monitor creation progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageTarget storageTargetsCreateOrUpdate(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, StorageTarget storagetarget) throws ApiException {
        ApiResponse<StorageTarget> localVarResp = storageTargetsCreateOrUpdateWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, storagetarget);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of the Storage Target. (required)
     * @param storagetarget Object containing the definition of a Storage Target. (optional)
     * @return ApiResponse&lt;StorageTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage Target has been created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Storage Target creation or update has been initiated. Poll the new Storage Target&#39;s provisioningState property to monitor creation progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageTarget> storageTargetsCreateOrUpdateWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, StorageTarget storagetarget) throws ApiException {
        okhttp3.Call localVarCall = storageTargetsCreateOrUpdateValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, storagetarget, null);
        Type localVarReturnType = new TypeToken<StorageTarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache is healthy again.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of the Storage Target. (required)
     * @param storagetarget Object containing the definition of a Storage Target. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage Target has been created or updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Storage Target creation or update has been initiated. Poll the new Storage Target&#39;s provisioningState property to monitor creation progress. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageTargetsCreateOrUpdateAsync(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, StorageTarget storagetarget, final ApiCallback<StorageTarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageTargetsCreateOrUpdateValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, storagetarget, _callback);
        Type localVarReturnType = new TypeToken<StorageTarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageTargetsDelete
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of Storage Target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage target deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Started the Storage Target&#39;s deletion. Poll the Cache&#39;s Storage Targets to monitor. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Storage Target deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageTargetsDeleteCall(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "cacheName" + "}", localVarApiClient.escapeString(cacheName.toString()))
            .replace("{" + "storageTargetName" + "}", localVarApiClient.escapeString(storageTargetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageTargetsDeleteValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageTargetsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageTargetsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageTargetsDelete(Async)");
        }

        // verify the required parameter 'cacheName' is set
        if (cacheName == null) {
            throw new ApiException("Missing the required parameter 'cacheName' when calling storageTargetsDelete(Async)");
        }

        // verify the required parameter 'storageTargetName' is set
        if (storageTargetName == null) {
            throw new ApiException("Missing the required parameter 'storageTargetName' when calling storageTargetsDelete(Async)");
        }

        return storageTargetsDeleteCall(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, _callback);

    }

    /**
     * 
     * Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be flushed before the Storage Target will be deleted.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of Storage Target. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage target deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Started the Storage Target&#39;s deletion. Poll the Cache&#39;s Storage Targets to monitor. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Storage Target deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Object storageTargetsDelete(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName) throws ApiException {
        ApiResponse<Object> localVarResp = storageTargetsDeleteWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be flushed before the Storage Target will be deleted.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of Storage Target. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage target deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Started the Storage Target&#39;s deletion. Poll the Cache&#39;s Storage Targets to monitor. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Storage Target deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> storageTargetsDeleteWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName) throws ApiException {
        okhttp3.Call localVarCall = storageTargetsDeleteValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be flushed before the Storage Target will be deleted.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of Storage Target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Storage target deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Started the Storage Target&#39;s deletion. Poll the Cache&#39;s Storage Targets to monitor. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Storage Target deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageTargetsDeleteAsync(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageTargetsDeleteValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageTargetsGet
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of the Storage Target. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Storage Target object corresponding to storageTargetName. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageTargetsGetCall(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "cacheName" + "}", localVarApiClient.escapeString(cacheName.toString()))
            .replace("{" + "storageTargetName" + "}", localVarApiClient.escapeString(storageTargetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageTargetsGetValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageTargetsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageTargetsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageTargetsGet(Async)");
        }

        // verify the required parameter 'cacheName' is set
        if (cacheName == null) {
            throw new ApiException("Missing the required parameter 'cacheName' when calling storageTargetsGet(Async)");
        }

        // verify the required parameter 'storageTargetName' is set
        if (storageTargetName == null) {
            throw new ApiException("Missing the required parameter 'storageTargetName' when calling storageTargetsGet(Async)");
        }

        return storageTargetsGetCall(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, _callback);

    }

    /**
     * 
     * Returns a Storage Target from a Cache.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of the Storage Target. (required)
     * @return StorageTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Storage Target object corresponding to storageTargetName. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageTarget storageTargetsGet(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName) throws ApiException {
        ApiResponse<StorageTarget> localVarResp = storageTargetsGetWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a Storage Target from a Cache.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of the Storage Target. (required)
     * @return ApiResponse&lt;StorageTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Storage Target object corresponding to storageTargetName. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageTarget> storageTargetsGetWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName) throws ApiException {
        okhttp3.Call localVarCall = storageTargetsGetValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, null);
        Type localVarReturnType = new TypeToken<StorageTarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a Storage Target from a Cache.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param storageTargetName Name of the Storage Target. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Storage Target object corresponding to storageTargetName. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageTargetsGetAsync(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, String storageTargetName, final ApiCallback<StorageTarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageTargetsGetValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, cacheName, storageTargetName, _callback);
        Type localVarReturnType = new TypeToken<StorageTarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageTargetsListByCache
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Storage Targets defined by cacheName. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageTargetsListByCacheCall(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "cacheName" + "}", localVarApiClient.escapeString(cacheName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageTargetsListByCacheValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageTargetsListByCache(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageTargetsListByCache(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageTargetsListByCache(Async)");
        }

        // verify the required parameter 'cacheName' is set
        if (cacheName == null) {
            throw new ApiException("Missing the required parameter 'cacheName' when calling storageTargetsListByCache(Async)");
        }

        return storageTargetsListByCacheCall(resourceGroupName, apiVersion, subscriptionId, cacheName, _callback);

    }

    /**
     * 
     * Returns a list of Storage Targets for the specified Cache.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @return StorageTargetsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Storage Targets defined by cacheName. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageTargetsResult storageTargetsListByCache(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName) throws ApiException {
        ApiResponse<StorageTargetsResult> localVarResp = storageTargetsListByCacheWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, cacheName);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of Storage Targets for the specified Cache.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @return ApiResponse&lt;StorageTargetsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Storage Targets defined by cacheName. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageTargetsResult> storageTargetsListByCacheWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName) throws ApiException {
        okhttp3.Call localVarCall = storageTargetsListByCacheValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, cacheName, null);
        Type localVarReturnType = new TypeToken<StorageTargetsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of Storage Targets for the specified Cache.
     * @param resourceGroupName Target resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param cacheName Name of Cache. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Storage Targets defined by cacheName. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageTargetsListByCacheAsync(String resourceGroupName, String apiVersion, String subscriptionId, String cacheName, final ApiCallback<StorageTargetsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageTargetsListByCacheValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, cacheName, _callback);
        Type localVarReturnType = new TypeToken<StorageTargetsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
