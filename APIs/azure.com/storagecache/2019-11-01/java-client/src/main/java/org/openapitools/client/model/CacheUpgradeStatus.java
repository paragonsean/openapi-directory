/*
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties describing the software upgrade state of the Cache.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:27.690488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CacheUpgradeStatus {
  public static final String SERIALIZED_NAME_CURRENT_FIRMWARE_VERSION = "currentFirmwareVersion";
  @SerializedName(SERIALIZED_NAME_CURRENT_FIRMWARE_VERSION)
  private String currentFirmwareVersion;

  public static final String SERIALIZED_NAME_FIRMWARE_UPDATE_DEADLINE = "firmwareUpdateDeadline";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_UPDATE_DEADLINE)
  private OffsetDateTime firmwareUpdateDeadline;

  /**
   * True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
   */
  @JsonAdapter(FirmwareUpdateStatusEnum.Adapter.class)
  public enum FirmwareUpdateStatusEnum {
    AVAILABLE("available"),
    
    UNAVAILABLE("unavailable");

    private String value;

    FirmwareUpdateStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FirmwareUpdateStatusEnum fromValue(String value) {
      for (FirmwareUpdateStatusEnum b : FirmwareUpdateStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FirmwareUpdateStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FirmwareUpdateStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FirmwareUpdateStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FirmwareUpdateStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FirmwareUpdateStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIRMWARE_UPDATE_STATUS = "firmwareUpdateStatus";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_UPDATE_STATUS)
  private FirmwareUpdateStatusEnum firmwareUpdateStatus;

  public static final String SERIALIZED_NAME_LAST_FIRMWARE_UPDATE = "lastFirmwareUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_FIRMWARE_UPDATE)
  private OffsetDateTime lastFirmwareUpdate;

  public static final String SERIALIZED_NAME_PENDING_FIRMWARE_VERSION = "pendingFirmwareVersion";
  @SerializedName(SERIALIZED_NAME_PENDING_FIRMWARE_VERSION)
  private String pendingFirmwareVersion;

  public CacheUpgradeStatus() {
  }

  public CacheUpgradeStatus(
     String currentFirmwareVersion, 
     OffsetDateTime firmwareUpdateDeadline, 
     FirmwareUpdateStatusEnum firmwareUpdateStatus, 
     OffsetDateTime lastFirmwareUpdate, 
     String pendingFirmwareVersion
  ) {
    this();
    this.currentFirmwareVersion = currentFirmwareVersion;
    this.firmwareUpdateDeadline = firmwareUpdateDeadline;
    this.firmwareUpdateStatus = firmwareUpdateStatus;
    this.lastFirmwareUpdate = lastFirmwareUpdate;
    this.pendingFirmwareVersion = pendingFirmwareVersion;
  }

  /**
   * Version string of the firmware currently installed on this Cache.
   * @return currentFirmwareVersion
   */
  @javax.annotation.Nullable
  public String getCurrentFirmwareVersion() {
    return currentFirmwareVersion;
  }



  /**
   * Time at which the pending firmware update will automatically be installed on the Cache.
   * @return firmwareUpdateDeadline
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFirmwareUpdateDeadline() {
    return firmwareUpdateDeadline;
  }



  /**
   * True if there is a firmware update ready to install on this Cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
   * @return firmwareUpdateStatus
   */
  @javax.annotation.Nullable
  public FirmwareUpdateStatusEnum getFirmwareUpdateStatus() {
    return firmwareUpdateStatus;
  }



  /**
   * Time of the last successful firmware update.
   * @return lastFirmwareUpdate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastFirmwareUpdate() {
    return lastFirmwareUpdate;
  }



  /**
   * When firmwareUpdateAvailable is true, this field holds the version string for the update.
   * @return pendingFirmwareVersion
   */
  @javax.annotation.Nullable
  public String getPendingFirmwareVersion() {
    return pendingFirmwareVersion;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CacheUpgradeStatus cacheUpgradeStatus = (CacheUpgradeStatus) o;
    return Objects.equals(this.currentFirmwareVersion, cacheUpgradeStatus.currentFirmwareVersion) &&
        Objects.equals(this.firmwareUpdateDeadline, cacheUpgradeStatus.firmwareUpdateDeadline) &&
        Objects.equals(this.firmwareUpdateStatus, cacheUpgradeStatus.firmwareUpdateStatus) &&
        Objects.equals(this.lastFirmwareUpdate, cacheUpgradeStatus.lastFirmwareUpdate) &&
        Objects.equals(this.pendingFirmwareVersion, cacheUpgradeStatus.pendingFirmwareVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentFirmwareVersion, firmwareUpdateDeadline, firmwareUpdateStatus, lastFirmwareUpdate, pendingFirmwareVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CacheUpgradeStatus {\n");
    sb.append("    currentFirmwareVersion: ").append(toIndentedString(currentFirmwareVersion)).append("\n");
    sb.append("    firmwareUpdateDeadline: ").append(toIndentedString(firmwareUpdateDeadline)).append("\n");
    sb.append("    firmwareUpdateStatus: ").append(toIndentedString(firmwareUpdateStatus)).append("\n");
    sb.append("    lastFirmwareUpdate: ").append(toIndentedString(lastFirmwareUpdate)).append("\n");
    sb.append("    pendingFirmwareVersion: ").append(toIndentedString(pendingFirmwareVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentFirmwareVersion");
    openapiFields.add("firmwareUpdateDeadline");
    openapiFields.add("firmwareUpdateStatus");
    openapiFields.add("lastFirmwareUpdate");
    openapiFields.add("pendingFirmwareVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CacheUpgradeStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CacheUpgradeStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CacheUpgradeStatus is not found in the empty JSON string", CacheUpgradeStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CacheUpgradeStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CacheUpgradeStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currentFirmwareVersion") != null && !jsonObj.get("currentFirmwareVersion").isJsonNull()) && !jsonObj.get("currentFirmwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentFirmwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentFirmwareVersion").toString()));
      }
      if ((jsonObj.get("firmwareUpdateStatus") != null && !jsonObj.get("firmwareUpdateStatus").isJsonNull()) && !jsonObj.get("firmwareUpdateStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmwareUpdateStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmwareUpdateStatus").toString()));
      }
      // validate the optional field `firmwareUpdateStatus`
      if (jsonObj.get("firmwareUpdateStatus") != null && !jsonObj.get("firmwareUpdateStatus").isJsonNull()) {
        FirmwareUpdateStatusEnum.validateJsonElement(jsonObj.get("firmwareUpdateStatus"));
      }
      if ((jsonObj.get("pendingFirmwareVersion") != null && !jsonObj.get("pendingFirmwareVersion").isJsonNull()) && !jsonObj.get("pendingFirmwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingFirmwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pendingFirmwareVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CacheUpgradeStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CacheUpgradeStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CacheUpgradeStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CacheUpgradeStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<CacheUpgradeStatus>() {
           @Override
           public void write(JsonWriter out, CacheUpgradeStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CacheUpgradeStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CacheUpgradeStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CacheUpgradeStatus
   * @throws IOException if the JSON string is invalid with respect to CacheUpgradeStatus
   */
  public static CacheUpgradeStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CacheUpgradeStatus.class);
  }

  /**
   * Convert an instance of CacheUpgradeStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

