/*
 * Storage Cache Mgmt Client
 * A Storage Cache provides scalable caching service for NAS clients, serving data from either NFSv3 or Blob at-rest storage (referred to as \"Storage Targets\"). These operations allow you to manage Caches.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Cache;
import org.openapitools.client.model.CachesListResult;
import org.openapitools.client.model.CloudError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CachesApi
 */
@Disabled
public class CachesApiTest {

    private final CachesApi api = new CachesApi();

    /**
     * Create or update a Cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cachesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        Cache cache = null;
        Cache response = api.cachesCreateOrUpdate(resourceGroupName, apiVersion, subscriptionId, cacheName, cache);
        // TODO: test validations
    }

    /**
     * Schedules a Cache for deletion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cachesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String cacheName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Object response = api.cachesDelete(resourceGroupName, cacheName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will see errors returned until the flush is complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cachesFlushTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        Object response = api.cachesFlush(resourceGroupName, apiVersion, subscriptionId, cacheName);
        // TODO: test validations
    }

    /**
     * Returns a Cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cachesGetTest() throws ApiException {
        String resourceGroupName = null;
        String cacheName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Cache response = api.cachesGet(resourceGroupName, cacheName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns all Caches the user has access to under a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cachesListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        CachesListResult response = api.cachesList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns all Caches the user has access to under a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cachesListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        CachesListResult response = api.cachesListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Tells a Stopped state Cache to transition to Active state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cachesStartTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        Object response = api.cachesStart(resourceGroupName, apiVersion, subscriptionId, cacheName);
        // TODO: test validations
    }

    /**
     * Tells an Active Cache to transition to Stopped state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cachesStopTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        Object response = api.cachesStop(resourceGroupName, apiVersion, subscriptionId, cacheName);
        // TODO: test validations
    }

    /**
     * Update a Cache instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cachesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        Cache cache = null;
        Cache response = api.cachesUpdate(resourceGroupName, apiVersion, subscriptionId, cacheName, cache);
        // TODO: test validations
    }

    /**
     * Upgrade a Cache&#39;s firmware if a new version is available. Otherwise, this operation has no effect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cachesUpgradeFirmwareTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String cacheName = null;
        Object response = api.cachesUpgradeFirmware(resourceGroupName, apiVersion, subscriptionId, cacheName);
        // TODO: test validations
    }

}
