/**
 * DevSpacesManagement
 * Dev Spaces REST API
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIControllersApi_H
#define OAI_OAIControllersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIController.h"
#include "OAIControllerConnectionDetailsList.h"
#include "OAIControllerList.h"
#include "OAIControllerUpdateParameters.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIControllersApi : public QObject {
    Q_OBJECT

public:
    OAIControllersApi(const int timeOut = 0);
    ~OAIControllersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  controller OAIController [required]
    */
    virtual void controllersCreate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &name, const OAIController &controller);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    */
    virtual void controllersDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    */
    virtual void controllersGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void controllersList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void controllersListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    */
    virtual void controllersListConnectionDetails(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  controller_update_parameters OAIControllerUpdateParameters [required]
    */
    virtual void controllersUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &name, const OAIControllerUpdateParameters &controller_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void controllersCreateCallback(OAIHttpRequestWorker *worker);
    void controllersDeleteCallback(OAIHttpRequestWorker *worker);
    void controllersGetCallback(OAIHttpRequestWorker *worker);
    void controllersListCallback(OAIHttpRequestWorker *worker);
    void controllersListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void controllersListConnectionDetailsCallback(OAIHttpRequestWorker *worker);
    void controllersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void controllersCreateSignal(OAIController summary);
    void controllersDeleteSignal();
    void controllersGetSignal(OAIController summary);
    void controllersListSignal(OAIControllerList summary);
    void controllersListByResourceGroupSignal(OAIControllerList summary);
    void controllersListConnectionDetailsSignal(OAIControllerConnectionDetailsList summary);
    void controllersUpdateSignal(OAIController summary);


    void controllersCreateSignalFull(OAIHttpRequestWorker *worker, OAIController summary);
    void controllersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void controllersGetSignalFull(OAIHttpRequestWorker *worker, OAIController summary);
    void controllersListSignalFull(OAIHttpRequestWorker *worker, OAIControllerList summary);
    void controllersListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIControllerList summary);
    void controllersListConnectionDetailsSignalFull(OAIHttpRequestWorker *worker, OAIControllerConnectionDetailsList summary);
    void controllersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIController summary);

    Q_DECL_DEPRECATED_X("Use controllersCreateSignalError() instead")
    void controllersCreateSignalE(OAIController summary, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersCreateSignalError(OAIController summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersDeleteSignalError() instead")
    void controllersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void controllersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersGetSignalError() instead")
    void controllersGetSignalE(OAIController summary, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersGetSignalError(OAIController summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersListSignalError() instead")
    void controllersListSignalE(OAIControllerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersListSignalError(OAIControllerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersListByResourceGroupSignalError() instead")
    void controllersListByResourceGroupSignalE(OAIControllerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersListByResourceGroupSignalError(OAIControllerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersListConnectionDetailsSignalError() instead")
    void controllersListConnectionDetailsSignalE(OAIControllerConnectionDetailsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersListConnectionDetailsSignalError(OAIControllerConnectionDetailsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersUpdateSignalError() instead")
    void controllersUpdateSignalE(OAIController summary, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersUpdateSignalError(OAIController summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use controllersCreateSignalErrorFull() instead")
    void controllersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersDeleteSignalErrorFull() instead")
    void controllersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersGetSignalErrorFull() instead")
    void controllersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersListSignalErrorFull() instead")
    void controllersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersListByResourceGroupSignalErrorFull() instead")
    void controllersListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersListConnectionDetailsSignalErrorFull() instead")
    void controllersListConnectionDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersListConnectionDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use controllersUpdateSignalErrorFull() instead")
    void controllersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void controllersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
