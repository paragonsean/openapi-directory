/*
 * DevSpacesManagement
 * Dev Spaces REST API
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ControllerProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:12:08.674015-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ControllerProperties {
  public static final String SERIALIZED_NAME_DATA_PLANE_FQDN = "dataPlaneFqdn";
  @SerializedName(SERIALIZED_NAME_DATA_PLANE_FQDN)
  private String dataPlaneFqdn;

  public static final String SERIALIZED_NAME_HOST_SUFFIX = "hostSuffix";
  @SerializedName(SERIALIZED_NAME_HOST_SUFFIX)
  private String hostSuffix;

  /**
   * Provisioning state of the Azure Dev Spaces Controller.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled"),
    
    UPDATING("Updating"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    DELETED("Deleted");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_TARGET_CONTAINER_HOST_CREDENTIALS_BASE64 = "targetContainerHostCredentialsBase64";
  @SerializedName(SERIALIZED_NAME_TARGET_CONTAINER_HOST_CREDENTIALS_BASE64)
  private String targetContainerHostCredentialsBase64;

  public static final String SERIALIZED_NAME_TARGET_CONTAINER_HOST_RESOURCE_ID = "targetContainerHostResourceId";
  @SerializedName(SERIALIZED_NAME_TARGET_CONTAINER_HOST_RESOURCE_ID)
  private String targetContainerHostResourceId;

  public ControllerProperties() {
  }

  public ControllerProperties(
     String dataPlaneFqdn, 
     String hostSuffix, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.dataPlaneFqdn = dataPlaneFqdn;
    this.hostSuffix = hostSuffix;
    this.provisioningState = provisioningState;
  }

  /**
   * DNS name for accessing DataPlane services
   * @return dataPlaneFqdn
   */
  @javax.annotation.Nullable
  public String getDataPlaneFqdn() {
    return dataPlaneFqdn;
  }



  /**
   * DNS suffix for public endpoints running in the Azure Dev Spaces Controller.
   * @return hostSuffix
   */
  @javax.annotation.Nullable
  public String getHostSuffix() {
    return hostSuffix;
  }



  /**
   * Provisioning state of the Azure Dev Spaces Controller.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public ControllerProperties targetContainerHostCredentialsBase64(String targetContainerHostCredentialsBase64) {
    this.targetContainerHostCredentialsBase64 = targetContainerHostCredentialsBase64;
    return this;
  }

  /**
   * Credentials of the target container host (base64).
   * @return targetContainerHostCredentialsBase64
   */
  @javax.annotation.Nonnull
  public String getTargetContainerHostCredentialsBase64() {
    return targetContainerHostCredentialsBase64;
  }

  public void setTargetContainerHostCredentialsBase64(String targetContainerHostCredentialsBase64) {
    this.targetContainerHostCredentialsBase64 = targetContainerHostCredentialsBase64;
  }


  public ControllerProperties targetContainerHostResourceId(String targetContainerHostResourceId) {
    this.targetContainerHostResourceId = targetContainerHostResourceId;
    return this;
  }

  /**
   * Resource ID of the target container host
   * @return targetContainerHostResourceId
   */
  @javax.annotation.Nonnull
  public String getTargetContainerHostResourceId() {
    return targetContainerHostResourceId;
  }

  public void setTargetContainerHostResourceId(String targetContainerHostResourceId) {
    this.targetContainerHostResourceId = targetContainerHostResourceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControllerProperties controllerProperties = (ControllerProperties) o;
    return Objects.equals(this.dataPlaneFqdn, controllerProperties.dataPlaneFqdn) &&
        Objects.equals(this.hostSuffix, controllerProperties.hostSuffix) &&
        Objects.equals(this.provisioningState, controllerProperties.provisioningState) &&
        Objects.equals(this.targetContainerHostCredentialsBase64, controllerProperties.targetContainerHostCredentialsBase64) &&
        Objects.equals(this.targetContainerHostResourceId, controllerProperties.targetContainerHostResourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataPlaneFqdn, hostSuffix, provisioningState, targetContainerHostCredentialsBase64, targetContainerHostResourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControllerProperties {\n");
    sb.append("    dataPlaneFqdn: ").append(toIndentedString(dataPlaneFqdn)).append("\n");
    sb.append("    hostSuffix: ").append(toIndentedString(hostSuffix)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    targetContainerHostCredentialsBase64: ").append(toIndentedString(targetContainerHostCredentialsBase64)).append("\n");
    sb.append("    targetContainerHostResourceId: ").append(toIndentedString(targetContainerHostResourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataPlaneFqdn");
    openapiFields.add("hostSuffix");
    openapiFields.add("provisioningState");
    openapiFields.add("targetContainerHostCredentialsBase64");
    openapiFields.add("targetContainerHostResourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("targetContainerHostCredentialsBase64");
    openapiRequiredFields.add("targetContainerHostResourceId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ControllerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ControllerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ControllerProperties is not found in the empty JSON string", ControllerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ControllerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ControllerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ControllerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataPlaneFqdn") != null && !jsonObj.get("dataPlaneFqdn").isJsonNull()) && !jsonObj.get("dataPlaneFqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPlaneFqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPlaneFqdn").toString()));
      }
      if ((jsonObj.get("hostSuffix") != null && !jsonObj.get("hostSuffix").isJsonNull()) && !jsonObj.get("hostSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostSuffix").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if (!jsonObj.get("targetContainerHostCredentialsBase64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetContainerHostCredentialsBase64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetContainerHostCredentialsBase64").toString()));
      }
      if (!jsonObj.get("targetContainerHostResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetContainerHostResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetContainerHostResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ControllerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ControllerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ControllerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ControllerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ControllerProperties>() {
           @Override
           public void write(JsonWriter out, ControllerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ControllerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ControllerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ControllerProperties
   * @throws IOException if the JSON string is invalid with respect to ControllerProperties
   */
  public static ControllerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ControllerProperties.class);
  }

  /**
   * Convert an instance of ControllerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

