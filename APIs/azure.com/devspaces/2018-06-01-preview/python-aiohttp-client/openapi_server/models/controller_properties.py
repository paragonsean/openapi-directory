# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ControllerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_plane_fqdn: str=None, host_suffix: str=None, provisioning_state: str=None, target_container_host_credentials_base64: str=None, target_container_host_resource_id: str=None):
        """ControllerProperties - a model defined in OpenAPI

        :param data_plane_fqdn: The data_plane_fqdn of this ControllerProperties.
        :param host_suffix: The host_suffix of this ControllerProperties.
        :param provisioning_state: The provisioning_state of this ControllerProperties.
        :param target_container_host_credentials_base64: The target_container_host_credentials_base64 of this ControllerProperties.
        :param target_container_host_resource_id: The target_container_host_resource_id of this ControllerProperties.
        """
        self.openapi_types = {
            'data_plane_fqdn': str,
            'host_suffix': str,
            'provisioning_state': str,
            'target_container_host_credentials_base64': str,
            'target_container_host_resource_id': str
        }

        self.attribute_map = {
            'data_plane_fqdn': 'dataPlaneFqdn',
            'host_suffix': 'hostSuffix',
            'provisioning_state': 'provisioningState',
            'target_container_host_credentials_base64': 'targetContainerHostCredentialsBase64',
            'target_container_host_resource_id': 'targetContainerHostResourceId'
        }

        self._data_plane_fqdn = data_plane_fqdn
        self._host_suffix = host_suffix
        self._provisioning_state = provisioning_state
        self._target_container_host_credentials_base64 = target_container_host_credentials_base64
        self._target_container_host_resource_id = target_container_host_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ControllerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ControllerProperties of this ControllerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_plane_fqdn(self):
        """Gets the data_plane_fqdn of this ControllerProperties.

        DNS name for accessing DataPlane services

        :return: The data_plane_fqdn of this ControllerProperties.
        :rtype: str
        """
        return self._data_plane_fqdn

    @data_plane_fqdn.setter
    def data_plane_fqdn(self, data_plane_fqdn):
        """Sets the data_plane_fqdn of this ControllerProperties.

        DNS name for accessing DataPlane services

        :param data_plane_fqdn: The data_plane_fqdn of this ControllerProperties.
        :type data_plane_fqdn: str
        """

        self._data_plane_fqdn = data_plane_fqdn

    @property
    def host_suffix(self):
        """Gets the host_suffix of this ControllerProperties.

        DNS suffix for public endpoints running in the Azure Dev Spaces Controller.

        :return: The host_suffix of this ControllerProperties.
        :rtype: str
        """
        return self._host_suffix

    @host_suffix.setter
    def host_suffix(self, host_suffix):
        """Sets the host_suffix of this ControllerProperties.

        DNS suffix for public endpoints running in the Azure Dev Spaces Controller.

        :param host_suffix: The host_suffix of this ControllerProperties.
        :type host_suffix: str
        """
        if host_suffix is None:
            raise ValueError("Invalid value for `host_suffix`, must not be `None`")

        self._host_suffix = host_suffix

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ControllerProperties.

        Provisioning state of the Azure Dev Spaces Controller.

        :return: The provisioning_state of this ControllerProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ControllerProperties.

        Provisioning state of the Azure Dev Spaces Controller.

        :param provisioning_state: The provisioning_state of this ControllerProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Failed", "Canceled", "Updating", "Creating", "Deleting", "Deleted"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def target_container_host_credentials_base64(self):
        """Gets the target_container_host_credentials_base64 of this ControllerProperties.

        Credentials of the target container host (base64).

        :return: The target_container_host_credentials_base64 of this ControllerProperties.
        :rtype: str
        """
        return self._target_container_host_credentials_base64

    @target_container_host_credentials_base64.setter
    def target_container_host_credentials_base64(self, target_container_host_credentials_base64):
        """Sets the target_container_host_credentials_base64 of this ControllerProperties.

        Credentials of the target container host (base64).

        :param target_container_host_credentials_base64: The target_container_host_credentials_base64 of this ControllerProperties.
        :type target_container_host_credentials_base64: str
        """
        if target_container_host_credentials_base64 is None:
            raise ValueError("Invalid value for `target_container_host_credentials_base64`, must not be `None`")

        self._target_container_host_credentials_base64 = target_container_host_credentials_base64

    @property
    def target_container_host_resource_id(self):
        """Gets the target_container_host_resource_id of this ControllerProperties.

        Resource ID of the target container host

        :return: The target_container_host_resource_id of this ControllerProperties.
        :rtype: str
        """
        return self._target_container_host_resource_id

    @target_container_host_resource_id.setter
    def target_container_host_resource_id(self, target_container_host_resource_id):
        """Sets the target_container_host_resource_id of this ControllerProperties.

        Resource ID of the target container host

        :param target_container_host_resource_id: The target_container_host_resource_id of this ControllerProperties.
        :type target_container_host_resource_id: str
        """
        if target_container_host_resource_id is None:
            raise ValueError("Invalid value for `target_container_host_resource_id`, must not be `None`")

        self._target_container_host_resource_id = target_container_host_resource_id
