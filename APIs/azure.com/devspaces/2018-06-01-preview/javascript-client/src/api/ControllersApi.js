/**
 * DevSpacesManagement
 * Dev Spaces REST API
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Controller from '../model/Controller';
import ControllerConnectionDetailsList from '../model/ControllerConnectionDetailsList';
import ControllerList from '../model/ControllerList';
import ControllerUpdateParameters from '../model/ControllerUpdateParameters';
import ErrorResponse from '../model/ErrorResponse';

/**
* Controllers service.
* @module api/ControllersApi
* @version 2018-06-01-preview
*/
export default class ControllersApi {

    /**
    * Constructs a new ControllersApi. 
    * @alias module:api/ControllersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the controllersCreate operation.
     * @callback module:api/ControllersApi~controllersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Controller} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Azure Dev Spaces Controller.
     * Creates an Azure Dev Spaces Controller with the specified create parameters.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Resource group to which the resource belongs.
     * @param {String} name Name of the resource.
     * @param {module:model/Controller} controller Controller create parameters.
     * @param {module:api/ControllersApi~controllersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Controller}
     */
    controllersCreate(apiVersion, subscriptionId, resourceGroupName, name, controller, callback) {
      let postBody = controller;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling controllersCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling controllersCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling controllersCreate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling controllersCreate");
      }
      // verify the required parameter 'controller' is set
      if (controller === undefined || controller === null) {
        throw new Error("Missing the required parameter 'controller' when calling controllersCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Controller;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the controllersDelete operation.
     * @callback module:api/ControllersApi~controllersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Azure Dev Spaces Controller.
     * Deletes an existing Azure Dev Spaces Controller.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Resource group to which the resource belongs.
     * @param {String} name Name of the resource.
     * @param {module:api/ControllersApi~controllersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    controllersDelete(apiVersion, subscriptionId, resourceGroupName, name, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling controllersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling controllersDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling controllersDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling controllersDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the controllersGet operation.
     * @callback module:api/ControllersApi~controllersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Controller} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Azure Dev Spaces Controller.
     * Gets the properties for an Azure Dev Spaces Controller.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Resource group to which the resource belongs.
     * @param {String} name Name of the resource.
     * @param {module:api/ControllersApi~controllersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Controller}
     */
    controllersGet(apiVersion, subscriptionId, resourceGroupName, name, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling controllersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling controllersGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling controllersGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling controllersGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Controller;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the controllersList operation.
     * @callback module:api/ControllersApi~controllersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Azure Dev Spaces Controllers in a subscription.
     * Lists all the Azure Dev Spaces Controllers with their properties in the subscription.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {module:api/ControllersApi~controllersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllerList}
     */
    controllersList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling controllersList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling controllersList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllerList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DevSpaces/controllers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the controllersListByResourceGroup operation.
     * @callback module:api/ControllersApi~controllersListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the Azure Dev Spaces Controllers in a resource group.
     * Lists all the Azure Dev Spaces Controllers with their properties in the specified resource group and subscription.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Resource group to which the resource belongs.
     * @param {module:api/ControllersApi~controllersListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllerList}
     */
    controllersListByResourceGroup(apiVersion, subscriptionId, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling controllersListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling controllersListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling controllersListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllerList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the controllersListConnectionDetails operation.
     * @callback module:api/ControllersApi~controllersListConnectionDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ControllerConnectionDetailsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists connection details for an Azure Dev Spaces Controller.
     * Lists connection details for the underlying container resources of an Azure Dev Spaces Controller.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Resource group to which the resource belongs.
     * @param {String} name Name of the resource.
     * @param {module:api/ControllersApi~controllersListConnectionDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ControllerConnectionDetailsList}
     */
    controllersListConnectionDetails(apiVersion, subscriptionId, resourceGroupName, name, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling controllersListConnectionDetails");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling controllersListConnectionDetails");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling controllersListConnectionDetails");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling controllersListConnectionDetails");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ControllerConnectionDetailsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}/listConnectionDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the controllersUpdate operation.
     * @callback module:api/ControllersApi~controllersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Controller} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Azure Dev Spaces Controller.
     * Updates the properties of an existing Azure Dev Spaces Controller with the specified update parameters.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Resource group to which the resource belongs.
     * @param {String} name Name of the resource.
     * @param {module:model/ControllerUpdateParameters} controllerUpdateParameters Parameters for updating the Azure Dev Spaces Controller.
     * @param {module:api/ControllersApi~controllersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Controller}
     */
    controllersUpdate(apiVersion, subscriptionId, resourceGroupName, name, controllerUpdateParameters, callback) {
      let postBody = controllerUpdateParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling controllersUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling controllersUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling controllersUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling controllersUpdate");
      }
      // verify the required parameter 'controllerUpdateParameters' is set
      if (controllerUpdateParameters === undefined || controllerUpdateParameters === null) {
        throw new Error("Missing the required parameter 'controllerUpdateParameters' when calling controllersUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Controller;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
