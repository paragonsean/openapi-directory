/*
 * DevSpacesManagement
 * Dev Spaces REST API
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OrchestratorSpecificConnectionDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ControllerConnectionDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:12:07.053293-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ControllerConnectionDetails {
  public static final String SERIALIZED_NAME_AUTH_KEY = "authKey";
  @SerializedName(SERIALIZED_NAME_AUTH_KEY)
  private String authKey;

  public static final String SERIALIZED_NAME_ORCHESTRATOR_SPECIFIC_CONNECTION_DETAILS = "orchestratorSpecificConnectionDetails";
  @SerializedName(SERIALIZED_NAME_ORCHESTRATOR_SPECIFIC_CONNECTION_DETAILS)
  private OrchestratorSpecificConnectionDetails orchestratorSpecificConnectionDetails;

  public static final String SERIALIZED_NAME_WORKSPACE_STORAGE_ACCOUNT_NAME = "workspaceStorageAccountName";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_STORAGE_ACCOUNT_NAME)
  private String workspaceStorageAccountName;

  public static final String SERIALIZED_NAME_WORKSPACE_STORAGE_SAS_TOKEN = "workspaceStorageSasToken";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_STORAGE_SAS_TOKEN)
  private String workspaceStorageSasToken;

  public ControllerConnectionDetails() {
  }

  public ControllerConnectionDetails(
     String authKey, 
     String workspaceStorageAccountName, 
     String workspaceStorageSasToken
  ) {
    this();
    this.authKey = authKey;
    this.workspaceStorageAccountName = workspaceStorageAccountName;
    this.workspaceStorageSasToken = workspaceStorageSasToken;
  }

  /**
   * Authentication key for communicating with services.
   * @return authKey
   */
  @javax.annotation.Nullable
  public String getAuthKey() {
    return authKey;
  }



  public ControllerConnectionDetails orchestratorSpecificConnectionDetails(OrchestratorSpecificConnectionDetails orchestratorSpecificConnectionDetails) {
    this.orchestratorSpecificConnectionDetails = orchestratorSpecificConnectionDetails;
    return this;
  }

  /**
   * Get orchestratorSpecificConnectionDetails
   * @return orchestratorSpecificConnectionDetails
   */
  @javax.annotation.Nullable
  public OrchestratorSpecificConnectionDetails getOrchestratorSpecificConnectionDetails() {
    return orchestratorSpecificConnectionDetails;
  }

  public void setOrchestratorSpecificConnectionDetails(OrchestratorSpecificConnectionDetails orchestratorSpecificConnectionDetails) {
    this.orchestratorSpecificConnectionDetails = orchestratorSpecificConnectionDetails;
  }


  /**
   * Workspace storage account name.
   * @return workspaceStorageAccountName
   */
  @javax.annotation.Nullable
  public String getWorkspaceStorageAccountName() {
    return workspaceStorageAccountName;
  }



  /**
   * Workspace storage account SAS token.
   * @return workspaceStorageSasToken
   */
  @javax.annotation.Nullable
  public String getWorkspaceStorageSasToken() {
    return workspaceStorageSasToken;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControllerConnectionDetails controllerConnectionDetails = (ControllerConnectionDetails) o;
    return Objects.equals(this.authKey, controllerConnectionDetails.authKey) &&
        Objects.equals(this.orchestratorSpecificConnectionDetails, controllerConnectionDetails.orchestratorSpecificConnectionDetails) &&
        Objects.equals(this.workspaceStorageAccountName, controllerConnectionDetails.workspaceStorageAccountName) &&
        Objects.equals(this.workspaceStorageSasToken, controllerConnectionDetails.workspaceStorageSasToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authKey, orchestratorSpecificConnectionDetails, workspaceStorageAccountName, workspaceStorageSasToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControllerConnectionDetails {\n");
    sb.append("    authKey: ").append(toIndentedString(authKey)).append("\n");
    sb.append("    orchestratorSpecificConnectionDetails: ").append(toIndentedString(orchestratorSpecificConnectionDetails)).append("\n");
    sb.append("    workspaceStorageAccountName: ").append(toIndentedString(workspaceStorageAccountName)).append("\n");
    sb.append("    workspaceStorageSasToken: ").append(toIndentedString(workspaceStorageSasToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authKey");
    openapiFields.add("orchestratorSpecificConnectionDetails");
    openapiFields.add("workspaceStorageAccountName");
    openapiFields.add("workspaceStorageSasToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ControllerConnectionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ControllerConnectionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ControllerConnectionDetails is not found in the empty JSON string", ControllerConnectionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ControllerConnectionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ControllerConnectionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authKey") != null && !jsonObj.get("authKey").isJsonNull()) && !jsonObj.get("authKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authKey").toString()));
      }
      // validate the optional field `orchestratorSpecificConnectionDetails`
      if (jsonObj.get("orchestratorSpecificConnectionDetails") != null && !jsonObj.get("orchestratorSpecificConnectionDetails").isJsonNull()) {
        OrchestratorSpecificConnectionDetails.validateJsonElement(jsonObj.get("orchestratorSpecificConnectionDetails"));
      }
      if ((jsonObj.get("workspaceStorageAccountName") != null && !jsonObj.get("workspaceStorageAccountName").isJsonNull()) && !jsonObj.get("workspaceStorageAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceStorageAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceStorageAccountName").toString()));
      }
      if ((jsonObj.get("workspaceStorageSasToken") != null && !jsonObj.get("workspaceStorageSasToken").isJsonNull()) && !jsonObj.get("workspaceStorageSasToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceStorageSasToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceStorageSasToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ControllerConnectionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ControllerConnectionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ControllerConnectionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ControllerConnectionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ControllerConnectionDetails>() {
           @Override
           public void write(JsonWriter out, ControllerConnectionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ControllerConnectionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ControllerConnectionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ControllerConnectionDetails
   * @throws IOException if the JSON string is invalid with respect to ControllerConnectionDetails
   */
  public static ControllerConnectionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ControllerConnectionDetails.class);
  }

  /**
   * Convert an instance of ControllerConnectionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

