/**
 * DevSpacesManagement
 * Dev Spaces REST API
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllerConnectionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllerConnectionDetails::OAIControllerConnectionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllerConnectionDetails::OAIControllerConnectionDetails() {
    this->initializeModel();
}

OAIControllerConnectionDetails::~OAIControllerConnectionDetails() {}

void OAIControllerConnectionDetails::initializeModel() {

    m_auth_key_isSet = false;
    m_auth_key_isValid = false;

    m_orchestrator_specific_connection_details_isSet = false;
    m_orchestrator_specific_connection_details_isValid = false;

    m_workspace_storage_account_name_isSet = false;
    m_workspace_storage_account_name_isValid = false;

    m_workspace_storage_sas_token_isSet = false;
    m_workspace_storage_sas_token_isValid = false;
}

void OAIControllerConnectionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllerConnectionDetails::fromJsonObject(QJsonObject json) {

    m_auth_key_isValid = ::OpenAPI::fromJsonValue(m_auth_key, json[QString("authKey")]);
    m_auth_key_isSet = !json[QString("authKey")].isNull() && m_auth_key_isValid;

    m_orchestrator_specific_connection_details_isValid = ::OpenAPI::fromJsonValue(m_orchestrator_specific_connection_details, json[QString("orchestratorSpecificConnectionDetails")]);
    m_orchestrator_specific_connection_details_isSet = !json[QString("orchestratorSpecificConnectionDetails")].isNull() && m_orchestrator_specific_connection_details_isValid;

    m_workspace_storage_account_name_isValid = ::OpenAPI::fromJsonValue(m_workspace_storage_account_name, json[QString("workspaceStorageAccountName")]);
    m_workspace_storage_account_name_isSet = !json[QString("workspaceStorageAccountName")].isNull() && m_workspace_storage_account_name_isValid;

    m_workspace_storage_sas_token_isValid = ::OpenAPI::fromJsonValue(m_workspace_storage_sas_token, json[QString("workspaceStorageSasToken")]);
    m_workspace_storage_sas_token_isSet = !json[QString("workspaceStorageSasToken")].isNull() && m_workspace_storage_sas_token_isValid;
}

QString OAIControllerConnectionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllerConnectionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_key_isSet) {
        obj.insert(QString("authKey"), ::OpenAPI::toJsonValue(m_auth_key));
    }
    if (m_orchestrator_specific_connection_details.isSet()) {
        obj.insert(QString("orchestratorSpecificConnectionDetails"), ::OpenAPI::toJsonValue(m_orchestrator_specific_connection_details));
    }
    if (m_workspace_storage_account_name_isSet) {
        obj.insert(QString("workspaceStorageAccountName"), ::OpenAPI::toJsonValue(m_workspace_storage_account_name));
    }
    if (m_workspace_storage_sas_token_isSet) {
        obj.insert(QString("workspaceStorageSasToken"), ::OpenAPI::toJsonValue(m_workspace_storage_sas_token));
    }
    return obj;
}

QString OAIControllerConnectionDetails::getAuthKey() const {
    return m_auth_key;
}
void OAIControllerConnectionDetails::setAuthKey(const QString &auth_key) {
    m_auth_key = auth_key;
    m_auth_key_isSet = true;
}

bool OAIControllerConnectionDetails::is_auth_key_Set() const{
    return m_auth_key_isSet;
}

bool OAIControllerConnectionDetails::is_auth_key_Valid() const{
    return m_auth_key_isValid;
}

OAIOrchestratorSpecificConnectionDetails OAIControllerConnectionDetails::getOrchestratorSpecificConnectionDetails() const {
    return m_orchestrator_specific_connection_details;
}
void OAIControllerConnectionDetails::setOrchestratorSpecificConnectionDetails(const OAIOrchestratorSpecificConnectionDetails &orchestrator_specific_connection_details) {
    m_orchestrator_specific_connection_details = orchestrator_specific_connection_details;
    m_orchestrator_specific_connection_details_isSet = true;
}

bool OAIControllerConnectionDetails::is_orchestrator_specific_connection_details_Set() const{
    return m_orchestrator_specific_connection_details_isSet;
}

bool OAIControllerConnectionDetails::is_orchestrator_specific_connection_details_Valid() const{
    return m_orchestrator_specific_connection_details_isValid;
}

QString OAIControllerConnectionDetails::getWorkspaceStorageAccountName() const {
    return m_workspace_storage_account_name;
}
void OAIControllerConnectionDetails::setWorkspaceStorageAccountName(const QString &workspace_storage_account_name) {
    m_workspace_storage_account_name = workspace_storage_account_name;
    m_workspace_storage_account_name_isSet = true;
}

bool OAIControllerConnectionDetails::is_workspace_storage_account_name_Set() const{
    return m_workspace_storage_account_name_isSet;
}

bool OAIControllerConnectionDetails::is_workspace_storage_account_name_Valid() const{
    return m_workspace_storage_account_name_isValid;
}

QString OAIControllerConnectionDetails::getWorkspaceStorageSasToken() const {
    return m_workspace_storage_sas_token;
}
void OAIControllerConnectionDetails::setWorkspaceStorageSasToken(const QString &workspace_storage_sas_token) {
    m_workspace_storage_sas_token = workspace_storage_sas_token;
    m_workspace_storage_sas_token_isSet = true;
}

bool OAIControllerConnectionDetails::is_workspace_storage_sas_token_Set() const{
    return m_workspace_storage_sas_token_isSet;
}

bool OAIControllerConnectionDetails::is_workspace_storage_sas_token_Valid() const{
    return m_workspace_storage_sas_token_isValid;
}

bool OAIControllerConnectionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orchestrator_specific_connection_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_storage_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_storage_sas_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllerConnectionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
