/**
 * DevSpacesManagement
 * Dev Spaces REST API
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ControllerProperties model module.
 * @module model/ControllerProperties
 * @version 2019-04-01
 */
class ControllerProperties {
    /**
     * Constructs a new <code>ControllerProperties</code>.
     * @alias module:model/ControllerProperties
     * @param targetContainerHostCredentialsBase64 {String} Credentials of the target container host (base64).
     * @param targetContainerHostResourceId {String} Resource ID of the target container host
     */
    constructor(targetContainerHostCredentialsBase64, targetContainerHostResourceId) { 
        
        ControllerProperties.initialize(this, targetContainerHostCredentialsBase64, targetContainerHostResourceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, targetContainerHostCredentialsBase64, targetContainerHostResourceId) { 
        obj['targetContainerHostCredentialsBase64'] = targetContainerHostCredentialsBase64;
        obj['targetContainerHostResourceId'] = targetContainerHostResourceId;
    }

    /**
     * Constructs a <code>ControllerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ControllerProperties} obj Optional instance to populate.
     * @return {module:model/ControllerProperties} The populated <code>ControllerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ControllerProperties();

            if (data.hasOwnProperty('dataPlaneFqdn')) {
                obj['dataPlaneFqdn'] = ApiClient.convertToType(data['dataPlaneFqdn'], 'String');
            }
            if (data.hasOwnProperty('hostSuffix')) {
                obj['hostSuffix'] = ApiClient.convertToType(data['hostSuffix'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('targetContainerHostCredentialsBase64')) {
                obj['targetContainerHostCredentialsBase64'] = ApiClient.convertToType(data['targetContainerHostCredentialsBase64'], 'String');
            }
            if (data.hasOwnProperty('targetContainerHostResourceId')) {
                obj['targetContainerHostResourceId'] = ApiClient.convertToType(data['targetContainerHostResourceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ControllerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ControllerProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ControllerProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataPlaneFqdn'] && !(typeof data['dataPlaneFqdn'] === 'string' || data['dataPlaneFqdn'] instanceof String)) {
            throw new Error("Expected the field `dataPlaneFqdn` to be a primitive type in the JSON string but got " + data['dataPlaneFqdn']);
        }
        // ensure the json data is a string
        if (data['hostSuffix'] && !(typeof data['hostSuffix'] === 'string' || data['hostSuffix'] instanceof String)) {
            throw new Error("Expected the field `hostSuffix` to be a primitive type in the JSON string but got " + data['hostSuffix']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['targetContainerHostCredentialsBase64'] && !(typeof data['targetContainerHostCredentialsBase64'] === 'string' || data['targetContainerHostCredentialsBase64'] instanceof String)) {
            throw new Error("Expected the field `targetContainerHostCredentialsBase64` to be a primitive type in the JSON string but got " + data['targetContainerHostCredentialsBase64']);
        }
        // ensure the json data is a string
        if (data['targetContainerHostResourceId'] && !(typeof data['targetContainerHostResourceId'] === 'string' || data['targetContainerHostResourceId'] instanceof String)) {
            throw new Error("Expected the field `targetContainerHostResourceId` to be a primitive type in the JSON string but got " + data['targetContainerHostResourceId']);
        }

        return true;
    }


}

ControllerProperties.RequiredProperties = ["targetContainerHostCredentialsBase64", "targetContainerHostResourceId"];

/**
 * DNS name for accessing DataPlane services
 * @member {String} dataPlaneFqdn
 */
ControllerProperties.prototype['dataPlaneFqdn'] = undefined;

/**
 * DNS suffix for public endpoints running in the Azure Dev Spaces Controller.
 * @member {String} hostSuffix
 */
ControllerProperties.prototype['hostSuffix'] = undefined;

/**
 * Provisioning state of the Azure Dev Spaces Controller.
 * @member {module:model/ControllerProperties.ProvisioningStateEnum} provisioningState
 */
ControllerProperties.prototype['provisioningState'] = undefined;

/**
 * Credentials of the target container host (base64).
 * @member {String} targetContainerHostCredentialsBase64
 */
ControllerProperties.prototype['targetContainerHostCredentialsBase64'] = undefined;

/**
 * Resource ID of the target container host
 * @member {String} targetContainerHostResourceId
 */
ControllerProperties.prototype['targetContainerHostResourceId'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ControllerProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Deleted"
     * @const
     */
    "Deleted": "Deleted"
};



export default ControllerProperties;

