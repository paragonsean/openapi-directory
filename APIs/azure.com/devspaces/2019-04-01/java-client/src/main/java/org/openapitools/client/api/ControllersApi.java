/*
 * DevSpacesManagement
 * Dev Spaces REST API
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Controller;
import org.openapitools.client.model.ControllerConnectionDetailsList;
import org.openapitools.client.model.ControllerList;
import org.openapitools.client.model.ControllerUpdateParameters;
import org.openapitools.client.model.DevSpacesErrorResponse;
import org.openapitools.client.model.ListConnectionDetailsParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ControllersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ControllersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ControllersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for controllersCreate
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param controller Controller create parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the created Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; Azure Dev Spaces Controller is being created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 400 - BadRequest(One or more creation parameters are invalid.), 409 - Conflict(Target container host is not in a supported state.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersCreateCall(String apiVersion, String subscriptionId, String resourceGroupName, String name, Controller controller, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = controller;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllersCreateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String name, Controller controller, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling controllersCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling controllersCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling controllersCreate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling controllersCreate(Async)");
        }

        // verify the required parameter 'controller' is set
        if (controller == null) {
            throw new ApiException("Missing the required parameter 'controller' when calling controllersCreate(Async)");
        }

        return controllersCreateCall(apiVersion, subscriptionId, resourceGroupName, name, controller, _callback);

    }

    /**
     * Creates an Azure Dev Spaces Controller.
     * Creates an Azure Dev Spaces Controller with the specified create parameters.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param controller Controller create parameters. (required)
     * @return Controller
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the created Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; Azure Dev Spaces Controller is being created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 400 - BadRequest(One or more creation parameters are invalid.), 409 - Conflict(Target container host is not in a supported state.) </td><td>  -  </td></tr>
     </table>
     */
    public Controller controllersCreate(String apiVersion, String subscriptionId, String resourceGroupName, String name, Controller controller) throws ApiException {
        ApiResponse<Controller> localVarResp = controllersCreateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, name, controller);
        return localVarResp.getData();
    }

    /**
     * Creates an Azure Dev Spaces Controller.
     * Creates an Azure Dev Spaces Controller with the specified create parameters.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param controller Controller create parameters. (required)
     * @return ApiResponse&lt;Controller&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the created Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; Azure Dev Spaces Controller is being created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 400 - BadRequest(One or more creation parameters are invalid.), 409 - Conflict(Target container host is not in a supported state.) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Controller> controllersCreateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String name, Controller controller) throws ApiException {
        okhttp3.Call localVarCall = controllersCreateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, name, controller, null);
        Type localVarReturnType = new TypeToken<Controller>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates an Azure Dev Spaces Controller. (asynchronously)
     * Creates an Azure Dev Spaces Controller with the specified create parameters.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param controller Controller create parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the created Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; Azure Dev Spaces Controller is being created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 400 - BadRequest(One or more creation parameters are invalid.), 409 - Conflict(Target container host is not in a supported state.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersCreateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String name, Controller controller, final ApiCallback<Controller> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllersCreateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, name, controller, _callback);
        Type localVarReturnType = new TypeToken<Controller>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for controllersDelete
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the Azure Dev Spaces Controller is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; Azure Dev Spaces Controller is being deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request was successful; Azure Dev Spaces Controller does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 409 - Conflict(Azure Dev Spaces Controller is in a non-terminal state due to an ongoing operation.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllersDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling controllersDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling controllersDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling controllersDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling controllersDelete(Async)");
        }

        return controllersDeleteCall(apiVersion, subscriptionId, resourceGroupName, name, _callback);

    }

    /**
     * Deletes an Azure Dev Spaces Controller.
     * Deletes an existing Azure Dev Spaces Controller.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the Azure Dev Spaces Controller is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; Azure Dev Spaces Controller is being deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request was successful; Azure Dev Spaces Controller does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 409 - Conflict(Azure Dev Spaces Controller is in a non-terminal state due to an ongoing operation.) </td><td>  -  </td></tr>
     </table>
     */
    public void controllersDelete(String apiVersion, String subscriptionId, String resourceGroupName, String name) throws ApiException {
        controllersDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, name);
    }

    /**
     * Deletes an Azure Dev Spaces Controller.
     * Deletes an existing Azure Dev Spaces Controller.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the Azure Dev Spaces Controller is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; Azure Dev Spaces Controller is being deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request was successful; Azure Dev Spaces Controller does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 409 - Conflict(Azure Dev Spaces Controller is in a non-terminal state due to an ongoing operation.) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> controllersDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String name) throws ApiException {
        okhttp3.Call localVarCall = controllersDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an Azure Dev Spaces Controller. (asynchronously)
     * Deletes an existing Azure Dev Spaces Controller.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the Azure Dev Spaces Controller is deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; Azure Dev Spaces Controller is being deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The request was successful; Azure Dev Spaces Controller does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 409 - Conflict(Azure Dev Spaces Controller is in a non-terminal state due to an ongoing operation.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllersDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for controllersGet
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the Azure Dev Spaces Controller. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllersGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling controllersGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling controllersGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling controllersGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling controllersGet(Async)");
        }

        return controllersGetCall(apiVersion, subscriptionId, resourceGroupName, name, _callback);

    }

    /**
     * Gets an Azure Dev Spaces Controller.
     * Gets the properties for an Azure Dev Spaces Controller.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @return Controller
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the Azure Dev Spaces Controller. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.) </td><td>  -  </td></tr>
     </table>
     */
    public Controller controllersGet(String apiVersion, String subscriptionId, String resourceGroupName, String name) throws ApiException {
        ApiResponse<Controller> localVarResp = controllersGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, name);
        return localVarResp.getData();
    }

    /**
     * Gets an Azure Dev Spaces Controller.
     * Gets the properties for an Azure Dev Spaces Controller.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @return ApiResponse&lt;Controller&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the Azure Dev Spaces Controller. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Controller> controllersGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String name) throws ApiException {
        okhttp3.Call localVarCall = controllersGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, name, null);
        Type localVarReturnType = new TypeToken<Controller>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an Azure Dev Spaces Controller. (asynchronously)
     * Gets the properties for an Azure Dev Spaces Controller.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the Azure Dev Spaces Controller. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String name, final ApiCallback<Controller> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllersGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, name, _callback);
        Type localVarReturnType = new TypeToken<Controller>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for controllersList
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of Azure Dev Spaces Controllers in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DevSpaces/controllers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllersListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling controllersList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling controllersList(Async)");
        }

        return controllersListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * Lists the Azure Dev Spaces Controllers in a subscription.
     * Lists all the Azure Dev Spaces Controllers with their properties in the subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @return ControllerList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of Azure Dev Spaces Controllers in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ControllerList controllersList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ControllerList> localVarResp = controllersListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Lists the Azure Dev Spaces Controllers in a subscription.
     * Lists all the Azure Dev Spaces Controllers with their properties in the subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @return ApiResponse&lt;ControllerList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of Azure Dev Spaces Controllers in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllerList> controllersListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = controllersListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ControllerList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the Azure Dev Spaces Controllers in a subscription. (asynchronously)
     * Lists all the Azure Dev Spaces Controllers with their properties in the subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of Azure Dev Spaces Controllers in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersListAsync(String apiVersion, String subscriptionId, final ApiCallback<ControllerList> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllersListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ControllerList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for controllersListByResourceGroup
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of Azure Dev Spaces Controllers in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersListByResourceGroupCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllersListByResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling controllersListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling controllersListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling controllersListByResourceGroup(Async)");
        }

        return controllersListByResourceGroupCall(apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * Lists the Azure Dev Spaces Controllers in a resource group.
     * Lists all the Azure Dev Spaces Controllers with their properties in the specified resource group and subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @return ControllerList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of Azure Dev Spaces Controllers in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ControllerList controllersListByResourceGroup(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<ControllerList> localVarResp = controllersListByResourceGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * Lists the Azure Dev Spaces Controllers in a resource group.
     * Lists all the Azure Dev Spaces Controllers with their properties in the specified resource group and subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @return ApiResponse&lt;ControllerList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of Azure Dev Spaces Controllers in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllerList> controllersListByResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = controllersListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<ControllerList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists the Azure Dev Spaces Controllers in a resource group. (asynchronously)
     * Lists all the Azure Dev Spaces Controllers with their properties in the specified resource group and subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of Azure Dev Spaces Controllers in the resource group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersListByResourceGroupAsync(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<ControllerList> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllersListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<ControllerList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for controllersListConnectionDetails
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param listConnectionDetailsParameters Parameters for listing connection details of Azure Dev Spaces Controller. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of connection details for the Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersListConnectionDetailsCall(String apiVersion, String subscriptionId, String resourceGroupName, String name, ListConnectionDetailsParameters listConnectionDetailsParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listConnectionDetailsParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}/listConnectionDetails"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllersListConnectionDetailsValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String name, ListConnectionDetailsParameters listConnectionDetailsParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling controllersListConnectionDetails(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling controllersListConnectionDetails(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling controllersListConnectionDetails(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling controllersListConnectionDetails(Async)");
        }

        // verify the required parameter 'listConnectionDetailsParameters' is set
        if (listConnectionDetailsParameters == null) {
            throw new ApiException("Missing the required parameter 'listConnectionDetailsParameters' when calling controllersListConnectionDetails(Async)");
        }

        return controllersListConnectionDetailsCall(apiVersion, subscriptionId, resourceGroupName, name, listConnectionDetailsParameters, _callback);

    }

    /**
     * Lists connection details for an Azure Dev Spaces Controller.
     * Lists connection details for the underlying container resources of an Azure Dev Spaces Controller.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param listConnectionDetailsParameters Parameters for listing connection details of Azure Dev Spaces Controller. (required)
     * @return ControllerConnectionDetailsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of connection details for the Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.) </td><td>  -  </td></tr>
     </table>
     */
    public ControllerConnectionDetailsList controllersListConnectionDetails(String apiVersion, String subscriptionId, String resourceGroupName, String name, ListConnectionDetailsParameters listConnectionDetailsParameters) throws ApiException {
        ApiResponse<ControllerConnectionDetailsList> localVarResp = controllersListConnectionDetailsWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, name, listConnectionDetailsParameters);
        return localVarResp.getData();
    }

    /**
     * Lists connection details for an Azure Dev Spaces Controller.
     * Lists connection details for the underlying container resources of an Azure Dev Spaces Controller.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param listConnectionDetailsParameters Parameters for listing connection details of Azure Dev Spaces Controller. (required)
     * @return ApiResponse&lt;ControllerConnectionDetailsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of connection details for the Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ControllerConnectionDetailsList> controllersListConnectionDetailsWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String name, ListConnectionDetailsParameters listConnectionDetailsParameters) throws ApiException {
        okhttp3.Call localVarCall = controllersListConnectionDetailsValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, name, listConnectionDetailsParameters, null);
        Type localVarReturnType = new TypeToken<ControllerConnectionDetailsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists connection details for an Azure Dev Spaces Controller. (asynchronously)
     * Lists connection details for the underlying container resources of an Azure Dev Spaces Controller.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param listConnectionDetailsParameters Parameters for listing connection details of Azure Dev Spaces Controller. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the list of connection details for the Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersListConnectionDetailsAsync(String apiVersion, String subscriptionId, String resourceGroupName, String name, ListConnectionDetailsParameters listConnectionDetailsParameters, final ApiCallback<ControllerConnectionDetailsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllersListConnectionDetailsValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, name, listConnectionDetailsParameters, _callback);
        Type localVarReturnType = new TypeToken<ControllerConnectionDetailsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for controllersUpdate
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param controllerUpdateParameters Parameters for updating the Azure Dev Spaces Controller. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the updated Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; Azure Dev Spaces Controller is being updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.), 400 - BadRequest(One or more update parameters are invalid.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String name, ControllerUpdateParameters controllerUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = controllerUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevSpaces/controllers/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllersUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String name, ControllerUpdateParameters controllerUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling controllersUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling controllersUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling controllersUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling controllersUpdate(Async)");
        }

        // verify the required parameter 'controllerUpdateParameters' is set
        if (controllerUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'controllerUpdateParameters' when calling controllersUpdate(Async)");
        }

        return controllersUpdateCall(apiVersion, subscriptionId, resourceGroupName, name, controllerUpdateParameters, _callback);

    }

    /**
     * Updates an Azure Dev Spaces Controller.
     * Updates the properties of an existing Azure Dev Spaces Controller with the specified update parameters.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param controllerUpdateParameters Parameters for updating the Azure Dev Spaces Controller. (required)
     * @return Controller
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the updated Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; Azure Dev Spaces Controller is being updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.), 400 - BadRequest(One or more update parameters are invalid.) </td><td>  -  </td></tr>
     </table>
     */
    public Controller controllersUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String name, ControllerUpdateParameters controllerUpdateParameters) throws ApiException {
        ApiResponse<Controller> localVarResp = controllersUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, name, controllerUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * Updates an Azure Dev Spaces Controller.
     * Updates the properties of an existing Azure Dev Spaces Controller with the specified update parameters.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param controllerUpdateParameters Parameters for updating the Azure Dev Spaces Controller. (required)
     * @return ApiResponse&lt;Controller&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the updated Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; Azure Dev Spaces Controller is being updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.), 400 - BadRequest(One or more update parameters are invalid.) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Controller> controllersUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String name, ControllerUpdateParameters controllerUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = controllersUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, name, controllerUpdateParameters, null);
        Type localVarReturnType = new TypeToken<Controller>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates an Azure Dev Spaces Controller. (asynchronously)
     * Updates the properties of an existing Azure Dev Spaces Controller with the specified update parameters.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Resource group to which the resource belongs. (required)
     * @param name Name of the resource. (required)
     * @param controllerUpdateParameters Parameters for updating the Azure Dev Spaces Controller. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; response contains the updated Azure Dev Spaces Controller . </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; Azure Dev Spaces Controller is being updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing the reason for operation failure. 404 - NotFound(Azure Dev Spaces Controller doesn&#39;t exist.), 400 - BadRequest(One or more update parameters are invalid.) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllersUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String name, ControllerUpdateParameters controllerUpdateParameters, final ApiCallback<Controller> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllersUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, name, controllerUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<Controller>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
