/**
 * DevSpacesManagement
 * Dev Spaces REST API
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControllerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIControllerProperties::OAIControllerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIControllerProperties::OAIControllerProperties() {
    this->initializeModel();
}

OAIControllerProperties::~OAIControllerProperties() {}

void OAIControllerProperties::initializeModel() {

    m_data_plane_fqdn_isSet = false;
    m_data_plane_fqdn_isValid = false;

    m_host_suffix_isSet = false;
    m_host_suffix_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_target_container_host_credentials_base64_isSet = false;
    m_target_container_host_credentials_base64_isValid = false;

    m_target_container_host_resource_id_isSet = false;
    m_target_container_host_resource_id_isValid = false;
}

void OAIControllerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIControllerProperties::fromJsonObject(QJsonObject json) {

    m_data_plane_fqdn_isValid = ::OpenAPI::fromJsonValue(m_data_plane_fqdn, json[QString("dataPlaneFqdn")]);
    m_data_plane_fqdn_isSet = !json[QString("dataPlaneFqdn")].isNull() && m_data_plane_fqdn_isValid;

    m_host_suffix_isValid = ::OpenAPI::fromJsonValue(m_host_suffix, json[QString("hostSuffix")]);
    m_host_suffix_isSet = !json[QString("hostSuffix")].isNull() && m_host_suffix_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_target_container_host_credentials_base64_isValid = ::OpenAPI::fromJsonValue(m_target_container_host_credentials_base64, json[QString("targetContainerHostCredentialsBase64")]);
    m_target_container_host_credentials_base64_isSet = !json[QString("targetContainerHostCredentialsBase64")].isNull() && m_target_container_host_credentials_base64_isValid;

    m_target_container_host_resource_id_isValid = ::OpenAPI::fromJsonValue(m_target_container_host_resource_id, json[QString("targetContainerHostResourceId")]);
    m_target_container_host_resource_id_isSet = !json[QString("targetContainerHostResourceId")].isNull() && m_target_container_host_resource_id_isValid;
}

QString OAIControllerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIControllerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_plane_fqdn_isSet) {
        obj.insert(QString("dataPlaneFqdn"), ::OpenAPI::toJsonValue(m_data_plane_fqdn));
    }
    if (m_host_suffix_isSet) {
        obj.insert(QString("hostSuffix"), ::OpenAPI::toJsonValue(m_host_suffix));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_target_container_host_credentials_base64_isSet) {
        obj.insert(QString("targetContainerHostCredentialsBase64"), ::OpenAPI::toJsonValue(m_target_container_host_credentials_base64));
    }
    if (m_target_container_host_resource_id_isSet) {
        obj.insert(QString("targetContainerHostResourceId"), ::OpenAPI::toJsonValue(m_target_container_host_resource_id));
    }
    return obj;
}

QString OAIControllerProperties::getDataPlaneFqdn() const {
    return m_data_plane_fqdn;
}
void OAIControllerProperties::setDataPlaneFqdn(const QString &data_plane_fqdn) {
    m_data_plane_fqdn = data_plane_fqdn;
    m_data_plane_fqdn_isSet = true;
}

bool OAIControllerProperties::is_data_plane_fqdn_Set() const{
    return m_data_plane_fqdn_isSet;
}

bool OAIControllerProperties::is_data_plane_fqdn_Valid() const{
    return m_data_plane_fqdn_isValid;
}

QString OAIControllerProperties::getHostSuffix() const {
    return m_host_suffix;
}
void OAIControllerProperties::setHostSuffix(const QString &host_suffix) {
    m_host_suffix = host_suffix;
    m_host_suffix_isSet = true;
}

bool OAIControllerProperties::is_host_suffix_Set() const{
    return m_host_suffix_isSet;
}

bool OAIControllerProperties::is_host_suffix_Valid() const{
    return m_host_suffix_isValid;
}

QString OAIControllerProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIControllerProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIControllerProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIControllerProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIControllerProperties::getTargetContainerHostCredentialsBase64() const {
    return m_target_container_host_credentials_base64;
}
void OAIControllerProperties::setTargetContainerHostCredentialsBase64(const QString &target_container_host_credentials_base64) {
    m_target_container_host_credentials_base64 = target_container_host_credentials_base64;
    m_target_container_host_credentials_base64_isSet = true;
}

bool OAIControllerProperties::is_target_container_host_credentials_base64_Set() const{
    return m_target_container_host_credentials_base64_isSet;
}

bool OAIControllerProperties::is_target_container_host_credentials_base64_Valid() const{
    return m_target_container_host_credentials_base64_isValid;
}

QString OAIControllerProperties::getTargetContainerHostResourceId() const {
    return m_target_container_host_resource_id;
}
void OAIControllerProperties::setTargetContainerHostResourceId(const QString &target_container_host_resource_id) {
    m_target_container_host_resource_id = target_container_host_resource_id;
    m_target_container_host_resource_id_isSet = true;
}

bool OAIControllerProperties::is_target_container_host_resource_id_Set() const{
    return m_target_container_host_resource_id_isSet;
}

bool OAIControllerProperties::is_target_container_host_resource_id_Valid() const{
    return m_target_container_host_resource_id_isValid;
}

bool OAIControllerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_plane_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_container_host_credentials_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_container_host_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIControllerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_container_host_credentials_base64_isValid && m_target_container_host_resource_id_isValid && true;
}

} // namespace OpenAPI
