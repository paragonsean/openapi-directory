/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapabilitiesResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapabilitiesResult::OAICapabilitiesResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapabilitiesResult::OAICapabilitiesResult() {
    this->initializeModel();
}

OAICapabilitiesResult::~OAICapabilitiesResult() {}

void OAICapabilitiesResult::initializeModel() {

    m_features_isSet = false;
    m_features_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;

    m_vm_size_filters_isSet = false;
    m_vm_size_filters_isValid = false;

    m_vm_sizes_isSet = false;
    m_vm_sizes_isValid = false;
}

void OAICapabilitiesResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapabilitiesResult::fromJsonObject(QJsonObject json) {

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;

    m_vm_size_filters_isValid = ::OpenAPI::fromJsonValue(m_vm_size_filters, json[QString("vmSize_filters")]);
    m_vm_size_filters_isSet = !json[QString("vmSize_filters")].isNull() && m_vm_size_filters_isValid;

    m_vm_sizes_isValid = ::OpenAPI::fromJsonValue(m_vm_sizes, json[QString("vmSizes")]);
    m_vm_sizes_isSet = !json[QString("vmSizes")].isNull() && m_vm_sizes_isValid;
}

QString OAICapabilitiesResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapabilitiesResult::asJsonObject() const {
    QJsonObject obj;
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_quota.isSet()) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    if (m_vm_size_filters.size() > 0) {
        obj.insert(QString("vmSize_filters"), ::OpenAPI::toJsonValue(m_vm_size_filters));
    }
    if (m_vm_sizes.size() > 0) {
        obj.insert(QString("vmSizes"), ::OpenAPI::toJsonValue(m_vm_sizes));
    }
    return obj;
}

QList<QString> OAICapabilitiesResult::getFeatures() const {
    return m_features;
}
void OAICapabilitiesResult::setFeatures(const QList<QString> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAICapabilitiesResult::is_features_Set() const{
    return m_features_isSet;
}

bool OAICapabilitiesResult::is_features_Valid() const{
    return m_features_isValid;
}

OAIQuotaCapability OAICapabilitiesResult::getQuota() const {
    return m_quota;
}
void OAICapabilitiesResult::setQuota(const OAIQuotaCapability &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAICapabilitiesResult::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAICapabilitiesResult::is_quota_Valid() const{
    return m_quota_isValid;
}

QMap<QString, OAIRegionsCapability> OAICapabilitiesResult::getRegions() const {
    return m_regions;
}
void OAICapabilitiesResult::setRegions(const QMap<QString, OAIRegionsCapability> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAICapabilitiesResult::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAICapabilitiesResult::is_regions_Valid() const{
    return m_regions_isValid;
}

QMap<QString, OAIVersionsCapability> OAICapabilitiesResult::getVersions() const {
    return m_versions;
}
void OAICapabilitiesResult::setVersions(const QMap<QString, OAIVersionsCapability> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAICapabilitiesResult::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAICapabilitiesResult::is_versions_Valid() const{
    return m_versions_isValid;
}

QList<OAIVmSizeCompatibilityFilter> OAICapabilitiesResult::getVmSizeFilters() const {
    return m_vm_size_filters;
}
void OAICapabilitiesResult::setVmSizeFilters(const QList<OAIVmSizeCompatibilityFilter> &vm_size_filters) {
    m_vm_size_filters = vm_size_filters;
    m_vm_size_filters_isSet = true;
}

bool OAICapabilitiesResult::is_vm_size_filters_Set() const{
    return m_vm_size_filters_isSet;
}

bool OAICapabilitiesResult::is_vm_size_filters_Valid() const{
    return m_vm_size_filters_isValid;
}

QMap<QString, OAIVmSizesCapability> OAICapabilitiesResult::getVmSizes() const {
    return m_vm_sizes;
}
void OAICapabilitiesResult::setVmSizes(const QMap<QString, OAIVmSizesCapability> &vm_sizes) {
    m_vm_sizes = vm_sizes;
    m_vm_sizes_isSet = true;
}

bool OAICapabilitiesResult::is_vm_sizes_Set() const{
    return m_vm_sizes_isSet;
}

bool OAICapabilitiesResult::is_vm_sizes_Valid() const{
    return m_vm_sizes_isValid;
}

bool OAICapabilitiesResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapabilitiesResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
