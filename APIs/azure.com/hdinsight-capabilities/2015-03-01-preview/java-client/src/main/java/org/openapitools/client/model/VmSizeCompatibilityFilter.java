/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The virtual machine type compatibility filter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:16.565163-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VmSizeCompatibilityFilter {
  public static final String SERIALIZED_NAME_CLUSTER_FLAVORS = "ClusterFlavors";
  @SerializedName(SERIALIZED_NAME_CLUSTER_FLAVORS)
  private List<String> clusterFlavors = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_VERSIONS = "ClusterVersions";
  @SerializedName(SERIALIZED_NAME_CLUSTER_VERSIONS)
  private List<String> clusterVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_MODE = "FilterMode";
  @SerializedName(SERIALIZED_NAME_FILTER_MODE)
  private String filterMode;

  public static final String SERIALIZED_NAME_NODE_TYPES = "NodeTypes";
  @SerializedName(SERIALIZED_NAME_NODE_TYPES)
  private List<String> nodeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGIONS = "Regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List<String> regions = new ArrayList<>();

  public static final String SERIALIZED_NAME_VMSIZES = "vmsizes";
  @SerializedName(SERIALIZED_NAME_VMSIZES)
  private List<String> vmsizes = new ArrayList<>();

  public VmSizeCompatibilityFilter() {
  }

  public VmSizeCompatibilityFilter clusterFlavors(List<String> clusterFlavors) {
    this.clusterFlavors = clusterFlavors;
    return this;
  }

  public VmSizeCompatibilityFilter addClusterFlavorsItem(String clusterFlavorsItem) {
    if (this.clusterFlavors == null) {
      this.clusterFlavors = new ArrayList<>();
    }
    this.clusterFlavors.add(clusterFlavorsItem);
    return this;
  }

  /**
   * The list of cluster types available.
   * @return clusterFlavors
   */
  @javax.annotation.Nullable
  public List<String> getClusterFlavors() {
    return clusterFlavors;
  }

  public void setClusterFlavors(List<String> clusterFlavors) {
    this.clusterFlavors = clusterFlavors;
  }


  public VmSizeCompatibilityFilter clusterVersions(List<String> clusterVersions) {
    this.clusterVersions = clusterVersions;
    return this;
  }

  public VmSizeCompatibilityFilter addClusterVersionsItem(String clusterVersionsItem) {
    if (this.clusterVersions == null) {
      this.clusterVersions = new ArrayList<>();
    }
    this.clusterVersions.add(clusterVersionsItem);
    return this;
  }

  /**
   * The list of cluster versions.
   * @return clusterVersions
   */
  @javax.annotation.Nullable
  public List<String> getClusterVersions() {
    return clusterVersions;
  }

  public void setClusterVersions(List<String> clusterVersions) {
    this.clusterVersions = clusterVersions;
  }


  public VmSizeCompatibilityFilter filterMode(String filterMode) {
    this.filterMode = filterMode;
    return this;
  }

  /**
   * The mode for the filter.
   * @return filterMode
   */
  @javax.annotation.Nullable
  public String getFilterMode() {
    return filterMode;
  }

  public void setFilterMode(String filterMode) {
    this.filterMode = filterMode;
  }


  public VmSizeCompatibilityFilter nodeTypes(List<String> nodeTypes) {
    this.nodeTypes = nodeTypes;
    return this;
  }

  public VmSizeCompatibilityFilter addNodeTypesItem(String nodeTypesItem) {
    if (this.nodeTypes == null) {
      this.nodeTypes = new ArrayList<>();
    }
    this.nodeTypes.add(nodeTypesItem);
    return this;
  }

  /**
   * The list of node types.
   * @return nodeTypes
   */
  @javax.annotation.Nullable
  public List<String> getNodeTypes() {
    return nodeTypes;
  }

  public void setNodeTypes(List<String> nodeTypes) {
    this.nodeTypes = nodeTypes;
  }


  public VmSizeCompatibilityFilter regions(List<String> regions) {
    this.regions = regions;
    return this;
  }

  public VmSizeCompatibilityFilter addRegionsItem(String regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * The list of regions.
   * @return regions
   */
  @javax.annotation.Nullable
  public List<String> getRegions() {
    return regions;
  }

  public void setRegions(List<String> regions) {
    this.regions = regions;
  }


  public VmSizeCompatibilityFilter vmsizes(List<String> vmsizes) {
    this.vmsizes = vmsizes;
    return this;
  }

  public VmSizeCompatibilityFilter addVmsizesItem(String vmsizesItem) {
    if (this.vmsizes == null) {
      this.vmsizes = new ArrayList<>();
    }
    this.vmsizes.add(vmsizesItem);
    return this;
  }

  /**
   * The list of virtual machine sizes.
   * @return vmsizes
   */
  @javax.annotation.Nullable
  public List<String> getVmsizes() {
    return vmsizes;
  }

  public void setVmsizes(List<String> vmsizes) {
    this.vmsizes = vmsizes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VmSizeCompatibilityFilter vmSizeCompatibilityFilter = (VmSizeCompatibilityFilter) o;
    return Objects.equals(this.clusterFlavors, vmSizeCompatibilityFilter.clusterFlavors) &&
        Objects.equals(this.clusterVersions, vmSizeCompatibilityFilter.clusterVersions) &&
        Objects.equals(this.filterMode, vmSizeCompatibilityFilter.filterMode) &&
        Objects.equals(this.nodeTypes, vmSizeCompatibilityFilter.nodeTypes) &&
        Objects.equals(this.regions, vmSizeCompatibilityFilter.regions) &&
        Objects.equals(this.vmsizes, vmSizeCompatibilityFilter.vmsizes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterFlavors, clusterVersions, filterMode, nodeTypes, regions, vmsizes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VmSizeCompatibilityFilter {\n");
    sb.append("    clusterFlavors: ").append(toIndentedString(clusterFlavors)).append("\n");
    sb.append("    clusterVersions: ").append(toIndentedString(clusterVersions)).append("\n");
    sb.append("    filterMode: ").append(toIndentedString(filterMode)).append("\n");
    sb.append("    nodeTypes: ").append(toIndentedString(nodeTypes)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    vmsizes: ").append(toIndentedString(vmsizes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClusterFlavors");
    openapiFields.add("ClusterVersions");
    openapiFields.add("FilterMode");
    openapiFields.add("NodeTypes");
    openapiFields.add("Regions");
    openapiFields.add("vmsizes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VmSizeCompatibilityFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VmSizeCompatibilityFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VmSizeCompatibilityFilter is not found in the empty JSON string", VmSizeCompatibilityFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VmSizeCompatibilityFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VmSizeCompatibilityFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ClusterFlavors") != null && !jsonObj.get("ClusterFlavors").isJsonNull() && !jsonObj.get("ClusterFlavors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterFlavors` to be an array in the JSON string but got `%s`", jsonObj.get("ClusterFlavors").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ClusterVersions") != null && !jsonObj.get("ClusterVersions").isJsonNull() && !jsonObj.get("ClusterVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterVersions` to be an array in the JSON string but got `%s`", jsonObj.get("ClusterVersions").toString()));
      }
      if ((jsonObj.get("FilterMode") != null && !jsonObj.get("FilterMode").isJsonNull()) && !jsonObj.get("FilterMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FilterMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FilterMode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("NodeTypes") != null && !jsonObj.get("NodeTypes").isJsonNull() && !jsonObj.get("NodeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `NodeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("NodeTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Regions") != null && !jsonObj.get("Regions").isJsonNull() && !jsonObj.get("Regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Regions` to be an array in the JSON string but got `%s`", jsonObj.get("Regions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vmsizes") != null && !jsonObj.get("vmsizes").isJsonNull() && !jsonObj.get("vmsizes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmsizes` to be an array in the JSON string but got `%s`", jsonObj.get("vmsizes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VmSizeCompatibilityFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VmSizeCompatibilityFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VmSizeCompatibilityFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VmSizeCompatibilityFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<VmSizeCompatibilityFilter>() {
           @Override
           public void write(JsonWriter out, VmSizeCompatibilityFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VmSizeCompatibilityFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VmSizeCompatibilityFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VmSizeCompatibilityFilter
   * @throws IOException if the JSON string is invalid with respect to VmSizeCompatibilityFilter
   */
  public static VmSizeCompatibilityFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VmSizeCompatibilityFilter.class);
  }

  /**
   * Convert an instance of VmSizeCompatibilityFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

