/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VersionSpec from './VersionSpec';

/**
 * The VersionsCapability model module.
 * @module model/VersionsCapability
 * @version 2015-03-01-preview
 */
class VersionsCapability {
    /**
     * Constructs a new <code>VersionsCapability</code>.
     * The version capability.
     * @alias module:model/VersionsCapability
     */
    constructor() { 
        
        VersionsCapability.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VersionsCapability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VersionsCapability} obj Optional instance to populate.
     * @return {module:model/VersionsCapability} The populated <code>VersionsCapability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VersionsCapability();

            if (data.hasOwnProperty('available')) {
                obj['available'] = ApiClient.convertToType(data['available'], [VersionSpec]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VersionsCapability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VersionsCapability</code>.
     */
    static validateJSON(data) {
        if (data['available']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['available'])) {
                throw new Error("Expected the field `available` to be an array in the JSON data but got " + data['available']);
            }
            // validate the optional field `available` (array)
            for (const item of data['available']) {
                VersionSpec.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of version capabilities.
 * @member {Array.<module:model/VersionSpec>} available
 */
VersionsCapability.prototype['available'] = undefined;






export default VersionsCapability;

