# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionalQuotaCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cores_available: int=None, cores_used: int=None, region_name: str=None):
        """RegionalQuotaCapability - a model defined in OpenAPI

        :param cores_available: The cores_available of this RegionalQuotaCapability.
        :param cores_used: The cores_used of this RegionalQuotaCapability.
        :param region_name: The region_name of this RegionalQuotaCapability.
        """
        self.openapi_types = {
            'cores_available': int,
            'cores_used': int,
            'region_name': str
        }

        self.attribute_map = {
            'cores_available': 'cores_available',
            'cores_used': 'cores_used',
            'region_name': 'region_name'
        }

        self._cores_available = cores_available
        self._cores_used = cores_used
        self._region_name = region_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionalQuotaCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The regionalQuotaCapability of this RegionalQuotaCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cores_available(self):
        """Gets the cores_available of this RegionalQuotaCapability.

        The number of courses available in the region.

        :return: The cores_available of this RegionalQuotaCapability.
        :rtype: int
        """
        return self._cores_available

    @cores_available.setter
    def cores_available(self, cores_available):
        """Sets the cores_available of this RegionalQuotaCapability.

        The number of courses available in the region.

        :param cores_available: The cores_available of this RegionalQuotaCapability.
        :type cores_available: int
        """

        self._cores_available = cores_available

    @property
    def cores_used(self):
        """Gets the cores_used of this RegionalQuotaCapability.

        The number of cores used in the region.

        :return: The cores_used of this RegionalQuotaCapability.
        :rtype: int
        """
        return self._cores_used

    @cores_used.setter
    def cores_used(self, cores_used):
        """Sets the cores_used of this RegionalQuotaCapability.

        The number of cores used in the region.

        :param cores_used: The cores_used of this RegionalQuotaCapability.
        :type cores_used: int
        """

        self._cores_used = cores_used

    @property
    def region_name(self):
        """Gets the region_name of this RegionalQuotaCapability.

        The region name.

        :return: The region_name of this RegionalQuotaCapability.
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name):
        """Sets the region_name of this RegionalQuotaCapability.

        The region name.

        :param region_name: The region_name of this RegionalQuotaCapability.
        :type region_name: str
        """

        self._region_name = region_name
