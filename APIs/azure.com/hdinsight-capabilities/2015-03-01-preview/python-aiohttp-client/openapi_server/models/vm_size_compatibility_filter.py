# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VmSizeCompatibilityFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_flavors: List[str]=None, cluster_versions: List[str]=None, filter_mode: str=None, node_types: List[str]=None, regions: List[str]=None, vmsizes: List[str]=None):
        """VmSizeCompatibilityFilter - a model defined in OpenAPI

        :param cluster_flavors: The cluster_flavors of this VmSizeCompatibilityFilter.
        :param cluster_versions: The cluster_versions of this VmSizeCompatibilityFilter.
        :param filter_mode: The filter_mode of this VmSizeCompatibilityFilter.
        :param node_types: The node_types of this VmSizeCompatibilityFilter.
        :param regions: The regions of this VmSizeCompatibilityFilter.
        :param vmsizes: The vmsizes of this VmSizeCompatibilityFilter.
        """
        self.openapi_types = {
            'cluster_flavors': List[str],
            'cluster_versions': List[str],
            'filter_mode': str,
            'node_types': List[str],
            'regions': List[str],
            'vmsizes': List[str]
        }

        self.attribute_map = {
            'cluster_flavors': 'ClusterFlavors',
            'cluster_versions': 'ClusterVersions',
            'filter_mode': 'FilterMode',
            'node_types': 'NodeTypes',
            'regions': 'Regions',
            'vmsizes': 'vmsizes'
        }

        self._cluster_flavors = cluster_flavors
        self._cluster_versions = cluster_versions
        self._filter_mode = filter_mode
        self._node_types = node_types
        self._regions = regions
        self._vmsizes = vmsizes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VmSizeCompatibilityFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The vmSizeCompatibilityFilter of this VmSizeCompatibilityFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_flavors(self):
        """Gets the cluster_flavors of this VmSizeCompatibilityFilter.

        The list of cluster types available.

        :return: The cluster_flavors of this VmSizeCompatibilityFilter.
        :rtype: List[str]
        """
        return self._cluster_flavors

    @cluster_flavors.setter
    def cluster_flavors(self, cluster_flavors):
        """Sets the cluster_flavors of this VmSizeCompatibilityFilter.

        The list of cluster types available.

        :param cluster_flavors: The cluster_flavors of this VmSizeCompatibilityFilter.
        :type cluster_flavors: List[str]
        """

        self._cluster_flavors = cluster_flavors

    @property
    def cluster_versions(self):
        """Gets the cluster_versions of this VmSizeCompatibilityFilter.

        The list of cluster versions.

        :return: The cluster_versions of this VmSizeCompatibilityFilter.
        :rtype: List[str]
        """
        return self._cluster_versions

    @cluster_versions.setter
    def cluster_versions(self, cluster_versions):
        """Sets the cluster_versions of this VmSizeCompatibilityFilter.

        The list of cluster versions.

        :param cluster_versions: The cluster_versions of this VmSizeCompatibilityFilter.
        :type cluster_versions: List[str]
        """

        self._cluster_versions = cluster_versions

    @property
    def filter_mode(self):
        """Gets the filter_mode of this VmSizeCompatibilityFilter.

        The mode for the filter.

        :return: The filter_mode of this VmSizeCompatibilityFilter.
        :rtype: str
        """
        return self._filter_mode

    @filter_mode.setter
    def filter_mode(self, filter_mode):
        """Sets the filter_mode of this VmSizeCompatibilityFilter.

        The mode for the filter.

        :param filter_mode: The filter_mode of this VmSizeCompatibilityFilter.
        :type filter_mode: str
        """

        self._filter_mode = filter_mode

    @property
    def node_types(self):
        """Gets the node_types of this VmSizeCompatibilityFilter.

        The list of node types.

        :return: The node_types of this VmSizeCompatibilityFilter.
        :rtype: List[str]
        """
        return self._node_types

    @node_types.setter
    def node_types(self, node_types):
        """Sets the node_types of this VmSizeCompatibilityFilter.

        The list of node types.

        :param node_types: The node_types of this VmSizeCompatibilityFilter.
        :type node_types: List[str]
        """

        self._node_types = node_types

    @property
    def regions(self):
        """Gets the regions of this VmSizeCompatibilityFilter.

        The list of regions.

        :return: The regions of this VmSizeCompatibilityFilter.
        :rtype: List[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this VmSizeCompatibilityFilter.

        The list of regions.

        :param regions: The regions of this VmSizeCompatibilityFilter.
        :type regions: List[str]
        """

        self._regions = regions

    @property
    def vmsizes(self):
        """Gets the vmsizes of this VmSizeCompatibilityFilter.

        The list of virtual machine sizes.

        :return: The vmsizes of this VmSizeCompatibilityFilter.
        :rtype: List[str]
        """
        return self._vmsizes

    @vmsizes.setter
    def vmsizes(self, vmsizes):
        """Sets the vmsizes of this VmSizeCompatibilityFilter.

        The list of virtual machine sizes.

        :param vmsizes: The vmsizes of this VmSizeCompatibilityFilter.
        :type vmsizes: List[str]
        """

        self._vmsizes = vmsizes
