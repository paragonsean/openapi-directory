/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on the ApiVersionSet entity associated with your Azure API Management deployment. Using this entity you create and manage API Version Sets that are used to group APIs for consistent versioning.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApiVersionSetApi_H
#define OAI_OAIApiVersionSetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiVersionSet_Get_200_response.h"
#include "OAIApiVersionSet_ListByService_200_response.h"
#include "OAIApiVersionSet_ListByService_default_response.h"
#include "OAIApiVersionSet_Update_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApiVersionSetApi : public QObject {
    Q_OBJECT

public:
    OAIApiVersionSetApi(const int timeOut = 0);
    ~OAIApiVersionSetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  version_set_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiVersionSet_Get_200_response [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void apiVersionSetCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &version_set_id, const QString &api_version, const QString &subscription_id, const OAIApiVersionSet_Get_200_response &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  version_set_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiVersionSetGet(const QString &resource_group_name, const QString &service_name, const QString &version_set_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  version_set_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void apiVersionSetGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &version_set_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void apiVersionSetListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  version_set_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApiVersionSet_Update_request [required]
    */
    virtual void apiVersionSetUpdate(const QString &resource_group_name, const QString &service_name, const QString &version_set_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIApiVersionSet_Update_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiVersionSetCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void apiVersionSetGetCallback(OAIHttpRequestWorker *worker);
    void apiVersionSetGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void apiVersionSetListByServiceCallback(OAIHttpRequestWorker *worker);
    void apiVersionSetUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiVersionSetCreateOrUpdateSignal(OAIApiVersionSet_Get_200_response summary);
    void apiVersionSetGetSignal(OAIApiVersionSet_Get_200_response summary);
    void apiVersionSetGetEntityTagSignal();
    void apiVersionSetListByServiceSignal(OAIApiVersionSet_ListByService_200_response summary);
    void apiVersionSetUpdateSignal();


    void apiVersionSetCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiVersionSet_Get_200_response summary);
    void apiVersionSetGetSignalFull(OAIHttpRequestWorker *worker, OAIApiVersionSet_Get_200_response summary);
    void apiVersionSetGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void apiVersionSetListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIApiVersionSet_ListByService_200_response summary);
    void apiVersionSetUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiVersionSetCreateOrUpdateSignalError() instead")
    void apiVersionSetCreateOrUpdateSignalE(OAIApiVersionSet_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiVersionSetCreateOrUpdateSignalError(OAIApiVersionSet_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiVersionSetGetSignalError() instead")
    void apiVersionSetGetSignalE(OAIApiVersionSet_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiVersionSetGetSignalError(OAIApiVersionSet_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiVersionSetGetEntityTagSignalError() instead")
    void apiVersionSetGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiVersionSetGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiVersionSetListByServiceSignalError() instead")
    void apiVersionSetListByServiceSignalE(OAIApiVersionSet_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void apiVersionSetListByServiceSignalError(OAIApiVersionSet_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiVersionSetUpdateSignalError() instead")
    void apiVersionSetUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiVersionSetUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiVersionSetCreateOrUpdateSignalErrorFull() instead")
    void apiVersionSetCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiVersionSetCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiVersionSetGetSignalErrorFull() instead")
    void apiVersionSetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiVersionSetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiVersionSetGetEntityTagSignalErrorFull() instead")
    void apiVersionSetGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiVersionSetGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiVersionSetListByServiceSignalErrorFull() instead")
    void apiVersionSetListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiVersionSetListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiVersionSetUpdateSignalErrorFull() instead")
    void apiVersionSetUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiVersionSetUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
