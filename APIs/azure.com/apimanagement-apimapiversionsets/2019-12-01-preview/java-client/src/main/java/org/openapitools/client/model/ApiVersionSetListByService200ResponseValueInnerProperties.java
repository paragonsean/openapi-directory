/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on the ApiVersionSet entity associated with your Azure API Management deployment. Using this entity you create and manage API Version Sets that are used to group APIs for consistent versioning.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an API Version Set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:40.319903-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiVersionSetListByService200ResponseValueInnerProperties {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   */
  @JsonAdapter(VersioningSchemeEnum.Adapter.class)
  public enum VersioningSchemeEnum {
    SEGMENT("Segment"),
    
    QUERY("Query"),
    
    HEADER("Header");

    private String value;

    VersioningSchemeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersioningSchemeEnum fromValue(String value) {
      for (VersioningSchemeEnum b : VersioningSchemeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersioningSchemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersioningSchemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersioningSchemeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersioningSchemeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VersioningSchemeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSIONING_SCHEME = "versioningScheme";
  @SerializedName(SERIALIZED_NAME_VERSIONING_SCHEME)
  private VersioningSchemeEnum versioningScheme;

  public ApiVersionSetListByService200ResponseValueInnerProperties() {
  }

  public ApiVersionSetListByService200ResponseValueInnerProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Name of API Version Set
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ApiVersionSetListByService200ResponseValueInnerProperties versioningScheme(VersioningSchemeEnum versioningScheme) {
    this.versioningScheme = versioningScheme;
    return this;
  }

  /**
   * An value that determines where the API Version identifer will be located in a HTTP request.
   * @return versioningScheme
   */
  @javax.annotation.Nonnull
  public VersioningSchemeEnum getVersioningScheme() {
    return versioningScheme;
  }

  public void setVersioningScheme(VersioningSchemeEnum versioningScheme) {
    this.versioningScheme = versioningScheme;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiVersionSetListByService200ResponseValueInnerProperties apiVersionSetListByService200ResponseValueInnerProperties = (ApiVersionSetListByService200ResponseValueInnerProperties) o;
    return Objects.equals(this.displayName, apiVersionSetListByService200ResponseValueInnerProperties.displayName) &&
        Objects.equals(this.versioningScheme, apiVersionSetListByService200ResponseValueInnerProperties.versioningScheme);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, versioningScheme);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiVersionSetListByService200ResponseValueInnerProperties {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    versioningScheme: ").append(toIndentedString(versioningScheme)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("versioningScheme");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("versioningScheme");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiVersionSetListByService200ResponseValueInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiVersionSetListByService200ResponseValueInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiVersionSetListByService200ResponseValueInnerProperties is not found in the empty JSON string", ApiVersionSetListByService200ResponseValueInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiVersionSetListByService200ResponseValueInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiVersionSetListByService200ResponseValueInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApiVersionSetListByService200ResponseValueInnerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("versioningScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versioningScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versioningScheme").toString()));
      }
      // validate the required field `versioningScheme`
      VersioningSchemeEnum.validateJsonElement(jsonObj.get("versioningScheme"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiVersionSetListByService200ResponseValueInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiVersionSetListByService200ResponseValueInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiVersionSetListByService200ResponseValueInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiVersionSetListByService200ResponseValueInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiVersionSetListByService200ResponseValueInnerProperties>() {
           @Override
           public void write(JsonWriter out, ApiVersionSetListByService200ResponseValueInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiVersionSetListByService200ResponseValueInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiVersionSetListByService200ResponseValueInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiVersionSetListByService200ResponseValueInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ApiVersionSetListByService200ResponseValueInnerProperties
   */
  public static ApiVersionSetListByService200ResponseValueInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiVersionSetListByService200ResponseValueInnerProperties.class);
  }

  /**
   * Convert an instance of ApiVersionSetListByService200ResponseValueInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

