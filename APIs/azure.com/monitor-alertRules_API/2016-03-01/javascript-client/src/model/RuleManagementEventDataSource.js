/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RuleDataSource from './RuleDataSource';
import RuleManagementEventClaimsDataSource from './RuleManagementEventClaimsDataSource';

/**
 * The RuleManagementEventDataSource model module.
 * @module model/RuleManagementEventDataSource
 * @version 2016-03-01
 */
class RuleManagementEventDataSource {
    /**
     * Constructs a new <code>RuleManagementEventDataSource</code>.
     * A rule management event data source. The discriminator fields is always RuleManagementEventDataSource in this case.
     * @alias module:model/RuleManagementEventDataSource
     * @extends module:model/RuleDataSource
     * @implements module:model/RuleDataSource
     * @param odataType {String} specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource
     */
    constructor(odataType) { 
        RuleDataSource.initialize(this, odataType);
        RuleManagementEventDataSource.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
    }

    /**
     * Constructs a <code>RuleManagementEventDataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuleManagementEventDataSource} obj Optional instance to populate.
     * @return {module:model/RuleManagementEventDataSource} The populated <code>RuleManagementEventDataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleManagementEventDataSource();
            RuleDataSource.constructFromObject(data, obj);
            RuleDataSource.constructFromObject(data, obj);

            if (data.hasOwnProperty('claims')) {
                obj['claims'] = RuleManagementEventClaimsDataSource.constructFromObject(data['claims']);
            }
            if (data.hasOwnProperty('eventName')) {
                obj['eventName'] = ApiClient.convertToType(data['eventName'], 'String');
            }
            if (data.hasOwnProperty('eventSource')) {
                obj['eventSource'] = ApiClient.convertToType(data['eventSource'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('operationName')) {
                obj['operationName'] = ApiClient.convertToType(data['operationName'], 'String');
            }
            if (data.hasOwnProperty('resourceGroupName')) {
                obj['resourceGroupName'] = ApiClient.convertToType(data['resourceGroupName'], 'String');
            }
            if (data.hasOwnProperty('resourceProviderName')) {
                obj['resourceProviderName'] = ApiClient.convertToType(data['resourceProviderName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subStatus')) {
                obj['subStatus'] = ApiClient.convertToType(data['subStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuleManagementEventDataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuleManagementEventDataSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RuleManagementEventDataSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `claims`
        if (data['claims']) { // data not null
          RuleManagementEventClaimsDataSource.validateJSON(data['claims']);
        }
        // ensure the json data is a string
        if (data['eventName'] && !(typeof data['eventName'] === 'string' || data['eventName'] instanceof String)) {
            throw new Error("Expected the field `eventName` to be a primitive type in the JSON string but got " + data['eventName']);
        }
        // ensure the json data is a string
        if (data['eventSource'] && !(typeof data['eventSource'] === 'string' || data['eventSource'] instanceof String)) {
            throw new Error("Expected the field `eventSource` to be a primitive type in the JSON string but got " + data['eventSource']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['operationName'] && !(typeof data['operationName'] === 'string' || data['operationName'] instanceof String)) {
            throw new Error("Expected the field `operationName` to be a primitive type in the JSON string but got " + data['operationName']);
        }
        // ensure the json data is a string
        if (data['resourceGroupName'] && !(typeof data['resourceGroupName'] === 'string' || data['resourceGroupName'] instanceof String)) {
            throw new Error("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got " + data['resourceGroupName']);
        }
        // ensure the json data is a string
        if (data['resourceProviderName'] && !(typeof data['resourceProviderName'] === 'string' || data['resourceProviderName'] instanceof String)) {
            throw new Error("Expected the field `resourceProviderName` to be a primitive type in the JSON string but got " + data['resourceProviderName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subStatus'] && !(typeof data['subStatus'] === 'string' || data['subStatus'] instanceof String)) {
            throw new Error("Expected the field `subStatus` to be a primitive type in the JSON string but got " + data['subStatus']);
        }

        return true;
    }


}

RuleManagementEventDataSource.RequiredProperties = ["odata.type"];

/**
 * @member {module:model/RuleManagementEventClaimsDataSource} claims
 */
RuleManagementEventDataSource.prototype['claims'] = undefined;

/**
 * the event name.
 * @member {String} eventName
 */
RuleManagementEventDataSource.prototype['eventName'] = undefined;

/**
 * the event source.
 * @member {String} eventSource
 */
RuleManagementEventDataSource.prototype['eventSource'] = undefined;

/**
 * the level.
 * @member {String} level
 */
RuleManagementEventDataSource.prototype['level'] = undefined;

/**
 * The name of the operation that should be checked for. If no name is provided, any operation will match.
 * @member {String} operationName
 */
RuleManagementEventDataSource.prototype['operationName'] = undefined;

/**
 * the resource group name.
 * @member {String} resourceGroupName
 */
RuleManagementEventDataSource.prototype['resourceGroupName'] = undefined;

/**
 * the resource provider name.
 * @member {String} resourceProviderName
 */
RuleManagementEventDataSource.prototype['resourceProviderName'] = undefined;

/**
 * The status of the operation that should be checked for. If no status is provided, any status will match.
 * @member {String} status
 */
RuleManagementEventDataSource.prototype['status'] = undefined;

/**
 * the substatus.
 * @member {String} subStatus
 */
RuleManagementEventDataSource.prototype['subStatus'] = undefined;


// Implement RuleDataSource interface:
/**
 * specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource
 * @member {String} odata.type
 */
RuleDataSource.prototype['odata.type'] = undefined;
/**
 * the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
 * @member {String} resourceUri
 */
RuleDataSource.prototype['resourceUri'] = undefined;




export default RuleManagementEventDataSource;

