/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RuleDataSource from './RuleDataSource';

/**
 * The RuleMetricDataSource model module.
 * @module model/RuleMetricDataSource
 * @version 2016-03-01
 */
class RuleMetricDataSource {
    /**
     * Constructs a new <code>RuleMetricDataSource</code>.
     * A rule metric data source. The discriminator value is always RuleMetricDataSource in this case.
     * @alias module:model/RuleMetricDataSource
     * @extends module:model/RuleDataSource
     * @implements module:model/RuleDataSource
     * @param odataType {String} specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource
     */
    constructor(odataType) { 
        RuleDataSource.initialize(this, odataType);
        RuleMetricDataSource.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
    }

    /**
     * Constructs a <code>RuleMetricDataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuleMetricDataSource} obj Optional instance to populate.
     * @return {module:model/RuleMetricDataSource} The populated <code>RuleMetricDataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleMetricDataSource();
            RuleDataSource.constructFromObject(data, obj);
            RuleDataSource.constructFromObject(data, obj);

            if (data.hasOwnProperty('metricName')) {
                obj['metricName'] = ApiClient.convertToType(data['metricName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuleMetricDataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuleMetricDataSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RuleMetricDataSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['metricName'] && !(typeof data['metricName'] === 'string' || data['metricName'] instanceof String)) {
            throw new Error("Expected the field `metricName` to be a primitive type in the JSON string but got " + data['metricName']);
        }

        return true;
    }


}

RuleMetricDataSource.RequiredProperties = ["odata.type"];

/**
 * the name of the metric that defines what the rule monitors.
 * @member {String} metricName
 */
RuleMetricDataSource.prototype['metricName'] = undefined;


// Implement RuleDataSource interface:
/**
 * specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource
 * @member {String} odata.type
 */
RuleDataSource.prototype['odata.type'] = undefined;
/**
 * the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.
 * @member {String} resourceUri
 */
RuleDataSource.prototype['resourceUri'] = undefined;




export default RuleMetricDataSource;

