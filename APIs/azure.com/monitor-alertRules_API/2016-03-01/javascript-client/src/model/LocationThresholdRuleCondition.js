/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RuleCondition from './RuleCondition';
import RuleDataSource from './RuleDataSource';

/**
 * The LocationThresholdRuleCondition model module.
 * @module model/LocationThresholdRuleCondition
 * @version 2016-03-01
 */
class LocationThresholdRuleCondition {
    /**
     * Constructs a new <code>LocationThresholdRuleCondition</code>.
     * A rule condition based on a certain number of locations failing.
     * @alias module:model/LocationThresholdRuleCondition
     * @extends module:model/RuleCondition
     * @implements module:model/RuleCondition
     * @param odataType {String} specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
     */
    constructor(odataType) { 
        RuleCondition.initialize(this, odataType);
        LocationThresholdRuleCondition.initialize(this, odataType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, odataType) { 
        obj['failedLocationCount'] = failedLocationCount;
    }

    /**
     * Constructs a <code>LocationThresholdRuleCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationThresholdRuleCondition} obj Optional instance to populate.
     * @return {module:model/LocationThresholdRuleCondition} The populated <code>LocationThresholdRuleCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationThresholdRuleCondition();
            RuleCondition.constructFromObject(data, obj);
            RuleCondition.constructFromObject(data, obj);

            if (data.hasOwnProperty('failedLocationCount')) {
                obj['failedLocationCount'] = ApiClient.convertToType(data['failedLocationCount'], 'Number');
            }
            if (data.hasOwnProperty('windowSize')) {
                obj['windowSize'] = ApiClient.convertToType(data['windowSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationThresholdRuleCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationThresholdRuleCondition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LocationThresholdRuleCondition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['windowSize'] && !(typeof data['windowSize'] === 'string' || data['windowSize'] instanceof String)) {
            throw new Error("Expected the field `windowSize` to be a primitive type in the JSON string but got " + data['windowSize']);
        }

        return true;
    }


}

LocationThresholdRuleCondition.RequiredProperties = ["failedLocationCount", "odata.type"];

/**
 * the number of locations that must fail to activate the alert.
 * @member {Number} failedLocationCount
 */
LocationThresholdRuleCondition.prototype['failedLocationCount'] = undefined;

/**
 * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
 * @member {String} windowSize
 */
LocationThresholdRuleCondition.prototype['windowSize'] = undefined;


// Implement RuleCondition interface:
/**
 * @member {module:model/RuleDataSource} dataSource
 */
RuleCondition.prototype['dataSource'] = undefined;
/**
 * specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).
 * @member {String} odata.type
 */
RuleCondition.prototype['odata.type'] = undefined;




export default LocationThresholdRuleCondition;

