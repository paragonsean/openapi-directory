/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RuleAction from './RuleAction';
import RuleCondition from './RuleCondition';

/**
 * The AlertRule model module.
 * @module model/AlertRule
 * @version 2016-03-01
 */
class AlertRule {
    /**
     * Constructs a new <code>AlertRule</code>.
     * An alert rule.
     * @alias module:model/AlertRule
     * @param condition {module:model/RuleCondition} 
     * @param isEnabled {Boolean} the flag that indicates whether the alert rule is enabled.
     * @param name {String} the name of the alert rule.
     */
    constructor(condition, isEnabled, name) { 
        
        AlertRule.initialize(this, condition, isEnabled, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, condition, isEnabled, name) { 
        obj['condition'] = condition;
        obj['isEnabled'] = isEnabled;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>AlertRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertRule} obj Optional instance to populate.
     * @return {module:model/AlertRule} The populated <code>AlertRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertRule();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [RuleAction]);
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = RuleCondition.constructFromObject(data['condition']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('lastUpdatedTime')) {
                obj['lastUpdatedTime'] = ApiClient.convertToType(data['lastUpdatedTime'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlertRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                RuleAction.validateJSON(item);
            };
        }
        // validate the optional field `condition`
        if (data['condition']) { // data not null
          RuleCondition.validateJSON(data['condition']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

AlertRule.RequiredProperties = ["condition", "isEnabled", "name"];

/**
 * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
 * @member {Array.<module:model/RuleAction>} actions
 */
AlertRule.prototype['actions'] = undefined;

/**
 * @member {module:model/RuleCondition} condition
 */
AlertRule.prototype['condition'] = undefined;

/**
 * the description of the alert rule that will be included in the alert email.
 * @member {String} description
 */
AlertRule.prototype['description'] = undefined;

/**
 * the flag that indicates whether the alert rule is enabled.
 * @member {Boolean} isEnabled
 */
AlertRule.prototype['isEnabled'] = undefined;

/**
 * Last time the rule was updated in ISO8601 format.
 * @member {Date} lastUpdatedTime
 */
AlertRule.prototype['lastUpdatedTime'] = undefined;

/**
 * the name of the alert rule.
 * @member {String} name
 */
AlertRule.prototype['name'] = undefined;






export default AlertRule;

