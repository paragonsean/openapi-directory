# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_condition import RuleCondition
from openapi_server.models.rule_data_source import RuleDataSource
from openapi_server import util


class LocationThresholdRuleCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed_location_count: int=None, window_size: str=None, data_source: RuleDataSource=None, odata_type: str=None):
        """LocationThresholdRuleCondition - a model defined in OpenAPI

        :param failed_location_count: The failed_location_count of this LocationThresholdRuleCondition.
        :param window_size: The window_size of this LocationThresholdRuleCondition.
        :param data_source: The data_source of this LocationThresholdRuleCondition.
        :param odata_type: The odata_type of this LocationThresholdRuleCondition.
        """
        self.openapi_types = {
            'failed_location_count': int,
            'window_size': str,
            'data_source': RuleDataSource,
            'odata_type': str
        }

        self.attribute_map = {
            'failed_location_count': 'failedLocationCount',
            'window_size': 'windowSize',
            'data_source': 'dataSource',
            'odata_type': 'odata.type'
        }

        self._failed_location_count = failed_location_count
        self._window_size = window_size
        self._data_source = data_source
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationThresholdRuleCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationThresholdRuleCondition of this LocationThresholdRuleCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed_location_count(self):
        """Gets the failed_location_count of this LocationThresholdRuleCondition.

        the number of locations that must fail to activate the alert.

        :return: The failed_location_count of this LocationThresholdRuleCondition.
        :rtype: int
        """
        return self._failed_location_count

    @failed_location_count.setter
    def failed_location_count(self, failed_location_count):
        """Sets the failed_location_count of this LocationThresholdRuleCondition.

        the number of locations that must fail to activate the alert.

        :param failed_location_count: The failed_location_count of this LocationThresholdRuleCondition.
        :type failed_location_count: int
        """
        if failed_location_count is None:
            raise ValueError("Invalid value for `failed_location_count`, must not be `None`")
        if failed_location_count is not None and failed_location_count < 0:
            raise ValueError("Invalid value for `failed_location_count`, must be a value greater than or equal to `0`")

        self._failed_location_count = failed_location_count

    @property
    def window_size(self):
        """Gets the window_size of this LocationThresholdRuleCondition.

        the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.

        :return: The window_size of this LocationThresholdRuleCondition.
        :rtype: str
        """
        return self._window_size

    @window_size.setter
    def window_size(self, window_size):
        """Sets the window_size of this LocationThresholdRuleCondition.

        the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.

        :param window_size: The window_size of this LocationThresholdRuleCondition.
        :type window_size: str
        """

        self._window_size = window_size

    @property
    def data_source(self):
        """Gets the data_source of this LocationThresholdRuleCondition.


        :return: The data_source of this LocationThresholdRuleCondition.
        :rtype: RuleDataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this LocationThresholdRuleCondition.


        :param data_source: The data_source of this LocationThresholdRuleCondition.
        :type data_source: RuleDataSource
        """

        self._data_source = data_source

    @property
    def odata_type(self):
        """Gets the odata_type of this LocationThresholdRuleCondition.

        specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).

        :return: The odata_type of this LocationThresholdRuleCondition.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this LocationThresholdRuleCondition.

        specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).

        :param odata_type: The odata_type of this LocationThresholdRuleCondition.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
