# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_data_source import RuleDataSource
from openapi_server.models.rule_management_event_claims_data_source import RuleManagementEventClaimsDataSource
from openapi_server import util


class RuleManagementEventDataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, claims: RuleManagementEventClaimsDataSource=None, event_name: str=None, event_source: str=None, level: str=None, operation_name: str=None, resource_group_name: str=None, resource_provider_name: str=None, status: str=None, sub_status: str=None, odata_type: str=None, resource_uri: str=None):
        """RuleManagementEventDataSource - a model defined in OpenAPI

        :param claims: The claims of this RuleManagementEventDataSource.
        :param event_name: The event_name of this RuleManagementEventDataSource.
        :param event_source: The event_source of this RuleManagementEventDataSource.
        :param level: The level of this RuleManagementEventDataSource.
        :param operation_name: The operation_name of this RuleManagementEventDataSource.
        :param resource_group_name: The resource_group_name of this RuleManagementEventDataSource.
        :param resource_provider_name: The resource_provider_name of this RuleManagementEventDataSource.
        :param status: The status of this RuleManagementEventDataSource.
        :param sub_status: The sub_status of this RuleManagementEventDataSource.
        :param odata_type: The odata_type of this RuleManagementEventDataSource.
        :param resource_uri: The resource_uri of this RuleManagementEventDataSource.
        """
        self.openapi_types = {
            'claims': RuleManagementEventClaimsDataSource,
            'event_name': str,
            'event_source': str,
            'level': str,
            'operation_name': str,
            'resource_group_name': str,
            'resource_provider_name': str,
            'status': str,
            'sub_status': str,
            'odata_type': str,
            'resource_uri': str
        }

        self.attribute_map = {
            'claims': 'claims',
            'event_name': 'eventName',
            'event_source': 'eventSource',
            'level': 'level',
            'operation_name': 'operationName',
            'resource_group_name': 'resourceGroupName',
            'resource_provider_name': 'resourceProviderName',
            'status': 'status',
            'sub_status': 'subStatus',
            'odata_type': 'odata.type',
            'resource_uri': 'resourceUri'
        }

        self._claims = claims
        self._event_name = event_name
        self._event_source = event_source
        self._level = level
        self._operation_name = operation_name
        self._resource_group_name = resource_group_name
        self._resource_provider_name = resource_provider_name
        self._status = status
        self._sub_status = sub_status
        self._odata_type = odata_type
        self._resource_uri = resource_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleManagementEventDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleManagementEventDataSource of this RuleManagementEventDataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def claims(self):
        """Gets the claims of this RuleManagementEventDataSource.


        :return: The claims of this RuleManagementEventDataSource.
        :rtype: RuleManagementEventClaimsDataSource
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this RuleManagementEventDataSource.


        :param claims: The claims of this RuleManagementEventDataSource.
        :type claims: RuleManagementEventClaimsDataSource
        """

        self._claims = claims

    @property
    def event_name(self):
        """Gets the event_name of this RuleManagementEventDataSource.

        the event name.

        :return: The event_name of this RuleManagementEventDataSource.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this RuleManagementEventDataSource.

        the event name.

        :param event_name: The event_name of this RuleManagementEventDataSource.
        :type event_name: str
        """

        self._event_name = event_name

    @property
    def event_source(self):
        """Gets the event_source of this RuleManagementEventDataSource.

        the event source.

        :return: The event_source of this RuleManagementEventDataSource.
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this RuleManagementEventDataSource.

        the event source.

        :param event_source: The event_source of this RuleManagementEventDataSource.
        :type event_source: str
        """

        self._event_source = event_source

    @property
    def level(self):
        """Gets the level of this RuleManagementEventDataSource.

        the level.

        :return: The level of this RuleManagementEventDataSource.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this RuleManagementEventDataSource.

        the level.

        :param level: The level of this RuleManagementEventDataSource.
        :type level: str
        """

        self._level = level

    @property
    def operation_name(self):
        """Gets the operation_name of this RuleManagementEventDataSource.

        The name of the operation that should be checked for. If no name is provided, any operation will match.

        :return: The operation_name of this RuleManagementEventDataSource.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this RuleManagementEventDataSource.

        The name of the operation that should be checked for. If no name is provided, any operation will match.

        :param operation_name: The operation_name of this RuleManagementEventDataSource.
        :type operation_name: str
        """

        self._operation_name = operation_name

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this RuleManagementEventDataSource.

        the resource group name.

        :return: The resource_group_name of this RuleManagementEventDataSource.
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this RuleManagementEventDataSource.

        the resource group name.

        :param resource_group_name: The resource_group_name of this RuleManagementEventDataSource.
        :type resource_group_name: str
        """

        self._resource_group_name = resource_group_name

    @property
    def resource_provider_name(self):
        """Gets the resource_provider_name of this RuleManagementEventDataSource.

        the resource provider name.

        :return: The resource_provider_name of this RuleManagementEventDataSource.
        :rtype: str
        """
        return self._resource_provider_name

    @resource_provider_name.setter
    def resource_provider_name(self, resource_provider_name):
        """Sets the resource_provider_name of this RuleManagementEventDataSource.

        the resource provider name.

        :param resource_provider_name: The resource_provider_name of this RuleManagementEventDataSource.
        :type resource_provider_name: str
        """

        self._resource_provider_name = resource_provider_name

    @property
    def status(self):
        """Gets the status of this RuleManagementEventDataSource.

        The status of the operation that should be checked for. If no status is provided, any status will match.

        :return: The status of this RuleManagementEventDataSource.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RuleManagementEventDataSource.

        The status of the operation that should be checked for. If no status is provided, any status will match.

        :param status: The status of this RuleManagementEventDataSource.
        :type status: str
        """

        self._status = status

    @property
    def sub_status(self):
        """Gets the sub_status of this RuleManagementEventDataSource.

        the substatus.

        :return: The sub_status of this RuleManagementEventDataSource.
        :rtype: str
        """
        return self._sub_status

    @sub_status.setter
    def sub_status(self, sub_status):
        """Sets the sub_status of this RuleManagementEventDataSource.

        the substatus.

        :param sub_status: The sub_status of this RuleManagementEventDataSource.
        :type sub_status: str
        """

        self._sub_status = sub_status

    @property
    def odata_type(self):
        """Gets the odata_type of this RuleManagementEventDataSource.

        specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource

        :return: The odata_type of this RuleManagementEventDataSource.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this RuleManagementEventDataSource.

        specifies the type of data source. There are two types of rule data sources: RuleMetricDataSource and RuleManagementEventDataSource

        :param odata_type: The odata_type of this RuleManagementEventDataSource.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def resource_uri(self):
        """Gets the resource_uri of this RuleManagementEventDataSource.

        the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.

        :return: The resource_uri of this RuleManagementEventDataSource.
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this RuleManagementEventDataSource.

        the resource identifier of the resource the rule monitors. **NOTE**: this property cannot be updated for an existing rule.

        :param resource_uri: The resource_uri of this RuleManagementEventDataSource.
        :type resource_uri: str
        """

        self._resource_uri = resource_uri
