# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition_operator import ConditionOperator
from openapi_server import util


class ManagementEventAggregationCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operator: ConditionOperator=None, threshold: float=None, window_size: str=None):
        """ManagementEventAggregationCondition - a model defined in OpenAPI

        :param operator: The operator of this ManagementEventAggregationCondition.
        :param threshold: The threshold of this ManagementEventAggregationCondition.
        :param window_size: The window_size of this ManagementEventAggregationCondition.
        """
        self.openapi_types = {
            'operator': ConditionOperator,
            'threshold': float,
            'window_size': str
        }

        self.attribute_map = {
            'operator': 'operator',
            'threshold': 'threshold',
            'window_size': 'windowSize'
        }

        self._operator = operator
        self._threshold = threshold
        self._window_size = window_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagementEventAggregationCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagementEventAggregationCondition of this ManagementEventAggregationCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator(self):
        """Gets the operator of this ManagementEventAggregationCondition.


        :return: The operator of this ManagementEventAggregationCondition.
        :rtype: ConditionOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this ManagementEventAggregationCondition.


        :param operator: The operator of this ManagementEventAggregationCondition.
        :type operator: ConditionOperator
        """

        self._operator = operator

    @property
    def threshold(self):
        """Gets the threshold of this ManagementEventAggregationCondition.

        The threshold value that activates the alert.

        :return: The threshold of this ManagementEventAggregationCondition.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ManagementEventAggregationCondition.

        The threshold value that activates the alert.

        :param threshold: The threshold of this ManagementEventAggregationCondition.
        :type threshold: float
        """

        self._threshold = threshold

    @property
    def window_size(self):
        """Gets the window_size of this ManagementEventAggregationCondition.

        the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.

        :return: The window_size of this ManagementEventAggregationCondition.
        :rtype: str
        """
        return self._window_size

    @window_size.setter
    def window_size(self, window_size):
        """Sets the window_size of this ManagementEventAggregationCondition.

        the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.

        :param window_size: The window_size of this ManagementEventAggregationCondition.
        :type window_size: str
        """

        self._window_size = window_size
