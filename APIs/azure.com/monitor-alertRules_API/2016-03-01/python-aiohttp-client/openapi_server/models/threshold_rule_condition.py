# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition_operator import ConditionOperator
from openapi_server.models.rule_condition import RuleCondition
from openapi_server.models.rule_data_source import RuleDataSource
from openapi_server.models.time_aggregation_operator import TimeAggregationOperator
from openapi_server import util


class ThresholdRuleCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operator: ConditionOperator=None, threshold: float=None, time_aggregation: TimeAggregationOperator=None, window_size: str=None, data_source: RuleDataSource=None, odata_type: str=None):
        """ThresholdRuleCondition - a model defined in OpenAPI

        :param operator: The operator of this ThresholdRuleCondition.
        :param threshold: The threshold of this ThresholdRuleCondition.
        :param time_aggregation: The time_aggregation of this ThresholdRuleCondition.
        :param window_size: The window_size of this ThresholdRuleCondition.
        :param data_source: The data_source of this ThresholdRuleCondition.
        :param odata_type: The odata_type of this ThresholdRuleCondition.
        """
        self.openapi_types = {
            'operator': ConditionOperator,
            'threshold': float,
            'time_aggregation': TimeAggregationOperator,
            'window_size': str,
            'data_source': RuleDataSource,
            'odata_type': str
        }

        self.attribute_map = {
            'operator': 'operator',
            'threshold': 'threshold',
            'time_aggregation': 'timeAggregation',
            'window_size': 'windowSize',
            'data_source': 'dataSource',
            'odata_type': 'odata.type'
        }

        self._operator = operator
        self._threshold = threshold
        self._time_aggregation = time_aggregation
        self._window_size = window_size
        self._data_source = data_source
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThresholdRuleCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThresholdRuleCondition of this ThresholdRuleCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator(self):
        """Gets the operator of this ThresholdRuleCondition.


        :return: The operator of this ThresholdRuleCondition.
        :rtype: ConditionOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this ThresholdRuleCondition.


        :param operator: The operator of this ThresholdRuleCondition.
        :type operator: ConditionOperator
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")

        self._operator = operator

    @property
    def threshold(self):
        """Gets the threshold of this ThresholdRuleCondition.

        the threshold value that activates the alert.

        :return: The threshold of this ThresholdRuleCondition.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this ThresholdRuleCondition.

        the threshold value that activates the alert.

        :param threshold: The threshold of this ThresholdRuleCondition.
        :type threshold: float
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")

        self._threshold = threshold

    @property
    def time_aggregation(self):
        """Gets the time_aggregation of this ThresholdRuleCondition.


        :return: The time_aggregation of this ThresholdRuleCondition.
        :rtype: TimeAggregationOperator
        """
        return self._time_aggregation

    @time_aggregation.setter
    def time_aggregation(self, time_aggregation):
        """Sets the time_aggregation of this ThresholdRuleCondition.


        :param time_aggregation: The time_aggregation of this ThresholdRuleCondition.
        :type time_aggregation: TimeAggregationOperator
        """

        self._time_aggregation = time_aggregation

    @property
    def window_size(self):
        """Gets the window_size of this ThresholdRuleCondition.

        the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.

        :return: The window_size of this ThresholdRuleCondition.
        :rtype: str
        """
        return self._window_size

    @window_size.setter
    def window_size(self, window_size):
        """Sets the window_size of this ThresholdRuleCondition.

        the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.

        :param window_size: The window_size of this ThresholdRuleCondition.
        :type window_size: str
        """

        self._window_size = window_size

    @property
    def data_source(self):
        """Gets the data_source of this ThresholdRuleCondition.


        :return: The data_source of this ThresholdRuleCondition.
        :rtype: RuleDataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this ThresholdRuleCondition.


        :param data_source: The data_source of this ThresholdRuleCondition.
        :type data_source: RuleDataSource
        """

        self._data_source = data_source

    @property
    def odata_type(self):
        """Gets the odata_type of this ThresholdRuleCondition.

        specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).

        :return: The odata_type of this ThresholdRuleCondition.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this ThresholdRuleCondition.

        specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).

        :param odata_type: The odata_type of this ThresholdRuleCondition.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
