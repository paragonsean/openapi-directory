# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_action import RuleAction
from openapi_server import util


class RuleEmailAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_emails: List[str]=None, send_to_service_owners: bool=None, odata_type: str=None):
        """RuleEmailAction - a model defined in OpenAPI

        :param custom_emails: The custom_emails of this RuleEmailAction.
        :param send_to_service_owners: The send_to_service_owners of this RuleEmailAction.
        :param odata_type: The odata_type of this RuleEmailAction.
        """
        self.openapi_types = {
            'custom_emails': List[str],
            'send_to_service_owners': bool,
            'odata_type': str
        }

        self.attribute_map = {
            'custom_emails': 'customEmails',
            'send_to_service_owners': 'sendToServiceOwners',
            'odata_type': 'odata.type'
        }

        self._custom_emails = custom_emails
        self._send_to_service_owners = send_to_service_owners
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleEmailAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleEmailAction of this RuleEmailAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_emails(self):
        """Gets the custom_emails of this RuleEmailAction.

        the list of administrator's custom email addresses to notify of the activation of the alert.

        :return: The custom_emails of this RuleEmailAction.
        :rtype: List[str]
        """
        return self._custom_emails

    @custom_emails.setter
    def custom_emails(self, custom_emails):
        """Sets the custom_emails of this RuleEmailAction.

        the list of administrator's custom email addresses to notify of the activation of the alert.

        :param custom_emails: The custom_emails of this RuleEmailAction.
        :type custom_emails: List[str]
        """

        self._custom_emails = custom_emails

    @property
    def send_to_service_owners(self):
        """Gets the send_to_service_owners of this RuleEmailAction.

        Whether the administrators (service and co-administrators) of the service should be notified when the alert is activated.

        :return: The send_to_service_owners of this RuleEmailAction.
        :rtype: bool
        """
        return self._send_to_service_owners

    @send_to_service_owners.setter
    def send_to_service_owners(self, send_to_service_owners):
        """Sets the send_to_service_owners of this RuleEmailAction.

        Whether the administrators (service and co-administrators) of the service should be notified when the alert is activated.

        :param send_to_service_owners: The send_to_service_owners of this RuleEmailAction.
        :type send_to_service_owners: bool
        """

        self._send_to_service_owners = send_to_service_owners

    @property
    def odata_type(self):
        """Gets the odata_type of this RuleEmailAction.

        specifies the type of the action. There are two types of actions: RuleEmailAction and RuleWebhookAction.

        :return: The odata_type of this RuleEmailAction.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this RuleEmailAction.

        specifies the type of the action. There are two types of actions: RuleEmailAction and RuleWebhookAction.

        :param odata_type: The odata_type of this RuleEmailAction.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
