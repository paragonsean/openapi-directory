# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_action import RuleAction
from openapi_server.models.rule_condition import RuleCondition
from openapi_server import util


class AlertRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[RuleAction]=None, condition: RuleCondition=None, description: str=None, is_enabled: bool=None, last_updated_time: datetime=None, name: str=None):
        """AlertRule - a model defined in OpenAPI

        :param actions: The actions of this AlertRule.
        :param condition: The condition of this AlertRule.
        :param description: The description of this AlertRule.
        :param is_enabled: The is_enabled of this AlertRule.
        :param last_updated_time: The last_updated_time of this AlertRule.
        :param name: The name of this AlertRule.
        """
        self.openapi_types = {
            'actions': List[RuleAction],
            'condition': RuleCondition,
            'description': str,
            'is_enabled': bool,
            'last_updated_time': datetime,
            'name': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'condition': 'condition',
            'description': 'description',
            'is_enabled': 'isEnabled',
            'last_updated_time': 'lastUpdatedTime',
            'name': 'name'
        }

        self._actions = actions
        self._condition = condition
        self._description = description
        self._is_enabled = is_enabled
        self._last_updated_time = last_updated_time
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertRule of this AlertRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this AlertRule.

        the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.

        :return: The actions of this AlertRule.
        :rtype: List[RuleAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AlertRule.

        the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.

        :param actions: The actions of this AlertRule.
        :type actions: List[RuleAction]
        """

        self._actions = actions

    @property
    def condition(self):
        """Gets the condition of this AlertRule.


        :return: The condition of this AlertRule.
        :rtype: RuleCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this AlertRule.


        :param condition: The condition of this AlertRule.
        :type condition: RuleCondition
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition

    @property
    def description(self):
        """Gets the description of this AlertRule.

        the description of the alert rule that will be included in the alert email.

        :return: The description of this AlertRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertRule.

        the description of the alert rule that will be included in the alert email.

        :param description: The description of this AlertRule.
        :type description: str
        """

        self._description = description

    @property
    def is_enabled(self):
        """Gets the is_enabled of this AlertRule.

        the flag that indicates whether the alert rule is enabled.

        :return: The is_enabled of this AlertRule.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this AlertRule.

        the flag that indicates whether the alert rule is enabled.

        :param is_enabled: The is_enabled of this AlertRule.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this AlertRule.

        Last time the rule was updated in ISO8601 format.

        :return: The last_updated_time of this AlertRule.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this AlertRule.

        Last time the rule was updated in ISO8601 format.

        :param last_updated_time: The last_updated_time of this AlertRule.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def name(self):
        """Gets the name of this AlertRule.

        the name of the alert rule.

        :return: The name of this AlertRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertRule.

        the name of the alert rule.

        :param name: The name of this AlertRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
