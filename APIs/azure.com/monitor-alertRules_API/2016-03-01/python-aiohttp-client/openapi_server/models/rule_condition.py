# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_data_source import RuleDataSource
from openapi_server import util


class RuleCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source: RuleDataSource=None, odata_type: str=None):
        """RuleCondition - a model defined in OpenAPI

        :param data_source: The data_source of this RuleCondition.
        :param odata_type: The odata_type of this RuleCondition.
        """
        self.openapi_types = {
            'data_source': RuleDataSource,
            'odata_type': str
        }

        self.attribute_map = {
            'data_source': 'dataSource',
            'odata_type': 'odata.type'
        }

        self._data_source = data_source
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleCondition of this RuleCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source(self):
        """Gets the data_source of this RuleCondition.


        :return: The data_source of this RuleCondition.
        :rtype: RuleDataSource
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this RuleCondition.


        :param data_source: The data_source of this RuleCondition.
        :type data_source: RuleDataSource
        """

        self._data_source = data_source

    @property
    def odata_type(self):
        """Gets the odata_type of this RuleCondition.

        specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).

        :return: The odata_type of this RuleCondition.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this RuleCondition.

        specifies the type of condition. This can be one of three types: ManagementEventRuleCondition (occurrences of management events), LocationThresholdRuleCondition (based on the number of failures of a web test), and ThresholdRuleCondition (based on the threshold of a metric).

        :param odata_type: The odata_type of this RuleCondition.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
