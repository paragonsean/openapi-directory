# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_action import RuleAction
from openapi_server import util


class RuleWebhookAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, properties: Dict[str, str]=None, service_uri: str=None, odata_type: str=None):
        """RuleWebhookAction - a model defined in OpenAPI

        :param properties: The properties of this RuleWebhookAction.
        :param service_uri: The service_uri of this RuleWebhookAction.
        :param odata_type: The odata_type of this RuleWebhookAction.
        """
        self.openapi_types = {
            'properties': Dict[str, str],
            'service_uri': str,
            'odata_type': str
        }

        self.attribute_map = {
            'properties': 'properties',
            'service_uri': 'serviceUri',
            'odata_type': 'odata.type'
        }

        self._properties = properties
        self._service_uri = service_uri
        self._odata_type = odata_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleWebhookAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleWebhookAction of this RuleWebhookAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def properties(self):
        """Gets the properties of this RuleWebhookAction.

        the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.

        :return: The properties of this RuleWebhookAction.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this RuleWebhookAction.

        the dictionary of custom properties to include with the post operation. These data are appended to the webhook payload.

        :param properties: The properties of this RuleWebhookAction.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def service_uri(self):
        """Gets the service_uri of this RuleWebhookAction.

        the service uri to Post the notification when the alert activates or resolves.

        :return: The service_uri of this RuleWebhookAction.
        :rtype: str
        """
        return self._service_uri

    @service_uri.setter
    def service_uri(self, service_uri):
        """Sets the service_uri of this RuleWebhookAction.

        the service uri to Post the notification when the alert activates or resolves.

        :param service_uri: The service_uri of this RuleWebhookAction.
        :type service_uri: str
        """

        self._service_uri = service_uri

    @property
    def odata_type(self):
        """Gets the odata_type of this RuleWebhookAction.

        specifies the type of the action. There are two types of actions: RuleEmailAction and RuleWebhookAction.

        :return: The odata_type of this RuleWebhookAction.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this RuleWebhookAction.

        specifies the type of the action. There are two types of actions: RuleEmailAction and RuleWebhookAction.

        :param odata_type: The odata_type of this RuleWebhookAction.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type
