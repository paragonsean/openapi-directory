/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RuleDataSource;
import org.openapitools.client.model.RuleManagementEventClaimsDataSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rule management event data source. The discriminator fields is always RuleManagementEventDataSource in this case.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:26.267004-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuleManagementEventDataSource extends RuleDataSource {
  public static final String SERIALIZED_NAME_CLAIMS = "claims";
  @SerializedName(SERIALIZED_NAME_CLAIMS)
  private RuleManagementEventClaimsDataSource claims;

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_EVENT_SOURCE = "eventSource";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE)
  private String eventSource;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private String level;

  public static final String SERIALIZED_NAME_OPERATION_NAME = "operationName";
  @SerializedName(SERIALIZED_NAME_OPERATION_NAME)
  private String operationName;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_NAME = "resourceGroupName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_NAME)
  private String resourceGroupName;

  public static final String SERIALIZED_NAME_RESOURCE_PROVIDER_NAME = "resourceProviderName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PROVIDER_NAME)
  private String resourceProviderName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUB_STATUS = "subStatus";
  @SerializedName(SERIALIZED_NAME_SUB_STATUS)
  private String subStatus;

  public RuleManagementEventDataSource() {
    this.odataType = this.getClass().getSimpleName();
  }

  public RuleManagementEventDataSource claims(RuleManagementEventClaimsDataSource claims) {
    this.claims = claims;
    return this;
  }

  /**
   * Get claims
   * @return claims
   */
  @javax.annotation.Nullable
  public RuleManagementEventClaimsDataSource getClaims() {
    return claims;
  }

  public void setClaims(RuleManagementEventClaimsDataSource claims) {
    this.claims = claims;
  }


  public RuleManagementEventDataSource eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * the event name.
   * @return eventName
   */
  @javax.annotation.Nullable
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public RuleManagementEventDataSource eventSource(String eventSource) {
    this.eventSource = eventSource;
    return this;
  }

  /**
   * the event source.
   * @return eventSource
   */
  @javax.annotation.Nullable
  public String getEventSource() {
    return eventSource;
  }

  public void setEventSource(String eventSource) {
    this.eventSource = eventSource;
  }


  public RuleManagementEventDataSource level(String level) {
    this.level = level;
    return this;
  }

  /**
   * the level.
   * @return level
   */
  @javax.annotation.Nullable
  public String getLevel() {
    return level;
  }

  public void setLevel(String level) {
    this.level = level;
  }


  public RuleManagementEventDataSource operationName(String operationName) {
    this.operationName = operationName;
    return this;
  }

  /**
   * The name of the operation that should be checked for. If no name is provided, any operation will match.
   * @return operationName
   */
  @javax.annotation.Nullable
  public String getOperationName() {
    return operationName;
  }

  public void setOperationName(String operationName) {
    this.operationName = operationName;
  }


  public RuleManagementEventDataSource resourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

  /**
   * the resource group name.
   * @return resourceGroupName
   */
  @javax.annotation.Nullable
  public String getResourceGroupName() {
    return resourceGroupName;
  }

  public void setResourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
  }


  public RuleManagementEventDataSource resourceProviderName(String resourceProviderName) {
    this.resourceProviderName = resourceProviderName;
    return this;
  }

  /**
   * the resource provider name.
   * @return resourceProviderName
   */
  @javax.annotation.Nullable
  public String getResourceProviderName() {
    return resourceProviderName;
  }

  public void setResourceProviderName(String resourceProviderName) {
    this.resourceProviderName = resourceProviderName;
  }


  public RuleManagementEventDataSource status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the operation that should be checked for. If no status is provided, any status will match.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public RuleManagementEventDataSource subStatus(String subStatus) {
    this.subStatus = subStatus;
    return this;
  }

  /**
   * the substatus.
   * @return subStatus
   */
  @javax.annotation.Nullable
  public String getSubStatus() {
    return subStatus;
  }

  public void setSubStatus(String subStatus) {
    this.subStatus = subStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleManagementEventDataSource ruleManagementEventDataSource = (RuleManagementEventDataSource) o;
    return Objects.equals(this.claims, ruleManagementEventDataSource.claims) &&
        Objects.equals(this.eventName, ruleManagementEventDataSource.eventName) &&
        Objects.equals(this.eventSource, ruleManagementEventDataSource.eventSource) &&
        Objects.equals(this.level, ruleManagementEventDataSource.level) &&
        Objects.equals(this.operationName, ruleManagementEventDataSource.operationName) &&
        Objects.equals(this.resourceGroupName, ruleManagementEventDataSource.resourceGroupName) &&
        Objects.equals(this.resourceProviderName, ruleManagementEventDataSource.resourceProviderName) &&
        Objects.equals(this.status, ruleManagementEventDataSource.status) &&
        Objects.equals(this.subStatus, ruleManagementEventDataSource.subStatus) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claims, eventName, eventSource, level, operationName, resourceGroupName, resourceProviderName, status, subStatus, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleManagementEventDataSource {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    eventSource: ").append(toIndentedString(eventSource)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    operationName: ").append(toIndentedString(operationName)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    resourceProviderName: ").append(toIndentedString(resourceProviderName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subStatus: ").append(toIndentedString(subStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("odata.type");
    openapiFields.add("resourceUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleManagementEventDataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleManagementEventDataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleManagementEventDataSource is not found in the empty JSON string", RuleManagementEventDataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleManagementEventDataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleManagementEventDataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleManagementEventDataSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleManagementEventDataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleManagementEventDataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleManagementEventDataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleManagementEventDataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleManagementEventDataSource>() {
           @Override
           public void write(JsonWriter out, RuleManagementEventDataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleManagementEventDataSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleManagementEventDataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleManagementEventDataSource
   * @throws IOException if the JSON string is invalid with respect to RuleManagementEventDataSource
   */
  public static RuleManagementEventDataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleManagementEventDataSource.class);
  }

  /**
   * Convert an instance of RuleManagementEventDataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

