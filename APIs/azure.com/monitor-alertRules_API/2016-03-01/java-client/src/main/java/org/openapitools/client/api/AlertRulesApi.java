/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AlertRuleResource;
import org.openapitools.client.model.AlertRuleResourceCollection;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlertRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for alertRulesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an alert rule </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created alert rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertRulesCreateOrUpdateCall(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, AlertRuleResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertRulesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, AlertRuleResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling alertRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertRulesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling alertRulesCreateOrUpdate(Async)");
        }

        return alertRulesCreateOrUpdateCall(resourceGroupName, ruleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates an alert rule.
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @return AlertRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an alert rule </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created alert rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertRuleResource alertRulesCreateOrUpdate(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, AlertRuleResource parameters) throws ApiException {
        ApiResponse<AlertRuleResource> localVarResp = alertRulesCreateOrUpdateWithHttpInfo(resourceGroupName, ruleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an alert rule.
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @return ApiResponse&lt;AlertRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an alert rule </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created alert rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertRuleResource> alertRulesCreateOrUpdateWithHttpInfo(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, AlertRuleResource parameters) throws ApiException {
        okhttp3.Call localVarCall = alertRulesCreateOrUpdateValidateBeforeCall(resourceGroupName, ruleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<AlertRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an alert rule.
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to update an alert rule </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created alert rule </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertRulesCreateOrUpdateAsync(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, AlertRuleResource parameters, final ApiCallback<AlertRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertRulesCreateOrUpdateValidateBeforeCall(resourceGroupName, ruleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<AlertRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertRulesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete an alert rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content: the request was successful, but the response is empty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertRulesDeleteCall(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertRulesDeleteValidateBeforeCall(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertRulesDelete(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling alertRulesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertRulesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertRulesDelete(Async)");
        }

        return alertRulesDeleteCall(resourceGroupName, ruleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes an alert rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete an alert rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content: the request was successful, but the response is empty </td><td>  -  </td></tr>
     </table>
     */
    public void alertRulesDelete(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        alertRulesDeleteWithHttpInfo(resourceGroupName, ruleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes an alert rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete an alert rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content: the request was successful, but the response is empty </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertRulesDeleteWithHttpInfo(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = alertRulesDeleteValidateBeforeCall(resourceGroupName, ruleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an alert rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete an alert rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content: the request was successful, but the response is empty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertRulesDeleteAsync(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertRulesDeleteValidateBeforeCall(resourceGroupName, ruleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertRulesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get an alert rule </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertRulesGetCall(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertRulesGetValidateBeforeCall(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertRulesGet(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling alertRulesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertRulesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertRulesGet(Async)");
        }

        return alertRulesGetCall(resourceGroupName, ruleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets an alert rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @return AlertRuleResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get an alert rule </td><td>  -  </td></tr>
     </table>
     */
    public AlertRuleResource alertRulesGet(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AlertRuleResource> localVarResp = alertRulesGetWithHttpInfo(resourceGroupName, ruleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an alert rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @return ApiResponse&lt;AlertRuleResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get an alert rule </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertRuleResource> alertRulesGetWithHttpInfo(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = alertRulesGetValidateBeforeCall(resourceGroupName, ruleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AlertRuleResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an alert rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to get an alert rule </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertRulesGetAsync(String resourceGroupName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback<AlertRuleResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertRulesGetValidateBeforeCall(resourceGroupName, ruleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AlertRuleResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertRulesListByResourceGroup
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertRulesListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.insights/alertrules"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertRulesListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertRulesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertRulesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertRulesListByResourceGroup(Async)");
        }

        return alertRulesListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * List the alert rules within a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @return AlertRuleResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
     </table>
     */
    public AlertRuleResourceCollection alertRulesListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AlertRuleResourceCollection> localVarResp = alertRulesListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * List the alert rules within a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @return ApiResponse&lt;AlertRuleResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertRuleResourceCollection> alertRulesListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = alertRulesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AlertRuleResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the alert rules within a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertRulesListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<AlertRuleResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertRulesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AlertRuleResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertRulesListBySubscription
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertRulesListBySubscriptionCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/microsoft.insights/alertrules"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertRulesListBySubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertRulesListBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertRulesListBySubscription(Async)");
        }

        return alertRulesListBySubscriptionCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * List the alert rules within a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @return AlertRuleResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
     </table>
     */
    public AlertRuleResourceCollection alertRulesListBySubscription(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AlertRuleResourceCollection> localVarResp = alertRulesListBySubscriptionWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * List the alert rules within a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @return ApiResponse&lt;AlertRuleResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertRuleResourceCollection> alertRulesListBySubscriptionWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = alertRulesListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AlertRuleResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the alert rules within a subscription.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId The Azure subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of alert rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertRulesListBySubscriptionAsync(String apiVersion, String subscriptionId, final ApiCallback<AlertRuleResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertRulesListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AlertRuleResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
