/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConditionOperator;
import org.openapitools.client.model.RuleCondition;
import org.openapitools.client.model.RuleDataSource;
import org.openapitools.client.model.TimeAggregationOperator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rule condition based on a metric crossing a threshold.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:26.267004-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ThresholdRuleCondition extends RuleCondition {
  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private ConditionOperator operator;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Double threshold;

  public static final String SERIALIZED_NAME_TIME_AGGREGATION = "timeAggregation";
  @SerializedName(SERIALIZED_NAME_TIME_AGGREGATION)
  private TimeAggregationOperator timeAggregation;

  public static final String SERIALIZED_NAME_WINDOW_SIZE = "windowSize";
  @SerializedName(SERIALIZED_NAME_WINDOW_SIZE)
  private String windowSize;

  public ThresholdRuleCondition() {
    this.odataType = this.getClass().getSimpleName();
  }

  public ThresholdRuleCondition operator(ConditionOperator operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   */
  @javax.annotation.Nonnull
  public ConditionOperator getOperator() {
    return operator;
  }

  public void setOperator(ConditionOperator operator) {
    this.operator = operator;
  }


  public ThresholdRuleCondition threshold(Double threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * the threshold value that activates the alert.
   * @return threshold
   */
  @javax.annotation.Nonnull
  public Double getThreshold() {
    return threshold;
  }

  public void setThreshold(Double threshold) {
    this.threshold = threshold;
  }


  public ThresholdRuleCondition timeAggregation(TimeAggregationOperator timeAggregation) {
    this.timeAggregation = timeAggregation;
    return this;
  }

  /**
   * Get timeAggregation
   * @return timeAggregation
   */
  @javax.annotation.Nullable
  public TimeAggregationOperator getTimeAggregation() {
    return timeAggregation;
  }

  public void setTimeAggregation(TimeAggregationOperator timeAggregation) {
    this.timeAggregation = timeAggregation;
  }


  public ThresholdRuleCondition windowSize(String windowSize) {
    this.windowSize = windowSize;
    return this;
  }

  /**
   * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold. If specified then it must be between 5 minutes and 1 day.
   * @return windowSize
   */
  @javax.annotation.Nullable
  public String getWindowSize() {
    return windowSize;
  }

  public void setWindowSize(String windowSize) {
    this.windowSize = windowSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThresholdRuleCondition thresholdRuleCondition = (ThresholdRuleCondition) o;
    return Objects.equals(this.operator, thresholdRuleCondition.operator) &&
        Objects.equals(this.threshold, thresholdRuleCondition.threshold) &&
        Objects.equals(this.timeAggregation, thresholdRuleCondition.timeAggregation) &&
        Objects.equals(this.windowSize, thresholdRuleCondition.windowSize) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operator, threshold, timeAggregation, windowSize, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThresholdRuleCondition {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    timeAggregation: ").append(toIndentedString(timeAggregation)).append("\n");
    sb.append("    windowSize: ").append(toIndentedString(windowSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSource");
    openapiFields.add("odata.type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operator");
    openapiRequiredFields.add("threshold");
    openapiRequiredFields.add("odata.type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThresholdRuleCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThresholdRuleCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThresholdRuleCondition is not found in the empty JSON string", ThresholdRuleCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThresholdRuleCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThresholdRuleCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ThresholdRuleCondition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThresholdRuleCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThresholdRuleCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThresholdRuleCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThresholdRuleCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<ThresholdRuleCondition>() {
           @Override
           public void write(JsonWriter out, ThresholdRuleCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThresholdRuleCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThresholdRuleCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThresholdRuleCondition
   * @throws IOException if the JSON string is invalid with respect to ThresholdRuleCondition
   */
  public static ThresholdRuleCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThresholdRuleCondition.class);
  }

  /**
   * Convert an instance of ThresholdRuleCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

