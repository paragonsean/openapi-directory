/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeAggregationOperator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeAggregationOperator::OAITimeAggregationOperator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeAggregationOperator::OAITimeAggregationOperator() {
    this->initializeModel();
}

OAITimeAggregationOperator::~OAITimeAggregationOperator() {}

void OAITimeAggregationOperator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITimeAggregationOperator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITimeAggregationOperator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Average", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeAggregationOperator::AVERAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Minimum", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeAggregationOperator::MINIMUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Maximum", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeAggregationOperator::MAXIMUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Total", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeAggregationOperator::TOTAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Last", Qt::CaseInsensitive) == 0) {
        m_value = eOAITimeAggregationOperator::LAST;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITimeAggregationOperator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITimeAggregationOperator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITimeAggregationOperator::AVERAGE:
            val = "Average";
            break;
        case eOAITimeAggregationOperator::MINIMUM:
            val = "Minimum";
            break;
        case eOAITimeAggregationOperator::MAXIMUM:
            val = "Maximum";
            break;
        case eOAITimeAggregationOperator::TOTAL:
            val = "Total";
            break;
        case eOAITimeAggregationOperator::LAST:
            val = "Last";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITimeAggregationOperator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITimeAggregationOperator::eOAITimeAggregationOperator OAITimeAggregationOperator::getValue() const {
    return m_value;
}

void OAITimeAggregationOperator::setValue(const OAITimeAggregationOperator::eOAITimeAggregationOperator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITimeAggregationOperator::isSet() const {
    
    return m_value_isSet;
}

bool OAITimeAggregationOperator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
