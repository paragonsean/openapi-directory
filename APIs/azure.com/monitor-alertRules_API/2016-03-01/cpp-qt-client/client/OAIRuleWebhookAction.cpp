/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleWebhookAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleWebhookAction::OAIRuleWebhookAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleWebhookAction::OAIRuleWebhookAction() {
    this->initializeModel();
}

OAIRuleWebhookAction::~OAIRuleWebhookAction() {}

void OAIRuleWebhookAction::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_service_uri_isSet = false;
    m_service_uri_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;
}

void OAIRuleWebhookAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleWebhookAction::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_service_uri_isValid = ::OpenAPI::fromJsonValue(m_service_uri, json[QString("serviceUri")]);
    m_service_uri_isSet = !json[QString("serviceUri")].isNull() && m_service_uri_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("odata.type")]);
    m_odata_type_isSet = !json[QString("odata.type")].isNull() && m_odata_type_isValid;
}

QString OAIRuleWebhookAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleWebhookAction::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_service_uri_isSet) {
        obj.insert(QString("serviceUri"), ::OpenAPI::toJsonValue(m_service_uri));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    return obj;
}

QMap<QString, QString> OAIRuleWebhookAction::getProperties() const {
    return m_properties;
}
void OAIRuleWebhookAction::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIRuleWebhookAction::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIRuleWebhookAction::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIRuleWebhookAction::getServiceUri() const {
    return m_service_uri;
}
void OAIRuleWebhookAction::setServiceUri(const QString &service_uri) {
    m_service_uri = service_uri;
    m_service_uri_isSet = true;
}

bool OAIRuleWebhookAction::is_service_uri_Set() const{
    return m_service_uri_isSet;
}

bool OAIRuleWebhookAction::is_service_uri_Valid() const{
    return m_service_uri_isValid;
}

QString OAIRuleWebhookAction::getOdataType() const {
    return m_odata_type;
}
void OAIRuleWebhookAction::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIRuleWebhookAction::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIRuleWebhookAction::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

bool OAIRuleWebhookAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleWebhookAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
