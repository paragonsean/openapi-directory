/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleManagementEventDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleManagementEventDataSource::OAIRuleManagementEventDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleManagementEventDataSource::OAIRuleManagementEventDataSource() {
    this->initializeModel();
}

OAIRuleManagementEventDataSource::~OAIRuleManagementEventDataSource() {}

void OAIRuleManagementEventDataSource::initializeModel() {

    m_claims_isSet = false;
    m_claims_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_operation_name_isSet = false;
    m_operation_name_isValid = false;

    m_resource_group_name_isSet = false;
    m_resource_group_name_isValid = false;

    m_resource_provider_name_isSet = false;
    m_resource_provider_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_status_isSet = false;
    m_sub_status_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;

    m_resource_uri_isSet = false;
    m_resource_uri_isValid = false;
}

void OAIRuleManagementEventDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleManagementEventDataSource::fromJsonObject(QJsonObject json) {

    m_claims_isValid = ::OpenAPI::fromJsonValue(m_claims, json[QString("claims")]);
    m_claims_isSet = !json[QString("claims")].isNull() && m_claims_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("eventSource")]);
    m_event_source_isSet = !json[QString("eventSource")].isNull() && m_event_source_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_operation_name_isValid = ::OpenAPI::fromJsonValue(m_operation_name, json[QString("operationName")]);
    m_operation_name_isSet = !json[QString("operationName")].isNull() && m_operation_name_isValid;

    m_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_resource_group_name, json[QString("resourceGroupName")]);
    m_resource_group_name_isSet = !json[QString("resourceGroupName")].isNull() && m_resource_group_name_isValid;

    m_resource_provider_name_isValid = ::OpenAPI::fromJsonValue(m_resource_provider_name, json[QString("resourceProviderName")]);
    m_resource_provider_name_isSet = !json[QString("resourceProviderName")].isNull() && m_resource_provider_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sub_status_isValid = ::OpenAPI::fromJsonValue(m_sub_status, json[QString("subStatus")]);
    m_sub_status_isSet = !json[QString("subStatus")].isNull() && m_sub_status_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("odata.type")]);
    m_odata_type_isSet = !json[QString("odata.type")].isNull() && m_odata_type_isValid;

    m_resource_uri_isValid = ::OpenAPI::fromJsonValue(m_resource_uri, json[QString("resourceUri")]);
    m_resource_uri_isSet = !json[QString("resourceUri")].isNull() && m_resource_uri_isValid;
}

QString OAIRuleManagementEventDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleManagementEventDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_claims.isSet()) {
        obj.insert(QString("claims"), ::OpenAPI::toJsonValue(m_claims));
    }
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_event_source_isSet) {
        obj.insert(QString("eventSource"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_operation_name_isSet) {
        obj.insert(QString("operationName"), ::OpenAPI::toJsonValue(m_operation_name));
    }
    if (m_resource_group_name_isSet) {
        obj.insert(QString("resourceGroupName"), ::OpenAPI::toJsonValue(m_resource_group_name));
    }
    if (m_resource_provider_name_isSet) {
        obj.insert(QString("resourceProviderName"), ::OpenAPI::toJsonValue(m_resource_provider_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_status_isSet) {
        obj.insert(QString("subStatus"), ::OpenAPI::toJsonValue(m_sub_status));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    if (m_resource_uri_isSet) {
        obj.insert(QString("resourceUri"), ::OpenAPI::toJsonValue(m_resource_uri));
    }
    return obj;
}

OAIRuleManagementEventClaimsDataSource OAIRuleManagementEventDataSource::getClaims() const {
    return m_claims;
}
void OAIRuleManagementEventDataSource::setClaims(const OAIRuleManagementEventClaimsDataSource &claims) {
    m_claims = claims;
    m_claims_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_claims_Set() const{
    return m_claims_isSet;
}

bool OAIRuleManagementEventDataSource::is_claims_Valid() const{
    return m_claims_isValid;
}

QString OAIRuleManagementEventDataSource::getEventName() const {
    return m_event_name;
}
void OAIRuleManagementEventDataSource::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIRuleManagementEventDataSource::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIRuleManagementEventDataSource::getEventSource() const {
    return m_event_source;
}
void OAIRuleManagementEventDataSource::setEventSource(const QString &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAIRuleManagementEventDataSource::is_event_source_Valid() const{
    return m_event_source_isValid;
}

QString OAIRuleManagementEventDataSource::getLevel() const {
    return m_level;
}
void OAIRuleManagementEventDataSource::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_level_Set() const{
    return m_level_isSet;
}

bool OAIRuleManagementEventDataSource::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIRuleManagementEventDataSource::getOperationName() const {
    return m_operation_name;
}
void OAIRuleManagementEventDataSource::setOperationName(const QString &operation_name) {
    m_operation_name = operation_name;
    m_operation_name_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_operation_name_Set() const{
    return m_operation_name_isSet;
}

bool OAIRuleManagementEventDataSource::is_operation_name_Valid() const{
    return m_operation_name_isValid;
}

QString OAIRuleManagementEventDataSource::getResourceGroupName() const {
    return m_resource_group_name;
}
void OAIRuleManagementEventDataSource::setResourceGroupName(const QString &resource_group_name) {
    m_resource_group_name = resource_group_name;
    m_resource_group_name_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_resource_group_name_Set() const{
    return m_resource_group_name_isSet;
}

bool OAIRuleManagementEventDataSource::is_resource_group_name_Valid() const{
    return m_resource_group_name_isValid;
}

QString OAIRuleManagementEventDataSource::getResourceProviderName() const {
    return m_resource_provider_name;
}
void OAIRuleManagementEventDataSource::setResourceProviderName(const QString &resource_provider_name) {
    m_resource_provider_name = resource_provider_name;
    m_resource_provider_name_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_resource_provider_name_Set() const{
    return m_resource_provider_name_isSet;
}

bool OAIRuleManagementEventDataSource::is_resource_provider_name_Valid() const{
    return m_resource_provider_name_isValid;
}

QString OAIRuleManagementEventDataSource::getStatus() const {
    return m_status;
}
void OAIRuleManagementEventDataSource::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRuleManagementEventDataSource::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRuleManagementEventDataSource::getSubStatus() const {
    return m_sub_status;
}
void OAIRuleManagementEventDataSource::setSubStatus(const QString &sub_status) {
    m_sub_status = sub_status;
    m_sub_status_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_sub_status_Set() const{
    return m_sub_status_isSet;
}

bool OAIRuleManagementEventDataSource::is_sub_status_Valid() const{
    return m_sub_status_isValid;
}

QString OAIRuleManagementEventDataSource::getOdataType() const {
    return m_odata_type;
}
void OAIRuleManagementEventDataSource::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIRuleManagementEventDataSource::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

QString OAIRuleManagementEventDataSource::getResourceUri() const {
    return m_resource_uri;
}
void OAIRuleManagementEventDataSource::setResourceUri(const QString &resource_uri) {
    m_resource_uri = resource_uri;
    m_resource_uri_isSet = true;
}

bool OAIRuleManagementEventDataSource::is_resource_uri_Set() const{
    return m_resource_uri_isSet;
}

bool OAIRuleManagementEventDataSource::is_resource_uri_Valid() const{
    return m_resource_uri_isValid;
}

bool OAIRuleManagementEventDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_claims.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleManagementEventDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_odata_type_isValid && true;
}

} // namespace OpenAPI
