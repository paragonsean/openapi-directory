/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIThresholdRuleCondition.h
 *
 * A rule condition based on a metric crossing a threshold.
 */

#ifndef OAIThresholdRuleCondition_H
#define OAIThresholdRuleCondition_H

#include <QJsonObject>

#include "OAIConditionOperator.h"
#include "OAIRuleCondition.h"
#include "OAIRuleDataSource.h"
#include "OAITimeAggregationOperator.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRuleDataSource;

class OAIThresholdRuleCondition : public OAIObject {
public:
    OAIThresholdRuleCondition();
    OAIThresholdRuleCondition(QString json);
    ~OAIThresholdRuleCondition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConditionOperator getROperator() const;
    void setROperator(const OAIConditionOperator &r_operator);
    bool is_r_operator_Set() const;
    bool is_r_operator_Valid() const;

    double getThreshold() const;
    void setThreshold(const double &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    OAITimeAggregationOperator getTimeAggregation() const;
    void setTimeAggregation(const OAITimeAggregationOperator &time_aggregation);
    bool is_time_aggregation_Set() const;
    bool is_time_aggregation_Valid() const;

    QString getWindowSize() const;
    void setWindowSize(const QString &window_size);
    bool is_window_size_Set() const;
    bool is_window_size_Valid() const;

    OAIRuleDataSource getDataSource() const;
    void setDataSource(const OAIRuleDataSource &data_source);
    bool is_data_source_Set() const;
    bool is_data_source_Valid() const;

    QString getOdataType() const;
    void setOdataType(const QString &odata_type);
    bool is_odata_type_Set() const;
    bool is_odata_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConditionOperator m_r_operator;
    bool m_r_operator_isSet;
    bool m_r_operator_isValid;

    double m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;

    OAITimeAggregationOperator m_time_aggregation;
    bool m_time_aggregation_isSet;
    bool m_time_aggregation_isValid;

    QString m_window_size;
    bool m_window_size_isSet;
    bool m_window_size_isValid;

    OAIRuleDataSource m_data_source;
    bool m_data_source_isSet;
    bool m_data_source_isValid;

    QString m_odata_type;
    bool m_odata_type_isSet;
    bool m_odata_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIThresholdRuleCondition)

#endif // OAIThresholdRuleCondition_H
