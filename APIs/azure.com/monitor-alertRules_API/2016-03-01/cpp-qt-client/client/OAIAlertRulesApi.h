/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAlertRulesApi_H
#define OAI_OAIAlertRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlertRuleResource.h"
#include "OAIAlertRuleResourceCollection.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAlertRulesApi : public QObject {
    Q_OBJECT

public:
    OAIAlertRulesApi(const int timeOut = 0);
    ~OAIAlertRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAlertRuleResource [required]
    */
    virtual void alertRulesCreateOrUpdate(const QString &resource_group_name, const QString &rule_name, const QString &api_version, const QString &subscription_id, const OAIAlertRuleResource &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void alertRulesDelete(const QString &resource_group_name, const QString &rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void alertRulesGet(const QString &resource_group_name, const QString &rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void alertRulesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void alertRulesListBySubscription(const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void alertRulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void alertRulesDeleteCallback(OAIHttpRequestWorker *worker);
    void alertRulesGetCallback(OAIHttpRequestWorker *worker);
    void alertRulesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void alertRulesListBySubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void alertRulesCreateOrUpdateSignal(OAIAlertRuleResource summary);
    void alertRulesDeleteSignal();
    void alertRulesGetSignal(OAIAlertRuleResource summary);
    void alertRulesListByResourceGroupSignal(OAIAlertRuleResourceCollection summary);
    void alertRulesListBySubscriptionSignal(OAIAlertRuleResourceCollection summary);


    void alertRulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAlertRuleResource summary);
    void alertRulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void alertRulesGetSignalFull(OAIHttpRequestWorker *worker, OAIAlertRuleResource summary);
    void alertRulesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAlertRuleResourceCollection summary);
    void alertRulesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIAlertRuleResourceCollection summary);

    Q_DECL_DEPRECATED_X("Use alertRulesCreateOrUpdateSignalError() instead")
    void alertRulesCreateOrUpdateSignalE(OAIAlertRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertRulesCreateOrUpdateSignalError(OAIAlertRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertRulesDeleteSignalError() instead")
    void alertRulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void alertRulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertRulesGetSignalError() instead")
    void alertRulesGetSignalE(OAIAlertRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertRulesGetSignalError(OAIAlertRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertRulesListByResourceGroupSignalError() instead")
    void alertRulesListByResourceGroupSignalE(OAIAlertRuleResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertRulesListByResourceGroupSignalError(OAIAlertRuleResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertRulesListBySubscriptionSignalError() instead")
    void alertRulesListBySubscriptionSignalE(OAIAlertRuleResourceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertRulesListBySubscriptionSignalError(OAIAlertRuleResourceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use alertRulesCreateOrUpdateSignalErrorFull() instead")
    void alertRulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertRulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertRulesDeleteSignalErrorFull() instead")
    void alertRulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertRulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertRulesGetSignalErrorFull() instead")
    void alertRulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertRulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertRulesListByResourceGroupSignalErrorFull() instead")
    void alertRulesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertRulesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertRulesListBySubscriptionSignalErrorFull() instead")
    void alertRulesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertRulesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
