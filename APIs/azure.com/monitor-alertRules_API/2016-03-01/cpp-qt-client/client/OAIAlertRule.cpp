/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertRule::OAIAlertRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertRule::OAIAlertRule() {
    this->initializeModel();
}

OAIAlertRule::~OAIAlertRule() {}

void OAIAlertRule::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAlertRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertRule::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAlertRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertRule::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_condition.isSet()) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<OAIRuleAction> OAIAlertRule::getActions() const {
    return m_actions;
}
void OAIAlertRule::setActions(const QList<OAIRuleAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIAlertRule::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIAlertRule::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIRuleCondition OAIAlertRule::getCondition() const {
    return m_condition;
}
void OAIAlertRule::setCondition(const OAIRuleCondition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIAlertRule::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIAlertRule::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIAlertRule::getDescription() const {
    return m_description;
}
void OAIAlertRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAlertRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAlertRule::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAlertRule::isIsEnabled() const {
    return m_is_enabled;
}
void OAIAlertRule::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIAlertRule::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIAlertRule::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QDateTime OAIAlertRule::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIAlertRule::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIAlertRule::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIAlertRule::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIAlertRule::getName() const {
    return m_name;
}
void OAIAlertRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAlertRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAlertRule::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAlertRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_condition_isValid && m_is_enabled_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
