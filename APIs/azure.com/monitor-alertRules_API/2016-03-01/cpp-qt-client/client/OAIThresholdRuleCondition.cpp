/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThresholdRuleCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThresholdRuleCondition::OAIThresholdRuleCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThresholdRuleCondition::OAIThresholdRuleCondition() {
    this->initializeModel();
}

OAIThresholdRuleCondition::~OAIThresholdRuleCondition() {}

void OAIThresholdRuleCondition::initializeModel() {

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_time_aggregation_isSet = false;
    m_time_aggregation_isValid = false;

    m_window_size_isSet = false;
    m_window_size_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_odata_type_isSet = false;
    m_odata_type_isValid = false;
}

void OAIThresholdRuleCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThresholdRuleCondition::fromJsonObject(QJsonObject json) {

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;

    m_time_aggregation_isValid = ::OpenAPI::fromJsonValue(m_time_aggregation, json[QString("timeAggregation")]);
    m_time_aggregation_isSet = !json[QString("timeAggregation")].isNull() && m_time_aggregation_isValid;

    m_window_size_isValid = ::OpenAPI::fromJsonValue(m_window_size, json[QString("windowSize")]);
    m_window_size_isSet = !json[QString("windowSize")].isNull() && m_window_size_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("dataSource")]);
    m_data_source_isSet = !json[QString("dataSource")].isNull() && m_data_source_isValid;

    m_odata_type_isValid = ::OpenAPI::fromJsonValue(m_odata_type, json[QString("odata.type")]);
    m_odata_type_isSet = !json[QString("odata.type")].isNull() && m_odata_type_isValid;
}

QString OAIThresholdRuleCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThresholdRuleCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_r_operator.isSet()) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_time_aggregation.isSet()) {
        obj.insert(QString("timeAggregation"), ::OpenAPI::toJsonValue(m_time_aggregation));
    }
    if (m_window_size_isSet) {
        obj.insert(QString("windowSize"), ::OpenAPI::toJsonValue(m_window_size));
    }
    if (m_data_source.isSet()) {
        obj.insert(QString("dataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_odata_type_isSet) {
        obj.insert(QString("odata.type"), ::OpenAPI::toJsonValue(m_odata_type));
    }
    return obj;
}

OAIConditionOperator OAIThresholdRuleCondition::getROperator() const {
    return m_r_operator;
}
void OAIThresholdRuleCondition::setROperator(const OAIConditionOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIThresholdRuleCondition::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIThresholdRuleCondition::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

double OAIThresholdRuleCondition::getThreshold() const {
    return m_threshold;
}
void OAIThresholdRuleCondition::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIThresholdRuleCondition::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIThresholdRuleCondition::is_threshold_Valid() const{
    return m_threshold_isValid;
}

OAITimeAggregationOperator OAIThresholdRuleCondition::getTimeAggregation() const {
    return m_time_aggregation;
}
void OAIThresholdRuleCondition::setTimeAggregation(const OAITimeAggregationOperator &time_aggregation) {
    m_time_aggregation = time_aggregation;
    m_time_aggregation_isSet = true;
}

bool OAIThresholdRuleCondition::is_time_aggregation_Set() const{
    return m_time_aggregation_isSet;
}

bool OAIThresholdRuleCondition::is_time_aggregation_Valid() const{
    return m_time_aggregation_isValid;
}

QString OAIThresholdRuleCondition::getWindowSize() const {
    return m_window_size;
}
void OAIThresholdRuleCondition::setWindowSize(const QString &window_size) {
    m_window_size = window_size;
    m_window_size_isSet = true;
}

bool OAIThresholdRuleCondition::is_window_size_Set() const{
    return m_window_size_isSet;
}

bool OAIThresholdRuleCondition::is_window_size_Valid() const{
    return m_window_size_isValid;
}

OAIRuleDataSource OAIThresholdRuleCondition::getDataSource() const {
    return m_data_source;
}
void OAIThresholdRuleCondition::setDataSource(const OAIRuleDataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIThresholdRuleCondition::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIThresholdRuleCondition::is_data_source_Valid() const{
    return m_data_source_isValid;
}

QString OAIThresholdRuleCondition::getOdataType() const {
    return m_odata_type;
}
void OAIThresholdRuleCondition::setOdataType(const QString &odata_type) {
    m_odata_type = odata_type;
    m_odata_type_isSet = true;
}

bool OAIThresholdRuleCondition::is_odata_type_Set() const{
    return m_odata_type_isSet;
}

bool OAIThresholdRuleCondition::is_odata_type_Valid() const{
    return m_odata_type_isValid;
}

bool OAIThresholdRuleCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_aggregation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_odata_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThresholdRuleCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_operator_isValid && m_threshold_isValid && m_odata_type_isValid && true;
}

} // namespace OpenAPI
