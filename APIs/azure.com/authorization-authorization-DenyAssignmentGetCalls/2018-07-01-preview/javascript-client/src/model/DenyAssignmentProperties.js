/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DenyAssignmentPermission from './DenyAssignmentPermission';
import Principal from './Principal';

/**
 * The DenyAssignmentProperties model module.
 * @module model/DenyAssignmentProperties
 * @version 2018-07-01-preview
 */
class DenyAssignmentProperties {
    /**
     * Constructs a new <code>DenyAssignmentProperties</code>.
     * Deny assignment properties.
     * @alias module:model/DenyAssignmentProperties
     */
    constructor() { 
        
        DenyAssignmentProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DenyAssignmentProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DenyAssignmentProperties} obj Optional instance to populate.
     * @return {module:model/DenyAssignmentProperties} The populated <code>DenyAssignmentProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DenyAssignmentProperties();

            if (data.hasOwnProperty('denyAssignmentName')) {
                obj['denyAssignmentName'] = ApiClient.convertToType(data['denyAssignmentName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('doNotApplyToChildScopes')) {
                obj['doNotApplyToChildScopes'] = ApiClient.convertToType(data['doNotApplyToChildScopes'], 'Boolean');
            }
            if (data.hasOwnProperty('excludePrincipals')) {
                obj['excludePrincipals'] = ApiClient.convertToType(data['excludePrincipals'], [Principal]);
            }
            if (data.hasOwnProperty('isSystemProtected')) {
                obj['isSystemProtected'] = ApiClient.convertToType(data['isSystemProtected'], 'Boolean');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], [DenyAssignmentPermission]);
            }
            if (data.hasOwnProperty('principals')) {
                obj['principals'] = ApiClient.convertToType(data['principals'], [Principal]);
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DenyAssignmentProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DenyAssignmentProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['denyAssignmentName'] && !(typeof data['denyAssignmentName'] === 'string' || data['denyAssignmentName'] instanceof String)) {
            throw new Error("Expected the field `denyAssignmentName` to be a primitive type in the JSON string but got " + data['denyAssignmentName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['excludePrincipals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['excludePrincipals'])) {
                throw new Error("Expected the field `excludePrincipals` to be an array in the JSON data but got " + data['excludePrincipals']);
            }
            // validate the optional field `excludePrincipals` (array)
            for (const item of data['excludePrincipals']) {
                Principal.validateJSON(item);
            };
        }
        if (data['permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permissions'])) {
                throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
            }
            // validate the optional field `permissions` (array)
            for (const item of data['permissions']) {
                DenyAssignmentPermission.validateJSON(item);
            };
        }
        if (data['principals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['principals'])) {
                throw new Error("Expected the field `principals` to be an array in the JSON data but got " + data['principals']);
            }
            // validate the optional field `principals` (array)
            for (const item of data['principals']) {
                Principal.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }

        return true;
    }


}



/**
 * The display name of the deny assignment.
 * @member {String} denyAssignmentName
 */
DenyAssignmentProperties.prototype['denyAssignmentName'] = undefined;

/**
 * The description of the deny assignment.
 * @member {String} description
 */
DenyAssignmentProperties.prototype['description'] = undefined;

/**
 * Determines if the deny assignment applies to child scopes. Default value is false.
 * @member {Boolean} doNotApplyToChildScopes
 */
DenyAssignmentProperties.prototype['doNotApplyToChildScopes'] = undefined;

/**
 * Array of principals to which the deny assignment does not apply.
 * @member {Array.<module:model/Principal>} excludePrincipals
 */
DenyAssignmentProperties.prototype['excludePrincipals'] = undefined;

/**
 * Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
 * @member {Boolean} isSystemProtected
 */
DenyAssignmentProperties.prototype['isSystemProtected'] = undefined;

/**
 * An array of permissions that are denied by the deny assignment.
 * @member {Array.<module:model/DenyAssignmentPermission>} permissions
 */
DenyAssignmentProperties.prototype['permissions'] = undefined;

/**
 * Array of principals to which the deny assignment applies.
 * @member {Array.<module:model/Principal>} principals
 */
DenyAssignmentProperties.prototype['principals'] = undefined;

/**
 * The deny assignment scope.
 * @member {String} scope
 */
DenyAssignmentProperties.prototype['scope'] = undefined;






export default DenyAssignmentProperties;

