/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import DenyAssignment from './model/DenyAssignment';
import DenyAssignmentFilter from './model/DenyAssignmentFilter';
import DenyAssignmentListResult from './model/DenyAssignmentListResult';
import DenyAssignmentPermission from './model/DenyAssignmentPermission';
import DenyAssignmentProperties from './model/DenyAssignmentProperties';
import Principal from './model/Principal';
import DenyAssignmentsApi from './api/DenyAssignmentsApi';


/**
* Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AuthorizationManagementClient = require('index'); // See note below*.
* var xxxSvc = new AuthorizationManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AuthorizationManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AuthorizationManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AuthorizationManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2018-07-01-preview
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The DenyAssignment model constructor.
     * @property {module:model/DenyAssignment}
     */
    DenyAssignment,

    /**
     * The DenyAssignmentFilter model constructor.
     * @property {module:model/DenyAssignmentFilter}
     */
    DenyAssignmentFilter,

    /**
     * The DenyAssignmentListResult model constructor.
     * @property {module:model/DenyAssignmentListResult}
     */
    DenyAssignmentListResult,

    /**
     * The DenyAssignmentPermission model constructor.
     * @property {module:model/DenyAssignmentPermission}
     */
    DenyAssignmentPermission,

    /**
     * The DenyAssignmentProperties model constructor.
     * @property {module:model/DenyAssignmentProperties}
     */
    DenyAssignmentProperties,

    /**
     * The Principal model constructor.
     * @property {module:model/Principal}
     */
    Principal,

    /**
    * The DenyAssignmentsApi service constructor.
    * @property {module:api/DenyAssignmentsApi}
    */
    DenyAssignmentsApi
};
