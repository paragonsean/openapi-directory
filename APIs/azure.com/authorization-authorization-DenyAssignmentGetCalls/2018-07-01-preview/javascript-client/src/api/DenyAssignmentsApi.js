/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DenyAssignment from '../model/DenyAssignment';
import DenyAssignmentListResult from '../model/DenyAssignmentListResult';

/**
* DenyAssignments service.
* @module api/DenyAssignmentsApi
* @version 2018-07-01-preview
*/
export default class DenyAssignmentsApi {

    /**
    * Constructs a new DenyAssignmentsApi. 
    * @alias module:api/DenyAssignmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the denyAssignmentsGet operation.
     * @callback module:api/DenyAssignmentsApi~denyAssignmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DenyAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified deny assignment.
     * @param {String} scope The scope of the deny assignment.
     * @param {String} denyAssignmentId The ID of the deny assignment to get.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DenyAssignmentsApi~denyAssignmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DenyAssignment}
     */
    denyAssignmentsGet(scope, denyAssignmentId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling denyAssignmentsGet");
      }
      // verify the required parameter 'denyAssignmentId' is set
      if (denyAssignmentId === undefined || denyAssignmentId === null) {
        throw new Error("Missing the required parameter 'denyAssignmentId' when calling denyAssignmentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling denyAssignmentsGet");
      }

      let pathParams = {
        'scope': scope,
        'denyAssignmentId': denyAssignmentId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DenyAssignment;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the denyAssignmentsGetById operation.
     * @callback module:api/DenyAssignmentsApi~denyAssignmentsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DenyAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a deny assignment by ID.
     * @param {String} denyAssignmentId The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/DenyAssignmentsApi~denyAssignmentsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DenyAssignment}
     */
    denyAssignmentsGetById(denyAssignmentId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'denyAssignmentId' is set
      if (denyAssignmentId === undefined || denyAssignmentId === null) {
        throw new Error("Missing the required parameter 'denyAssignmentId' when calling denyAssignmentsGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling denyAssignmentsGetById");
      }

      let pathParams = {
        'denyAssignmentId': denyAssignmentId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DenyAssignment;
      return this.apiClient.callApi(
        '/{denyAssignmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the denyAssignmentsList operation.
     * @callback module:api/DenyAssignmentsApi~denyAssignmentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DenyAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all deny assignments for the subscription.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned.
     * @param {module:api/DenyAssignmentsApi~denyAssignmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DenyAssignmentListResult}
     */
    denyAssignmentsList(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling denyAssignmentsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling denyAssignmentsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DenyAssignmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/denyAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the denyAssignmentsListForResource operation.
     * @callback module:api/DenyAssignmentsApi~denyAssignmentsListForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DenyAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets deny assignments for a resource.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} resourceProviderNamespace The namespace of the resource provider.
     * @param {String} parentResourcePath The parent resource identity.
     * @param {String} resourceType The resource type of the resource.
     * @param {String} resourceName The name of the resource to get deny assignments for.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned.
     * @param {module:api/DenyAssignmentsApi~denyAssignmentsListForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DenyAssignmentListResult}
     */
    denyAssignmentsListForResource(subscriptionId, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling denyAssignmentsListForResource");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling denyAssignmentsListForResource");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling denyAssignmentsListForResource");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling denyAssignmentsListForResource");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling denyAssignmentsListForResource");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling denyAssignmentsListForResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling denyAssignmentsListForResource");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DenyAssignmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/denyAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the denyAssignmentsListForResourceGroup operation.
     * @callback module:api/DenyAssignmentsApi~denyAssignmentsListForResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DenyAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets deny assignments for a resource group.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned.
     * @param {module:api/DenyAssignmentsApi~denyAssignmentsListForResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DenyAssignmentListResult}
     */
    denyAssignmentsListForResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling denyAssignmentsListForResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling denyAssignmentsListForResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling denyAssignmentsListForResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DenyAssignmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/denyAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the denyAssignmentsListForScope operation.
     * @callback module:api/DenyAssignmentsApi~denyAssignmentsListForScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DenyAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets deny assignments for a scope.
     * @param {String} scope The scope of the deny assignments.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. Use $filter=atScope() to return all deny assignments at or above the scope. Use $filter=denyAssignmentName eq '{name}' to search deny assignments by name at specified scope. Use $filter=principalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. Use $filter=gdprExportPrincipalId eq '{id}' to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned.
     * @param {module:api/DenyAssignmentsApi~denyAssignmentsListForScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DenyAssignmentListResult}
     */
    denyAssignmentsListForScope(scope, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling denyAssignmentsListForScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling denyAssignmentsListForScope");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DenyAssignmentListResult;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/denyAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
