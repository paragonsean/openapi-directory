# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deny_assignment_permission import DenyAssignmentPermission
from openapi_server.models.principal import Principal
from openapi_server import util


class DenyAssignmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deny_assignment_name: str=None, description: str=None, do_not_apply_to_child_scopes: bool=None, exclude_principals: List[Principal]=None, is_system_protected: bool=None, permissions: List[DenyAssignmentPermission]=None, principals: List[Principal]=None, scope: str=None):
        """DenyAssignmentProperties - a model defined in OpenAPI

        :param deny_assignment_name: The deny_assignment_name of this DenyAssignmentProperties.
        :param description: The description of this DenyAssignmentProperties.
        :param do_not_apply_to_child_scopes: The do_not_apply_to_child_scopes of this DenyAssignmentProperties.
        :param exclude_principals: The exclude_principals of this DenyAssignmentProperties.
        :param is_system_protected: The is_system_protected of this DenyAssignmentProperties.
        :param permissions: The permissions of this DenyAssignmentProperties.
        :param principals: The principals of this DenyAssignmentProperties.
        :param scope: The scope of this DenyAssignmentProperties.
        """
        self.openapi_types = {
            'deny_assignment_name': str,
            'description': str,
            'do_not_apply_to_child_scopes': bool,
            'exclude_principals': List[Principal],
            'is_system_protected': bool,
            'permissions': List[DenyAssignmentPermission],
            'principals': List[Principal],
            'scope': str
        }

        self.attribute_map = {
            'deny_assignment_name': 'denyAssignmentName',
            'description': 'description',
            'do_not_apply_to_child_scopes': 'doNotApplyToChildScopes',
            'exclude_principals': 'excludePrincipals',
            'is_system_protected': 'isSystemProtected',
            'permissions': 'permissions',
            'principals': 'principals',
            'scope': 'scope'
        }

        self._deny_assignment_name = deny_assignment_name
        self._description = description
        self._do_not_apply_to_child_scopes = do_not_apply_to_child_scopes
        self._exclude_principals = exclude_principals
        self._is_system_protected = is_system_protected
        self._permissions = permissions
        self._principals = principals
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DenyAssignmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DenyAssignmentProperties of this DenyAssignmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deny_assignment_name(self):
        """Gets the deny_assignment_name of this DenyAssignmentProperties.

        The display name of the deny assignment.

        :return: The deny_assignment_name of this DenyAssignmentProperties.
        :rtype: str
        """
        return self._deny_assignment_name

    @deny_assignment_name.setter
    def deny_assignment_name(self, deny_assignment_name):
        """Sets the deny_assignment_name of this DenyAssignmentProperties.

        The display name of the deny assignment.

        :param deny_assignment_name: The deny_assignment_name of this DenyAssignmentProperties.
        :type deny_assignment_name: str
        """

        self._deny_assignment_name = deny_assignment_name

    @property
    def description(self):
        """Gets the description of this DenyAssignmentProperties.

        The description of the deny assignment.

        :return: The description of this DenyAssignmentProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DenyAssignmentProperties.

        The description of the deny assignment.

        :param description: The description of this DenyAssignmentProperties.
        :type description: str
        """

        self._description = description

    @property
    def do_not_apply_to_child_scopes(self):
        """Gets the do_not_apply_to_child_scopes of this DenyAssignmentProperties.

        Determines if the deny assignment applies to child scopes. Default value is false.

        :return: The do_not_apply_to_child_scopes of this DenyAssignmentProperties.
        :rtype: bool
        """
        return self._do_not_apply_to_child_scopes

    @do_not_apply_to_child_scopes.setter
    def do_not_apply_to_child_scopes(self, do_not_apply_to_child_scopes):
        """Sets the do_not_apply_to_child_scopes of this DenyAssignmentProperties.

        Determines if the deny assignment applies to child scopes. Default value is false.

        :param do_not_apply_to_child_scopes: The do_not_apply_to_child_scopes of this DenyAssignmentProperties.
        :type do_not_apply_to_child_scopes: bool
        """

        self._do_not_apply_to_child_scopes = do_not_apply_to_child_scopes

    @property
    def exclude_principals(self):
        """Gets the exclude_principals of this DenyAssignmentProperties.

        Array of principals to which the deny assignment does not apply.

        :return: The exclude_principals of this DenyAssignmentProperties.
        :rtype: List[Principal]
        """
        return self._exclude_principals

    @exclude_principals.setter
    def exclude_principals(self, exclude_principals):
        """Sets the exclude_principals of this DenyAssignmentProperties.

        Array of principals to which the deny assignment does not apply.

        :param exclude_principals: The exclude_principals of this DenyAssignmentProperties.
        :type exclude_principals: List[Principal]
        """

        self._exclude_principals = exclude_principals

    @property
    def is_system_protected(self):
        """Gets the is_system_protected of this DenyAssignmentProperties.

        Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.

        :return: The is_system_protected of this DenyAssignmentProperties.
        :rtype: bool
        """
        return self._is_system_protected

    @is_system_protected.setter
    def is_system_protected(self, is_system_protected):
        """Sets the is_system_protected of this DenyAssignmentProperties.

        Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.

        :param is_system_protected: The is_system_protected of this DenyAssignmentProperties.
        :type is_system_protected: bool
        """

        self._is_system_protected = is_system_protected

    @property
    def permissions(self):
        """Gets the permissions of this DenyAssignmentProperties.

        An array of permissions that are denied by the deny assignment.

        :return: The permissions of this DenyAssignmentProperties.
        :rtype: List[DenyAssignmentPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this DenyAssignmentProperties.

        An array of permissions that are denied by the deny assignment.

        :param permissions: The permissions of this DenyAssignmentProperties.
        :type permissions: List[DenyAssignmentPermission]
        """

        self._permissions = permissions

    @property
    def principals(self):
        """Gets the principals of this DenyAssignmentProperties.

        Array of principals to which the deny assignment applies.

        :return: The principals of this DenyAssignmentProperties.
        :rtype: List[Principal]
        """
        return self._principals

    @principals.setter
    def principals(self, principals):
        """Sets the principals of this DenyAssignmentProperties.

        Array of principals to which the deny assignment applies.

        :param principals: The principals of this DenyAssignmentProperties.
        :type principals: List[Principal]
        """

        self._principals = principals

    @property
    def scope(self):
        """Gets the scope of this DenyAssignmentProperties.

        The deny assignment scope.

        :return: The scope of this DenyAssignmentProperties.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this DenyAssignmentProperties.

        The deny assignment scope.

        :param scope: The scope of this DenyAssignmentProperties.
        :type scope: str
        """

        self._scope = scope
