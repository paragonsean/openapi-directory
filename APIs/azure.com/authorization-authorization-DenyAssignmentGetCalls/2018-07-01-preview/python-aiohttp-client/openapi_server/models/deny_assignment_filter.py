# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DenyAssignmentFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deny_assignment_name: str=None, gdpr_export_principal_id: str=None, principal_id: str=None):
        """DenyAssignmentFilter - a model defined in OpenAPI

        :param deny_assignment_name: The deny_assignment_name of this DenyAssignmentFilter.
        :param gdpr_export_principal_id: The gdpr_export_principal_id of this DenyAssignmentFilter.
        :param principal_id: The principal_id of this DenyAssignmentFilter.
        """
        self.openapi_types = {
            'deny_assignment_name': str,
            'gdpr_export_principal_id': str,
            'principal_id': str
        }

        self.attribute_map = {
            'deny_assignment_name': 'denyAssignmentName',
            'gdpr_export_principal_id': 'gdprExportPrincipalId',
            'principal_id': 'principalId'
        }

        self._deny_assignment_name = deny_assignment_name
        self._gdpr_export_principal_id = gdpr_export_principal_id
        self._principal_id = principal_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DenyAssignmentFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DenyAssignmentFilter of this DenyAssignmentFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deny_assignment_name(self):
        """Gets the deny_assignment_name of this DenyAssignmentFilter.

        Return deny assignment with specified name.

        :return: The deny_assignment_name of this DenyAssignmentFilter.
        :rtype: str
        """
        return self._deny_assignment_name

    @deny_assignment_name.setter
    def deny_assignment_name(self, deny_assignment_name):
        """Sets the deny_assignment_name of this DenyAssignmentFilter.

        Return deny assignment with specified name.

        :param deny_assignment_name: The deny_assignment_name of this DenyAssignmentFilter.
        :type deny_assignment_name: str
        """

        self._deny_assignment_name = deny_assignment_name

    @property
    def gdpr_export_principal_id(self):
        """Gets the gdpr_export_principal_id of this DenyAssignmentFilter.

        Return all deny assignments where the specified principal is listed either in the principals list or exclude principals list of deny assignments.

        :return: The gdpr_export_principal_id of this DenyAssignmentFilter.
        :rtype: str
        """
        return self._gdpr_export_principal_id

    @gdpr_export_principal_id.setter
    def gdpr_export_principal_id(self, gdpr_export_principal_id):
        """Sets the gdpr_export_principal_id of this DenyAssignmentFilter.

        Return all deny assignments where the specified principal is listed either in the principals list or exclude principals list of deny assignments.

        :param gdpr_export_principal_id: The gdpr_export_principal_id of this DenyAssignmentFilter.
        :type gdpr_export_principal_id: str
        """

        self._gdpr_export_principal_id = gdpr_export_principal_id

    @property
    def principal_id(self):
        """Gets the principal_id of this DenyAssignmentFilter.

        Return all deny assignments where the specified principal is listed in the principals list of deny assignments.

        :return: The principal_id of this DenyAssignmentFilter.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this DenyAssignmentFilter.

        Return all deny assignments where the specified principal is listed in the principals list of deny assignments.

        :param principal_id: The principal_id of this DenyAssignmentFilter.
        :type principal_id: str
        """

        self._principal_id = principal_id
