/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDenyAssignmentProperties.h
 *
 * Deny assignment properties.
 */

#ifndef OAIDenyAssignmentProperties_H
#define OAIDenyAssignmentProperties_H

#include <QJsonObject>

#include "OAIDenyAssignmentPermission.h"
#include "OAIPrincipal.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPrincipal;
class OAIDenyAssignmentPermission;

class OAIDenyAssignmentProperties : public OAIObject {
public:
    OAIDenyAssignmentProperties();
    OAIDenyAssignmentProperties(QString json);
    ~OAIDenyAssignmentProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDenyAssignmentName() const;
    void setDenyAssignmentName(const QString &deny_assignment_name);
    bool is_deny_assignment_name_Set() const;
    bool is_deny_assignment_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isDoNotApplyToChildScopes() const;
    void setDoNotApplyToChildScopes(const bool &do_not_apply_to_child_scopes);
    bool is_do_not_apply_to_child_scopes_Set() const;
    bool is_do_not_apply_to_child_scopes_Valid() const;

    QList<OAIPrincipal> getExcludePrincipals() const;
    void setExcludePrincipals(const QList<OAIPrincipal> &exclude_principals);
    bool is_exclude_principals_Set() const;
    bool is_exclude_principals_Valid() const;

    bool isIsSystemProtected() const;
    void setIsSystemProtected(const bool &is_system_protected);
    bool is_is_system_protected_Set() const;
    bool is_is_system_protected_Valid() const;

    QList<OAIDenyAssignmentPermission> getPermissions() const;
    void setPermissions(const QList<OAIDenyAssignmentPermission> &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    QList<OAIPrincipal> getPrincipals() const;
    void setPrincipals(const QList<OAIPrincipal> &principals);
    bool is_principals_Set() const;
    bool is_principals_Valid() const;

    QString getScope() const;
    void setScope(const QString &scope);
    bool is_scope_Set() const;
    bool is_scope_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_deny_assignment_name;
    bool m_deny_assignment_name_isSet;
    bool m_deny_assignment_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_do_not_apply_to_child_scopes;
    bool m_do_not_apply_to_child_scopes_isSet;
    bool m_do_not_apply_to_child_scopes_isValid;

    QList<OAIPrincipal> m_exclude_principals;
    bool m_exclude_principals_isSet;
    bool m_exclude_principals_isValid;

    bool m_is_system_protected;
    bool m_is_system_protected_isSet;
    bool m_is_system_protected_isValid;

    QList<OAIDenyAssignmentPermission> m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    QList<OAIPrincipal> m_principals;
    bool m_principals_isSet;
    bool m_principals_isValid;

    QString m_scope;
    bool m_scope_isSet;
    bool m_scope_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDenyAssignmentProperties)

#endif // OAIDenyAssignmentProperties_H
