/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDenyAssignmentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDenyAssignmentProperties::OAIDenyAssignmentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDenyAssignmentProperties::OAIDenyAssignmentProperties() {
    this->initializeModel();
}

OAIDenyAssignmentProperties::~OAIDenyAssignmentProperties() {}

void OAIDenyAssignmentProperties::initializeModel() {

    m_deny_assignment_name_isSet = false;
    m_deny_assignment_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_do_not_apply_to_child_scopes_isSet = false;
    m_do_not_apply_to_child_scopes_isValid = false;

    m_exclude_principals_isSet = false;
    m_exclude_principals_isValid = false;

    m_is_system_protected_isSet = false;
    m_is_system_protected_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIDenyAssignmentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDenyAssignmentProperties::fromJsonObject(QJsonObject json) {

    m_deny_assignment_name_isValid = ::OpenAPI::fromJsonValue(m_deny_assignment_name, json[QString("denyAssignmentName")]);
    m_deny_assignment_name_isSet = !json[QString("denyAssignmentName")].isNull() && m_deny_assignment_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_do_not_apply_to_child_scopes_isValid = ::OpenAPI::fromJsonValue(m_do_not_apply_to_child_scopes, json[QString("doNotApplyToChildScopes")]);
    m_do_not_apply_to_child_scopes_isSet = !json[QString("doNotApplyToChildScopes")].isNull() && m_do_not_apply_to_child_scopes_isValid;

    m_exclude_principals_isValid = ::OpenAPI::fromJsonValue(m_exclude_principals, json[QString("excludePrincipals")]);
    m_exclude_principals_isSet = !json[QString("excludePrincipals")].isNull() && m_exclude_principals_isValid;

    m_is_system_protected_isValid = ::OpenAPI::fromJsonValue(m_is_system_protected, json[QString("isSystemProtected")]);
    m_is_system_protected_isSet = !json[QString("isSystemProtected")].isNull() && m_is_system_protected_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("principals")]);
    m_principals_isSet = !json[QString("principals")].isNull() && m_principals_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIDenyAssignmentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDenyAssignmentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_deny_assignment_name_isSet) {
        obj.insert(QString("denyAssignmentName"), ::OpenAPI::toJsonValue(m_deny_assignment_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_do_not_apply_to_child_scopes_isSet) {
        obj.insert(QString("doNotApplyToChildScopes"), ::OpenAPI::toJsonValue(m_do_not_apply_to_child_scopes));
    }
    if (m_exclude_principals.size() > 0) {
        obj.insert(QString("excludePrincipals"), ::OpenAPI::toJsonValue(m_exclude_principals));
    }
    if (m_is_system_protected_isSet) {
        obj.insert(QString("isSystemProtected"), ::OpenAPI::toJsonValue(m_is_system_protected));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_principals.size() > 0) {
        obj.insert(QString("principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QString OAIDenyAssignmentProperties::getDenyAssignmentName() const {
    return m_deny_assignment_name;
}
void OAIDenyAssignmentProperties::setDenyAssignmentName(const QString &deny_assignment_name) {
    m_deny_assignment_name = deny_assignment_name;
    m_deny_assignment_name_isSet = true;
}

bool OAIDenyAssignmentProperties::is_deny_assignment_name_Set() const{
    return m_deny_assignment_name_isSet;
}

bool OAIDenyAssignmentProperties::is_deny_assignment_name_Valid() const{
    return m_deny_assignment_name_isValid;
}

QString OAIDenyAssignmentProperties::getDescription() const {
    return m_description;
}
void OAIDenyAssignmentProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDenyAssignmentProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDenyAssignmentProperties::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIDenyAssignmentProperties::isDoNotApplyToChildScopes() const {
    return m_do_not_apply_to_child_scopes;
}
void OAIDenyAssignmentProperties::setDoNotApplyToChildScopes(const bool &do_not_apply_to_child_scopes) {
    m_do_not_apply_to_child_scopes = do_not_apply_to_child_scopes;
    m_do_not_apply_to_child_scopes_isSet = true;
}

bool OAIDenyAssignmentProperties::is_do_not_apply_to_child_scopes_Set() const{
    return m_do_not_apply_to_child_scopes_isSet;
}

bool OAIDenyAssignmentProperties::is_do_not_apply_to_child_scopes_Valid() const{
    return m_do_not_apply_to_child_scopes_isValid;
}

QList<OAIPrincipal> OAIDenyAssignmentProperties::getExcludePrincipals() const {
    return m_exclude_principals;
}
void OAIDenyAssignmentProperties::setExcludePrincipals(const QList<OAIPrincipal> &exclude_principals) {
    m_exclude_principals = exclude_principals;
    m_exclude_principals_isSet = true;
}

bool OAIDenyAssignmentProperties::is_exclude_principals_Set() const{
    return m_exclude_principals_isSet;
}

bool OAIDenyAssignmentProperties::is_exclude_principals_Valid() const{
    return m_exclude_principals_isValid;
}

bool OAIDenyAssignmentProperties::isIsSystemProtected() const {
    return m_is_system_protected;
}
void OAIDenyAssignmentProperties::setIsSystemProtected(const bool &is_system_protected) {
    m_is_system_protected = is_system_protected;
    m_is_system_protected_isSet = true;
}

bool OAIDenyAssignmentProperties::is_is_system_protected_Set() const{
    return m_is_system_protected_isSet;
}

bool OAIDenyAssignmentProperties::is_is_system_protected_Valid() const{
    return m_is_system_protected_isValid;
}

QList<OAIDenyAssignmentPermission> OAIDenyAssignmentProperties::getPermissions() const {
    return m_permissions;
}
void OAIDenyAssignmentProperties::setPermissions(const QList<OAIDenyAssignmentPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIDenyAssignmentProperties::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIDenyAssignmentProperties::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QList<OAIPrincipal> OAIDenyAssignmentProperties::getPrincipals() const {
    return m_principals;
}
void OAIDenyAssignmentProperties::setPrincipals(const QList<OAIPrincipal> &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAIDenyAssignmentProperties::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAIDenyAssignmentProperties::is_principals_Valid() const{
    return m_principals_isValid;
}

QString OAIDenyAssignmentProperties::getScope() const {
    return m_scope;
}
void OAIDenyAssignmentProperties::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIDenyAssignmentProperties::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIDenyAssignmentProperties::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIDenyAssignmentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deny_assignment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_not_apply_to_child_scopes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_principals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_system_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_principals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDenyAssignmentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
