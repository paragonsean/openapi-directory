/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDenyAssignmentPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDenyAssignmentPermission::OAIDenyAssignmentPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDenyAssignmentPermission::OAIDenyAssignmentPermission() {
    this->initializeModel();
}

OAIDenyAssignmentPermission::~OAIDenyAssignmentPermission() {}

void OAIDenyAssignmentPermission::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_data_actions_isSet = false;
    m_data_actions_isValid = false;

    m_not_actions_isSet = false;
    m_not_actions_isValid = false;

    m_not_data_actions_isSet = false;
    m_not_data_actions_isValid = false;
}

void OAIDenyAssignmentPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDenyAssignmentPermission::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_data_actions_isValid = ::OpenAPI::fromJsonValue(m_data_actions, json[QString("dataActions")]);
    m_data_actions_isSet = !json[QString("dataActions")].isNull() && m_data_actions_isValid;

    m_not_actions_isValid = ::OpenAPI::fromJsonValue(m_not_actions, json[QString("notActions")]);
    m_not_actions_isSet = !json[QString("notActions")].isNull() && m_not_actions_isValid;

    m_not_data_actions_isValid = ::OpenAPI::fromJsonValue(m_not_data_actions, json[QString("notDataActions")]);
    m_not_data_actions_isSet = !json[QString("notDataActions")].isNull() && m_not_data_actions_isValid;
}

QString OAIDenyAssignmentPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDenyAssignmentPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_data_actions.size() > 0) {
        obj.insert(QString("dataActions"), ::OpenAPI::toJsonValue(m_data_actions));
    }
    if (m_not_actions.size() > 0) {
        obj.insert(QString("notActions"), ::OpenAPI::toJsonValue(m_not_actions));
    }
    if (m_not_data_actions.size() > 0) {
        obj.insert(QString("notDataActions"), ::OpenAPI::toJsonValue(m_not_data_actions));
    }
    return obj;
}

QList<QString> OAIDenyAssignmentPermission::getActions() const {
    return m_actions;
}
void OAIDenyAssignmentPermission::setActions(const QList<QString> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIDenyAssignmentPermission::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIDenyAssignmentPermission::is_actions_Valid() const{
    return m_actions_isValid;
}

QList<QString> OAIDenyAssignmentPermission::getDataActions() const {
    return m_data_actions;
}
void OAIDenyAssignmentPermission::setDataActions(const QList<QString> &data_actions) {
    m_data_actions = data_actions;
    m_data_actions_isSet = true;
}

bool OAIDenyAssignmentPermission::is_data_actions_Set() const{
    return m_data_actions_isSet;
}

bool OAIDenyAssignmentPermission::is_data_actions_Valid() const{
    return m_data_actions_isValid;
}

QList<QString> OAIDenyAssignmentPermission::getNotActions() const {
    return m_not_actions;
}
void OAIDenyAssignmentPermission::setNotActions(const QList<QString> &not_actions) {
    m_not_actions = not_actions;
    m_not_actions_isSet = true;
}

bool OAIDenyAssignmentPermission::is_not_actions_Set() const{
    return m_not_actions_isSet;
}

bool OAIDenyAssignmentPermission::is_not_actions_Valid() const{
    return m_not_actions_isValid;
}

QList<QString> OAIDenyAssignmentPermission::getNotDataActions() const {
    return m_not_data_actions;
}
void OAIDenyAssignmentPermission::setNotDataActions(const QList<QString> &not_data_actions) {
    m_not_data_actions = not_data_actions;
    m_not_data_actions_isSet = true;
}

bool OAIDenyAssignmentPermission::is_not_data_actions_Set() const{
    return m_not_data_actions_isSet;
}

bool OAIDenyAssignmentPermission::is_not_data_actions_Valid() const{
    return m_not_data_actions_isValid;
}

bool OAIDenyAssignmentPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_data_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDenyAssignmentPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
