/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDenyAssignmentsApi_H
#define OAI_OAIDenyAssignmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDenyAssignment.h"
#include "OAIDenyAssignmentListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDenyAssignmentsApi : public QObject {
    Q_OBJECT

public:
    OAIDenyAssignmentsApi(const int timeOut = 0);
    ~OAIDenyAssignmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  deny_assignment_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void denyAssignmentsGet(const QString &scope, const QString &deny_assignment_id, const QString &api_version);

    /**
    * @param[in]  deny_assignment_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void denyAssignmentsGetById(const QString &deny_assignment_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void denyAssignmentsList(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void denyAssignmentsListForResource(const QString &subscription_id, const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void denyAssignmentsListForResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void denyAssignmentsListForScope(const QString &scope, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void denyAssignmentsGetCallback(OAIHttpRequestWorker *worker);
    void denyAssignmentsGetByIdCallback(OAIHttpRequestWorker *worker);
    void denyAssignmentsListCallback(OAIHttpRequestWorker *worker);
    void denyAssignmentsListForResourceCallback(OAIHttpRequestWorker *worker);
    void denyAssignmentsListForResourceGroupCallback(OAIHttpRequestWorker *worker);
    void denyAssignmentsListForScopeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void denyAssignmentsGetSignal(OAIDenyAssignment summary);
    void denyAssignmentsGetByIdSignal(OAIDenyAssignment summary);
    void denyAssignmentsListSignal(OAIDenyAssignmentListResult summary);
    void denyAssignmentsListForResourceSignal(OAIDenyAssignmentListResult summary);
    void denyAssignmentsListForResourceGroupSignal(OAIDenyAssignmentListResult summary);
    void denyAssignmentsListForScopeSignal(OAIDenyAssignmentListResult summary);


    void denyAssignmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIDenyAssignment summary);
    void denyAssignmentsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIDenyAssignment summary);
    void denyAssignmentsListSignalFull(OAIHttpRequestWorker *worker, OAIDenyAssignmentListResult summary);
    void denyAssignmentsListForResourceSignalFull(OAIHttpRequestWorker *worker, OAIDenyAssignmentListResult summary);
    void denyAssignmentsListForResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDenyAssignmentListResult summary);
    void denyAssignmentsListForScopeSignalFull(OAIHttpRequestWorker *worker, OAIDenyAssignmentListResult summary);

    Q_DECL_DEPRECATED_X("Use denyAssignmentsGetSignalError() instead")
    void denyAssignmentsGetSignalE(OAIDenyAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsGetSignalError(OAIDenyAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyAssignmentsGetByIdSignalError() instead")
    void denyAssignmentsGetByIdSignalE(OAIDenyAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsGetByIdSignalError(OAIDenyAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyAssignmentsListSignalError() instead")
    void denyAssignmentsListSignalE(OAIDenyAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsListSignalError(OAIDenyAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyAssignmentsListForResourceSignalError() instead")
    void denyAssignmentsListForResourceSignalE(OAIDenyAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsListForResourceSignalError(OAIDenyAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyAssignmentsListForResourceGroupSignalError() instead")
    void denyAssignmentsListForResourceGroupSignalE(OAIDenyAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsListForResourceGroupSignalError(OAIDenyAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyAssignmentsListForScopeSignalError() instead")
    void denyAssignmentsListForScopeSignalE(OAIDenyAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsListForScopeSignalError(OAIDenyAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use denyAssignmentsGetSignalErrorFull() instead")
    void denyAssignmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyAssignmentsGetByIdSignalErrorFull() instead")
    void denyAssignmentsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyAssignmentsListSignalErrorFull() instead")
    void denyAssignmentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyAssignmentsListForResourceSignalErrorFull() instead")
    void denyAssignmentsListForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsListForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyAssignmentsListForResourceGroupSignalErrorFull() instead")
    void denyAssignmentsListForResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsListForResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denyAssignmentsListForScopeSignalErrorFull() instead")
    void denyAssignmentsListForScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void denyAssignmentsListForScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
