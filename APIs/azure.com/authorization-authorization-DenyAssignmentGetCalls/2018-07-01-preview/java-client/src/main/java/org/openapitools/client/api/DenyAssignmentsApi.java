/*
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DenyAssignment;
import org.openapitools.client.model.DenyAssignmentListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DenyAssignmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DenyAssignmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DenyAssignmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for denyAssignmentsGet
     * @param scope The scope of the deny assignment. (required)
     * @param denyAssignmentId The ID of the deny assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the deny assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsGetCall(String scope, String denyAssignmentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "denyAssignmentId" + "}", localVarApiClient.escapeString(denyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyAssignmentsGetValidateBeforeCall(String scope, String denyAssignmentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling denyAssignmentsGet(Async)");
        }

        // verify the required parameter 'denyAssignmentId' is set
        if (denyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'denyAssignmentId' when calling denyAssignmentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling denyAssignmentsGet(Async)");
        }

        return denyAssignmentsGetCall(scope, denyAssignmentId, apiVersion, _callback);

    }

    /**
     * 
     * Get the specified deny assignment.
     * @param scope The scope of the deny assignment. (required)
     * @param denyAssignmentId The ID of the deny assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return DenyAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the deny assignment. </td><td>  -  </td></tr>
     </table>
     */
    public DenyAssignment denyAssignmentsGet(String scope, String denyAssignmentId, String apiVersion) throws ApiException {
        ApiResponse<DenyAssignment> localVarResp = denyAssignmentsGetWithHttpInfo(scope, denyAssignmentId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the specified deny assignment.
     * @param scope The scope of the deny assignment. (required)
     * @param denyAssignmentId The ID of the deny assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;DenyAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the deny assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DenyAssignment> denyAssignmentsGetWithHttpInfo(String scope, String denyAssignmentId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = denyAssignmentsGetValidateBeforeCall(scope, denyAssignmentId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DenyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the specified deny assignment.
     * @param scope The scope of the deny assignment. (required)
     * @param denyAssignmentId The ID of the deny assignment to get. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the deny assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsGetAsync(String scope, String denyAssignmentId, String apiVersion, final ApiCallback<DenyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyAssignmentsGetValidateBeforeCall(scope, denyAssignmentId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DenyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for denyAssignmentsGetById
     * @param denyAssignmentId The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the deny assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsGetByIdCall(String denyAssignmentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{denyAssignmentId}"
            .replace("{" + "denyAssignmentId" + "}", localVarApiClient.escapeString(denyAssignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyAssignmentsGetByIdValidateBeforeCall(String denyAssignmentId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'denyAssignmentId' is set
        if (denyAssignmentId == null) {
            throw new ApiException("Missing the required parameter 'denyAssignmentId' when calling denyAssignmentsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling denyAssignmentsGetById(Async)");
        }

        return denyAssignmentsGetByIdCall(denyAssignmentId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a deny assignment by ID.
     * @param denyAssignmentId The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return DenyAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the deny assignment. </td><td>  -  </td></tr>
     </table>
     */
    public DenyAssignment denyAssignmentsGetById(String denyAssignmentId, String apiVersion) throws ApiException {
        ApiResponse<DenyAssignment> localVarResp = denyAssignmentsGetByIdWithHttpInfo(denyAssignmentId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a deny assignment by ID.
     * @param denyAssignmentId The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;DenyAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the deny assignment. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DenyAssignment> denyAssignmentsGetByIdWithHttpInfo(String denyAssignmentId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = denyAssignmentsGetByIdValidateBeforeCall(denyAssignmentId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DenyAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a deny assignment by ID.
     * @param denyAssignmentId The fully qualified deny assignment ID. For example, use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for subscription level deny assignments, or /providers/Microsoft.Authorization/denyAssignments/{denyAssignmentId} for tenant level deny assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the deny assignment. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsGetByIdAsync(String denyAssignmentId, String apiVersion, final ApiCallback<DenyAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyAssignmentsGetByIdValidateBeforeCall(denyAssignmentId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DenyAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for denyAssignmentsList
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsListCall(String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/denyAssignments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyAssignmentsListValidateBeforeCall(String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling denyAssignmentsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling denyAssignmentsList(Async)");
        }

        return denyAssignmentsListCall(subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets all deny assignments for the subscription.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @return DenyAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public DenyAssignmentListResult denyAssignmentsList(String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<DenyAssignmentListResult> localVarResp = denyAssignmentsListWithHttpInfo(subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all deny assignments for the subscription.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @return ApiResponse&lt;DenyAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DenyAssignmentListResult> denyAssignmentsListWithHttpInfo(String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = denyAssignmentsListValidateBeforeCall(subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<DenyAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all deny assignments for the subscription.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsListAsync(String subscriptionId, String apiVersion, String $filter, final ApiCallback<DenyAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyAssignmentsListValidateBeforeCall(subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<DenyAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for denyAssignmentsListForResource
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get deny assignments for. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsListForResourceCall(String subscriptionId, String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/denyAssignments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceProviderNamespace" + "}", localVarApiClient.escapeString(resourceProviderNamespace.toString()))
            .replace("{" + "parentResourcePath" + "}", localVarApiClient.escapeString(parentResourcePath.toString()))
            .replace("{" + "resourceType" + "}", localVarApiClient.escapeString(resourceType.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyAssignmentsListForResourceValidateBeforeCall(String subscriptionId, String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling denyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling denyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'resourceProviderNamespace' is set
        if (resourceProviderNamespace == null) {
            throw new ApiException("Missing the required parameter 'resourceProviderNamespace' when calling denyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'parentResourcePath' is set
        if (parentResourcePath == null) {
            throw new ApiException("Missing the required parameter 'parentResourcePath' when calling denyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'resourceType' is set
        if (resourceType == null) {
            throw new ApiException("Missing the required parameter 'resourceType' when calling denyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling denyAssignmentsListForResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling denyAssignmentsListForResource(Async)");
        }

        return denyAssignmentsListForResourceCall(subscriptionId, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets deny assignments for a resource.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get deny assignments for. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @return DenyAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public DenyAssignmentListResult denyAssignmentsListForResource(String subscriptionId, String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<DenyAssignmentListResult> localVarResp = denyAssignmentsListForResourceWithHttpInfo(subscriptionId, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets deny assignments for a resource.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get deny assignments for. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @return ApiResponse&lt;DenyAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DenyAssignmentListResult> denyAssignmentsListForResourceWithHttpInfo(String subscriptionId, String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = denyAssignmentsListForResourceValidateBeforeCall(subscriptionId, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<DenyAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets deny assignments for a resource.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param resourceProviderNamespace The namespace of the resource provider. (required)
     * @param parentResourcePath The parent resource identity. (required)
     * @param resourceType The resource type of the resource. (required)
     * @param resourceName The name of the resource to get deny assignments for. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsListForResourceAsync(String subscriptionId, String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, String $filter, final ApiCallback<DenyAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyAssignmentsListForResourceValidateBeforeCall(subscriptionId, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<DenyAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for denyAssignmentsListForResourceGroup
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsListForResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/denyAssignments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyAssignmentsListForResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling denyAssignmentsListForResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling denyAssignmentsListForResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling denyAssignmentsListForResourceGroup(Async)");
        }

        return denyAssignmentsListForResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets deny assignments for a resource group.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @return DenyAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public DenyAssignmentListResult denyAssignmentsListForResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<DenyAssignmentListResult> localVarResp = denyAssignmentsListForResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets deny assignments for a resource group.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @return ApiResponse&lt;DenyAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DenyAssignmentListResult> denyAssignmentsListForResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = denyAssignmentsListForResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<DenyAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets deny assignments for a resource group.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsListForResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, final ApiCallback<DenyAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyAssignmentsListForResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<DenyAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for denyAssignmentsListForScope
     * @param scope The scope of the deny assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsListForScopeCall(String scope, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/denyAssignments"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyAssignmentsListForScopeValidateBeforeCall(String scope, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling denyAssignmentsListForScope(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling denyAssignmentsListForScope(Async)");
        }

        return denyAssignmentsListForScopeCall(scope, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets deny assignments for a scope.
     * @param scope The scope of the deny assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @return DenyAssignmentListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public DenyAssignmentListResult denyAssignmentsListForScope(String scope, String apiVersion, String $filter) throws ApiException {
        ApiResponse<DenyAssignmentListResult> localVarResp = denyAssignmentsListForScopeWithHttpInfo(scope, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets deny assignments for a scope.
     * @param scope The scope of the deny assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @return ApiResponse&lt;DenyAssignmentListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DenyAssignmentListResult> denyAssignmentsListForScopeWithHttpInfo(String scope, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = denyAssignmentsListForScopeValidateBeforeCall(scope, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<DenyAssignmentListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets deny assignments for a scope.
     * @param scope The scope of the deny assignments. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use $filter&#x3D;atScope() to return all deny assignments at or above the scope. Use $filter&#x3D;denyAssignmentName eq &#39;{name}&#39; to search deny assignments by name at specified scope. Use $filter&#x3D;principalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. Use $filter&#x3D;gdprExportPrincipalId eq &#39;{id}&#39; to return all deny assignments at, above and below the scope for the specified principal. This filter is different from the principalId filter as it returns not only those deny assignments that contain the specified principal is the Principals list but also those deny assignments that contain the specified principal is the ExcludePrincipals list. Additionally, when gdprExportPrincipalId filter is used, only the deny assignment name and description properties are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of deny assignments. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denyAssignmentsListForScopeAsync(String scope, String apiVersion, String $filter, final ApiCallback<DenyAssignmentListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyAssignmentsListForScopeValidateBeforeCall(scope, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<DenyAssignmentListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
