/*
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to get deny assignments. A deny assignment describes the set of actions on resources that are denied for Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2018-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DenyAssignmentPermission;
import org.openapitools.client.model.Principal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Deny assignment properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:58.749027-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DenyAssignmentProperties {
  public static final String SERIALIZED_NAME_DENY_ASSIGNMENT_NAME = "denyAssignmentName";
  @SerializedName(SERIALIZED_NAME_DENY_ASSIGNMENT_NAME)
  private String denyAssignmentName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DO_NOT_APPLY_TO_CHILD_SCOPES = "doNotApplyToChildScopes";
  @SerializedName(SERIALIZED_NAME_DO_NOT_APPLY_TO_CHILD_SCOPES)
  private Boolean doNotApplyToChildScopes;

  public static final String SERIALIZED_NAME_EXCLUDE_PRINCIPALS = "excludePrincipals";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_PRINCIPALS)
  private List<Principal> excludePrincipals = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_SYSTEM_PROTECTED = "isSystemProtected";
  @SerializedName(SERIALIZED_NAME_IS_SYSTEM_PROTECTED)
  private Boolean isSystemProtected;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<DenyAssignmentPermission> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRINCIPALS = "principals";
  @SerializedName(SERIALIZED_NAME_PRINCIPALS)
  private List<Principal> principals = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public DenyAssignmentProperties() {
  }

  public DenyAssignmentProperties denyAssignmentName(String denyAssignmentName) {
    this.denyAssignmentName = denyAssignmentName;
    return this;
  }

  /**
   * The display name of the deny assignment.
   * @return denyAssignmentName
   */
  @javax.annotation.Nullable
  public String getDenyAssignmentName() {
    return denyAssignmentName;
  }

  public void setDenyAssignmentName(String denyAssignmentName) {
    this.denyAssignmentName = denyAssignmentName;
  }


  public DenyAssignmentProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the deny assignment.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DenyAssignmentProperties doNotApplyToChildScopes(Boolean doNotApplyToChildScopes) {
    this.doNotApplyToChildScopes = doNotApplyToChildScopes;
    return this;
  }

  /**
   * Determines if the deny assignment applies to child scopes. Default value is false.
   * @return doNotApplyToChildScopes
   */
  @javax.annotation.Nullable
  public Boolean getDoNotApplyToChildScopes() {
    return doNotApplyToChildScopes;
  }

  public void setDoNotApplyToChildScopes(Boolean doNotApplyToChildScopes) {
    this.doNotApplyToChildScopes = doNotApplyToChildScopes;
  }


  public DenyAssignmentProperties excludePrincipals(List<Principal> excludePrincipals) {
    this.excludePrincipals = excludePrincipals;
    return this;
  }

  public DenyAssignmentProperties addExcludePrincipalsItem(Principal excludePrincipalsItem) {
    if (this.excludePrincipals == null) {
      this.excludePrincipals = new ArrayList<>();
    }
    this.excludePrincipals.add(excludePrincipalsItem);
    return this;
  }

  /**
   * Array of principals to which the deny assignment does not apply.
   * @return excludePrincipals
   */
  @javax.annotation.Nullable
  public List<Principal> getExcludePrincipals() {
    return excludePrincipals;
  }

  public void setExcludePrincipals(List<Principal> excludePrincipals) {
    this.excludePrincipals = excludePrincipals;
  }


  public DenyAssignmentProperties isSystemProtected(Boolean isSystemProtected) {
    this.isSystemProtected = isSystemProtected;
    return this;
  }

  /**
   * Specifies whether this deny assignment was created by Azure and cannot be edited or deleted.
   * @return isSystemProtected
   */
  @javax.annotation.Nullable
  public Boolean getIsSystemProtected() {
    return isSystemProtected;
  }

  public void setIsSystemProtected(Boolean isSystemProtected) {
    this.isSystemProtected = isSystemProtected;
  }


  public DenyAssignmentProperties permissions(List<DenyAssignmentPermission> permissions) {
    this.permissions = permissions;
    return this;
  }

  public DenyAssignmentProperties addPermissionsItem(DenyAssignmentPermission permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * An array of permissions that are denied by the deny assignment.
   * @return permissions
   */
  @javax.annotation.Nullable
  public List<DenyAssignmentPermission> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<DenyAssignmentPermission> permissions) {
    this.permissions = permissions;
  }


  public DenyAssignmentProperties principals(List<Principal> principals) {
    this.principals = principals;
    return this;
  }

  public DenyAssignmentProperties addPrincipalsItem(Principal principalsItem) {
    if (this.principals == null) {
      this.principals = new ArrayList<>();
    }
    this.principals.add(principalsItem);
    return this;
  }

  /**
   * Array of principals to which the deny assignment applies.
   * @return principals
   */
  @javax.annotation.Nullable
  public List<Principal> getPrincipals() {
    return principals;
  }

  public void setPrincipals(List<Principal> principals) {
    this.principals = principals;
  }


  public DenyAssignmentProperties scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * The deny assignment scope.
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DenyAssignmentProperties denyAssignmentProperties = (DenyAssignmentProperties) o;
    return Objects.equals(this.denyAssignmentName, denyAssignmentProperties.denyAssignmentName) &&
        Objects.equals(this.description, denyAssignmentProperties.description) &&
        Objects.equals(this.doNotApplyToChildScopes, denyAssignmentProperties.doNotApplyToChildScopes) &&
        Objects.equals(this.excludePrincipals, denyAssignmentProperties.excludePrincipals) &&
        Objects.equals(this.isSystemProtected, denyAssignmentProperties.isSystemProtected) &&
        Objects.equals(this.permissions, denyAssignmentProperties.permissions) &&
        Objects.equals(this.principals, denyAssignmentProperties.principals) &&
        Objects.equals(this.scope, denyAssignmentProperties.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(denyAssignmentName, description, doNotApplyToChildScopes, excludePrincipals, isSystemProtected, permissions, principals, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DenyAssignmentProperties {\n");
    sb.append("    denyAssignmentName: ").append(toIndentedString(denyAssignmentName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    doNotApplyToChildScopes: ").append(toIndentedString(doNotApplyToChildScopes)).append("\n");
    sb.append("    excludePrincipals: ").append(toIndentedString(excludePrincipals)).append("\n");
    sb.append("    isSystemProtected: ").append(toIndentedString(isSystemProtected)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    principals: ").append(toIndentedString(principals)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("denyAssignmentName");
    openapiFields.add("description");
    openapiFields.add("doNotApplyToChildScopes");
    openapiFields.add("excludePrincipals");
    openapiFields.add("isSystemProtected");
    openapiFields.add("permissions");
    openapiFields.add("principals");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DenyAssignmentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DenyAssignmentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DenyAssignmentProperties is not found in the empty JSON string", DenyAssignmentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DenyAssignmentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DenyAssignmentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("denyAssignmentName") != null && !jsonObj.get("denyAssignmentName").isJsonNull()) && !jsonObj.get("denyAssignmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `denyAssignmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("denyAssignmentName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("excludePrincipals") != null && !jsonObj.get("excludePrincipals").isJsonNull()) {
        JsonArray jsonArrayexcludePrincipals = jsonObj.getAsJsonArray("excludePrincipals");
        if (jsonArrayexcludePrincipals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludePrincipals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludePrincipals` to be an array in the JSON string but got `%s`", jsonObj.get("excludePrincipals").toString()));
          }

          // validate the optional field `excludePrincipals` (array)
          for (int i = 0; i < jsonArrayexcludePrincipals.size(); i++) {
            Principal.validateJsonElement(jsonArrayexcludePrincipals.get(i));
          };
        }
      }
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        JsonArray jsonArraypermissions = jsonObj.getAsJsonArray("permissions");
        if (jsonArraypermissions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("permissions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
          }

          // validate the optional field `permissions` (array)
          for (int i = 0; i < jsonArraypermissions.size(); i++) {
            DenyAssignmentPermission.validateJsonElement(jsonArraypermissions.get(i));
          };
        }
      }
      if (jsonObj.get("principals") != null && !jsonObj.get("principals").isJsonNull()) {
        JsonArray jsonArrayprincipals = jsonObj.getAsJsonArray("principals");
        if (jsonArrayprincipals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("principals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `principals` to be an array in the JSON string but got `%s`", jsonObj.get("principals").toString()));
          }

          // validate the optional field `principals` (array)
          for (int i = 0; i < jsonArrayprincipals.size(); i++) {
            Principal.validateJsonElement(jsonArrayprincipals.get(i));
          };
        }
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DenyAssignmentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DenyAssignmentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DenyAssignmentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DenyAssignmentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DenyAssignmentProperties>() {
           @Override
           public void write(JsonWriter out, DenyAssignmentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DenyAssignmentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DenyAssignmentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DenyAssignmentProperties
   * @throws IOException if the JSON string is invalid with respect to DenyAssignmentProperties
   */
  public static DenyAssignmentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DenyAssignmentProperties.class);
  }

  /**
   * Convert an instance of DenyAssignmentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

