/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPublicIPAddresses_GetVirtualMachineScaleSetPublicIPAddress_200_response.h"
#include "OAIPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_machine_scale_set_name QString [required]
    * @param[in]  virtualmachine_index QString [required]
    * @param[in]  network_interface_name QString [required]
    * @param[in]  ip_configuration_name QString [required]
    * @param[in]  public_ip_address_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void publicIPAddressesGetVirtualMachineScaleSetPublicIPAddress(const QString &resource_group_name, const QString &virtual_machine_scale_set_name, const QString &virtualmachine_index, const QString &network_interface_name, const QString &ip_configuration_name, const QString &public_ip_address_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_machine_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void publicIPAddressesListVirtualMachineScaleSetPublicIPAddresses(const QString &resource_group_name, const QString &virtual_machine_scale_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_machine_scale_set_name QString [required]
    * @param[in]  virtualmachine_index QString [required]
    * @param[in]  network_interface_name QString [required]
    * @param[in]  ip_configuration_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddresses(const QString &resource_group_name, const QString &virtual_machine_scale_set_name, const QString &virtualmachine_index, const QString &network_interface_name, const QString &ip_configuration_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void publicIPAddressesGetVirtualMachineScaleSetPublicIPAddressCallback(OAIHttpRequestWorker *worker);
    void publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesCallback(OAIHttpRequestWorker *worker);
    void publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void publicIPAddressesGetVirtualMachineScaleSetPublicIPAddressSignal(OAIPublicIPAddresses_GetVirtualMachineScaleSetPublicIPAddress_200_response summary);
    void publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesSignal(OAIPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses_200_response summary);
    void publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesSignal(OAIPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses_200_response summary);


    void publicIPAddressesGetVirtualMachineScaleSetPublicIPAddressSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPAddresses_GetVirtualMachineScaleSetPublicIPAddress_200_response summary);
    void publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses_200_response summary);
    void publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesSignalFull(OAIHttpRequestWorker *worker, OAIPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses_200_response summary);

    Q_DECL_DEPRECATED_X("Use publicIPAddressesGetVirtualMachineScaleSetPublicIPAddressSignalError() instead")
    void publicIPAddressesGetVirtualMachineScaleSetPublicIPAddressSignalE(OAIPublicIPAddresses_GetVirtualMachineScaleSetPublicIPAddress_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesGetVirtualMachineScaleSetPublicIPAddressSignalError(OAIPublicIPAddresses_GetVirtualMachineScaleSetPublicIPAddress_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesSignalError() instead")
    void publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesSignalE(OAIPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesSignalError(OAIPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesSignalError() instead")
    void publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesSignalE(OAIPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesSignalError(OAIPublicIPAddresses_ListVirtualMachineScaleSetPublicIPAddresses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use publicIPAddressesGetVirtualMachineScaleSetPublicIPAddressSignalErrorFull() instead")
    void publicIPAddressesGetVirtualMachineScaleSetPublicIPAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesGetVirtualMachineScaleSetPublicIPAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesSignalErrorFull() instead")
    void publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesListVirtualMachineScaleSetPublicIPAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesSignalErrorFull() instead")
    void publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publicIPAddressesListVirtualMachineScaleSetVMPublicIPAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
