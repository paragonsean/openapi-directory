/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2017-08-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerServiceAgentPoolProfile from './ContainerServiceAgentPoolProfile';
import ContainerServiceLinuxProfile from './ContainerServiceLinuxProfile';
import ContainerServiceServicePrincipalProfile from './ContainerServiceServicePrincipalProfile';

/**
 * The ManagedClusterProperties model module.
 * @module model/ManagedClusterProperties
 * @version 2017-08-31
 */
class ManagedClusterProperties {
    /**
     * Constructs a new <code>ManagedClusterProperties</code>.
     * Properties of the managed cluster.
     * @alias module:model/ManagedClusterProperties
     */
    constructor() { 
        
        ManagedClusterProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagedClusterProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagedClusterProperties} obj Optional instance to populate.
     * @return {module:model/ManagedClusterProperties} The populated <code>ManagedClusterProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagedClusterProperties();

            if (data.hasOwnProperty('agentPoolProfiles')) {
                obj['agentPoolProfiles'] = ApiClient.convertToType(data['agentPoolProfiles'], [ContainerServiceAgentPoolProfile]);
            }
            if (data.hasOwnProperty('dnsPrefix')) {
                obj['dnsPrefix'] = ApiClient.convertToType(data['dnsPrefix'], 'String');
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('kubernetesVersion')) {
                obj['kubernetesVersion'] = ApiClient.convertToType(data['kubernetesVersion'], 'String');
            }
            if (data.hasOwnProperty('linuxProfile')) {
                obj['linuxProfile'] = ContainerServiceLinuxProfile.constructFromObject(data['linuxProfile']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('servicePrincipalProfile')) {
                obj['servicePrincipalProfile'] = ContainerServiceServicePrincipalProfile.constructFromObject(data['servicePrincipalProfile']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagedClusterProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagedClusterProperties</code>.
     */
    static validateJSON(data) {
        if (data['agentPoolProfiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['agentPoolProfiles'])) {
                throw new Error("Expected the field `agentPoolProfiles` to be an array in the JSON data but got " + data['agentPoolProfiles']);
            }
            // validate the optional field `agentPoolProfiles` (array)
            for (const item of data['agentPoolProfiles']) {
                ContainerServiceAgentPoolProfile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dnsPrefix'] && !(typeof data['dnsPrefix'] === 'string' || data['dnsPrefix'] instanceof String)) {
            throw new Error("Expected the field `dnsPrefix` to be a primitive type in the JSON string but got " + data['dnsPrefix']);
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }
        // ensure the json data is a string
        if (data['kubernetesVersion'] && !(typeof data['kubernetesVersion'] === 'string' || data['kubernetesVersion'] instanceof String)) {
            throw new Error("Expected the field `kubernetesVersion` to be a primitive type in the JSON string but got " + data['kubernetesVersion']);
        }
        // validate the optional field `linuxProfile`
        if (data['linuxProfile']) { // data not null
          ContainerServiceLinuxProfile.validateJSON(data['linuxProfile']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `servicePrincipalProfile`
        if (data['servicePrincipalProfile']) { // data not null
          ContainerServiceServicePrincipalProfile.validateJSON(data['servicePrincipalProfile']);
        }

        return true;
    }


}



/**
 * Properties of the agent pool.
 * @member {Array.<module:model/ContainerServiceAgentPoolProfile>} agentPoolProfiles
 */
ManagedClusterProperties.prototype['agentPoolProfiles'] = undefined;

/**
 * DNS prefix specified when creating the managed cluster.
 * @member {String} dnsPrefix
 */
ManagedClusterProperties.prototype['dnsPrefix'] = undefined;

/**
 * FQDN for the master pool.
 * @member {String} fqdn
 */
ManagedClusterProperties.prototype['fqdn'] = undefined;

/**
 * Version of Kubernetes specified when creating the managed cluster.
 * @member {String} kubernetesVersion
 */
ManagedClusterProperties.prototype['kubernetesVersion'] = undefined;

/**
 * @member {module:model/ContainerServiceLinuxProfile} linuxProfile
 */
ManagedClusterProperties.prototype['linuxProfile'] = undefined;

/**
 * The current deployment or provisioning state, which only appears in the response.
 * @member {String} provisioningState
 */
ManagedClusterProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ContainerServiceServicePrincipalProfile} servicePrincipalProfile
 */
ManagedClusterProperties.prototype['servicePrincipalProfile'] = undefined;






export default ManagedClusterProperties;

