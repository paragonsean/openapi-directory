# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.restriction import Restriction
from openapi_server.models.sku_capability import SKUCapability
from openapi_server import util


class Sku(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[SKUCapability]=None, kind: str=None, locations: List[str]=None, name: str=None, resource_type: str=None, restrictions: List[Restriction]=None, tier: str=None):
        """Sku - a model defined in OpenAPI

        :param capabilities: The capabilities of this Sku.
        :param kind: The kind of this Sku.
        :param locations: The locations of this Sku.
        :param name: The name of this Sku.
        :param resource_type: The resource_type of this Sku.
        :param restrictions: The restrictions of this Sku.
        :param tier: The tier of this Sku.
        """
        self.openapi_types = {
            'capabilities': List[SKUCapability],
            'kind': str,
            'locations': List[str],
            'name': str,
            'resource_type': str,
            'restrictions': List[Restriction],
            'tier': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'kind': 'kind',
            'locations': 'locations',
            'name': 'name',
            'resource_type': 'resourceType',
            'restrictions': 'restrictions',
            'tier': 'tier'
        }

        self._capabilities = capabilities
        self._kind = kind
        self._locations = locations
        self._name = name
        self._resource_type = resource_type
        self._restrictions = restrictions
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Sku':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sku of this Sku.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this Sku.

        The capability information in the specified sku, including file encryption, network acls, change notification, etc.

        :return: The capabilities of this Sku.
        :rtype: List[SKUCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Sku.

        The capability information in the specified sku, including file encryption, network acls, change notification, etc.

        :param capabilities: The capabilities of this Sku.
        :type capabilities: List[SKUCapability]
        """

        self._capabilities = capabilities

    @property
    def kind(self):
        """Gets the kind of this Sku.

        Indicates the type of storage account.

        :return: The kind of this Sku.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Sku.

        Indicates the type of storage account.

        :param kind: The kind of this Sku.
        :type kind: str
        """
        allowed_values = ["Storage", "StorageV2", "BlobStorage"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def locations(self):
        """Gets the locations of this Sku.

        The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).

        :return: The locations of this Sku.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this Sku.

        The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).

        :param locations: The locations of this Sku.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this Sku.

        Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.

        :return: The name of this Sku.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sku.

        Gets or sets the sku name. Required for account creation; optional for update. Note that in older versions, sku name was called accountType.

        :param name: The name of this Sku.
        :type name: str
        """
        allowed_values = ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this Sku.

        The type of the resource, usually it is 'storageAccounts'.

        :return: The resource_type of this Sku.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Sku.

        The type of the resource, usually it is 'storageAccounts'.

        :param resource_type: The resource_type of this Sku.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def restrictions(self):
        """Gets the restrictions of this Sku.

        The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.

        :return: The restrictions of this Sku.
        :rtype: List[Restriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this Sku.

        The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.

        :param restrictions: The restrictions of this Sku.
        :type restrictions: List[Restriction]
        """

        self._restrictions = restrictions

    @property
    def tier(self):
        """Gets the tier of this Sku.

        Gets the sku tier. This is based on the SKU name.

        :return: The tier of this Sku.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this Sku.

        Gets the sku tier. This is based on the SKU name.

        :param tier: The tier of this Sku.
        :type tier: str
        """
        allowed_values = ["Standard", "Premium"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier
