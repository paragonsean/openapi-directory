/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISku.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISku::OAISku(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISku::OAISku() {
    this->initializeModel();
}

OAISku::~OAISku() {}

void OAISku::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAISku::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISku::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAISku::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISku::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_restrictions.size() > 0) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QList<OAISKUCapability> OAISku::getCapabilities() const {
    return m_capabilities;
}
void OAISku::setCapabilities(const QList<OAISKUCapability> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAISku::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAISku::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAISku::getKind() const {
    return m_kind;
}
void OAISku::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISku::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISku::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QString> OAISku::getLocations() const {
    return m_locations;
}
void OAISku::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAISku::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAISku::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAISku::getName() const {
    return m_name;
}
void OAISku::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISku::is_name_Set() const{
    return m_name_isSet;
}

bool OAISku::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISku::getResourceType() const {
    return m_resource_type;
}
void OAISku::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAISku::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAISku::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList<OAIRestriction> OAISku::getRestrictions() const {
    return m_restrictions;
}
void OAISku::setRestrictions(const QList<OAIRestriction> &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAISku::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAISku::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QString OAISku::getTier() const {
    return m_tier;
}
void OAISku::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAISku::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAISku::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAISku::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISku::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
