/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountSasParameters;
import org.openapitools.client.model.CheckNameAvailabilityResult;
import org.openapitools.client.model.ListAccountSasResponse;
import org.openapitools.client.model.ListServiceSasResponse;
import org.openapitools.client.model.ServiceSasParameters;
import org.openapitools.client.model.StorageAccount;
import org.openapitools.client.model.StorageAccountCheckNameAvailabilityParameters;
import org.openapitools.client.model.StorageAccountCreateParameters;
import org.openapitools.client.model.StorageAccountListKeysResult;
import org.openapitools.client.model.StorageAccountListResult;
import org.openapitools.client.model.StorageAccountRegenerateKeyParameters;
import org.openapitools.client.model.StorageAccountUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorageAccountsApi
 */
@Disabled
public class StorageAccountsApiTest {

    private final StorageAccountsApi api = new StorageAccountsApi();

    /**
     * Checks that the storage account name is valid and is not already in use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsCheckNameAvailabilityTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountCheckNameAvailabilityParameters accountName = null;
        CheckNameAvailabilityResult response = api.storageAccountsCheckNameAvailability(apiVersion, subscriptionId, accountName);
        // TODO: test validations
    }

    /**
     * Asynchronously creates a new storage account with the specified parameters. If an account is already created and a subsequent create request is issued with different properties, the account properties will be updated. If an account is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsCreateTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountCreateParameters parameters = null;
        StorageAccount response = api.storageAccountsCreate(resourceGroupName, accountName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a storage account in Microsoft Azure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.storageAccountsDelete(resourceGroupName, accountName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns the properties for the specified storage account including but not limited to name, SKU name, location, and account status. The ListKeys operation should be used to retrieve storage keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsGetPropertiesTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccount response = api.storageAccountsGetProperties(resourceGroupName, accountName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountListResult response = api.storageAccountsList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * List SAS credentials of a storage account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsListAccountSASTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AccountSasParameters parameters = null;
        ListAccountSasResponse response = api.storageAccountsListAccountSAS(resourceGroupName, accountName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountListResult response = api.storageAccountsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists the access keys for the specified storage account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountListKeysResult response = api.storageAccountsListKeys(resourceGroupName, accountName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * List service SAS credentials of a specific resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsListServiceSASTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ServiceSasParameters parameters = null;
        ListServiceSasResponse response = api.storageAccountsListServiceSAS(resourceGroupName, accountName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Regenerates one of the access keys for the specified storage account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsRegenerateKeyTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountRegenerateKeyParameters regenerateKey = null;
        StorageAccountListKeysResult response = api.storageAccountsRegenerateKey(resourceGroupName, accountName, apiVersion, subscriptionId, regenerateKey);
        // TODO: test validations
    }

    /**
     * The update operation can be used to update the SKU, encryption, access tier, or tags for a storage account. It can also be used to map the account to a custom domain. Only one custom domain is supported per storage account; the replacement/change of custom domain is not supported. In order to replace an old custom domain, the old value must be cleared/unregistered before a new value can be set. The update of multiple properties is supported. This call does not change the storage keys for the account. If you want to change the storage account keys, use the regenerate keys operation. The location and name of the storage account cannot be changed after creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountUpdateParameters parameters = null;
        StorageAccount response = api.storageAccountsUpdate(resourceGroupName, accountName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
