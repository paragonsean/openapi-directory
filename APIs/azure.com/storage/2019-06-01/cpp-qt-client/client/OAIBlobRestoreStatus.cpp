/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlobRestoreStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlobRestoreStatus::OAIBlobRestoreStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlobRestoreStatus::OAIBlobRestoreStatus() {
    this->initializeModel();
}

OAIBlobRestoreStatus::~OAIBlobRestoreStatus() {}

void OAIBlobRestoreStatus::initializeModel() {

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_restore_id_isSet = false;
    m_restore_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIBlobRestoreStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlobRestoreStatus::fromJsonObject(QJsonObject json) {

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_restore_id_isValid = ::OpenAPI::fromJsonValue(m_restore_id, json[QString("restoreId")]);
    m_restore_id_isSet = !json[QString("restoreId")].isNull() && m_restore_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIBlobRestoreStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlobRestoreStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_restore_id_isSet) {
        obj.insert(QString("restoreId"), ::OpenAPI::toJsonValue(m_restore_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIBlobRestoreStatus::getFailureReason() const {
    return m_failure_reason;
}
void OAIBlobRestoreStatus::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIBlobRestoreStatus::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIBlobRestoreStatus::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

OAIBlobRestoreParameters OAIBlobRestoreStatus::getParameters() const {
    return m_parameters;
}
void OAIBlobRestoreStatus::setParameters(const OAIBlobRestoreParameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIBlobRestoreStatus::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIBlobRestoreStatus::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIBlobRestoreStatus::getRestoreId() const {
    return m_restore_id;
}
void OAIBlobRestoreStatus::setRestoreId(const QString &restore_id) {
    m_restore_id = restore_id;
    m_restore_id_isSet = true;
}

bool OAIBlobRestoreStatus::is_restore_id_Set() const{
    return m_restore_id_isSet;
}

bool OAIBlobRestoreStatus::is_restore_id_Valid() const{
    return m_restore_id_isValid;
}

QString OAIBlobRestoreStatus::getStatus() const {
    return m_status;
}
void OAIBlobRestoreStatus::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBlobRestoreStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBlobRestoreStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIBlobRestoreStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlobRestoreStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
