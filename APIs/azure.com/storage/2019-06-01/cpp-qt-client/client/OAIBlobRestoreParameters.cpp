/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlobRestoreParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlobRestoreParameters::OAIBlobRestoreParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlobRestoreParameters::OAIBlobRestoreParameters() {
    this->initializeModel();
}

OAIBlobRestoreParameters::~OAIBlobRestoreParameters() {}

void OAIBlobRestoreParameters::initializeModel() {

    m_blob_ranges_isSet = false;
    m_blob_ranges_isValid = false;

    m_time_to_restore_isSet = false;
    m_time_to_restore_isValid = false;
}

void OAIBlobRestoreParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlobRestoreParameters::fromJsonObject(QJsonObject json) {

    m_blob_ranges_isValid = ::OpenAPI::fromJsonValue(m_blob_ranges, json[QString("blobRanges")]);
    m_blob_ranges_isSet = !json[QString("blobRanges")].isNull() && m_blob_ranges_isValid;

    m_time_to_restore_isValid = ::OpenAPI::fromJsonValue(m_time_to_restore, json[QString("timeToRestore")]);
    m_time_to_restore_isSet = !json[QString("timeToRestore")].isNull() && m_time_to_restore_isValid;
}

QString OAIBlobRestoreParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlobRestoreParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_ranges.size() > 0) {
        obj.insert(QString("blobRanges"), ::OpenAPI::toJsonValue(m_blob_ranges));
    }
    if (m_time_to_restore_isSet) {
        obj.insert(QString("timeToRestore"), ::OpenAPI::toJsonValue(m_time_to_restore));
    }
    return obj;
}

QList<OAIBlobRestoreRange> OAIBlobRestoreParameters::getBlobRanges() const {
    return m_blob_ranges;
}
void OAIBlobRestoreParameters::setBlobRanges(const QList<OAIBlobRestoreRange> &blob_ranges) {
    m_blob_ranges = blob_ranges;
    m_blob_ranges_isSet = true;
}

bool OAIBlobRestoreParameters::is_blob_ranges_Set() const{
    return m_blob_ranges_isSet;
}

bool OAIBlobRestoreParameters::is_blob_ranges_Valid() const{
    return m_blob_ranges_isValid;
}

QDateTime OAIBlobRestoreParameters::getTimeToRestore() const {
    return m_time_to_restore;
}
void OAIBlobRestoreParameters::setTimeToRestore(const QDateTime &time_to_restore) {
    m_time_to_restore = time_to_restore;
    m_time_to_restore_isSet = true;
}

bool OAIBlobRestoreParameters::is_time_to_restore_Set() const{
    return m_time_to_restore_isSet;
}

bool OAIBlobRestoreParameters::is_time_to_restore_Valid() const{
    return m_time_to_restore_isValid;
}

bool OAIBlobRestoreParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_restore_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlobRestoreParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blob_ranges_isValid && m_time_to_restore_isValid && true;
}

} // namespace OpenAPI
