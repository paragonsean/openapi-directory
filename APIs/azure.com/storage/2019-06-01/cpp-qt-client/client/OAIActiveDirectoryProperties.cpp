/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveDirectoryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveDirectoryProperties::OAIActiveDirectoryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveDirectoryProperties::OAIActiveDirectoryProperties() {
    this->initializeModel();
}

OAIActiveDirectoryProperties::~OAIActiveDirectoryProperties() {}

void OAIActiveDirectoryProperties::initializeModel() {

    m_azure_storage_sid_isSet = false;
    m_azure_storage_sid_isValid = false;

    m_domain_guid_isSet = false;
    m_domain_guid_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_domain_sid_isSet = false;
    m_domain_sid_isValid = false;

    m_forest_name_isSet = false;
    m_forest_name_isValid = false;

    m_net_bios_domain_name_isSet = false;
    m_net_bios_domain_name_isValid = false;
}

void OAIActiveDirectoryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActiveDirectoryProperties::fromJsonObject(QJsonObject json) {

    m_azure_storage_sid_isValid = ::OpenAPI::fromJsonValue(m_azure_storage_sid, json[QString("azureStorageSid")]);
    m_azure_storage_sid_isSet = !json[QString("azureStorageSid")].isNull() && m_azure_storage_sid_isValid;

    m_domain_guid_isValid = ::OpenAPI::fromJsonValue(m_domain_guid, json[QString("domainGuid")]);
    m_domain_guid_isSet = !json[QString("domainGuid")].isNull() && m_domain_guid_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_domain_sid_isValid = ::OpenAPI::fromJsonValue(m_domain_sid, json[QString("domainSid")]);
    m_domain_sid_isSet = !json[QString("domainSid")].isNull() && m_domain_sid_isValid;

    m_forest_name_isValid = ::OpenAPI::fromJsonValue(m_forest_name, json[QString("forestName")]);
    m_forest_name_isSet = !json[QString("forestName")].isNull() && m_forest_name_isValid;

    m_net_bios_domain_name_isValid = ::OpenAPI::fromJsonValue(m_net_bios_domain_name, json[QString("netBiosDomainName")]);
    m_net_bios_domain_name_isSet = !json[QString("netBiosDomainName")].isNull() && m_net_bios_domain_name_isValid;
}

QString OAIActiveDirectoryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActiveDirectoryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_storage_sid_isSet) {
        obj.insert(QString("azureStorageSid"), ::OpenAPI::toJsonValue(m_azure_storage_sid));
    }
    if (m_domain_guid_isSet) {
        obj.insert(QString("domainGuid"), ::OpenAPI::toJsonValue(m_domain_guid));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_domain_sid_isSet) {
        obj.insert(QString("domainSid"), ::OpenAPI::toJsonValue(m_domain_sid));
    }
    if (m_forest_name_isSet) {
        obj.insert(QString("forestName"), ::OpenAPI::toJsonValue(m_forest_name));
    }
    if (m_net_bios_domain_name_isSet) {
        obj.insert(QString("netBiosDomainName"), ::OpenAPI::toJsonValue(m_net_bios_domain_name));
    }
    return obj;
}

QString OAIActiveDirectoryProperties::getAzureStorageSid() const {
    return m_azure_storage_sid;
}
void OAIActiveDirectoryProperties::setAzureStorageSid(const QString &azure_storage_sid) {
    m_azure_storage_sid = azure_storage_sid;
    m_azure_storage_sid_isSet = true;
}

bool OAIActiveDirectoryProperties::is_azure_storage_sid_Set() const{
    return m_azure_storage_sid_isSet;
}

bool OAIActiveDirectoryProperties::is_azure_storage_sid_Valid() const{
    return m_azure_storage_sid_isValid;
}

QString OAIActiveDirectoryProperties::getDomainGuid() const {
    return m_domain_guid;
}
void OAIActiveDirectoryProperties::setDomainGuid(const QString &domain_guid) {
    m_domain_guid = domain_guid;
    m_domain_guid_isSet = true;
}

bool OAIActiveDirectoryProperties::is_domain_guid_Set() const{
    return m_domain_guid_isSet;
}

bool OAIActiveDirectoryProperties::is_domain_guid_Valid() const{
    return m_domain_guid_isValid;
}

QString OAIActiveDirectoryProperties::getDomainName() const {
    return m_domain_name;
}
void OAIActiveDirectoryProperties::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIActiveDirectoryProperties::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIActiveDirectoryProperties::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIActiveDirectoryProperties::getDomainSid() const {
    return m_domain_sid;
}
void OAIActiveDirectoryProperties::setDomainSid(const QString &domain_sid) {
    m_domain_sid = domain_sid;
    m_domain_sid_isSet = true;
}

bool OAIActiveDirectoryProperties::is_domain_sid_Set() const{
    return m_domain_sid_isSet;
}

bool OAIActiveDirectoryProperties::is_domain_sid_Valid() const{
    return m_domain_sid_isValid;
}

QString OAIActiveDirectoryProperties::getForestName() const {
    return m_forest_name;
}
void OAIActiveDirectoryProperties::setForestName(const QString &forest_name) {
    m_forest_name = forest_name;
    m_forest_name_isSet = true;
}

bool OAIActiveDirectoryProperties::is_forest_name_Set() const{
    return m_forest_name_isSet;
}

bool OAIActiveDirectoryProperties::is_forest_name_Valid() const{
    return m_forest_name_isValid;
}

QString OAIActiveDirectoryProperties::getNetBiosDomainName() const {
    return m_net_bios_domain_name;
}
void OAIActiveDirectoryProperties::setNetBiosDomainName(const QString &net_bios_domain_name) {
    m_net_bios_domain_name = net_bios_domain_name;
    m_net_bios_domain_name_isSet = true;
}

bool OAIActiveDirectoryProperties::is_net_bios_domain_name_Set() const{
    return m_net_bios_domain_name_isSet;
}

bool OAIActiveDirectoryProperties::is_net_bios_domain_name_Valid() const{
    return m_net_bios_domain_name_isValid;
}

bool OAIActiveDirectoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_storage_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_bios_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActiveDirectoryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_azure_storage_sid_isValid && m_domain_guid_isValid && m_domain_name_isValid && m_domain_sid_isValid && m_forest_name_isValid && m_net_bios_domain_name_isValid && true;
}

} // namespace OpenAPI
