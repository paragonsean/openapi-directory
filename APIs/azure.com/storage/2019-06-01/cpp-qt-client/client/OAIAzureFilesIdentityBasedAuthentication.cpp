/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureFilesIdentityBasedAuthentication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureFilesIdentityBasedAuthentication::OAIAzureFilesIdentityBasedAuthentication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureFilesIdentityBasedAuthentication::OAIAzureFilesIdentityBasedAuthentication() {
    this->initializeModel();
}

OAIAzureFilesIdentityBasedAuthentication::~OAIAzureFilesIdentityBasedAuthentication() {}

void OAIAzureFilesIdentityBasedAuthentication::initializeModel() {

    m_active_directory_properties_isSet = false;
    m_active_directory_properties_isValid = false;

    m_directory_service_options_isSet = false;
    m_directory_service_options_isValid = false;
}

void OAIAzureFilesIdentityBasedAuthentication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureFilesIdentityBasedAuthentication::fromJsonObject(QJsonObject json) {

    m_active_directory_properties_isValid = ::OpenAPI::fromJsonValue(m_active_directory_properties, json[QString("activeDirectoryProperties")]);
    m_active_directory_properties_isSet = !json[QString("activeDirectoryProperties")].isNull() && m_active_directory_properties_isValid;

    m_directory_service_options_isValid = ::OpenAPI::fromJsonValue(m_directory_service_options, json[QString("directoryServiceOptions")]);
    m_directory_service_options_isSet = !json[QString("directoryServiceOptions")].isNull() && m_directory_service_options_isValid;
}

QString OAIAzureFilesIdentityBasedAuthentication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureFilesIdentityBasedAuthentication::asJsonObject() const {
    QJsonObject obj;
    if (m_active_directory_properties.isSet()) {
        obj.insert(QString("activeDirectoryProperties"), ::OpenAPI::toJsonValue(m_active_directory_properties));
    }
    if (m_directory_service_options_isSet) {
        obj.insert(QString("directoryServiceOptions"), ::OpenAPI::toJsonValue(m_directory_service_options));
    }
    return obj;
}

OAIActiveDirectoryProperties OAIAzureFilesIdentityBasedAuthentication::getActiveDirectoryProperties() const {
    return m_active_directory_properties;
}
void OAIAzureFilesIdentityBasedAuthentication::setActiveDirectoryProperties(const OAIActiveDirectoryProperties &active_directory_properties) {
    m_active_directory_properties = active_directory_properties;
    m_active_directory_properties_isSet = true;
}

bool OAIAzureFilesIdentityBasedAuthentication::is_active_directory_properties_Set() const{
    return m_active_directory_properties_isSet;
}

bool OAIAzureFilesIdentityBasedAuthentication::is_active_directory_properties_Valid() const{
    return m_active_directory_properties_isValid;
}

QString OAIAzureFilesIdentityBasedAuthentication::getDirectoryServiceOptions() const {
    return m_directory_service_options;
}
void OAIAzureFilesIdentityBasedAuthentication::setDirectoryServiceOptions(const QString &directory_service_options) {
    m_directory_service_options = directory_service_options;
    m_directory_service_options_isSet = true;
}

bool OAIAzureFilesIdentityBasedAuthentication::is_directory_service_options_Set() const{
    return m_directory_service_options_isSet;
}

bool OAIAzureFilesIdentityBasedAuthentication::is_directory_service_options_Valid() const{
    return m_directory_service_options_isValid;
}

bool OAIAzureFilesIdentityBasedAuthentication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_directory_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_service_options_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureFilesIdentityBasedAuthentication::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_directory_service_options_isValid && true;
}

} // namespace OpenAPI
