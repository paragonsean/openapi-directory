/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoints::OAIEndpoints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoints::OAIEndpoints() {
    this->initializeModel();
}

OAIEndpoints::~OAIEndpoints() {}

void OAIEndpoints::initializeModel() {

    m_blob_isSet = false;
    m_blob_isValid = false;

    m_dfs_isSet = false;
    m_dfs_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_internet_endpoints_isSet = false;
    m_internet_endpoints_isValid = false;

    m_microsoft_endpoints_isSet = false;
    m_microsoft_endpoints_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_web_isSet = false;
    m_web_isValid = false;
}

void OAIEndpoints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoints::fromJsonObject(QJsonObject json) {

    m_blob_isValid = ::OpenAPI::fromJsonValue(m_blob, json[QString("blob")]);
    m_blob_isSet = !json[QString("blob")].isNull() && m_blob_isValid;

    m_dfs_isValid = ::OpenAPI::fromJsonValue(m_dfs, json[QString("dfs")]);
    m_dfs_isSet = !json[QString("dfs")].isNull() && m_dfs_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_internet_endpoints_isValid = ::OpenAPI::fromJsonValue(m_internet_endpoints, json[QString("internetEndpoints")]);
    m_internet_endpoints_isSet = !json[QString("internetEndpoints")].isNull() && m_internet_endpoints_isValid;

    m_microsoft_endpoints_isValid = ::OpenAPI::fromJsonValue(m_microsoft_endpoints, json[QString("microsoftEndpoints")]);
    m_microsoft_endpoints_isSet = !json[QString("microsoftEndpoints")].isNull() && m_microsoft_endpoints_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("queue")]);
    m_queue_isSet = !json[QString("queue")].isNull() && m_queue_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    m_web_isValid = ::OpenAPI::fromJsonValue(m_web, json[QString("web")]);
    m_web_isSet = !json[QString("web")].isNull() && m_web_isValid;
}

QString OAIEndpoints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoints::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_isSet) {
        obj.insert(QString("blob"), ::OpenAPI::toJsonValue(m_blob));
    }
    if (m_dfs_isSet) {
        obj.insert(QString("dfs"), ::OpenAPI::toJsonValue(m_dfs));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_internet_endpoints.isSet()) {
        obj.insert(QString("internetEndpoints"), ::OpenAPI::toJsonValue(m_internet_endpoints));
    }
    if (m_microsoft_endpoints.isSet()) {
        obj.insert(QString("microsoftEndpoints"), ::OpenAPI::toJsonValue(m_microsoft_endpoints));
    }
    if (m_queue_isSet) {
        obj.insert(QString("queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_web_isSet) {
        obj.insert(QString("web"), ::OpenAPI::toJsonValue(m_web));
    }
    return obj;
}

QString OAIEndpoints::getBlob() const {
    return m_blob;
}
void OAIEndpoints::setBlob(const QString &blob) {
    m_blob = blob;
    m_blob_isSet = true;
}

bool OAIEndpoints::is_blob_Set() const{
    return m_blob_isSet;
}

bool OAIEndpoints::is_blob_Valid() const{
    return m_blob_isValid;
}

QString OAIEndpoints::getDfs() const {
    return m_dfs;
}
void OAIEndpoints::setDfs(const QString &dfs) {
    m_dfs = dfs;
    m_dfs_isSet = true;
}

bool OAIEndpoints::is_dfs_Set() const{
    return m_dfs_isSet;
}

bool OAIEndpoints::is_dfs_Valid() const{
    return m_dfs_isValid;
}

QString OAIEndpoints::getFile() const {
    return m_file;
}
void OAIEndpoints::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIEndpoints::is_file_Set() const{
    return m_file_isSet;
}

bool OAIEndpoints::is_file_Valid() const{
    return m_file_isValid;
}

OAIStorageAccountInternetEndpoints OAIEndpoints::getInternetEndpoints() const {
    return m_internet_endpoints;
}
void OAIEndpoints::setInternetEndpoints(const OAIStorageAccountInternetEndpoints &internet_endpoints) {
    m_internet_endpoints = internet_endpoints;
    m_internet_endpoints_isSet = true;
}

bool OAIEndpoints::is_internet_endpoints_Set() const{
    return m_internet_endpoints_isSet;
}

bool OAIEndpoints::is_internet_endpoints_Valid() const{
    return m_internet_endpoints_isValid;
}

OAIStorageAccountMicrosoftEndpoints OAIEndpoints::getMicrosoftEndpoints() const {
    return m_microsoft_endpoints;
}
void OAIEndpoints::setMicrosoftEndpoints(const OAIStorageAccountMicrosoftEndpoints &microsoft_endpoints) {
    m_microsoft_endpoints = microsoft_endpoints;
    m_microsoft_endpoints_isSet = true;
}

bool OAIEndpoints::is_microsoft_endpoints_Set() const{
    return m_microsoft_endpoints_isSet;
}

bool OAIEndpoints::is_microsoft_endpoints_Valid() const{
    return m_microsoft_endpoints_isValid;
}

QString OAIEndpoints::getQueue() const {
    return m_queue;
}
void OAIEndpoints::setQueue(const QString &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIEndpoints::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIEndpoints::is_queue_Valid() const{
    return m_queue_isValid;
}

QString OAIEndpoints::getTable() const {
    return m_table;
}
void OAIEndpoints::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIEndpoints::is_table_Set() const{
    return m_table_isSet;
}

bool OAIEndpoints::is_table_Valid() const{
    return m_table_isValid;
}

QString OAIEndpoints::getWeb() const {
    return m_web;
}
void OAIEndpoints::setWeb(const QString &web) {
    m_web = web;
    m_web_isSet = true;
}

bool OAIEndpoints::is_web_Set() const{
    return m_web_isSet;
}

bool OAIEndpoints::is_web_Valid() const{
    return m_web_isValid;
}

bool OAIEndpoints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dfs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internet_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
