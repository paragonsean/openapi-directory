/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionServices.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionServices::OAIEncryptionServices(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionServices::OAIEncryptionServices() {
    this->initializeModel();
}

OAIEncryptionServices::~OAIEncryptionServices() {}

void OAIEncryptionServices::initializeModel() {

    m_blob_isSet = false;
    m_blob_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;
}

void OAIEncryptionServices::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionServices::fromJsonObject(QJsonObject json) {

    m_blob_isValid = ::OpenAPI::fromJsonValue(m_blob, json[QString("blob")]);
    m_blob_isSet = !json[QString("blob")].isNull() && m_blob_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("queue")]);
    m_queue_isSet = !json[QString("queue")].isNull() && m_queue_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;
}

QString OAIEncryptionServices::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionServices::asJsonObject() const {
    QJsonObject obj;
    if (m_blob.isSet()) {
        obj.insert(QString("blob"), ::OpenAPI::toJsonValue(m_blob));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_queue.isSet()) {
        obj.insert(QString("queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    if (m_table.isSet()) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    return obj;
}

OAIEncryptionService OAIEncryptionServices::getBlob() const {
    return m_blob;
}
void OAIEncryptionServices::setBlob(const OAIEncryptionService &blob) {
    m_blob = blob;
    m_blob_isSet = true;
}

bool OAIEncryptionServices::is_blob_Set() const{
    return m_blob_isSet;
}

bool OAIEncryptionServices::is_blob_Valid() const{
    return m_blob_isValid;
}

OAIEncryptionService OAIEncryptionServices::getFile() const {
    return m_file;
}
void OAIEncryptionServices::setFile(const OAIEncryptionService &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIEncryptionServices::is_file_Set() const{
    return m_file_isSet;
}

bool OAIEncryptionServices::is_file_Valid() const{
    return m_file_isValid;
}

OAIEncryptionService OAIEncryptionServices::getQueue() const {
    return m_queue;
}
void OAIEncryptionServices::setQueue(const OAIEncryptionService &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIEncryptionServices::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIEncryptionServices::is_queue_Valid() const{
    return m_queue_isValid;
}

OAIEncryptionService OAIEncryptionServices::getTable() const {
    return m_table;
}
void OAIEncryptionServices::setTable(const OAIEncryptionService &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIEncryptionServices::is_table_Set() const{
    return m_table_isSet;
}

bool OAIEncryptionServices::is_table_Valid() const{
    return m_table_isValid;
}

bool OAIEncryptionServices::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionServices::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
