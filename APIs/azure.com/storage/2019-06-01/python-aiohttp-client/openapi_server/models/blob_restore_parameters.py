# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blob_restore_range import BlobRestoreRange
from openapi_server import util


class BlobRestoreParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_ranges: List[BlobRestoreRange]=None, time_to_restore: datetime=None):
        """BlobRestoreParameters - a model defined in OpenAPI

        :param blob_ranges: The blob_ranges of this BlobRestoreParameters.
        :param time_to_restore: The time_to_restore of this BlobRestoreParameters.
        """
        self.openapi_types = {
            'blob_ranges': List[BlobRestoreRange],
            'time_to_restore': datetime
        }

        self.attribute_map = {
            'blob_ranges': 'blobRanges',
            'time_to_restore': 'timeToRestore'
        }

        self._blob_ranges = blob_ranges
        self._time_to_restore = time_to_restore

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlobRestoreParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlobRestoreParameters of this BlobRestoreParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_ranges(self):
        """Gets the blob_ranges of this BlobRestoreParameters.

        Blob ranges to restore.

        :return: The blob_ranges of this BlobRestoreParameters.
        :rtype: List[BlobRestoreRange]
        """
        return self._blob_ranges

    @blob_ranges.setter
    def blob_ranges(self, blob_ranges):
        """Sets the blob_ranges of this BlobRestoreParameters.

        Blob ranges to restore.

        :param blob_ranges: The blob_ranges of this BlobRestoreParameters.
        :type blob_ranges: List[BlobRestoreRange]
        """
        if blob_ranges is None:
            raise ValueError("Invalid value for `blob_ranges`, must not be `None`")

        self._blob_ranges = blob_ranges

    @property
    def time_to_restore(self):
        """Gets the time_to_restore of this BlobRestoreParameters.

        Restore blob to the specified time.

        :return: The time_to_restore of this BlobRestoreParameters.
        :rtype: datetime
        """
        return self._time_to_restore

    @time_to_restore.setter
    def time_to_restore(self, time_to_restore):
        """Sets the time_to_restore of this BlobRestoreParameters.

        Restore blob to the specified time.

        :param time_to_restore: The time_to_restore of this BlobRestoreParameters.
        :type time_to_restore: datetime
        """
        if time_to_restore is None:
            raise ValueError("Invalid value for `time_to_restore`, must not be `None`")

        self._time_to_restore = time_to_restore
