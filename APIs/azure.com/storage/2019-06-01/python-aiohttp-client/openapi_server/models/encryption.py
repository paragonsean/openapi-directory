# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_services import EncryptionServices
from openapi_server.models.key_vault_properties import KeyVaultProperties
from openapi_server import util


class Encryption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_source: str='Storage', keyvaultproperties: KeyVaultProperties=None, services: EncryptionServices=None):
        """Encryption - a model defined in OpenAPI

        :param key_source: The key_source of this Encryption.
        :param keyvaultproperties: The keyvaultproperties of this Encryption.
        :param services: The services of this Encryption.
        """
        self.openapi_types = {
            'key_source': str,
            'keyvaultproperties': KeyVaultProperties,
            'services': EncryptionServices
        }

        self.attribute_map = {
            'key_source': 'keySource',
            'keyvaultproperties': 'keyvaultproperties',
            'services': 'services'
        }

        self._key_source = key_source
        self._keyvaultproperties = keyvaultproperties
        self._services = services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Encryption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Encryption of this Encryption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_source(self):
        """Gets the key_source of this Encryption.

        The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault

        :return: The key_source of this Encryption.
        :rtype: str
        """
        return self._key_source

    @key_source.setter
    def key_source(self, key_source):
        """Sets the key_source of this Encryption.

        The encryption keySource (provider). Possible values (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault

        :param key_source: The key_source of this Encryption.
        :type key_source: str
        """
        allowed_values = ["Microsoft.Storage", "Microsoft.Keyvault"]  # noqa: E501
        if key_source not in allowed_values:
            raise ValueError(
                "Invalid value for `key_source` ({0}), must be one of {1}"
                .format(key_source, allowed_values)
            )

        self._key_source = key_source

    @property
    def keyvaultproperties(self):
        """Gets the keyvaultproperties of this Encryption.


        :return: The keyvaultproperties of this Encryption.
        :rtype: KeyVaultProperties
        """
        return self._keyvaultproperties

    @keyvaultproperties.setter
    def keyvaultproperties(self, keyvaultproperties):
        """Sets the keyvaultproperties of this Encryption.


        :param keyvaultproperties: The keyvaultproperties of this Encryption.
        :type keyvaultproperties: KeyVaultProperties
        """

        self._keyvaultproperties = keyvaultproperties

    @property
    def services(self):
        """Gets the services of this Encryption.


        :return: The services of this Encryption.
        :rtype: EncryptionServices
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Encryption.


        :param services: The services of this Encryption.
        :type services: EncryptionServices
        """

        self._services = services
