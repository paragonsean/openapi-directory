# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ManagementPolicyFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_types: List[str]=None, prefix_match: List[str]=None):
        """ManagementPolicyFilter - a model defined in OpenAPI

        :param blob_types: The blob_types of this ManagementPolicyFilter.
        :param prefix_match: The prefix_match of this ManagementPolicyFilter.
        """
        self.openapi_types = {
            'blob_types': List[str],
            'prefix_match': List[str]
        }

        self.attribute_map = {
            'blob_types': 'blobTypes',
            'prefix_match': 'prefixMatch'
        }

        self._blob_types = blob_types
        self._prefix_match = prefix_match

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagementPolicyFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagementPolicyFilter of this ManagementPolicyFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_types(self):
        """Gets the blob_types of this ManagementPolicyFilter.

        An array of predefined enum values. Only blockBlob is supported.

        :return: The blob_types of this ManagementPolicyFilter.
        :rtype: List[str]
        """
        return self._blob_types

    @blob_types.setter
    def blob_types(self, blob_types):
        """Sets the blob_types of this ManagementPolicyFilter.

        An array of predefined enum values. Only blockBlob is supported.

        :param blob_types: The blob_types of this ManagementPolicyFilter.
        :type blob_types: List[str]
        """
        if blob_types is None:
            raise ValueError("Invalid value for `blob_types`, must not be `None`")

        self._blob_types = blob_types

    @property
    def prefix_match(self):
        """Gets the prefix_match of this ManagementPolicyFilter.

        An array of strings for prefixes to be match.

        :return: The prefix_match of this ManagementPolicyFilter.
        :rtype: List[str]
        """
        return self._prefix_match

    @prefix_match.setter
    def prefix_match(self, prefix_match):
        """Sets the prefix_match of this ManagementPolicyFilter.

        An array of strings for prefixes to be match.

        :param prefix_match: The prefix_match of this ManagementPolicyFilter.
        :type prefix_match: List[str]
        """

        self._prefix_match = prefix_match
