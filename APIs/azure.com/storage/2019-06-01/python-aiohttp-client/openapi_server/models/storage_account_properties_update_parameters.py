# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.azure_files_identity_based_authentication import AzureFilesIdentityBasedAuthentication
from openapi_server.models.custom_domain import CustomDomain
from openapi_server.models.encryption import Encryption
from openapi_server.models.network_rule_set import NetworkRuleSet
from openapi_server.models.routing_preference import RoutingPreference
from openapi_server import util


class StorageAccountPropertiesUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_tier: str=None, azure_files_identity_based_authentication: AzureFilesIdentityBasedAuthentication=None, custom_domain: CustomDomain=None, encryption: Encryption=None, large_file_shares_state: str=None, network_acls: NetworkRuleSet=None, routing_preference: RoutingPreference=None, supports_https_traffic_only: bool=None):
        """StorageAccountPropertiesUpdateParameters - a model defined in OpenAPI

        :param access_tier: The access_tier of this StorageAccountPropertiesUpdateParameters.
        :param azure_files_identity_based_authentication: The azure_files_identity_based_authentication of this StorageAccountPropertiesUpdateParameters.
        :param custom_domain: The custom_domain of this StorageAccountPropertiesUpdateParameters.
        :param encryption: The encryption of this StorageAccountPropertiesUpdateParameters.
        :param large_file_shares_state: The large_file_shares_state of this StorageAccountPropertiesUpdateParameters.
        :param network_acls: The network_acls of this StorageAccountPropertiesUpdateParameters.
        :param routing_preference: The routing_preference of this StorageAccountPropertiesUpdateParameters.
        :param supports_https_traffic_only: The supports_https_traffic_only of this StorageAccountPropertiesUpdateParameters.
        """
        self.openapi_types = {
            'access_tier': str,
            'azure_files_identity_based_authentication': AzureFilesIdentityBasedAuthentication,
            'custom_domain': CustomDomain,
            'encryption': Encryption,
            'large_file_shares_state': str,
            'network_acls': NetworkRuleSet,
            'routing_preference': RoutingPreference,
            'supports_https_traffic_only': bool
        }

        self.attribute_map = {
            'access_tier': 'accessTier',
            'azure_files_identity_based_authentication': 'azureFilesIdentityBasedAuthentication',
            'custom_domain': 'customDomain',
            'encryption': 'encryption',
            'large_file_shares_state': 'largeFileSharesState',
            'network_acls': 'networkAcls',
            'routing_preference': 'routingPreference',
            'supports_https_traffic_only': 'supportsHttpsTrafficOnly'
        }

        self._access_tier = access_tier
        self._azure_files_identity_based_authentication = azure_files_identity_based_authentication
        self._custom_domain = custom_domain
        self._encryption = encryption
        self._large_file_shares_state = large_file_shares_state
        self._network_acls = network_acls
        self._routing_preference = routing_preference
        self._supports_https_traffic_only = supports_https_traffic_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountPropertiesUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountPropertiesUpdateParameters of this StorageAccountPropertiesUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_tier(self):
        """Gets the access_tier of this StorageAccountPropertiesUpdateParameters.

        Required for storage accounts where kind = BlobStorage. The access tier used for billing.

        :return: The access_tier of this StorageAccountPropertiesUpdateParameters.
        :rtype: str
        """
        return self._access_tier

    @access_tier.setter
    def access_tier(self, access_tier):
        """Sets the access_tier of this StorageAccountPropertiesUpdateParameters.

        Required for storage accounts where kind = BlobStorage. The access tier used for billing.

        :param access_tier: The access_tier of this StorageAccountPropertiesUpdateParameters.
        :type access_tier: str
        """
        allowed_values = ["Hot", "Cool"]  # noqa: E501
        if access_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `access_tier` ({0}), must be one of {1}"
                .format(access_tier, allowed_values)
            )

        self._access_tier = access_tier

    @property
    def azure_files_identity_based_authentication(self):
        """Gets the azure_files_identity_based_authentication of this StorageAccountPropertiesUpdateParameters.


        :return: The azure_files_identity_based_authentication of this StorageAccountPropertiesUpdateParameters.
        :rtype: AzureFilesIdentityBasedAuthentication
        """
        return self._azure_files_identity_based_authentication

    @azure_files_identity_based_authentication.setter
    def azure_files_identity_based_authentication(self, azure_files_identity_based_authentication):
        """Sets the azure_files_identity_based_authentication of this StorageAccountPropertiesUpdateParameters.


        :param azure_files_identity_based_authentication: The azure_files_identity_based_authentication of this StorageAccountPropertiesUpdateParameters.
        :type azure_files_identity_based_authentication: AzureFilesIdentityBasedAuthentication
        """

        self._azure_files_identity_based_authentication = azure_files_identity_based_authentication

    @property
    def custom_domain(self):
        """Gets the custom_domain of this StorageAccountPropertiesUpdateParameters.


        :return: The custom_domain of this StorageAccountPropertiesUpdateParameters.
        :rtype: CustomDomain
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """Sets the custom_domain of this StorageAccountPropertiesUpdateParameters.


        :param custom_domain: The custom_domain of this StorageAccountPropertiesUpdateParameters.
        :type custom_domain: CustomDomain
        """

        self._custom_domain = custom_domain

    @property
    def encryption(self):
        """Gets the encryption of this StorageAccountPropertiesUpdateParameters.


        :return: The encryption of this StorageAccountPropertiesUpdateParameters.
        :rtype: Encryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this StorageAccountPropertiesUpdateParameters.


        :param encryption: The encryption of this StorageAccountPropertiesUpdateParameters.
        :type encryption: Encryption
        """

        self._encryption = encryption

    @property
    def large_file_shares_state(self):
        """Gets the large_file_shares_state of this StorageAccountPropertiesUpdateParameters.

        Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.

        :return: The large_file_shares_state of this StorageAccountPropertiesUpdateParameters.
        :rtype: str
        """
        return self._large_file_shares_state

    @large_file_shares_state.setter
    def large_file_shares_state(self, large_file_shares_state):
        """Sets the large_file_shares_state of this StorageAccountPropertiesUpdateParameters.

        Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.

        :param large_file_shares_state: The large_file_shares_state of this StorageAccountPropertiesUpdateParameters.
        :type large_file_shares_state: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if large_file_shares_state not in allowed_values:
            raise ValueError(
                "Invalid value for `large_file_shares_state` ({0}), must be one of {1}"
                .format(large_file_shares_state, allowed_values)
            )

        self._large_file_shares_state = large_file_shares_state

    @property
    def network_acls(self):
        """Gets the network_acls of this StorageAccountPropertiesUpdateParameters.


        :return: The network_acls of this StorageAccountPropertiesUpdateParameters.
        :rtype: NetworkRuleSet
        """
        return self._network_acls

    @network_acls.setter
    def network_acls(self, network_acls):
        """Sets the network_acls of this StorageAccountPropertiesUpdateParameters.


        :param network_acls: The network_acls of this StorageAccountPropertiesUpdateParameters.
        :type network_acls: NetworkRuleSet
        """

        self._network_acls = network_acls

    @property
    def routing_preference(self):
        """Gets the routing_preference of this StorageAccountPropertiesUpdateParameters.


        :return: The routing_preference of this StorageAccountPropertiesUpdateParameters.
        :rtype: RoutingPreference
        """
        return self._routing_preference

    @routing_preference.setter
    def routing_preference(self, routing_preference):
        """Sets the routing_preference of this StorageAccountPropertiesUpdateParameters.


        :param routing_preference: The routing_preference of this StorageAccountPropertiesUpdateParameters.
        :type routing_preference: RoutingPreference
        """

        self._routing_preference = routing_preference

    @property
    def supports_https_traffic_only(self):
        """Gets the supports_https_traffic_only of this StorageAccountPropertiesUpdateParameters.

        Allows https traffic only to storage service if sets to true.

        :return: The supports_https_traffic_only of this StorageAccountPropertiesUpdateParameters.
        :rtype: bool
        """
        return self._supports_https_traffic_only

    @supports_https_traffic_only.setter
    def supports_https_traffic_only(self, supports_https_traffic_only):
        """Sets the supports_https_traffic_only of this StorageAccountPropertiesUpdateParameters.

        Allows https traffic only to storage service if sets to true.

        :param supports_https_traffic_only: The supports_https_traffic_only of this StorageAccountPropertiesUpdateParameters.
        :type supports_https_traffic_only: bool
        """

        self._supports_https_traffic_only = supports_https_traffic_only
