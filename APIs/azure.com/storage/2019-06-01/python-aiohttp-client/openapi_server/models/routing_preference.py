# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoutingPreference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, publish_internet_endpoints: bool=None, publish_microsoft_endpoints: bool=None, routing_choice: str=None):
        """RoutingPreference - a model defined in OpenAPI

        :param publish_internet_endpoints: The publish_internet_endpoints of this RoutingPreference.
        :param publish_microsoft_endpoints: The publish_microsoft_endpoints of this RoutingPreference.
        :param routing_choice: The routing_choice of this RoutingPreference.
        """
        self.openapi_types = {
            'publish_internet_endpoints': bool,
            'publish_microsoft_endpoints': bool,
            'routing_choice': str
        }

        self.attribute_map = {
            'publish_internet_endpoints': 'publishInternetEndpoints',
            'publish_microsoft_endpoints': 'publishMicrosoftEndpoints',
            'routing_choice': 'routingChoice'
        }

        self._publish_internet_endpoints = publish_internet_endpoints
        self._publish_microsoft_endpoints = publish_microsoft_endpoints
        self._routing_choice = routing_choice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutingPreference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoutingPreference of this RoutingPreference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def publish_internet_endpoints(self):
        """Gets the publish_internet_endpoints of this RoutingPreference.

        A boolean flag which indicates whether internet routing storage endpoints are to be published

        :return: The publish_internet_endpoints of this RoutingPreference.
        :rtype: bool
        """
        return self._publish_internet_endpoints

    @publish_internet_endpoints.setter
    def publish_internet_endpoints(self, publish_internet_endpoints):
        """Sets the publish_internet_endpoints of this RoutingPreference.

        A boolean flag which indicates whether internet routing storage endpoints are to be published

        :param publish_internet_endpoints: The publish_internet_endpoints of this RoutingPreference.
        :type publish_internet_endpoints: bool
        """

        self._publish_internet_endpoints = publish_internet_endpoints

    @property
    def publish_microsoft_endpoints(self):
        """Gets the publish_microsoft_endpoints of this RoutingPreference.

        A boolean flag which indicates whether microsoft routing storage endpoints are to be published

        :return: The publish_microsoft_endpoints of this RoutingPreference.
        :rtype: bool
        """
        return self._publish_microsoft_endpoints

    @publish_microsoft_endpoints.setter
    def publish_microsoft_endpoints(self, publish_microsoft_endpoints):
        """Sets the publish_microsoft_endpoints of this RoutingPreference.

        A boolean flag which indicates whether microsoft routing storage endpoints are to be published

        :param publish_microsoft_endpoints: The publish_microsoft_endpoints of this RoutingPreference.
        :type publish_microsoft_endpoints: bool
        """

        self._publish_microsoft_endpoints = publish_microsoft_endpoints

    @property
    def routing_choice(self):
        """Gets the routing_choice of this RoutingPreference.

        Routing Choice defines the kind of network routing opted by the user.

        :return: The routing_choice of this RoutingPreference.
        :rtype: str
        """
        return self._routing_choice

    @routing_choice.setter
    def routing_choice(self, routing_choice):
        """Sets the routing_choice of this RoutingPreference.

        Routing Choice defines the kind of network routing opted by the user.

        :param routing_choice: The routing_choice of this RoutingPreference.
        :type routing_choice: str
        """
        allowed_values = ["MicrosoftRouting", "InternetRouting"]  # noqa: E501
        if routing_choice not in allowed_values:
            raise ValueError(
                "Invalid value for `routing_choice` ({0}), must be one of {1}"
                .format(routing_choice, allowed_values)
            )

        self._routing_choice = routing_choice
