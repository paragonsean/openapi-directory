# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.restriction import Restriction
from openapi_server.models.sku_capability import SKUCapability
from openapi_server import util


class SkuInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[SKUCapability]=None, kind: str=None, locations: List[str]=None, name: str=None, resource_type: str=None, restrictions: List[Restriction]=None, tier: str=None):
        """SkuInformation - a model defined in OpenAPI

        :param capabilities: The capabilities of this SkuInformation.
        :param kind: The kind of this SkuInformation.
        :param locations: The locations of this SkuInformation.
        :param name: The name of this SkuInformation.
        :param resource_type: The resource_type of this SkuInformation.
        :param restrictions: The restrictions of this SkuInformation.
        :param tier: The tier of this SkuInformation.
        """
        self.openapi_types = {
            'capabilities': List[SKUCapability],
            'kind': str,
            'locations': List[str],
            'name': str,
            'resource_type': str,
            'restrictions': List[Restriction],
            'tier': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'kind': 'kind',
            'locations': 'locations',
            'name': 'name',
            'resource_type': 'resourceType',
            'restrictions': 'restrictions',
            'tier': 'tier'
        }

        self._capabilities = capabilities
        self._kind = kind
        self._locations = locations
        self._name = name
        self._resource_type = resource_type
        self._restrictions = restrictions
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkuInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkuInformation of this SkuInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this SkuInformation.

        The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.

        :return: The capabilities of this SkuInformation.
        :rtype: List[SKUCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this SkuInformation.

        The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.

        :param capabilities: The capabilities of this SkuInformation.
        :type capabilities: List[SKUCapability]
        """

        self._capabilities = capabilities

    @property
    def kind(self):
        """Gets the kind of this SkuInformation.

        Indicates the type of storage account.

        :return: The kind of this SkuInformation.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SkuInformation.

        Indicates the type of storage account.

        :param kind: The kind of this SkuInformation.
        :type kind: str
        """
        allowed_values = ["Storage", "StorageV2", "BlobStorage", "FileStorage", "BlockBlobStorage"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def locations(self):
        """Gets the locations of this SkuInformation.

        The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).

        :return: The locations of this SkuInformation.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this SkuInformation.

        The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).

        :param locations: The locations of this SkuInformation.
        :type locations: List[str]
        """

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this SkuInformation.

        The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.

        :return: The name of this SkuInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SkuInformation.

        The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.

        :param name: The name of this SkuInformation.
        :type name: str
        """
        allowed_values = ["Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS", "Premium_ZRS", "Standard_GZRS", "Standard_RAGZRS"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this SkuInformation.

        The type of the resource, usually it is 'storageAccounts'.

        :return: The resource_type of this SkuInformation.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this SkuInformation.

        The type of the resource, usually it is 'storageAccounts'.

        :param resource_type: The resource_type of this SkuInformation.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def restrictions(self):
        """Gets the restrictions of this SkuInformation.

        The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.

        :return: The restrictions of this SkuInformation.
        :rtype: List[Restriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this SkuInformation.

        The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.

        :param restrictions: The restrictions of this SkuInformation.
        :type restrictions: List[Restriction]
        """

        self._restrictions = restrictions

    @property
    def tier(self):
        """Gets the tier of this SkuInformation.

        The SKU tier. This is based on the SKU name.

        :return: The tier of this SkuInformation.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this SkuInformation.

        The SKU tier. This is based on the SKU name.

        :param tier: The tier of this SkuInformation.
        :type tier: str
        """
        allowed_values = ["Standard", "Premium"]  # noqa: E501
        if tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tier` ({0}), must be one of {1}"
                .format(tier, allowed_values)
            )

        self._tier = tier
