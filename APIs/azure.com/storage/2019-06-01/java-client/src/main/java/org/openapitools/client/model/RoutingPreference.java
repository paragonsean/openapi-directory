/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:46:39.698086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoutingPreference {
  public static final String SERIALIZED_NAME_PUBLISH_INTERNET_ENDPOINTS = "publishInternetEndpoints";
  @SerializedName(SERIALIZED_NAME_PUBLISH_INTERNET_ENDPOINTS)
  private Boolean publishInternetEndpoints;

  public static final String SERIALIZED_NAME_PUBLISH_MICROSOFT_ENDPOINTS = "publishMicrosoftEndpoints";
  @SerializedName(SERIALIZED_NAME_PUBLISH_MICROSOFT_ENDPOINTS)
  private Boolean publishMicrosoftEndpoints;

  /**
   * Routing Choice defines the kind of network routing opted by the user.
   */
  @JsonAdapter(RoutingChoiceEnum.Adapter.class)
  public enum RoutingChoiceEnum {
    MICROSOFT_ROUTING("MicrosoftRouting"),
    
    INTERNET_ROUTING("InternetRouting");

    private String value;

    RoutingChoiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoutingChoiceEnum fromValue(String value) {
      for (RoutingChoiceEnum b : RoutingChoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoutingChoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoutingChoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoutingChoiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoutingChoiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoutingChoiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUTING_CHOICE = "routingChoice";
  @SerializedName(SERIALIZED_NAME_ROUTING_CHOICE)
  private RoutingChoiceEnum routingChoice;

  public RoutingPreference() {
  }

  public RoutingPreference publishInternetEndpoints(Boolean publishInternetEndpoints) {
    this.publishInternetEndpoints = publishInternetEndpoints;
    return this;
  }

  /**
   * A boolean flag which indicates whether internet routing storage endpoints are to be published
   * @return publishInternetEndpoints
   */
  @javax.annotation.Nullable
  public Boolean getPublishInternetEndpoints() {
    return publishInternetEndpoints;
  }

  public void setPublishInternetEndpoints(Boolean publishInternetEndpoints) {
    this.publishInternetEndpoints = publishInternetEndpoints;
  }


  public RoutingPreference publishMicrosoftEndpoints(Boolean publishMicrosoftEndpoints) {
    this.publishMicrosoftEndpoints = publishMicrosoftEndpoints;
    return this;
  }

  /**
   * A boolean flag which indicates whether microsoft routing storage endpoints are to be published
   * @return publishMicrosoftEndpoints
   */
  @javax.annotation.Nullable
  public Boolean getPublishMicrosoftEndpoints() {
    return publishMicrosoftEndpoints;
  }

  public void setPublishMicrosoftEndpoints(Boolean publishMicrosoftEndpoints) {
    this.publishMicrosoftEndpoints = publishMicrosoftEndpoints;
  }


  public RoutingPreference routingChoice(RoutingChoiceEnum routingChoice) {
    this.routingChoice = routingChoice;
    return this;
  }

  /**
   * Routing Choice defines the kind of network routing opted by the user.
   * @return routingChoice
   */
  @javax.annotation.Nullable
  public RoutingChoiceEnum getRoutingChoice() {
    return routingChoice;
  }

  public void setRoutingChoice(RoutingChoiceEnum routingChoice) {
    this.routingChoice = routingChoice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutingPreference routingPreference = (RoutingPreference) o;
    return Objects.equals(this.publishInternetEndpoints, routingPreference.publishInternetEndpoints) &&
        Objects.equals(this.publishMicrosoftEndpoints, routingPreference.publishMicrosoftEndpoints) &&
        Objects.equals(this.routingChoice, routingPreference.routingChoice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publishInternetEndpoints, publishMicrosoftEndpoints, routingChoice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutingPreference {\n");
    sb.append("    publishInternetEndpoints: ").append(toIndentedString(publishInternetEndpoints)).append("\n");
    sb.append("    publishMicrosoftEndpoints: ").append(toIndentedString(publishMicrosoftEndpoints)).append("\n");
    sb.append("    routingChoice: ").append(toIndentedString(routingChoice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("publishInternetEndpoints");
    openapiFields.add("publishMicrosoftEndpoints");
    openapiFields.add("routingChoice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutingPreference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutingPreference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutingPreference is not found in the empty JSON string", RoutingPreference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutingPreference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutingPreference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("routingChoice") != null && !jsonObj.get("routingChoice").isJsonNull()) && !jsonObj.get("routingChoice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingChoice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingChoice").toString()));
      }
      // validate the optional field `routingChoice`
      if (jsonObj.get("routingChoice") != null && !jsonObj.get("routingChoice").isJsonNull()) {
        RoutingChoiceEnum.validateJsonElement(jsonObj.get("routingChoice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutingPreference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutingPreference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutingPreference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutingPreference.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutingPreference>() {
           @Override
           public void write(JsonWriter out, RoutingPreference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutingPreference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutingPreference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutingPreference
   * @throws IOException if the JSON string is invalid with respect to RoutingPreference
   */
  public static RoutingPreference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutingPreference.class);
  }

  /**
   * Convert an instance of RoutingPreference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

