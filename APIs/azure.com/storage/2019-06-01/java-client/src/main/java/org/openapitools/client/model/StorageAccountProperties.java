/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AzureFilesIdentityBasedAuthentication;
import org.openapitools.client.model.BlobRestoreStatus;
import org.openapitools.client.model.CustomDomain;
import org.openapitools.client.model.Encryption;
import org.openapitools.client.model.Endpoints;
import org.openapitools.client.model.GeoReplicationStats;
import org.openapitools.client.model.NetworkRuleSet;
import org.openapitools.client.model.PrivateEndpointConnection;
import org.openapitools.client.model.RoutingPreference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the storage account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:46:39.698086-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageAccountProperties {
  /**
   * Required for storage accounts where kind &#x3D; BlobStorage. The access tier used for billing.
   */
  @JsonAdapter(AccessTierEnum.Adapter.class)
  public enum AccessTierEnum {
    HOT("Hot"),
    
    COOL("Cool");

    private String value;

    AccessTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessTierEnum fromValue(String value) {
      for (AccessTierEnum b : AccessTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_TIER = "accessTier";
  @SerializedName(SERIALIZED_NAME_ACCESS_TIER)
  private AccessTierEnum accessTier;

  public static final String SERIALIZED_NAME_AZURE_FILES_IDENTITY_BASED_AUTHENTICATION = "azureFilesIdentityBasedAuthentication";
  @SerializedName(SERIALIZED_NAME_AZURE_FILES_IDENTITY_BASED_AUTHENTICATION)
  private AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication;

  public static final String SERIALIZED_NAME_BLOB_RESTORE_STATUS = "blobRestoreStatus";
  @SerializedName(SERIALIZED_NAME_BLOB_RESTORE_STATUS)
  private BlobRestoreStatus blobRestoreStatus;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN = "customDomain";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN)
  private CustomDomain customDomain;

  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private Encryption encryption;

  public static final String SERIALIZED_NAME_FAILOVER_IN_PROGRESS = "failoverInProgress";
  @SerializedName(SERIALIZED_NAME_FAILOVER_IN_PROGRESS)
  private Boolean failoverInProgress;

  public static final String SERIALIZED_NAME_GEO_REPLICATION_STATS = "geoReplicationStats";
  @SerializedName(SERIALIZED_NAME_GEO_REPLICATION_STATS)
  private GeoReplicationStats geoReplicationStats;

  public static final String SERIALIZED_NAME_IS_HNS_ENABLED = "isHnsEnabled";
  @SerializedName(SERIALIZED_NAME_IS_HNS_ENABLED)
  private Boolean isHnsEnabled;

  /**
   * Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
   */
  @JsonAdapter(LargeFileSharesStateEnum.Adapter.class)
  public enum LargeFileSharesStateEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    LargeFileSharesStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LargeFileSharesStateEnum fromValue(String value) {
      for (LargeFileSharesStateEnum b : LargeFileSharesStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LargeFileSharesStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LargeFileSharesStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LargeFileSharesStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LargeFileSharesStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LargeFileSharesStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LARGE_FILE_SHARES_STATE = "largeFileSharesState";
  @SerializedName(SERIALIZED_NAME_LARGE_FILE_SHARES_STATE)
  private LargeFileSharesStateEnum largeFileSharesState;

  public static final String SERIALIZED_NAME_LAST_GEO_FAILOVER_TIME = "lastGeoFailoverTime";
  @SerializedName(SERIALIZED_NAME_LAST_GEO_FAILOVER_TIME)
  private OffsetDateTime lastGeoFailoverTime;

  public static final String SERIALIZED_NAME_NETWORK_ACLS = "networkAcls";
  @SerializedName(SERIALIZED_NAME_NETWORK_ACLS)
  private NetworkRuleSet networkAcls;

  public static final String SERIALIZED_NAME_PRIMARY_ENDPOINTS = "primaryEndpoints";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ENDPOINTS)
  private Endpoints primaryEndpoints;

  public static final String SERIALIZED_NAME_PRIMARY_LOCATION = "primaryLocation";
  @SerializedName(SERIALIZED_NAME_PRIMARY_LOCATION)
  private String primaryLocation;

  public static final String SERIALIZED_NAME_PRIVATE_ENDPOINT_CONNECTIONS = "privateEndpointConnections";
  @SerializedName(SERIALIZED_NAME_PRIVATE_ENDPOINT_CONNECTIONS)
  private List<PrivateEndpointConnection> privateEndpointConnections = new ArrayList<>();

  /**
   * Gets the status of the storage account at the time the operation was called.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    RESOLVING_DNS("ResolvingDNS"),
    
    SUCCEEDED("Succeeded");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_ROUTING_PREFERENCE = "routingPreference";
  @SerializedName(SERIALIZED_NAME_ROUTING_PREFERENCE)
  private RoutingPreference routingPreference;

  public static final String SERIALIZED_NAME_SECONDARY_ENDPOINTS = "secondaryEndpoints";
  @SerializedName(SERIALIZED_NAME_SECONDARY_ENDPOINTS)
  private Endpoints secondaryEndpoints;

  public static final String SERIALIZED_NAME_SECONDARY_LOCATION = "secondaryLocation";
  @SerializedName(SERIALIZED_NAME_SECONDARY_LOCATION)
  private String secondaryLocation;

  /**
   * Gets the status indicating whether the primary location of the storage account is available or unavailable.
   */
  @JsonAdapter(StatusOfPrimaryEnum.Adapter.class)
  public enum StatusOfPrimaryEnum {
    AVAILABLE("available"),
    
    UNAVAILABLE("unavailable");

    private String value;

    StatusOfPrimaryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusOfPrimaryEnum fromValue(String value) {
      for (StatusOfPrimaryEnum b : StatusOfPrimaryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusOfPrimaryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusOfPrimaryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusOfPrimaryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusOfPrimaryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusOfPrimaryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_OF_PRIMARY = "statusOfPrimary";
  @SerializedName(SERIALIZED_NAME_STATUS_OF_PRIMARY)
  private StatusOfPrimaryEnum statusOfPrimary;

  /**
   * Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
   */
  @JsonAdapter(StatusOfSecondaryEnum.Adapter.class)
  public enum StatusOfSecondaryEnum {
    AVAILABLE("available"),
    
    UNAVAILABLE("unavailable");

    private String value;

    StatusOfSecondaryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusOfSecondaryEnum fromValue(String value) {
      for (StatusOfSecondaryEnum b : StatusOfSecondaryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusOfSecondaryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusOfSecondaryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusOfSecondaryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusOfSecondaryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusOfSecondaryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_OF_SECONDARY = "statusOfSecondary";
  @SerializedName(SERIALIZED_NAME_STATUS_OF_SECONDARY)
  private StatusOfSecondaryEnum statusOfSecondary;

  public static final String SERIALIZED_NAME_SUPPORTS_HTTPS_TRAFFIC_ONLY = "supportsHttpsTrafficOnly";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_HTTPS_TRAFFIC_ONLY)
  private Boolean supportsHttpsTrafficOnly;

  public StorageAccountProperties() {
  }

  public StorageAccountProperties(
     AccessTierEnum accessTier, 
     OffsetDateTime creationTime, 
     Boolean failoverInProgress, 
     OffsetDateTime lastGeoFailoverTime, 
     String primaryLocation, 
     List<PrivateEndpointConnection> privateEndpointConnections, 
     ProvisioningStateEnum provisioningState, 
     String secondaryLocation, 
     StatusOfPrimaryEnum statusOfPrimary, 
     StatusOfSecondaryEnum statusOfSecondary
  ) {
    this();
    this.accessTier = accessTier;
    this.creationTime = creationTime;
    this.failoverInProgress = failoverInProgress;
    this.lastGeoFailoverTime = lastGeoFailoverTime;
    this.primaryLocation = primaryLocation;
    this.privateEndpointConnections = privateEndpointConnections;
    this.provisioningState = provisioningState;
    this.secondaryLocation = secondaryLocation;
    this.statusOfPrimary = statusOfPrimary;
    this.statusOfSecondary = statusOfSecondary;
  }

  /**
   * Required for storage accounts where kind &#x3D; BlobStorage. The access tier used for billing.
   * @return accessTier
   */
  @javax.annotation.Nullable
  public AccessTierEnum getAccessTier() {
    return accessTier;
  }



  public StorageAccountProperties azureFilesIdentityBasedAuthentication(AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication) {
    this.azureFilesIdentityBasedAuthentication = azureFilesIdentityBasedAuthentication;
    return this;
  }

  /**
   * Get azureFilesIdentityBasedAuthentication
   * @return azureFilesIdentityBasedAuthentication
   */
  @javax.annotation.Nullable
  public AzureFilesIdentityBasedAuthentication getAzureFilesIdentityBasedAuthentication() {
    return azureFilesIdentityBasedAuthentication;
  }

  public void setAzureFilesIdentityBasedAuthentication(AzureFilesIdentityBasedAuthentication azureFilesIdentityBasedAuthentication) {
    this.azureFilesIdentityBasedAuthentication = azureFilesIdentityBasedAuthentication;
  }


  public StorageAccountProperties blobRestoreStatus(BlobRestoreStatus blobRestoreStatus) {
    this.blobRestoreStatus = blobRestoreStatus;
    return this;
  }

  /**
   * Get blobRestoreStatus
   * @return blobRestoreStatus
   */
  @javax.annotation.Nullable
  public BlobRestoreStatus getBlobRestoreStatus() {
    return blobRestoreStatus;
  }

  public void setBlobRestoreStatus(BlobRestoreStatus blobRestoreStatus) {
    this.blobRestoreStatus = blobRestoreStatus;
  }


  /**
   * Gets the creation date and time of the storage account in UTC.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  public StorageAccountProperties customDomain(CustomDomain customDomain) {
    this.customDomain = customDomain;
    return this;
  }

  /**
   * Get customDomain
   * @return customDomain
   */
  @javax.annotation.Nullable
  public CustomDomain getCustomDomain() {
    return customDomain;
  }

  public void setCustomDomain(CustomDomain customDomain) {
    this.customDomain = customDomain;
  }


  public StorageAccountProperties encryption(Encryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Get encryption
   * @return encryption
   */
  @javax.annotation.Nullable
  public Encryption getEncryption() {
    return encryption;
  }

  public void setEncryption(Encryption encryption) {
    this.encryption = encryption;
  }


  /**
   * If the failover is in progress, the value will be true, otherwise, it will be null.
   * @return failoverInProgress
   */
  @javax.annotation.Nullable
  public Boolean getFailoverInProgress() {
    return failoverInProgress;
  }



  public StorageAccountProperties geoReplicationStats(GeoReplicationStats geoReplicationStats) {
    this.geoReplicationStats = geoReplicationStats;
    return this;
  }

  /**
   * Get geoReplicationStats
   * @return geoReplicationStats
   */
  @javax.annotation.Nullable
  public GeoReplicationStats getGeoReplicationStats() {
    return geoReplicationStats;
  }

  public void setGeoReplicationStats(GeoReplicationStats geoReplicationStats) {
    this.geoReplicationStats = geoReplicationStats;
  }


  public StorageAccountProperties isHnsEnabled(Boolean isHnsEnabled) {
    this.isHnsEnabled = isHnsEnabled;
    return this;
  }

  /**
   * Account HierarchicalNamespace enabled if sets to true.
   * @return isHnsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsHnsEnabled() {
    return isHnsEnabled;
  }

  public void setIsHnsEnabled(Boolean isHnsEnabled) {
    this.isHnsEnabled = isHnsEnabled;
  }


  public StorageAccountProperties largeFileSharesState(LargeFileSharesStateEnum largeFileSharesState) {
    this.largeFileSharesState = largeFileSharesState;
    return this;
  }

  /**
   * Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
   * @return largeFileSharesState
   */
  @javax.annotation.Nullable
  public LargeFileSharesStateEnum getLargeFileSharesState() {
    return largeFileSharesState;
  }

  public void setLargeFileSharesState(LargeFileSharesStateEnum largeFileSharesState) {
    this.largeFileSharesState = largeFileSharesState;
  }


  /**
   * Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.
   * @return lastGeoFailoverTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastGeoFailoverTime() {
    return lastGeoFailoverTime;
  }



  public StorageAccountProperties networkAcls(NetworkRuleSet networkAcls) {
    this.networkAcls = networkAcls;
    return this;
  }

  /**
   * Get networkAcls
   * @return networkAcls
   */
  @javax.annotation.Nullable
  public NetworkRuleSet getNetworkAcls() {
    return networkAcls;
  }

  public void setNetworkAcls(NetworkRuleSet networkAcls) {
    this.networkAcls = networkAcls;
  }


  public StorageAccountProperties primaryEndpoints(Endpoints primaryEndpoints) {
    this.primaryEndpoints = primaryEndpoints;
    return this;
  }

  /**
   * Get primaryEndpoints
   * @return primaryEndpoints
   */
  @javax.annotation.Nullable
  public Endpoints getPrimaryEndpoints() {
    return primaryEndpoints;
  }

  public void setPrimaryEndpoints(Endpoints primaryEndpoints) {
    this.primaryEndpoints = primaryEndpoints;
  }


  /**
   * Gets the location of the primary data center for the storage account.
   * @return primaryLocation
   */
  @javax.annotation.Nullable
  public String getPrimaryLocation() {
    return primaryLocation;
  }



  /**
   * List of private endpoint connection associated with the specified storage account
   * @return privateEndpointConnections
   */
  @javax.annotation.Nullable
  public List<PrivateEndpointConnection> getPrivateEndpointConnections() {
    return privateEndpointConnections;
  }



  /**
   * Gets the status of the storage account at the time the operation was called.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public StorageAccountProperties routingPreference(RoutingPreference routingPreference) {
    this.routingPreference = routingPreference;
    return this;
  }

  /**
   * Get routingPreference
   * @return routingPreference
   */
  @javax.annotation.Nullable
  public RoutingPreference getRoutingPreference() {
    return routingPreference;
  }

  public void setRoutingPreference(RoutingPreference routingPreference) {
    this.routingPreference = routingPreference;
  }


  public StorageAccountProperties secondaryEndpoints(Endpoints secondaryEndpoints) {
    this.secondaryEndpoints = secondaryEndpoints;
    return this;
  }

  /**
   * Get secondaryEndpoints
   * @return secondaryEndpoints
   */
  @javax.annotation.Nullable
  public Endpoints getSecondaryEndpoints() {
    return secondaryEndpoints;
  }

  public void setSecondaryEndpoints(Endpoints secondaryEndpoints) {
    this.secondaryEndpoints = secondaryEndpoints;
  }


  /**
   * Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
   * @return secondaryLocation
   */
  @javax.annotation.Nullable
  public String getSecondaryLocation() {
    return secondaryLocation;
  }



  /**
   * Gets the status indicating whether the primary location of the storage account is available or unavailable.
   * @return statusOfPrimary
   */
  @javax.annotation.Nullable
  public StatusOfPrimaryEnum getStatusOfPrimary() {
    return statusOfPrimary;
  }



  /**
   * Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.
   * @return statusOfSecondary
   */
  @javax.annotation.Nullable
  public StatusOfSecondaryEnum getStatusOfSecondary() {
    return statusOfSecondary;
  }



  public StorageAccountProperties supportsHttpsTrafficOnly(Boolean supportsHttpsTrafficOnly) {
    this.supportsHttpsTrafficOnly = supportsHttpsTrafficOnly;
    return this;
  }

  /**
   * Allows https traffic only to storage service if sets to true.
   * @return supportsHttpsTrafficOnly
   */
  @javax.annotation.Nullable
  public Boolean getSupportsHttpsTrafficOnly() {
    return supportsHttpsTrafficOnly;
  }

  public void setSupportsHttpsTrafficOnly(Boolean supportsHttpsTrafficOnly) {
    this.supportsHttpsTrafficOnly = supportsHttpsTrafficOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageAccountProperties storageAccountProperties = (StorageAccountProperties) o;
    return Objects.equals(this.accessTier, storageAccountProperties.accessTier) &&
        Objects.equals(this.azureFilesIdentityBasedAuthentication, storageAccountProperties.azureFilesIdentityBasedAuthentication) &&
        Objects.equals(this.blobRestoreStatus, storageAccountProperties.blobRestoreStatus) &&
        Objects.equals(this.creationTime, storageAccountProperties.creationTime) &&
        Objects.equals(this.customDomain, storageAccountProperties.customDomain) &&
        Objects.equals(this.encryption, storageAccountProperties.encryption) &&
        Objects.equals(this.failoverInProgress, storageAccountProperties.failoverInProgress) &&
        Objects.equals(this.geoReplicationStats, storageAccountProperties.geoReplicationStats) &&
        Objects.equals(this.isHnsEnabled, storageAccountProperties.isHnsEnabled) &&
        Objects.equals(this.largeFileSharesState, storageAccountProperties.largeFileSharesState) &&
        Objects.equals(this.lastGeoFailoverTime, storageAccountProperties.lastGeoFailoverTime) &&
        Objects.equals(this.networkAcls, storageAccountProperties.networkAcls) &&
        Objects.equals(this.primaryEndpoints, storageAccountProperties.primaryEndpoints) &&
        Objects.equals(this.primaryLocation, storageAccountProperties.primaryLocation) &&
        Objects.equals(this.privateEndpointConnections, storageAccountProperties.privateEndpointConnections) &&
        Objects.equals(this.provisioningState, storageAccountProperties.provisioningState) &&
        Objects.equals(this.routingPreference, storageAccountProperties.routingPreference) &&
        Objects.equals(this.secondaryEndpoints, storageAccountProperties.secondaryEndpoints) &&
        Objects.equals(this.secondaryLocation, storageAccountProperties.secondaryLocation) &&
        Objects.equals(this.statusOfPrimary, storageAccountProperties.statusOfPrimary) &&
        Objects.equals(this.statusOfSecondary, storageAccountProperties.statusOfSecondary) &&
        Objects.equals(this.supportsHttpsTrafficOnly, storageAccountProperties.supportsHttpsTrafficOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTier, azureFilesIdentityBasedAuthentication, blobRestoreStatus, creationTime, customDomain, encryption, failoverInProgress, geoReplicationStats, isHnsEnabled, largeFileSharesState, lastGeoFailoverTime, networkAcls, primaryEndpoints, primaryLocation, privateEndpointConnections, provisioningState, routingPreference, secondaryEndpoints, secondaryLocation, statusOfPrimary, statusOfSecondary, supportsHttpsTrafficOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageAccountProperties {\n");
    sb.append("    accessTier: ").append(toIndentedString(accessTier)).append("\n");
    sb.append("    azureFilesIdentityBasedAuthentication: ").append(toIndentedString(azureFilesIdentityBasedAuthentication)).append("\n");
    sb.append("    blobRestoreStatus: ").append(toIndentedString(blobRestoreStatus)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    customDomain: ").append(toIndentedString(customDomain)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    failoverInProgress: ").append(toIndentedString(failoverInProgress)).append("\n");
    sb.append("    geoReplicationStats: ").append(toIndentedString(geoReplicationStats)).append("\n");
    sb.append("    isHnsEnabled: ").append(toIndentedString(isHnsEnabled)).append("\n");
    sb.append("    largeFileSharesState: ").append(toIndentedString(largeFileSharesState)).append("\n");
    sb.append("    lastGeoFailoverTime: ").append(toIndentedString(lastGeoFailoverTime)).append("\n");
    sb.append("    networkAcls: ").append(toIndentedString(networkAcls)).append("\n");
    sb.append("    primaryEndpoints: ").append(toIndentedString(primaryEndpoints)).append("\n");
    sb.append("    primaryLocation: ").append(toIndentedString(primaryLocation)).append("\n");
    sb.append("    privateEndpointConnections: ").append(toIndentedString(privateEndpointConnections)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    routingPreference: ").append(toIndentedString(routingPreference)).append("\n");
    sb.append("    secondaryEndpoints: ").append(toIndentedString(secondaryEndpoints)).append("\n");
    sb.append("    secondaryLocation: ").append(toIndentedString(secondaryLocation)).append("\n");
    sb.append("    statusOfPrimary: ").append(toIndentedString(statusOfPrimary)).append("\n");
    sb.append("    statusOfSecondary: ").append(toIndentedString(statusOfSecondary)).append("\n");
    sb.append("    supportsHttpsTrafficOnly: ").append(toIndentedString(supportsHttpsTrafficOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessTier");
    openapiFields.add("azureFilesIdentityBasedAuthentication");
    openapiFields.add("blobRestoreStatus");
    openapiFields.add("creationTime");
    openapiFields.add("customDomain");
    openapiFields.add("encryption");
    openapiFields.add("failoverInProgress");
    openapiFields.add("geoReplicationStats");
    openapiFields.add("isHnsEnabled");
    openapiFields.add("largeFileSharesState");
    openapiFields.add("lastGeoFailoverTime");
    openapiFields.add("networkAcls");
    openapiFields.add("primaryEndpoints");
    openapiFields.add("primaryLocation");
    openapiFields.add("privateEndpointConnections");
    openapiFields.add("provisioningState");
    openapiFields.add("routingPreference");
    openapiFields.add("secondaryEndpoints");
    openapiFields.add("secondaryLocation");
    openapiFields.add("statusOfPrimary");
    openapiFields.add("statusOfSecondary");
    openapiFields.add("supportsHttpsTrafficOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageAccountProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageAccountProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageAccountProperties is not found in the empty JSON string", StorageAccountProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageAccountProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageAccountProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessTier") != null && !jsonObj.get("accessTier").isJsonNull()) && !jsonObj.get("accessTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessTier").toString()));
      }
      // validate the optional field `accessTier`
      if (jsonObj.get("accessTier") != null && !jsonObj.get("accessTier").isJsonNull()) {
        AccessTierEnum.validateJsonElement(jsonObj.get("accessTier"));
      }
      // validate the optional field `azureFilesIdentityBasedAuthentication`
      if (jsonObj.get("azureFilesIdentityBasedAuthentication") != null && !jsonObj.get("azureFilesIdentityBasedAuthentication").isJsonNull()) {
        AzureFilesIdentityBasedAuthentication.validateJsonElement(jsonObj.get("azureFilesIdentityBasedAuthentication"));
      }
      // validate the optional field `blobRestoreStatus`
      if (jsonObj.get("blobRestoreStatus") != null && !jsonObj.get("blobRestoreStatus").isJsonNull()) {
        BlobRestoreStatus.validateJsonElement(jsonObj.get("blobRestoreStatus"));
      }
      // validate the optional field `customDomain`
      if (jsonObj.get("customDomain") != null && !jsonObj.get("customDomain").isJsonNull()) {
        CustomDomain.validateJsonElement(jsonObj.get("customDomain"));
      }
      // validate the optional field `encryption`
      if (jsonObj.get("encryption") != null && !jsonObj.get("encryption").isJsonNull()) {
        Encryption.validateJsonElement(jsonObj.get("encryption"));
      }
      // validate the optional field `geoReplicationStats`
      if (jsonObj.get("geoReplicationStats") != null && !jsonObj.get("geoReplicationStats").isJsonNull()) {
        GeoReplicationStats.validateJsonElement(jsonObj.get("geoReplicationStats"));
      }
      if ((jsonObj.get("largeFileSharesState") != null && !jsonObj.get("largeFileSharesState").isJsonNull()) && !jsonObj.get("largeFileSharesState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largeFileSharesState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largeFileSharesState").toString()));
      }
      // validate the optional field `largeFileSharesState`
      if (jsonObj.get("largeFileSharesState") != null && !jsonObj.get("largeFileSharesState").isJsonNull()) {
        LargeFileSharesStateEnum.validateJsonElement(jsonObj.get("largeFileSharesState"));
      }
      // validate the optional field `networkAcls`
      if (jsonObj.get("networkAcls") != null && !jsonObj.get("networkAcls").isJsonNull()) {
        NetworkRuleSet.validateJsonElement(jsonObj.get("networkAcls"));
      }
      // validate the optional field `primaryEndpoints`
      if (jsonObj.get("primaryEndpoints") != null && !jsonObj.get("primaryEndpoints").isJsonNull()) {
        Endpoints.validateJsonElement(jsonObj.get("primaryEndpoints"));
      }
      if ((jsonObj.get("primaryLocation") != null && !jsonObj.get("primaryLocation").isJsonNull()) && !jsonObj.get("primaryLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryLocation").toString()));
      }
      if (jsonObj.get("privateEndpointConnections") != null && !jsonObj.get("privateEndpointConnections").isJsonNull()) {
        JsonArray jsonArrayprivateEndpointConnections = jsonObj.getAsJsonArray("privateEndpointConnections");
        if (jsonArrayprivateEndpointConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("privateEndpointConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `privateEndpointConnections` to be an array in the JSON string but got `%s`", jsonObj.get("privateEndpointConnections").toString()));
          }

          // validate the optional field `privateEndpointConnections` (array)
          for (int i = 0; i < jsonArrayprivateEndpointConnections.size(); i++) {
            PrivateEndpointConnection.validateJsonElement(jsonArrayprivateEndpointConnections.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `routingPreference`
      if (jsonObj.get("routingPreference") != null && !jsonObj.get("routingPreference").isJsonNull()) {
        RoutingPreference.validateJsonElement(jsonObj.get("routingPreference"));
      }
      // validate the optional field `secondaryEndpoints`
      if (jsonObj.get("secondaryEndpoints") != null && !jsonObj.get("secondaryEndpoints").isJsonNull()) {
        Endpoints.validateJsonElement(jsonObj.get("secondaryEndpoints"));
      }
      if ((jsonObj.get("secondaryLocation") != null && !jsonObj.get("secondaryLocation").isJsonNull()) && !jsonObj.get("secondaryLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryLocation").toString()));
      }
      if ((jsonObj.get("statusOfPrimary") != null && !jsonObj.get("statusOfPrimary").isJsonNull()) && !jsonObj.get("statusOfPrimary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusOfPrimary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusOfPrimary").toString()));
      }
      // validate the optional field `statusOfPrimary`
      if (jsonObj.get("statusOfPrimary") != null && !jsonObj.get("statusOfPrimary").isJsonNull()) {
        StatusOfPrimaryEnum.validateJsonElement(jsonObj.get("statusOfPrimary"));
      }
      if ((jsonObj.get("statusOfSecondary") != null && !jsonObj.get("statusOfSecondary").isJsonNull()) && !jsonObj.get("statusOfSecondary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusOfSecondary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusOfSecondary").toString()));
      }
      // validate the optional field `statusOfSecondary`
      if (jsonObj.get("statusOfSecondary") != null && !jsonObj.get("statusOfSecondary").isJsonNull()) {
        StatusOfSecondaryEnum.validateJsonElement(jsonObj.get("statusOfSecondary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageAccountProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageAccountProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageAccountProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageAccountProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageAccountProperties>() {
           @Override
           public void write(JsonWriter out, StorageAccountProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageAccountProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageAccountProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageAccountProperties
   * @throws IOException if the JSON string is invalid with respect to StorageAccountProperties
   */
  public static StorageAccountProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageAccountProperties.class);
  }

  /**
   * Convert an instance of StorageAccountProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

