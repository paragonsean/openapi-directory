/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkRuleSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkRuleSet::OAINetworkRuleSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkRuleSet::OAINetworkRuleSet() {
    this->initializeModel();
}

OAINetworkRuleSet::~OAINetworkRuleSet() {}

void OAINetworkRuleSet::initializeModel() {

    m_bypass_isSet = false;
    m_bypass_isValid = false;

    m_default_action_isSet = false;
    m_default_action_isValid = false;

    m_ip_rules_isSet = false;
    m_ip_rules_isValid = false;

    m_virtual_network_rules_isSet = false;
    m_virtual_network_rules_isValid = false;
}

void OAINetworkRuleSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkRuleSet::fromJsonObject(QJsonObject json) {

    m_bypass_isValid = ::OpenAPI::fromJsonValue(m_bypass, json[QString("bypass")]);
    m_bypass_isSet = !json[QString("bypass")].isNull() && m_bypass_isValid;

    m_default_action_isValid = ::OpenAPI::fromJsonValue(m_default_action, json[QString("defaultAction")]);
    m_default_action_isSet = !json[QString("defaultAction")].isNull() && m_default_action_isValid;

    m_ip_rules_isValid = ::OpenAPI::fromJsonValue(m_ip_rules, json[QString("ipRules")]);
    m_ip_rules_isSet = !json[QString("ipRules")].isNull() && m_ip_rules_isValid;

    m_virtual_network_rules_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_rules, json[QString("virtualNetworkRules")]);
    m_virtual_network_rules_isSet = !json[QString("virtualNetworkRules")].isNull() && m_virtual_network_rules_isValid;
}

QString OAINetworkRuleSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkRuleSet::asJsonObject() const {
    QJsonObject obj;
    if (m_bypass_isSet) {
        obj.insert(QString("bypass"), ::OpenAPI::toJsonValue(m_bypass));
    }
    if (m_default_action_isSet) {
        obj.insert(QString("defaultAction"), ::OpenAPI::toJsonValue(m_default_action));
    }
    if (m_ip_rules.size() > 0) {
        obj.insert(QString("ipRules"), ::OpenAPI::toJsonValue(m_ip_rules));
    }
    if (m_virtual_network_rules.size() > 0) {
        obj.insert(QString("virtualNetworkRules"), ::OpenAPI::toJsonValue(m_virtual_network_rules));
    }
    return obj;
}

QString OAINetworkRuleSet::getBypass() const {
    return m_bypass;
}
void OAINetworkRuleSet::setBypass(const QString &bypass) {
    m_bypass = bypass;
    m_bypass_isSet = true;
}

bool OAINetworkRuleSet::is_bypass_Set() const{
    return m_bypass_isSet;
}

bool OAINetworkRuleSet::is_bypass_Valid() const{
    return m_bypass_isValid;
}

QString OAINetworkRuleSet::getDefaultAction() const {
    return m_default_action;
}
void OAINetworkRuleSet::setDefaultAction(const QString &default_action) {
    m_default_action = default_action;
    m_default_action_isSet = true;
}

bool OAINetworkRuleSet::is_default_action_Set() const{
    return m_default_action_isSet;
}

bool OAINetworkRuleSet::is_default_action_Valid() const{
    return m_default_action_isValid;
}

QList<OAIIPRule> OAINetworkRuleSet::getIpRules() const {
    return m_ip_rules;
}
void OAINetworkRuleSet::setIpRules(const QList<OAIIPRule> &ip_rules) {
    m_ip_rules = ip_rules;
    m_ip_rules_isSet = true;
}

bool OAINetworkRuleSet::is_ip_rules_Set() const{
    return m_ip_rules_isSet;
}

bool OAINetworkRuleSet::is_ip_rules_Valid() const{
    return m_ip_rules_isValid;
}

QList<OAIVirtualNetworkRule> OAINetworkRuleSet::getVirtualNetworkRules() const {
    return m_virtual_network_rules;
}
void OAINetworkRuleSet::setVirtualNetworkRules(const QList<OAIVirtualNetworkRule> &virtual_network_rules) {
    m_virtual_network_rules = virtual_network_rules;
    m_virtual_network_rules_isSet = true;
}

bool OAINetworkRuleSet::is_virtual_network_rules_Set() const{
    return m_virtual_network_rules_isSet;
}

bool OAINetworkRuleSet::is_virtual_network_rules_Valid() const{
    return m_virtual_network_rules_isValid;
}

bool OAINetworkRuleSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bypass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkRuleSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_action_isValid && true;
}

} // namespace OpenAPI
