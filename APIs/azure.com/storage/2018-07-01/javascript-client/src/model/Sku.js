/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Restriction from './Restriction';
import SKUCapability from './SKUCapability';

/**
 * The Sku model module.
 * @module model/Sku
 * @version 2018-07-01
 */
class Sku {
    /**
     * Constructs a new <code>Sku</code>.
     * The SKU of the storage account.
     * @alias module:model/Sku
     * @param name {module:model/Sku.NameEnum} Gets or sets the SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
     */
    constructor(name) { 
        
        Sku.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Sku</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Sku} obj Optional instance to populate.
     * @return {module:model/Sku} The populated <code>Sku</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Sku();

            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = ApiClient.convertToType(data['capabilities'], [SKUCapability]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = ApiClient.convertToType(data['restrictions'], [Restriction]);
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Sku</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Sku</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Sku.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['capabilities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['capabilities'])) {
                throw new Error("Expected the field `capabilities` to be an array in the JSON data but got " + data['capabilities']);
            }
            // validate the optional field `capabilities` (array)
            for (const item of data['capabilities']) {
                SKUCapability.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        if (data['restrictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['restrictions'])) {
                throw new Error("Expected the field `restrictions` to be an array in the JSON data but got " + data['restrictions']);
            }
            // validate the optional field `restrictions` (array)
            for (const item of data['restrictions']) {
                Restriction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }

        return true;
    }


}

Sku.RequiredProperties = ["name"];

/**
 * The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.
 * @member {Array.<module:model/SKUCapability>} capabilities
 */
Sku.prototype['capabilities'] = undefined;

/**
 * Indicates the type of storage account.
 * @member {module:model/Sku.KindEnum} kind
 */
Sku.prototype['kind'] = undefined;

/**
 * The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
 * @member {Array.<String>} locations
 */
Sku.prototype['locations'] = undefined;

/**
 * Gets or sets the SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
 * @member {module:model/Sku.NameEnum} name
 */
Sku.prototype['name'] = undefined;

/**
 * The type of the resource, usually it is 'storageAccounts'.
 * @member {String} resourceType
 */
Sku.prototype['resourceType'] = undefined;

/**
 * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
 * @member {Array.<module:model/Restriction>} restrictions
 */
Sku.prototype['restrictions'] = undefined;

/**
 * Gets the SKU tier. This is based on the SKU name.
 * @member {module:model/Sku.TierEnum} tier
 */
Sku.prototype['tier'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
Sku['KindEnum'] = {

    /**
     * value: "Storage"
     * @const
     */
    "Storage": "Storage",

    /**
     * value: "StorageV2"
     * @const
     */
    "StorageV2": "StorageV2",

    /**
     * value: "BlobStorage"
     * @const
     */
    "BlobStorage": "BlobStorage",

    /**
     * value: "FileStorage"
     * @const
     */
    "FileStorage": "FileStorage",

    /**
     * value: "BlockBlobStorage"
     * @const
     */
    "BlockBlobStorage": "BlockBlobStorage"
};


/**
 * Allowed values for the <code>name</code> property.
 * @enum {String}
 * @readonly
 */
Sku['NameEnum'] = {

    /**
     * value: "Standard_LRS"
     * @const
     */
    "Standard_LRS": "Standard_LRS",

    /**
     * value: "Standard_GRS"
     * @const
     */
    "Standard_GRS": "Standard_GRS",

    /**
     * value: "Standard_RAGRS"
     * @const
     */
    "Standard_RAGRS": "Standard_RAGRS",

    /**
     * value: "Standard_ZRS"
     * @const
     */
    "Standard_ZRS": "Standard_ZRS",

    /**
     * value: "Premium_LRS"
     * @const
     */
    "Premium_LRS": "Premium_LRS",

    /**
     * value: "Premium_ZRS"
     * @const
     */
    "Premium_ZRS": "Premium_ZRS"
};


/**
 * Allowed values for the <code>tier</code> property.
 * @enum {String}
 * @readonly
 */
Sku['TierEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium"
};



export default Sku;

