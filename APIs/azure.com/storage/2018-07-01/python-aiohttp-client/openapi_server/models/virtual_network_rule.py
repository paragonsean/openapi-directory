# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualNetworkRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str='Allow', id: str=None, state: str=None):
        """VirtualNetworkRule - a model defined in OpenAPI

        :param action: The action of this VirtualNetworkRule.
        :param id: The id of this VirtualNetworkRule.
        :param state: The state of this VirtualNetworkRule.
        """
        self.openapi_types = {
            'action': str,
            'id': str,
            'state': str
        }

        self.attribute_map = {
            'action': 'action',
            'id': 'id',
            'state': 'state'
        }

        self._action = action
        self._id = id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNetworkRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNetworkRule of this VirtualNetworkRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this VirtualNetworkRule.

        The action of virtual network rule.

        :return: The action of this VirtualNetworkRule.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this VirtualNetworkRule.

        The action of virtual network rule.

        :param action: The action of this VirtualNetworkRule.
        :type action: str
        """
        allowed_values = ["Allow"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def id(self):
        """Gets the id of this VirtualNetworkRule.

        Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.

        :return: The id of this VirtualNetworkRule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualNetworkRule.

        Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.

        :param id: The id of this VirtualNetworkRule.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def state(self):
        """Gets the state of this VirtualNetworkRule.

        Gets the state of virtual network rule.

        :return: The state of this VirtualNetworkRule.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this VirtualNetworkRule.

        Gets the state of virtual network rule.

        :param state: The state of this VirtualNetworkRule.
        :type state: str
        """
        allowed_values = ["provisioning", "deprovisioning", "succeeded", "failed", "networkSourceDeleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
