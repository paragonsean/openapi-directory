# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeoReplicationStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_failover: bool=None, last_sync_time: datetime=None, status: str=None):
        """GeoReplicationStats - a model defined in OpenAPI

        :param can_failover: The can_failover of this GeoReplicationStats.
        :param last_sync_time: The last_sync_time of this GeoReplicationStats.
        :param status: The status of this GeoReplicationStats.
        """
        self.openapi_types = {
            'can_failover': bool,
            'last_sync_time': datetime,
            'status': str
        }

        self.attribute_map = {
            'can_failover': 'canFailover',
            'last_sync_time': 'lastSyncTime',
            'status': 'status'
        }

        self._can_failover = can_failover
        self._last_sync_time = last_sync_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoReplicationStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GeoReplicationStats of this GeoReplicationStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_failover(self):
        """Gets the can_failover of this GeoReplicationStats.

        A boolean flag which indicates whether or not account failover is supported for the account.

        :return: The can_failover of this GeoReplicationStats.
        :rtype: bool
        """
        return self._can_failover

    @can_failover.setter
    def can_failover(self, can_failover):
        """Sets the can_failover of this GeoReplicationStats.

        A boolean flag which indicates whether or not account failover is supported for the account.

        :param can_failover: The can_failover of this GeoReplicationStats.
        :type can_failover: bool
        """

        self._can_failover = can_failover

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this GeoReplicationStats.

        All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.

        :return: The last_sync_time of this GeoReplicationStats.
        :rtype: datetime
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this GeoReplicationStats.

        All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.

        :param last_sync_time: The last_sync_time of this GeoReplicationStats.
        :type last_sync_time: datetime
        """

        self._last_sync_time = last_sync_time

    @property
    def status(self):
        """Gets the status of this GeoReplicationStats.

        The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.

        :return: The status of this GeoReplicationStats.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GeoReplicationStats.

        The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.

        :param status: The status of this GeoReplicationStats.
        :type status: str
        """
        allowed_values = ["Live", "Bootstrap", "Unavailable"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
