/*
 * StorageManagementClient
 * The Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckNameAvailabilityResult;
import org.openapitools.client.model.StorageAccount;
import org.openapitools.client.model.StorageAccountCheckNameAvailabilityParameters;
import org.openapitools.client.model.StorageAccountCreateParameters;
import org.openapitools.client.model.StorageAccountKeys;
import org.openapitools.client.model.StorageAccountListResult;
import org.openapitools.client.model.StorageAccountRegenerateKeyParameters;
import org.openapitools.client.model.StorageAccountUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorageAccountsApi
 */
@Disabled
public class StorageAccountsApiTest {

    private final StorageAccountsApi api = new StorageAccountsApi();

    /**
     * Checks that account name is valid and is not in use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsCheckNameAvailabilityTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountCheckNameAvailabilityParameters accountName = null;
        CheckNameAvailabilityResult response = api.storageAccountsCheckNameAvailability(apiVersion, subscriptionId, accountName);
        // TODO: test validations
    }

    /**
     * Asynchronously creates a new storage account with the specified parameters. Existing accounts cannot be updated with this API and should instead use the Update Storage Account API. If an account is already created and subsequent PUT request is issued with exact same set of properties, then HTTP 200 would be returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsCreateTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountCreateParameters parameters = null;
        StorageAccount response = api.storageAccountsCreate(resourceGroupName, accountName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a storage account in Microsoft Azure.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.storageAccountsDelete(resourceGroupName, accountName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns the properties for the specified storage account including but not limited to name, account type, location, and account status. The ListKeys operation should be used to retrieve storage keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsGetPropertiesTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccount response = api.storageAccountsGetProperties(resourceGroupName, accountName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the storage accounts available under the subscription. Note that storage keys are not returned; use the ListKeys operation for this.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountListResult response = api.storageAccountsList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the storage accounts available under the given resource group. Note that storage keys are not returned; use the ListKeys operation for this.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountListResult response = api.storageAccountsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists the access keys for the specified storage account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountKeys response = api.storageAccountsListKeys(resourceGroupName, accountName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Regenerates the access keys for the specified storage account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsRegenerateKeyTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountRegenerateKeyParameters regenerateKey = null;
        StorageAccountKeys response = api.storageAccountsRegenerateKey(resourceGroupName, accountName, apiVersion, subscriptionId, regenerateKey);
        // TODO: test validations
    }

    /**
     * Updates the account type or tags for a storage account. It can also be used to add a custom domain (note that custom domains cannot be added via the Create operation). Only one custom domain is supported per storage account. This API can only be used to update one of tags, accountType, or customDomain per call. To update multiple of these properties, call the API multiple times with one change per call. This call does not change the storage keys for the account. If you want to change storage account keys, use the RegenerateKey operation. The location and name of the storage account cannot be changed after creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageAccountsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        StorageAccountUpdateParameters parameters = null;
        StorageAccount response = api.storageAccountsUpdate(resourceGroupName, accountName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
