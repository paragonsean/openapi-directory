# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomDomain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, use_sub_domain_name: bool=None):
        """CustomDomain - a model defined in OpenAPI

        :param name: The name of this CustomDomain.
        :param use_sub_domain_name: The use_sub_domain_name of this CustomDomain.
        """
        self.openapi_types = {
            'name': str,
            'use_sub_domain_name': bool
        }

        self.attribute_map = {
            'name': 'name',
            'use_sub_domain_name': 'useSubDomainName'
        }

        self._name = name
        self._use_sub_domain_name = use_sub_domain_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomDomain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomDomain of this CustomDomain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CustomDomain.

        Gets or sets the custom domain name. Name is the CNAME source.

        :return: The name of this CustomDomain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomDomain.

        Gets or sets the custom domain name. Name is the CNAME source.

        :param name: The name of this CustomDomain.
        :type name: str
        """

        self._name = name

    @property
    def use_sub_domain_name(self):
        """Gets the use_sub_domain_name of this CustomDomain.

        Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates

        :return: The use_sub_domain_name of this CustomDomain.
        :rtype: bool
        """
        return self._use_sub_domain_name

    @use_sub_domain_name.setter
    def use_sub_domain_name(self, use_sub_domain_name):
        """Sets the use_sub_domain_name of this CustomDomain.

        Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates

        :param use_sub_domain_name: The use_sub_domain_name of this CustomDomain.
        :type use_sub_domain_name: bool
        """

        self._use_sub_domain_name = use_sub_domain_name
