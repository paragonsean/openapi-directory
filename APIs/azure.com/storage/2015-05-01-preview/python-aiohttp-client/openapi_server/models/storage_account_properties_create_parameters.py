# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageAccountPropertiesCreateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_type: str=None):
        """StorageAccountPropertiesCreateParameters - a model defined in OpenAPI

        :param account_type: The account_type of this StorageAccountPropertiesCreateParameters.
        """
        self.openapi_types = {
            'account_type': str
        }

        self.attribute_map = {
            'account_type': 'accountType'
        }

        self._account_type = account_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountPropertiesCreateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountPropertiesCreateParameters of this StorageAccountPropertiesCreateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_type(self):
        """Gets the account_type of this StorageAccountPropertiesCreateParameters.

        Gets or sets the account type.

        :return: The account_type of this StorageAccountPropertiesCreateParameters.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this StorageAccountPropertiesCreateParameters.

        Gets or sets the account type.

        :param account_type: The account_type of this StorageAccountPropertiesCreateParameters.
        :type account_type: str
        """
        allowed_values = ["Standard_LRS", "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type
