# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_domain import CustomDomain
from openapi_server.models.endpoints import Endpoints
from openapi_server import util


class StorageAccountProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_type: str=None, creation_time: datetime=None, custom_domain: CustomDomain=None, last_geo_failover_time: datetime=None, primary_endpoints: Endpoints=None, primary_location: str=None, provisioning_state: str=None, secondary_endpoints: Endpoints=None, secondary_location: str=None, status_of_primary: str=None, status_of_secondary: str=None):
        """StorageAccountProperties - a model defined in OpenAPI

        :param account_type: The account_type of this StorageAccountProperties.
        :param creation_time: The creation_time of this StorageAccountProperties.
        :param custom_domain: The custom_domain of this StorageAccountProperties.
        :param last_geo_failover_time: The last_geo_failover_time of this StorageAccountProperties.
        :param primary_endpoints: The primary_endpoints of this StorageAccountProperties.
        :param primary_location: The primary_location of this StorageAccountProperties.
        :param provisioning_state: The provisioning_state of this StorageAccountProperties.
        :param secondary_endpoints: The secondary_endpoints of this StorageAccountProperties.
        :param secondary_location: The secondary_location of this StorageAccountProperties.
        :param status_of_primary: The status_of_primary of this StorageAccountProperties.
        :param status_of_secondary: The status_of_secondary of this StorageAccountProperties.
        """
        self.openapi_types = {
            'account_type': str,
            'creation_time': datetime,
            'custom_domain': CustomDomain,
            'last_geo_failover_time': datetime,
            'primary_endpoints': Endpoints,
            'primary_location': str,
            'provisioning_state': str,
            'secondary_endpoints': Endpoints,
            'secondary_location': str,
            'status_of_primary': str,
            'status_of_secondary': str
        }

        self.attribute_map = {
            'account_type': 'accountType',
            'creation_time': 'creationTime',
            'custom_domain': 'customDomain',
            'last_geo_failover_time': 'lastGeoFailoverTime',
            'primary_endpoints': 'primaryEndpoints',
            'primary_location': 'primaryLocation',
            'provisioning_state': 'provisioningState',
            'secondary_endpoints': 'secondaryEndpoints',
            'secondary_location': 'secondaryLocation',
            'status_of_primary': 'statusOfPrimary',
            'status_of_secondary': 'statusOfSecondary'
        }

        self._account_type = account_type
        self._creation_time = creation_time
        self._custom_domain = custom_domain
        self._last_geo_failover_time = last_geo_failover_time
        self._primary_endpoints = primary_endpoints
        self._primary_location = primary_location
        self._provisioning_state = provisioning_state
        self._secondary_endpoints = secondary_endpoints
        self._secondary_location = secondary_location
        self._status_of_primary = status_of_primary
        self._status_of_secondary = status_of_secondary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountProperties of this StorageAccountProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_type(self):
        """Gets the account_type of this StorageAccountProperties.

        Gets the type of the storage account.

        :return: The account_type of this StorageAccountProperties.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this StorageAccountProperties.

        Gets the type of the storage account.

        :param account_type: The account_type of this StorageAccountProperties.
        :type account_type: str
        """
        allowed_values = ["Standard_LRS", "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def creation_time(self):
        """Gets the creation_time of this StorageAccountProperties.

        Gets the creation date and time of the storage account in UTC.

        :return: The creation_time of this StorageAccountProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this StorageAccountProperties.

        Gets the creation date and time of the storage account in UTC.

        :param creation_time: The creation_time of this StorageAccountProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def custom_domain(self):
        """Gets the custom_domain of this StorageAccountProperties.


        :return: The custom_domain of this StorageAccountProperties.
        :rtype: CustomDomain
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """Sets the custom_domain of this StorageAccountProperties.


        :param custom_domain: The custom_domain of this StorageAccountProperties.
        :type custom_domain: CustomDomain
        """

        self._custom_domain = custom_domain

    @property
    def last_geo_failover_time(self):
        """Gets the last_geo_failover_time of this StorageAccountProperties.

        Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is StandardGRS or StandardRAGRS.

        :return: The last_geo_failover_time of this StorageAccountProperties.
        :rtype: datetime
        """
        return self._last_geo_failover_time

    @last_geo_failover_time.setter
    def last_geo_failover_time(self, last_geo_failover_time):
        """Sets the last_geo_failover_time of this StorageAccountProperties.

        Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is StandardGRS or StandardRAGRS.

        :param last_geo_failover_time: The last_geo_failover_time of this StorageAccountProperties.
        :type last_geo_failover_time: datetime
        """

        self._last_geo_failover_time = last_geo_failover_time

    @property
    def primary_endpoints(self):
        """Gets the primary_endpoints of this StorageAccountProperties.


        :return: The primary_endpoints of this StorageAccountProperties.
        :rtype: Endpoints
        """
        return self._primary_endpoints

    @primary_endpoints.setter
    def primary_endpoints(self, primary_endpoints):
        """Sets the primary_endpoints of this StorageAccountProperties.


        :param primary_endpoints: The primary_endpoints of this StorageAccountProperties.
        :type primary_endpoints: Endpoints
        """

        self._primary_endpoints = primary_endpoints

    @property
    def primary_location(self):
        """Gets the primary_location of this StorageAccountProperties.

        Gets the location of the primary for the storage account.

        :return: The primary_location of this StorageAccountProperties.
        :rtype: str
        """
        return self._primary_location

    @primary_location.setter
    def primary_location(self, primary_location):
        """Sets the primary_location of this StorageAccountProperties.

        Gets the location of the primary for the storage account.

        :param primary_location: The primary_location of this StorageAccountProperties.
        :type primary_location: str
        """

        self._primary_location = primary_location

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this StorageAccountProperties.

        Gets the status of the storage account at the time the operation was called.

        :return: The provisioning_state of this StorageAccountProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this StorageAccountProperties.

        Gets the status of the storage account at the time the operation was called.

        :param provisioning_state: The provisioning_state of this StorageAccountProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "ResolvingDNS", "Succeeded"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def secondary_endpoints(self):
        """Gets the secondary_endpoints of this StorageAccountProperties.


        :return: The secondary_endpoints of this StorageAccountProperties.
        :rtype: Endpoints
        """
        return self._secondary_endpoints

    @secondary_endpoints.setter
    def secondary_endpoints(self, secondary_endpoints):
        """Sets the secondary_endpoints of this StorageAccountProperties.


        :param secondary_endpoints: The secondary_endpoints of this StorageAccountProperties.
        :type secondary_endpoints: Endpoints
        """

        self._secondary_endpoints = secondary_endpoints

    @property
    def secondary_location(self):
        """Gets the secondary_location of this StorageAccountProperties.

        Gets the location of the geo replicated secondary for the storage account. Only available if the accountType is StandardGRS or StandardRAGRS.

        :return: The secondary_location of this StorageAccountProperties.
        :rtype: str
        """
        return self._secondary_location

    @secondary_location.setter
    def secondary_location(self, secondary_location):
        """Sets the secondary_location of this StorageAccountProperties.

        Gets the location of the geo replicated secondary for the storage account. Only available if the accountType is StandardGRS or StandardRAGRS.

        :param secondary_location: The secondary_location of this StorageAccountProperties.
        :type secondary_location: str
        """

        self._secondary_location = secondary_location

    @property
    def status_of_primary(self):
        """Gets the status_of_primary of this StorageAccountProperties.

        Gets the status indicating whether the primary location of the storage account is available or unavailable.

        :return: The status_of_primary of this StorageAccountProperties.
        :rtype: str
        """
        return self._status_of_primary

    @status_of_primary.setter
    def status_of_primary(self, status_of_primary):
        """Sets the status_of_primary of this StorageAccountProperties.

        Gets the status indicating whether the primary location of the storage account is available or unavailable.

        :param status_of_primary: The status_of_primary of this StorageAccountProperties.
        :type status_of_primary: str
        """
        allowed_values = ["Available", "Unavailable"]  # noqa: E501
        if status_of_primary not in allowed_values:
            raise ValueError(
                "Invalid value for `status_of_primary` ({0}), must be one of {1}"
                .format(status_of_primary, allowed_values)
            )

        self._status_of_primary = status_of_primary

    @property
    def status_of_secondary(self):
        """Gets the status_of_secondary of this StorageAccountProperties.

        Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the accountType is StandardGRS or StandardRAGRS.

        :return: The status_of_secondary of this StorageAccountProperties.
        :rtype: str
        """
        return self._status_of_secondary

    @status_of_secondary.setter
    def status_of_secondary(self, status_of_secondary):
        """Sets the status_of_secondary of this StorageAccountProperties.

        Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the accountType is StandardGRS or StandardRAGRS.

        :param status_of_secondary: The status_of_secondary of this StorageAccountProperties.
        :type status_of_secondary: str
        """
        allowed_values = ["Available", "Unavailable"]  # noqa: E501
        if status_of_secondary not in allowed_values:
            raise ValueError(
                "Invalid value for `status_of_secondary` ({0}), must be one of {1}"
                .format(status_of_secondary, allowed_values)
            )

        self._status_of_secondary = status_of_secondary
