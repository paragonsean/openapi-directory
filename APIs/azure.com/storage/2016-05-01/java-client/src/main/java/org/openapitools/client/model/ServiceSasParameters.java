/*
 * StorageManagement
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters to list service SAS credentials of a specific resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:46:17.242755-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceSasParameters {
  public static final String SERIALIZED_NAME_CANONICALIZED_RESOURCE = "canonicalizedResource";
  @SerializedName(SERIALIZED_NAME_CANONICALIZED_RESOURCE)
  private String canonicalizedResource;

  public static final String SERIALIZED_NAME_END_PK = "endPk";
  @SerializedName(SERIALIZED_NAME_END_PK)
  private String endPk;

  public static final String SERIALIZED_NAME_END_RK = "endRk";
  @SerializedName(SERIALIZED_NAME_END_RK)
  private String endRk;

  public static final String SERIALIZED_NAME_KEY_TO_SIGN = "keyToSign";
  @SerializedName(SERIALIZED_NAME_KEY_TO_SIGN)
  private String keyToSign;

  public static final String SERIALIZED_NAME_RSCC = "rscc";
  @SerializedName(SERIALIZED_NAME_RSCC)
  private String rscc;

  public static final String SERIALIZED_NAME_RSCD = "rscd";
  @SerializedName(SERIALIZED_NAME_RSCD)
  private String rscd;

  public static final String SERIALIZED_NAME_RSCE = "rsce";
  @SerializedName(SERIALIZED_NAME_RSCE)
  private String rsce;

  public static final String SERIALIZED_NAME_RSCL = "rscl";
  @SerializedName(SERIALIZED_NAME_RSCL)
  private String rscl;

  public static final String SERIALIZED_NAME_RSCT = "rsct";
  @SerializedName(SERIALIZED_NAME_RSCT)
  private String rsct;

  public static final String SERIALIZED_NAME_SIGNED_EXPIRY = "signedExpiry";
  @SerializedName(SERIALIZED_NAME_SIGNED_EXPIRY)
  private OffsetDateTime signedExpiry;

  public static final String SERIALIZED_NAME_SIGNED_IDENTIFIER = "signedIdentifier";
  @SerializedName(SERIALIZED_NAME_SIGNED_IDENTIFIER)
  private String signedIdentifier;

  public static final String SERIALIZED_NAME_SIGNED_IP = "signedIp";
  @SerializedName(SERIALIZED_NAME_SIGNED_IP)
  private String signedIp;

  /**
   * The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
   */
  @JsonAdapter(SignedPermissionEnum.Adapter.class)
  public enum SignedPermissionEnum {
    R("r"),
    
    D("d"),
    
    W("w"),
    
    L("l"),
    
    A("a"),
    
    C("c"),
    
    U("u"),
    
    P("p");

    private String value;

    SignedPermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignedPermissionEnum fromValue(String value) {
      for (SignedPermissionEnum b : SignedPermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignedPermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignedPermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignedPermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignedPermissionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignedPermissionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNED_PERMISSION = "signedPermission";
  @SerializedName(SERIALIZED_NAME_SIGNED_PERMISSION)
  private SignedPermissionEnum signedPermission;

  /**
   * The protocol permitted for a request made with the account SAS.
   */
  @JsonAdapter(SignedProtocolEnum.Adapter.class)
  public enum SignedProtocolEnum {
    HTTPS_HTTP("https,http"),
    
    HTTPS("https");

    private String value;

    SignedProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignedProtocolEnum fromValue(String value) {
      for (SignedProtocolEnum b : SignedProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignedProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignedProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignedProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignedProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignedProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNED_PROTOCOL = "signedProtocol";
  @SerializedName(SERIALIZED_NAME_SIGNED_PROTOCOL)
  private SignedProtocolEnum signedProtocol;

  /**
   * The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
   */
  @JsonAdapter(SignedResourceEnum.Adapter.class)
  public enum SignedResourceEnum {
    B("b"),
    
    C("c"),
    
    F("f"),
    
    S("s");

    private String value;

    SignedResourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignedResourceEnum fromValue(String value) {
      for (SignedResourceEnum b : SignedResourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignedResourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignedResourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignedResourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignedResourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignedResourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNED_RESOURCE = "signedResource";
  @SerializedName(SERIALIZED_NAME_SIGNED_RESOURCE)
  private SignedResourceEnum signedResource;

  public static final String SERIALIZED_NAME_SIGNED_START = "signedStart";
  @SerializedName(SERIALIZED_NAME_SIGNED_START)
  private OffsetDateTime signedStart;

  public static final String SERIALIZED_NAME_START_PK = "startPk";
  @SerializedName(SERIALIZED_NAME_START_PK)
  private String startPk;

  public static final String SERIALIZED_NAME_START_RK = "startRk";
  @SerializedName(SERIALIZED_NAME_START_RK)
  private String startRk;

  public ServiceSasParameters() {
  }

  public ServiceSasParameters canonicalizedResource(String canonicalizedResource) {
    this.canonicalizedResource = canonicalizedResource;
    return this;
  }

  /**
   * The canonical path to the signed resource.
   * @return canonicalizedResource
   */
  @javax.annotation.Nonnull
  public String getCanonicalizedResource() {
    return canonicalizedResource;
  }

  public void setCanonicalizedResource(String canonicalizedResource) {
    this.canonicalizedResource = canonicalizedResource;
  }


  public ServiceSasParameters endPk(String endPk) {
    this.endPk = endPk;
    return this;
  }

  /**
   * The end of partition key.
   * @return endPk
   */
  @javax.annotation.Nullable
  public String getEndPk() {
    return endPk;
  }

  public void setEndPk(String endPk) {
    this.endPk = endPk;
  }


  public ServiceSasParameters endRk(String endRk) {
    this.endRk = endRk;
    return this;
  }

  /**
   * The end of row key.
   * @return endRk
   */
  @javax.annotation.Nullable
  public String getEndRk() {
    return endRk;
  }

  public void setEndRk(String endRk) {
    this.endRk = endRk;
  }


  public ServiceSasParameters keyToSign(String keyToSign) {
    this.keyToSign = keyToSign;
    return this;
  }

  /**
   * The key to sign the account SAS token with.
   * @return keyToSign
   */
  @javax.annotation.Nullable
  public String getKeyToSign() {
    return keyToSign;
  }

  public void setKeyToSign(String keyToSign) {
    this.keyToSign = keyToSign;
  }


  public ServiceSasParameters rscc(String rscc) {
    this.rscc = rscc;
    return this;
  }

  /**
   * The response header override for cache control.
   * @return rscc
   */
  @javax.annotation.Nullable
  public String getRscc() {
    return rscc;
  }

  public void setRscc(String rscc) {
    this.rscc = rscc;
  }


  public ServiceSasParameters rscd(String rscd) {
    this.rscd = rscd;
    return this;
  }

  /**
   * The response header override for content disposition.
   * @return rscd
   */
  @javax.annotation.Nullable
  public String getRscd() {
    return rscd;
  }

  public void setRscd(String rscd) {
    this.rscd = rscd;
  }


  public ServiceSasParameters rsce(String rsce) {
    this.rsce = rsce;
    return this;
  }

  /**
   * The response header override for content encoding.
   * @return rsce
   */
  @javax.annotation.Nullable
  public String getRsce() {
    return rsce;
  }

  public void setRsce(String rsce) {
    this.rsce = rsce;
  }


  public ServiceSasParameters rscl(String rscl) {
    this.rscl = rscl;
    return this;
  }

  /**
   * The response header override for content language.
   * @return rscl
   */
  @javax.annotation.Nullable
  public String getRscl() {
    return rscl;
  }

  public void setRscl(String rscl) {
    this.rscl = rscl;
  }


  public ServiceSasParameters rsct(String rsct) {
    this.rsct = rsct;
    return this;
  }

  /**
   * The response header override for content type.
   * @return rsct
   */
  @javax.annotation.Nullable
  public String getRsct() {
    return rsct;
  }

  public void setRsct(String rsct) {
    this.rsct = rsct;
  }


  public ServiceSasParameters signedExpiry(OffsetDateTime signedExpiry) {
    this.signedExpiry = signedExpiry;
    return this;
  }

  /**
   * The time at which the shared access signature becomes invalid.
   * @return signedExpiry
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSignedExpiry() {
    return signedExpiry;
  }

  public void setSignedExpiry(OffsetDateTime signedExpiry) {
    this.signedExpiry = signedExpiry;
  }


  public ServiceSasParameters signedIdentifier(String signedIdentifier) {
    this.signedIdentifier = signedIdentifier;
    return this;
  }

  /**
   * A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table.
   * @return signedIdentifier
   */
  @javax.annotation.Nullable
  public String getSignedIdentifier() {
    return signedIdentifier;
  }

  public void setSignedIdentifier(String signedIdentifier) {
    this.signedIdentifier = signedIdentifier;
  }


  public ServiceSasParameters signedIp(String signedIp) {
    this.signedIp = signedIp;
    return this;
  }

  /**
   * An IP address or a range of IP addresses from which to accept requests.
   * @return signedIp
   */
  @javax.annotation.Nullable
  public String getSignedIp() {
    return signedIp;
  }

  public void setSignedIp(String signedIp) {
    this.signedIp = signedIp;
  }


  public ServiceSasParameters signedPermission(SignedPermissionEnum signedPermission) {
    this.signedPermission = signedPermission;
    return this;
  }

  /**
   * The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
   * @return signedPermission
   */
  @javax.annotation.Nullable
  public SignedPermissionEnum getSignedPermission() {
    return signedPermission;
  }

  public void setSignedPermission(SignedPermissionEnum signedPermission) {
    this.signedPermission = signedPermission;
  }


  public ServiceSasParameters signedProtocol(SignedProtocolEnum signedProtocol) {
    this.signedProtocol = signedProtocol;
    return this;
  }

  /**
   * The protocol permitted for a request made with the account SAS.
   * @return signedProtocol
   */
  @javax.annotation.Nullable
  public SignedProtocolEnum getSignedProtocol() {
    return signedProtocol;
  }

  public void setSignedProtocol(SignedProtocolEnum signedProtocol) {
    this.signedProtocol = signedProtocol;
  }


  public ServiceSasParameters signedResource(SignedResourceEnum signedResource) {
    this.signedResource = signedResource;
    return this;
  }

  /**
   * The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).
   * @return signedResource
   */
  @javax.annotation.Nonnull
  public SignedResourceEnum getSignedResource() {
    return signedResource;
  }

  public void setSignedResource(SignedResourceEnum signedResource) {
    this.signedResource = signedResource;
  }


  public ServiceSasParameters signedStart(OffsetDateTime signedStart) {
    this.signedStart = signedStart;
    return this;
  }

  /**
   * The time at which the SAS becomes valid.
   * @return signedStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSignedStart() {
    return signedStart;
  }

  public void setSignedStart(OffsetDateTime signedStart) {
    this.signedStart = signedStart;
  }


  public ServiceSasParameters startPk(String startPk) {
    this.startPk = startPk;
    return this;
  }

  /**
   * The start of partition key.
   * @return startPk
   */
  @javax.annotation.Nullable
  public String getStartPk() {
    return startPk;
  }

  public void setStartPk(String startPk) {
    this.startPk = startPk;
  }


  public ServiceSasParameters startRk(String startRk) {
    this.startRk = startRk;
    return this;
  }

  /**
   * The start of row key.
   * @return startRk
   */
  @javax.annotation.Nullable
  public String getStartRk() {
    return startRk;
  }

  public void setStartRk(String startRk) {
    this.startRk = startRk;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceSasParameters serviceSasParameters = (ServiceSasParameters) o;
    return Objects.equals(this.canonicalizedResource, serviceSasParameters.canonicalizedResource) &&
        Objects.equals(this.endPk, serviceSasParameters.endPk) &&
        Objects.equals(this.endRk, serviceSasParameters.endRk) &&
        Objects.equals(this.keyToSign, serviceSasParameters.keyToSign) &&
        Objects.equals(this.rscc, serviceSasParameters.rscc) &&
        Objects.equals(this.rscd, serviceSasParameters.rscd) &&
        Objects.equals(this.rsce, serviceSasParameters.rsce) &&
        Objects.equals(this.rscl, serviceSasParameters.rscl) &&
        Objects.equals(this.rsct, serviceSasParameters.rsct) &&
        Objects.equals(this.signedExpiry, serviceSasParameters.signedExpiry) &&
        Objects.equals(this.signedIdentifier, serviceSasParameters.signedIdentifier) &&
        Objects.equals(this.signedIp, serviceSasParameters.signedIp) &&
        Objects.equals(this.signedPermission, serviceSasParameters.signedPermission) &&
        Objects.equals(this.signedProtocol, serviceSasParameters.signedProtocol) &&
        Objects.equals(this.signedResource, serviceSasParameters.signedResource) &&
        Objects.equals(this.signedStart, serviceSasParameters.signedStart) &&
        Objects.equals(this.startPk, serviceSasParameters.startPk) &&
        Objects.equals(this.startRk, serviceSasParameters.startRk);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canonicalizedResource, endPk, endRk, keyToSign, rscc, rscd, rsce, rscl, rsct, signedExpiry, signedIdentifier, signedIp, signedPermission, signedProtocol, signedResource, signedStart, startPk, startRk);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceSasParameters {\n");
    sb.append("    canonicalizedResource: ").append(toIndentedString(canonicalizedResource)).append("\n");
    sb.append("    endPk: ").append(toIndentedString(endPk)).append("\n");
    sb.append("    endRk: ").append(toIndentedString(endRk)).append("\n");
    sb.append("    keyToSign: ").append(toIndentedString(keyToSign)).append("\n");
    sb.append("    rscc: ").append(toIndentedString(rscc)).append("\n");
    sb.append("    rscd: ").append(toIndentedString(rscd)).append("\n");
    sb.append("    rsce: ").append(toIndentedString(rsce)).append("\n");
    sb.append("    rscl: ").append(toIndentedString(rscl)).append("\n");
    sb.append("    rsct: ").append(toIndentedString(rsct)).append("\n");
    sb.append("    signedExpiry: ").append(toIndentedString(signedExpiry)).append("\n");
    sb.append("    signedIdentifier: ").append(toIndentedString(signedIdentifier)).append("\n");
    sb.append("    signedIp: ").append(toIndentedString(signedIp)).append("\n");
    sb.append("    signedPermission: ").append(toIndentedString(signedPermission)).append("\n");
    sb.append("    signedProtocol: ").append(toIndentedString(signedProtocol)).append("\n");
    sb.append("    signedResource: ").append(toIndentedString(signedResource)).append("\n");
    sb.append("    signedStart: ").append(toIndentedString(signedStart)).append("\n");
    sb.append("    startPk: ").append(toIndentedString(startPk)).append("\n");
    sb.append("    startRk: ").append(toIndentedString(startRk)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canonicalizedResource");
    openapiFields.add("endPk");
    openapiFields.add("endRk");
    openapiFields.add("keyToSign");
    openapiFields.add("rscc");
    openapiFields.add("rscd");
    openapiFields.add("rsce");
    openapiFields.add("rscl");
    openapiFields.add("rsct");
    openapiFields.add("signedExpiry");
    openapiFields.add("signedIdentifier");
    openapiFields.add("signedIp");
    openapiFields.add("signedPermission");
    openapiFields.add("signedProtocol");
    openapiFields.add("signedResource");
    openapiFields.add("signedStart");
    openapiFields.add("startPk");
    openapiFields.add("startRk");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("canonicalizedResource");
    openapiRequiredFields.add("signedResource");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceSasParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceSasParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceSasParameters is not found in the empty JSON string", ServiceSasParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceSasParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceSasParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceSasParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("canonicalizedResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonicalizedResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonicalizedResource").toString()));
      }
      if ((jsonObj.get("endPk") != null && !jsonObj.get("endPk").isJsonNull()) && !jsonObj.get("endPk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endPk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endPk").toString()));
      }
      if ((jsonObj.get("endRk") != null && !jsonObj.get("endRk").isJsonNull()) && !jsonObj.get("endRk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endRk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endRk").toString()));
      }
      if ((jsonObj.get("keyToSign") != null && !jsonObj.get("keyToSign").isJsonNull()) && !jsonObj.get("keyToSign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyToSign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyToSign").toString()));
      }
      if ((jsonObj.get("rscc") != null && !jsonObj.get("rscc").isJsonNull()) && !jsonObj.get("rscc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rscc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rscc").toString()));
      }
      if ((jsonObj.get("rscd") != null && !jsonObj.get("rscd").isJsonNull()) && !jsonObj.get("rscd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rscd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rscd").toString()));
      }
      if ((jsonObj.get("rsce") != null && !jsonObj.get("rsce").isJsonNull()) && !jsonObj.get("rsce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rsce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rsce").toString()));
      }
      if ((jsonObj.get("rscl") != null && !jsonObj.get("rscl").isJsonNull()) && !jsonObj.get("rscl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rscl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rscl").toString()));
      }
      if ((jsonObj.get("rsct") != null && !jsonObj.get("rsct").isJsonNull()) && !jsonObj.get("rsct").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rsct` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rsct").toString()));
      }
      if ((jsonObj.get("signedIdentifier") != null && !jsonObj.get("signedIdentifier").isJsonNull()) && !jsonObj.get("signedIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedIdentifier").toString()));
      }
      if ((jsonObj.get("signedIp") != null && !jsonObj.get("signedIp").isJsonNull()) && !jsonObj.get("signedIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedIp").toString()));
      }
      if ((jsonObj.get("signedPermission") != null && !jsonObj.get("signedPermission").isJsonNull()) && !jsonObj.get("signedPermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedPermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedPermission").toString()));
      }
      // validate the optional field `signedPermission`
      if (jsonObj.get("signedPermission") != null && !jsonObj.get("signedPermission").isJsonNull()) {
        SignedPermissionEnum.validateJsonElement(jsonObj.get("signedPermission"));
      }
      if ((jsonObj.get("signedProtocol") != null && !jsonObj.get("signedProtocol").isJsonNull()) && !jsonObj.get("signedProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedProtocol").toString()));
      }
      // validate the optional field `signedProtocol`
      if (jsonObj.get("signedProtocol") != null && !jsonObj.get("signedProtocol").isJsonNull()) {
        SignedProtocolEnum.validateJsonElement(jsonObj.get("signedProtocol"));
      }
      if (!jsonObj.get("signedResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedResource").toString()));
      }
      // validate the required field `signedResource`
      SignedResourceEnum.validateJsonElement(jsonObj.get("signedResource"));
      if ((jsonObj.get("startPk") != null && !jsonObj.get("startPk").isJsonNull()) && !jsonObj.get("startPk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startPk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startPk").toString()));
      }
      if ((jsonObj.get("startRk") != null && !jsonObj.get("startRk").isJsonNull()) && !jsonObj.get("startRk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startRk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startRk").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceSasParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceSasParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceSasParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceSasParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceSasParameters>() {
           @Override
           public void write(JsonWriter out, ServiceSasParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceSasParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceSasParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceSasParameters
   * @throws IOException if the JSON string is invalid with respect to ServiceSasParameters
   */
  public static ServiceSasParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceSasParameters.class);
  }

  /**
   * Convert an instance of ServiceSasParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

