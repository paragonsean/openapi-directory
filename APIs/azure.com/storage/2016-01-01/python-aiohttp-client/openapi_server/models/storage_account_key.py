# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageAccountKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_name: str=None, permissions: str=None, value: str=None):
        """StorageAccountKey - a model defined in OpenAPI

        :param key_name: The key_name of this StorageAccountKey.
        :param permissions: The permissions of this StorageAccountKey.
        :param value: The value of this StorageAccountKey.
        """
        self.openapi_types = {
            'key_name': str,
            'permissions': str,
            'value': str
        }

        self.attribute_map = {
            'key_name': 'keyName',
            'permissions': 'permissions',
            'value': 'value'
        }

        self._key_name = key_name
        self._permissions = permissions
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountKey of this StorageAccountKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_name(self):
        """Gets the key_name of this StorageAccountKey.

        Name of the key.

        :return: The key_name of this StorageAccountKey.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this StorageAccountKey.

        Name of the key.

        :param key_name: The key_name of this StorageAccountKey.
        :type key_name: str
        """

        self._key_name = key_name

    @property
    def permissions(self):
        """Gets the permissions of this StorageAccountKey.

        Permissions for the key -- read-only or full permissions.

        :return: The permissions of this StorageAccountKey.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this StorageAccountKey.

        Permissions for the key -- read-only or full permissions.

        :param permissions: The permissions of this StorageAccountKey.
        :type permissions: str
        """
        allowed_values = ["READ", "FULL"]  # noqa: E501
        if permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"
                .format(permissions, allowed_values)
            )

        self._permissions = permissions

    @property
    def value(self):
        """Gets the value of this StorageAccountKey.

        Base 64-encoded value of the key.

        :return: The value of this StorageAccountKey.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this StorageAccountKey.

        Base 64-encoded value of the key.

        :param value: The value of this StorageAccountKey.
        :type value: str
        """

        self._value = value
