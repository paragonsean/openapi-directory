# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckNameAvailabilityResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, name_available: bool=None, reason: str=None):
        """CheckNameAvailabilityResult - a model defined in OpenAPI

        :param message: The message of this CheckNameAvailabilityResult.
        :param name_available: The name_available of this CheckNameAvailabilityResult.
        :param reason: The reason of this CheckNameAvailabilityResult.
        """
        self.openapi_types = {
            'message': str,
            'name_available': bool,
            'reason': str
        }

        self.attribute_map = {
            'message': 'message',
            'name_available': 'nameAvailable',
            'reason': 'reason'
        }

        self._message = message
        self._name_available = name_available
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckNameAvailabilityResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckNameAvailabilityResult of this CheckNameAvailabilityResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this CheckNameAvailabilityResult.

        The error message explaining the Reason value in more detail.

        :return: The message of this CheckNameAvailabilityResult.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CheckNameAvailabilityResult.

        The error message explaining the Reason value in more detail.

        :param message: The message of this CheckNameAvailabilityResult.
        :type message: str
        """

        self._message = message

    @property
    def name_available(self):
        """Gets the name_available of this CheckNameAvailabilityResult.

        Boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.

        :return: The name_available of this CheckNameAvailabilityResult.
        :rtype: bool
        """
        return self._name_available

    @name_available.setter
    def name_available(self, name_available):
        """Sets the name_available of this CheckNameAvailabilityResult.

        Boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used.

        :param name_available: The name_available of this CheckNameAvailabilityResult.
        :type name_available: bool
        """

        self._name_available = name_available

    @property
    def reason(self):
        """Gets the reason of this CheckNameAvailabilityResult.

        The reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.

        :return: The reason of this CheckNameAvailabilityResult.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CheckNameAvailabilityResult.

        The reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.

        :param reason: The reason of this CheckNameAvailabilityResult.
        :type reason: str
        """
        allowed_values = ["AccountNameInvalid", "AlreadyExists"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
