/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VirtualNetworkRule model module.
 * @module model/VirtualNetworkRule
 * @version 2018-11-01
 */
class VirtualNetworkRule {
    /**
     * Constructs a new <code>VirtualNetworkRule</code>.
     * Virtual Network rule.
     * @alias module:model/VirtualNetworkRule
     * @param id {String} Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
     */
    constructor(id) { 
        
        VirtualNetworkRule.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['action'] = 'Allow';
        obj['id'] = id;
    }

    /**
     * Constructs a <code>VirtualNetworkRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualNetworkRule} obj Optional instance to populate.
     * @return {module:model/VirtualNetworkRule} The populated <code>VirtualNetworkRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualNetworkRule();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualNetworkRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualNetworkRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualNetworkRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

VirtualNetworkRule.RequiredProperties = ["id"];

/**
 * The action of virtual network rule.
 * @member {module:model/VirtualNetworkRule.ActionEnum} action
 * @default 'Allow'
 */
VirtualNetworkRule.prototype['action'] = 'Allow';

/**
 * Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
 * @member {String} id
 */
VirtualNetworkRule.prototype['id'] = undefined;

/**
 * Gets the state of virtual network rule.
 * @member {module:model/VirtualNetworkRule.StateEnum} state
 */
VirtualNetworkRule.prototype['state'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
VirtualNetworkRule['ActionEnum'] = {

    /**
     * value: "Allow"
     * @const
     */
    "Allow": "Allow"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
VirtualNetworkRule['StateEnum'] = {

    /**
     * value: "provisioning"
     * @const
     */
    "provisioning": "provisioning",

    /**
     * value: "deprovisioning"
     * @const
     */
    "deprovisioning": "deprovisioning",

    /**
     * value: "succeeded"
     * @const
     */
    "succeeded": "succeeded",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "networkSourceDeleted"
     * @const
     */
    "networkSourceDeleted": "networkSourceDeleted"
};



export default VirtualNetworkRule;

