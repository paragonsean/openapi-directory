/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagementPolicyFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagementPolicyFilter::OAIManagementPolicyFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagementPolicyFilter::OAIManagementPolicyFilter() {
    this->initializeModel();
}

OAIManagementPolicyFilter::~OAIManagementPolicyFilter() {}

void OAIManagementPolicyFilter::initializeModel() {

    m_blob_types_isSet = false;
    m_blob_types_isValid = false;

    m_prefix_match_isSet = false;
    m_prefix_match_isValid = false;
}

void OAIManagementPolicyFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagementPolicyFilter::fromJsonObject(QJsonObject json) {

    m_blob_types_isValid = ::OpenAPI::fromJsonValue(m_blob_types, json[QString("blobTypes")]);
    m_blob_types_isSet = !json[QString("blobTypes")].isNull() && m_blob_types_isValid;

    m_prefix_match_isValid = ::OpenAPI::fromJsonValue(m_prefix_match, json[QString("prefixMatch")]);
    m_prefix_match_isSet = !json[QString("prefixMatch")].isNull() && m_prefix_match_isValid;
}

QString OAIManagementPolicyFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagementPolicyFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_types.size() > 0) {
        obj.insert(QString("blobTypes"), ::OpenAPI::toJsonValue(m_blob_types));
    }
    if (m_prefix_match.size() > 0) {
        obj.insert(QString("prefixMatch"), ::OpenAPI::toJsonValue(m_prefix_match));
    }
    return obj;
}

QList<QString> OAIManagementPolicyFilter::getBlobTypes() const {
    return m_blob_types;
}
void OAIManagementPolicyFilter::setBlobTypes(const QList<QString> &blob_types) {
    m_blob_types = blob_types;
    m_blob_types_isSet = true;
}

bool OAIManagementPolicyFilter::is_blob_types_Set() const{
    return m_blob_types_isSet;
}

bool OAIManagementPolicyFilter::is_blob_types_Valid() const{
    return m_blob_types_isValid;
}

QList<QString> OAIManagementPolicyFilter::getPrefixMatch() const {
    return m_prefix_match;
}
void OAIManagementPolicyFilter::setPrefixMatch(const QList<QString> &prefix_match) {
    m_prefix_match = prefix_match;
    m_prefix_match_isSet = true;
}

bool OAIManagementPolicyFilter::is_prefix_match_Set() const{
    return m_prefix_match_isSet;
}

bool OAIManagementPolicyFilter::is_prefix_match_Valid() const{
    return m_prefix_match_isValid;
}

bool OAIManagementPolicyFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_match.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagementPolicyFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_blob_types_isValid && true;
}

} // namespace OpenAPI
