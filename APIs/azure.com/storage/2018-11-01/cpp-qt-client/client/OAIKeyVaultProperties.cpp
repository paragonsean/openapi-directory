/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyVaultProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyVaultProperties::OAIKeyVaultProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyVaultProperties::OAIKeyVaultProperties() {
    this->initializeModel();
}

OAIKeyVaultProperties::~OAIKeyVaultProperties() {}

void OAIKeyVaultProperties::initializeModel() {

    m_keyname_isSet = false;
    m_keyname_isValid = false;

    m_keyvaulturi_isSet = false;
    m_keyvaulturi_isValid = false;

    m_keyversion_isSet = false;
    m_keyversion_isValid = false;
}

void OAIKeyVaultProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyVaultProperties::fromJsonObject(QJsonObject json) {

    m_keyname_isValid = ::OpenAPI::fromJsonValue(m_keyname, json[QString("keyname")]);
    m_keyname_isSet = !json[QString("keyname")].isNull() && m_keyname_isValid;

    m_keyvaulturi_isValid = ::OpenAPI::fromJsonValue(m_keyvaulturi, json[QString("keyvaulturi")]);
    m_keyvaulturi_isSet = !json[QString("keyvaulturi")].isNull() && m_keyvaulturi_isValid;

    m_keyversion_isValid = ::OpenAPI::fromJsonValue(m_keyversion, json[QString("keyversion")]);
    m_keyversion_isSet = !json[QString("keyversion")].isNull() && m_keyversion_isValid;
}

QString OAIKeyVaultProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyVaultProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_keyname_isSet) {
        obj.insert(QString("keyname"), ::OpenAPI::toJsonValue(m_keyname));
    }
    if (m_keyvaulturi_isSet) {
        obj.insert(QString("keyvaulturi"), ::OpenAPI::toJsonValue(m_keyvaulturi));
    }
    if (m_keyversion_isSet) {
        obj.insert(QString("keyversion"), ::OpenAPI::toJsonValue(m_keyversion));
    }
    return obj;
}

QString OAIKeyVaultProperties::getKeyname() const {
    return m_keyname;
}
void OAIKeyVaultProperties::setKeyname(const QString &keyname) {
    m_keyname = keyname;
    m_keyname_isSet = true;
}

bool OAIKeyVaultProperties::is_keyname_Set() const{
    return m_keyname_isSet;
}

bool OAIKeyVaultProperties::is_keyname_Valid() const{
    return m_keyname_isValid;
}

QString OAIKeyVaultProperties::getKeyvaulturi() const {
    return m_keyvaulturi;
}
void OAIKeyVaultProperties::setKeyvaulturi(const QString &keyvaulturi) {
    m_keyvaulturi = keyvaulturi;
    m_keyvaulturi_isSet = true;
}

bool OAIKeyVaultProperties::is_keyvaulturi_Set() const{
    return m_keyvaulturi_isSet;
}

bool OAIKeyVaultProperties::is_keyvaulturi_Valid() const{
    return m_keyvaulturi_isValid;
}

QString OAIKeyVaultProperties::getKeyversion() const {
    return m_keyversion;
}
void OAIKeyVaultProperties::setKeyversion(const QString &keyversion) {
    m_keyversion = keyversion;
    m_keyversion_isSet = true;
}

bool OAIKeyVaultProperties::is_keyversion_Set() const{
    return m_keyversion_isSet;
}

bool OAIKeyVaultProperties::is_keyversion_Valid() const{
    return m_keyversion_isValid;
}

bool OAIKeyVaultProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyvaulturi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyversion_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyVaultProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
