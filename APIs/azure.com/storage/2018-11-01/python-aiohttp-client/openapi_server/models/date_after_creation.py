# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DateAfterCreation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, days_after_creation_greater_than: int=None):
        """DateAfterCreation - a model defined in OpenAPI

        :param days_after_creation_greater_than: The days_after_creation_greater_than of this DateAfterCreation.
        """
        self.openapi_types = {
            'days_after_creation_greater_than': int
        }

        self.attribute_map = {
            'days_after_creation_greater_than': 'daysAfterCreationGreaterThan'
        }

        self._days_after_creation_greater_than = days_after_creation_greater_than

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateAfterCreation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateAfterCreation of this DateAfterCreation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def days_after_creation_greater_than(self):
        """Gets the days_after_creation_greater_than of this DateAfterCreation.

        Integer value indicating the age in days after creation

        :return: The days_after_creation_greater_than of this DateAfterCreation.
        :rtype: int
        """
        return self._days_after_creation_greater_than

    @days_after_creation_greater_than.setter
    def days_after_creation_greater_than(self, days_after_creation_greater_than):
        """Sets the days_after_creation_greater_than of this DateAfterCreation.

        Integer value indicating the age in days after creation

        :param days_after_creation_greater_than: The days_after_creation_greater_than of this DateAfterCreation.
        :type days_after_creation_greater_than: int
        """
        if days_after_creation_greater_than is None:
            raise ValueError("Invalid value for `days_after_creation_greater_than`, must not be `None`")
        if days_after_creation_greater_than is not None and days_after_creation_greater_than < 0:
            raise ValueError("Invalid value for `days_after_creation_greater_than`, must be a value greater than or equal to `0`")

        self._days_after_creation_greater_than = days_after_creation_greater_than
