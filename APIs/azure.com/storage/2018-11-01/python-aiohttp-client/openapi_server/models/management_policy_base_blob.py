# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_after_modification import DateAfterModification
from openapi_server import util


class ManagementPolicyBaseBlob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete: DateAfterModification=None, tier_to_archive: DateAfterModification=None, tier_to_cool: DateAfterModification=None):
        """ManagementPolicyBaseBlob - a model defined in OpenAPI

        :param delete: The delete of this ManagementPolicyBaseBlob.
        :param tier_to_archive: The tier_to_archive of this ManagementPolicyBaseBlob.
        :param tier_to_cool: The tier_to_cool of this ManagementPolicyBaseBlob.
        """
        self.openapi_types = {
            'delete': DateAfterModification,
            'tier_to_archive': DateAfterModification,
            'tier_to_cool': DateAfterModification
        }

        self.attribute_map = {
            'delete': 'delete',
            'tier_to_archive': 'tierToArchive',
            'tier_to_cool': 'tierToCool'
        }

        self._delete = delete
        self._tier_to_archive = tier_to_archive
        self._tier_to_cool = tier_to_cool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagementPolicyBaseBlob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagementPolicyBaseBlob of this ManagementPolicyBaseBlob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete(self):
        """Gets the delete of this ManagementPolicyBaseBlob.


        :return: The delete of this ManagementPolicyBaseBlob.
        :rtype: DateAfterModification
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this ManagementPolicyBaseBlob.


        :param delete: The delete of this ManagementPolicyBaseBlob.
        :type delete: DateAfterModification
        """

        self._delete = delete

    @property
    def tier_to_archive(self):
        """Gets the tier_to_archive of this ManagementPolicyBaseBlob.


        :return: The tier_to_archive of this ManagementPolicyBaseBlob.
        :rtype: DateAfterModification
        """
        return self._tier_to_archive

    @tier_to_archive.setter
    def tier_to_archive(self, tier_to_archive):
        """Sets the tier_to_archive of this ManagementPolicyBaseBlob.


        :param tier_to_archive: The tier_to_archive of this ManagementPolicyBaseBlob.
        :type tier_to_archive: DateAfterModification
        """

        self._tier_to_archive = tier_to_archive

    @property
    def tier_to_cool(self):
        """Gets the tier_to_cool of this ManagementPolicyBaseBlob.


        :return: The tier_to_cool of this ManagementPolicyBaseBlob.
        :rtype: DateAfterModification
        """
        return self._tier_to_cool

    @tier_to_cool.setter
    def tier_to_cool(self, tier_to_cool):
        """Sets the tier_to_cool of this ManagementPolicyBaseBlob.


        :param tier_to_cool: The tier_to_cool of this ManagementPolicyBaseBlob.
        :type tier_to_cool: DateAfterModification
        """

        self._tier_to_cool = tier_to_cool
