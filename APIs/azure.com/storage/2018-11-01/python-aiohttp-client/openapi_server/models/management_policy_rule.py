# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.management_policy_definition import ManagementPolicyDefinition
from openapi_server import util


class ManagementPolicyRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, definition: ManagementPolicyDefinition=None, enabled: bool=None, name: str=None, type: str=None):
        """ManagementPolicyRule - a model defined in OpenAPI

        :param definition: The definition of this ManagementPolicyRule.
        :param enabled: The enabled of this ManagementPolicyRule.
        :param name: The name of this ManagementPolicyRule.
        :param type: The type of this ManagementPolicyRule.
        """
        self.openapi_types = {
            'definition': ManagementPolicyDefinition,
            'enabled': bool,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'definition': 'definition',
            'enabled': 'enabled',
            'name': 'name',
            'type': 'type'
        }

        self._definition = definition
        self._enabled = enabled
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagementPolicyRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagementPolicyRule of this ManagementPolicyRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def definition(self):
        """Gets the definition of this ManagementPolicyRule.


        :return: The definition of this ManagementPolicyRule.
        :rtype: ManagementPolicyDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this ManagementPolicyRule.


        :param definition: The definition of this ManagementPolicyRule.
        :type definition: ManagementPolicyDefinition
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def enabled(self):
        """Gets the enabled of this ManagementPolicyRule.

        Rule is enabled if set to true.

        :return: The enabled of this ManagementPolicyRule.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ManagementPolicyRule.

        Rule is enabled if set to true.

        :param enabled: The enabled of this ManagementPolicyRule.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this ManagementPolicyRule.

        A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.

        :return: The name of this ManagementPolicyRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManagementPolicyRule.

        A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.

        :param name: The name of this ManagementPolicyRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this ManagementPolicyRule.

        The valid value is Lifecycle

        :return: The type of this ManagementPolicyRule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ManagementPolicyRule.

        The valid value is Lifecycle

        :param type: The type of this ManagementPolicyRule.
        :type type: str
        """
        allowed_values = ["Lifecycle"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
