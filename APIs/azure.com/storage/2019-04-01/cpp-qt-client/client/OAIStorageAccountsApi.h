/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStorageAccountsApi_H
#define OAI_OAIStorageAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountSasParameters.h"
#include "OAICheckNameAvailabilityResult.h"
#include "OAIListAccountSasResponse.h"
#include "OAIListServiceSasResponse.h"
#include "OAIServiceSasParameters.h"
#include "OAIStorageAccount.h"
#include "OAIStorageAccountCheckNameAvailabilityParameters.h"
#include "OAIStorageAccountCreateParameters.h"
#include "OAIStorageAccountListKeysResult.h"
#include "OAIStorageAccountListResult.h"
#include "OAIStorageAccountRegenerateKeyParameters.h"
#include "OAIStorageAccountUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStorageAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIStorageAccountsApi(const int timeOut = 0);
    ~OAIStorageAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  account_name OAIStorageAccountCheckNameAvailabilityParameters [required]
    */
    virtual void storageAccountsCheckNameAvailability(const QString &api_version, const QString &subscription_id, const OAIStorageAccountCheckNameAvailabilityParameters &account_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIStorageAccountCreateParameters [required]
    */
    virtual void storageAccountsCreate(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id, const OAIStorageAccountCreateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void storageAccountsDelete(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void storageAccountsFailover(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void storageAccountsGetProperties(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void storageAccountsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAccountSasParameters [required]
    */
    virtual void storageAccountsListAccountSAS(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id, const OAIAccountSasParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void storageAccountsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void storageAccountsListKeys(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIServiceSasParameters [required]
    */
    virtual void storageAccountsListServiceSAS(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id, const OAIServiceSasParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  regenerate_key OAIStorageAccountRegenerateKeyParameters [required]
    */
    virtual void storageAccountsRegenerateKey(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id, const OAIStorageAccountRegenerateKeyParameters &regenerate_key);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void storageAccountsRevokeUserDelegationKeys(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIStorageAccountUpdateParameters [required]
    */
    virtual void storageAccountsUpdate(const QString &resource_group_name, const QString &account_name, const QString &api_version, const QString &subscription_id, const OAIStorageAccountUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void storageAccountsCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void storageAccountsCreateCallback(OAIHttpRequestWorker *worker);
    void storageAccountsDeleteCallback(OAIHttpRequestWorker *worker);
    void storageAccountsFailoverCallback(OAIHttpRequestWorker *worker);
    void storageAccountsGetPropertiesCallback(OAIHttpRequestWorker *worker);
    void storageAccountsListCallback(OAIHttpRequestWorker *worker);
    void storageAccountsListAccountSASCallback(OAIHttpRequestWorker *worker);
    void storageAccountsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void storageAccountsListKeysCallback(OAIHttpRequestWorker *worker);
    void storageAccountsListServiceSASCallback(OAIHttpRequestWorker *worker);
    void storageAccountsRegenerateKeyCallback(OAIHttpRequestWorker *worker);
    void storageAccountsRevokeUserDelegationKeysCallback(OAIHttpRequestWorker *worker);
    void storageAccountsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void storageAccountsCheckNameAvailabilitySignal(OAICheckNameAvailabilityResult summary);
    void storageAccountsCreateSignal(OAIStorageAccount summary);
    void storageAccountsDeleteSignal();
    void storageAccountsFailoverSignal();
    void storageAccountsGetPropertiesSignal(OAIStorageAccount summary);
    void storageAccountsListSignal(OAIStorageAccountListResult summary);
    void storageAccountsListAccountSASSignal(OAIListAccountSasResponse summary);
    void storageAccountsListByResourceGroupSignal(OAIStorageAccountListResult summary);
    void storageAccountsListKeysSignal(OAIStorageAccountListKeysResult summary);
    void storageAccountsListServiceSASSignal(OAIListServiceSasResponse summary);
    void storageAccountsRegenerateKeySignal(OAIStorageAccountListKeysResult summary);
    void storageAccountsRevokeUserDelegationKeysSignal();
    void storageAccountsUpdateSignal(OAIStorageAccount summary);


    void storageAccountsCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckNameAvailabilityResult summary);
    void storageAccountsCreateSignalFull(OAIHttpRequestWorker *worker, OAIStorageAccount summary);
    void storageAccountsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void storageAccountsFailoverSignalFull(OAIHttpRequestWorker *worker);
    void storageAccountsGetPropertiesSignalFull(OAIHttpRequestWorker *worker, OAIStorageAccount summary);
    void storageAccountsListSignalFull(OAIHttpRequestWorker *worker, OAIStorageAccountListResult summary);
    void storageAccountsListAccountSASSignalFull(OAIHttpRequestWorker *worker, OAIListAccountSasResponse summary);
    void storageAccountsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIStorageAccountListResult summary);
    void storageAccountsListKeysSignalFull(OAIHttpRequestWorker *worker, OAIStorageAccountListKeysResult summary);
    void storageAccountsListServiceSASSignalFull(OAIHttpRequestWorker *worker, OAIListServiceSasResponse summary);
    void storageAccountsRegenerateKeySignalFull(OAIHttpRequestWorker *worker, OAIStorageAccountListKeysResult summary);
    void storageAccountsRevokeUserDelegationKeysSignalFull(OAIHttpRequestWorker *worker);
    void storageAccountsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIStorageAccount summary);

    Q_DECL_DEPRECATED_X("Use storageAccountsCheckNameAvailabilitySignalError() instead")
    void storageAccountsCheckNameAvailabilitySignalE(OAICheckNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsCheckNameAvailabilitySignalError(OAICheckNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsCreateSignalError() instead")
    void storageAccountsCreateSignalE(OAIStorageAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsCreateSignalError(OAIStorageAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsDeleteSignalError() instead")
    void storageAccountsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsFailoverSignalError() instead")
    void storageAccountsFailoverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsFailoverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsGetPropertiesSignalError() instead")
    void storageAccountsGetPropertiesSignalE(OAIStorageAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsGetPropertiesSignalError(OAIStorageAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsListSignalError() instead")
    void storageAccountsListSignalE(OAIStorageAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsListSignalError(OAIStorageAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsListAccountSASSignalError() instead")
    void storageAccountsListAccountSASSignalE(OAIListAccountSasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsListAccountSASSignalError(OAIListAccountSasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsListByResourceGroupSignalError() instead")
    void storageAccountsListByResourceGroupSignalE(OAIStorageAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsListByResourceGroupSignalError(OAIStorageAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsListKeysSignalError() instead")
    void storageAccountsListKeysSignalE(OAIStorageAccountListKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsListKeysSignalError(OAIStorageAccountListKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsListServiceSASSignalError() instead")
    void storageAccountsListServiceSASSignalE(OAIListServiceSasResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsListServiceSASSignalError(OAIListServiceSasResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsRegenerateKeySignalError() instead")
    void storageAccountsRegenerateKeySignalE(OAIStorageAccountListKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsRegenerateKeySignalError(OAIStorageAccountListKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsRevokeUserDelegationKeysSignalError() instead")
    void storageAccountsRevokeUserDelegationKeysSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsRevokeUserDelegationKeysSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsUpdateSignalError() instead")
    void storageAccountsUpdateSignalE(OAIStorageAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsUpdateSignalError(OAIStorageAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use storageAccountsCheckNameAvailabilitySignalErrorFull() instead")
    void storageAccountsCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsCreateSignalErrorFull() instead")
    void storageAccountsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsDeleteSignalErrorFull() instead")
    void storageAccountsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsFailoverSignalErrorFull() instead")
    void storageAccountsFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsGetPropertiesSignalErrorFull() instead")
    void storageAccountsGetPropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsGetPropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsListSignalErrorFull() instead")
    void storageAccountsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsListAccountSASSignalErrorFull() instead")
    void storageAccountsListAccountSASSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsListAccountSASSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsListByResourceGroupSignalErrorFull() instead")
    void storageAccountsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsListKeysSignalErrorFull() instead")
    void storageAccountsListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsListServiceSASSignalErrorFull() instead")
    void storageAccountsListServiceSASSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsListServiceSASSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsRegenerateKeySignalErrorFull() instead")
    void storageAccountsRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsRevokeUserDelegationKeysSignalErrorFull() instead")
    void storageAccountsRevokeUserDelegationKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsRevokeUserDelegationKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageAccountsUpdateSignalErrorFull() instead")
    void storageAccountsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageAccountsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
