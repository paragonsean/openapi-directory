# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptionService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, last_enabled_time: datetime=None):
        """EncryptionService - a model defined in OpenAPI

        :param enabled: The enabled of this EncryptionService.
        :param last_enabled_time: The last_enabled_time of this EncryptionService.
        """
        self.openapi_types = {
            'enabled': bool,
            'last_enabled_time': datetime
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'last_enabled_time': 'lastEnabledTime'
        }

        self._enabled = enabled
        self._last_enabled_time = last_enabled_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionService of this EncryptionService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this EncryptionService.

        A boolean indicating whether or not the service encrypts the data as it is stored.

        :return: The enabled of this EncryptionService.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EncryptionService.

        A boolean indicating whether or not the service encrypts the data as it is stored.

        :param enabled: The enabled of this EncryptionService.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def last_enabled_time(self):
        """Gets the last_enabled_time of this EncryptionService.

        Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.

        :return: The last_enabled_time of this EncryptionService.
        :rtype: datetime
        """
        return self._last_enabled_time

    @last_enabled_time.setter
    def last_enabled_time(self, last_enabled_time):
        """Sets the last_enabled_time of this EncryptionService.

        Gets a rough estimate of the date/time when the encryption was last enabled by the user. Only returned when encryption is enabled. There might be some unencrypted blobs which were written after this time, as it is just a rough estimate.

        :param last_enabled_time: The last_enabled_time of this EncryptionService.
        :type last_enabled_time: datetime
        """

        self._last_enabled_time = last_enabled_time
