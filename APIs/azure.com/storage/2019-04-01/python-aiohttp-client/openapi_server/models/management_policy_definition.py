# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.management_policy_action import ManagementPolicyAction
from openapi_server.models.management_policy_filter import ManagementPolicyFilter
from openapi_server import util


class ManagementPolicyDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: ManagementPolicyAction=None, filters: ManagementPolicyFilter=None):
        """ManagementPolicyDefinition - a model defined in OpenAPI

        :param actions: The actions of this ManagementPolicyDefinition.
        :param filters: The filters of this ManagementPolicyDefinition.
        """
        self.openapi_types = {
            'actions': ManagementPolicyAction,
            'filters': ManagementPolicyFilter
        }

        self.attribute_map = {
            'actions': 'actions',
            'filters': 'filters'
        }

        self._actions = actions
        self._filters = filters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagementPolicyDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagementPolicyDefinition of this ManagementPolicyDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this ManagementPolicyDefinition.


        :return: The actions of this ManagementPolicyDefinition.
        :rtype: ManagementPolicyAction
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ManagementPolicyDefinition.


        :param actions: The actions of this ManagementPolicyDefinition.
        :type actions: ManagementPolicyAction
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def filters(self):
        """Gets the filters of this ManagementPolicyDefinition.


        :return: The filters of this ManagementPolicyDefinition.
        :rtype: ManagementPolicyFilter
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ManagementPolicyDefinition.


        :param filters: The filters of this ManagementPolicyDefinition.
        :type filters: ManagementPolicyFilter
        """

        self._filters = filters
