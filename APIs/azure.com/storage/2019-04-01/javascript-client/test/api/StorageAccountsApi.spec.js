/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StorageManagementClient);
  }
}(this, function(expect, StorageManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StorageManagementClient.StorageAccountsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StorageAccountsApi', function() {
    describe('storageAccountsCheckNameAvailability', function() {
      it('should call storageAccountsCheckNameAvailability successfully', function(done) {
        //uncomment below and update the code to test storageAccountsCheckNameAvailability
        //instance.storageAccountsCheckNameAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsCreate', function() {
      it('should call storageAccountsCreate successfully', function(done) {
        //uncomment below and update the code to test storageAccountsCreate
        //instance.storageAccountsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsDelete', function() {
      it('should call storageAccountsDelete successfully', function(done) {
        //uncomment below and update the code to test storageAccountsDelete
        //instance.storageAccountsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsFailover', function() {
      it('should call storageAccountsFailover successfully', function(done) {
        //uncomment below and update the code to test storageAccountsFailover
        //instance.storageAccountsFailover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsGetProperties', function() {
      it('should call storageAccountsGetProperties successfully', function(done) {
        //uncomment below and update the code to test storageAccountsGetProperties
        //instance.storageAccountsGetProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsList', function() {
      it('should call storageAccountsList successfully', function(done) {
        //uncomment below and update the code to test storageAccountsList
        //instance.storageAccountsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsListAccountSAS', function() {
      it('should call storageAccountsListAccountSAS successfully', function(done) {
        //uncomment below and update the code to test storageAccountsListAccountSAS
        //instance.storageAccountsListAccountSAS(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsListByResourceGroup', function() {
      it('should call storageAccountsListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test storageAccountsListByResourceGroup
        //instance.storageAccountsListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsListKeys', function() {
      it('should call storageAccountsListKeys successfully', function(done) {
        //uncomment below and update the code to test storageAccountsListKeys
        //instance.storageAccountsListKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsListServiceSAS', function() {
      it('should call storageAccountsListServiceSAS successfully', function(done) {
        //uncomment below and update the code to test storageAccountsListServiceSAS
        //instance.storageAccountsListServiceSAS(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsRegenerateKey', function() {
      it('should call storageAccountsRegenerateKey successfully', function(done) {
        //uncomment below and update the code to test storageAccountsRegenerateKey
        //instance.storageAccountsRegenerateKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsRevokeUserDelegationKeys', function() {
      it('should call storageAccountsRevokeUserDelegationKeys successfully', function(done) {
        //uncomment below and update the code to test storageAccountsRevokeUserDelegationKeys
        //instance.storageAccountsRevokeUserDelegationKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageAccountsUpdate', function() {
      it('should call storageAccountsUpdate successfully', function(done) {
        //uncomment below and update the code to test storageAccountsUpdate
        //instance.storageAccountsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
