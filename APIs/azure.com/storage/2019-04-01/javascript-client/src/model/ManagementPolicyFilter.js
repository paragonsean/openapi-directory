/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ManagementPolicyFilter model module.
 * @module model/ManagementPolicyFilter
 * @version 2019-04-01
 */
class ManagementPolicyFilter {
    /**
     * Constructs a new <code>ManagementPolicyFilter</code>.
     * Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters. 
     * @alias module:model/ManagementPolicyFilter
     * @param blobTypes {Array.<String>} An array of predefined enum values. Only blockBlob is supported.
     */
    constructor(blobTypes) { 
        
        ManagementPolicyFilter.initialize(this, blobTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, blobTypes) { 
        obj['blobTypes'] = blobTypes;
    }

    /**
     * Constructs a <code>ManagementPolicyFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagementPolicyFilter} obj Optional instance to populate.
     * @return {module:model/ManagementPolicyFilter} The populated <code>ManagementPolicyFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagementPolicyFilter();

            if (data.hasOwnProperty('blobTypes')) {
                obj['blobTypes'] = ApiClient.convertToType(data['blobTypes'], ['String']);
            }
            if (data.hasOwnProperty('prefixMatch')) {
                obj['prefixMatch'] = ApiClient.convertToType(data['prefixMatch'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagementPolicyFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagementPolicyFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ManagementPolicyFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blobTypes'])) {
            throw new Error("Expected the field `blobTypes` to be an array in the JSON data but got " + data['blobTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['prefixMatch'])) {
            throw new Error("Expected the field `prefixMatch` to be an array in the JSON data but got " + data['prefixMatch']);
        }

        return true;
    }


}

ManagementPolicyFilter.RequiredProperties = ["blobTypes"];

/**
 * An array of predefined enum values. Only blockBlob is supported.
 * @member {Array.<String>} blobTypes
 */
ManagementPolicyFilter.prototype['blobTypes'] = undefined;

/**
 * An array of strings for prefixes to be match.
 * @member {Array.<String>} prefixMatch
 */
ManagementPolicyFilter.prototype['prefixMatch'] = undefined;






export default ManagementPolicyFilter;

