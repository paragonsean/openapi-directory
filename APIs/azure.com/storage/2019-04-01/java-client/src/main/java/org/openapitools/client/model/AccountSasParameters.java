/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters to list SAS credentials of a storage account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:46:28.684829-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountSasParameters {
  public static final String SERIALIZED_NAME_KEY_TO_SIGN = "keyToSign";
  @SerializedName(SERIALIZED_NAME_KEY_TO_SIGN)
  private String keyToSign;

  public static final String SERIALIZED_NAME_SIGNED_EXPIRY = "signedExpiry";
  @SerializedName(SERIALIZED_NAME_SIGNED_EXPIRY)
  private OffsetDateTime signedExpiry;

  public static final String SERIALIZED_NAME_SIGNED_IP = "signedIp";
  @SerializedName(SERIALIZED_NAME_SIGNED_IP)
  private String signedIp;

  /**
   * The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
   */
  @JsonAdapter(SignedPermissionEnum.Adapter.class)
  public enum SignedPermissionEnum {
    R("r"),
    
    D("d"),
    
    W("w"),
    
    L("l"),
    
    A("a"),
    
    C("c"),
    
    U("u"),
    
    P("p");

    private String value;

    SignedPermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignedPermissionEnum fromValue(String value) {
      for (SignedPermissionEnum b : SignedPermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignedPermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignedPermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignedPermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignedPermissionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignedPermissionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNED_PERMISSION = "signedPermission";
  @SerializedName(SERIALIZED_NAME_SIGNED_PERMISSION)
  private SignedPermissionEnum signedPermission;

  /**
   * The protocol permitted for a request made with the account SAS.
   */
  @JsonAdapter(SignedProtocolEnum.Adapter.class)
  public enum SignedProtocolEnum {
    HTTPS_HTTP("https,http"),
    
    HTTPS("https");

    private String value;

    SignedProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignedProtocolEnum fromValue(String value) {
      for (SignedProtocolEnum b : SignedProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignedProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignedProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignedProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignedProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignedProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNED_PROTOCOL = "signedProtocol";
  @SerializedName(SERIALIZED_NAME_SIGNED_PROTOCOL)
  private SignedProtocolEnum signedProtocol;

  /**
   * The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
   */
  @JsonAdapter(SignedResourceTypesEnum.Adapter.class)
  public enum SignedResourceTypesEnum {
    S("s"),
    
    C("c"),
    
    O("o");

    private String value;

    SignedResourceTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignedResourceTypesEnum fromValue(String value) {
      for (SignedResourceTypesEnum b : SignedResourceTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignedResourceTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignedResourceTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignedResourceTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignedResourceTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignedResourceTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNED_RESOURCE_TYPES = "signedResourceTypes";
  @SerializedName(SERIALIZED_NAME_SIGNED_RESOURCE_TYPES)
  private SignedResourceTypesEnum signedResourceTypes;

  /**
   * The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
   */
  @JsonAdapter(SignedServicesEnum.Adapter.class)
  public enum SignedServicesEnum {
    B("b"),
    
    Q("q"),
    
    T("t"),
    
    F("f");

    private String value;

    SignedServicesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignedServicesEnum fromValue(String value) {
      for (SignedServicesEnum b : SignedServicesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignedServicesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignedServicesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignedServicesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignedServicesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignedServicesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNED_SERVICES = "signedServices";
  @SerializedName(SERIALIZED_NAME_SIGNED_SERVICES)
  private SignedServicesEnum signedServices;

  public static final String SERIALIZED_NAME_SIGNED_START = "signedStart";
  @SerializedName(SERIALIZED_NAME_SIGNED_START)
  private OffsetDateTime signedStart;

  public AccountSasParameters() {
  }

  public AccountSasParameters keyToSign(String keyToSign) {
    this.keyToSign = keyToSign;
    return this;
  }

  /**
   * The key to sign the account SAS token with.
   * @return keyToSign
   */
  @javax.annotation.Nullable
  public String getKeyToSign() {
    return keyToSign;
  }

  public void setKeyToSign(String keyToSign) {
    this.keyToSign = keyToSign;
  }


  public AccountSasParameters signedExpiry(OffsetDateTime signedExpiry) {
    this.signedExpiry = signedExpiry;
    return this;
  }

  /**
   * The time at which the shared access signature becomes invalid.
   * @return signedExpiry
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getSignedExpiry() {
    return signedExpiry;
  }

  public void setSignedExpiry(OffsetDateTime signedExpiry) {
    this.signedExpiry = signedExpiry;
  }


  public AccountSasParameters signedIp(String signedIp) {
    this.signedIp = signedIp;
    return this;
  }

  /**
   * An IP address or a range of IP addresses from which to accept requests.
   * @return signedIp
   */
  @javax.annotation.Nullable
  public String getSignedIp() {
    return signedIp;
  }

  public void setSignedIp(String signedIp) {
    this.signedIp = signedIp;
  }


  public AccountSasParameters signedPermission(SignedPermissionEnum signedPermission) {
    this.signedPermission = signedPermission;
    return this;
  }

  /**
   * The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).
   * @return signedPermission
   */
  @javax.annotation.Nonnull
  public SignedPermissionEnum getSignedPermission() {
    return signedPermission;
  }

  public void setSignedPermission(SignedPermissionEnum signedPermission) {
    this.signedPermission = signedPermission;
  }


  public AccountSasParameters signedProtocol(SignedProtocolEnum signedProtocol) {
    this.signedProtocol = signedProtocol;
    return this;
  }

  /**
   * The protocol permitted for a request made with the account SAS.
   * @return signedProtocol
   */
  @javax.annotation.Nullable
  public SignedProtocolEnum getSignedProtocol() {
    return signedProtocol;
  }

  public void setSignedProtocol(SignedProtocolEnum signedProtocol) {
    this.signedProtocol = signedProtocol;
  }


  public AccountSasParameters signedResourceTypes(SignedResourceTypesEnum signedResourceTypes) {
    this.signedResourceTypes = signedResourceTypes;
    return this;
  }

  /**
   * The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
   * @return signedResourceTypes
   */
  @javax.annotation.Nonnull
  public SignedResourceTypesEnum getSignedResourceTypes() {
    return signedResourceTypes;
  }

  public void setSignedResourceTypes(SignedResourceTypesEnum signedResourceTypes) {
    this.signedResourceTypes = signedResourceTypes;
  }


  public AccountSasParameters signedServices(SignedServicesEnum signedServices) {
    this.signedServices = signedServices;
    return this;
  }

  /**
   * The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).
   * @return signedServices
   */
  @javax.annotation.Nonnull
  public SignedServicesEnum getSignedServices() {
    return signedServices;
  }

  public void setSignedServices(SignedServicesEnum signedServices) {
    this.signedServices = signedServices;
  }


  public AccountSasParameters signedStart(OffsetDateTime signedStart) {
    this.signedStart = signedStart;
    return this;
  }

  /**
   * The time at which the SAS becomes valid.
   * @return signedStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSignedStart() {
    return signedStart;
  }

  public void setSignedStart(OffsetDateTime signedStart) {
    this.signedStart = signedStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountSasParameters accountSasParameters = (AccountSasParameters) o;
    return Objects.equals(this.keyToSign, accountSasParameters.keyToSign) &&
        Objects.equals(this.signedExpiry, accountSasParameters.signedExpiry) &&
        Objects.equals(this.signedIp, accountSasParameters.signedIp) &&
        Objects.equals(this.signedPermission, accountSasParameters.signedPermission) &&
        Objects.equals(this.signedProtocol, accountSasParameters.signedProtocol) &&
        Objects.equals(this.signedResourceTypes, accountSasParameters.signedResourceTypes) &&
        Objects.equals(this.signedServices, accountSasParameters.signedServices) &&
        Objects.equals(this.signedStart, accountSasParameters.signedStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyToSign, signedExpiry, signedIp, signedPermission, signedProtocol, signedResourceTypes, signedServices, signedStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountSasParameters {\n");
    sb.append("    keyToSign: ").append(toIndentedString(keyToSign)).append("\n");
    sb.append("    signedExpiry: ").append(toIndentedString(signedExpiry)).append("\n");
    sb.append("    signedIp: ").append(toIndentedString(signedIp)).append("\n");
    sb.append("    signedPermission: ").append(toIndentedString(signedPermission)).append("\n");
    sb.append("    signedProtocol: ").append(toIndentedString(signedProtocol)).append("\n");
    sb.append("    signedResourceTypes: ").append(toIndentedString(signedResourceTypes)).append("\n");
    sb.append("    signedServices: ").append(toIndentedString(signedServices)).append("\n");
    sb.append("    signedStart: ").append(toIndentedString(signedStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyToSign");
    openapiFields.add("signedExpiry");
    openapiFields.add("signedIp");
    openapiFields.add("signedPermission");
    openapiFields.add("signedProtocol");
    openapiFields.add("signedResourceTypes");
    openapiFields.add("signedServices");
    openapiFields.add("signedStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("signedExpiry");
    openapiRequiredFields.add("signedPermission");
    openapiRequiredFields.add("signedResourceTypes");
    openapiRequiredFields.add("signedServices");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountSasParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountSasParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountSasParameters is not found in the empty JSON string", AccountSasParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountSasParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountSasParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountSasParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keyToSign") != null && !jsonObj.get("keyToSign").isJsonNull()) && !jsonObj.get("keyToSign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyToSign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyToSign").toString()));
      }
      if ((jsonObj.get("signedIp") != null && !jsonObj.get("signedIp").isJsonNull()) && !jsonObj.get("signedIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedIp").toString()));
      }
      if (!jsonObj.get("signedPermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedPermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedPermission").toString()));
      }
      // validate the required field `signedPermission`
      SignedPermissionEnum.validateJsonElement(jsonObj.get("signedPermission"));
      if ((jsonObj.get("signedProtocol") != null && !jsonObj.get("signedProtocol").isJsonNull()) && !jsonObj.get("signedProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedProtocol").toString()));
      }
      // validate the optional field `signedProtocol`
      if (jsonObj.get("signedProtocol") != null && !jsonObj.get("signedProtocol").isJsonNull()) {
        SignedProtocolEnum.validateJsonElement(jsonObj.get("signedProtocol"));
      }
      if (!jsonObj.get("signedResourceTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedResourceTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedResourceTypes").toString()));
      }
      // validate the required field `signedResourceTypes`
      SignedResourceTypesEnum.validateJsonElement(jsonObj.get("signedResourceTypes"));
      if (!jsonObj.get("signedServices").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signedServices` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signedServices").toString()));
      }
      // validate the required field `signedServices`
      SignedServicesEnum.validateJsonElement(jsonObj.get("signedServices"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountSasParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountSasParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountSasParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountSasParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountSasParameters>() {
           @Override
           public void write(JsonWriter out, AccountSasParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountSasParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountSasParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountSasParameters
   * @throws IOException if the JSON string is invalid with respect to AccountSasParameters
   */
  public static AccountSasParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountSasParameters.class);
  }

  /**
   * Convert an instance of AccountSasParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

