/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings properties for Active Directory (AD).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:46:28.684829-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActiveDirectoryProperties {
  public static final String SERIALIZED_NAME_AZURE_STORAGE_SID = "azureStorageSid";
  @SerializedName(SERIALIZED_NAME_AZURE_STORAGE_SID)
  private String azureStorageSid;

  public static final String SERIALIZED_NAME_DOMAIN_GUID = "domainGuid";
  @SerializedName(SERIALIZED_NAME_DOMAIN_GUID)
  private String domainGuid;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_DOMAIN_SID = "domainSid";
  @SerializedName(SERIALIZED_NAME_DOMAIN_SID)
  private String domainSid;

  public static final String SERIALIZED_NAME_FOREST_NAME = "forestName";
  @SerializedName(SERIALIZED_NAME_FOREST_NAME)
  private String forestName;

  public static final String SERIALIZED_NAME_NET_BIOS_DOMAIN_NAME = "netBiosDomainName";
  @SerializedName(SERIALIZED_NAME_NET_BIOS_DOMAIN_NAME)
  private String netBiosDomainName;

  public ActiveDirectoryProperties() {
  }

  public ActiveDirectoryProperties azureStorageSid(String azureStorageSid) {
    this.azureStorageSid = azureStorageSid;
    return this;
  }

  /**
   * Specifies the security identifier (SID) for Azure Storage.
   * @return azureStorageSid
   */
  @javax.annotation.Nonnull
  public String getAzureStorageSid() {
    return azureStorageSid;
  }

  public void setAzureStorageSid(String azureStorageSid) {
    this.azureStorageSid = azureStorageSid;
  }


  public ActiveDirectoryProperties domainGuid(String domainGuid) {
    this.domainGuid = domainGuid;
    return this;
  }

  /**
   * Specifies the domain GUID.
   * @return domainGuid
   */
  @javax.annotation.Nonnull
  public String getDomainGuid() {
    return domainGuid;
  }

  public void setDomainGuid(String domainGuid) {
    this.domainGuid = domainGuid;
  }


  public ActiveDirectoryProperties domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Specifies the primary domain that the AD DNS server is authoritative for.
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public ActiveDirectoryProperties domainSid(String domainSid) {
    this.domainSid = domainSid;
    return this;
  }

  /**
   * Specifies the security identifier (SID).
   * @return domainSid
   */
  @javax.annotation.Nonnull
  public String getDomainSid() {
    return domainSid;
  }

  public void setDomainSid(String domainSid) {
    this.domainSid = domainSid;
  }


  public ActiveDirectoryProperties forestName(String forestName) {
    this.forestName = forestName;
    return this;
  }

  /**
   * Specifies the Active Directory forest to get.
   * @return forestName
   */
  @javax.annotation.Nonnull
  public String getForestName() {
    return forestName;
  }

  public void setForestName(String forestName) {
    this.forestName = forestName;
  }


  public ActiveDirectoryProperties netBiosDomainName(String netBiosDomainName) {
    this.netBiosDomainName = netBiosDomainName;
    return this;
  }

  /**
   * Specifies the NetBIOS domain name.
   * @return netBiosDomainName
   */
  @javax.annotation.Nonnull
  public String getNetBiosDomainName() {
    return netBiosDomainName;
  }

  public void setNetBiosDomainName(String netBiosDomainName) {
    this.netBiosDomainName = netBiosDomainName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActiveDirectoryProperties activeDirectoryProperties = (ActiveDirectoryProperties) o;
    return Objects.equals(this.azureStorageSid, activeDirectoryProperties.azureStorageSid) &&
        Objects.equals(this.domainGuid, activeDirectoryProperties.domainGuid) &&
        Objects.equals(this.domainName, activeDirectoryProperties.domainName) &&
        Objects.equals(this.domainSid, activeDirectoryProperties.domainSid) &&
        Objects.equals(this.forestName, activeDirectoryProperties.forestName) &&
        Objects.equals(this.netBiosDomainName, activeDirectoryProperties.netBiosDomainName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureStorageSid, domainGuid, domainName, domainSid, forestName, netBiosDomainName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActiveDirectoryProperties {\n");
    sb.append("    azureStorageSid: ").append(toIndentedString(azureStorageSid)).append("\n");
    sb.append("    domainGuid: ").append(toIndentedString(domainGuid)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    domainSid: ").append(toIndentedString(domainSid)).append("\n");
    sb.append("    forestName: ").append(toIndentedString(forestName)).append("\n");
    sb.append("    netBiosDomainName: ").append(toIndentedString(netBiosDomainName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureStorageSid");
    openapiFields.add("domainGuid");
    openapiFields.add("domainName");
    openapiFields.add("domainSid");
    openapiFields.add("forestName");
    openapiFields.add("netBiosDomainName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("azureStorageSid");
    openapiRequiredFields.add("domainGuid");
    openapiRequiredFields.add("domainName");
    openapiRequiredFields.add("domainSid");
    openapiRequiredFields.add("forestName");
    openapiRequiredFields.add("netBiosDomainName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActiveDirectoryProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActiveDirectoryProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActiveDirectoryProperties is not found in the empty JSON string", ActiveDirectoryProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActiveDirectoryProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActiveDirectoryProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActiveDirectoryProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("azureStorageSid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureStorageSid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureStorageSid").toString()));
      }
      if (!jsonObj.get("domainGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainGuid").toString()));
      }
      if (!jsonObj.get("domainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      if (!jsonObj.get("domainSid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainSid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainSid").toString()));
      }
      if (!jsonObj.get("forestName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forestName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forestName").toString()));
      }
      if (!jsonObj.get("netBiosDomainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `netBiosDomainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("netBiosDomainName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActiveDirectoryProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActiveDirectoryProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActiveDirectoryProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActiveDirectoryProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ActiveDirectoryProperties>() {
           @Override
           public void write(JsonWriter out, ActiveDirectoryProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActiveDirectoryProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActiveDirectoryProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActiveDirectoryProperties
   * @throws IOException if the JSON string is invalid with respect to ActiveDirectoryProperties
   */
  public static ActiveDirectoryProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActiveDirectoryProperties.class);
  }

  /**
   * Convert an instance of ActiveDirectoryProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

