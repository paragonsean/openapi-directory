/**
 * StorageManagement
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageAccountPropertiesCreateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageAccountPropertiesCreateParameters::OAIStorageAccountPropertiesCreateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageAccountPropertiesCreateParameters::OAIStorageAccountPropertiesCreateParameters() {
    this->initializeModel();
}

OAIStorageAccountPropertiesCreateParameters::~OAIStorageAccountPropertiesCreateParameters() {}

void OAIStorageAccountPropertiesCreateParameters::initializeModel() {

    m_access_tier_isSet = false;
    m_access_tier_isValid = false;

    m_custom_domain_isSet = false;
    m_custom_domain_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_supports_https_traffic_only_isSet = false;
    m_supports_https_traffic_only_isValid = false;
}

void OAIStorageAccountPropertiesCreateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageAccountPropertiesCreateParameters::fromJsonObject(QJsonObject json) {

    m_access_tier_isValid = ::OpenAPI::fromJsonValue(m_access_tier, json[QString("accessTier")]);
    m_access_tier_isSet = !json[QString("accessTier")].isNull() && m_access_tier_isValid;

    m_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_custom_domain, json[QString("customDomain")]);
    m_custom_domain_isSet = !json[QString("customDomain")].isNull() && m_custom_domain_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("encryption")]);
    m_encryption_isSet = !json[QString("encryption")].isNull() && m_encryption_isValid;

    m_supports_https_traffic_only_isValid = ::OpenAPI::fromJsonValue(m_supports_https_traffic_only, json[QString("supportsHttpsTrafficOnly")]);
    m_supports_https_traffic_only_isSet = !json[QString("supportsHttpsTrafficOnly")].isNull() && m_supports_https_traffic_only_isValid;
}

QString OAIStorageAccountPropertiesCreateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageAccountPropertiesCreateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_access_tier_isSet) {
        obj.insert(QString("accessTier"), ::OpenAPI::toJsonValue(m_access_tier));
    }
    if (m_custom_domain.isSet()) {
        obj.insert(QString("customDomain"), ::OpenAPI::toJsonValue(m_custom_domain));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_supports_https_traffic_only_isSet) {
        obj.insert(QString("supportsHttpsTrafficOnly"), ::OpenAPI::toJsonValue(m_supports_https_traffic_only));
    }
    return obj;
}

QString OAIStorageAccountPropertiesCreateParameters::getAccessTier() const {
    return m_access_tier;
}
void OAIStorageAccountPropertiesCreateParameters::setAccessTier(const QString &access_tier) {
    m_access_tier = access_tier;
    m_access_tier_isSet = true;
}

bool OAIStorageAccountPropertiesCreateParameters::is_access_tier_Set() const{
    return m_access_tier_isSet;
}

bool OAIStorageAccountPropertiesCreateParameters::is_access_tier_Valid() const{
    return m_access_tier_isValid;
}

OAICustomDomain OAIStorageAccountPropertiesCreateParameters::getCustomDomain() const {
    return m_custom_domain;
}
void OAIStorageAccountPropertiesCreateParameters::setCustomDomain(const OAICustomDomain &custom_domain) {
    m_custom_domain = custom_domain;
    m_custom_domain_isSet = true;
}

bool OAIStorageAccountPropertiesCreateParameters::is_custom_domain_Set() const{
    return m_custom_domain_isSet;
}

bool OAIStorageAccountPropertiesCreateParameters::is_custom_domain_Valid() const{
    return m_custom_domain_isValid;
}

OAIEncryption OAIStorageAccountPropertiesCreateParameters::getEncryption() const {
    return m_encryption;
}
void OAIStorageAccountPropertiesCreateParameters::setEncryption(const OAIEncryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIStorageAccountPropertiesCreateParameters::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIStorageAccountPropertiesCreateParameters::is_encryption_Valid() const{
    return m_encryption_isValid;
}

bool OAIStorageAccountPropertiesCreateParameters::isSupportsHttpsTrafficOnly() const {
    return m_supports_https_traffic_only;
}
void OAIStorageAccountPropertiesCreateParameters::setSupportsHttpsTrafficOnly(const bool &supports_https_traffic_only) {
    m_supports_https_traffic_only = supports_https_traffic_only;
    m_supports_https_traffic_only_isSet = true;
}

bool OAIStorageAccountPropertiesCreateParameters::is_supports_https_traffic_only_Set() const{
    return m_supports_https_traffic_only_isSet;
}

bool OAIStorageAccountPropertiesCreateParameters::is_supports_https_traffic_only_Valid() const{
    return m_supports_https_traffic_only_isValid;
}

bool OAIStorageAccountPropertiesCreateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_https_traffic_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageAccountPropertiesCreateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
