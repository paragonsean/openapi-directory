# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_domain import CustomDomain
from openapi_server.models.encryption import Encryption
from openapi_server import util


class StorageAccountPropertiesUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_tier: str=None, custom_domain: CustomDomain=None, encryption: Encryption=None, supports_https_traffic_only: bool=False):
        """StorageAccountPropertiesUpdateParameters - a model defined in OpenAPI

        :param access_tier: The access_tier of this StorageAccountPropertiesUpdateParameters.
        :param custom_domain: The custom_domain of this StorageAccountPropertiesUpdateParameters.
        :param encryption: The encryption of this StorageAccountPropertiesUpdateParameters.
        :param supports_https_traffic_only: The supports_https_traffic_only of this StorageAccountPropertiesUpdateParameters.
        """
        self.openapi_types = {
            'access_tier': str,
            'custom_domain': CustomDomain,
            'encryption': Encryption,
            'supports_https_traffic_only': bool
        }

        self.attribute_map = {
            'access_tier': 'accessTier',
            'custom_domain': 'customDomain',
            'encryption': 'encryption',
            'supports_https_traffic_only': 'supportsHttpsTrafficOnly'
        }

        self._access_tier = access_tier
        self._custom_domain = custom_domain
        self._encryption = encryption
        self._supports_https_traffic_only = supports_https_traffic_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountPropertiesUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountPropertiesUpdateParameters of this StorageAccountPropertiesUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_tier(self):
        """Gets the access_tier of this StorageAccountPropertiesUpdateParameters.

        Required for storage accounts where kind = BlobStorage. The access tier used for billing.

        :return: The access_tier of this StorageAccountPropertiesUpdateParameters.
        :rtype: str
        """
        return self._access_tier

    @access_tier.setter
    def access_tier(self, access_tier):
        """Sets the access_tier of this StorageAccountPropertiesUpdateParameters.

        Required for storage accounts where kind = BlobStorage. The access tier used for billing.

        :param access_tier: The access_tier of this StorageAccountPropertiesUpdateParameters.
        :type access_tier: str
        """
        allowed_values = ["Hot", "Cool"]  # noqa: E501
        if access_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `access_tier` ({0}), must be one of {1}"
                .format(access_tier, allowed_values)
            )

        self._access_tier = access_tier

    @property
    def custom_domain(self):
        """Gets the custom_domain of this StorageAccountPropertiesUpdateParameters.


        :return: The custom_domain of this StorageAccountPropertiesUpdateParameters.
        :rtype: CustomDomain
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """Sets the custom_domain of this StorageAccountPropertiesUpdateParameters.


        :param custom_domain: The custom_domain of this StorageAccountPropertiesUpdateParameters.
        :type custom_domain: CustomDomain
        """

        self._custom_domain = custom_domain

    @property
    def encryption(self):
        """Gets the encryption of this StorageAccountPropertiesUpdateParameters.


        :return: The encryption of this StorageAccountPropertiesUpdateParameters.
        :rtype: Encryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this StorageAccountPropertiesUpdateParameters.


        :param encryption: The encryption of this StorageAccountPropertiesUpdateParameters.
        :type encryption: Encryption
        """

        self._encryption = encryption

    @property
    def supports_https_traffic_only(self):
        """Gets the supports_https_traffic_only of this StorageAccountPropertiesUpdateParameters.

        Allows https traffic only to storage service if sets to true.

        :return: The supports_https_traffic_only of this StorageAccountPropertiesUpdateParameters.
        :rtype: bool
        """
        return self._supports_https_traffic_only

    @supports_https_traffic_only.setter
    def supports_https_traffic_only(self, supports_https_traffic_only):
        """Sets the supports_https_traffic_only of this StorageAccountPropertiesUpdateParameters.

        Allows https traffic only to storage service if sets to true.

        :param supports_https_traffic_only: The supports_https_traffic_only of this StorageAccountPropertiesUpdateParameters.
        :type supports_https_traffic_only: bool
        """

        self._supports_https_traffic_only = supports_https_traffic_only
