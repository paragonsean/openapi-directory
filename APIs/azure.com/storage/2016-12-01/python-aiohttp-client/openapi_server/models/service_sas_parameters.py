# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceSasParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, canonicalized_resource: str=None, end_pk: str=None, end_rk: str=None, key_to_sign: str=None, rscc: str=None, rscd: str=None, rsce: str=None, rscl: str=None, rsct: str=None, signed_expiry: datetime=None, signed_identifier: str=None, signed_ip: str=None, signed_permission: str=None, signed_protocol: str=None, signed_resource: str=None, signed_start: datetime=None, start_pk: str=None, start_rk: str=None):
        """ServiceSasParameters - a model defined in OpenAPI

        :param canonicalized_resource: The canonicalized_resource of this ServiceSasParameters.
        :param end_pk: The end_pk of this ServiceSasParameters.
        :param end_rk: The end_rk of this ServiceSasParameters.
        :param key_to_sign: The key_to_sign of this ServiceSasParameters.
        :param rscc: The rscc of this ServiceSasParameters.
        :param rscd: The rscd of this ServiceSasParameters.
        :param rsce: The rsce of this ServiceSasParameters.
        :param rscl: The rscl of this ServiceSasParameters.
        :param rsct: The rsct of this ServiceSasParameters.
        :param signed_expiry: The signed_expiry of this ServiceSasParameters.
        :param signed_identifier: The signed_identifier of this ServiceSasParameters.
        :param signed_ip: The signed_ip of this ServiceSasParameters.
        :param signed_permission: The signed_permission of this ServiceSasParameters.
        :param signed_protocol: The signed_protocol of this ServiceSasParameters.
        :param signed_resource: The signed_resource of this ServiceSasParameters.
        :param signed_start: The signed_start of this ServiceSasParameters.
        :param start_pk: The start_pk of this ServiceSasParameters.
        :param start_rk: The start_rk of this ServiceSasParameters.
        """
        self.openapi_types = {
            'canonicalized_resource': str,
            'end_pk': str,
            'end_rk': str,
            'key_to_sign': str,
            'rscc': str,
            'rscd': str,
            'rsce': str,
            'rscl': str,
            'rsct': str,
            'signed_expiry': datetime,
            'signed_identifier': str,
            'signed_ip': str,
            'signed_permission': str,
            'signed_protocol': str,
            'signed_resource': str,
            'signed_start': datetime,
            'start_pk': str,
            'start_rk': str
        }

        self.attribute_map = {
            'canonicalized_resource': 'canonicalizedResource',
            'end_pk': 'endPk',
            'end_rk': 'endRk',
            'key_to_sign': 'keyToSign',
            'rscc': 'rscc',
            'rscd': 'rscd',
            'rsce': 'rsce',
            'rscl': 'rscl',
            'rsct': 'rsct',
            'signed_expiry': 'signedExpiry',
            'signed_identifier': 'signedIdentifier',
            'signed_ip': 'signedIp',
            'signed_permission': 'signedPermission',
            'signed_protocol': 'signedProtocol',
            'signed_resource': 'signedResource',
            'signed_start': 'signedStart',
            'start_pk': 'startPk',
            'start_rk': 'startRk'
        }

        self._canonicalized_resource = canonicalized_resource
        self._end_pk = end_pk
        self._end_rk = end_rk
        self._key_to_sign = key_to_sign
        self._rscc = rscc
        self._rscd = rscd
        self._rsce = rsce
        self._rscl = rscl
        self._rsct = rsct
        self._signed_expiry = signed_expiry
        self._signed_identifier = signed_identifier
        self._signed_ip = signed_ip
        self._signed_permission = signed_permission
        self._signed_protocol = signed_protocol
        self._signed_resource = signed_resource
        self._signed_start = signed_start
        self._start_pk = start_pk
        self._start_rk = start_rk

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceSasParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceSasParameters of this ServiceSasParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def canonicalized_resource(self):
        """Gets the canonicalized_resource of this ServiceSasParameters.

        The canonical path to the signed resource.

        :return: The canonicalized_resource of this ServiceSasParameters.
        :rtype: str
        """
        return self._canonicalized_resource

    @canonicalized_resource.setter
    def canonicalized_resource(self, canonicalized_resource):
        """Sets the canonicalized_resource of this ServiceSasParameters.

        The canonical path to the signed resource.

        :param canonicalized_resource: The canonicalized_resource of this ServiceSasParameters.
        :type canonicalized_resource: str
        """
        if canonicalized_resource is None:
            raise ValueError("Invalid value for `canonicalized_resource`, must not be `None`")

        self._canonicalized_resource = canonicalized_resource

    @property
    def end_pk(self):
        """Gets the end_pk of this ServiceSasParameters.

        The end of partition key.

        :return: The end_pk of this ServiceSasParameters.
        :rtype: str
        """
        return self._end_pk

    @end_pk.setter
    def end_pk(self, end_pk):
        """Sets the end_pk of this ServiceSasParameters.

        The end of partition key.

        :param end_pk: The end_pk of this ServiceSasParameters.
        :type end_pk: str
        """

        self._end_pk = end_pk

    @property
    def end_rk(self):
        """Gets the end_rk of this ServiceSasParameters.

        The end of row key.

        :return: The end_rk of this ServiceSasParameters.
        :rtype: str
        """
        return self._end_rk

    @end_rk.setter
    def end_rk(self, end_rk):
        """Sets the end_rk of this ServiceSasParameters.

        The end of row key.

        :param end_rk: The end_rk of this ServiceSasParameters.
        :type end_rk: str
        """

        self._end_rk = end_rk

    @property
    def key_to_sign(self):
        """Gets the key_to_sign of this ServiceSasParameters.

        The key to sign the account SAS token with.

        :return: The key_to_sign of this ServiceSasParameters.
        :rtype: str
        """
        return self._key_to_sign

    @key_to_sign.setter
    def key_to_sign(self, key_to_sign):
        """Sets the key_to_sign of this ServiceSasParameters.

        The key to sign the account SAS token with.

        :param key_to_sign: The key_to_sign of this ServiceSasParameters.
        :type key_to_sign: str
        """

        self._key_to_sign = key_to_sign

    @property
    def rscc(self):
        """Gets the rscc of this ServiceSasParameters.

        The response header override for cache control.

        :return: The rscc of this ServiceSasParameters.
        :rtype: str
        """
        return self._rscc

    @rscc.setter
    def rscc(self, rscc):
        """Sets the rscc of this ServiceSasParameters.

        The response header override for cache control.

        :param rscc: The rscc of this ServiceSasParameters.
        :type rscc: str
        """

        self._rscc = rscc

    @property
    def rscd(self):
        """Gets the rscd of this ServiceSasParameters.

        The response header override for content disposition.

        :return: The rscd of this ServiceSasParameters.
        :rtype: str
        """
        return self._rscd

    @rscd.setter
    def rscd(self, rscd):
        """Sets the rscd of this ServiceSasParameters.

        The response header override for content disposition.

        :param rscd: The rscd of this ServiceSasParameters.
        :type rscd: str
        """

        self._rscd = rscd

    @property
    def rsce(self):
        """Gets the rsce of this ServiceSasParameters.

        The response header override for content encoding.

        :return: The rsce of this ServiceSasParameters.
        :rtype: str
        """
        return self._rsce

    @rsce.setter
    def rsce(self, rsce):
        """Sets the rsce of this ServiceSasParameters.

        The response header override for content encoding.

        :param rsce: The rsce of this ServiceSasParameters.
        :type rsce: str
        """

        self._rsce = rsce

    @property
    def rscl(self):
        """Gets the rscl of this ServiceSasParameters.

        The response header override for content language.

        :return: The rscl of this ServiceSasParameters.
        :rtype: str
        """
        return self._rscl

    @rscl.setter
    def rscl(self, rscl):
        """Sets the rscl of this ServiceSasParameters.

        The response header override for content language.

        :param rscl: The rscl of this ServiceSasParameters.
        :type rscl: str
        """

        self._rscl = rscl

    @property
    def rsct(self):
        """Gets the rsct of this ServiceSasParameters.

        The response header override for content type.

        :return: The rsct of this ServiceSasParameters.
        :rtype: str
        """
        return self._rsct

    @rsct.setter
    def rsct(self, rsct):
        """Sets the rsct of this ServiceSasParameters.

        The response header override for content type.

        :param rsct: The rsct of this ServiceSasParameters.
        :type rsct: str
        """

        self._rsct = rsct

    @property
    def signed_expiry(self):
        """Gets the signed_expiry of this ServiceSasParameters.

        The time at which the shared access signature becomes invalid.

        :return: The signed_expiry of this ServiceSasParameters.
        :rtype: datetime
        """
        return self._signed_expiry

    @signed_expiry.setter
    def signed_expiry(self, signed_expiry):
        """Sets the signed_expiry of this ServiceSasParameters.

        The time at which the shared access signature becomes invalid.

        :param signed_expiry: The signed_expiry of this ServiceSasParameters.
        :type signed_expiry: datetime
        """

        self._signed_expiry = signed_expiry

    @property
    def signed_identifier(self):
        """Gets the signed_identifier of this ServiceSasParameters.

        A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table.

        :return: The signed_identifier of this ServiceSasParameters.
        :rtype: str
        """
        return self._signed_identifier

    @signed_identifier.setter
    def signed_identifier(self, signed_identifier):
        """Sets the signed_identifier of this ServiceSasParameters.

        A unique value up to 64 characters in length that correlates to an access policy specified for the container, queue, or table.

        :param signed_identifier: The signed_identifier of this ServiceSasParameters.
        :type signed_identifier: str
        """
        if signed_identifier is not None and len(signed_identifier) > 64:
            raise ValueError("Invalid value for `signed_identifier`, length must be less than or equal to `64`")

        self._signed_identifier = signed_identifier

    @property
    def signed_ip(self):
        """Gets the signed_ip of this ServiceSasParameters.

        An IP address or a range of IP addresses from which to accept requests.

        :return: The signed_ip of this ServiceSasParameters.
        :rtype: str
        """
        return self._signed_ip

    @signed_ip.setter
    def signed_ip(self, signed_ip):
        """Sets the signed_ip of this ServiceSasParameters.

        An IP address or a range of IP addresses from which to accept requests.

        :param signed_ip: The signed_ip of this ServiceSasParameters.
        :type signed_ip: str
        """

        self._signed_ip = signed_ip

    @property
    def signed_permission(self):
        """Gets the signed_permission of this ServiceSasParameters.

        The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).

        :return: The signed_permission of this ServiceSasParameters.
        :rtype: str
        """
        return self._signed_permission

    @signed_permission.setter
    def signed_permission(self, signed_permission):
        """Sets the signed_permission of this ServiceSasParameters.

        The signed permissions for the service SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).

        :param signed_permission: The signed_permission of this ServiceSasParameters.
        :type signed_permission: str
        """
        allowed_values = ["r", "d", "w", "l", "a", "c", "u", "p"]  # noqa: E501
        if signed_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `signed_permission` ({0}), must be one of {1}"
                .format(signed_permission, allowed_values)
            )

        self._signed_permission = signed_permission

    @property
    def signed_protocol(self):
        """Gets the signed_protocol of this ServiceSasParameters.

        The protocol permitted for a request made with the account SAS.

        :return: The signed_protocol of this ServiceSasParameters.
        :rtype: str
        """
        return self._signed_protocol

    @signed_protocol.setter
    def signed_protocol(self, signed_protocol):
        """Sets the signed_protocol of this ServiceSasParameters.

        The protocol permitted for a request made with the account SAS.

        :param signed_protocol: The signed_protocol of this ServiceSasParameters.
        :type signed_protocol: str
        """
        allowed_values = ["https,http", "https"]  # noqa: E501
        if signed_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `signed_protocol` ({0}), must be one of {1}"
                .format(signed_protocol, allowed_values)
            )

        self._signed_protocol = signed_protocol

    @property
    def signed_resource(self):
        """Gets the signed_resource of this ServiceSasParameters.

        The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).

        :return: The signed_resource of this ServiceSasParameters.
        :rtype: str
        """
        return self._signed_resource

    @signed_resource.setter
    def signed_resource(self, signed_resource):
        """Sets the signed_resource of this ServiceSasParameters.

        The signed services accessible with the service SAS. Possible values include: Blob (b), Container (c), File (f), Share (s).

        :param signed_resource: The signed_resource of this ServiceSasParameters.
        :type signed_resource: str
        """
        allowed_values = ["b", "c", "f", "s"]  # noqa: E501
        if signed_resource not in allowed_values:
            raise ValueError(
                "Invalid value for `signed_resource` ({0}), must be one of {1}"
                .format(signed_resource, allowed_values)
            )

        self._signed_resource = signed_resource

    @property
    def signed_start(self):
        """Gets the signed_start of this ServiceSasParameters.

        The time at which the SAS becomes valid.

        :return: The signed_start of this ServiceSasParameters.
        :rtype: datetime
        """
        return self._signed_start

    @signed_start.setter
    def signed_start(self, signed_start):
        """Sets the signed_start of this ServiceSasParameters.

        The time at which the SAS becomes valid.

        :param signed_start: The signed_start of this ServiceSasParameters.
        :type signed_start: datetime
        """

        self._signed_start = signed_start

    @property
    def start_pk(self):
        """Gets the start_pk of this ServiceSasParameters.

        The start of partition key.

        :return: The start_pk of this ServiceSasParameters.
        :rtype: str
        """
        return self._start_pk

    @start_pk.setter
    def start_pk(self, start_pk):
        """Sets the start_pk of this ServiceSasParameters.

        The start of partition key.

        :param start_pk: The start_pk of this ServiceSasParameters.
        :type start_pk: str
        """

        self._start_pk = start_pk

    @property
    def start_rk(self):
        """Gets the start_rk of this ServiceSasParameters.

        The start of row key.

        :return: The start_rk of this ServiceSasParameters.
        :rtype: str
        """
        return self._start_rk

    @start_rk.setter
    def start_rk(self, start_rk):
        """Sets the start_rk of this ServiceSasParameters.

        The start of row key.

        :param start_rk: The start_rk of this ServiceSasParameters.
        :type start_rk: str
        """

        self._start_rk = start_rk
