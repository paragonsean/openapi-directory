# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountSasParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_to_sign: str=None, signed_expiry: datetime=None, signed_ip: str=None, signed_permission: str=None, signed_protocol: str=None, signed_resource_types: str=None, signed_services: str=None, signed_start: datetime=None):
        """AccountSasParameters - a model defined in OpenAPI

        :param key_to_sign: The key_to_sign of this AccountSasParameters.
        :param signed_expiry: The signed_expiry of this AccountSasParameters.
        :param signed_ip: The signed_ip of this AccountSasParameters.
        :param signed_permission: The signed_permission of this AccountSasParameters.
        :param signed_protocol: The signed_protocol of this AccountSasParameters.
        :param signed_resource_types: The signed_resource_types of this AccountSasParameters.
        :param signed_services: The signed_services of this AccountSasParameters.
        :param signed_start: The signed_start of this AccountSasParameters.
        """
        self.openapi_types = {
            'key_to_sign': str,
            'signed_expiry': datetime,
            'signed_ip': str,
            'signed_permission': str,
            'signed_protocol': str,
            'signed_resource_types': str,
            'signed_services': str,
            'signed_start': datetime
        }

        self.attribute_map = {
            'key_to_sign': 'keyToSign',
            'signed_expiry': 'signedExpiry',
            'signed_ip': 'signedIp',
            'signed_permission': 'signedPermission',
            'signed_protocol': 'signedProtocol',
            'signed_resource_types': 'signedResourceTypes',
            'signed_services': 'signedServices',
            'signed_start': 'signedStart'
        }

        self._key_to_sign = key_to_sign
        self._signed_expiry = signed_expiry
        self._signed_ip = signed_ip
        self._signed_permission = signed_permission
        self._signed_protocol = signed_protocol
        self._signed_resource_types = signed_resource_types
        self._signed_services = signed_services
        self._signed_start = signed_start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountSasParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountSasParameters of this AccountSasParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_to_sign(self):
        """Gets the key_to_sign of this AccountSasParameters.

        The key to sign the account SAS token with.

        :return: The key_to_sign of this AccountSasParameters.
        :rtype: str
        """
        return self._key_to_sign

    @key_to_sign.setter
    def key_to_sign(self, key_to_sign):
        """Sets the key_to_sign of this AccountSasParameters.

        The key to sign the account SAS token with.

        :param key_to_sign: The key_to_sign of this AccountSasParameters.
        :type key_to_sign: str
        """

        self._key_to_sign = key_to_sign

    @property
    def signed_expiry(self):
        """Gets the signed_expiry of this AccountSasParameters.

        The time at which the shared access signature becomes invalid.

        :return: The signed_expiry of this AccountSasParameters.
        :rtype: datetime
        """
        return self._signed_expiry

    @signed_expiry.setter
    def signed_expiry(self, signed_expiry):
        """Sets the signed_expiry of this AccountSasParameters.

        The time at which the shared access signature becomes invalid.

        :param signed_expiry: The signed_expiry of this AccountSasParameters.
        :type signed_expiry: datetime
        """
        if signed_expiry is None:
            raise ValueError("Invalid value for `signed_expiry`, must not be `None`")

        self._signed_expiry = signed_expiry

    @property
    def signed_ip(self):
        """Gets the signed_ip of this AccountSasParameters.

        An IP address or a range of IP addresses from which to accept requests.

        :return: The signed_ip of this AccountSasParameters.
        :rtype: str
        """
        return self._signed_ip

    @signed_ip.setter
    def signed_ip(self, signed_ip):
        """Sets the signed_ip of this AccountSasParameters.

        An IP address or a range of IP addresses from which to accept requests.

        :param signed_ip: The signed_ip of this AccountSasParameters.
        :type signed_ip: str
        """

        self._signed_ip = signed_ip

    @property
    def signed_permission(self):
        """Gets the signed_permission of this AccountSasParameters.

        The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).

        :return: The signed_permission of this AccountSasParameters.
        :rtype: str
        """
        return self._signed_permission

    @signed_permission.setter
    def signed_permission(self, signed_permission):
        """Sets the signed_permission of this AccountSasParameters.

        The signed permissions for the account SAS. Possible values include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p).

        :param signed_permission: The signed_permission of this AccountSasParameters.
        :type signed_permission: str
        """
        allowed_values = ["r", "d", "w", "l", "a", "c", "u", "p"]  # noqa: E501
        if signed_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `signed_permission` ({0}), must be one of {1}"
                .format(signed_permission, allowed_values)
            )

        self._signed_permission = signed_permission

    @property
    def signed_protocol(self):
        """Gets the signed_protocol of this AccountSasParameters.

        The protocol permitted for a request made with the account SAS.

        :return: The signed_protocol of this AccountSasParameters.
        :rtype: str
        """
        return self._signed_protocol

    @signed_protocol.setter
    def signed_protocol(self, signed_protocol):
        """Sets the signed_protocol of this AccountSasParameters.

        The protocol permitted for a request made with the account SAS.

        :param signed_protocol: The signed_protocol of this AccountSasParameters.
        :type signed_protocol: str
        """
        allowed_values = ["https,http", "https"]  # noqa: E501
        if signed_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `signed_protocol` ({0}), must be one of {1}"
                .format(signed_protocol, allowed_values)
            )

        self._signed_protocol = signed_protocol

    @property
    def signed_resource_types(self):
        """Gets the signed_resource_types of this AccountSasParameters.

        The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.

        :return: The signed_resource_types of this AccountSasParameters.
        :rtype: str
        """
        return self._signed_resource_types

    @signed_resource_types.setter
    def signed_resource_types(self, signed_resource_types):
        """Sets the signed_resource_types of this AccountSasParameters.

        The signed resource types that are accessible with the account SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.

        :param signed_resource_types: The signed_resource_types of this AccountSasParameters.
        :type signed_resource_types: str
        """
        allowed_values = ["s", "c", "o"]  # noqa: E501
        if signed_resource_types not in allowed_values:
            raise ValueError(
                "Invalid value for `signed_resource_types` ({0}), must be one of {1}"
                .format(signed_resource_types, allowed_values)
            )

        self._signed_resource_types = signed_resource_types

    @property
    def signed_services(self):
        """Gets the signed_services of this AccountSasParameters.

        The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).

        :return: The signed_services of this AccountSasParameters.
        :rtype: str
        """
        return self._signed_services

    @signed_services.setter
    def signed_services(self, signed_services):
        """Sets the signed_services of this AccountSasParameters.

        The signed services accessible with the account SAS. Possible values include: Blob (b), Queue (q), Table (t), File (f).

        :param signed_services: The signed_services of this AccountSasParameters.
        :type signed_services: str
        """
        allowed_values = ["b", "q", "t", "f"]  # noqa: E501
        if signed_services not in allowed_values:
            raise ValueError(
                "Invalid value for `signed_services` ({0}), must be one of {1}"
                .format(signed_services, allowed_values)
            )

        self._signed_services = signed_services

    @property
    def signed_start(self):
        """Gets the signed_start of this AccountSasParameters.

        The time at which the SAS becomes valid.

        :return: The signed_start of this AccountSasParameters.
        :rtype: datetime
        """
        return self._signed_start

    @signed_start.setter
    def signed_start(self, signed_start):
        """Sets the signed_start of this AccountSasParameters.

        The time at which the SAS becomes valid.

        :param signed_start: The signed_start of this AccountSasParameters.
        :type signed_start: datetime
        """

        self._signed_start = signed_start
