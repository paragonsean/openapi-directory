/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageAccountProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageAccountProperties::OAIStorageAccountProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageAccountProperties::OAIStorageAccountProperties() {
    this->initializeModel();
}

OAIStorageAccountProperties::~OAIStorageAccountProperties() {}

void OAIStorageAccountProperties::initializeModel() {

    m_access_tier_isSet = false;
    m_access_tier_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_custom_domain_isSet = false;
    m_custom_domain_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_is_hns_enabled_isSet = false;
    m_is_hns_enabled_isValid = false;

    m_last_geo_failover_time_isSet = false;
    m_last_geo_failover_time_isValid = false;

    m_network_acls_isSet = false;
    m_network_acls_isValid = false;

    m_primary_endpoints_isSet = false;
    m_primary_endpoints_isValid = false;

    m_primary_location_isSet = false;
    m_primary_location_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_secondary_endpoints_isSet = false;
    m_secondary_endpoints_isValid = false;

    m_secondary_location_isSet = false;
    m_secondary_location_isValid = false;

    m_status_of_primary_isSet = false;
    m_status_of_primary_isValid = false;

    m_status_of_secondary_isSet = false;
    m_status_of_secondary_isValid = false;

    m_supports_https_traffic_only_isSet = false;
    m_supports_https_traffic_only_isValid = false;
}

void OAIStorageAccountProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageAccountProperties::fromJsonObject(QJsonObject json) {

    m_access_tier_isValid = ::OpenAPI::fromJsonValue(m_access_tier, json[QString("accessTier")]);
    m_access_tier_isSet = !json[QString("accessTier")].isNull() && m_access_tier_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_custom_domain, json[QString("customDomain")]);
    m_custom_domain_isSet = !json[QString("customDomain")].isNull() && m_custom_domain_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("encryption")]);
    m_encryption_isSet = !json[QString("encryption")].isNull() && m_encryption_isValid;

    m_is_hns_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_hns_enabled, json[QString("isHnsEnabled")]);
    m_is_hns_enabled_isSet = !json[QString("isHnsEnabled")].isNull() && m_is_hns_enabled_isValid;

    m_last_geo_failover_time_isValid = ::OpenAPI::fromJsonValue(m_last_geo_failover_time, json[QString("lastGeoFailoverTime")]);
    m_last_geo_failover_time_isSet = !json[QString("lastGeoFailoverTime")].isNull() && m_last_geo_failover_time_isValid;

    m_network_acls_isValid = ::OpenAPI::fromJsonValue(m_network_acls, json[QString("networkAcls")]);
    m_network_acls_isSet = !json[QString("networkAcls")].isNull() && m_network_acls_isValid;

    m_primary_endpoints_isValid = ::OpenAPI::fromJsonValue(m_primary_endpoints, json[QString("primaryEndpoints")]);
    m_primary_endpoints_isSet = !json[QString("primaryEndpoints")].isNull() && m_primary_endpoints_isValid;

    m_primary_location_isValid = ::OpenAPI::fromJsonValue(m_primary_location, json[QString("primaryLocation")]);
    m_primary_location_isSet = !json[QString("primaryLocation")].isNull() && m_primary_location_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_secondary_endpoints_isValid = ::OpenAPI::fromJsonValue(m_secondary_endpoints, json[QString("secondaryEndpoints")]);
    m_secondary_endpoints_isSet = !json[QString("secondaryEndpoints")].isNull() && m_secondary_endpoints_isValid;

    m_secondary_location_isValid = ::OpenAPI::fromJsonValue(m_secondary_location, json[QString("secondaryLocation")]);
    m_secondary_location_isSet = !json[QString("secondaryLocation")].isNull() && m_secondary_location_isValid;

    m_status_of_primary_isValid = ::OpenAPI::fromJsonValue(m_status_of_primary, json[QString("statusOfPrimary")]);
    m_status_of_primary_isSet = !json[QString("statusOfPrimary")].isNull() && m_status_of_primary_isValid;

    m_status_of_secondary_isValid = ::OpenAPI::fromJsonValue(m_status_of_secondary, json[QString("statusOfSecondary")]);
    m_status_of_secondary_isSet = !json[QString("statusOfSecondary")].isNull() && m_status_of_secondary_isValid;

    m_supports_https_traffic_only_isValid = ::OpenAPI::fromJsonValue(m_supports_https_traffic_only, json[QString("supportsHttpsTrafficOnly")]);
    m_supports_https_traffic_only_isSet = !json[QString("supportsHttpsTrafficOnly")].isNull() && m_supports_https_traffic_only_isValid;
}

QString OAIStorageAccountProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageAccountProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_tier_isSet) {
        obj.insert(QString("accessTier"), ::OpenAPI::toJsonValue(m_access_tier));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_custom_domain.isSet()) {
        obj.insert(QString("customDomain"), ::OpenAPI::toJsonValue(m_custom_domain));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_is_hns_enabled_isSet) {
        obj.insert(QString("isHnsEnabled"), ::OpenAPI::toJsonValue(m_is_hns_enabled));
    }
    if (m_last_geo_failover_time_isSet) {
        obj.insert(QString("lastGeoFailoverTime"), ::OpenAPI::toJsonValue(m_last_geo_failover_time));
    }
    if (m_network_acls.isSet()) {
        obj.insert(QString("networkAcls"), ::OpenAPI::toJsonValue(m_network_acls));
    }
    if (m_primary_endpoints.isSet()) {
        obj.insert(QString("primaryEndpoints"), ::OpenAPI::toJsonValue(m_primary_endpoints));
    }
    if (m_primary_location_isSet) {
        obj.insert(QString("primaryLocation"), ::OpenAPI::toJsonValue(m_primary_location));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_secondary_endpoints.isSet()) {
        obj.insert(QString("secondaryEndpoints"), ::OpenAPI::toJsonValue(m_secondary_endpoints));
    }
    if (m_secondary_location_isSet) {
        obj.insert(QString("secondaryLocation"), ::OpenAPI::toJsonValue(m_secondary_location));
    }
    if (m_status_of_primary_isSet) {
        obj.insert(QString("statusOfPrimary"), ::OpenAPI::toJsonValue(m_status_of_primary));
    }
    if (m_status_of_secondary_isSet) {
        obj.insert(QString("statusOfSecondary"), ::OpenAPI::toJsonValue(m_status_of_secondary));
    }
    if (m_supports_https_traffic_only_isSet) {
        obj.insert(QString("supportsHttpsTrafficOnly"), ::OpenAPI::toJsonValue(m_supports_https_traffic_only));
    }
    return obj;
}

QString OAIStorageAccountProperties::getAccessTier() const {
    return m_access_tier;
}
void OAIStorageAccountProperties::setAccessTier(const QString &access_tier) {
    m_access_tier = access_tier;
    m_access_tier_isSet = true;
}

bool OAIStorageAccountProperties::is_access_tier_Set() const{
    return m_access_tier_isSet;
}

bool OAIStorageAccountProperties::is_access_tier_Valid() const{
    return m_access_tier_isValid;
}

QDateTime OAIStorageAccountProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIStorageAccountProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIStorageAccountProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIStorageAccountProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

OAICustomDomain OAIStorageAccountProperties::getCustomDomain() const {
    return m_custom_domain;
}
void OAIStorageAccountProperties::setCustomDomain(const OAICustomDomain &custom_domain) {
    m_custom_domain = custom_domain;
    m_custom_domain_isSet = true;
}

bool OAIStorageAccountProperties::is_custom_domain_Set() const{
    return m_custom_domain_isSet;
}

bool OAIStorageAccountProperties::is_custom_domain_Valid() const{
    return m_custom_domain_isValid;
}

OAIEncryption OAIStorageAccountProperties::getEncryption() const {
    return m_encryption;
}
void OAIStorageAccountProperties::setEncryption(const OAIEncryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIStorageAccountProperties::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIStorageAccountProperties::is_encryption_Valid() const{
    return m_encryption_isValid;
}

bool OAIStorageAccountProperties::isIsHnsEnabled() const {
    return m_is_hns_enabled;
}
void OAIStorageAccountProperties::setIsHnsEnabled(const bool &is_hns_enabled) {
    m_is_hns_enabled = is_hns_enabled;
    m_is_hns_enabled_isSet = true;
}

bool OAIStorageAccountProperties::is_is_hns_enabled_Set() const{
    return m_is_hns_enabled_isSet;
}

bool OAIStorageAccountProperties::is_is_hns_enabled_Valid() const{
    return m_is_hns_enabled_isValid;
}

QDateTime OAIStorageAccountProperties::getLastGeoFailoverTime() const {
    return m_last_geo_failover_time;
}
void OAIStorageAccountProperties::setLastGeoFailoverTime(const QDateTime &last_geo_failover_time) {
    m_last_geo_failover_time = last_geo_failover_time;
    m_last_geo_failover_time_isSet = true;
}

bool OAIStorageAccountProperties::is_last_geo_failover_time_Set() const{
    return m_last_geo_failover_time_isSet;
}

bool OAIStorageAccountProperties::is_last_geo_failover_time_Valid() const{
    return m_last_geo_failover_time_isValid;
}

OAINetworkRuleSet OAIStorageAccountProperties::getNetworkAcls() const {
    return m_network_acls;
}
void OAIStorageAccountProperties::setNetworkAcls(const OAINetworkRuleSet &network_acls) {
    m_network_acls = network_acls;
    m_network_acls_isSet = true;
}

bool OAIStorageAccountProperties::is_network_acls_Set() const{
    return m_network_acls_isSet;
}

bool OAIStorageAccountProperties::is_network_acls_Valid() const{
    return m_network_acls_isValid;
}

OAIEndpoints OAIStorageAccountProperties::getPrimaryEndpoints() const {
    return m_primary_endpoints;
}
void OAIStorageAccountProperties::setPrimaryEndpoints(const OAIEndpoints &primary_endpoints) {
    m_primary_endpoints = primary_endpoints;
    m_primary_endpoints_isSet = true;
}

bool OAIStorageAccountProperties::is_primary_endpoints_Set() const{
    return m_primary_endpoints_isSet;
}

bool OAIStorageAccountProperties::is_primary_endpoints_Valid() const{
    return m_primary_endpoints_isValid;
}

QString OAIStorageAccountProperties::getPrimaryLocation() const {
    return m_primary_location;
}
void OAIStorageAccountProperties::setPrimaryLocation(const QString &primary_location) {
    m_primary_location = primary_location;
    m_primary_location_isSet = true;
}

bool OAIStorageAccountProperties::is_primary_location_Set() const{
    return m_primary_location_isSet;
}

bool OAIStorageAccountProperties::is_primary_location_Valid() const{
    return m_primary_location_isValid;
}

QString OAIStorageAccountProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIStorageAccountProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIStorageAccountProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIStorageAccountProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIEndpoints OAIStorageAccountProperties::getSecondaryEndpoints() const {
    return m_secondary_endpoints;
}
void OAIStorageAccountProperties::setSecondaryEndpoints(const OAIEndpoints &secondary_endpoints) {
    m_secondary_endpoints = secondary_endpoints;
    m_secondary_endpoints_isSet = true;
}

bool OAIStorageAccountProperties::is_secondary_endpoints_Set() const{
    return m_secondary_endpoints_isSet;
}

bool OAIStorageAccountProperties::is_secondary_endpoints_Valid() const{
    return m_secondary_endpoints_isValid;
}

QString OAIStorageAccountProperties::getSecondaryLocation() const {
    return m_secondary_location;
}
void OAIStorageAccountProperties::setSecondaryLocation(const QString &secondary_location) {
    m_secondary_location = secondary_location;
    m_secondary_location_isSet = true;
}

bool OAIStorageAccountProperties::is_secondary_location_Set() const{
    return m_secondary_location_isSet;
}

bool OAIStorageAccountProperties::is_secondary_location_Valid() const{
    return m_secondary_location_isValid;
}

QString OAIStorageAccountProperties::getStatusOfPrimary() const {
    return m_status_of_primary;
}
void OAIStorageAccountProperties::setStatusOfPrimary(const QString &status_of_primary) {
    m_status_of_primary = status_of_primary;
    m_status_of_primary_isSet = true;
}

bool OAIStorageAccountProperties::is_status_of_primary_Set() const{
    return m_status_of_primary_isSet;
}

bool OAIStorageAccountProperties::is_status_of_primary_Valid() const{
    return m_status_of_primary_isValid;
}

QString OAIStorageAccountProperties::getStatusOfSecondary() const {
    return m_status_of_secondary;
}
void OAIStorageAccountProperties::setStatusOfSecondary(const QString &status_of_secondary) {
    m_status_of_secondary = status_of_secondary;
    m_status_of_secondary_isSet = true;
}

bool OAIStorageAccountProperties::is_status_of_secondary_Set() const{
    return m_status_of_secondary_isSet;
}

bool OAIStorageAccountProperties::is_status_of_secondary_Valid() const{
    return m_status_of_secondary_isValid;
}

bool OAIStorageAccountProperties::isSupportsHttpsTrafficOnly() const {
    return m_supports_https_traffic_only;
}
void OAIStorageAccountProperties::setSupportsHttpsTrafficOnly(const bool &supports_https_traffic_only) {
    m_supports_https_traffic_only = supports_https_traffic_only;
    m_supports_https_traffic_only_isSet = true;
}

bool OAIStorageAccountProperties::is_supports_https_traffic_only_Set() const{
    return m_supports_https_traffic_only_isSet;
}

bool OAIStorageAccountProperties::is_supports_https_traffic_only_Valid() const{
    return m_supports_https_traffic_only_isValid;
}

bool OAIStorageAccountProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_hns_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_geo_failover_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_acls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_of_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_of_secondary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_https_traffic_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageAccountProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
