/**
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountSasParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountSasParameters::OAIAccountSasParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountSasParameters::OAIAccountSasParameters() {
    this->initializeModel();
}

OAIAccountSasParameters::~OAIAccountSasParameters() {}

void OAIAccountSasParameters::initializeModel() {

    m_key_to_sign_isSet = false;
    m_key_to_sign_isValid = false;

    m_signed_expiry_isSet = false;
    m_signed_expiry_isValid = false;

    m_signed_ip_isSet = false;
    m_signed_ip_isValid = false;

    m_signed_permission_isSet = false;
    m_signed_permission_isValid = false;

    m_signed_protocol_isSet = false;
    m_signed_protocol_isValid = false;

    m_signed_resource_types_isSet = false;
    m_signed_resource_types_isValid = false;

    m_signed_services_isSet = false;
    m_signed_services_isValid = false;

    m_signed_start_isSet = false;
    m_signed_start_isValid = false;
}

void OAIAccountSasParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountSasParameters::fromJsonObject(QJsonObject json) {

    m_key_to_sign_isValid = ::OpenAPI::fromJsonValue(m_key_to_sign, json[QString("keyToSign")]);
    m_key_to_sign_isSet = !json[QString("keyToSign")].isNull() && m_key_to_sign_isValid;

    m_signed_expiry_isValid = ::OpenAPI::fromJsonValue(m_signed_expiry, json[QString("signedExpiry")]);
    m_signed_expiry_isSet = !json[QString("signedExpiry")].isNull() && m_signed_expiry_isValid;

    m_signed_ip_isValid = ::OpenAPI::fromJsonValue(m_signed_ip, json[QString("signedIp")]);
    m_signed_ip_isSet = !json[QString("signedIp")].isNull() && m_signed_ip_isValid;

    m_signed_permission_isValid = ::OpenAPI::fromJsonValue(m_signed_permission, json[QString("signedPermission")]);
    m_signed_permission_isSet = !json[QString("signedPermission")].isNull() && m_signed_permission_isValid;

    m_signed_protocol_isValid = ::OpenAPI::fromJsonValue(m_signed_protocol, json[QString("signedProtocol")]);
    m_signed_protocol_isSet = !json[QString("signedProtocol")].isNull() && m_signed_protocol_isValid;

    m_signed_resource_types_isValid = ::OpenAPI::fromJsonValue(m_signed_resource_types, json[QString("signedResourceTypes")]);
    m_signed_resource_types_isSet = !json[QString("signedResourceTypes")].isNull() && m_signed_resource_types_isValid;

    m_signed_services_isValid = ::OpenAPI::fromJsonValue(m_signed_services, json[QString("signedServices")]);
    m_signed_services_isSet = !json[QString("signedServices")].isNull() && m_signed_services_isValid;

    m_signed_start_isValid = ::OpenAPI::fromJsonValue(m_signed_start, json[QString("signedStart")]);
    m_signed_start_isSet = !json[QString("signedStart")].isNull() && m_signed_start_isValid;
}

QString OAIAccountSasParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountSasParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_key_to_sign_isSet) {
        obj.insert(QString("keyToSign"), ::OpenAPI::toJsonValue(m_key_to_sign));
    }
    if (m_signed_expiry_isSet) {
        obj.insert(QString("signedExpiry"), ::OpenAPI::toJsonValue(m_signed_expiry));
    }
    if (m_signed_ip_isSet) {
        obj.insert(QString("signedIp"), ::OpenAPI::toJsonValue(m_signed_ip));
    }
    if (m_signed_permission_isSet) {
        obj.insert(QString("signedPermission"), ::OpenAPI::toJsonValue(m_signed_permission));
    }
    if (m_signed_protocol_isSet) {
        obj.insert(QString("signedProtocol"), ::OpenAPI::toJsonValue(m_signed_protocol));
    }
    if (m_signed_resource_types_isSet) {
        obj.insert(QString("signedResourceTypes"), ::OpenAPI::toJsonValue(m_signed_resource_types));
    }
    if (m_signed_services_isSet) {
        obj.insert(QString("signedServices"), ::OpenAPI::toJsonValue(m_signed_services));
    }
    if (m_signed_start_isSet) {
        obj.insert(QString("signedStart"), ::OpenAPI::toJsonValue(m_signed_start));
    }
    return obj;
}

QString OAIAccountSasParameters::getKeyToSign() const {
    return m_key_to_sign;
}
void OAIAccountSasParameters::setKeyToSign(const QString &key_to_sign) {
    m_key_to_sign = key_to_sign;
    m_key_to_sign_isSet = true;
}

bool OAIAccountSasParameters::is_key_to_sign_Set() const{
    return m_key_to_sign_isSet;
}

bool OAIAccountSasParameters::is_key_to_sign_Valid() const{
    return m_key_to_sign_isValid;
}

QDateTime OAIAccountSasParameters::getSignedExpiry() const {
    return m_signed_expiry;
}
void OAIAccountSasParameters::setSignedExpiry(const QDateTime &signed_expiry) {
    m_signed_expiry = signed_expiry;
    m_signed_expiry_isSet = true;
}

bool OAIAccountSasParameters::is_signed_expiry_Set() const{
    return m_signed_expiry_isSet;
}

bool OAIAccountSasParameters::is_signed_expiry_Valid() const{
    return m_signed_expiry_isValid;
}

QString OAIAccountSasParameters::getSignedIp() const {
    return m_signed_ip;
}
void OAIAccountSasParameters::setSignedIp(const QString &signed_ip) {
    m_signed_ip = signed_ip;
    m_signed_ip_isSet = true;
}

bool OAIAccountSasParameters::is_signed_ip_Set() const{
    return m_signed_ip_isSet;
}

bool OAIAccountSasParameters::is_signed_ip_Valid() const{
    return m_signed_ip_isValid;
}

QString OAIAccountSasParameters::getSignedPermission() const {
    return m_signed_permission;
}
void OAIAccountSasParameters::setSignedPermission(const QString &signed_permission) {
    m_signed_permission = signed_permission;
    m_signed_permission_isSet = true;
}

bool OAIAccountSasParameters::is_signed_permission_Set() const{
    return m_signed_permission_isSet;
}

bool OAIAccountSasParameters::is_signed_permission_Valid() const{
    return m_signed_permission_isValid;
}

QString OAIAccountSasParameters::getSignedProtocol() const {
    return m_signed_protocol;
}
void OAIAccountSasParameters::setSignedProtocol(const QString &signed_protocol) {
    m_signed_protocol = signed_protocol;
    m_signed_protocol_isSet = true;
}

bool OAIAccountSasParameters::is_signed_protocol_Set() const{
    return m_signed_protocol_isSet;
}

bool OAIAccountSasParameters::is_signed_protocol_Valid() const{
    return m_signed_protocol_isValid;
}

QString OAIAccountSasParameters::getSignedResourceTypes() const {
    return m_signed_resource_types;
}
void OAIAccountSasParameters::setSignedResourceTypes(const QString &signed_resource_types) {
    m_signed_resource_types = signed_resource_types;
    m_signed_resource_types_isSet = true;
}

bool OAIAccountSasParameters::is_signed_resource_types_Set() const{
    return m_signed_resource_types_isSet;
}

bool OAIAccountSasParameters::is_signed_resource_types_Valid() const{
    return m_signed_resource_types_isValid;
}

QString OAIAccountSasParameters::getSignedServices() const {
    return m_signed_services;
}
void OAIAccountSasParameters::setSignedServices(const QString &signed_services) {
    m_signed_services = signed_services;
    m_signed_services_isSet = true;
}

bool OAIAccountSasParameters::is_signed_services_Set() const{
    return m_signed_services_isSet;
}

bool OAIAccountSasParameters::is_signed_services_Valid() const{
    return m_signed_services_isValid;
}

QDateTime OAIAccountSasParameters::getSignedStart() const {
    return m_signed_start;
}
void OAIAccountSasParameters::setSignedStart(const QDateTime &signed_start) {
    m_signed_start = signed_start;
    m_signed_start_isSet = true;
}

bool OAIAccountSasParameters::is_signed_start_Set() const{
    return m_signed_start_isSet;
}

bool OAIAccountSasParameters::is_signed_start_Valid() const{
    return m_signed_start_isValid;
}

bool OAIAccountSasParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_to_sign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_resource_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_services_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountSasParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_signed_expiry_isValid && m_signed_permission_isValid && m_signed_resource_types_isValid && m_signed_services_isValid && true;
}

} // namespace OpenAPI
