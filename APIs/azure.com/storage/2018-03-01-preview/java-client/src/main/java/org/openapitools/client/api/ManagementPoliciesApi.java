/*
 * StorageManagementClient
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ManagementPoliciesRulesSetParameter;
import org.openapitools.client.model.StorageAccountManagementPolicies;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagementPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storageAccountsCreateOrUpdateManagementPolicies
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @param properties The data policy rules to set to a storage account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get management policies successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsCreateOrUpdateManagementPoliciesCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, ManagementPoliciesRulesSetParameter properties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = properties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "managementPolicyName" + "}", localVarApiClient.escapeString(managementPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageAccountsCreateOrUpdateManagementPoliciesValidateBeforeCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, ManagementPoliciesRulesSetParameter properties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageAccountsCreateOrUpdateManagementPolicies(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling storageAccountsCreateOrUpdateManagementPolicies(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageAccountsCreateOrUpdateManagementPolicies(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageAccountsCreateOrUpdateManagementPolicies(Async)");
        }

        // verify the required parameter 'managementPolicyName' is set
        if (managementPolicyName == null) {
            throw new ApiException("Missing the required parameter 'managementPolicyName' when calling storageAccountsCreateOrUpdateManagementPolicies(Async)");
        }

        // verify the required parameter 'properties' is set
        if (properties == null) {
            throw new ApiException("Missing the required parameter 'properties' when calling storageAccountsCreateOrUpdateManagementPolicies(Async)");
        }

        return storageAccountsCreateOrUpdateManagementPoliciesCall(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, properties, _callback);

    }

    /**
     * 
     * Sets the data policy rules associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @param properties The data policy rules to set to a storage account. (required)
     * @return StorageAccountManagementPolicies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get management policies successfully. </td><td>  -  </td></tr>
     </table>
     */
    public StorageAccountManagementPolicies storageAccountsCreateOrUpdateManagementPolicies(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, ManagementPoliciesRulesSetParameter properties) throws ApiException {
        ApiResponse<StorageAccountManagementPolicies> localVarResp = storageAccountsCreateOrUpdateManagementPoliciesWithHttpInfo(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, properties);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets the data policy rules associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @param properties The data policy rules to set to a storage account. (required)
     * @return ApiResponse&lt;StorageAccountManagementPolicies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get management policies successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageAccountManagementPolicies> storageAccountsCreateOrUpdateManagementPoliciesWithHttpInfo(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, ManagementPoliciesRulesSetParameter properties) throws ApiException {
        okhttp3.Call localVarCall = storageAccountsCreateOrUpdateManagementPoliciesValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, properties, null);
        Type localVarReturnType = new TypeToken<StorageAccountManagementPolicies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets the data policy rules associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @param properties The data policy rules to set to a storage account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get management policies successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsCreateOrUpdateManagementPoliciesAsync(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, ManagementPoliciesRulesSetParameter properties, final ApiCallback<StorageAccountManagementPolicies> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageAccountsCreateOrUpdateManagementPoliciesValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, properties, _callback);
        Type localVarReturnType = new TypeToken<StorageAccountManagementPolicies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageAccountsDeleteManagementPolicies
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Delete management policies successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content -- The management policies does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsDeleteManagementPoliciesCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "managementPolicyName" + "}", localVarApiClient.escapeString(managementPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageAccountsDeleteManagementPoliciesValidateBeforeCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageAccountsDeleteManagementPolicies(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling storageAccountsDeleteManagementPolicies(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageAccountsDeleteManagementPolicies(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageAccountsDeleteManagementPolicies(Async)");
        }

        // verify the required parameter 'managementPolicyName' is set
        if (managementPolicyName == null) {
            throw new ApiException("Missing the required parameter 'managementPolicyName' when calling storageAccountsDeleteManagementPolicies(Async)");
        }

        return storageAccountsDeleteManagementPoliciesCall(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, _callback);

    }

    /**
     * 
     * Deletes the data policy rules associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Delete management policies successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content -- The management policies does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void storageAccountsDeleteManagementPolicies(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName) throws ApiException {
        storageAccountsDeleteManagementPoliciesWithHttpInfo(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName);
    }

    /**
     * 
     * Deletes the data policy rules associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Delete management policies successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content -- The management policies does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storageAccountsDeleteManagementPoliciesWithHttpInfo(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName) throws ApiException {
        okhttp3.Call localVarCall = storageAccountsDeleteManagementPoliciesValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the data policy rules associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Delete management policies successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content -- The management policies does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsDeleteManagementPoliciesAsync(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageAccountsDeleteManagementPoliciesValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageAccountsGetManagementPolicies
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get management policies successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsGetManagementPoliciesCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/managementPolicies/{managementPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "managementPolicyName" + "}", localVarApiClient.escapeString(managementPolicyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageAccountsGetManagementPoliciesValidateBeforeCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageAccountsGetManagementPolicies(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling storageAccountsGetManagementPolicies(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageAccountsGetManagementPolicies(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageAccountsGetManagementPolicies(Async)");
        }

        // verify the required parameter 'managementPolicyName' is set
        if (managementPolicyName == null) {
            throw new ApiException("Missing the required parameter 'managementPolicyName' when calling storageAccountsGetManagementPolicies(Async)");
        }

        return storageAccountsGetManagementPoliciesCall(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, _callback);

    }

    /**
     * 
     * Gets the data policy rules associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @return StorageAccountManagementPolicies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get management policies successfully. </td><td>  -  </td></tr>
     </table>
     */
    public StorageAccountManagementPolicies storageAccountsGetManagementPolicies(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName) throws ApiException {
        ApiResponse<StorageAccountManagementPolicies> localVarResp = storageAccountsGetManagementPoliciesWithHttpInfo(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the data policy rules associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @return ApiResponse&lt;StorageAccountManagementPolicies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get management policies successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageAccountManagementPolicies> storageAccountsGetManagementPoliciesWithHttpInfo(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName) throws ApiException {
        okhttp3.Call localVarCall = storageAccountsGetManagementPoliciesValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, null);
        Type localVarReturnType = new TypeToken<StorageAccountManagementPolicies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the data policy rules associated with the specified storage account.
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param accountName The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param managementPolicyName The name of the Storage Account Management Policy. It should always be &#39;default&#39; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Get management policies successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsGetManagementPoliciesAsync(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, String managementPolicyName, final ApiCallback<StorageAccountManagementPolicies> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageAccountsGetManagementPoliciesValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, managementPolicyName, _callback);
        Type localVarReturnType = new TypeToken<StorageAccountManagementPolicies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
