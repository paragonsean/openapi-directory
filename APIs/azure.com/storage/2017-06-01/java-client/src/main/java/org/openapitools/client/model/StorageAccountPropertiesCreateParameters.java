/*
 * StorageManagement
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CustomDomain;
import org.openapitools.client.model.Encryption;
import org.openapitools.client.model.NetworkRuleSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters used to create the storage account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:46:22.209790-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageAccountPropertiesCreateParameters {
  /**
   * Required for storage accounts where kind &#x3D; BlobStorage. The access tier used for billing.
   */
  @JsonAdapter(AccessTierEnum.Adapter.class)
  public enum AccessTierEnum {
    HOT("Hot"),
    
    COOL("Cool");

    private String value;

    AccessTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessTierEnum fromValue(String value) {
      for (AccessTierEnum b : AccessTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_TIER = "accessTier";
  @SerializedName(SERIALIZED_NAME_ACCESS_TIER)
  private AccessTierEnum accessTier;

  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN = "customDomain";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN)
  private CustomDomain customDomain;

  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private Encryption encryption;

  public static final String SERIALIZED_NAME_NETWORK_ACLS = "networkAcls";
  @SerializedName(SERIALIZED_NAME_NETWORK_ACLS)
  private NetworkRuleSet networkAcls;

  public static final String SERIALIZED_NAME_SUPPORTS_HTTPS_TRAFFIC_ONLY = "supportsHttpsTrafficOnly";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_HTTPS_TRAFFIC_ONLY)
  private Boolean supportsHttpsTrafficOnly = false;

  public StorageAccountPropertiesCreateParameters() {
  }

  public StorageAccountPropertiesCreateParameters accessTier(AccessTierEnum accessTier) {
    this.accessTier = accessTier;
    return this;
  }

  /**
   * Required for storage accounts where kind &#x3D; BlobStorage. The access tier used for billing.
   * @return accessTier
   */
  @javax.annotation.Nullable
  public AccessTierEnum getAccessTier() {
    return accessTier;
  }

  public void setAccessTier(AccessTierEnum accessTier) {
    this.accessTier = accessTier;
  }


  public StorageAccountPropertiesCreateParameters customDomain(CustomDomain customDomain) {
    this.customDomain = customDomain;
    return this;
  }

  /**
   * Get customDomain
   * @return customDomain
   */
  @javax.annotation.Nullable
  public CustomDomain getCustomDomain() {
    return customDomain;
  }

  public void setCustomDomain(CustomDomain customDomain) {
    this.customDomain = customDomain;
  }


  public StorageAccountPropertiesCreateParameters encryption(Encryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Get encryption
   * @return encryption
   */
  @javax.annotation.Nullable
  public Encryption getEncryption() {
    return encryption;
  }

  public void setEncryption(Encryption encryption) {
    this.encryption = encryption;
  }


  public StorageAccountPropertiesCreateParameters networkAcls(NetworkRuleSet networkAcls) {
    this.networkAcls = networkAcls;
    return this;
  }

  /**
   * Get networkAcls
   * @return networkAcls
   */
  @javax.annotation.Nullable
  public NetworkRuleSet getNetworkAcls() {
    return networkAcls;
  }

  public void setNetworkAcls(NetworkRuleSet networkAcls) {
    this.networkAcls = networkAcls;
  }


  public StorageAccountPropertiesCreateParameters supportsHttpsTrafficOnly(Boolean supportsHttpsTrafficOnly) {
    this.supportsHttpsTrafficOnly = supportsHttpsTrafficOnly;
    return this;
  }

  /**
   * Allows https traffic only to storage service if sets to true.
   * @return supportsHttpsTrafficOnly
   */
  @javax.annotation.Nullable
  public Boolean getSupportsHttpsTrafficOnly() {
    return supportsHttpsTrafficOnly;
  }

  public void setSupportsHttpsTrafficOnly(Boolean supportsHttpsTrafficOnly) {
    this.supportsHttpsTrafficOnly = supportsHttpsTrafficOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageAccountPropertiesCreateParameters storageAccountPropertiesCreateParameters = (StorageAccountPropertiesCreateParameters) o;
    return Objects.equals(this.accessTier, storageAccountPropertiesCreateParameters.accessTier) &&
        Objects.equals(this.customDomain, storageAccountPropertiesCreateParameters.customDomain) &&
        Objects.equals(this.encryption, storageAccountPropertiesCreateParameters.encryption) &&
        Objects.equals(this.networkAcls, storageAccountPropertiesCreateParameters.networkAcls) &&
        Objects.equals(this.supportsHttpsTrafficOnly, storageAccountPropertiesCreateParameters.supportsHttpsTrafficOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTier, customDomain, encryption, networkAcls, supportsHttpsTrafficOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageAccountPropertiesCreateParameters {\n");
    sb.append("    accessTier: ").append(toIndentedString(accessTier)).append("\n");
    sb.append("    customDomain: ").append(toIndentedString(customDomain)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    networkAcls: ").append(toIndentedString(networkAcls)).append("\n");
    sb.append("    supportsHttpsTrafficOnly: ").append(toIndentedString(supportsHttpsTrafficOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessTier");
    openapiFields.add("customDomain");
    openapiFields.add("encryption");
    openapiFields.add("networkAcls");
    openapiFields.add("supportsHttpsTrafficOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageAccountPropertiesCreateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageAccountPropertiesCreateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageAccountPropertiesCreateParameters is not found in the empty JSON string", StorageAccountPropertiesCreateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageAccountPropertiesCreateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageAccountPropertiesCreateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessTier") != null && !jsonObj.get("accessTier").isJsonNull()) && !jsonObj.get("accessTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessTier").toString()));
      }
      // validate the optional field `accessTier`
      if (jsonObj.get("accessTier") != null && !jsonObj.get("accessTier").isJsonNull()) {
        AccessTierEnum.validateJsonElement(jsonObj.get("accessTier"));
      }
      // validate the optional field `customDomain`
      if (jsonObj.get("customDomain") != null && !jsonObj.get("customDomain").isJsonNull()) {
        CustomDomain.validateJsonElement(jsonObj.get("customDomain"));
      }
      // validate the optional field `encryption`
      if (jsonObj.get("encryption") != null && !jsonObj.get("encryption").isJsonNull()) {
        Encryption.validateJsonElement(jsonObj.get("encryption"));
      }
      // validate the optional field `networkAcls`
      if (jsonObj.get("networkAcls") != null && !jsonObj.get("networkAcls").isJsonNull()) {
        NetworkRuleSet.validateJsonElement(jsonObj.get("networkAcls"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageAccountPropertiesCreateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageAccountPropertiesCreateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageAccountPropertiesCreateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageAccountPropertiesCreateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageAccountPropertiesCreateParameters>() {
           @Override
           public void write(JsonWriter out, StorageAccountPropertiesCreateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageAccountPropertiesCreateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageAccountPropertiesCreateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageAccountPropertiesCreateParameters
   * @throws IOException if the JSON string is invalid with respect to StorageAccountPropertiesCreateParameters
   */
  public static StorageAccountPropertiesCreateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageAccountPropertiesCreateParameters.class);
  }

  /**
   * Convert an instance of StorageAccountPropertiesCreateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

