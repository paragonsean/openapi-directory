/*
 * StorageManagement
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2017-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IPRule;
import org.openapitools.client.model.VirtualNetworkRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Network rule set
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:46:22.209790-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkRuleSet {
  /**
   * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \&quot;Logging, Metrics\&quot;), or None to bypass none of those traffics.
   */
  @JsonAdapter(BypassEnum.Adapter.class)
  public enum BypassEnum {
    NONE("None"),
    
    LOGGING("Logging"),
    
    METRICS("Metrics"),
    
    AZURE_SERVICES("AzureServices");

    private String value;

    BypassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BypassEnum fromValue(String value) {
      for (BypassEnum b : BypassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BypassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BypassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BypassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BypassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BypassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BYPASS = "bypass";
  @SerializedName(SERIALIZED_NAME_BYPASS)
  private BypassEnum bypass = BypassEnum.AZURE_SERVICES;

  /**
   * Specifies the default action of allow or deny when no other rules match.
   */
  @JsonAdapter(DefaultActionEnum.Adapter.class)
  public enum DefaultActionEnum {
    ALLOW("Allow"),
    
    DENY("Deny");

    private String value;

    DefaultActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultActionEnum fromValue(String value) {
      for (DefaultActionEnum b : DefaultActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_ACTION = "defaultAction";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACTION)
  private DefaultActionEnum defaultAction = DefaultActionEnum.ALLOW;

  public static final String SERIALIZED_NAME_IP_RULES = "ipRules";
  @SerializedName(SERIALIZED_NAME_IP_RULES)
  private List<IPRule> ipRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_RULES = "virtualNetworkRules";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_RULES)
  private List<VirtualNetworkRule> virtualNetworkRules = new ArrayList<>();

  public NetworkRuleSet() {
  }

  public NetworkRuleSet bypass(BypassEnum bypass) {
    this.bypass = bypass;
    return this;
  }

  /**
   * Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \&quot;Logging, Metrics\&quot;), or None to bypass none of those traffics.
   * @return bypass
   */
  @javax.annotation.Nullable
  public BypassEnum getBypass() {
    return bypass;
  }

  public void setBypass(BypassEnum bypass) {
    this.bypass = bypass;
  }


  public NetworkRuleSet defaultAction(DefaultActionEnum defaultAction) {
    this.defaultAction = defaultAction;
    return this;
  }

  /**
   * Specifies the default action of allow or deny when no other rules match.
   * @return defaultAction
   */
  @javax.annotation.Nonnull
  public DefaultActionEnum getDefaultAction() {
    return defaultAction;
  }

  public void setDefaultAction(DefaultActionEnum defaultAction) {
    this.defaultAction = defaultAction;
  }


  public NetworkRuleSet ipRules(List<IPRule> ipRules) {
    this.ipRules = ipRules;
    return this;
  }

  public NetworkRuleSet addIpRulesItem(IPRule ipRulesItem) {
    if (this.ipRules == null) {
      this.ipRules = new ArrayList<>();
    }
    this.ipRules.add(ipRulesItem);
    return this;
  }

  /**
   * Sets the IP ACL rules
   * @return ipRules
   */
  @javax.annotation.Nullable
  public List<IPRule> getIpRules() {
    return ipRules;
  }

  public void setIpRules(List<IPRule> ipRules) {
    this.ipRules = ipRules;
  }


  public NetworkRuleSet virtualNetworkRules(List<VirtualNetworkRule> virtualNetworkRules) {
    this.virtualNetworkRules = virtualNetworkRules;
    return this;
  }

  public NetworkRuleSet addVirtualNetworkRulesItem(VirtualNetworkRule virtualNetworkRulesItem) {
    if (this.virtualNetworkRules == null) {
      this.virtualNetworkRules = new ArrayList<>();
    }
    this.virtualNetworkRules.add(virtualNetworkRulesItem);
    return this;
  }

  /**
   * Sets the virtual network rules
   * @return virtualNetworkRules
   */
  @javax.annotation.Nullable
  public List<VirtualNetworkRule> getVirtualNetworkRules() {
    return virtualNetworkRules;
  }

  public void setVirtualNetworkRules(List<VirtualNetworkRule> virtualNetworkRules) {
    this.virtualNetworkRules = virtualNetworkRules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkRuleSet networkRuleSet = (NetworkRuleSet) o;
    return Objects.equals(this.bypass, networkRuleSet.bypass) &&
        Objects.equals(this.defaultAction, networkRuleSet.defaultAction) &&
        Objects.equals(this.ipRules, networkRuleSet.ipRules) &&
        Objects.equals(this.virtualNetworkRules, networkRuleSet.virtualNetworkRules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bypass, defaultAction, ipRules, virtualNetworkRules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkRuleSet {\n");
    sb.append("    bypass: ").append(toIndentedString(bypass)).append("\n");
    sb.append("    defaultAction: ").append(toIndentedString(defaultAction)).append("\n");
    sb.append("    ipRules: ").append(toIndentedString(ipRules)).append("\n");
    sb.append("    virtualNetworkRules: ").append(toIndentedString(virtualNetworkRules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bypass");
    openapiFields.add("defaultAction");
    openapiFields.add("ipRules");
    openapiFields.add("virtualNetworkRules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultAction");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkRuleSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkRuleSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkRuleSet is not found in the empty JSON string", NetworkRuleSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkRuleSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkRuleSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NetworkRuleSet.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bypass") != null && !jsonObj.get("bypass").isJsonNull()) && !jsonObj.get("bypass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bypass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bypass").toString()));
      }
      // validate the optional field `bypass`
      if (jsonObj.get("bypass") != null && !jsonObj.get("bypass").isJsonNull()) {
        BypassEnum.validateJsonElement(jsonObj.get("bypass"));
      }
      if (!jsonObj.get("defaultAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultAction").toString()));
      }
      // validate the required field `defaultAction`
      DefaultActionEnum.validateJsonElement(jsonObj.get("defaultAction"));
      if (jsonObj.get("ipRules") != null && !jsonObj.get("ipRules").isJsonNull()) {
        JsonArray jsonArrayipRules = jsonObj.getAsJsonArray("ipRules");
        if (jsonArrayipRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipRules` to be an array in the JSON string but got `%s`", jsonObj.get("ipRules").toString()));
          }

          // validate the optional field `ipRules` (array)
          for (int i = 0; i < jsonArrayipRules.size(); i++) {
            IPRule.validateJsonElement(jsonArrayipRules.get(i));
          };
        }
      }
      if (jsonObj.get("virtualNetworkRules") != null && !jsonObj.get("virtualNetworkRules").isJsonNull()) {
        JsonArray jsonArrayvirtualNetworkRules = jsonObj.getAsJsonArray("virtualNetworkRules");
        if (jsonArrayvirtualNetworkRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("virtualNetworkRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkRules` to be an array in the JSON string but got `%s`", jsonObj.get("virtualNetworkRules").toString()));
          }

          // validate the optional field `virtualNetworkRules` (array)
          for (int i = 0; i < jsonArrayvirtualNetworkRules.size(); i++) {
            VirtualNetworkRule.validateJsonElement(jsonArrayvirtualNetworkRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkRuleSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkRuleSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkRuleSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkRuleSet.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkRuleSet>() {
           @Override
           public void write(JsonWriter out, NetworkRuleSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkRuleSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkRuleSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkRuleSet
   * @throws IOException if the JSON string is invalid with respect to NetworkRuleSet
   */
  public static NetworkRuleSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkRuleSet.class);
  }

  /**
   * Convert an instance of NetworkRuleSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

