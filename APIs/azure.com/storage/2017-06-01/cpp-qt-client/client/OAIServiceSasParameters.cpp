/**
 * StorageManagement
 * The Azure Storage Management API.
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceSasParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceSasParameters::OAIServiceSasParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceSasParameters::OAIServiceSasParameters() {
    this->initializeModel();
}

OAIServiceSasParameters::~OAIServiceSasParameters() {}

void OAIServiceSasParameters::initializeModel() {

    m_canonicalized_resource_isSet = false;
    m_canonicalized_resource_isValid = false;

    m_end_pk_isSet = false;
    m_end_pk_isValid = false;

    m_end_rk_isSet = false;
    m_end_rk_isValid = false;

    m_key_to_sign_isSet = false;
    m_key_to_sign_isValid = false;

    m_rscc_isSet = false;
    m_rscc_isValid = false;

    m_rscd_isSet = false;
    m_rscd_isValid = false;

    m_rsce_isSet = false;
    m_rsce_isValid = false;

    m_rscl_isSet = false;
    m_rscl_isValid = false;

    m_rsct_isSet = false;
    m_rsct_isValid = false;

    m_signed_expiry_isSet = false;
    m_signed_expiry_isValid = false;

    m_signed_identifier_isSet = false;
    m_signed_identifier_isValid = false;

    m_signed_ip_isSet = false;
    m_signed_ip_isValid = false;

    m_signed_permission_isSet = false;
    m_signed_permission_isValid = false;

    m_signed_protocol_isSet = false;
    m_signed_protocol_isValid = false;

    m_signed_resource_isSet = false;
    m_signed_resource_isValid = false;

    m_signed_start_isSet = false;
    m_signed_start_isValid = false;

    m_start_pk_isSet = false;
    m_start_pk_isValid = false;

    m_start_rk_isSet = false;
    m_start_rk_isValid = false;
}

void OAIServiceSasParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceSasParameters::fromJsonObject(QJsonObject json) {

    m_canonicalized_resource_isValid = ::OpenAPI::fromJsonValue(m_canonicalized_resource, json[QString("canonicalizedResource")]);
    m_canonicalized_resource_isSet = !json[QString("canonicalizedResource")].isNull() && m_canonicalized_resource_isValid;

    m_end_pk_isValid = ::OpenAPI::fromJsonValue(m_end_pk, json[QString("endPk")]);
    m_end_pk_isSet = !json[QString("endPk")].isNull() && m_end_pk_isValid;

    m_end_rk_isValid = ::OpenAPI::fromJsonValue(m_end_rk, json[QString("endRk")]);
    m_end_rk_isSet = !json[QString("endRk")].isNull() && m_end_rk_isValid;

    m_key_to_sign_isValid = ::OpenAPI::fromJsonValue(m_key_to_sign, json[QString("keyToSign")]);
    m_key_to_sign_isSet = !json[QString("keyToSign")].isNull() && m_key_to_sign_isValid;

    m_rscc_isValid = ::OpenAPI::fromJsonValue(m_rscc, json[QString("rscc")]);
    m_rscc_isSet = !json[QString("rscc")].isNull() && m_rscc_isValid;

    m_rscd_isValid = ::OpenAPI::fromJsonValue(m_rscd, json[QString("rscd")]);
    m_rscd_isSet = !json[QString("rscd")].isNull() && m_rscd_isValid;

    m_rsce_isValid = ::OpenAPI::fromJsonValue(m_rsce, json[QString("rsce")]);
    m_rsce_isSet = !json[QString("rsce")].isNull() && m_rsce_isValid;

    m_rscl_isValid = ::OpenAPI::fromJsonValue(m_rscl, json[QString("rscl")]);
    m_rscl_isSet = !json[QString("rscl")].isNull() && m_rscl_isValid;

    m_rsct_isValid = ::OpenAPI::fromJsonValue(m_rsct, json[QString("rsct")]);
    m_rsct_isSet = !json[QString("rsct")].isNull() && m_rsct_isValid;

    m_signed_expiry_isValid = ::OpenAPI::fromJsonValue(m_signed_expiry, json[QString("signedExpiry")]);
    m_signed_expiry_isSet = !json[QString("signedExpiry")].isNull() && m_signed_expiry_isValid;

    m_signed_identifier_isValid = ::OpenAPI::fromJsonValue(m_signed_identifier, json[QString("signedIdentifier")]);
    m_signed_identifier_isSet = !json[QString("signedIdentifier")].isNull() && m_signed_identifier_isValid;

    m_signed_ip_isValid = ::OpenAPI::fromJsonValue(m_signed_ip, json[QString("signedIp")]);
    m_signed_ip_isSet = !json[QString("signedIp")].isNull() && m_signed_ip_isValid;

    m_signed_permission_isValid = ::OpenAPI::fromJsonValue(m_signed_permission, json[QString("signedPermission")]);
    m_signed_permission_isSet = !json[QString("signedPermission")].isNull() && m_signed_permission_isValid;

    m_signed_protocol_isValid = ::OpenAPI::fromJsonValue(m_signed_protocol, json[QString("signedProtocol")]);
    m_signed_protocol_isSet = !json[QString("signedProtocol")].isNull() && m_signed_protocol_isValid;

    m_signed_resource_isValid = ::OpenAPI::fromJsonValue(m_signed_resource, json[QString("signedResource")]);
    m_signed_resource_isSet = !json[QString("signedResource")].isNull() && m_signed_resource_isValid;

    m_signed_start_isValid = ::OpenAPI::fromJsonValue(m_signed_start, json[QString("signedStart")]);
    m_signed_start_isSet = !json[QString("signedStart")].isNull() && m_signed_start_isValid;

    m_start_pk_isValid = ::OpenAPI::fromJsonValue(m_start_pk, json[QString("startPk")]);
    m_start_pk_isSet = !json[QString("startPk")].isNull() && m_start_pk_isValid;

    m_start_rk_isValid = ::OpenAPI::fromJsonValue(m_start_rk, json[QString("startRk")]);
    m_start_rk_isSet = !json[QString("startRk")].isNull() && m_start_rk_isValid;
}

QString OAIServiceSasParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceSasParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_canonicalized_resource_isSet) {
        obj.insert(QString("canonicalizedResource"), ::OpenAPI::toJsonValue(m_canonicalized_resource));
    }
    if (m_end_pk_isSet) {
        obj.insert(QString("endPk"), ::OpenAPI::toJsonValue(m_end_pk));
    }
    if (m_end_rk_isSet) {
        obj.insert(QString("endRk"), ::OpenAPI::toJsonValue(m_end_rk));
    }
    if (m_key_to_sign_isSet) {
        obj.insert(QString("keyToSign"), ::OpenAPI::toJsonValue(m_key_to_sign));
    }
    if (m_rscc_isSet) {
        obj.insert(QString("rscc"), ::OpenAPI::toJsonValue(m_rscc));
    }
    if (m_rscd_isSet) {
        obj.insert(QString("rscd"), ::OpenAPI::toJsonValue(m_rscd));
    }
    if (m_rsce_isSet) {
        obj.insert(QString("rsce"), ::OpenAPI::toJsonValue(m_rsce));
    }
    if (m_rscl_isSet) {
        obj.insert(QString("rscl"), ::OpenAPI::toJsonValue(m_rscl));
    }
    if (m_rsct_isSet) {
        obj.insert(QString("rsct"), ::OpenAPI::toJsonValue(m_rsct));
    }
    if (m_signed_expiry_isSet) {
        obj.insert(QString("signedExpiry"), ::OpenAPI::toJsonValue(m_signed_expiry));
    }
    if (m_signed_identifier_isSet) {
        obj.insert(QString("signedIdentifier"), ::OpenAPI::toJsonValue(m_signed_identifier));
    }
    if (m_signed_ip_isSet) {
        obj.insert(QString("signedIp"), ::OpenAPI::toJsonValue(m_signed_ip));
    }
    if (m_signed_permission_isSet) {
        obj.insert(QString("signedPermission"), ::OpenAPI::toJsonValue(m_signed_permission));
    }
    if (m_signed_protocol_isSet) {
        obj.insert(QString("signedProtocol"), ::OpenAPI::toJsonValue(m_signed_protocol));
    }
    if (m_signed_resource_isSet) {
        obj.insert(QString("signedResource"), ::OpenAPI::toJsonValue(m_signed_resource));
    }
    if (m_signed_start_isSet) {
        obj.insert(QString("signedStart"), ::OpenAPI::toJsonValue(m_signed_start));
    }
    if (m_start_pk_isSet) {
        obj.insert(QString("startPk"), ::OpenAPI::toJsonValue(m_start_pk));
    }
    if (m_start_rk_isSet) {
        obj.insert(QString("startRk"), ::OpenAPI::toJsonValue(m_start_rk));
    }
    return obj;
}

QString OAIServiceSasParameters::getCanonicalizedResource() const {
    return m_canonicalized_resource;
}
void OAIServiceSasParameters::setCanonicalizedResource(const QString &canonicalized_resource) {
    m_canonicalized_resource = canonicalized_resource;
    m_canonicalized_resource_isSet = true;
}

bool OAIServiceSasParameters::is_canonicalized_resource_Set() const{
    return m_canonicalized_resource_isSet;
}

bool OAIServiceSasParameters::is_canonicalized_resource_Valid() const{
    return m_canonicalized_resource_isValid;
}

QString OAIServiceSasParameters::getEndPk() const {
    return m_end_pk;
}
void OAIServiceSasParameters::setEndPk(const QString &end_pk) {
    m_end_pk = end_pk;
    m_end_pk_isSet = true;
}

bool OAIServiceSasParameters::is_end_pk_Set() const{
    return m_end_pk_isSet;
}

bool OAIServiceSasParameters::is_end_pk_Valid() const{
    return m_end_pk_isValid;
}

QString OAIServiceSasParameters::getEndRk() const {
    return m_end_rk;
}
void OAIServiceSasParameters::setEndRk(const QString &end_rk) {
    m_end_rk = end_rk;
    m_end_rk_isSet = true;
}

bool OAIServiceSasParameters::is_end_rk_Set() const{
    return m_end_rk_isSet;
}

bool OAIServiceSasParameters::is_end_rk_Valid() const{
    return m_end_rk_isValid;
}

QString OAIServiceSasParameters::getKeyToSign() const {
    return m_key_to_sign;
}
void OAIServiceSasParameters::setKeyToSign(const QString &key_to_sign) {
    m_key_to_sign = key_to_sign;
    m_key_to_sign_isSet = true;
}

bool OAIServiceSasParameters::is_key_to_sign_Set() const{
    return m_key_to_sign_isSet;
}

bool OAIServiceSasParameters::is_key_to_sign_Valid() const{
    return m_key_to_sign_isValid;
}

QString OAIServiceSasParameters::getRscc() const {
    return m_rscc;
}
void OAIServiceSasParameters::setRscc(const QString &rscc) {
    m_rscc = rscc;
    m_rscc_isSet = true;
}

bool OAIServiceSasParameters::is_rscc_Set() const{
    return m_rscc_isSet;
}

bool OAIServiceSasParameters::is_rscc_Valid() const{
    return m_rscc_isValid;
}

QString OAIServiceSasParameters::getRscd() const {
    return m_rscd;
}
void OAIServiceSasParameters::setRscd(const QString &rscd) {
    m_rscd = rscd;
    m_rscd_isSet = true;
}

bool OAIServiceSasParameters::is_rscd_Set() const{
    return m_rscd_isSet;
}

bool OAIServiceSasParameters::is_rscd_Valid() const{
    return m_rscd_isValid;
}

QString OAIServiceSasParameters::getRsce() const {
    return m_rsce;
}
void OAIServiceSasParameters::setRsce(const QString &rsce) {
    m_rsce = rsce;
    m_rsce_isSet = true;
}

bool OAIServiceSasParameters::is_rsce_Set() const{
    return m_rsce_isSet;
}

bool OAIServiceSasParameters::is_rsce_Valid() const{
    return m_rsce_isValid;
}

QString OAIServiceSasParameters::getRscl() const {
    return m_rscl;
}
void OAIServiceSasParameters::setRscl(const QString &rscl) {
    m_rscl = rscl;
    m_rscl_isSet = true;
}

bool OAIServiceSasParameters::is_rscl_Set() const{
    return m_rscl_isSet;
}

bool OAIServiceSasParameters::is_rscl_Valid() const{
    return m_rscl_isValid;
}

QString OAIServiceSasParameters::getRsct() const {
    return m_rsct;
}
void OAIServiceSasParameters::setRsct(const QString &rsct) {
    m_rsct = rsct;
    m_rsct_isSet = true;
}

bool OAIServiceSasParameters::is_rsct_Set() const{
    return m_rsct_isSet;
}

bool OAIServiceSasParameters::is_rsct_Valid() const{
    return m_rsct_isValid;
}

QDateTime OAIServiceSasParameters::getSignedExpiry() const {
    return m_signed_expiry;
}
void OAIServiceSasParameters::setSignedExpiry(const QDateTime &signed_expiry) {
    m_signed_expiry = signed_expiry;
    m_signed_expiry_isSet = true;
}

bool OAIServiceSasParameters::is_signed_expiry_Set() const{
    return m_signed_expiry_isSet;
}

bool OAIServiceSasParameters::is_signed_expiry_Valid() const{
    return m_signed_expiry_isValid;
}

QString OAIServiceSasParameters::getSignedIdentifier() const {
    return m_signed_identifier;
}
void OAIServiceSasParameters::setSignedIdentifier(const QString &signed_identifier) {
    m_signed_identifier = signed_identifier;
    m_signed_identifier_isSet = true;
}

bool OAIServiceSasParameters::is_signed_identifier_Set() const{
    return m_signed_identifier_isSet;
}

bool OAIServiceSasParameters::is_signed_identifier_Valid() const{
    return m_signed_identifier_isValid;
}

QString OAIServiceSasParameters::getSignedIp() const {
    return m_signed_ip;
}
void OAIServiceSasParameters::setSignedIp(const QString &signed_ip) {
    m_signed_ip = signed_ip;
    m_signed_ip_isSet = true;
}

bool OAIServiceSasParameters::is_signed_ip_Set() const{
    return m_signed_ip_isSet;
}

bool OAIServiceSasParameters::is_signed_ip_Valid() const{
    return m_signed_ip_isValid;
}

QString OAIServiceSasParameters::getSignedPermission() const {
    return m_signed_permission;
}
void OAIServiceSasParameters::setSignedPermission(const QString &signed_permission) {
    m_signed_permission = signed_permission;
    m_signed_permission_isSet = true;
}

bool OAIServiceSasParameters::is_signed_permission_Set() const{
    return m_signed_permission_isSet;
}

bool OAIServiceSasParameters::is_signed_permission_Valid() const{
    return m_signed_permission_isValid;
}

QString OAIServiceSasParameters::getSignedProtocol() const {
    return m_signed_protocol;
}
void OAIServiceSasParameters::setSignedProtocol(const QString &signed_protocol) {
    m_signed_protocol = signed_protocol;
    m_signed_protocol_isSet = true;
}

bool OAIServiceSasParameters::is_signed_protocol_Set() const{
    return m_signed_protocol_isSet;
}

bool OAIServiceSasParameters::is_signed_protocol_Valid() const{
    return m_signed_protocol_isValid;
}

QString OAIServiceSasParameters::getSignedResource() const {
    return m_signed_resource;
}
void OAIServiceSasParameters::setSignedResource(const QString &signed_resource) {
    m_signed_resource = signed_resource;
    m_signed_resource_isSet = true;
}

bool OAIServiceSasParameters::is_signed_resource_Set() const{
    return m_signed_resource_isSet;
}

bool OAIServiceSasParameters::is_signed_resource_Valid() const{
    return m_signed_resource_isValid;
}

QDateTime OAIServiceSasParameters::getSignedStart() const {
    return m_signed_start;
}
void OAIServiceSasParameters::setSignedStart(const QDateTime &signed_start) {
    m_signed_start = signed_start;
    m_signed_start_isSet = true;
}

bool OAIServiceSasParameters::is_signed_start_Set() const{
    return m_signed_start_isSet;
}

bool OAIServiceSasParameters::is_signed_start_Valid() const{
    return m_signed_start_isValid;
}

QString OAIServiceSasParameters::getStartPk() const {
    return m_start_pk;
}
void OAIServiceSasParameters::setStartPk(const QString &start_pk) {
    m_start_pk = start_pk;
    m_start_pk_isSet = true;
}

bool OAIServiceSasParameters::is_start_pk_Set() const{
    return m_start_pk_isSet;
}

bool OAIServiceSasParameters::is_start_pk_Valid() const{
    return m_start_pk_isValid;
}

QString OAIServiceSasParameters::getStartRk() const {
    return m_start_rk;
}
void OAIServiceSasParameters::setStartRk(const QString &start_rk) {
    m_start_rk = start_rk;
    m_start_rk_isSet = true;
}

bool OAIServiceSasParameters::is_start_rk_Set() const{
    return m_start_rk_isSet;
}

bool OAIServiceSasParameters::is_start_rk_Valid() const{
    return m_start_rk_isValid;
}

bool OAIServiceSasParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canonicalized_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_pk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_rk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_to_sign_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rscc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rscd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsce_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rscl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rsct_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_pk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_rk_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceSasParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_canonicalized_resource_isValid && m_signed_resource_isValid && true;
}

} // namespace OpenAPI
