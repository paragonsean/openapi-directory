# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_rule import IPRule
from openapi_server.models.virtual_network_rule import VirtualNetworkRule
from openapi_server import util


class NetworkRuleSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bypass: str='AzureServices', default_action: str='Allow', ip_rules: List[IPRule]=None, virtual_network_rules: List[VirtualNetworkRule]=None):
        """NetworkRuleSet - a model defined in OpenAPI

        :param bypass: The bypass of this NetworkRuleSet.
        :param default_action: The default_action of this NetworkRuleSet.
        :param ip_rules: The ip_rules of this NetworkRuleSet.
        :param virtual_network_rules: The virtual_network_rules of this NetworkRuleSet.
        """
        self.openapi_types = {
            'bypass': str,
            'default_action': str,
            'ip_rules': List[IPRule],
            'virtual_network_rules': List[VirtualNetworkRule]
        }

        self.attribute_map = {
            'bypass': 'bypass',
            'default_action': 'defaultAction',
            'ip_rules': 'ipRules',
            'virtual_network_rules': 'virtualNetworkRules'
        }

        self._bypass = bypass
        self._default_action = default_action
        self._ip_rules = ip_rules
        self._virtual_network_rules = virtual_network_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkRuleSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkRuleSet of this NetworkRuleSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bypass(self):
        """Gets the bypass of this NetworkRuleSet.

        Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.

        :return: The bypass of this NetworkRuleSet.
        :rtype: str
        """
        return self._bypass

    @bypass.setter
    def bypass(self, bypass):
        """Sets the bypass of this NetworkRuleSet.

        Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics.

        :param bypass: The bypass of this NetworkRuleSet.
        :type bypass: str
        """
        allowed_values = ["None", "Logging", "Metrics", "AzureServices"]  # noqa: E501
        if bypass not in allowed_values:
            raise ValueError(
                "Invalid value for `bypass` ({0}), must be one of {1}"
                .format(bypass, allowed_values)
            )

        self._bypass = bypass

    @property
    def default_action(self):
        """Gets the default_action of this NetworkRuleSet.

        Specifies the default action of allow or deny when no other rules match.

        :return: The default_action of this NetworkRuleSet.
        :rtype: str
        """
        return self._default_action

    @default_action.setter
    def default_action(self, default_action):
        """Sets the default_action of this NetworkRuleSet.

        Specifies the default action of allow or deny when no other rules match.

        :param default_action: The default_action of this NetworkRuleSet.
        :type default_action: str
        """
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if default_action not in allowed_values:
            raise ValueError(
                "Invalid value for `default_action` ({0}), must be one of {1}"
                .format(default_action, allowed_values)
            )

        self._default_action = default_action

    @property
    def ip_rules(self):
        """Gets the ip_rules of this NetworkRuleSet.

        Sets the IP ACL rules

        :return: The ip_rules of this NetworkRuleSet.
        :rtype: List[IPRule]
        """
        return self._ip_rules

    @ip_rules.setter
    def ip_rules(self, ip_rules):
        """Sets the ip_rules of this NetworkRuleSet.

        Sets the IP ACL rules

        :param ip_rules: The ip_rules of this NetworkRuleSet.
        :type ip_rules: List[IPRule]
        """

        self._ip_rules = ip_rules

    @property
    def virtual_network_rules(self):
        """Gets the virtual_network_rules of this NetworkRuleSet.

        Sets the virtual network rules

        :return: The virtual_network_rules of this NetworkRuleSet.
        :rtype: List[VirtualNetworkRule]
        """
        return self._virtual_network_rules

    @virtual_network_rules.setter
    def virtual_network_rules(self, virtual_network_rules):
        """Sets the virtual_network_rules of this NetworkRuleSet.

        Sets the virtual network rules

        :param virtual_network_rules: The virtual_network_rules of this NetworkRuleSet.
        :type virtual_network_rules: List[VirtualNetworkRule]
        """

        self._virtual_network_rules = virtual_network_rules
