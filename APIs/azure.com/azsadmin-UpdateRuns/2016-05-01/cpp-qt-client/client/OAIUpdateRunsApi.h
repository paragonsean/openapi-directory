/**
 * UpdateAdminClient
 * Update run operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUpdateRunsApi_H
#define OAI_OAIUpdateRunsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUpdateRun.h"
#include "OAIUpdateRunList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUpdateRunsApi : public QObject {
    Q_OBJECT

public:
    OAIUpdateRunsApi(const int timeOut = 0);
    ~OAIUpdateRunsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  update_location QString [required]
    * @param[in]  update_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void updateRunsGet(const QString &subscription_id, const QString &resource_group_name, const QString &update_location, const QString &update_name, const QString &run_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  update_location QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void updateRunsGetTopLevel(const QString &subscription_id, const QString &resource_group_name, const QString &update_location, const QString &run_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  update_location QString [required]
    * @param[in]  update_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void updateRunsList(const QString &subscription_id, const QString &resource_group_name, const QString &update_location, const QString &update_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  update_location QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void updateRunsListTopLevel(const QString &subscription_id, const QString &resource_group_name, const QString &update_location, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  update_location QString [required]
    * @param[in]  update_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void updateRunsRerun(const QString &subscription_id, const QString &resource_group_name, const QString &update_location, const QString &update_name, const QString &run_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void updateRunsGetCallback(OAIHttpRequestWorker *worker);
    void updateRunsGetTopLevelCallback(OAIHttpRequestWorker *worker);
    void updateRunsListCallback(OAIHttpRequestWorker *worker);
    void updateRunsListTopLevelCallback(OAIHttpRequestWorker *worker);
    void updateRunsRerunCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void updateRunsGetSignal(OAIUpdateRun summary);
    void updateRunsGetTopLevelSignal(OAIUpdateRun summary);
    void updateRunsListSignal(OAIUpdateRunList summary);
    void updateRunsListTopLevelSignal(OAIUpdateRunList summary);
    void updateRunsRerunSignal();


    void updateRunsGetSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRun summary);
    void updateRunsGetTopLevelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRun summary);
    void updateRunsListSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRunList summary);
    void updateRunsListTopLevelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRunList summary);
    void updateRunsRerunSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use updateRunsGetSignalError() instead")
    void updateRunsGetSignalE(OAIUpdateRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRunsGetSignalError(OAIUpdateRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRunsGetTopLevelSignalError() instead")
    void updateRunsGetTopLevelSignalE(OAIUpdateRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRunsGetTopLevelSignalError(OAIUpdateRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRunsListSignalError() instead")
    void updateRunsListSignalE(OAIUpdateRunList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRunsListSignalError(OAIUpdateRunList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRunsListTopLevelSignalError() instead")
    void updateRunsListTopLevelSignalE(OAIUpdateRunList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRunsListTopLevelSignalError(OAIUpdateRunList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRunsRerunSignalError() instead")
    void updateRunsRerunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRunsRerunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use updateRunsGetSignalErrorFull() instead")
    void updateRunsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRunsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRunsGetTopLevelSignalErrorFull() instead")
    void updateRunsGetTopLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRunsGetTopLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRunsListSignalErrorFull() instead")
    void updateRunsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRunsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRunsListTopLevelSignalErrorFull() instead")
    void updateRunsListTopLevelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRunsListTopLevelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRunsRerunSignalErrorFull() instead")
    void updateRunsRerunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRunsRerunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
