/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RegulatoryComplianceAssessment from '../model/RegulatoryComplianceAssessment';
import RegulatoryComplianceAssessmentList from '../model/RegulatoryComplianceAssessmentList';
import RegulatoryComplianceControl from '../model/RegulatoryComplianceControl';
import RegulatoryComplianceControlList from '../model/RegulatoryComplianceControlList';
import RegulatoryComplianceStandard from '../model/RegulatoryComplianceStandard';
import RegulatoryComplianceStandardList from '../model/RegulatoryComplianceStandardList';
import RegulatoryComplianceStandardsListDefaultResponse from '../model/RegulatoryComplianceStandardsListDefaultResponse';

/**
* RegulatoryCompliance service.
* @module api/RegulatoryComplianceApi
* @version 2019-01-01-preview
*/
export default class RegulatoryComplianceApi {

    /**
    * Constructs a new RegulatoryComplianceApi. 
    * @alias module:api/RegulatoryComplianceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the regulatoryComplianceAssessmentsGet operation.
     * @callback module:api/RegulatoryComplianceApi~regulatoryComplianceAssessmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegulatoryComplianceAssessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Supported regulatory compliance details and state for selected assessment
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} regulatoryComplianceStandardName Name of the regulatory compliance standard object
     * @param {String} regulatoryComplianceControlName Name of the regulatory compliance control object
     * @param {String} regulatoryComplianceAssessmentName Name of the regulatory compliance assessment object
     * @param {module:api/RegulatoryComplianceApi~regulatoryComplianceAssessmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegulatoryComplianceAssessment}
     */
    regulatoryComplianceAssessmentsGet(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, regulatoryComplianceAssessmentName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling regulatoryComplianceAssessmentsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceAssessmentsGet");
      }
      // verify the required parameter 'regulatoryComplianceStandardName' is set
      if (regulatoryComplianceStandardName === undefined || regulatoryComplianceStandardName === null) {
        throw new Error("Missing the required parameter 'regulatoryComplianceStandardName' when calling regulatoryComplianceAssessmentsGet");
      }
      // verify the required parameter 'regulatoryComplianceControlName' is set
      if (regulatoryComplianceControlName === undefined || regulatoryComplianceControlName === null) {
        throw new Error("Missing the required parameter 'regulatoryComplianceControlName' when calling regulatoryComplianceAssessmentsGet");
      }
      // verify the required parameter 'regulatoryComplianceAssessmentName' is set
      if (regulatoryComplianceAssessmentName === undefined || regulatoryComplianceAssessmentName === null) {
        throw new Error("Missing the required parameter 'regulatoryComplianceAssessmentName' when calling regulatoryComplianceAssessmentsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'regulatoryComplianceStandardName': regulatoryComplianceStandardName,
        'regulatoryComplianceControlName': regulatoryComplianceControlName,
        'regulatoryComplianceAssessmentName': regulatoryComplianceAssessmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegulatoryComplianceAssessment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls/{regulatoryComplianceControlName}/regulatoryComplianceAssessments/{regulatoryComplianceAssessmentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regulatoryComplianceAssessmentsList operation.
     * @callback module:api/RegulatoryComplianceApi~regulatoryComplianceAssessmentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegulatoryComplianceAssessmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Details and state of assessments mapped to selected regulatory compliance control
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} regulatoryComplianceStandardName Name of the regulatory compliance standard object
     * @param {String} regulatoryComplianceControlName Name of the regulatory compliance control object
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {module:api/RegulatoryComplianceApi~regulatoryComplianceAssessmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegulatoryComplianceAssessmentList}
     */
    regulatoryComplianceAssessmentsList(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling regulatoryComplianceAssessmentsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceAssessmentsList");
      }
      // verify the required parameter 'regulatoryComplianceStandardName' is set
      if (regulatoryComplianceStandardName === undefined || regulatoryComplianceStandardName === null) {
        throw new Error("Missing the required parameter 'regulatoryComplianceStandardName' when calling regulatoryComplianceAssessmentsList");
      }
      // verify the required parameter 'regulatoryComplianceControlName' is set
      if (regulatoryComplianceControlName === undefined || regulatoryComplianceControlName === null) {
        throw new Error("Missing the required parameter 'regulatoryComplianceControlName' when calling regulatoryComplianceAssessmentsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'regulatoryComplianceStandardName': regulatoryComplianceStandardName,
        'regulatoryComplianceControlName': regulatoryComplianceControlName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegulatoryComplianceAssessmentList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls/{regulatoryComplianceControlName}/regulatoryComplianceAssessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regulatoryComplianceControlsGet operation.
     * @callback module:api/RegulatoryComplianceApi~regulatoryComplianceControlsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegulatoryComplianceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Selected regulatory compliance control details and state
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} regulatoryComplianceStandardName Name of the regulatory compliance standard object
     * @param {String} regulatoryComplianceControlName Name of the regulatory compliance control object
     * @param {module:api/RegulatoryComplianceApi~regulatoryComplianceControlsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegulatoryComplianceControl}
     */
    regulatoryComplianceControlsGet(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling regulatoryComplianceControlsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceControlsGet");
      }
      // verify the required parameter 'regulatoryComplianceStandardName' is set
      if (regulatoryComplianceStandardName === undefined || regulatoryComplianceStandardName === null) {
        throw new Error("Missing the required parameter 'regulatoryComplianceStandardName' when calling regulatoryComplianceControlsGet");
      }
      // verify the required parameter 'regulatoryComplianceControlName' is set
      if (regulatoryComplianceControlName === undefined || regulatoryComplianceControlName === null) {
        throw new Error("Missing the required parameter 'regulatoryComplianceControlName' when calling regulatoryComplianceControlsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'regulatoryComplianceStandardName': regulatoryComplianceStandardName,
        'regulatoryComplianceControlName': regulatoryComplianceControlName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegulatoryComplianceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls/{regulatoryComplianceControlName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regulatoryComplianceControlsList operation.
     * @callback module:api/RegulatoryComplianceApi~regulatoryComplianceControlsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegulatoryComplianceControlList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All supported regulatory compliance controls details and state for selected standard
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} regulatoryComplianceStandardName Name of the regulatory compliance standard object
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {module:api/RegulatoryComplianceApi~regulatoryComplianceControlsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegulatoryComplianceControlList}
     */
    regulatoryComplianceControlsList(apiVersion, subscriptionId, regulatoryComplianceStandardName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling regulatoryComplianceControlsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceControlsList");
      }
      // verify the required parameter 'regulatoryComplianceStandardName' is set
      if (regulatoryComplianceStandardName === undefined || regulatoryComplianceStandardName === null) {
        throw new Error("Missing the required parameter 'regulatoryComplianceStandardName' when calling regulatoryComplianceControlsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'regulatoryComplianceStandardName': regulatoryComplianceStandardName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegulatoryComplianceControlList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regulatoryComplianceStandardsGet operation.
     * @callback module:api/RegulatoryComplianceApi~regulatoryComplianceStandardsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegulatoryComplianceStandard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Supported regulatory compliance details state for selected standard
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} regulatoryComplianceStandardName Name of the regulatory compliance standard object
     * @param {module:api/RegulatoryComplianceApi~regulatoryComplianceStandardsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegulatoryComplianceStandard}
     */
    regulatoryComplianceStandardsGet(apiVersion, subscriptionId, regulatoryComplianceStandardName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling regulatoryComplianceStandardsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceStandardsGet");
      }
      // verify the required parameter 'regulatoryComplianceStandardName' is set
      if (regulatoryComplianceStandardName === undefined || regulatoryComplianceStandardName === null) {
        throw new Error("Missing the required parameter 'regulatoryComplianceStandardName' when calling regulatoryComplianceStandardsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'regulatoryComplianceStandardName': regulatoryComplianceStandardName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegulatoryComplianceStandard;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the regulatoryComplianceStandardsList operation.
     * @callback module:api/RegulatoryComplianceApi~regulatoryComplianceStandardsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegulatoryComplianceStandardList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Supported regulatory compliance standards details and state
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {module:api/RegulatoryComplianceApi~regulatoryComplianceStandardsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegulatoryComplianceStandardList}
     */
    regulatoryComplianceStandardsList(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling regulatoryComplianceStandardsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceStandardsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RegulatoryComplianceStandardList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
