/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegulatoryComplianceAssessmentProperties model module.
 * @module model/RegulatoryComplianceAssessmentProperties
 * @version 2019-01-01-preview
 */
class RegulatoryComplianceAssessmentProperties {
    /**
     * Constructs a new <code>RegulatoryComplianceAssessmentProperties</code>.
     * Regulatory compliance assessment data
     * @alias module:model/RegulatoryComplianceAssessmentProperties
     */
    constructor() { 
        
        RegulatoryComplianceAssessmentProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegulatoryComplianceAssessmentProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegulatoryComplianceAssessmentProperties} obj Optional instance to populate.
     * @return {module:model/RegulatoryComplianceAssessmentProperties} The populated <code>RegulatoryComplianceAssessmentProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegulatoryComplianceAssessmentProperties();

            if (data.hasOwnProperty('assessmentDetailsLink')) {
                obj['assessmentDetailsLink'] = ApiClient.convertToType(data['assessmentDetailsLink'], 'String');
            }
            if (data.hasOwnProperty('assessmentType')) {
                obj['assessmentType'] = ApiClient.convertToType(data['assessmentType'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('failedResources')) {
                obj['failedResources'] = ApiClient.convertToType(data['failedResources'], 'Number');
            }
            if (data.hasOwnProperty('passedResources')) {
                obj['passedResources'] = ApiClient.convertToType(data['passedResources'], 'Number');
            }
            if (data.hasOwnProperty('skippedResources')) {
                obj['skippedResources'] = ApiClient.convertToType(data['skippedResources'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('unsupportedResources')) {
                obj['unsupportedResources'] = ApiClient.convertToType(data['unsupportedResources'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegulatoryComplianceAssessmentProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegulatoryComplianceAssessmentProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assessmentDetailsLink'] && !(typeof data['assessmentDetailsLink'] === 'string' || data['assessmentDetailsLink'] instanceof String)) {
            throw new Error("Expected the field `assessmentDetailsLink` to be a primitive type in the JSON string but got " + data['assessmentDetailsLink']);
        }
        // ensure the json data is a string
        if (data['assessmentType'] && !(typeof data['assessmentType'] === 'string' || data['assessmentType'] instanceof String)) {
            throw new Error("Expected the field `assessmentType` to be a primitive type in the JSON string but got " + data['assessmentType']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Link to more detailed assessment results data. The response type will be according to the assessmentType field
 * @member {String} assessmentDetailsLink
 */
RegulatoryComplianceAssessmentProperties.prototype['assessmentDetailsLink'] = undefined;

/**
 * The expected type of assessment contained in the AssessmentDetailsLink
 * @member {String} assessmentType
 */
RegulatoryComplianceAssessmentProperties.prototype['assessmentType'] = undefined;

/**
 * The description of the regulatory compliance assessment
 * @member {String} description
 */
RegulatoryComplianceAssessmentProperties.prototype['description'] = undefined;

/**
 * The given assessment's related resources count with failed state.
 * @member {Number} failedResources
 */
RegulatoryComplianceAssessmentProperties.prototype['failedResources'] = undefined;

/**
 * The given assessment's related resources count with passed state.
 * @member {Number} passedResources
 */
RegulatoryComplianceAssessmentProperties.prototype['passedResources'] = undefined;

/**
 * The given assessment's related resources count with skipped state.
 * @member {Number} skippedResources
 */
RegulatoryComplianceAssessmentProperties.prototype['skippedResources'] = undefined;

/**
 * Aggregative state based on the assessment's scanned resources states
 * @member {module:model/RegulatoryComplianceAssessmentProperties.StateEnum} state
 */
RegulatoryComplianceAssessmentProperties.prototype['state'] = undefined;

/**
 * The given assessment's related resources count with unsupported state.
 * @member {Number} unsupportedResources
 */
RegulatoryComplianceAssessmentProperties.prototype['unsupportedResources'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
RegulatoryComplianceAssessmentProperties['StateEnum'] = {

    /**
     * value: "Passed"
     * @const
     */
    "Passed": "Passed",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Skipped"
     * @const
     */
    "Skipped": "Skipped",

    /**
     * value: "Unsupported"
     * @const
     */
    "Unsupported": "Unsupported"
};



export default RegulatoryComplianceAssessmentProperties;

