/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegulatoryComplianceStandardProperties model module.
 * @module model/RegulatoryComplianceStandardProperties
 * @version 2019-01-01-preview
 */
class RegulatoryComplianceStandardProperties {
    /**
     * Constructs a new <code>RegulatoryComplianceStandardProperties</code>.
     * Regulatory compliance standard data
     * @alias module:model/RegulatoryComplianceStandardProperties
     */
    constructor() { 
        
        RegulatoryComplianceStandardProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegulatoryComplianceStandardProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegulatoryComplianceStandardProperties} obj Optional instance to populate.
     * @return {module:model/RegulatoryComplianceStandardProperties} The populated <code>RegulatoryComplianceStandardProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegulatoryComplianceStandardProperties();

            if (data.hasOwnProperty('failedControls')) {
                obj['failedControls'] = ApiClient.convertToType(data['failedControls'], 'Number');
            }
            if (data.hasOwnProperty('passedControls')) {
                obj['passedControls'] = ApiClient.convertToType(data['passedControls'], 'Number');
            }
            if (data.hasOwnProperty('skippedControls')) {
                obj['skippedControls'] = ApiClient.convertToType(data['skippedControls'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('unsupportedControls')) {
                obj['unsupportedControls'] = ApiClient.convertToType(data['unsupportedControls'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegulatoryComplianceStandardProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegulatoryComplianceStandardProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The number of supported regulatory compliance controls of the given standard with a failed state
 * @member {Number} failedControls
 */
RegulatoryComplianceStandardProperties.prototype['failedControls'] = undefined;

/**
 * The number of supported regulatory compliance controls of the given standard with a passed state
 * @member {Number} passedControls
 */
RegulatoryComplianceStandardProperties.prototype['passedControls'] = undefined;

/**
 * The number of supported regulatory compliance controls of the given standard with a skipped state
 * @member {Number} skippedControls
 */
RegulatoryComplianceStandardProperties.prototype['skippedControls'] = undefined;

/**
 * Aggregative state based on the standard's supported controls states
 * @member {module:model/RegulatoryComplianceStandardProperties.StateEnum} state
 */
RegulatoryComplianceStandardProperties.prototype['state'] = undefined;

/**
 * The number of regulatory compliance controls of the given standard which are unsupported by automated assessments
 * @member {Number} unsupportedControls
 */
RegulatoryComplianceStandardProperties.prototype['unsupportedControls'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
RegulatoryComplianceStandardProperties['StateEnum'] = {

    /**
     * value: "Passed"
     * @const
     */
    "Passed": "Passed",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Skipped"
     * @const
     */
    "Skipped": "Skipped",

    /**
     * value: "Unsupported"
     * @const
     */
    "Unsupported": "Unsupported"
};



export default RegulatoryComplianceStandardProperties;

