# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegulatoryComplianceStandardProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed_controls: int=None, passed_controls: int=None, skipped_controls: int=None, state: str=None, unsupported_controls: int=None):
        """RegulatoryComplianceStandardProperties - a model defined in OpenAPI

        :param failed_controls: The failed_controls of this RegulatoryComplianceStandardProperties.
        :param passed_controls: The passed_controls of this RegulatoryComplianceStandardProperties.
        :param skipped_controls: The skipped_controls of this RegulatoryComplianceStandardProperties.
        :param state: The state of this RegulatoryComplianceStandardProperties.
        :param unsupported_controls: The unsupported_controls of this RegulatoryComplianceStandardProperties.
        """
        self.openapi_types = {
            'failed_controls': int,
            'passed_controls': int,
            'skipped_controls': int,
            'state': str,
            'unsupported_controls': int
        }

        self.attribute_map = {
            'failed_controls': 'failedControls',
            'passed_controls': 'passedControls',
            'skipped_controls': 'skippedControls',
            'state': 'state',
            'unsupported_controls': 'unsupportedControls'
        }

        self._failed_controls = failed_controls
        self._passed_controls = passed_controls
        self._skipped_controls = skipped_controls
        self._state = state
        self._unsupported_controls = unsupported_controls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegulatoryComplianceStandardProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegulatoryComplianceStandardProperties of this RegulatoryComplianceStandardProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed_controls(self):
        """Gets the failed_controls of this RegulatoryComplianceStandardProperties.

        The number of supported regulatory compliance controls of the given standard with a failed state

        :return: The failed_controls of this RegulatoryComplianceStandardProperties.
        :rtype: int
        """
        return self._failed_controls

    @failed_controls.setter
    def failed_controls(self, failed_controls):
        """Sets the failed_controls of this RegulatoryComplianceStandardProperties.

        The number of supported regulatory compliance controls of the given standard with a failed state

        :param failed_controls: The failed_controls of this RegulatoryComplianceStandardProperties.
        :type failed_controls: int
        """

        self._failed_controls = failed_controls

    @property
    def passed_controls(self):
        """Gets the passed_controls of this RegulatoryComplianceStandardProperties.

        The number of supported regulatory compliance controls of the given standard with a passed state

        :return: The passed_controls of this RegulatoryComplianceStandardProperties.
        :rtype: int
        """
        return self._passed_controls

    @passed_controls.setter
    def passed_controls(self, passed_controls):
        """Sets the passed_controls of this RegulatoryComplianceStandardProperties.

        The number of supported regulatory compliance controls of the given standard with a passed state

        :param passed_controls: The passed_controls of this RegulatoryComplianceStandardProperties.
        :type passed_controls: int
        """

        self._passed_controls = passed_controls

    @property
    def skipped_controls(self):
        """Gets the skipped_controls of this RegulatoryComplianceStandardProperties.

        The number of supported regulatory compliance controls of the given standard with a skipped state

        :return: The skipped_controls of this RegulatoryComplianceStandardProperties.
        :rtype: int
        """
        return self._skipped_controls

    @skipped_controls.setter
    def skipped_controls(self, skipped_controls):
        """Sets the skipped_controls of this RegulatoryComplianceStandardProperties.

        The number of supported regulatory compliance controls of the given standard with a skipped state

        :param skipped_controls: The skipped_controls of this RegulatoryComplianceStandardProperties.
        :type skipped_controls: int
        """

        self._skipped_controls = skipped_controls

    @property
    def state(self):
        """Gets the state of this RegulatoryComplianceStandardProperties.

        Aggregative state based on the standard's supported controls states

        :return: The state of this RegulatoryComplianceStandardProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RegulatoryComplianceStandardProperties.

        Aggregative state based on the standard's supported controls states

        :param state: The state of this RegulatoryComplianceStandardProperties.
        :type state: str
        """
        allowed_values = ["Passed", "Failed", "Skipped", "Unsupported"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def unsupported_controls(self):
        """Gets the unsupported_controls of this RegulatoryComplianceStandardProperties.

        The number of regulatory compliance controls of the given standard which are unsupported by automated assessments

        :return: The unsupported_controls of this RegulatoryComplianceStandardProperties.
        :rtype: int
        """
        return self._unsupported_controls

    @unsupported_controls.setter
    def unsupported_controls(self, unsupported_controls):
        """Sets the unsupported_controls of this RegulatoryComplianceStandardProperties.

        The number of regulatory compliance controls of the given standard which are unsupported by automated assessments

        :param unsupported_controls: The unsupported_controls of this RegulatoryComplianceStandardProperties.
        :type unsupported_controls: int
        """

        self._unsupported_controls = unsupported_controls
