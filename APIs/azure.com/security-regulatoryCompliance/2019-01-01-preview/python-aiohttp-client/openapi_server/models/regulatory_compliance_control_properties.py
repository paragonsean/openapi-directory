# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegulatoryComplianceControlProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, failed_assessments: int=None, passed_assessments: int=None, skipped_assessments: int=None, state: str=None):
        """RegulatoryComplianceControlProperties - a model defined in OpenAPI

        :param description: The description of this RegulatoryComplianceControlProperties.
        :param failed_assessments: The failed_assessments of this RegulatoryComplianceControlProperties.
        :param passed_assessments: The passed_assessments of this RegulatoryComplianceControlProperties.
        :param skipped_assessments: The skipped_assessments of this RegulatoryComplianceControlProperties.
        :param state: The state of this RegulatoryComplianceControlProperties.
        """
        self.openapi_types = {
            'description': str,
            'failed_assessments': int,
            'passed_assessments': int,
            'skipped_assessments': int,
            'state': str
        }

        self.attribute_map = {
            'description': 'description',
            'failed_assessments': 'failedAssessments',
            'passed_assessments': 'passedAssessments',
            'skipped_assessments': 'skippedAssessments',
            'state': 'state'
        }

        self._description = description
        self._failed_assessments = failed_assessments
        self._passed_assessments = passed_assessments
        self._skipped_assessments = skipped_assessments
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegulatoryComplianceControlProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegulatoryComplianceControlProperties of this RegulatoryComplianceControlProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this RegulatoryComplianceControlProperties.

        The description of the regulatory compliance control

        :return: The description of this RegulatoryComplianceControlProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RegulatoryComplianceControlProperties.

        The description of the regulatory compliance control

        :param description: The description of this RegulatoryComplianceControlProperties.
        :type description: str
        """

        self._description = description

    @property
    def failed_assessments(self):
        """Gets the failed_assessments of this RegulatoryComplianceControlProperties.

        The number of supported regulatory compliance assessments of the given control with a failed state

        :return: The failed_assessments of this RegulatoryComplianceControlProperties.
        :rtype: int
        """
        return self._failed_assessments

    @failed_assessments.setter
    def failed_assessments(self, failed_assessments):
        """Sets the failed_assessments of this RegulatoryComplianceControlProperties.

        The number of supported regulatory compliance assessments of the given control with a failed state

        :param failed_assessments: The failed_assessments of this RegulatoryComplianceControlProperties.
        :type failed_assessments: int
        """

        self._failed_assessments = failed_assessments

    @property
    def passed_assessments(self):
        """Gets the passed_assessments of this RegulatoryComplianceControlProperties.

        The number of supported regulatory compliance assessments of the given control with a passed state

        :return: The passed_assessments of this RegulatoryComplianceControlProperties.
        :rtype: int
        """
        return self._passed_assessments

    @passed_assessments.setter
    def passed_assessments(self, passed_assessments):
        """Sets the passed_assessments of this RegulatoryComplianceControlProperties.

        The number of supported regulatory compliance assessments of the given control with a passed state

        :param passed_assessments: The passed_assessments of this RegulatoryComplianceControlProperties.
        :type passed_assessments: int
        """

        self._passed_assessments = passed_assessments

    @property
    def skipped_assessments(self):
        """Gets the skipped_assessments of this RegulatoryComplianceControlProperties.

        The number of supported regulatory compliance assessments of the given control with a skipped state

        :return: The skipped_assessments of this RegulatoryComplianceControlProperties.
        :rtype: int
        """
        return self._skipped_assessments

    @skipped_assessments.setter
    def skipped_assessments(self, skipped_assessments):
        """Sets the skipped_assessments of this RegulatoryComplianceControlProperties.

        The number of supported regulatory compliance assessments of the given control with a skipped state

        :param skipped_assessments: The skipped_assessments of this RegulatoryComplianceControlProperties.
        :type skipped_assessments: int
        """

        self._skipped_assessments = skipped_assessments

    @property
    def state(self):
        """Gets the state of this RegulatoryComplianceControlProperties.

        Aggregative state based on the control's supported assessments states

        :return: The state of this RegulatoryComplianceControlProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RegulatoryComplianceControlProperties.

        Aggregative state based on the control's supported assessments states

        :param state: The state of this RegulatoryComplianceControlProperties.
        :type state: str
        """
        allowed_values = ["Passed", "Failed", "Skipped", "Unsupported"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
