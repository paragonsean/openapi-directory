# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegulatoryComplianceAssessmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_details_link: str=None, assessment_type: str=None, description: str=None, failed_resources: int=None, passed_resources: int=None, skipped_resources: int=None, state: str=None, unsupported_resources: int=None):
        """RegulatoryComplianceAssessmentProperties - a model defined in OpenAPI

        :param assessment_details_link: The assessment_details_link of this RegulatoryComplianceAssessmentProperties.
        :param assessment_type: The assessment_type of this RegulatoryComplianceAssessmentProperties.
        :param description: The description of this RegulatoryComplianceAssessmentProperties.
        :param failed_resources: The failed_resources of this RegulatoryComplianceAssessmentProperties.
        :param passed_resources: The passed_resources of this RegulatoryComplianceAssessmentProperties.
        :param skipped_resources: The skipped_resources of this RegulatoryComplianceAssessmentProperties.
        :param state: The state of this RegulatoryComplianceAssessmentProperties.
        :param unsupported_resources: The unsupported_resources of this RegulatoryComplianceAssessmentProperties.
        """
        self.openapi_types = {
            'assessment_details_link': str,
            'assessment_type': str,
            'description': str,
            'failed_resources': int,
            'passed_resources': int,
            'skipped_resources': int,
            'state': str,
            'unsupported_resources': int
        }

        self.attribute_map = {
            'assessment_details_link': 'assessmentDetailsLink',
            'assessment_type': 'assessmentType',
            'description': 'description',
            'failed_resources': 'failedResources',
            'passed_resources': 'passedResources',
            'skipped_resources': 'skippedResources',
            'state': 'state',
            'unsupported_resources': 'unsupportedResources'
        }

        self._assessment_details_link = assessment_details_link
        self._assessment_type = assessment_type
        self._description = description
        self._failed_resources = failed_resources
        self._passed_resources = passed_resources
        self._skipped_resources = skipped_resources
        self._state = state
        self._unsupported_resources = unsupported_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegulatoryComplianceAssessmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegulatoryComplianceAssessmentProperties of this RegulatoryComplianceAssessmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_details_link(self):
        """Gets the assessment_details_link of this RegulatoryComplianceAssessmentProperties.

        Link to more detailed assessment results data. The response type will be according to the assessmentType field

        :return: The assessment_details_link of this RegulatoryComplianceAssessmentProperties.
        :rtype: str
        """
        return self._assessment_details_link

    @assessment_details_link.setter
    def assessment_details_link(self, assessment_details_link):
        """Sets the assessment_details_link of this RegulatoryComplianceAssessmentProperties.

        Link to more detailed assessment results data. The response type will be according to the assessmentType field

        :param assessment_details_link: The assessment_details_link of this RegulatoryComplianceAssessmentProperties.
        :type assessment_details_link: str
        """

        self._assessment_details_link = assessment_details_link

    @property
    def assessment_type(self):
        """Gets the assessment_type of this RegulatoryComplianceAssessmentProperties.

        The expected type of assessment contained in the AssessmentDetailsLink

        :return: The assessment_type of this RegulatoryComplianceAssessmentProperties.
        :rtype: str
        """
        return self._assessment_type

    @assessment_type.setter
    def assessment_type(self, assessment_type):
        """Sets the assessment_type of this RegulatoryComplianceAssessmentProperties.

        The expected type of assessment contained in the AssessmentDetailsLink

        :param assessment_type: The assessment_type of this RegulatoryComplianceAssessmentProperties.
        :type assessment_type: str
        """

        self._assessment_type = assessment_type

    @property
    def description(self):
        """Gets the description of this RegulatoryComplianceAssessmentProperties.

        The description of the regulatory compliance assessment

        :return: The description of this RegulatoryComplianceAssessmentProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RegulatoryComplianceAssessmentProperties.

        The description of the regulatory compliance assessment

        :param description: The description of this RegulatoryComplianceAssessmentProperties.
        :type description: str
        """

        self._description = description

    @property
    def failed_resources(self):
        """Gets the failed_resources of this RegulatoryComplianceAssessmentProperties.

        The given assessment's related resources count with failed state.

        :return: The failed_resources of this RegulatoryComplianceAssessmentProperties.
        :rtype: int
        """
        return self._failed_resources

    @failed_resources.setter
    def failed_resources(self, failed_resources):
        """Sets the failed_resources of this RegulatoryComplianceAssessmentProperties.

        The given assessment's related resources count with failed state.

        :param failed_resources: The failed_resources of this RegulatoryComplianceAssessmentProperties.
        :type failed_resources: int
        """

        self._failed_resources = failed_resources

    @property
    def passed_resources(self):
        """Gets the passed_resources of this RegulatoryComplianceAssessmentProperties.

        The given assessment's related resources count with passed state.

        :return: The passed_resources of this RegulatoryComplianceAssessmentProperties.
        :rtype: int
        """
        return self._passed_resources

    @passed_resources.setter
    def passed_resources(self, passed_resources):
        """Sets the passed_resources of this RegulatoryComplianceAssessmentProperties.

        The given assessment's related resources count with passed state.

        :param passed_resources: The passed_resources of this RegulatoryComplianceAssessmentProperties.
        :type passed_resources: int
        """

        self._passed_resources = passed_resources

    @property
    def skipped_resources(self):
        """Gets the skipped_resources of this RegulatoryComplianceAssessmentProperties.

        The given assessment's related resources count with skipped state.

        :return: The skipped_resources of this RegulatoryComplianceAssessmentProperties.
        :rtype: int
        """
        return self._skipped_resources

    @skipped_resources.setter
    def skipped_resources(self, skipped_resources):
        """Sets the skipped_resources of this RegulatoryComplianceAssessmentProperties.

        The given assessment's related resources count with skipped state.

        :param skipped_resources: The skipped_resources of this RegulatoryComplianceAssessmentProperties.
        :type skipped_resources: int
        """

        self._skipped_resources = skipped_resources

    @property
    def state(self):
        """Gets the state of this RegulatoryComplianceAssessmentProperties.

        Aggregative state based on the assessment's scanned resources states

        :return: The state of this RegulatoryComplianceAssessmentProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RegulatoryComplianceAssessmentProperties.

        Aggregative state based on the assessment's scanned resources states

        :param state: The state of this RegulatoryComplianceAssessmentProperties.
        :type state: str
        """
        allowed_values = ["Passed", "Failed", "Skipped", "Unsupported"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def unsupported_resources(self):
        """Gets the unsupported_resources of this RegulatoryComplianceAssessmentProperties.

        The given assessment's related resources count with unsupported state.

        :return: The unsupported_resources of this RegulatoryComplianceAssessmentProperties.
        :rtype: int
        """
        return self._unsupported_resources

    @unsupported_resources.setter
    def unsupported_resources(self, unsupported_resources):
        """Sets the unsupported_resources of this RegulatoryComplianceAssessmentProperties.

        The given assessment's related resources count with unsupported state.

        :param unsupported_resources: The unsupported_resources of this RegulatoryComplianceAssessmentProperties.
        :type unsupported_resources: int
        """

        self._unsupported_resources = unsupported_resources
