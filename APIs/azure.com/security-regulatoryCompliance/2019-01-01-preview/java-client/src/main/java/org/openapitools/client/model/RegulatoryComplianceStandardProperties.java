/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Regulatory compliance standard data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:46.434941-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegulatoryComplianceStandardProperties {
  public static final String SERIALIZED_NAME_FAILED_CONTROLS = "failedControls";
  @SerializedName(SERIALIZED_NAME_FAILED_CONTROLS)
  private Integer failedControls;

  public static final String SERIALIZED_NAME_PASSED_CONTROLS = "passedControls";
  @SerializedName(SERIALIZED_NAME_PASSED_CONTROLS)
  private Integer passedControls;

  public static final String SERIALIZED_NAME_SKIPPED_CONTROLS = "skippedControls";
  @SerializedName(SERIALIZED_NAME_SKIPPED_CONTROLS)
  private Integer skippedControls;

  /**
   * Aggregative state based on the standard&#39;s supported controls states
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PASSED("Passed"),
    
    FAILED("Failed"),
    
    SKIPPED("Skipped"),
    
    UNSUPPORTED("Unsupported");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UNSUPPORTED_CONTROLS = "unsupportedControls";
  @SerializedName(SERIALIZED_NAME_UNSUPPORTED_CONTROLS)
  private Integer unsupportedControls;

  public RegulatoryComplianceStandardProperties() {
  }

  public RegulatoryComplianceStandardProperties(
     Integer failedControls, 
     Integer passedControls, 
     Integer skippedControls, 
     Integer unsupportedControls
  ) {
    this();
    this.failedControls = failedControls;
    this.passedControls = passedControls;
    this.skippedControls = skippedControls;
    this.unsupportedControls = unsupportedControls;
  }

  /**
   * The number of supported regulatory compliance controls of the given standard with a failed state
   * @return failedControls
   */
  @javax.annotation.Nullable
  public Integer getFailedControls() {
    return failedControls;
  }



  /**
   * The number of supported regulatory compliance controls of the given standard with a passed state
   * @return passedControls
   */
  @javax.annotation.Nullable
  public Integer getPassedControls() {
    return passedControls;
  }



  /**
   * The number of supported regulatory compliance controls of the given standard with a skipped state
   * @return skippedControls
   */
  @javax.annotation.Nullable
  public Integer getSkippedControls() {
    return skippedControls;
  }



  public RegulatoryComplianceStandardProperties state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Aggregative state based on the standard&#39;s supported controls states
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  /**
   * The number of regulatory compliance controls of the given standard which are unsupported by automated assessments
   * @return unsupportedControls
   */
  @javax.annotation.Nullable
  public Integer getUnsupportedControls() {
    return unsupportedControls;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegulatoryComplianceStandardProperties regulatoryComplianceStandardProperties = (RegulatoryComplianceStandardProperties) o;
    return Objects.equals(this.failedControls, regulatoryComplianceStandardProperties.failedControls) &&
        Objects.equals(this.passedControls, regulatoryComplianceStandardProperties.passedControls) &&
        Objects.equals(this.skippedControls, regulatoryComplianceStandardProperties.skippedControls) &&
        Objects.equals(this.state, regulatoryComplianceStandardProperties.state) &&
        Objects.equals(this.unsupportedControls, regulatoryComplianceStandardProperties.unsupportedControls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failedControls, passedControls, skippedControls, state, unsupportedControls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegulatoryComplianceStandardProperties {\n");
    sb.append("    failedControls: ").append(toIndentedString(failedControls)).append("\n");
    sb.append("    passedControls: ").append(toIndentedString(passedControls)).append("\n");
    sb.append("    skippedControls: ").append(toIndentedString(skippedControls)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    unsupportedControls: ").append(toIndentedString(unsupportedControls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failedControls");
    openapiFields.add("passedControls");
    openapiFields.add("skippedControls");
    openapiFields.add("state");
    openapiFields.add("unsupportedControls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegulatoryComplianceStandardProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegulatoryComplianceStandardProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegulatoryComplianceStandardProperties is not found in the empty JSON string", RegulatoryComplianceStandardProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegulatoryComplianceStandardProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegulatoryComplianceStandardProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegulatoryComplianceStandardProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegulatoryComplianceStandardProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegulatoryComplianceStandardProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegulatoryComplianceStandardProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RegulatoryComplianceStandardProperties>() {
           @Override
           public void write(JsonWriter out, RegulatoryComplianceStandardProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegulatoryComplianceStandardProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegulatoryComplianceStandardProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegulatoryComplianceStandardProperties
   * @throws IOException if the JSON string is invalid with respect to RegulatoryComplianceStandardProperties
   */
  public static RegulatoryComplianceStandardProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegulatoryComplianceStandardProperties.class);
  }

  /**
   * Convert an instance of RegulatoryComplianceStandardProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

