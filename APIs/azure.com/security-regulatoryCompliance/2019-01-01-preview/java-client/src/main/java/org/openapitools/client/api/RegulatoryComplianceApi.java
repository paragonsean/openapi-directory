/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RegulatoryComplianceAssessment;
import org.openapitools.client.model.RegulatoryComplianceAssessmentList;
import org.openapitools.client.model.RegulatoryComplianceControl;
import org.openapitools.client.model.RegulatoryComplianceControlList;
import org.openapitools.client.model.RegulatoryComplianceStandard;
import org.openapitools.client.model.RegulatoryComplianceStandardList;
import org.openapitools.client.model.RegulatoryComplianceStandardsListDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegulatoryComplianceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegulatoryComplianceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegulatoryComplianceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for regulatoryComplianceAssessmentsGet
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @param regulatoryComplianceAssessmentName Name of the regulatory compliance assessment object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceAssessmentsGetCall(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, String regulatoryComplianceAssessmentName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls/{regulatoryComplianceControlName}/regulatoryComplianceAssessments/{regulatoryComplianceAssessmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "regulatoryComplianceStandardName" + "}", localVarApiClient.escapeString(regulatoryComplianceStandardName.toString()))
            .replace("{" + "regulatoryComplianceControlName" + "}", localVarApiClient.escapeString(regulatoryComplianceControlName.toString()))
            .replace("{" + "regulatoryComplianceAssessmentName" + "}", localVarApiClient.escapeString(regulatoryComplianceAssessmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regulatoryComplianceAssessmentsGetValidateBeforeCall(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, String regulatoryComplianceAssessmentName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling regulatoryComplianceAssessmentsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceAssessmentsGet(Async)");
        }

        // verify the required parameter 'regulatoryComplianceStandardName' is set
        if (regulatoryComplianceStandardName == null) {
            throw new ApiException("Missing the required parameter 'regulatoryComplianceStandardName' when calling regulatoryComplianceAssessmentsGet(Async)");
        }

        // verify the required parameter 'regulatoryComplianceControlName' is set
        if (regulatoryComplianceControlName == null) {
            throw new ApiException("Missing the required parameter 'regulatoryComplianceControlName' when calling regulatoryComplianceAssessmentsGet(Async)");
        }

        // verify the required parameter 'regulatoryComplianceAssessmentName' is set
        if (regulatoryComplianceAssessmentName == null) {
            throw new ApiException("Missing the required parameter 'regulatoryComplianceAssessmentName' when calling regulatoryComplianceAssessmentsGet(Async)");
        }

        return regulatoryComplianceAssessmentsGetCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, regulatoryComplianceAssessmentName, _callback);

    }

    /**
     * 
     * Supported regulatory compliance details and state for selected assessment
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @param regulatoryComplianceAssessmentName Name of the regulatory compliance assessment object (required)
     * @return RegulatoryComplianceAssessment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegulatoryComplianceAssessment regulatoryComplianceAssessmentsGet(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, String regulatoryComplianceAssessmentName) throws ApiException {
        ApiResponse<RegulatoryComplianceAssessment> localVarResp = regulatoryComplianceAssessmentsGetWithHttpInfo(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, regulatoryComplianceAssessmentName);
        return localVarResp.getData();
    }

    /**
     * 
     * Supported regulatory compliance details and state for selected assessment
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @param regulatoryComplianceAssessmentName Name of the regulatory compliance assessment object (required)
     * @return ApiResponse&lt;RegulatoryComplianceAssessment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegulatoryComplianceAssessment> regulatoryComplianceAssessmentsGetWithHttpInfo(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, String regulatoryComplianceAssessmentName) throws ApiException {
        okhttp3.Call localVarCall = regulatoryComplianceAssessmentsGetValidateBeforeCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, regulatoryComplianceAssessmentName, null);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceAssessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Supported regulatory compliance details and state for selected assessment
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @param regulatoryComplianceAssessmentName Name of the regulatory compliance assessment object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceAssessmentsGetAsync(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, String regulatoryComplianceAssessmentName, final ApiCallback<RegulatoryComplianceAssessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = regulatoryComplianceAssessmentsGetValidateBeforeCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, regulatoryComplianceAssessmentName, _callback);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceAssessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regulatoryComplianceAssessmentsList
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceAssessmentsListCall(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls/{regulatoryComplianceControlName}/regulatoryComplianceAssessments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "regulatoryComplianceStandardName" + "}", localVarApiClient.escapeString(regulatoryComplianceStandardName.toString()))
            .replace("{" + "regulatoryComplianceControlName" + "}", localVarApiClient.escapeString(regulatoryComplianceControlName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regulatoryComplianceAssessmentsListValidateBeforeCall(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling regulatoryComplianceAssessmentsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceAssessmentsList(Async)");
        }

        // verify the required parameter 'regulatoryComplianceStandardName' is set
        if (regulatoryComplianceStandardName == null) {
            throw new ApiException("Missing the required parameter 'regulatoryComplianceStandardName' when calling regulatoryComplianceAssessmentsList(Async)");
        }

        // verify the required parameter 'regulatoryComplianceControlName' is set
        if (regulatoryComplianceControlName == null) {
            throw new ApiException("Missing the required parameter 'regulatoryComplianceControlName' when calling regulatoryComplianceAssessmentsList(Async)");
        }

        return regulatoryComplianceAssessmentsListCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, $filter, _callback);

    }

    /**
     * 
     * Details and state of assessments mapped to selected regulatory compliance control
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @param $filter OData filter. Optional. (optional)
     * @return RegulatoryComplianceAssessmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegulatoryComplianceAssessmentList regulatoryComplianceAssessmentsList(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, String $filter) throws ApiException {
        ApiResponse<RegulatoryComplianceAssessmentList> localVarResp = regulatoryComplianceAssessmentsListWithHttpInfo(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Details and state of assessments mapped to selected regulatory compliance control
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @param $filter OData filter. Optional. (optional)
     * @return ApiResponse&lt;RegulatoryComplianceAssessmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegulatoryComplianceAssessmentList> regulatoryComplianceAssessmentsListWithHttpInfo(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, String $filter) throws ApiException {
        okhttp3.Call localVarCall = regulatoryComplianceAssessmentsListValidateBeforeCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, $filter, null);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceAssessmentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Details and state of assessments mapped to selected regulatory compliance control
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceAssessmentsListAsync(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, String $filter, final ApiCallback<RegulatoryComplianceAssessmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = regulatoryComplianceAssessmentsListValidateBeforeCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, $filter, _callback);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceAssessmentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regulatoryComplianceControlsGet
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceControlsGetCall(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls/{regulatoryComplianceControlName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "regulatoryComplianceStandardName" + "}", localVarApiClient.escapeString(regulatoryComplianceStandardName.toString()))
            .replace("{" + "regulatoryComplianceControlName" + "}", localVarApiClient.escapeString(regulatoryComplianceControlName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regulatoryComplianceControlsGetValidateBeforeCall(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling regulatoryComplianceControlsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceControlsGet(Async)");
        }

        // verify the required parameter 'regulatoryComplianceStandardName' is set
        if (regulatoryComplianceStandardName == null) {
            throw new ApiException("Missing the required parameter 'regulatoryComplianceStandardName' when calling regulatoryComplianceControlsGet(Async)");
        }

        // verify the required parameter 'regulatoryComplianceControlName' is set
        if (regulatoryComplianceControlName == null) {
            throw new ApiException("Missing the required parameter 'regulatoryComplianceControlName' when calling regulatoryComplianceControlsGet(Async)");
        }

        return regulatoryComplianceControlsGetCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, _callback);

    }

    /**
     * 
     * Selected regulatory compliance control details and state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @return RegulatoryComplianceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegulatoryComplianceControl regulatoryComplianceControlsGet(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName) throws ApiException {
        ApiResponse<RegulatoryComplianceControl> localVarResp = regulatoryComplianceControlsGetWithHttpInfo(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName);
        return localVarResp.getData();
    }

    /**
     * 
     * Selected regulatory compliance control details and state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @return ApiResponse&lt;RegulatoryComplianceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegulatoryComplianceControl> regulatoryComplianceControlsGetWithHttpInfo(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName) throws ApiException {
        okhttp3.Call localVarCall = regulatoryComplianceControlsGetValidateBeforeCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, null);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Selected regulatory compliance control details and state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param regulatoryComplianceControlName Name of the regulatory compliance control object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceControlsGetAsync(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String regulatoryComplianceControlName, final ApiCallback<RegulatoryComplianceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = regulatoryComplianceControlsGetValidateBeforeCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, regulatoryComplianceControlName, _callback);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regulatoryComplianceControlsList
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceControlsListCall(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}/regulatoryComplianceControls"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "regulatoryComplianceStandardName" + "}", localVarApiClient.escapeString(regulatoryComplianceStandardName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regulatoryComplianceControlsListValidateBeforeCall(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling regulatoryComplianceControlsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceControlsList(Async)");
        }

        // verify the required parameter 'regulatoryComplianceStandardName' is set
        if (regulatoryComplianceStandardName == null) {
            throw new ApiException("Missing the required parameter 'regulatoryComplianceStandardName' when calling regulatoryComplianceControlsList(Async)");
        }

        return regulatoryComplianceControlsListCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, $filter, _callback);

    }

    /**
     * 
     * All supported regulatory compliance controls details and state for selected standard
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param $filter OData filter. Optional. (optional)
     * @return RegulatoryComplianceControlList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegulatoryComplianceControlList regulatoryComplianceControlsList(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String $filter) throws ApiException {
        ApiResponse<RegulatoryComplianceControlList> localVarResp = regulatoryComplianceControlsListWithHttpInfo(apiVersion, subscriptionId, regulatoryComplianceStandardName, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * All supported regulatory compliance controls details and state for selected standard
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param $filter OData filter. Optional. (optional)
     * @return ApiResponse&lt;RegulatoryComplianceControlList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegulatoryComplianceControlList> regulatoryComplianceControlsListWithHttpInfo(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String $filter) throws ApiException {
        okhttp3.Call localVarCall = regulatoryComplianceControlsListValidateBeforeCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, $filter, null);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceControlList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * All supported regulatory compliance controls details and state for selected standard
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceControlsListAsync(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, String $filter, final ApiCallback<RegulatoryComplianceControlList> _callback) throws ApiException {

        okhttp3.Call localVarCall = regulatoryComplianceControlsListValidateBeforeCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, $filter, _callback);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceControlList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regulatoryComplianceStandardsGet
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceStandardsGetCall(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards/{regulatoryComplianceStandardName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "regulatoryComplianceStandardName" + "}", localVarApiClient.escapeString(regulatoryComplianceStandardName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regulatoryComplianceStandardsGetValidateBeforeCall(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling regulatoryComplianceStandardsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceStandardsGet(Async)");
        }

        // verify the required parameter 'regulatoryComplianceStandardName' is set
        if (regulatoryComplianceStandardName == null) {
            throw new ApiException("Missing the required parameter 'regulatoryComplianceStandardName' when calling regulatoryComplianceStandardsGet(Async)");
        }

        return regulatoryComplianceStandardsGetCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, _callback);

    }

    /**
     * 
     * Supported regulatory compliance details state for selected standard
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @return RegulatoryComplianceStandard
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegulatoryComplianceStandard regulatoryComplianceStandardsGet(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName) throws ApiException {
        ApiResponse<RegulatoryComplianceStandard> localVarResp = regulatoryComplianceStandardsGetWithHttpInfo(apiVersion, subscriptionId, regulatoryComplianceStandardName);
        return localVarResp.getData();
    }

    /**
     * 
     * Supported regulatory compliance details state for selected standard
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @return ApiResponse&lt;RegulatoryComplianceStandard&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegulatoryComplianceStandard> regulatoryComplianceStandardsGetWithHttpInfo(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName) throws ApiException {
        okhttp3.Call localVarCall = regulatoryComplianceStandardsGetValidateBeforeCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, null);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceStandard>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Supported regulatory compliance details state for selected standard
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param regulatoryComplianceStandardName Name of the regulatory compliance standard object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceStandardsGetAsync(String apiVersion, String subscriptionId, String regulatoryComplianceStandardName, final ApiCallback<RegulatoryComplianceStandard> _callback) throws ApiException {

        okhttp3.Call localVarCall = regulatoryComplianceStandardsGetValidateBeforeCall(apiVersion, subscriptionId, regulatoryComplianceStandardName, _callback);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceStandard>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regulatoryComplianceStandardsList
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceStandardsListCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/regulatoryComplianceStandards"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regulatoryComplianceStandardsListValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling regulatoryComplianceStandardsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling regulatoryComplianceStandardsList(Async)");
        }

        return regulatoryComplianceStandardsListCall(apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Supported regulatory compliance standards details and state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @return RegulatoryComplianceStandardList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RegulatoryComplianceStandardList regulatoryComplianceStandardsList(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<RegulatoryComplianceStandardList> localVarResp = regulatoryComplianceStandardsListWithHttpInfo(apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Supported regulatory compliance standards details and state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @return ApiResponse&lt;RegulatoryComplianceStandardList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegulatoryComplianceStandardList> regulatoryComplianceStandardsListWithHttpInfo(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = regulatoryComplianceStandardsListValidateBeforeCall(apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceStandardList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Supported regulatory compliance standards details and state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regulatoryComplianceStandardsListAsync(String apiVersion, String subscriptionId, String $filter, final ApiCallback<RegulatoryComplianceStandardList> _callback) throws ApiException {

        okhttp3.Call localVarCall = regulatoryComplianceStandardsListValidateBeforeCall(apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<RegulatoryComplianceStandardList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
