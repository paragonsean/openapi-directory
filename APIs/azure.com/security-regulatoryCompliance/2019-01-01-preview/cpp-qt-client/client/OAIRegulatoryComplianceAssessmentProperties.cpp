/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegulatoryComplianceAssessmentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegulatoryComplianceAssessmentProperties::OAIRegulatoryComplianceAssessmentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegulatoryComplianceAssessmentProperties::OAIRegulatoryComplianceAssessmentProperties() {
    this->initializeModel();
}

OAIRegulatoryComplianceAssessmentProperties::~OAIRegulatoryComplianceAssessmentProperties() {}

void OAIRegulatoryComplianceAssessmentProperties::initializeModel() {

    m_assessment_details_link_isSet = false;
    m_assessment_details_link_isValid = false;

    m_assessment_type_isSet = false;
    m_assessment_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_failed_resources_isSet = false;
    m_failed_resources_isValid = false;

    m_passed_resources_isSet = false;
    m_passed_resources_isValid = false;

    m_skipped_resources_isSet = false;
    m_skipped_resources_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_unsupported_resources_isSet = false;
    m_unsupported_resources_isValid = false;
}

void OAIRegulatoryComplianceAssessmentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegulatoryComplianceAssessmentProperties::fromJsonObject(QJsonObject json) {

    m_assessment_details_link_isValid = ::OpenAPI::fromJsonValue(m_assessment_details_link, json[QString("assessmentDetailsLink")]);
    m_assessment_details_link_isSet = !json[QString("assessmentDetailsLink")].isNull() && m_assessment_details_link_isValid;

    m_assessment_type_isValid = ::OpenAPI::fromJsonValue(m_assessment_type, json[QString("assessmentType")]);
    m_assessment_type_isSet = !json[QString("assessmentType")].isNull() && m_assessment_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_failed_resources_isValid = ::OpenAPI::fromJsonValue(m_failed_resources, json[QString("failedResources")]);
    m_failed_resources_isSet = !json[QString("failedResources")].isNull() && m_failed_resources_isValid;

    m_passed_resources_isValid = ::OpenAPI::fromJsonValue(m_passed_resources, json[QString("passedResources")]);
    m_passed_resources_isSet = !json[QString("passedResources")].isNull() && m_passed_resources_isValid;

    m_skipped_resources_isValid = ::OpenAPI::fromJsonValue(m_skipped_resources, json[QString("skippedResources")]);
    m_skipped_resources_isSet = !json[QString("skippedResources")].isNull() && m_skipped_resources_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_unsupported_resources_isValid = ::OpenAPI::fromJsonValue(m_unsupported_resources, json[QString("unsupportedResources")]);
    m_unsupported_resources_isSet = !json[QString("unsupportedResources")].isNull() && m_unsupported_resources_isValid;
}

QString OAIRegulatoryComplianceAssessmentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegulatoryComplianceAssessmentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_details_link_isSet) {
        obj.insert(QString("assessmentDetailsLink"), ::OpenAPI::toJsonValue(m_assessment_details_link));
    }
    if (m_assessment_type_isSet) {
        obj.insert(QString("assessmentType"), ::OpenAPI::toJsonValue(m_assessment_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_failed_resources_isSet) {
        obj.insert(QString("failedResources"), ::OpenAPI::toJsonValue(m_failed_resources));
    }
    if (m_passed_resources_isSet) {
        obj.insert(QString("passedResources"), ::OpenAPI::toJsonValue(m_passed_resources));
    }
    if (m_skipped_resources_isSet) {
        obj.insert(QString("skippedResources"), ::OpenAPI::toJsonValue(m_skipped_resources));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_unsupported_resources_isSet) {
        obj.insert(QString("unsupportedResources"), ::OpenAPI::toJsonValue(m_unsupported_resources));
    }
    return obj;
}

QString OAIRegulatoryComplianceAssessmentProperties::getAssessmentDetailsLink() const {
    return m_assessment_details_link;
}
void OAIRegulatoryComplianceAssessmentProperties::setAssessmentDetailsLink(const QString &assessment_details_link) {
    m_assessment_details_link = assessment_details_link;
    m_assessment_details_link_isSet = true;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_assessment_details_link_Set() const{
    return m_assessment_details_link_isSet;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_assessment_details_link_Valid() const{
    return m_assessment_details_link_isValid;
}

QString OAIRegulatoryComplianceAssessmentProperties::getAssessmentType() const {
    return m_assessment_type;
}
void OAIRegulatoryComplianceAssessmentProperties::setAssessmentType(const QString &assessment_type) {
    m_assessment_type = assessment_type;
    m_assessment_type_isSet = true;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_assessment_type_Set() const{
    return m_assessment_type_isSet;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_assessment_type_Valid() const{
    return m_assessment_type_isValid;
}

QString OAIRegulatoryComplianceAssessmentProperties::getDescription() const {
    return m_description;
}
void OAIRegulatoryComplianceAssessmentProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIRegulatoryComplianceAssessmentProperties::getFailedResources() const {
    return m_failed_resources;
}
void OAIRegulatoryComplianceAssessmentProperties::setFailedResources(const qint32 &failed_resources) {
    m_failed_resources = failed_resources;
    m_failed_resources_isSet = true;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_failed_resources_Set() const{
    return m_failed_resources_isSet;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_failed_resources_Valid() const{
    return m_failed_resources_isValid;
}

qint32 OAIRegulatoryComplianceAssessmentProperties::getPassedResources() const {
    return m_passed_resources;
}
void OAIRegulatoryComplianceAssessmentProperties::setPassedResources(const qint32 &passed_resources) {
    m_passed_resources = passed_resources;
    m_passed_resources_isSet = true;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_passed_resources_Set() const{
    return m_passed_resources_isSet;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_passed_resources_Valid() const{
    return m_passed_resources_isValid;
}

qint32 OAIRegulatoryComplianceAssessmentProperties::getSkippedResources() const {
    return m_skipped_resources;
}
void OAIRegulatoryComplianceAssessmentProperties::setSkippedResources(const qint32 &skipped_resources) {
    m_skipped_resources = skipped_resources;
    m_skipped_resources_isSet = true;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_skipped_resources_Set() const{
    return m_skipped_resources_isSet;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_skipped_resources_Valid() const{
    return m_skipped_resources_isValid;
}

QString OAIRegulatoryComplianceAssessmentProperties::getState() const {
    return m_state;
}
void OAIRegulatoryComplianceAssessmentProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIRegulatoryComplianceAssessmentProperties::getUnsupportedResources() const {
    return m_unsupported_resources;
}
void OAIRegulatoryComplianceAssessmentProperties::setUnsupportedResources(const qint32 &unsupported_resources) {
    m_unsupported_resources = unsupported_resources;
    m_unsupported_resources_isSet = true;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_unsupported_resources_Set() const{
    return m_unsupported_resources_isSet;
}

bool OAIRegulatoryComplianceAssessmentProperties::is_unsupported_resources_Valid() const{
    return m_unsupported_resources_isValid;
}

bool OAIRegulatoryComplianceAssessmentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_details_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assessment_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_resources_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegulatoryComplianceAssessmentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
