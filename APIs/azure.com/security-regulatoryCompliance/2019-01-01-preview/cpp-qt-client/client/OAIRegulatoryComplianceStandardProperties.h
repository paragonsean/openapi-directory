/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRegulatoryComplianceStandardProperties.h
 *
 * Regulatory compliance standard data
 */

#ifndef OAIRegulatoryComplianceStandardProperties_H
#define OAIRegulatoryComplianceStandardProperties_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRegulatoryComplianceStandardProperties : public OAIObject {
public:
    OAIRegulatoryComplianceStandardProperties();
    OAIRegulatoryComplianceStandardProperties(QString json);
    ~OAIRegulatoryComplianceStandardProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getFailedControls() const;
    void setFailedControls(const qint32 &failed_controls);
    bool is_failed_controls_Set() const;
    bool is_failed_controls_Valid() const;

    qint32 getPassedControls() const;
    void setPassedControls(const qint32 &passed_controls);
    bool is_passed_controls_Set() const;
    bool is_passed_controls_Valid() const;

    qint32 getSkippedControls() const;
    void setSkippedControls(const qint32 &skipped_controls);
    bool is_skipped_controls_Set() const;
    bool is_skipped_controls_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    qint32 getUnsupportedControls() const;
    void setUnsupportedControls(const qint32 &unsupported_controls);
    bool is_unsupported_controls_Set() const;
    bool is_unsupported_controls_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_failed_controls;
    bool m_failed_controls_isSet;
    bool m_failed_controls_isValid;

    qint32 m_passed_controls;
    bool m_passed_controls_isSet;
    bool m_passed_controls_isValid;

    qint32 m_skipped_controls;
    bool m_skipped_controls_isSet;
    bool m_skipped_controls_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    qint32 m_unsupported_controls;
    bool m_unsupported_controls_isSet;
    bool m_unsupported_controls_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRegulatoryComplianceStandardProperties)

#endif // OAIRegulatoryComplianceStandardProperties_H
