/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegulatoryComplianceControlProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegulatoryComplianceControlProperties::OAIRegulatoryComplianceControlProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegulatoryComplianceControlProperties::OAIRegulatoryComplianceControlProperties() {
    this->initializeModel();
}

OAIRegulatoryComplianceControlProperties::~OAIRegulatoryComplianceControlProperties() {}

void OAIRegulatoryComplianceControlProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_failed_assessments_isSet = false;
    m_failed_assessments_isValid = false;

    m_passed_assessments_isSet = false;
    m_passed_assessments_isValid = false;

    m_skipped_assessments_isSet = false;
    m_skipped_assessments_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIRegulatoryComplianceControlProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegulatoryComplianceControlProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_failed_assessments_isValid = ::OpenAPI::fromJsonValue(m_failed_assessments, json[QString("failedAssessments")]);
    m_failed_assessments_isSet = !json[QString("failedAssessments")].isNull() && m_failed_assessments_isValid;

    m_passed_assessments_isValid = ::OpenAPI::fromJsonValue(m_passed_assessments, json[QString("passedAssessments")]);
    m_passed_assessments_isSet = !json[QString("passedAssessments")].isNull() && m_passed_assessments_isValid;

    m_skipped_assessments_isValid = ::OpenAPI::fromJsonValue(m_skipped_assessments, json[QString("skippedAssessments")]);
    m_skipped_assessments_isSet = !json[QString("skippedAssessments")].isNull() && m_skipped_assessments_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIRegulatoryComplianceControlProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegulatoryComplianceControlProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_failed_assessments_isSet) {
        obj.insert(QString("failedAssessments"), ::OpenAPI::toJsonValue(m_failed_assessments));
    }
    if (m_passed_assessments_isSet) {
        obj.insert(QString("passedAssessments"), ::OpenAPI::toJsonValue(m_passed_assessments));
    }
    if (m_skipped_assessments_isSet) {
        obj.insert(QString("skippedAssessments"), ::OpenAPI::toJsonValue(m_skipped_assessments));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIRegulatoryComplianceControlProperties::getDescription() const {
    return m_description;
}
void OAIRegulatoryComplianceControlProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRegulatoryComplianceControlProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRegulatoryComplianceControlProperties::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIRegulatoryComplianceControlProperties::getFailedAssessments() const {
    return m_failed_assessments;
}
void OAIRegulatoryComplianceControlProperties::setFailedAssessments(const qint32 &failed_assessments) {
    m_failed_assessments = failed_assessments;
    m_failed_assessments_isSet = true;
}

bool OAIRegulatoryComplianceControlProperties::is_failed_assessments_Set() const{
    return m_failed_assessments_isSet;
}

bool OAIRegulatoryComplianceControlProperties::is_failed_assessments_Valid() const{
    return m_failed_assessments_isValid;
}

qint32 OAIRegulatoryComplianceControlProperties::getPassedAssessments() const {
    return m_passed_assessments;
}
void OAIRegulatoryComplianceControlProperties::setPassedAssessments(const qint32 &passed_assessments) {
    m_passed_assessments = passed_assessments;
    m_passed_assessments_isSet = true;
}

bool OAIRegulatoryComplianceControlProperties::is_passed_assessments_Set() const{
    return m_passed_assessments_isSet;
}

bool OAIRegulatoryComplianceControlProperties::is_passed_assessments_Valid() const{
    return m_passed_assessments_isValid;
}

qint32 OAIRegulatoryComplianceControlProperties::getSkippedAssessments() const {
    return m_skipped_assessments;
}
void OAIRegulatoryComplianceControlProperties::setSkippedAssessments(const qint32 &skipped_assessments) {
    m_skipped_assessments = skipped_assessments;
    m_skipped_assessments_isSet = true;
}

bool OAIRegulatoryComplianceControlProperties::is_skipped_assessments_Set() const{
    return m_skipped_assessments_isSet;
}

bool OAIRegulatoryComplianceControlProperties::is_skipped_assessments_Valid() const{
    return m_skipped_assessments_isValid;
}

QString OAIRegulatoryComplianceControlProperties::getState() const {
    return m_state;
}
void OAIRegulatoryComplianceControlProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRegulatoryComplianceControlProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRegulatoryComplianceControlProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIRegulatoryComplianceControlProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_assessments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_assessments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_assessments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegulatoryComplianceControlProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
