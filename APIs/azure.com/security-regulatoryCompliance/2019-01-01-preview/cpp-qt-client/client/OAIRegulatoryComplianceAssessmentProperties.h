/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRegulatoryComplianceAssessmentProperties.h
 *
 * Regulatory compliance assessment data
 */

#ifndef OAIRegulatoryComplianceAssessmentProperties_H
#define OAIRegulatoryComplianceAssessmentProperties_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRegulatoryComplianceAssessmentProperties : public OAIObject {
public:
    OAIRegulatoryComplianceAssessmentProperties();
    OAIRegulatoryComplianceAssessmentProperties(QString json);
    ~OAIRegulatoryComplianceAssessmentProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssessmentDetailsLink() const;
    void setAssessmentDetailsLink(const QString &assessment_details_link);
    bool is_assessment_details_link_Set() const;
    bool is_assessment_details_link_Valid() const;

    QString getAssessmentType() const;
    void setAssessmentType(const QString &assessment_type);
    bool is_assessment_type_Set() const;
    bool is_assessment_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getFailedResources() const;
    void setFailedResources(const qint32 &failed_resources);
    bool is_failed_resources_Set() const;
    bool is_failed_resources_Valid() const;

    qint32 getPassedResources() const;
    void setPassedResources(const qint32 &passed_resources);
    bool is_passed_resources_Set() const;
    bool is_passed_resources_Valid() const;

    qint32 getSkippedResources() const;
    void setSkippedResources(const qint32 &skipped_resources);
    bool is_skipped_resources_Set() const;
    bool is_skipped_resources_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    qint32 getUnsupportedResources() const;
    void setUnsupportedResources(const qint32 &unsupported_resources);
    bool is_unsupported_resources_Set() const;
    bool is_unsupported_resources_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_assessment_details_link;
    bool m_assessment_details_link_isSet;
    bool m_assessment_details_link_isValid;

    QString m_assessment_type;
    bool m_assessment_type_isSet;
    bool m_assessment_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_failed_resources;
    bool m_failed_resources_isSet;
    bool m_failed_resources_isValid;

    qint32 m_passed_resources;
    bool m_passed_resources_isSet;
    bool m_passed_resources_isValid;

    qint32 m_skipped_resources;
    bool m_skipped_resources_isSet;
    bool m_skipped_resources_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    qint32 m_unsupported_resources;
    bool m_unsupported_resources_isSet;
    bool m_unsupported_resources_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRegulatoryComplianceAssessmentProperties)

#endif // OAIRegulatoryComplianceAssessmentProperties_H
