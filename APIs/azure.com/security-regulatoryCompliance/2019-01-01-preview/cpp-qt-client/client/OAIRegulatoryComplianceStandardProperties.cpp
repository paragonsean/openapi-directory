/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegulatoryComplianceStandardProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegulatoryComplianceStandardProperties::OAIRegulatoryComplianceStandardProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegulatoryComplianceStandardProperties::OAIRegulatoryComplianceStandardProperties() {
    this->initializeModel();
}

OAIRegulatoryComplianceStandardProperties::~OAIRegulatoryComplianceStandardProperties() {}

void OAIRegulatoryComplianceStandardProperties::initializeModel() {

    m_failed_controls_isSet = false;
    m_failed_controls_isValid = false;

    m_passed_controls_isSet = false;
    m_passed_controls_isValid = false;

    m_skipped_controls_isSet = false;
    m_skipped_controls_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_unsupported_controls_isSet = false;
    m_unsupported_controls_isValid = false;
}

void OAIRegulatoryComplianceStandardProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegulatoryComplianceStandardProperties::fromJsonObject(QJsonObject json) {

    m_failed_controls_isValid = ::OpenAPI::fromJsonValue(m_failed_controls, json[QString("failedControls")]);
    m_failed_controls_isSet = !json[QString("failedControls")].isNull() && m_failed_controls_isValid;

    m_passed_controls_isValid = ::OpenAPI::fromJsonValue(m_passed_controls, json[QString("passedControls")]);
    m_passed_controls_isSet = !json[QString("passedControls")].isNull() && m_passed_controls_isValid;

    m_skipped_controls_isValid = ::OpenAPI::fromJsonValue(m_skipped_controls, json[QString("skippedControls")]);
    m_skipped_controls_isSet = !json[QString("skippedControls")].isNull() && m_skipped_controls_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_unsupported_controls_isValid = ::OpenAPI::fromJsonValue(m_unsupported_controls, json[QString("unsupportedControls")]);
    m_unsupported_controls_isSet = !json[QString("unsupportedControls")].isNull() && m_unsupported_controls_isValid;
}

QString OAIRegulatoryComplianceStandardProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegulatoryComplianceStandardProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_controls_isSet) {
        obj.insert(QString("failedControls"), ::OpenAPI::toJsonValue(m_failed_controls));
    }
    if (m_passed_controls_isSet) {
        obj.insert(QString("passedControls"), ::OpenAPI::toJsonValue(m_passed_controls));
    }
    if (m_skipped_controls_isSet) {
        obj.insert(QString("skippedControls"), ::OpenAPI::toJsonValue(m_skipped_controls));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_unsupported_controls_isSet) {
        obj.insert(QString("unsupportedControls"), ::OpenAPI::toJsonValue(m_unsupported_controls));
    }
    return obj;
}

qint32 OAIRegulatoryComplianceStandardProperties::getFailedControls() const {
    return m_failed_controls;
}
void OAIRegulatoryComplianceStandardProperties::setFailedControls(const qint32 &failed_controls) {
    m_failed_controls = failed_controls;
    m_failed_controls_isSet = true;
}

bool OAIRegulatoryComplianceStandardProperties::is_failed_controls_Set() const{
    return m_failed_controls_isSet;
}

bool OAIRegulatoryComplianceStandardProperties::is_failed_controls_Valid() const{
    return m_failed_controls_isValid;
}

qint32 OAIRegulatoryComplianceStandardProperties::getPassedControls() const {
    return m_passed_controls;
}
void OAIRegulatoryComplianceStandardProperties::setPassedControls(const qint32 &passed_controls) {
    m_passed_controls = passed_controls;
    m_passed_controls_isSet = true;
}

bool OAIRegulatoryComplianceStandardProperties::is_passed_controls_Set() const{
    return m_passed_controls_isSet;
}

bool OAIRegulatoryComplianceStandardProperties::is_passed_controls_Valid() const{
    return m_passed_controls_isValid;
}

qint32 OAIRegulatoryComplianceStandardProperties::getSkippedControls() const {
    return m_skipped_controls;
}
void OAIRegulatoryComplianceStandardProperties::setSkippedControls(const qint32 &skipped_controls) {
    m_skipped_controls = skipped_controls;
    m_skipped_controls_isSet = true;
}

bool OAIRegulatoryComplianceStandardProperties::is_skipped_controls_Set() const{
    return m_skipped_controls_isSet;
}

bool OAIRegulatoryComplianceStandardProperties::is_skipped_controls_Valid() const{
    return m_skipped_controls_isValid;
}

QString OAIRegulatoryComplianceStandardProperties::getState() const {
    return m_state;
}
void OAIRegulatoryComplianceStandardProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRegulatoryComplianceStandardProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRegulatoryComplianceStandardProperties::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIRegulatoryComplianceStandardProperties::getUnsupportedControls() const {
    return m_unsupported_controls;
}
void OAIRegulatoryComplianceStandardProperties::setUnsupportedControls(const qint32 &unsupported_controls) {
    m_unsupported_controls = unsupported_controls;
    m_unsupported_controls_isSet = true;
}

bool OAIRegulatoryComplianceStandardProperties::is_unsupported_controls_Set() const{
    return m_unsupported_controls_isSet;
}

bool OAIRegulatoryComplianceStandardProperties::is_unsupported_controls_Valid() const{
    return m_unsupported_controls_isValid;
}

bool OAIRegulatoryComplianceStandardProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_controls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passed_controls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_controls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_controls_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegulatoryComplianceStandardProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
