/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegulatoryComplianceApi_H
#define OAI_OAIRegulatoryComplianceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRegulatoryComplianceAssessment.h"
#include "OAIRegulatoryComplianceAssessmentList.h"
#include "OAIRegulatoryComplianceControl.h"
#include "OAIRegulatoryComplianceControlList.h"
#include "OAIRegulatoryComplianceStandard.h"
#include "OAIRegulatoryComplianceStandardList.h"
#include "OAIRegulatoryComplianceStandards_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegulatoryComplianceApi : public QObject {
    Q_OBJECT

public:
    OAIRegulatoryComplianceApi(const int timeOut = 0);
    ~OAIRegulatoryComplianceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  regulatory_compliance_standard_name QString [required]
    * @param[in]  regulatory_compliance_control_name QString [required]
    * @param[in]  regulatory_compliance_assessment_name QString [required]
    */
    virtual void regulatoryComplianceAssessmentsGet(const QString &api_version, const QString &subscription_id, const QString &regulatory_compliance_standard_name, const QString &regulatory_compliance_control_name, const QString &regulatory_compliance_assessment_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  regulatory_compliance_standard_name QString [required]
    * @param[in]  regulatory_compliance_control_name QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void regulatoryComplianceAssessmentsList(const QString &api_version, const QString &subscription_id, const QString &regulatory_compliance_standard_name, const QString &regulatory_compliance_control_name, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  regulatory_compliance_standard_name QString [required]
    * @param[in]  regulatory_compliance_control_name QString [required]
    */
    virtual void regulatoryComplianceControlsGet(const QString &api_version, const QString &subscription_id, const QString &regulatory_compliance_standard_name, const QString &regulatory_compliance_control_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  regulatory_compliance_standard_name QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void regulatoryComplianceControlsList(const QString &api_version, const QString &subscription_id, const QString &regulatory_compliance_standard_name, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  regulatory_compliance_standard_name QString [required]
    */
    virtual void regulatoryComplianceStandardsGet(const QString &api_version, const QString &subscription_id, const QString &regulatory_compliance_standard_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void regulatoryComplianceStandardsList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void regulatoryComplianceAssessmentsGetCallback(OAIHttpRequestWorker *worker);
    void regulatoryComplianceAssessmentsListCallback(OAIHttpRequestWorker *worker);
    void regulatoryComplianceControlsGetCallback(OAIHttpRequestWorker *worker);
    void regulatoryComplianceControlsListCallback(OAIHttpRequestWorker *worker);
    void regulatoryComplianceStandardsGetCallback(OAIHttpRequestWorker *worker);
    void regulatoryComplianceStandardsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void regulatoryComplianceAssessmentsGetSignal(OAIRegulatoryComplianceAssessment summary);
    void regulatoryComplianceAssessmentsListSignal(OAIRegulatoryComplianceAssessmentList summary);
    void regulatoryComplianceControlsGetSignal(OAIRegulatoryComplianceControl summary);
    void regulatoryComplianceControlsListSignal(OAIRegulatoryComplianceControlList summary);
    void regulatoryComplianceStandardsGetSignal(OAIRegulatoryComplianceStandard summary);
    void regulatoryComplianceStandardsListSignal(OAIRegulatoryComplianceStandardList summary);


    void regulatoryComplianceAssessmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIRegulatoryComplianceAssessment summary);
    void regulatoryComplianceAssessmentsListSignalFull(OAIHttpRequestWorker *worker, OAIRegulatoryComplianceAssessmentList summary);
    void regulatoryComplianceControlsGetSignalFull(OAIHttpRequestWorker *worker, OAIRegulatoryComplianceControl summary);
    void regulatoryComplianceControlsListSignalFull(OAIHttpRequestWorker *worker, OAIRegulatoryComplianceControlList summary);
    void regulatoryComplianceStandardsGetSignalFull(OAIHttpRequestWorker *worker, OAIRegulatoryComplianceStandard summary);
    void regulatoryComplianceStandardsListSignalFull(OAIHttpRequestWorker *worker, OAIRegulatoryComplianceStandardList summary);

    Q_DECL_DEPRECATED_X("Use regulatoryComplianceAssessmentsGetSignalError() instead")
    void regulatoryComplianceAssessmentsGetSignalE(OAIRegulatoryComplianceAssessment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceAssessmentsGetSignalError(OAIRegulatoryComplianceAssessment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulatoryComplianceAssessmentsListSignalError() instead")
    void regulatoryComplianceAssessmentsListSignalE(OAIRegulatoryComplianceAssessmentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceAssessmentsListSignalError(OAIRegulatoryComplianceAssessmentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulatoryComplianceControlsGetSignalError() instead")
    void regulatoryComplianceControlsGetSignalE(OAIRegulatoryComplianceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceControlsGetSignalError(OAIRegulatoryComplianceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulatoryComplianceControlsListSignalError() instead")
    void regulatoryComplianceControlsListSignalE(OAIRegulatoryComplianceControlList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceControlsListSignalError(OAIRegulatoryComplianceControlList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulatoryComplianceStandardsGetSignalError() instead")
    void regulatoryComplianceStandardsGetSignalE(OAIRegulatoryComplianceStandard summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceStandardsGetSignalError(OAIRegulatoryComplianceStandard summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulatoryComplianceStandardsListSignalError() instead")
    void regulatoryComplianceStandardsListSignalE(OAIRegulatoryComplianceStandardList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceStandardsListSignalError(OAIRegulatoryComplianceStandardList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use regulatoryComplianceAssessmentsGetSignalErrorFull() instead")
    void regulatoryComplianceAssessmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceAssessmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulatoryComplianceAssessmentsListSignalErrorFull() instead")
    void regulatoryComplianceAssessmentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceAssessmentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulatoryComplianceControlsGetSignalErrorFull() instead")
    void regulatoryComplianceControlsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceControlsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulatoryComplianceControlsListSignalErrorFull() instead")
    void regulatoryComplianceControlsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceControlsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulatoryComplianceStandardsGetSignalErrorFull() instead")
    void regulatoryComplianceStandardsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceStandardsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regulatoryComplianceStandardsListSignalErrorFull() instead")
    void regulatoryComplianceStandardsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regulatoryComplianceStandardsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
