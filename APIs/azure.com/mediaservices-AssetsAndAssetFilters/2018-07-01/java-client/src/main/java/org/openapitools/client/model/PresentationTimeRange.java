/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The presentation time range, this is asset related and not recommended for Account Filter.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:32:42.394953-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PresentationTimeRange {
  public static final String SERIALIZED_NAME_END_TIMESTAMP = "endTimestamp";
  @SerializedName(SERIALIZED_NAME_END_TIMESTAMP)
  private Long endTimestamp;

  public static final String SERIALIZED_NAME_FORCE_END_TIMESTAMP = "forceEndTimestamp";
  @SerializedName(SERIALIZED_NAME_FORCE_END_TIMESTAMP)
  private Boolean forceEndTimestamp;

  public static final String SERIALIZED_NAME_LIVE_BACKOFF_DURATION = "liveBackoffDuration";
  @SerializedName(SERIALIZED_NAME_LIVE_BACKOFF_DURATION)
  private Long liveBackoffDuration;

  public static final String SERIALIZED_NAME_PRESENTATION_WINDOW_DURATION = "presentationWindowDuration";
  @SerializedName(SERIALIZED_NAME_PRESENTATION_WINDOW_DURATION)
  private Long presentationWindowDuration;

  public static final String SERIALIZED_NAME_START_TIMESTAMP = "startTimestamp";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP)
  private Long startTimestamp;

  public static final String SERIALIZED_NAME_TIMESCALE = "timescale";
  @SerializedName(SERIALIZED_NAME_TIMESCALE)
  private Long timescale;

  public PresentationTimeRange() {
  }

  public PresentationTimeRange endTimestamp(Long endTimestamp) {
    this.endTimestamp = endTimestamp;
    return this;
  }

  /**
   * The absolute end time boundary.
   * @return endTimestamp
   */
  @javax.annotation.Nullable
  public Long getEndTimestamp() {
    return endTimestamp;
  }

  public void setEndTimestamp(Long endTimestamp) {
    this.endTimestamp = endTimestamp;
  }


  public PresentationTimeRange forceEndTimestamp(Boolean forceEndTimestamp) {
    this.forceEndTimestamp = forceEndTimestamp;
    return this;
  }

  /**
   * The indicator of forcing existing of end time stamp.
   * @return forceEndTimestamp
   */
  @javax.annotation.Nullable
  public Boolean getForceEndTimestamp() {
    return forceEndTimestamp;
  }

  public void setForceEndTimestamp(Boolean forceEndTimestamp) {
    this.forceEndTimestamp = forceEndTimestamp;
  }


  public PresentationTimeRange liveBackoffDuration(Long liveBackoffDuration) {
    this.liveBackoffDuration = liveBackoffDuration;
    return this;
  }

  /**
   * The relative to end right edge.
   * @return liveBackoffDuration
   */
  @javax.annotation.Nullable
  public Long getLiveBackoffDuration() {
    return liveBackoffDuration;
  }

  public void setLiveBackoffDuration(Long liveBackoffDuration) {
    this.liveBackoffDuration = liveBackoffDuration;
  }


  public PresentationTimeRange presentationWindowDuration(Long presentationWindowDuration) {
    this.presentationWindowDuration = presentationWindowDuration;
    return this;
  }

  /**
   * The relative to end sliding window.
   * @return presentationWindowDuration
   */
  @javax.annotation.Nullable
  public Long getPresentationWindowDuration() {
    return presentationWindowDuration;
  }

  public void setPresentationWindowDuration(Long presentationWindowDuration) {
    this.presentationWindowDuration = presentationWindowDuration;
  }


  public PresentationTimeRange startTimestamp(Long startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

  /**
   * The absolute start time boundary.
   * @return startTimestamp
   */
  @javax.annotation.Nullable
  public Long getStartTimestamp() {
    return startTimestamp;
  }

  public void setStartTimestamp(Long startTimestamp) {
    this.startTimestamp = startTimestamp;
  }


  public PresentationTimeRange timescale(Long timescale) {
    this.timescale = timescale;
    return this;
  }

  /**
   * The time scale of time stamps.
   * @return timescale
   */
  @javax.annotation.Nullable
  public Long getTimescale() {
    return timescale;
  }

  public void setTimescale(Long timescale) {
    this.timescale = timescale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PresentationTimeRange presentationTimeRange = (PresentationTimeRange) o;
    return Objects.equals(this.endTimestamp, presentationTimeRange.endTimestamp) &&
        Objects.equals(this.forceEndTimestamp, presentationTimeRange.forceEndTimestamp) &&
        Objects.equals(this.liveBackoffDuration, presentationTimeRange.liveBackoffDuration) &&
        Objects.equals(this.presentationWindowDuration, presentationTimeRange.presentationWindowDuration) &&
        Objects.equals(this.startTimestamp, presentationTimeRange.startTimestamp) &&
        Objects.equals(this.timescale, presentationTimeRange.timescale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTimestamp, forceEndTimestamp, liveBackoffDuration, presentationWindowDuration, startTimestamp, timescale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PresentationTimeRange {\n");
    sb.append("    endTimestamp: ").append(toIndentedString(endTimestamp)).append("\n");
    sb.append("    forceEndTimestamp: ").append(toIndentedString(forceEndTimestamp)).append("\n");
    sb.append("    liveBackoffDuration: ").append(toIndentedString(liveBackoffDuration)).append("\n");
    sb.append("    presentationWindowDuration: ").append(toIndentedString(presentationWindowDuration)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    timescale: ").append(toIndentedString(timescale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTimestamp");
    openapiFields.add("forceEndTimestamp");
    openapiFields.add("liveBackoffDuration");
    openapiFields.add("presentationWindowDuration");
    openapiFields.add("startTimestamp");
    openapiFields.add("timescale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PresentationTimeRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PresentationTimeRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PresentationTimeRange is not found in the empty JSON string", PresentationTimeRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PresentationTimeRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PresentationTimeRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PresentationTimeRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PresentationTimeRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PresentationTimeRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PresentationTimeRange.class));

       return (TypeAdapter<T>) new TypeAdapter<PresentationTimeRange>() {
           @Override
           public void write(JsonWriter out, PresentationTimeRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PresentationTimeRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PresentationTimeRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PresentationTimeRange
   * @throws IOException if the JSON string is invalid with respect to PresentationTimeRange
   */
  public static PresentationTimeRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PresentationTimeRange.class);
  }

  /**
   * Convert an instance of PresentationTimeRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

