# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_file_encryption_metadata import AssetFileEncryptionMetadata
import re
from openapi_server import util


class StorageEncryptedAssetDecryptionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_file_encryption_metadata: List[AssetFileEncryptionMetadata]=None, key: str=None):
        """StorageEncryptedAssetDecryptionData - a model defined in OpenAPI

        :param asset_file_encryption_metadata: The asset_file_encryption_metadata of this StorageEncryptedAssetDecryptionData.
        :param key: The key of this StorageEncryptedAssetDecryptionData.
        """
        self.openapi_types = {
            'asset_file_encryption_metadata': List[AssetFileEncryptionMetadata],
            'key': str
        }

        self.attribute_map = {
            'asset_file_encryption_metadata': 'assetFileEncryptionMetadata',
            'key': 'key'
        }

        self._asset_file_encryption_metadata = asset_file_encryption_metadata
        self._key = key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageEncryptedAssetDecryptionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageEncryptedAssetDecryptionData of this StorageEncryptedAssetDecryptionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_file_encryption_metadata(self):
        """Gets the asset_file_encryption_metadata of this StorageEncryptedAssetDecryptionData.

        Asset File encryption metadata.

        :return: The asset_file_encryption_metadata of this StorageEncryptedAssetDecryptionData.
        :rtype: List[AssetFileEncryptionMetadata]
        """
        return self._asset_file_encryption_metadata

    @asset_file_encryption_metadata.setter
    def asset_file_encryption_metadata(self, asset_file_encryption_metadata):
        """Sets the asset_file_encryption_metadata of this StorageEncryptedAssetDecryptionData.

        Asset File encryption metadata.

        :param asset_file_encryption_metadata: The asset_file_encryption_metadata of this StorageEncryptedAssetDecryptionData.
        :type asset_file_encryption_metadata: List[AssetFileEncryptionMetadata]
        """

        self._asset_file_encryption_metadata = asset_file_encryption_metadata

    @property
    def key(self):
        """Gets the key of this StorageEncryptedAssetDecryptionData.

        The Asset File storage encryption key.

        :return: The key of this StorageEncryptedAssetDecryptionData.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this StorageEncryptedAssetDecryptionData.

        The Asset File storage encryption key.

        :param key: The key of this StorageEncryptedAssetDecryptionData.
        :type key: str
        """
        if key is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', key):
            raise ValueError("Invalid value for `key`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._key = key
