# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter_track_selection import FilterTrackSelection
from openapi_server.models.first_quality import FirstQuality
from openapi_server.models.presentation_time_range import PresentationTimeRange
from openapi_server import util


class MediaFilterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_quality: FirstQuality=None, presentation_time_range: PresentationTimeRange=None, tracks: List[FilterTrackSelection]=None):
        """MediaFilterProperties - a model defined in OpenAPI

        :param first_quality: The first_quality of this MediaFilterProperties.
        :param presentation_time_range: The presentation_time_range of this MediaFilterProperties.
        :param tracks: The tracks of this MediaFilterProperties.
        """
        self.openapi_types = {
            'first_quality': FirstQuality,
            'presentation_time_range': PresentationTimeRange,
            'tracks': List[FilterTrackSelection]
        }

        self.attribute_map = {
            'first_quality': 'firstQuality',
            'presentation_time_range': 'presentationTimeRange',
            'tracks': 'tracks'
        }

        self._first_quality = first_quality
        self._presentation_time_range = presentation_time_range
        self._tracks = tracks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaFilterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaFilterProperties of this MediaFilterProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_quality(self):
        """Gets the first_quality of this MediaFilterProperties.


        :return: The first_quality of this MediaFilterProperties.
        :rtype: FirstQuality
        """
        return self._first_quality

    @first_quality.setter
    def first_quality(self, first_quality):
        """Sets the first_quality of this MediaFilterProperties.


        :param first_quality: The first_quality of this MediaFilterProperties.
        :type first_quality: FirstQuality
        """

        self._first_quality = first_quality

    @property
    def presentation_time_range(self):
        """Gets the presentation_time_range of this MediaFilterProperties.


        :return: The presentation_time_range of this MediaFilterProperties.
        :rtype: PresentationTimeRange
        """
        return self._presentation_time_range

    @presentation_time_range.setter
    def presentation_time_range(self, presentation_time_range):
        """Sets the presentation_time_range of this MediaFilterProperties.


        :param presentation_time_range: The presentation_time_range of this MediaFilterProperties.
        :type presentation_time_range: PresentationTimeRange
        """

        self._presentation_time_range = presentation_time_range

    @property
    def tracks(self):
        """Gets the tracks of this MediaFilterProperties.

        The tracks selection conditions.

        :return: The tracks of this MediaFilterProperties.
        :rtype: List[FilterTrackSelection]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this MediaFilterProperties.

        The tracks selection conditions.

        :param tracks: The tracks of this MediaFilterProperties.
        :type tracks: List[FilterTrackSelection]
        """

        self._tracks = tracks
