# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_id: str=None, asset_id: str=None, container: str=None, created: datetime=None, description: str=None, last_modified: datetime=None, storage_account_name: str=None, storage_encryption_format: str=None):
        """AssetProperties - a model defined in OpenAPI

        :param alternate_id: The alternate_id of this AssetProperties.
        :param asset_id: The asset_id of this AssetProperties.
        :param container: The container of this AssetProperties.
        :param created: The created of this AssetProperties.
        :param description: The description of this AssetProperties.
        :param last_modified: The last_modified of this AssetProperties.
        :param storage_account_name: The storage_account_name of this AssetProperties.
        :param storage_encryption_format: The storage_encryption_format of this AssetProperties.
        """
        self.openapi_types = {
            'alternate_id': str,
            'asset_id': str,
            'container': str,
            'created': datetime,
            'description': str,
            'last_modified': datetime,
            'storage_account_name': str,
            'storage_encryption_format': str
        }

        self.attribute_map = {
            'alternate_id': 'alternateId',
            'asset_id': 'assetId',
            'container': 'container',
            'created': 'created',
            'description': 'description',
            'last_modified': 'lastModified',
            'storage_account_name': 'storageAccountName',
            'storage_encryption_format': 'storageEncryptionFormat'
        }

        self._alternate_id = alternate_id
        self._asset_id = asset_id
        self._container = container
        self._created = created
        self._description = description
        self._last_modified = last_modified
        self._storage_account_name = storage_account_name
        self._storage_encryption_format = storage_encryption_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetProperties of this AssetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_id(self):
        """Gets the alternate_id of this AssetProperties.

        The alternate ID of the Asset.

        :return: The alternate_id of this AssetProperties.
        :rtype: str
        """
        return self._alternate_id

    @alternate_id.setter
    def alternate_id(self, alternate_id):
        """Sets the alternate_id of this AssetProperties.

        The alternate ID of the Asset.

        :param alternate_id: The alternate_id of this AssetProperties.
        :type alternate_id: str
        """

        self._alternate_id = alternate_id

    @property
    def asset_id(self):
        """Gets the asset_id of this AssetProperties.

        The Asset ID.

        :return: The asset_id of this AssetProperties.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this AssetProperties.

        The Asset ID.

        :param asset_id: The asset_id of this AssetProperties.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def container(self):
        """Gets the container of this AssetProperties.

        The name of the asset blob container.

        :return: The container of this AssetProperties.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this AssetProperties.

        The name of the asset blob container.

        :param container: The container of this AssetProperties.
        :type container: str
        """

        self._container = container

    @property
    def created(self):
        """Gets the created of this AssetProperties.

        The creation date of the Asset.

        :return: The created of this AssetProperties.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AssetProperties.

        The creation date of the Asset.

        :param created: The created of this AssetProperties.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this AssetProperties.

        The Asset description.

        :return: The description of this AssetProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssetProperties.

        The Asset description.

        :param description: The description of this AssetProperties.
        :type description: str
        """

        self._description = description

    @property
    def last_modified(self):
        """Gets the last_modified of this AssetProperties.

        The last modified date of the Asset.

        :return: The last_modified of this AssetProperties.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this AssetProperties.

        The last modified date of the Asset.

        :param last_modified: The last_modified of this AssetProperties.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def storage_account_name(self):
        """Gets the storage_account_name of this AssetProperties.

        The name of the storage account.

        :return: The storage_account_name of this AssetProperties.
        :rtype: str
        """
        return self._storage_account_name

    @storage_account_name.setter
    def storage_account_name(self, storage_account_name):
        """Sets the storage_account_name of this AssetProperties.

        The name of the storage account.

        :param storage_account_name: The storage_account_name of this AssetProperties.
        :type storage_account_name: str
        """

        self._storage_account_name = storage_account_name

    @property
    def storage_encryption_format(self):
        """Gets the storage_encryption_format of this AssetProperties.

        The Asset encryption format. One of None or MediaStorageEncryption.

        :return: The storage_encryption_format of this AssetProperties.
        :rtype: str
        """
        return self._storage_encryption_format

    @storage_encryption_format.setter
    def storage_encryption_format(self, storage_encryption_format):
        """Sets the storage_encryption_format of this AssetProperties.

        The Asset encryption format. One of None or MediaStorageEncryption.

        :param storage_encryption_format: The storage_encryption_format of this AssetProperties.
        :type storage_encryption_format: str
        """
        allowed_values = ["None", "MediaStorageClientEncryption"]  # noqa: E501
        if storage_encryption_format not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_encryption_format` ({0}), must be one of {1}"
                .format(storage_encryption_format, allowed_values)
            )

        self._storage_encryption_format = storage_encryption_format
