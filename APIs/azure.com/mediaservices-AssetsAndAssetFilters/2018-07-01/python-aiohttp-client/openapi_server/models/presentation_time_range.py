# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PresentationTimeRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_timestamp: int=None, force_end_timestamp: bool=None, live_backoff_duration: int=None, presentation_window_duration: int=None, start_timestamp: int=None, timescale: int=None):
        """PresentationTimeRange - a model defined in OpenAPI

        :param end_timestamp: The end_timestamp of this PresentationTimeRange.
        :param force_end_timestamp: The force_end_timestamp of this PresentationTimeRange.
        :param live_backoff_duration: The live_backoff_duration of this PresentationTimeRange.
        :param presentation_window_duration: The presentation_window_duration of this PresentationTimeRange.
        :param start_timestamp: The start_timestamp of this PresentationTimeRange.
        :param timescale: The timescale of this PresentationTimeRange.
        """
        self.openapi_types = {
            'end_timestamp': int,
            'force_end_timestamp': bool,
            'live_backoff_duration': int,
            'presentation_window_duration': int,
            'start_timestamp': int,
            'timescale': int
        }

        self.attribute_map = {
            'end_timestamp': 'endTimestamp',
            'force_end_timestamp': 'forceEndTimestamp',
            'live_backoff_duration': 'liveBackoffDuration',
            'presentation_window_duration': 'presentationWindowDuration',
            'start_timestamp': 'startTimestamp',
            'timescale': 'timescale'
        }

        self._end_timestamp = end_timestamp
        self._force_end_timestamp = force_end_timestamp
        self._live_backoff_duration = live_backoff_duration
        self._presentation_window_duration = presentation_window_duration
        self._start_timestamp = start_timestamp
        self._timescale = timescale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PresentationTimeRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PresentationTimeRange of this PresentationTimeRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this PresentationTimeRange.

        The absolute end time boundary.

        :return: The end_timestamp of this PresentationTimeRange.
        :rtype: int
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this PresentationTimeRange.

        The absolute end time boundary.

        :param end_timestamp: The end_timestamp of this PresentationTimeRange.
        :type end_timestamp: int
        """

        self._end_timestamp = end_timestamp

    @property
    def force_end_timestamp(self):
        """Gets the force_end_timestamp of this PresentationTimeRange.

        The indicator of forcing existing of end time stamp.

        :return: The force_end_timestamp of this PresentationTimeRange.
        :rtype: bool
        """
        return self._force_end_timestamp

    @force_end_timestamp.setter
    def force_end_timestamp(self, force_end_timestamp):
        """Sets the force_end_timestamp of this PresentationTimeRange.

        The indicator of forcing existing of end time stamp.

        :param force_end_timestamp: The force_end_timestamp of this PresentationTimeRange.
        :type force_end_timestamp: bool
        """

        self._force_end_timestamp = force_end_timestamp

    @property
    def live_backoff_duration(self):
        """Gets the live_backoff_duration of this PresentationTimeRange.

        The relative to end right edge.

        :return: The live_backoff_duration of this PresentationTimeRange.
        :rtype: int
        """
        return self._live_backoff_duration

    @live_backoff_duration.setter
    def live_backoff_duration(self, live_backoff_duration):
        """Sets the live_backoff_duration of this PresentationTimeRange.

        The relative to end right edge.

        :param live_backoff_duration: The live_backoff_duration of this PresentationTimeRange.
        :type live_backoff_duration: int
        """

        self._live_backoff_duration = live_backoff_duration

    @property
    def presentation_window_duration(self):
        """Gets the presentation_window_duration of this PresentationTimeRange.

        The relative to end sliding window.

        :return: The presentation_window_duration of this PresentationTimeRange.
        :rtype: int
        """
        return self._presentation_window_duration

    @presentation_window_duration.setter
    def presentation_window_duration(self, presentation_window_duration):
        """Sets the presentation_window_duration of this PresentationTimeRange.

        The relative to end sliding window.

        :param presentation_window_duration: The presentation_window_duration of this PresentationTimeRange.
        :type presentation_window_duration: int
        """

        self._presentation_window_duration = presentation_window_duration

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this PresentationTimeRange.

        The absolute start time boundary.

        :return: The start_timestamp of this PresentationTimeRange.
        :rtype: int
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this PresentationTimeRange.

        The absolute start time boundary.

        :param start_timestamp: The start_timestamp of this PresentationTimeRange.
        :type start_timestamp: int
        """

        self._start_timestamp = start_timestamp

    @property
    def timescale(self):
        """Gets the timescale of this PresentationTimeRange.

        The time scale of time stamps.

        :return: The timescale of this PresentationTimeRange.
        :rtype: int
        """
        return self._timescale

    @timescale.setter
    def timescale(self, timescale):
        """Sets the timescale of this PresentationTimeRange.

        The time scale of time stamps.

        :param timescale: The timescale of this PresentationTimeRange.
        :type timescale: int
        """

        self._timescale = timescale
