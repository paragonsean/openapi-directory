# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FilterTrackPropertyCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operation: str=None, _property: str=None, value: str=None):
        """FilterTrackPropertyCondition - a model defined in OpenAPI

        :param operation: The operation of this FilterTrackPropertyCondition.
        :param _property: The _property of this FilterTrackPropertyCondition.
        :param value: The value of this FilterTrackPropertyCondition.
        """
        self.openapi_types = {
            'operation': str,
            '_property': str,
            'value': str
        }

        self.attribute_map = {
            'operation': 'operation',
            '_property': 'property',
            'value': 'value'
        }

        self._operation = operation
        self.__property = _property
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FilterTrackPropertyCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FilterTrackPropertyCondition of this FilterTrackPropertyCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operation(self):
        """Gets the operation of this FilterTrackPropertyCondition.

        The track property condition operation.

        :return: The operation of this FilterTrackPropertyCondition.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this FilterTrackPropertyCondition.

        The track property condition operation.

        :param operation: The operation of this FilterTrackPropertyCondition.
        :type operation: str
        """
        allowed_values = ["Equal", "NotEqual"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def _property(self):
        """Gets the _property of this FilterTrackPropertyCondition.

        The track property type.

        :return: The _property of this FilterTrackPropertyCondition.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this FilterTrackPropertyCondition.

        The track property type.

        :param _property: The _property of this FilterTrackPropertyCondition.
        :type _property: str
        """
        allowed_values = ["Unknown", "Type", "Name", "Language", "FourCC", "Bitrate"]  # noqa: E501
        if _property not in allowed_values:
            raise ValueError(
                "Invalid value for `_property` ({0}), must be one of {1}"
                .format(_property, allowed_values)
            )

        self.__property = _property

    @property
    def value(self):
        """Gets the value of this FilterTrackPropertyCondition.

        The track property value.

        :return: The value of this FilterTrackPropertyCondition.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FilterTrackPropertyCondition.

        The track property value.

        :param value: The value of this FilterTrackPropertyCondition.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
