/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssetStreamingLocator model module.
 * @module model/AssetStreamingLocator
 * @version 2018-07-01
 */
class AssetStreamingLocator {
    /**
     * Constructs a new <code>AssetStreamingLocator</code>.
     * Properties of the Streaming Locator.
     * @alias module:model/AssetStreamingLocator
     */
    constructor() { 
        
        AssetStreamingLocator.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssetStreamingLocator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetStreamingLocator} obj Optional instance to populate.
     * @return {module:model/AssetStreamingLocator} The populated <code>AssetStreamingLocator</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetStreamingLocator();

            if (data.hasOwnProperty('assetName')) {
                obj['assetName'] = ApiClient.convertToType(data['assetName'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('defaultContentKeyPolicyName')) {
                obj['defaultContentKeyPolicyName'] = ApiClient.convertToType(data['defaultContentKeyPolicyName'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('streamingLocatorId')) {
                obj['streamingLocatorId'] = ApiClient.convertToType(data['streamingLocatorId'], 'String');
            }
            if (data.hasOwnProperty('streamingPolicyName')) {
                obj['streamingPolicyName'] = ApiClient.convertToType(data['streamingPolicyName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetStreamingLocator</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetStreamingLocator</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assetName'] && !(typeof data['assetName'] === 'string' || data['assetName'] instanceof String)) {
            throw new Error("Expected the field `assetName` to be a primitive type in the JSON string but got " + data['assetName']);
        }
        // ensure the json data is a string
        if (data['defaultContentKeyPolicyName'] && !(typeof data['defaultContentKeyPolicyName'] === 'string' || data['defaultContentKeyPolicyName'] instanceof String)) {
            throw new Error("Expected the field `defaultContentKeyPolicyName` to be a primitive type in the JSON string but got " + data['defaultContentKeyPolicyName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['streamingLocatorId'] && !(typeof data['streamingLocatorId'] === 'string' || data['streamingLocatorId'] instanceof String)) {
            throw new Error("Expected the field `streamingLocatorId` to be a primitive type in the JSON string but got " + data['streamingLocatorId']);
        }
        // ensure the json data is a string
        if (data['streamingPolicyName'] && !(typeof data['streamingPolicyName'] === 'string' || data['streamingPolicyName'] instanceof String)) {
            throw new Error("Expected the field `streamingPolicyName` to be a primitive type in the JSON string but got " + data['streamingPolicyName']);
        }

        return true;
    }


}



/**
 * Asset Name.
 * @member {String} assetName
 */
AssetStreamingLocator.prototype['assetName'] = undefined;

/**
 * The creation time of the Streaming Locator.
 * @member {Date} created
 */
AssetStreamingLocator.prototype['created'] = undefined;

/**
 * Name of the default ContentKeyPolicy used by this Streaming Locator.
 * @member {String} defaultContentKeyPolicyName
 */
AssetStreamingLocator.prototype['defaultContentKeyPolicyName'] = undefined;

/**
 * The end time of the Streaming Locator.
 * @member {Date} endTime
 */
AssetStreamingLocator.prototype['endTime'] = undefined;

/**
 * Streaming Locator name.
 * @member {String} name
 */
AssetStreamingLocator.prototype['name'] = undefined;

/**
 * The start time of the Streaming Locator.
 * @member {Date} startTime
 */
AssetStreamingLocator.prototype['startTime'] = undefined;

/**
 * StreamingLocatorId of the Streaming Locator.
 * @member {String} streamingLocatorId
 */
AssetStreamingLocator.prototype['streamingLocatorId'] = undefined;

/**
 * Name of the Streaming Policy used by this Streaming Locator.
 * @member {String} streamingPolicyName
 */
AssetStreamingLocator.prototype['streamingPolicyName'] = undefined;






export default AssetStreamingLocator;

