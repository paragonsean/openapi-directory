/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIAsset.h"
#include "OAIAssetCollection.h"
#include "OAIAssetContainerSas.h"
#include "OAIAssetFilter.h"
#include "OAIAssetFilterCollection.h"
#include "OAIListContainerSasInput.h"
#include "OAIListStreamingLocatorsResponse.h"
#include "OAIStorageEncryptedAssetDecryptionData.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  filter_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAssetFilter [required]
    */
    virtual void assetFiltersCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &filter_name, const QString &api_version, const OAIAssetFilter &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  filter_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void assetFiltersDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &filter_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  filter_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void assetFiltersGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &filter_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void assetFiltersList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  filter_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAssetFilter [required]
    */
    virtual void assetFiltersUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &filter_name, const QString &api_version, const OAIAssetFilter &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAsset [required]
    */
    virtual void assetsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &api_version, const OAIAsset &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void assetsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void assetsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void assetsGetEncryptionKey(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    */
    virtual void assetsList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIListContainerSasInput [required]
    */
    virtual void assetsListContainerSas(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &api_version, const OAIListContainerSasInput &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void assetsListStreamingLocators(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  asset_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAsset [required]
    */
    virtual void assetsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &asset_name, const QString &api_version, const OAIAsset &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assetFiltersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void assetFiltersDeleteCallback(OAIHttpRequestWorker *worker);
    void assetFiltersGetCallback(OAIHttpRequestWorker *worker);
    void assetFiltersListCallback(OAIHttpRequestWorker *worker);
    void assetFiltersUpdateCallback(OAIHttpRequestWorker *worker);
    void assetsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void assetsDeleteCallback(OAIHttpRequestWorker *worker);
    void assetsGetCallback(OAIHttpRequestWorker *worker);
    void assetsGetEncryptionKeyCallback(OAIHttpRequestWorker *worker);
    void assetsListCallback(OAIHttpRequestWorker *worker);
    void assetsListContainerSasCallback(OAIHttpRequestWorker *worker);
    void assetsListStreamingLocatorsCallback(OAIHttpRequestWorker *worker);
    void assetsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assetFiltersCreateOrUpdateSignal(OAIAssetFilter summary);
    void assetFiltersDeleteSignal();
    void assetFiltersGetSignal(OAIAssetFilter summary);
    void assetFiltersListSignal(OAIAssetFilterCollection summary);
    void assetFiltersUpdateSignal(OAIAssetFilter summary);
    void assetsCreateOrUpdateSignal(OAIAsset summary);
    void assetsDeleteSignal();
    void assetsGetSignal(OAIAsset summary);
    void assetsGetEncryptionKeySignal(OAIStorageEncryptedAssetDecryptionData summary);
    void assetsListSignal(OAIAssetCollection summary);
    void assetsListContainerSasSignal(OAIAssetContainerSas summary);
    void assetsListStreamingLocatorsSignal(OAIListStreamingLocatorsResponse summary);
    void assetsUpdateSignal(OAIAsset summary);


    void assetFiltersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAssetFilter summary);
    void assetFiltersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void assetFiltersGetSignalFull(OAIHttpRequestWorker *worker, OAIAssetFilter summary);
    void assetFiltersListSignalFull(OAIHttpRequestWorker *worker, OAIAssetFilterCollection summary);
    void assetFiltersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAssetFilter summary);
    void assetsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);
    void assetsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void assetsGetSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);
    void assetsGetEncryptionKeySignalFull(OAIHttpRequestWorker *worker, OAIStorageEncryptedAssetDecryptionData summary);
    void assetsListSignalFull(OAIHttpRequestWorker *worker, OAIAssetCollection summary);
    void assetsListContainerSasSignalFull(OAIHttpRequestWorker *worker, OAIAssetContainerSas summary);
    void assetsListStreamingLocatorsSignalFull(OAIHttpRequestWorker *worker, OAIListStreamingLocatorsResponse summary);
    void assetsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);

    Q_DECL_DEPRECATED_X("Use assetFiltersCreateOrUpdateSignalError() instead")
    void assetFiltersCreateOrUpdateSignalE(OAIAssetFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetFiltersCreateOrUpdateSignalError(OAIAssetFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetFiltersDeleteSignalError() instead")
    void assetFiltersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetFiltersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetFiltersGetSignalError() instead")
    void assetFiltersGetSignalE(OAIAssetFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetFiltersGetSignalError(OAIAssetFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetFiltersListSignalError() instead")
    void assetFiltersListSignalE(OAIAssetFilterCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetFiltersListSignalError(OAIAssetFilterCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetFiltersUpdateSignalError() instead")
    void assetFiltersUpdateSignalE(OAIAssetFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetFiltersUpdateSignalError(OAIAssetFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsCreateOrUpdateSignalError() instead")
    void assetsCreateOrUpdateSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsCreateOrUpdateSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsDeleteSignalError() instead")
    void assetsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assetsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsGetSignalError() instead")
    void assetsGetSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsGetSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsGetEncryptionKeySignalError() instead")
    void assetsGetEncryptionKeySignalE(OAIStorageEncryptedAssetDecryptionData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsGetEncryptionKeySignalError(OAIStorageEncryptedAssetDecryptionData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsListSignalError() instead")
    void assetsListSignalE(OAIAssetCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsListSignalError(OAIAssetCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsListContainerSasSignalError() instead")
    void assetsListContainerSasSignalE(OAIAssetContainerSas summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsListContainerSasSignalError(OAIAssetContainerSas summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsListStreamingLocatorsSignalError() instead")
    void assetsListStreamingLocatorsSignalE(OAIListStreamingLocatorsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsListStreamingLocatorsSignalError(OAIListStreamingLocatorsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsUpdateSignalError() instead")
    void assetsUpdateSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsUpdateSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assetFiltersCreateOrUpdateSignalErrorFull() instead")
    void assetFiltersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetFiltersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetFiltersDeleteSignalErrorFull() instead")
    void assetFiltersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetFiltersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetFiltersGetSignalErrorFull() instead")
    void assetFiltersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetFiltersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetFiltersListSignalErrorFull() instead")
    void assetFiltersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetFiltersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetFiltersUpdateSignalErrorFull() instead")
    void assetFiltersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetFiltersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsCreateOrUpdateSignalErrorFull() instead")
    void assetsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsDeleteSignalErrorFull() instead")
    void assetsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsGetSignalErrorFull() instead")
    void assetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsGetEncryptionKeySignalErrorFull() instead")
    void assetsGetEncryptionKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsGetEncryptionKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsListSignalErrorFull() instead")
    void assetsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsListContainerSasSignalErrorFull() instead")
    void assetsListContainerSasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsListContainerSasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsListStreamingLocatorsSignalErrorFull() instead")
    void assetsListStreamingLocatorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsListStreamingLocatorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assetsUpdateSignalErrorFull() instead")
    void assetsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assetsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
