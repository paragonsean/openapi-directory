/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetProperties::OAIAssetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetProperties::OAIAssetProperties() {
    this->initializeModel();
}

OAIAssetProperties::~OAIAssetProperties() {}

void OAIAssetProperties::initializeModel() {

    m_alternate_id_isSet = false;
    m_alternate_id_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_storage_account_name_isSet = false;
    m_storage_account_name_isValid = false;

    m_storage_encryption_format_isSet = false;
    m_storage_encryption_format_isValid = false;
}

void OAIAssetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetProperties::fromJsonObject(QJsonObject json) {

    m_alternate_id_isValid = ::OpenAPI::fromJsonValue(m_alternate_id, json[QString("alternateId")]);
    m_alternate_id_isSet = !json[QString("alternateId")].isNull() && m_alternate_id_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetId")]);
    m_asset_id_isSet = !json[QString("assetId")].isNull() && m_asset_id_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_storage_account_name_isValid = ::OpenAPI::fromJsonValue(m_storage_account_name, json[QString("storageAccountName")]);
    m_storage_account_name_isSet = !json[QString("storageAccountName")].isNull() && m_storage_account_name_isValid;

    m_storage_encryption_format_isValid = ::OpenAPI::fromJsonValue(m_storage_encryption_format, json[QString("storageEncryptionFormat")]);
    m_storage_encryption_format_isSet = !json[QString("storageEncryptionFormat")].isNull() && m_storage_encryption_format_isValid;
}

QString OAIAssetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_id_isSet) {
        obj.insert(QString("alternateId"), ::OpenAPI::toJsonValue(m_alternate_id));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("assetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_storage_account_name_isSet) {
        obj.insert(QString("storageAccountName"), ::OpenAPI::toJsonValue(m_storage_account_name));
    }
    if (m_storage_encryption_format_isSet) {
        obj.insert(QString("storageEncryptionFormat"), ::OpenAPI::toJsonValue(m_storage_encryption_format));
    }
    return obj;
}

QString OAIAssetProperties::getAlternateId() const {
    return m_alternate_id;
}
void OAIAssetProperties::setAlternateId(const QString &alternate_id) {
    m_alternate_id = alternate_id;
    m_alternate_id_isSet = true;
}

bool OAIAssetProperties::is_alternate_id_Set() const{
    return m_alternate_id_isSet;
}

bool OAIAssetProperties::is_alternate_id_Valid() const{
    return m_alternate_id_isValid;
}

QString OAIAssetProperties::getAssetId() const {
    return m_asset_id;
}
void OAIAssetProperties::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIAssetProperties::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIAssetProperties::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIAssetProperties::getContainer() const {
    return m_container;
}
void OAIAssetProperties::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIAssetProperties::is_container_Set() const{
    return m_container_isSet;
}

bool OAIAssetProperties::is_container_Valid() const{
    return m_container_isValid;
}

QDateTime OAIAssetProperties::getCreated() const {
    return m_created;
}
void OAIAssetProperties::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAssetProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAssetProperties::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIAssetProperties::getDescription() const {
    return m_description;
}
void OAIAssetProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssetProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssetProperties::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIAssetProperties::getLastModified() const {
    return m_last_modified;
}
void OAIAssetProperties::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIAssetProperties::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIAssetProperties::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIAssetProperties::getStorageAccountName() const {
    return m_storage_account_name;
}
void OAIAssetProperties::setStorageAccountName(const QString &storage_account_name) {
    m_storage_account_name = storage_account_name;
    m_storage_account_name_isSet = true;
}

bool OAIAssetProperties::is_storage_account_name_Set() const{
    return m_storage_account_name_isSet;
}

bool OAIAssetProperties::is_storage_account_name_Valid() const{
    return m_storage_account_name_isValid;
}

QString OAIAssetProperties::getStorageEncryptionFormat() const {
    return m_storage_encryption_format;
}
void OAIAssetProperties::setStorageEncryptionFormat(const QString &storage_encryption_format) {
    m_storage_encryption_format = storage_encryption_format;
    m_storage_encryption_format_isSet = true;
}

bool OAIAssetProperties::is_storage_encryption_format_Set() const{
    return m_storage_encryption_format_isSet;
}

bool OAIAssetProperties::is_storage_encryption_format_Valid() const{
    return m_storage_encryption_format_isValid;
}

bool OAIAssetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_encryption_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
