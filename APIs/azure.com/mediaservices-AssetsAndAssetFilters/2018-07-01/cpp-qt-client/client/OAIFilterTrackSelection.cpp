/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterTrackSelection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterTrackSelection::OAIFilterTrackSelection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterTrackSelection::OAIFilterTrackSelection() {
    this->initializeModel();
}

OAIFilterTrackSelection::~OAIFilterTrackSelection() {}

void OAIFilterTrackSelection::initializeModel() {

    m_track_selections_isSet = false;
    m_track_selections_isValid = false;
}

void OAIFilterTrackSelection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterTrackSelection::fromJsonObject(QJsonObject json) {

    m_track_selections_isValid = ::OpenAPI::fromJsonValue(m_track_selections, json[QString("trackSelections")]);
    m_track_selections_isSet = !json[QString("trackSelections")].isNull() && m_track_selections_isValid;
}

QString OAIFilterTrackSelection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterTrackSelection::asJsonObject() const {
    QJsonObject obj;
    if (m_track_selections.size() > 0) {
        obj.insert(QString("trackSelections"), ::OpenAPI::toJsonValue(m_track_selections));
    }
    return obj;
}

QList<OAIFilterTrackPropertyCondition> OAIFilterTrackSelection::getTrackSelections() const {
    return m_track_selections;
}
void OAIFilterTrackSelection::setTrackSelections(const QList<OAIFilterTrackPropertyCondition> &track_selections) {
    m_track_selections = track_selections;
    m_track_selections_isSet = true;
}

bool OAIFilterTrackSelection::is_track_selections_Set() const{
    return m_track_selections_isSet;
}

bool OAIFilterTrackSelection::is_track_selections_Valid() const{
    return m_track_selections_isValid;
}

bool OAIFilterTrackSelection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_track_selections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterTrackSelection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_track_selections_isValid && true;
}

} // namespace OpenAPI
