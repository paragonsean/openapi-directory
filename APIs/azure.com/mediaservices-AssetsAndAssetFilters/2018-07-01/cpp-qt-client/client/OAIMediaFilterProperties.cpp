/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaFilterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaFilterProperties::OAIMediaFilterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaFilterProperties::OAIMediaFilterProperties() {
    this->initializeModel();
}

OAIMediaFilterProperties::~OAIMediaFilterProperties() {}

void OAIMediaFilterProperties::initializeModel() {

    m_first_quality_isSet = false;
    m_first_quality_isValid = false;

    m_presentation_time_range_isSet = false;
    m_presentation_time_range_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAIMediaFilterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaFilterProperties::fromJsonObject(QJsonObject json) {

    m_first_quality_isValid = ::OpenAPI::fromJsonValue(m_first_quality, json[QString("firstQuality")]);
    m_first_quality_isSet = !json[QString("firstQuality")].isNull() && m_first_quality_isValid;

    m_presentation_time_range_isValid = ::OpenAPI::fromJsonValue(m_presentation_time_range, json[QString("presentationTimeRange")]);
    m_presentation_time_range_isSet = !json[QString("presentationTimeRange")].isNull() && m_presentation_time_range_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OAIMediaFilterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaFilterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_first_quality.isSet()) {
        obj.insert(QString("firstQuality"), ::OpenAPI::toJsonValue(m_first_quality));
    }
    if (m_presentation_time_range.isSet()) {
        obj.insert(QString("presentationTimeRange"), ::OpenAPI::toJsonValue(m_presentation_time_range));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    return obj;
}

OAIFirstQuality OAIMediaFilterProperties::getFirstQuality() const {
    return m_first_quality;
}
void OAIMediaFilterProperties::setFirstQuality(const OAIFirstQuality &first_quality) {
    m_first_quality = first_quality;
    m_first_quality_isSet = true;
}

bool OAIMediaFilterProperties::is_first_quality_Set() const{
    return m_first_quality_isSet;
}

bool OAIMediaFilterProperties::is_first_quality_Valid() const{
    return m_first_quality_isValid;
}

OAIPresentationTimeRange OAIMediaFilterProperties::getPresentationTimeRange() const {
    return m_presentation_time_range;
}
void OAIMediaFilterProperties::setPresentationTimeRange(const OAIPresentationTimeRange &presentation_time_range) {
    m_presentation_time_range = presentation_time_range;
    m_presentation_time_range_isSet = true;
}

bool OAIMediaFilterProperties::is_presentation_time_range_Set() const{
    return m_presentation_time_range_isSet;
}

bool OAIMediaFilterProperties::is_presentation_time_range_Valid() const{
    return m_presentation_time_range_isValid;
}

QList<OAIFilterTrackSelection> OAIMediaFilterProperties::getTracks() const {
    return m_tracks;
}
void OAIMediaFilterProperties::setTracks(const QList<OAIFilterTrackSelection> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIMediaFilterProperties::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIMediaFilterProperties::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAIMediaFilterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_quality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presentation_time_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaFilterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
