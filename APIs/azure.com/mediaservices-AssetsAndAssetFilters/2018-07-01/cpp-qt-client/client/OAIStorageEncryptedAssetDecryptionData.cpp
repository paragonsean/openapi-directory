/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageEncryptedAssetDecryptionData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageEncryptedAssetDecryptionData::OAIStorageEncryptedAssetDecryptionData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageEncryptedAssetDecryptionData::OAIStorageEncryptedAssetDecryptionData() {
    this->initializeModel();
}

OAIStorageEncryptedAssetDecryptionData::~OAIStorageEncryptedAssetDecryptionData() {}

void OAIStorageEncryptedAssetDecryptionData::initializeModel() {

    m_asset_file_encryption_metadata_isSet = false;
    m_asset_file_encryption_metadata_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIStorageEncryptedAssetDecryptionData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageEncryptedAssetDecryptionData::fromJsonObject(QJsonObject json) {

    m_asset_file_encryption_metadata_isValid = ::OpenAPI::fromJsonValue(m_asset_file_encryption_metadata, json[QString("assetFileEncryptionMetadata")]);
    m_asset_file_encryption_metadata_isSet = !json[QString("assetFileEncryptionMetadata")].isNull() && m_asset_file_encryption_metadata_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;
}

QString OAIStorageEncryptedAssetDecryptionData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageEncryptedAssetDecryptionData::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_file_encryption_metadata.size() > 0) {
        obj.insert(QString("assetFileEncryptionMetadata"), ::OpenAPI::toJsonValue(m_asset_file_encryption_metadata));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

QList<OAIAssetFileEncryptionMetadata> OAIStorageEncryptedAssetDecryptionData::getAssetFileEncryptionMetadata() const {
    return m_asset_file_encryption_metadata;
}
void OAIStorageEncryptedAssetDecryptionData::setAssetFileEncryptionMetadata(const QList<OAIAssetFileEncryptionMetadata> &asset_file_encryption_metadata) {
    m_asset_file_encryption_metadata = asset_file_encryption_metadata;
    m_asset_file_encryption_metadata_isSet = true;
}

bool OAIStorageEncryptedAssetDecryptionData::is_asset_file_encryption_metadata_Set() const{
    return m_asset_file_encryption_metadata_isSet;
}

bool OAIStorageEncryptedAssetDecryptionData::is_asset_file_encryption_metadata_Valid() const{
    return m_asset_file_encryption_metadata_isValid;
}

QByteArray OAIStorageEncryptedAssetDecryptionData::getKey() const {
    return m_key;
}
void OAIStorageEncryptedAssetDecryptionData::setKey(const QByteArray &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIStorageEncryptedAssetDecryptionData::is_key_Set() const{
    return m_key_isSet;
}

bool OAIStorageEncryptedAssetDecryptionData::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIStorageEncryptedAssetDecryptionData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_file_encryption_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageEncryptedAssetDecryptionData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
