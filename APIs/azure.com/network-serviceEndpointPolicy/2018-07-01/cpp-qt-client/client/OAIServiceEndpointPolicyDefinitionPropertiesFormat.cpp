/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceEndpointPolicyDefinitionPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceEndpointPolicyDefinitionPropertiesFormat::OAIServiceEndpointPolicyDefinitionPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceEndpointPolicyDefinitionPropertiesFormat::OAIServiceEndpointPolicyDefinitionPropertiesFormat() {
    this->initializeModel();
}

OAIServiceEndpointPolicyDefinitionPropertiesFormat::~OAIServiceEndpointPolicyDefinitionPropertiesFormat() {}

void OAIServiceEndpointPolicyDefinitionPropertiesFormat::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_service_resources_isSet = false;
    m_service_resources_isValid = false;
}

void OAIServiceEndpointPolicyDefinitionPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceEndpointPolicyDefinitionPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_service_resources_isValid = ::OpenAPI::fromJsonValue(m_service_resources, json[QString("serviceResources")]);
    m_service_resources_isSet = !json[QString("serviceResources")].isNull() && m_service_resources_isValid;
}

QString OAIServiceEndpointPolicyDefinitionPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceEndpointPolicyDefinitionPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_service_resources.size() > 0) {
        obj.insert(QString("serviceResources"), ::OpenAPI::toJsonValue(m_service_resources));
    }
    return obj;
}

QString OAIServiceEndpointPolicyDefinitionPropertiesFormat::getDescription() const {
    return m_description;
}
void OAIServiceEndpointPolicyDefinitionPropertiesFormat::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceEndpointPolicyDefinitionPropertiesFormat::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceEndpointPolicyDefinitionPropertiesFormat::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIServiceEndpointPolicyDefinitionPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIServiceEndpointPolicyDefinitionPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIServiceEndpointPolicyDefinitionPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIServiceEndpointPolicyDefinitionPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIServiceEndpointPolicyDefinitionPropertiesFormat::getService() const {
    return m_service;
}
void OAIServiceEndpointPolicyDefinitionPropertiesFormat::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIServiceEndpointPolicyDefinitionPropertiesFormat::is_service_Set() const{
    return m_service_isSet;
}

bool OAIServiceEndpointPolicyDefinitionPropertiesFormat::is_service_Valid() const{
    return m_service_isValid;
}

QList<QString> OAIServiceEndpointPolicyDefinitionPropertiesFormat::getServiceResources() const {
    return m_service_resources;
}
void OAIServiceEndpointPolicyDefinitionPropertiesFormat::setServiceResources(const QList<QString> &service_resources) {
    m_service_resources = service_resources;
    m_service_resources_isSet = true;
}

bool OAIServiceEndpointPolicyDefinitionPropertiesFormat::is_service_resources_Set() const{
    return m_service_resources_isSet;
}

bool OAIServiceEndpointPolicyDefinitionPropertiesFormat::is_service_resources_Valid() const{
    return m_service_resources_isValid;
}

bool OAIServiceEndpointPolicyDefinitionPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceEndpointPolicyDefinitionPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
