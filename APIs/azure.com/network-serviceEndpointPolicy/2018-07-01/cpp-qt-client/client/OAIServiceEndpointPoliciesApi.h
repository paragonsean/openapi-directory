/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceEndpointPoliciesApi_H
#define OAI_OAIServiceEndpointPoliciesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIServiceEndpointPolicies_Update_request.h"
#include "OAIServiceEndpointPolicy.h"
#include "OAIServiceEndpointPolicyListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceEndpointPoliciesApi : public QObject {
    Q_OBJECT

public:
    OAIServiceEndpointPoliciesApi(const int timeOut = 0);
    ~OAIServiceEndpointPoliciesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_endpoint_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIServiceEndpointPolicy [required]
    */
    virtual void serviceEndpointPoliciesCreateOrUpdate(const QString &resource_group_name, const QString &service_endpoint_policy_name, const QString &api_version, const QString &subscription_id, const OAIServiceEndpointPolicy &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_endpoint_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serviceEndpointPoliciesDelete(const QString &resource_group_name, const QString &service_endpoint_policy_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_endpoint_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void serviceEndpointPoliciesGet(const QString &resource_group_name, const QString &service_endpoint_policy_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serviceEndpointPoliciesList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serviceEndpointPoliciesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_endpoint_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIServiceEndpointPolicies_Update_request [required]
    */
    virtual void serviceEndpointPoliciesUpdate(const QString &resource_group_name, const QString &service_endpoint_policy_name, const QString &api_version, const QString &subscription_id, const OAIServiceEndpointPolicies_Update_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serviceEndpointPoliciesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void serviceEndpointPoliciesDeleteCallback(OAIHttpRequestWorker *worker);
    void serviceEndpointPoliciesGetCallback(OAIHttpRequestWorker *worker);
    void serviceEndpointPoliciesListCallback(OAIHttpRequestWorker *worker);
    void serviceEndpointPoliciesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void serviceEndpointPoliciesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serviceEndpointPoliciesCreateOrUpdateSignal(OAIServiceEndpointPolicy summary);
    void serviceEndpointPoliciesDeleteSignal();
    void serviceEndpointPoliciesGetSignal(OAIServiceEndpointPolicy summary);
    void serviceEndpointPoliciesListSignal(OAIServiceEndpointPolicyListResult summary);
    void serviceEndpointPoliciesListByResourceGroupSignal(OAIServiceEndpointPolicyListResult summary);
    void serviceEndpointPoliciesUpdateSignal(OAIServiceEndpointPolicy summary);


    void serviceEndpointPoliciesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceEndpointPolicy summary);
    void serviceEndpointPoliciesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serviceEndpointPoliciesGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceEndpointPolicy summary);
    void serviceEndpointPoliciesListSignalFull(OAIHttpRequestWorker *worker, OAIServiceEndpointPolicyListResult summary);
    void serviceEndpointPoliciesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIServiceEndpointPolicyListResult summary);
    void serviceEndpointPoliciesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceEndpointPolicy summary);

    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesCreateOrUpdateSignalError() instead")
    void serviceEndpointPoliciesCreateOrUpdateSignalE(OAIServiceEndpointPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesCreateOrUpdateSignalError(OAIServiceEndpointPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesDeleteSignalError() instead")
    void serviceEndpointPoliciesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesGetSignalError() instead")
    void serviceEndpointPoliciesGetSignalE(OAIServiceEndpointPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesGetSignalError(OAIServiceEndpointPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesListSignalError() instead")
    void serviceEndpointPoliciesListSignalE(OAIServiceEndpointPolicyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesListSignalError(OAIServiceEndpointPolicyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesListByResourceGroupSignalError() instead")
    void serviceEndpointPoliciesListByResourceGroupSignalE(OAIServiceEndpointPolicyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesListByResourceGroupSignalError(OAIServiceEndpointPolicyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesUpdateSignalError() instead")
    void serviceEndpointPoliciesUpdateSignalE(OAIServiceEndpointPolicy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesUpdateSignalError(OAIServiceEndpointPolicy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesCreateOrUpdateSignalErrorFull() instead")
    void serviceEndpointPoliciesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesDeleteSignalErrorFull() instead")
    void serviceEndpointPoliciesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesGetSignalErrorFull() instead")
    void serviceEndpointPoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesListSignalErrorFull() instead")
    void serviceEndpointPoliciesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesListByResourceGroupSignalErrorFull() instead")
    void serviceEndpointPoliciesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPoliciesUpdateSignalErrorFull() instead")
    void serviceEndpointPoliciesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPoliciesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
