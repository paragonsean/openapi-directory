/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceEndpointPolicyDefinitionsApi_H
#define OAI_OAIServiceEndpointPolicyDefinitionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIServiceEndpointPolicyDefinition.h"
#include "OAIServiceEndpointPolicyDefinitionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceEndpointPolicyDefinitionsApi : public QObject {
    Q_OBJECT

public:
    OAIServiceEndpointPolicyDefinitionsApi(const int timeOut = 0);
    ~OAIServiceEndpointPolicyDefinitionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_endpoint_policy_name QString [required]
    * @param[in]  service_endpoint_policy_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  service_endpoint_policy_definitions OAIServiceEndpointPolicyDefinition [required]
    */
    virtual void serviceEndpointPolicyDefinitionsCreateOrUpdate(const QString &resource_group_name, const QString &service_endpoint_policy_name, const QString &service_endpoint_policy_definition_name, const QString &api_version, const QString &subscription_id, const OAIServiceEndpointPolicyDefinition &service_endpoint_policy_definitions);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_endpoint_policy_name QString [required]
    * @param[in]  service_endpoint_policy_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serviceEndpointPolicyDefinitionsDelete(const QString &resource_group_name, const QString &service_endpoint_policy_name, const QString &service_endpoint_policy_definition_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_endpoint_policy_name QString [required]
    * @param[in]  service_endpoint_policy_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serviceEndpointPolicyDefinitionsGet(const QString &resource_group_name, const QString &service_endpoint_policy_name, const QString &service_endpoint_policy_definition_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_endpoint_policy_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serviceEndpointPolicyDefinitionsListByResourceGroup(const QString &resource_group_name, const QString &service_endpoint_policy_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serviceEndpointPolicyDefinitionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void serviceEndpointPolicyDefinitionsDeleteCallback(OAIHttpRequestWorker *worker);
    void serviceEndpointPolicyDefinitionsGetCallback(OAIHttpRequestWorker *worker);
    void serviceEndpointPolicyDefinitionsListByResourceGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serviceEndpointPolicyDefinitionsCreateOrUpdateSignal(OAIServiceEndpointPolicyDefinition summary);
    void serviceEndpointPolicyDefinitionsDeleteSignal();
    void serviceEndpointPolicyDefinitionsGetSignal(OAIServiceEndpointPolicyDefinition summary);
    void serviceEndpointPolicyDefinitionsListByResourceGroupSignal(OAIServiceEndpointPolicyDefinitionListResult summary);


    void serviceEndpointPolicyDefinitionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceEndpointPolicyDefinition summary);
    void serviceEndpointPolicyDefinitionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serviceEndpointPolicyDefinitionsGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceEndpointPolicyDefinition summary);
    void serviceEndpointPolicyDefinitionsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIServiceEndpointPolicyDefinitionListResult summary);

    Q_DECL_DEPRECATED_X("Use serviceEndpointPolicyDefinitionsCreateOrUpdateSignalError() instead")
    void serviceEndpointPolicyDefinitionsCreateOrUpdateSignalE(OAIServiceEndpointPolicyDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPolicyDefinitionsCreateOrUpdateSignalError(OAIServiceEndpointPolicyDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPolicyDefinitionsDeleteSignalError() instead")
    void serviceEndpointPolicyDefinitionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPolicyDefinitionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPolicyDefinitionsGetSignalError() instead")
    void serviceEndpointPolicyDefinitionsGetSignalE(OAIServiceEndpointPolicyDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPolicyDefinitionsGetSignalError(OAIServiceEndpointPolicyDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPolicyDefinitionsListByResourceGroupSignalError() instead")
    void serviceEndpointPolicyDefinitionsListByResourceGroupSignalE(OAIServiceEndpointPolicyDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPolicyDefinitionsListByResourceGroupSignalError(OAIServiceEndpointPolicyDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serviceEndpointPolicyDefinitionsCreateOrUpdateSignalErrorFull() instead")
    void serviceEndpointPolicyDefinitionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPolicyDefinitionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPolicyDefinitionsDeleteSignalErrorFull() instead")
    void serviceEndpointPolicyDefinitionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPolicyDefinitionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPolicyDefinitionsGetSignalErrorFull() instead")
    void serviceEndpointPolicyDefinitionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPolicyDefinitionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceEndpointPolicyDefinitionsListByResourceGroupSignalErrorFull() instead")
    void serviceEndpointPolicyDefinitionsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceEndpointPolicyDefinitionsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
