/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ServiceEndpointPolicyDefinition;
import org.openapitools.client.model.ServiceEndpointPolicyDefinitionListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceEndpointPolicyDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServiceEndpointPolicyDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceEndpointPolicyDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for serviceEndpointPolicyDefinitionsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serviceEndpointPolicyDefinitions Parameters supplied to the create or update service endpoint policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPolicyDefinitionsCreateOrUpdateCall(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, ServiceEndpointPolicyDefinition serviceEndpointPolicyDefinitions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceEndpointPolicyDefinitions;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}/serviceEndpointPolicyDefinitions/{serviceEndpointPolicyDefinitionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceEndpointPolicyName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyName.toString()))
            .replace("{" + "serviceEndpointPolicyDefinitionName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceEndpointPolicyDefinitionsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, ServiceEndpointPolicyDefinition serviceEndpointPolicyDefinitions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceEndpointPolicyDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyName' is set
        if (serviceEndpointPolicyName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyName' when calling serviceEndpointPolicyDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyDefinitionName' is set
        if (serviceEndpointPolicyDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyDefinitionName' when calling serviceEndpointPolicyDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceEndpointPolicyDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceEndpointPolicyDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyDefinitions' is set
        if (serviceEndpointPolicyDefinitions == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyDefinitions' when calling serviceEndpointPolicyDefinitionsCreateOrUpdate(Async)");
        }

        return serviceEndpointPolicyDefinitionsCreateOrUpdateCall(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId, serviceEndpointPolicyDefinitions, _callback);

    }

    /**
     * 
     * Creates or updates a service endpoint policy definition in the specified service endpoint policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serviceEndpointPolicyDefinitions Parameters supplied to the create or update service endpoint policy operation. (required)
     * @return ServiceEndpointPolicyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceEndpointPolicyDefinition serviceEndpointPolicyDefinitionsCreateOrUpdate(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, ServiceEndpointPolicyDefinition serviceEndpointPolicyDefinitions) throws ApiException {
        ApiResponse<ServiceEndpointPolicyDefinition> localVarResp = serviceEndpointPolicyDefinitionsCreateOrUpdateWithHttpInfo(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId, serviceEndpointPolicyDefinitions);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a service endpoint policy definition in the specified service endpoint policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serviceEndpointPolicyDefinitions Parameters supplied to the create or update service endpoint policy operation. (required)
     * @return ApiResponse&lt;ServiceEndpointPolicyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceEndpointPolicyDefinition> serviceEndpointPolicyDefinitionsCreateOrUpdateWithHttpInfo(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, ServiceEndpointPolicyDefinition serviceEndpointPolicyDefinitions) throws ApiException {
        okhttp3.Call localVarCall = serviceEndpointPolicyDefinitionsCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId, serviceEndpointPolicyDefinitions, null);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a service endpoint policy definition in the specified service endpoint policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serviceEndpointPolicyDefinitions Parameters supplied to the create or update service endpoint policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPolicyDefinitionsCreateOrUpdateAsync(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, ServiceEndpointPolicyDefinition serviceEndpointPolicyDefinitions, final ApiCallback<ServiceEndpointPolicyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceEndpointPolicyDefinitionsCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId, serviceEndpointPolicyDefinitions, _callback);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceEndpointPolicyDefinitionsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the Service Endpoint Policy. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPolicyDefinitionsDeleteCall(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}/serviceEndpointPolicyDefinitions/{serviceEndpointPolicyDefinitionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceEndpointPolicyName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyName.toString()))
            .replace("{" + "serviceEndpointPolicyDefinitionName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceEndpointPolicyDefinitionsDeleteValidateBeforeCall(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceEndpointPolicyDefinitionsDelete(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyName' is set
        if (serviceEndpointPolicyName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyName' when calling serviceEndpointPolicyDefinitionsDelete(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyDefinitionName' is set
        if (serviceEndpointPolicyDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyDefinitionName' when calling serviceEndpointPolicyDefinitionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceEndpointPolicyDefinitionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceEndpointPolicyDefinitionsDelete(Async)");
        }

        return serviceEndpointPolicyDefinitionsDeleteCall(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified ServiceEndpoint policy definitions.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the Service Endpoint Policy. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void serviceEndpointPolicyDefinitionsDelete(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        serviceEndpointPolicyDefinitionsDeleteWithHttpInfo(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified ServiceEndpoint policy definitions.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the Service Endpoint Policy. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceEndpointPolicyDefinitionsDeleteWithHttpInfo(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serviceEndpointPolicyDefinitionsDeleteValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified ServiceEndpoint policy definitions.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the Service Endpoint Policy. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPolicyDefinitionsDeleteAsync(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceEndpointPolicyDefinitionsDeleteValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceEndpointPolicyDefinitionsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy name. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPolicyDefinitionsGetCall(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}/serviceEndpointPolicyDefinitions/{serviceEndpointPolicyDefinitionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceEndpointPolicyName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyName.toString()))
            .replace("{" + "serviceEndpointPolicyDefinitionName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceEndpointPolicyDefinitionsGetValidateBeforeCall(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceEndpointPolicyDefinitionsGet(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyName' is set
        if (serviceEndpointPolicyName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyName' when calling serviceEndpointPolicyDefinitionsGet(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyDefinitionName' is set
        if (serviceEndpointPolicyDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyDefinitionName' when calling serviceEndpointPolicyDefinitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceEndpointPolicyDefinitionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceEndpointPolicyDefinitionsGet(Async)");
        }

        return serviceEndpointPolicyDefinitionsGetCall(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Get the specified service endpoint policy definitions from service endpoint policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy name. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ServiceEndpointPolicyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceEndpointPolicyDefinition serviceEndpointPolicyDefinitionsGet(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ServiceEndpointPolicyDefinition> localVarResp = serviceEndpointPolicyDefinitionsGetWithHttpInfo(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the specified service endpoint policy definitions from service endpoint policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy name. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ServiceEndpointPolicyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceEndpointPolicyDefinition> serviceEndpointPolicyDefinitionsGetWithHttpInfo(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serviceEndpointPolicyDefinitionsGetValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the specified service endpoint policy definitions from service endpoint policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy name. (required)
     * @param serviceEndpointPolicyDefinitionName The name of the service endpoint policy definition name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ServiceEndpointPolicyDefinition resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPolicyDefinitionsGetAsync(String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback<ServiceEndpointPolicyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceEndpointPolicyDefinitionsGetValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceEndpointPolicyDefinitionsListByResourceGroup
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicyDefinition resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPolicyDefinitionsListByResourceGroupCall(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}/serviceEndpointPolicyDefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceEndpointPolicyName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceEndpointPolicyDefinitionsListByResourceGroupValidateBeforeCall(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceEndpointPolicyDefinitionsListByResourceGroup(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyName' is set
        if (serviceEndpointPolicyName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyName' when calling serviceEndpointPolicyDefinitionsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceEndpointPolicyDefinitionsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceEndpointPolicyDefinitionsListByResourceGroup(Async)");
        }

        return serviceEndpointPolicyDefinitionsListByResourceGroupCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all service endpoint policy definitions in a service end point policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ServiceEndpointPolicyDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicyDefinition resources. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceEndpointPolicyDefinitionListResult serviceEndpointPolicyDefinitionsListByResourceGroup(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ServiceEndpointPolicyDefinitionListResult> localVarResp = serviceEndpointPolicyDefinitionsListByResourceGroupWithHttpInfo(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all service endpoint policy definitions in a service end point policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ServiceEndpointPolicyDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicyDefinition resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceEndpointPolicyDefinitionListResult> serviceEndpointPolicyDefinitionsListByResourceGroupWithHttpInfo(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serviceEndpointPolicyDefinitionsListByResourceGroupValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicyDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all service endpoint policy definitions in a service end point policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicyDefinition resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPolicyDefinitionsListByResourceGroupAsync(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, final ApiCallback<ServiceEndpointPolicyDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceEndpointPolicyDefinitionsListByResourceGroupValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicyDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
