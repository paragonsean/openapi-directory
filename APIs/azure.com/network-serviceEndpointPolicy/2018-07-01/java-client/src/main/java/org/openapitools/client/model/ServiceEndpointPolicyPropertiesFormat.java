/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServiceEndpointPolicyDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Service Endpoint Policy resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:10:01.267678-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceEndpointPolicyPropertiesFormat {
  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_GUID = "resourceGuid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GUID)
  private String resourceGuid;

  public static final String SERIALIZED_NAME_SERVICE_ENDPOINT_POLICY_DEFINITIONS = "serviceEndpointPolicyDefinitions";
  @SerializedName(SERIALIZED_NAME_SERVICE_ENDPOINT_POLICY_DEFINITIONS)
  private List<ServiceEndpointPolicyDefinition> serviceEndpointPolicyDefinitions = new ArrayList<>();

  public ServiceEndpointPolicyPropertiesFormat() {
  }

  public ServiceEndpointPolicyPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of the service endpoint policy. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ServiceEndpointPolicyPropertiesFormat resourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
    return this;
  }

  /**
   * The resource GUID property of the service endpoint policy resource.
   * @return resourceGuid
   */
  @javax.annotation.Nullable
  public String getResourceGuid() {
    return resourceGuid;
  }

  public void setResourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
  }


  public ServiceEndpointPolicyPropertiesFormat serviceEndpointPolicyDefinitions(List<ServiceEndpointPolicyDefinition> serviceEndpointPolicyDefinitions) {
    this.serviceEndpointPolicyDefinitions = serviceEndpointPolicyDefinitions;
    return this;
  }

  public ServiceEndpointPolicyPropertiesFormat addServiceEndpointPolicyDefinitionsItem(ServiceEndpointPolicyDefinition serviceEndpointPolicyDefinitionsItem) {
    if (this.serviceEndpointPolicyDefinitions == null) {
      this.serviceEndpointPolicyDefinitions = new ArrayList<>();
    }
    this.serviceEndpointPolicyDefinitions.add(serviceEndpointPolicyDefinitionsItem);
    return this;
  }

  /**
   * A collection of service endpoint policy definitions of the service endpoint policy.
   * @return serviceEndpointPolicyDefinitions
   */
  @javax.annotation.Nullable
  public List<ServiceEndpointPolicyDefinition> getServiceEndpointPolicyDefinitions() {
    return serviceEndpointPolicyDefinitions;
  }

  public void setServiceEndpointPolicyDefinitions(List<ServiceEndpointPolicyDefinition> serviceEndpointPolicyDefinitions) {
    this.serviceEndpointPolicyDefinitions = serviceEndpointPolicyDefinitions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceEndpointPolicyPropertiesFormat serviceEndpointPolicyPropertiesFormat = (ServiceEndpointPolicyPropertiesFormat) o;
    return Objects.equals(this.provisioningState, serviceEndpointPolicyPropertiesFormat.provisioningState) &&
        Objects.equals(this.resourceGuid, serviceEndpointPolicyPropertiesFormat.resourceGuid) &&
        Objects.equals(this.serviceEndpointPolicyDefinitions, serviceEndpointPolicyPropertiesFormat.serviceEndpointPolicyDefinitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisioningState, resourceGuid, serviceEndpointPolicyDefinitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceEndpointPolicyPropertiesFormat {\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceGuid: ").append(toIndentedString(resourceGuid)).append("\n");
    sb.append("    serviceEndpointPolicyDefinitions: ").append(toIndentedString(serviceEndpointPolicyDefinitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("provisioningState");
    openapiFields.add("resourceGuid");
    openapiFields.add("serviceEndpointPolicyDefinitions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceEndpointPolicyPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceEndpointPolicyPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceEndpointPolicyPropertiesFormat is not found in the empty JSON string", ServiceEndpointPolicyPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceEndpointPolicyPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceEndpointPolicyPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceGuid") != null && !jsonObj.get("resourceGuid").isJsonNull()) && !jsonObj.get("resourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGuid").toString()));
      }
      if (jsonObj.get("serviceEndpointPolicyDefinitions") != null && !jsonObj.get("serviceEndpointPolicyDefinitions").isJsonNull()) {
        JsonArray jsonArrayserviceEndpointPolicyDefinitions = jsonObj.getAsJsonArray("serviceEndpointPolicyDefinitions");
        if (jsonArrayserviceEndpointPolicyDefinitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceEndpointPolicyDefinitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceEndpointPolicyDefinitions` to be an array in the JSON string but got `%s`", jsonObj.get("serviceEndpointPolicyDefinitions").toString()));
          }

          // validate the optional field `serviceEndpointPolicyDefinitions` (array)
          for (int i = 0; i < jsonArrayserviceEndpointPolicyDefinitions.size(); i++) {
            ServiceEndpointPolicyDefinition.validateJsonElement(jsonArrayserviceEndpointPolicyDefinitions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceEndpointPolicyPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceEndpointPolicyPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceEndpointPolicyPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceEndpointPolicyPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceEndpointPolicyPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ServiceEndpointPolicyPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceEndpointPolicyPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceEndpointPolicyPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceEndpointPolicyPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ServiceEndpointPolicyPropertiesFormat
   */
  public static ServiceEndpointPolicyPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceEndpointPolicyPropertiesFormat.class);
  }

  /**
   * Convert an instance of ServiceEndpointPolicyPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

