/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ServiceEndpointPoliciesUpdateRequest;
import org.openapitools.client.model.ServiceEndpointPolicy;
import org.openapitools.client.model.ServiceEndpointPolicyListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceEndpointPoliciesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServiceEndpointPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceEndpointPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for serviceEndpointPoliciesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update service endpoint policy operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesCreateOrUpdateCall(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, ServiceEndpointPolicy parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceEndpointPolicyName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceEndpointPoliciesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, ServiceEndpointPolicy parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceEndpointPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyName' is set
        if (serviceEndpointPolicyName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyName' when calling serviceEndpointPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceEndpointPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceEndpointPoliciesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling serviceEndpointPoliciesCreateOrUpdate(Async)");
        }

        return serviceEndpointPoliciesCreateOrUpdateCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a service Endpoint Policies.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update service endpoint policy operation. (required)
     * @return ServiceEndpointPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceEndpointPolicy serviceEndpointPoliciesCreateOrUpdate(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, ServiceEndpointPolicy parameters) throws ApiException {
        ApiResponse<ServiceEndpointPolicy> localVarResp = serviceEndpointPoliciesCreateOrUpdateWithHttpInfo(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a service Endpoint Policies.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update service endpoint policy operation. (required)
     * @return ApiResponse&lt;ServiceEndpointPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceEndpointPolicy> serviceEndpointPoliciesCreateOrUpdateWithHttpInfo(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, ServiceEndpointPolicy parameters) throws ApiException {
        okhttp3.Call localVarCall = serviceEndpointPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a service Endpoint Policies.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update service endpoint policy operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesCreateOrUpdateAsync(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, ServiceEndpointPolicy parameters, final ApiCallback<ServiceEndpointPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceEndpointPoliciesCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceEndpointPoliciesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesDeleteCall(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceEndpointPolicyName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceEndpointPoliciesDeleteValidateBeforeCall(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceEndpointPoliciesDelete(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyName' is set
        if (serviceEndpointPolicyName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyName' when calling serviceEndpointPoliciesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceEndpointPoliciesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceEndpointPoliciesDelete(Async)");
        }

        return serviceEndpointPoliciesDeleteCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified service endpoint policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void serviceEndpointPoliciesDelete(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        serviceEndpointPoliciesDeleteWithHttpInfo(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified service endpoint policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceEndpointPoliciesDeleteWithHttpInfo(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serviceEndpointPoliciesDeleteValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified service endpoint policy.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesDeleteAsync(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceEndpointPoliciesDeleteValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceEndpointPoliciesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesGetCall(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceEndpointPolicyName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceEndpointPoliciesGetValidateBeforeCall(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceEndpointPoliciesGet(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyName' is set
        if (serviceEndpointPolicyName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyName' when calling serviceEndpointPoliciesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceEndpointPoliciesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceEndpointPoliciesGet(Async)");
        }

        return serviceEndpointPoliciesGetCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, $expand, _callback);

    }

    /**
     * 
     * Gets the specified service Endpoint Policies in a specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @return ServiceEndpointPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceEndpointPolicy serviceEndpointPoliciesGet(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, String $expand) throws ApiException {
        ApiResponse<ServiceEndpointPolicy> localVarResp = serviceEndpointPoliciesGetWithHttpInfo(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified service Endpoint Policies in a specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @return ApiResponse&lt;ServiceEndpointPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceEndpointPolicy> serviceEndpointPoliciesGetWithHttpInfo(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, String $expand) throws ApiException {
        okhttp3.Call localVarCall = serviceEndpointPoliciesGetValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, $expand, null);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified service Endpoint Policies in a specified resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesGetAsync(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, String $expand, final ApiCallback<ServiceEndpointPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceEndpointPoliciesGetValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, $expand, _callback);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceEndpointPoliciesList
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/ServiceEndpointPolicies"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceEndpointPoliciesListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceEndpointPoliciesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceEndpointPoliciesList(Async)");
        }

        return serviceEndpointPoliciesListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the service endpoint policies in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ServiceEndpointPolicyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceEndpointPolicyListResult serviceEndpointPoliciesList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ServiceEndpointPolicyListResult> localVarResp = serviceEndpointPoliciesListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the service endpoint policies in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ServiceEndpointPolicyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceEndpointPolicyListResult> serviceEndpointPoliciesListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serviceEndpointPoliciesListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicyListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the service endpoint policies in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesListAsync(String apiVersion, String subscriptionId, final ApiCallback<ServiceEndpointPolicyListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceEndpointPoliciesListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicyListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceEndpointPoliciesListByResourceGroup
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceEndpointPoliciesListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceEndpointPoliciesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceEndpointPoliciesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceEndpointPoliciesListByResourceGroup(Async)");
        }

        return serviceEndpointPoliciesListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all service endpoint Policies in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ServiceEndpointPolicyListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceEndpointPolicyListResult serviceEndpointPoliciesListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ServiceEndpointPolicyListResult> localVarResp = serviceEndpointPoliciesListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all service endpoint Policies in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ServiceEndpointPolicyListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceEndpointPolicyListResult> serviceEndpointPoliciesListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serviceEndpointPoliciesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicyListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all service endpoint Policies in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ServiceEndpointPolicy resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<ServiceEndpointPolicyListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceEndpointPoliciesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicyListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceEndpointPoliciesUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update service endpoint policy tags. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesUpdateCall(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, ServiceEndpointPoliciesUpdateRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/serviceEndpointPolicies/{serviceEndpointPolicyName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceEndpointPolicyName" + "}", localVarApiClient.escapeString(serviceEndpointPolicyName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceEndpointPoliciesUpdateValidateBeforeCall(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, ServiceEndpointPoliciesUpdateRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serviceEndpointPoliciesUpdate(Async)");
        }

        // verify the required parameter 'serviceEndpointPolicyName' is set
        if (serviceEndpointPolicyName == null) {
            throw new ApiException("Missing the required parameter 'serviceEndpointPolicyName' when calling serviceEndpointPoliciesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceEndpointPoliciesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serviceEndpointPoliciesUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling serviceEndpointPoliciesUpdate(Async)");
        }

        return serviceEndpointPoliciesUpdateCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Updates service Endpoint Policies.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update service endpoint policy tags. (required)
     * @return ServiceEndpointPolicy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceEndpointPolicy serviceEndpointPoliciesUpdate(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, ServiceEndpointPoliciesUpdateRequest parameters) throws ApiException {
        ApiResponse<ServiceEndpointPolicy> localVarResp = serviceEndpointPoliciesUpdateWithHttpInfo(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates service Endpoint Policies.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update service endpoint policy tags. (required)
     * @return ApiResponse&lt;ServiceEndpointPolicy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceEndpointPolicy> serviceEndpointPoliciesUpdateWithHttpInfo(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, ServiceEndpointPoliciesUpdateRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = serviceEndpointPoliciesUpdateValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates service Endpoint Policies.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceEndpointPolicyName The name of the service endpoint policy. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to update service endpoint policy tags. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ServiceEndpointPolicy resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceEndpointPoliciesUpdateAsync(String resourceGroupName, String serviceEndpointPolicyName, String apiVersion, String subscriptionId, ServiceEndpointPoliciesUpdateRequest parameters, final ApiCallback<ServiceEndpointPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceEndpointPoliciesUpdateValidateBeforeCall(resourceGroupName, serviceEndpointPolicyName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ServiceEndpointPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
