/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatabasesApi_H
#define OAI_OAIDatabasesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDatabase.h"
#include "OAIDatabaseListResult.h"
#include "OAIDatabaseUpdate.h"
#include "OAIResourceMoveDefinition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatabasesApi : public QObject {
    Q_OBJECT

public:
    OAIDatabasesApi(const int timeOut = 0);
    ~OAIDatabasesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDatabase [required]
    */
    virtual void databasesCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version, const OAIDatabase &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databasesDelete(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databasesGet(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  elastic_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databasesListByElasticPool(const QString &resource_group_name, const QString &server_name, const QString &elastic_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databasesListByServer(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databasesPause(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIResourceMoveDefinition [required]
    */
    virtual void databasesRename(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version, const OAIResourceMoveDefinition &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databasesResume(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDatabaseUpdate [required]
    */
    virtual void databasesUpdate(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version, const OAIDatabaseUpdate &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void databasesUpgradeDataWarehouse(const QString &resource_group_name, const QString &server_name, const QString &database_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databasesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void databasesDeleteCallback(OAIHttpRequestWorker *worker);
    void databasesGetCallback(OAIHttpRequestWorker *worker);
    void databasesListByElasticPoolCallback(OAIHttpRequestWorker *worker);
    void databasesListByServerCallback(OAIHttpRequestWorker *worker);
    void databasesPauseCallback(OAIHttpRequestWorker *worker);
    void databasesRenameCallback(OAIHttpRequestWorker *worker);
    void databasesResumeCallback(OAIHttpRequestWorker *worker);
    void databasesUpdateCallback(OAIHttpRequestWorker *worker);
    void databasesUpgradeDataWarehouseCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void databasesCreateOrUpdateSignal(OAIDatabase summary);
    void databasesDeleteSignal();
    void databasesGetSignal(OAIDatabase summary);
    void databasesListByElasticPoolSignal(OAIDatabaseListResult summary);
    void databasesListByServerSignal(OAIDatabaseListResult summary);
    void databasesPauseSignal(OAIDatabase summary);
    void databasesRenameSignal();
    void databasesResumeSignal(OAIDatabase summary);
    void databasesUpdateSignal(OAIDatabase summary);
    void databasesUpgradeDataWarehouseSignal();


    void databasesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);
    void databasesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void databasesGetSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);
    void databasesListByElasticPoolSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseListResult summary);
    void databasesListByServerSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseListResult summary);
    void databasesPauseSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);
    void databasesRenameSignalFull(OAIHttpRequestWorker *worker);
    void databasesResumeSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);
    void databasesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);
    void databasesUpgradeDataWarehouseSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use databasesCreateOrUpdateSignalError() instead")
    void databasesCreateOrUpdateSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesCreateOrUpdateSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesDeleteSignalError() instead")
    void databasesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databasesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesGetSignalError() instead")
    void databasesGetSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesGetSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByElasticPoolSignalError() instead")
    void databasesListByElasticPoolSignalE(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByElasticPoolSignalError(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByServerSignalError() instead")
    void databasesListByServerSignalE(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByServerSignalError(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesPauseSignalError() instead")
    void databasesPauseSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesPauseSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesRenameSignalError() instead")
    void databasesRenameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databasesRenameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesResumeSignalError() instead")
    void databasesResumeSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesResumeSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesUpdateSignalError() instead")
    void databasesUpdateSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesUpdateSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesUpgradeDataWarehouseSignalError() instead")
    void databasesUpgradeDataWarehouseSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databasesUpgradeDataWarehouseSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use databasesCreateOrUpdateSignalErrorFull() instead")
    void databasesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesDeleteSignalErrorFull() instead")
    void databasesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesGetSignalErrorFull() instead")
    void databasesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByElasticPoolSignalErrorFull() instead")
    void databasesListByElasticPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByElasticPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByServerSignalErrorFull() instead")
    void databasesListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesPauseSignalErrorFull() instead")
    void databasesPauseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesPauseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesRenameSignalErrorFull() instead")
    void databasesRenameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesRenameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesResumeSignalErrorFull() instead")
    void databasesResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesUpdateSignalErrorFull() instead")
    void databasesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesUpgradeDataWarehouseSignalErrorFull() instead")
    void databasesUpgradeDataWarehouseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesUpgradeDataWarehouseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
