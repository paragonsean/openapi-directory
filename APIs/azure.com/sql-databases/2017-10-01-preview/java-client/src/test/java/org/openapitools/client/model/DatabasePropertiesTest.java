/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.Sku;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DatabaseProperties
 */
public class DatabasePropertiesTest {
    private final DatabaseProperties model = new DatabaseProperties();

    /**
     * Model tests for DatabaseProperties
     */
    @Test
    public void testDatabaseProperties() {
        // TODO: test DatabaseProperties
    }

    /**
     * Test the property 'autoPauseDelay'
     */
    @Test
    public void autoPauseDelayTest() {
        // TODO: test autoPauseDelay
    }

    /**
     * Test the property 'catalogCollation'
     */
    @Test
    public void catalogCollationTest() {
        // TODO: test catalogCollation
    }

    /**
     * Test the property 'collation'
     */
    @Test
    public void collationTest() {
        // TODO: test collation
    }

    /**
     * Test the property 'createMode'
     */
    @Test
    public void createModeTest() {
        // TODO: test createMode
    }

    /**
     * Test the property 'creationDate'
     */
    @Test
    public void creationDateTest() {
        // TODO: test creationDate
    }

    /**
     * Test the property 'currentServiceObjectiveName'
     */
    @Test
    public void currentServiceObjectiveNameTest() {
        // TODO: test currentServiceObjectiveName
    }

    /**
     * Test the property 'currentSku'
     */
    @Test
    public void currentSkuTest() {
        // TODO: test currentSku
    }

    /**
     * Test the property 'databaseId'
     */
    @Test
    public void databaseIdTest() {
        // TODO: test databaseId
    }

    /**
     * Test the property 'defaultSecondaryLocation'
     */
    @Test
    public void defaultSecondaryLocationTest() {
        // TODO: test defaultSecondaryLocation
    }

    /**
     * Test the property 'earliestRestoreDate'
     */
    @Test
    public void earliestRestoreDateTest() {
        // TODO: test earliestRestoreDate
    }

    /**
     * Test the property 'elasticPoolId'
     */
    @Test
    public void elasticPoolIdTest() {
        // TODO: test elasticPoolId
    }

    /**
     * Test the property 'failoverGroupId'
     */
    @Test
    public void failoverGroupIdTest() {
        // TODO: test failoverGroupId
    }

    /**
     * Test the property 'licenseType'
     */
    @Test
    public void licenseTypeTest() {
        // TODO: test licenseType
    }

    /**
     * Test the property 'longTermRetentionBackupResourceId'
     */
    @Test
    public void longTermRetentionBackupResourceIdTest() {
        // TODO: test longTermRetentionBackupResourceId
    }

    /**
     * Test the property 'maxLogSizeBytes'
     */
    @Test
    public void maxLogSizeBytesTest() {
        // TODO: test maxLogSizeBytes
    }

    /**
     * Test the property 'maxSizeBytes'
     */
    @Test
    public void maxSizeBytesTest() {
        // TODO: test maxSizeBytes
    }

    /**
     * Test the property 'minCapacity'
     */
    @Test
    public void minCapacityTest() {
        // TODO: test minCapacity
    }

    /**
     * Test the property 'pausedDate'
     */
    @Test
    public void pausedDateTest() {
        // TODO: test pausedDate
    }

    /**
     * Test the property 'readReplicaCount'
     */
    @Test
    public void readReplicaCountTest() {
        // TODO: test readReplicaCount
    }

    /**
     * Test the property 'readScale'
     */
    @Test
    public void readScaleTest() {
        // TODO: test readScale
    }

    /**
     * Test the property 'recoverableDatabaseId'
     */
    @Test
    public void recoverableDatabaseIdTest() {
        // TODO: test recoverableDatabaseId
    }

    /**
     * Test the property 'recoveryServicesRecoveryPointId'
     */
    @Test
    public void recoveryServicesRecoveryPointIdTest() {
        // TODO: test recoveryServicesRecoveryPointId
    }

    /**
     * Test the property 'requestedServiceObjectiveName'
     */
    @Test
    public void requestedServiceObjectiveNameTest() {
        // TODO: test requestedServiceObjectiveName
    }

    /**
     * Test the property 'restorableDroppedDatabaseId'
     */
    @Test
    public void restorableDroppedDatabaseIdTest() {
        // TODO: test restorableDroppedDatabaseId
    }

    /**
     * Test the property 'restorePointInTime'
     */
    @Test
    public void restorePointInTimeTest() {
        // TODO: test restorePointInTime
    }

    /**
     * Test the property 'resumedDate'
     */
    @Test
    public void resumedDateTest() {
        // TODO: test resumedDate
    }

    /**
     * Test the property 'sampleName'
     */
    @Test
    public void sampleNameTest() {
        // TODO: test sampleName
    }

    /**
     * Test the property 'sourceDatabaseDeletionDate'
     */
    @Test
    public void sourceDatabaseDeletionDateTest() {
        // TODO: test sourceDatabaseDeletionDate
    }

    /**
     * Test the property 'sourceDatabaseId'
     */
    @Test
    public void sourceDatabaseIdTest() {
        // TODO: test sourceDatabaseId
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'zoneRedundant'
     */
    @Test
    public void zoneRedundantTest() {
        // TODO: test zoneRedundant
    }

}
