/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.Sku;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The database&#39;s properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:14.445593-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseProperties {
  public static final String SERIALIZED_NAME_AUTO_PAUSE_DELAY = "autoPauseDelay";
  @SerializedName(SERIALIZED_NAME_AUTO_PAUSE_DELAY)
  private Integer autoPauseDelay;

  /**
   * Collation of the metadata catalog.
   */
  @JsonAdapter(CatalogCollationEnum.Adapter.class)
  public enum CatalogCollationEnum {
    DATABASE_DEFAULT("DATABASE_DEFAULT"),
    
    SQL_LATIN1_GENERAL_CP1_CI_AS("SQL_Latin1_General_CP1_CI_AS");

    private String value;

    CatalogCollationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CatalogCollationEnum fromValue(String value) {
      for (CatalogCollationEnum b : CatalogCollationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CatalogCollationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CatalogCollationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CatalogCollationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CatalogCollationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CatalogCollationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATALOG_COLLATION = "catalogCollation";
  @SerializedName(SERIALIZED_NAME_CATALOG_COLLATION)
  private CatalogCollationEnum catalogCollation;

  public static final String SERIALIZED_NAME_COLLATION = "collation";
  @SerializedName(SERIALIZED_NAME_COLLATION)
  private String collation;

  /**
   * Specifies the mode of database creation.    Default: regular database creation.    Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.    Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.    PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.    Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.    Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database&#39;s original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.    RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.    Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
   */
  @JsonAdapter(CreateModeEnum.Adapter.class)
  public enum CreateModeEnum {
    DEFAULT("Default"),
    
    COPY("Copy"),
    
    SECONDARY("Secondary"),
    
    POINT_IN_TIME_RESTORE("PointInTimeRestore"),
    
    RESTORE("Restore"),
    
    RECOVERY("Recovery"),
    
    RESTORE_EXTERNAL_BACKUP("RestoreExternalBackup"),
    
    RESTORE_EXTERNAL_BACKUP_SECONDARY("RestoreExternalBackupSecondary"),
    
    RESTORE_LONG_TERM_RETENTION_BACKUP("RestoreLongTermRetentionBackup"),
    
    ONLINE_SECONDARY("OnlineSecondary");

    private String value;

    CreateModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreateModeEnum fromValue(String value) {
      for (CreateModeEnum b : CreateModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreateModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreateModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreateModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreateModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreateModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATE_MODE = "createMode";
  @SerializedName(SERIALIZED_NAME_CREATE_MODE)
  private CreateModeEnum createMode;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_CURRENT_SERVICE_OBJECTIVE_NAME = "currentServiceObjectiveName";
  @SerializedName(SERIALIZED_NAME_CURRENT_SERVICE_OBJECTIVE_NAME)
  private String currentServiceObjectiveName;

  public static final String SERIALIZED_NAME_CURRENT_SKU = "currentSku";
  @SerializedName(SERIALIZED_NAME_CURRENT_SKU)
  private Sku currentSku;

  public static final String SERIALIZED_NAME_DATABASE_ID = "databaseId";
  @SerializedName(SERIALIZED_NAME_DATABASE_ID)
  private UUID databaseId;

  public static final String SERIALIZED_NAME_DEFAULT_SECONDARY_LOCATION = "defaultSecondaryLocation";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SECONDARY_LOCATION)
  private String defaultSecondaryLocation;

  public static final String SERIALIZED_NAME_EARLIEST_RESTORE_DATE = "earliestRestoreDate";
  @SerializedName(SERIALIZED_NAME_EARLIEST_RESTORE_DATE)
  private OffsetDateTime earliestRestoreDate;

  public static final String SERIALIZED_NAME_ELASTIC_POOL_ID = "elasticPoolId";
  @SerializedName(SERIALIZED_NAME_ELASTIC_POOL_ID)
  private String elasticPoolId;

  public static final String SERIALIZED_NAME_FAILOVER_GROUP_ID = "failoverGroupId";
  @SerializedName(SERIALIZED_NAME_FAILOVER_GROUP_ID)
  private String failoverGroupId;

  /**
   * The license type to apply for this database.
   */
  @JsonAdapter(LicenseTypeEnum.Adapter.class)
  public enum LicenseTypeEnum {
    LICENSE_INCLUDED("LicenseIncluded"),
    
    BASE_PRICE("BasePrice");

    private String value;

    LicenseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseTypeEnum fromValue(String value) {
      for (LicenseTypeEnum b : LicenseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LicenseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private LicenseTypeEnum licenseType;

  public static final String SERIALIZED_NAME_LONG_TERM_RETENTION_BACKUP_RESOURCE_ID = "longTermRetentionBackupResourceId";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_RETENTION_BACKUP_RESOURCE_ID)
  private String longTermRetentionBackupResourceId;

  public static final String SERIALIZED_NAME_MAX_LOG_SIZE_BYTES = "maxLogSizeBytes";
  @SerializedName(SERIALIZED_NAME_MAX_LOG_SIZE_BYTES)
  private Long maxLogSizeBytes;

  public static final String SERIALIZED_NAME_MAX_SIZE_BYTES = "maxSizeBytes";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE_BYTES)
  private Long maxSizeBytes;

  public static final String SERIALIZED_NAME_MIN_CAPACITY = "minCapacity";
  @SerializedName(SERIALIZED_NAME_MIN_CAPACITY)
  private Double minCapacity;

  public static final String SERIALIZED_NAME_PAUSED_DATE = "pausedDate";
  @SerializedName(SERIALIZED_NAME_PAUSED_DATE)
  private OffsetDateTime pausedDate;

  public static final String SERIALIZED_NAME_READ_REPLICA_COUNT = "readReplicaCount";
  @SerializedName(SERIALIZED_NAME_READ_REPLICA_COUNT)
  private Integer readReplicaCount;

  /**
   * If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.
   */
  @JsonAdapter(ReadScaleEnum.Adapter.class)
  public enum ReadScaleEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    ReadScaleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReadScaleEnum fromValue(String value) {
      for (ReadScaleEnum b : ReadScaleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReadScaleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReadScaleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReadScaleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReadScaleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReadScaleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_READ_SCALE = "readScale";
  @SerializedName(SERIALIZED_NAME_READ_SCALE)
  private ReadScaleEnum readScale;

  public static final String SERIALIZED_NAME_RECOVERABLE_DATABASE_ID = "recoverableDatabaseId";
  @SerializedName(SERIALIZED_NAME_RECOVERABLE_DATABASE_ID)
  private String recoverableDatabaseId;

  public static final String SERIALIZED_NAME_RECOVERY_SERVICES_RECOVERY_POINT_ID = "recoveryServicesRecoveryPointId";
  @SerializedName(SERIALIZED_NAME_RECOVERY_SERVICES_RECOVERY_POINT_ID)
  private String recoveryServicesRecoveryPointId;

  public static final String SERIALIZED_NAME_REQUESTED_SERVICE_OBJECTIVE_NAME = "requestedServiceObjectiveName";
  @SerializedName(SERIALIZED_NAME_REQUESTED_SERVICE_OBJECTIVE_NAME)
  private String requestedServiceObjectiveName;

  public static final String SERIALIZED_NAME_RESTORABLE_DROPPED_DATABASE_ID = "restorableDroppedDatabaseId";
  @SerializedName(SERIALIZED_NAME_RESTORABLE_DROPPED_DATABASE_ID)
  private String restorableDroppedDatabaseId;

  public static final String SERIALIZED_NAME_RESTORE_POINT_IN_TIME = "restorePointInTime";
  @SerializedName(SERIALIZED_NAME_RESTORE_POINT_IN_TIME)
  private OffsetDateTime restorePointInTime;

  public static final String SERIALIZED_NAME_RESUMED_DATE = "resumedDate";
  @SerializedName(SERIALIZED_NAME_RESUMED_DATE)
  private OffsetDateTime resumedDate;

  /**
   * The name of the sample schema to apply when creating this database.
   */
  @JsonAdapter(SampleNameEnum.Adapter.class)
  public enum SampleNameEnum {
    ADVENTURE_WORKS_LT("AdventureWorksLT"),
    
    WIDE_WORLD_IMPORTERS_STD("WideWorldImportersStd"),
    
    WIDE_WORLD_IMPORTERS_FULL("WideWorldImportersFull");

    private String value;

    SampleNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SampleNameEnum fromValue(String value) {
      for (SampleNameEnum b : SampleNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SampleNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SampleNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SampleNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SampleNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SampleNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SAMPLE_NAME = "sampleName";
  @SerializedName(SERIALIZED_NAME_SAMPLE_NAME)
  private SampleNameEnum sampleName;

  public static final String SERIALIZED_NAME_SOURCE_DATABASE_DELETION_DATE = "sourceDatabaseDeletionDate";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATABASE_DELETION_DATE)
  private OffsetDateTime sourceDatabaseDeletionDate;

  public static final String SERIALIZED_NAME_SOURCE_DATABASE_ID = "sourceDatabaseId";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATABASE_ID)
  private String sourceDatabaseId;

  /**
   * The status of the database.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ONLINE("Online"),
    
    RESTORING("Restoring"),
    
    RECOVERY_PENDING("RecoveryPending"),
    
    RECOVERING("Recovering"),
    
    SUSPECT("Suspect"),
    
    OFFLINE("Offline"),
    
    STANDBY("Standby"),
    
    SHUTDOWN("Shutdown"),
    
    EMERGENCY_MODE("EmergencyMode"),
    
    AUTO_CLOSED("AutoClosed"),
    
    COPYING("Copying"),
    
    CREATING("Creating"),
    
    INACCESSIBLE("Inaccessible"),
    
    OFFLINE_SECONDARY("OfflineSecondary"),
    
    PAUSING("Pausing"),
    
    PAUSED("Paused"),
    
    RESUMING("Resuming"),
    
    SCALING("Scaling"),
    
    OFFLINE_CHANGING_DW_PERFORMANCE_TIERS("OfflineChangingDwPerformanceTiers"),
    
    ONLINE_CHANGING_DW_PERFORMANCE_TIERS("OnlineChangingDwPerformanceTiers"),
    
    DISABLED("Disabled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ZONE_REDUNDANT = "zoneRedundant";
  @SerializedName(SERIALIZED_NAME_ZONE_REDUNDANT)
  private Boolean zoneRedundant;

  public DatabaseProperties() {
  }

  public DatabaseProperties(
     OffsetDateTime creationDate, 
     String currentServiceObjectiveName, 
     UUID databaseId, 
     String defaultSecondaryLocation, 
     OffsetDateTime earliestRestoreDate, 
     String failoverGroupId, 
     Long maxLogSizeBytes, 
     OffsetDateTime pausedDate, 
     String requestedServiceObjectiveName, 
     OffsetDateTime resumedDate, 
     StatusEnum status
  ) {
    this();
    this.creationDate = creationDate;
    this.currentServiceObjectiveName = currentServiceObjectiveName;
    this.databaseId = databaseId;
    this.defaultSecondaryLocation = defaultSecondaryLocation;
    this.earliestRestoreDate = earliestRestoreDate;
    this.failoverGroupId = failoverGroupId;
    this.maxLogSizeBytes = maxLogSizeBytes;
    this.pausedDate = pausedDate;
    this.requestedServiceObjectiveName = requestedServiceObjectiveName;
    this.resumedDate = resumedDate;
    this.status = status;
  }

  public DatabaseProperties autoPauseDelay(Integer autoPauseDelay) {
    this.autoPauseDelay = autoPauseDelay;
    return this;
  }

  /**
   * Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled
   * @return autoPauseDelay
   */
  @javax.annotation.Nullable
  public Integer getAutoPauseDelay() {
    return autoPauseDelay;
  }

  public void setAutoPauseDelay(Integer autoPauseDelay) {
    this.autoPauseDelay = autoPauseDelay;
  }


  public DatabaseProperties catalogCollation(CatalogCollationEnum catalogCollation) {
    this.catalogCollation = catalogCollation;
    return this;
  }

  /**
   * Collation of the metadata catalog.
   * @return catalogCollation
   */
  @javax.annotation.Nullable
  public CatalogCollationEnum getCatalogCollation() {
    return catalogCollation;
  }

  public void setCatalogCollation(CatalogCollationEnum catalogCollation) {
    this.catalogCollation = catalogCollation;
  }


  public DatabaseProperties collation(String collation) {
    this.collation = collation;
    return this;
  }

  /**
   * The collation of the database.
   * @return collation
   */
  @javax.annotation.Nullable
  public String getCollation() {
    return collation;
  }

  public void setCollation(String collation) {
    this.collation = collation;
  }


  public DatabaseProperties createMode(CreateModeEnum createMode) {
    this.createMode = createMode;
    return this;
  }

  /**
   * Specifies the mode of database creation.    Default: regular database creation.    Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.    Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.    PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.    Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.    Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database&#39;s original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.    RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.    Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.
   * @return createMode
   */
  @javax.annotation.Nullable
  public CreateModeEnum getCreateMode() {
    return createMode;
  }

  public void setCreateMode(CreateModeEnum createMode) {
    this.createMode = createMode;
  }


  /**
   * The creation date of the database (ISO8601 format).
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }



  /**
   * The current service level objective name of the database.
   * @return currentServiceObjectiveName
   */
  @javax.annotation.Nullable
  public String getCurrentServiceObjectiveName() {
    return currentServiceObjectiveName;
  }



  public DatabaseProperties currentSku(Sku currentSku) {
    this.currentSku = currentSku;
    return this;
  }

  /**
   * Get currentSku
   * @return currentSku
   */
  @javax.annotation.Nullable
  public Sku getCurrentSku() {
    return currentSku;
  }

  public void setCurrentSku(Sku currentSku) {
    this.currentSku = currentSku;
  }


  /**
   * The ID of the database.
   * @return databaseId
   */
  @javax.annotation.Nullable
  public UUID getDatabaseId() {
    return databaseId;
  }



  /**
   * The default secondary region for this database.
   * @return defaultSecondaryLocation
   */
  @javax.annotation.Nullable
  public String getDefaultSecondaryLocation() {
    return defaultSecondaryLocation;
  }



  /**
   * This records the earliest start date and time that restore is available for this database (ISO8601 format).
   * @return earliestRestoreDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEarliestRestoreDate() {
    return earliestRestoreDate;
  }



  public DatabaseProperties elasticPoolId(String elasticPoolId) {
    this.elasticPoolId = elasticPoolId;
    return this;
  }

  /**
   * The resource identifier of the elastic pool containing this database.
   * @return elasticPoolId
   */
  @javax.annotation.Nullable
  public String getElasticPoolId() {
    return elasticPoolId;
  }

  public void setElasticPoolId(String elasticPoolId) {
    this.elasticPoolId = elasticPoolId;
  }


  /**
   * Failover Group resource identifier that this database belongs to.
   * @return failoverGroupId
   */
  @javax.annotation.Nullable
  public String getFailoverGroupId() {
    return failoverGroupId;
  }



  public DatabaseProperties licenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * The license type to apply for this database.
   * @return licenseType
   */
  @javax.annotation.Nullable
  public LicenseTypeEnum getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
  }


  public DatabaseProperties longTermRetentionBackupResourceId(String longTermRetentionBackupResourceId) {
    this.longTermRetentionBackupResourceId = longTermRetentionBackupResourceId;
    return this;
  }

  /**
   * The resource identifier of the long term retention backup associated with create operation of this database.
   * @return longTermRetentionBackupResourceId
   */
  @javax.annotation.Nullable
  public String getLongTermRetentionBackupResourceId() {
    return longTermRetentionBackupResourceId;
  }

  public void setLongTermRetentionBackupResourceId(String longTermRetentionBackupResourceId) {
    this.longTermRetentionBackupResourceId = longTermRetentionBackupResourceId;
  }


  /**
   * The max log size for this database.
   * @return maxLogSizeBytes
   */
  @javax.annotation.Nullable
  public Long getMaxLogSizeBytes() {
    return maxLogSizeBytes;
  }



  public DatabaseProperties maxSizeBytes(Long maxSizeBytes) {
    this.maxSizeBytes = maxSizeBytes;
    return this;
  }

  /**
   * The max size of the database expressed in bytes.
   * @return maxSizeBytes
   */
  @javax.annotation.Nullable
  public Long getMaxSizeBytes() {
    return maxSizeBytes;
  }

  public void setMaxSizeBytes(Long maxSizeBytes) {
    this.maxSizeBytes = maxSizeBytes;
  }


  public DatabaseProperties minCapacity(Double minCapacity) {
    this.minCapacity = minCapacity;
    return this;
  }

  /**
   * Minimal capacity that database will always have allocated, if not paused
   * @return minCapacity
   */
  @javax.annotation.Nullable
  public Double getMinCapacity() {
    return minCapacity;
  }

  public void setMinCapacity(Double minCapacity) {
    this.minCapacity = minCapacity;
  }


  /**
   * The date when database was paused by user configuration or action (ISO8601 format). Null if the database is ready.
   * @return pausedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPausedDate() {
    return pausedDate;
  }



  public DatabaseProperties readReplicaCount(Integer readReplicaCount) {
    this.readReplicaCount = readReplicaCount;
    return this;
  }

  /**
   * The number of readonly secondary replicas associated with the database to which readonly application intent connections may be routed. This property is only settable for Hyperscale edition databases.
   * @return readReplicaCount
   */
  @javax.annotation.Nullable
  public Integer getReadReplicaCount() {
    return readReplicaCount;
  }

  public void setReadReplicaCount(Integer readReplicaCount) {
    this.readReplicaCount = readReplicaCount;
  }


  public DatabaseProperties readScale(ReadScaleEnum readScale) {
    this.readScale = readScale;
    return this;
  }

  /**
   * If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica. This property is only settable for Premium and Business Critical databases.
   * @return readScale
   */
  @javax.annotation.Nullable
  public ReadScaleEnum getReadScale() {
    return readScale;
  }

  public void setReadScale(ReadScaleEnum readScale) {
    this.readScale = readScale;
  }


  public DatabaseProperties recoverableDatabaseId(String recoverableDatabaseId) {
    this.recoverableDatabaseId = recoverableDatabaseId;
    return this;
  }

  /**
   * The resource identifier of the recoverable database associated with create operation of this database.
   * @return recoverableDatabaseId
   */
  @javax.annotation.Nullable
  public String getRecoverableDatabaseId() {
    return recoverableDatabaseId;
  }

  public void setRecoverableDatabaseId(String recoverableDatabaseId) {
    this.recoverableDatabaseId = recoverableDatabaseId;
  }


  public DatabaseProperties recoveryServicesRecoveryPointId(String recoveryServicesRecoveryPointId) {
    this.recoveryServicesRecoveryPointId = recoveryServicesRecoveryPointId;
    return this;
  }

  /**
   * The resource identifier of the recovery point associated with create operation of this database.
   * @return recoveryServicesRecoveryPointId
   */
  @javax.annotation.Nullable
  public String getRecoveryServicesRecoveryPointId() {
    return recoveryServicesRecoveryPointId;
  }

  public void setRecoveryServicesRecoveryPointId(String recoveryServicesRecoveryPointId) {
    this.recoveryServicesRecoveryPointId = recoveryServicesRecoveryPointId;
  }


  /**
   * The requested service level objective name of the database.
   * @return requestedServiceObjectiveName
   */
  @javax.annotation.Nullable
  public String getRequestedServiceObjectiveName() {
    return requestedServiceObjectiveName;
  }



  public DatabaseProperties restorableDroppedDatabaseId(String restorableDroppedDatabaseId) {
    this.restorableDroppedDatabaseId = restorableDroppedDatabaseId;
    return this;
  }

  /**
   * The resource identifier of the restorable dropped database associated with create operation of this database.
   * @return restorableDroppedDatabaseId
   */
  @javax.annotation.Nullable
  public String getRestorableDroppedDatabaseId() {
    return restorableDroppedDatabaseId;
  }

  public void setRestorableDroppedDatabaseId(String restorableDroppedDatabaseId) {
    this.restorableDroppedDatabaseId = restorableDroppedDatabaseId;
  }


  public DatabaseProperties restorePointInTime(OffsetDateTime restorePointInTime) {
    this.restorePointInTime = restorePointInTime;
    return this;
  }

  /**
   * Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
   * @return restorePointInTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRestorePointInTime() {
    return restorePointInTime;
  }

  public void setRestorePointInTime(OffsetDateTime restorePointInTime) {
    this.restorePointInTime = restorePointInTime;
  }


  /**
   * The date when database was resumed by user action or database login (ISO8601 format). Null if the database is paused.
   * @return resumedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResumedDate() {
    return resumedDate;
  }



  public DatabaseProperties sampleName(SampleNameEnum sampleName) {
    this.sampleName = sampleName;
    return this;
  }

  /**
   * The name of the sample schema to apply when creating this database.
   * @return sampleName
   */
  @javax.annotation.Nullable
  public SampleNameEnum getSampleName() {
    return sampleName;
  }

  public void setSampleName(SampleNameEnum sampleName) {
    this.sampleName = sampleName;
  }


  public DatabaseProperties sourceDatabaseDeletionDate(OffsetDateTime sourceDatabaseDeletionDate) {
    this.sourceDatabaseDeletionDate = sourceDatabaseDeletionDate;
    return this;
  }

  /**
   * Specifies the time that the database was deleted.
   * @return sourceDatabaseDeletionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSourceDatabaseDeletionDate() {
    return sourceDatabaseDeletionDate;
  }

  public void setSourceDatabaseDeletionDate(OffsetDateTime sourceDatabaseDeletionDate) {
    this.sourceDatabaseDeletionDate = sourceDatabaseDeletionDate;
  }


  public DatabaseProperties sourceDatabaseId(String sourceDatabaseId) {
    this.sourceDatabaseId = sourceDatabaseId;
    return this;
  }

  /**
   * The resource identifier of the source database associated with create operation of this database.
   * @return sourceDatabaseId
   */
  @javax.annotation.Nullable
  public String getSourceDatabaseId() {
    return sourceDatabaseId;
  }

  public void setSourceDatabaseId(String sourceDatabaseId) {
    this.sourceDatabaseId = sourceDatabaseId;
  }


  /**
   * The status of the database.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  public DatabaseProperties zoneRedundant(Boolean zoneRedundant) {
    this.zoneRedundant = zoneRedundant;
    return this;
  }

  /**
   * Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
   * @return zoneRedundant
   */
  @javax.annotation.Nullable
  public Boolean getZoneRedundant() {
    return zoneRedundant;
  }

  public void setZoneRedundant(Boolean zoneRedundant) {
    this.zoneRedundant = zoneRedundant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseProperties databaseProperties = (DatabaseProperties) o;
    return Objects.equals(this.autoPauseDelay, databaseProperties.autoPauseDelay) &&
        Objects.equals(this.catalogCollation, databaseProperties.catalogCollation) &&
        Objects.equals(this.collation, databaseProperties.collation) &&
        Objects.equals(this.createMode, databaseProperties.createMode) &&
        Objects.equals(this.creationDate, databaseProperties.creationDate) &&
        Objects.equals(this.currentServiceObjectiveName, databaseProperties.currentServiceObjectiveName) &&
        Objects.equals(this.currentSku, databaseProperties.currentSku) &&
        Objects.equals(this.databaseId, databaseProperties.databaseId) &&
        Objects.equals(this.defaultSecondaryLocation, databaseProperties.defaultSecondaryLocation) &&
        Objects.equals(this.earliestRestoreDate, databaseProperties.earliestRestoreDate) &&
        Objects.equals(this.elasticPoolId, databaseProperties.elasticPoolId) &&
        Objects.equals(this.failoverGroupId, databaseProperties.failoverGroupId) &&
        Objects.equals(this.licenseType, databaseProperties.licenseType) &&
        Objects.equals(this.longTermRetentionBackupResourceId, databaseProperties.longTermRetentionBackupResourceId) &&
        Objects.equals(this.maxLogSizeBytes, databaseProperties.maxLogSizeBytes) &&
        Objects.equals(this.maxSizeBytes, databaseProperties.maxSizeBytes) &&
        Objects.equals(this.minCapacity, databaseProperties.minCapacity) &&
        Objects.equals(this.pausedDate, databaseProperties.pausedDate) &&
        Objects.equals(this.readReplicaCount, databaseProperties.readReplicaCount) &&
        Objects.equals(this.readScale, databaseProperties.readScale) &&
        Objects.equals(this.recoverableDatabaseId, databaseProperties.recoverableDatabaseId) &&
        Objects.equals(this.recoveryServicesRecoveryPointId, databaseProperties.recoveryServicesRecoveryPointId) &&
        Objects.equals(this.requestedServiceObjectiveName, databaseProperties.requestedServiceObjectiveName) &&
        Objects.equals(this.restorableDroppedDatabaseId, databaseProperties.restorableDroppedDatabaseId) &&
        Objects.equals(this.restorePointInTime, databaseProperties.restorePointInTime) &&
        Objects.equals(this.resumedDate, databaseProperties.resumedDate) &&
        Objects.equals(this.sampleName, databaseProperties.sampleName) &&
        Objects.equals(this.sourceDatabaseDeletionDate, databaseProperties.sourceDatabaseDeletionDate) &&
        Objects.equals(this.sourceDatabaseId, databaseProperties.sourceDatabaseId) &&
        Objects.equals(this.status, databaseProperties.status) &&
        Objects.equals(this.zoneRedundant, databaseProperties.zoneRedundant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoPauseDelay, catalogCollation, collation, createMode, creationDate, currentServiceObjectiveName, currentSku, databaseId, defaultSecondaryLocation, earliestRestoreDate, elasticPoolId, failoverGroupId, licenseType, longTermRetentionBackupResourceId, maxLogSizeBytes, maxSizeBytes, minCapacity, pausedDate, readReplicaCount, readScale, recoverableDatabaseId, recoveryServicesRecoveryPointId, requestedServiceObjectiveName, restorableDroppedDatabaseId, restorePointInTime, resumedDate, sampleName, sourceDatabaseDeletionDate, sourceDatabaseId, status, zoneRedundant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseProperties {\n");
    sb.append("    autoPauseDelay: ").append(toIndentedString(autoPauseDelay)).append("\n");
    sb.append("    catalogCollation: ").append(toIndentedString(catalogCollation)).append("\n");
    sb.append("    collation: ").append(toIndentedString(collation)).append("\n");
    sb.append("    createMode: ").append(toIndentedString(createMode)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    currentServiceObjectiveName: ").append(toIndentedString(currentServiceObjectiveName)).append("\n");
    sb.append("    currentSku: ").append(toIndentedString(currentSku)).append("\n");
    sb.append("    databaseId: ").append(toIndentedString(databaseId)).append("\n");
    sb.append("    defaultSecondaryLocation: ").append(toIndentedString(defaultSecondaryLocation)).append("\n");
    sb.append("    earliestRestoreDate: ").append(toIndentedString(earliestRestoreDate)).append("\n");
    sb.append("    elasticPoolId: ").append(toIndentedString(elasticPoolId)).append("\n");
    sb.append("    failoverGroupId: ").append(toIndentedString(failoverGroupId)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    longTermRetentionBackupResourceId: ").append(toIndentedString(longTermRetentionBackupResourceId)).append("\n");
    sb.append("    maxLogSizeBytes: ").append(toIndentedString(maxLogSizeBytes)).append("\n");
    sb.append("    maxSizeBytes: ").append(toIndentedString(maxSizeBytes)).append("\n");
    sb.append("    minCapacity: ").append(toIndentedString(minCapacity)).append("\n");
    sb.append("    pausedDate: ").append(toIndentedString(pausedDate)).append("\n");
    sb.append("    readReplicaCount: ").append(toIndentedString(readReplicaCount)).append("\n");
    sb.append("    readScale: ").append(toIndentedString(readScale)).append("\n");
    sb.append("    recoverableDatabaseId: ").append(toIndentedString(recoverableDatabaseId)).append("\n");
    sb.append("    recoveryServicesRecoveryPointId: ").append(toIndentedString(recoveryServicesRecoveryPointId)).append("\n");
    sb.append("    requestedServiceObjectiveName: ").append(toIndentedString(requestedServiceObjectiveName)).append("\n");
    sb.append("    restorableDroppedDatabaseId: ").append(toIndentedString(restorableDroppedDatabaseId)).append("\n");
    sb.append("    restorePointInTime: ").append(toIndentedString(restorePointInTime)).append("\n");
    sb.append("    resumedDate: ").append(toIndentedString(resumedDate)).append("\n");
    sb.append("    sampleName: ").append(toIndentedString(sampleName)).append("\n");
    sb.append("    sourceDatabaseDeletionDate: ").append(toIndentedString(sourceDatabaseDeletionDate)).append("\n");
    sb.append("    sourceDatabaseId: ").append(toIndentedString(sourceDatabaseId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    zoneRedundant: ").append(toIndentedString(zoneRedundant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoPauseDelay");
    openapiFields.add("catalogCollation");
    openapiFields.add("collation");
    openapiFields.add("createMode");
    openapiFields.add("creationDate");
    openapiFields.add("currentServiceObjectiveName");
    openapiFields.add("currentSku");
    openapiFields.add("databaseId");
    openapiFields.add("defaultSecondaryLocation");
    openapiFields.add("earliestRestoreDate");
    openapiFields.add("elasticPoolId");
    openapiFields.add("failoverGroupId");
    openapiFields.add("licenseType");
    openapiFields.add("longTermRetentionBackupResourceId");
    openapiFields.add("maxLogSizeBytes");
    openapiFields.add("maxSizeBytes");
    openapiFields.add("minCapacity");
    openapiFields.add("pausedDate");
    openapiFields.add("readReplicaCount");
    openapiFields.add("readScale");
    openapiFields.add("recoverableDatabaseId");
    openapiFields.add("recoveryServicesRecoveryPointId");
    openapiFields.add("requestedServiceObjectiveName");
    openapiFields.add("restorableDroppedDatabaseId");
    openapiFields.add("restorePointInTime");
    openapiFields.add("resumedDate");
    openapiFields.add("sampleName");
    openapiFields.add("sourceDatabaseDeletionDate");
    openapiFields.add("sourceDatabaseId");
    openapiFields.add("status");
    openapiFields.add("zoneRedundant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseProperties is not found in the empty JSON string", DatabaseProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("catalogCollation") != null && !jsonObj.get("catalogCollation").isJsonNull()) && !jsonObj.get("catalogCollation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catalogCollation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catalogCollation").toString()));
      }
      // validate the optional field `catalogCollation`
      if (jsonObj.get("catalogCollation") != null && !jsonObj.get("catalogCollation").isJsonNull()) {
        CatalogCollationEnum.validateJsonElement(jsonObj.get("catalogCollation"));
      }
      if ((jsonObj.get("collation") != null && !jsonObj.get("collation").isJsonNull()) && !jsonObj.get("collation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collation").toString()));
      }
      if ((jsonObj.get("createMode") != null && !jsonObj.get("createMode").isJsonNull()) && !jsonObj.get("createMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createMode").toString()));
      }
      // validate the optional field `createMode`
      if (jsonObj.get("createMode") != null && !jsonObj.get("createMode").isJsonNull()) {
        CreateModeEnum.validateJsonElement(jsonObj.get("createMode"));
      }
      if ((jsonObj.get("currentServiceObjectiveName") != null && !jsonObj.get("currentServiceObjectiveName").isJsonNull()) && !jsonObj.get("currentServiceObjectiveName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentServiceObjectiveName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentServiceObjectiveName").toString()));
      }
      // validate the optional field `currentSku`
      if (jsonObj.get("currentSku") != null && !jsonObj.get("currentSku").isJsonNull()) {
        Sku.validateJsonElement(jsonObj.get("currentSku"));
      }
      if ((jsonObj.get("databaseId") != null && !jsonObj.get("databaseId").isJsonNull()) && !jsonObj.get("databaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseId").toString()));
      }
      if ((jsonObj.get("defaultSecondaryLocation") != null && !jsonObj.get("defaultSecondaryLocation").isJsonNull()) && !jsonObj.get("defaultSecondaryLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultSecondaryLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultSecondaryLocation").toString()));
      }
      if ((jsonObj.get("elasticPoolId") != null && !jsonObj.get("elasticPoolId").isJsonNull()) && !jsonObj.get("elasticPoolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elasticPoolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elasticPoolId").toString()));
      }
      if ((jsonObj.get("failoverGroupId") != null && !jsonObj.get("failoverGroupId").isJsonNull()) && !jsonObj.get("failoverGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failoverGroupId").toString()));
      }
      if ((jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) && !jsonObj.get("licenseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `licenseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("licenseType").toString()));
      }
      // validate the optional field `licenseType`
      if (jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) {
        LicenseTypeEnum.validateJsonElement(jsonObj.get("licenseType"));
      }
      if ((jsonObj.get("longTermRetentionBackupResourceId") != null && !jsonObj.get("longTermRetentionBackupResourceId").isJsonNull()) && !jsonObj.get("longTermRetentionBackupResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `longTermRetentionBackupResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("longTermRetentionBackupResourceId").toString()));
      }
      if ((jsonObj.get("readScale") != null && !jsonObj.get("readScale").isJsonNull()) && !jsonObj.get("readScale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readScale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readScale").toString()));
      }
      // validate the optional field `readScale`
      if (jsonObj.get("readScale") != null && !jsonObj.get("readScale").isJsonNull()) {
        ReadScaleEnum.validateJsonElement(jsonObj.get("readScale"));
      }
      if ((jsonObj.get("recoverableDatabaseId") != null && !jsonObj.get("recoverableDatabaseId").isJsonNull()) && !jsonObj.get("recoverableDatabaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoverableDatabaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoverableDatabaseId").toString()));
      }
      if ((jsonObj.get("recoveryServicesRecoveryPointId") != null && !jsonObj.get("recoveryServicesRecoveryPointId").isJsonNull()) && !jsonObj.get("recoveryServicesRecoveryPointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryServicesRecoveryPointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryServicesRecoveryPointId").toString()));
      }
      if ((jsonObj.get("requestedServiceObjectiveName") != null && !jsonObj.get("requestedServiceObjectiveName").isJsonNull()) && !jsonObj.get("requestedServiceObjectiveName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedServiceObjectiveName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedServiceObjectiveName").toString()));
      }
      if ((jsonObj.get("restorableDroppedDatabaseId") != null && !jsonObj.get("restorableDroppedDatabaseId").isJsonNull()) && !jsonObj.get("restorableDroppedDatabaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restorableDroppedDatabaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restorableDroppedDatabaseId").toString()));
      }
      if ((jsonObj.get("sampleName") != null && !jsonObj.get("sampleName").isJsonNull()) && !jsonObj.get("sampleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sampleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sampleName").toString()));
      }
      // validate the optional field `sampleName`
      if (jsonObj.get("sampleName") != null && !jsonObj.get("sampleName").isJsonNull()) {
        SampleNameEnum.validateJsonElement(jsonObj.get("sampleName"));
      }
      if ((jsonObj.get("sourceDatabaseId") != null && !jsonObj.get("sourceDatabaseId").isJsonNull()) && !jsonObj.get("sourceDatabaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDatabaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceDatabaseId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseProperties>() {
           @Override
           public void write(JsonWriter out, DatabaseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseProperties
   * @throws IOException if the JSON string is invalid with respect to DatabaseProperties
   */
  public static DatabaseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseProperties.class);
  }

  /**
   * Convert an instance of DatabaseProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

