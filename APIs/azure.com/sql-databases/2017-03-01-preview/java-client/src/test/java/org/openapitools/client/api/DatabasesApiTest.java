/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Database;
import org.openapitools.client.model.DatabaseListResult;
import org.openapitools.client.model.DatabaseUpdate;
import org.openapitools.client.model.ImportExportDatabaseDefinition;
import org.openapitools.client.model.ImportExportOperationResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatabasesApi
 */
@Disabled
public class DatabasesApiTest {

    private final DatabasesApi api = new DatabasesApi();

    /**
     * Creates a new database or updates an existing database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Database parameters = null;
        Database response = api.databasesCreateOrUpdate(resourceGroupName, serverName, databaseName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.databasesDelete(resourceGroupName, serverName, databaseName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Exports a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesExportTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ImportExportDatabaseDefinition parameters = null;
        ImportExportOperationResult response = api.databasesExport(resourceGroupName, serverName, databaseName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Gets a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesGetTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Database response = api.databasesGet(resourceGroupName, serverName, databaseName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a list of databases in an elastic pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesListByElasticPoolTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String elasticPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DatabaseListResult response = api.databasesListByElasticPool(resourceGroupName, serverName, elasticPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a list of databases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesListByServerTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DatabaseListResult response = api.databasesListByServer(resourceGroupName, serverName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Pauses a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesPauseTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Database response = api.databasesPause(resourceGroupName, serverName, databaseName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Resumes a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesResumeTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Database response = api.databasesResume(resourceGroupName, serverName, databaseName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates an existing database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        String subscriptionId = null;
        String apiVersion = null;
        DatabaseUpdate parameters = null;
        Database response = api.databasesUpdate(resourceGroupName, serverName, databaseName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

}
