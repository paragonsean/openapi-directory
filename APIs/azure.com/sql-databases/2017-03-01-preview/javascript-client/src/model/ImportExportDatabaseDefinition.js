/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportExportDatabaseDefinition model module.
 * @module model/ImportExportDatabaseDefinition
 * @version 2017-03-01-preview
 */
class ImportExportDatabaseDefinition {
    /**
     * Constructs a new <code>ImportExportDatabaseDefinition</code>.
     * Contains the information necessary to perform import/export operation.
     * @alias module:model/ImportExportDatabaseDefinition
     * @param administratorLogin {String} Administrator login name.
     * @param administratorLoginPassword {String} Administrator login password.
     * @param storageKey {String} Storage key.
     * @param storageKeyType {String} Storage key type.
     * @param storageUri {String} Storage Uri.
     */
    constructor(administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri) { 
        
        ImportExportDatabaseDefinition.initialize(this, administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, administratorLogin, administratorLoginPassword, storageKey, storageKeyType, storageUri) { 
        obj['administratorLogin'] = administratorLogin;
        obj['administratorLoginPassword'] = administratorLoginPassword;
        obj['storageKey'] = storageKey;
        obj['storageKeyType'] = storageKeyType;
        obj['storageUri'] = storageUri;
    }

    /**
     * Constructs a <code>ImportExportDatabaseDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportExportDatabaseDefinition} obj Optional instance to populate.
     * @return {module:model/ImportExportDatabaseDefinition} The populated <code>ImportExportDatabaseDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportExportDatabaseDefinition();

            if (data.hasOwnProperty('administratorLogin')) {
                obj['administratorLogin'] = ApiClient.convertToType(data['administratorLogin'], 'String');
            }
            if (data.hasOwnProperty('administratorLoginPassword')) {
                obj['administratorLoginPassword'] = ApiClient.convertToType(data['administratorLoginPassword'], 'String');
            }
            if (data.hasOwnProperty('authenticationType')) {
                obj['authenticationType'] = ApiClient.convertToType(data['authenticationType'], 'String');
            }
            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('edition')) {
                obj['edition'] = ApiClient.convertToType(data['edition'], 'String');
            }
            if (data.hasOwnProperty('maxSizeBytes')) {
                obj['maxSizeBytes'] = ApiClient.convertToType(data['maxSizeBytes'], 'String');
            }
            if (data.hasOwnProperty('serviceObjectiveName')) {
                obj['serviceObjectiveName'] = ApiClient.convertToType(data['serviceObjectiveName'], 'String');
            }
            if (data.hasOwnProperty('storageKey')) {
                obj['storageKey'] = ApiClient.convertToType(data['storageKey'], 'String');
            }
            if (data.hasOwnProperty('storageKeyType')) {
                obj['storageKeyType'] = ApiClient.convertToType(data['storageKeyType'], 'String');
            }
            if (data.hasOwnProperty('storageUri')) {
                obj['storageUri'] = ApiClient.convertToType(data['storageUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportExportDatabaseDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportExportDatabaseDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportExportDatabaseDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['administratorLogin'] && !(typeof data['administratorLogin'] === 'string' || data['administratorLogin'] instanceof String)) {
            throw new Error("Expected the field `administratorLogin` to be a primitive type in the JSON string but got " + data['administratorLogin']);
        }
        // ensure the json data is a string
        if (data['administratorLoginPassword'] && !(typeof data['administratorLoginPassword'] === 'string' || data['administratorLoginPassword'] instanceof String)) {
            throw new Error("Expected the field `administratorLoginPassword` to be a primitive type in the JSON string but got " + data['administratorLoginPassword']);
        }
        // ensure the json data is a string
        if (data['authenticationType'] && !(typeof data['authenticationType'] === 'string' || data['authenticationType'] instanceof String)) {
            throw new Error("Expected the field `authenticationType` to be a primitive type in the JSON string but got " + data['authenticationType']);
        }
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // ensure the json data is a string
        if (data['edition'] && !(typeof data['edition'] === 'string' || data['edition'] instanceof String)) {
            throw new Error("Expected the field `edition` to be a primitive type in the JSON string but got " + data['edition']);
        }
        // ensure the json data is a string
        if (data['maxSizeBytes'] && !(typeof data['maxSizeBytes'] === 'string' || data['maxSizeBytes'] instanceof String)) {
            throw new Error("Expected the field `maxSizeBytes` to be a primitive type in the JSON string but got " + data['maxSizeBytes']);
        }
        // ensure the json data is a string
        if (data['serviceObjectiveName'] && !(typeof data['serviceObjectiveName'] === 'string' || data['serviceObjectiveName'] instanceof String)) {
            throw new Error("Expected the field `serviceObjectiveName` to be a primitive type in the JSON string but got " + data['serviceObjectiveName']);
        }
        // ensure the json data is a string
        if (data['storageKey'] && !(typeof data['storageKey'] === 'string' || data['storageKey'] instanceof String)) {
            throw new Error("Expected the field `storageKey` to be a primitive type in the JSON string but got " + data['storageKey']);
        }
        // ensure the json data is a string
        if (data['storageKeyType'] && !(typeof data['storageKeyType'] === 'string' || data['storageKeyType'] instanceof String)) {
            throw new Error("Expected the field `storageKeyType` to be a primitive type in the JSON string but got " + data['storageKeyType']);
        }
        // ensure the json data is a string
        if (data['storageUri'] && !(typeof data['storageUri'] === 'string' || data['storageUri'] instanceof String)) {
            throw new Error("Expected the field `storageUri` to be a primitive type in the JSON string but got " + data['storageUri']);
        }

        return true;
    }


}

ImportExportDatabaseDefinition.RequiredProperties = ["administratorLogin", "administratorLoginPassword", "storageKey", "storageKeyType", "storageUri"];

/**
 * Administrator login name.
 * @member {String} administratorLogin
 */
ImportExportDatabaseDefinition.prototype['administratorLogin'] = undefined;

/**
 * Administrator login password.
 * @member {String} administratorLoginPassword
 */
ImportExportDatabaseDefinition.prototype['administratorLoginPassword'] = undefined;

/**
 * Authentication type.
 * @member {String} authenticationType
 */
ImportExportDatabaseDefinition.prototype['authenticationType'] = undefined;

/**
 * Name of the import database.
 * @member {String} databaseName
 */
ImportExportDatabaseDefinition.prototype['databaseName'] = undefined;

/**
 * Edition of the import database.
 * @member {String} edition
 */
ImportExportDatabaseDefinition.prototype['edition'] = undefined;

/**
 * Max size in bytes for the import database.
 * @member {String} maxSizeBytes
 */
ImportExportDatabaseDefinition.prototype['maxSizeBytes'] = undefined;

/**
 * Service level objective name of the import database.
 * @member {String} serviceObjectiveName
 */
ImportExportDatabaseDefinition.prototype['serviceObjectiveName'] = undefined;

/**
 * Storage key.
 * @member {String} storageKey
 */
ImportExportDatabaseDefinition.prototype['storageKey'] = undefined;

/**
 * Storage key type.
 * @member {String} storageKeyType
 */
ImportExportDatabaseDefinition.prototype['storageKeyType'] = undefined;

/**
 * Storage Uri.
 * @member {String} storageUri
 */
ImportExportDatabaseDefinition.prototype['storageUri'] = undefined;






export default ImportExportDatabaseDefinition;

