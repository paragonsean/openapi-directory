/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.ImportExportDatabaseDefinition();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImportExportDatabaseDefinition', function() {
    it('should create an instance of ImportExportDatabaseDefinition', function() {
      // uncomment below and update the code to test ImportExportDatabaseDefinition
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be.a(SqlManagementClient.ImportExportDatabaseDefinition);
    });

    it('should have the property administratorLogin (base name: "administratorLogin")', function() {
      // uncomment below and update the code to test the property administratorLogin
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be();
    });

    it('should have the property administratorLoginPassword (base name: "administratorLoginPassword")', function() {
      // uncomment below and update the code to test the property administratorLoginPassword
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be();
    });

    it('should have the property authenticationType (base name: "authenticationType")', function() {
      // uncomment below and update the code to test the property authenticationType
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be();
    });

    it('should have the property databaseName (base name: "databaseName")', function() {
      // uncomment below and update the code to test the property databaseName
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be();
    });

    it('should have the property edition (base name: "edition")', function() {
      // uncomment below and update the code to test the property edition
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be();
    });

    it('should have the property maxSizeBytes (base name: "maxSizeBytes")', function() {
      // uncomment below and update the code to test the property maxSizeBytes
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be();
    });

    it('should have the property serviceObjectiveName (base name: "serviceObjectiveName")', function() {
      // uncomment below and update the code to test the property serviceObjectiveName
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be();
    });

    it('should have the property storageKey (base name: "storageKey")', function() {
      // uncomment below and update the code to test the property storageKey
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be();
    });

    it('should have the property storageKeyType (base name: "storageKeyType")', function() {
      // uncomment below and update the code to test the property storageKeyType
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be();
    });

    it('should have the property storageUri (base name: "storageUri")', function() {
      // uncomment below and update the code to test the property storageUri
      //var instance = new SqlManagementClient.ImportExportDatabaseDefinition();
      //expect(instance).to.be();
    });

  });

}));
