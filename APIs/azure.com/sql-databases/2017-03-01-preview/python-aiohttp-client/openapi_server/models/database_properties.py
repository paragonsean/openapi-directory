# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_collation: str=None, collation: str=None, create_mode: str=None, creation_date: datetime=None, current_service_objective_name: str=None, database_id: str=None, default_secondary_location: str=None, elastic_pool_id: str=None, failover_group_id: str=None, long_term_retention_backup_resource_id: str=None, max_size_bytes: int=None, recoverable_database_id: str=None, recovery_services_recovery_point_id: str=None, restorable_dropped_database_id: str=None, restore_point_in_time: datetime=None, sample_name: str=None, source_database_deletion_date: datetime=None, source_database_id: str=None, status: str=None, zone_redundant: bool=None):
        """DatabaseProperties - a model defined in OpenAPI

        :param catalog_collation: The catalog_collation of this DatabaseProperties.
        :param collation: The collation of this DatabaseProperties.
        :param create_mode: The create_mode of this DatabaseProperties.
        :param creation_date: The creation_date of this DatabaseProperties.
        :param current_service_objective_name: The current_service_objective_name of this DatabaseProperties.
        :param database_id: The database_id of this DatabaseProperties.
        :param default_secondary_location: The default_secondary_location of this DatabaseProperties.
        :param elastic_pool_id: The elastic_pool_id of this DatabaseProperties.
        :param failover_group_id: The failover_group_id of this DatabaseProperties.
        :param long_term_retention_backup_resource_id: The long_term_retention_backup_resource_id of this DatabaseProperties.
        :param max_size_bytes: The max_size_bytes of this DatabaseProperties.
        :param recoverable_database_id: The recoverable_database_id of this DatabaseProperties.
        :param recovery_services_recovery_point_id: The recovery_services_recovery_point_id of this DatabaseProperties.
        :param restorable_dropped_database_id: The restorable_dropped_database_id of this DatabaseProperties.
        :param restore_point_in_time: The restore_point_in_time of this DatabaseProperties.
        :param sample_name: The sample_name of this DatabaseProperties.
        :param source_database_deletion_date: The source_database_deletion_date of this DatabaseProperties.
        :param source_database_id: The source_database_id of this DatabaseProperties.
        :param status: The status of this DatabaseProperties.
        :param zone_redundant: The zone_redundant of this DatabaseProperties.
        """
        self.openapi_types = {
            'catalog_collation': str,
            'collation': str,
            'create_mode': str,
            'creation_date': datetime,
            'current_service_objective_name': str,
            'database_id': str,
            'default_secondary_location': str,
            'elastic_pool_id': str,
            'failover_group_id': str,
            'long_term_retention_backup_resource_id': str,
            'max_size_bytes': int,
            'recoverable_database_id': str,
            'recovery_services_recovery_point_id': str,
            'restorable_dropped_database_id': str,
            'restore_point_in_time': datetime,
            'sample_name': str,
            'source_database_deletion_date': datetime,
            'source_database_id': str,
            'status': str,
            'zone_redundant': bool
        }

        self.attribute_map = {
            'catalog_collation': 'catalogCollation',
            'collation': 'collation',
            'create_mode': 'createMode',
            'creation_date': 'creationDate',
            'current_service_objective_name': 'currentServiceObjectiveName',
            'database_id': 'databaseId',
            'default_secondary_location': 'defaultSecondaryLocation',
            'elastic_pool_id': 'elasticPoolId',
            'failover_group_id': 'failoverGroupId',
            'long_term_retention_backup_resource_id': 'longTermRetentionBackupResourceId',
            'max_size_bytes': 'maxSizeBytes',
            'recoverable_database_id': 'recoverableDatabaseId',
            'recovery_services_recovery_point_id': 'recoveryServicesRecoveryPointId',
            'restorable_dropped_database_id': 'restorableDroppedDatabaseId',
            'restore_point_in_time': 'restorePointInTime',
            'sample_name': 'sampleName',
            'source_database_deletion_date': 'sourceDatabaseDeletionDate',
            'source_database_id': 'sourceDatabaseId',
            'status': 'status',
            'zone_redundant': 'zoneRedundant'
        }

        self._catalog_collation = catalog_collation
        self._collation = collation
        self._create_mode = create_mode
        self._creation_date = creation_date
        self._current_service_objective_name = current_service_objective_name
        self._database_id = database_id
        self._default_secondary_location = default_secondary_location
        self._elastic_pool_id = elastic_pool_id
        self._failover_group_id = failover_group_id
        self._long_term_retention_backup_resource_id = long_term_retention_backup_resource_id
        self._max_size_bytes = max_size_bytes
        self._recoverable_database_id = recoverable_database_id
        self._recovery_services_recovery_point_id = recovery_services_recovery_point_id
        self._restorable_dropped_database_id = restorable_dropped_database_id
        self._restore_point_in_time = restore_point_in_time
        self._sample_name = sample_name
        self._source_database_deletion_date = source_database_deletion_date
        self._source_database_id = source_database_id
        self._status = status
        self._zone_redundant = zone_redundant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseProperties of this DatabaseProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_collation(self):
        """Gets the catalog_collation of this DatabaseProperties.

        Collation of the metadata catalog.

        :return: The catalog_collation of this DatabaseProperties.
        :rtype: str
        """
        return self._catalog_collation

    @catalog_collation.setter
    def catalog_collation(self, catalog_collation):
        """Sets the catalog_collation of this DatabaseProperties.

        Collation of the metadata catalog.

        :param catalog_collation: The catalog_collation of this DatabaseProperties.
        :type catalog_collation: str
        """
        allowed_values = ["DATABASE_DEFAULT", "SQL_Latin1_General_CP1_CI_AS"]  # noqa: E501
        if catalog_collation not in allowed_values:
            raise ValueError(
                "Invalid value for `catalog_collation` ({0}), must be one of {1}"
                .format(catalog_collation, allowed_values)
            )

        self._catalog_collation = catalog_collation

    @property
    def collation(self):
        """Gets the collation of this DatabaseProperties.

        The collation of the database.

        :return: The collation of this DatabaseProperties.
        :rtype: str
        """
        return self._collation

    @collation.setter
    def collation(self, collation):
        """Sets the collation of this DatabaseProperties.

        The collation of the database.

        :param collation: The collation of this DatabaseProperties.
        :type collation: str
        """

        self._collation = collation

    @property
    def create_mode(self):
        """Gets the create_mode of this DatabaseProperties.

        Specifies the mode of database creation.    Default: regular database creation.    Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.    Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.    PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.    Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.    Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.    RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.    Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.

        :return: The create_mode of this DatabaseProperties.
        :rtype: str
        """
        return self._create_mode

    @create_mode.setter
    def create_mode(self, create_mode):
        """Sets the create_mode of this DatabaseProperties.

        Specifies the mode of database creation.    Default: regular database creation.    Copy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.    Secondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.    PointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.    Recovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.    Restore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.    RestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.    Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition.

        :param create_mode: The create_mode of this DatabaseProperties.
        :type create_mode: str
        """
        allowed_values = ["Default", "Copy", "Secondary", "OnlineSecondary", "PointInTimeRestore", "Restore", "Recovery", "RestoreExternalBackup", "RestoreExternalBackupSecondary", "RestoreLongTermRetentionBackup"]  # noqa: E501
        if create_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `create_mode` ({0}), must be one of {1}"
                .format(create_mode, allowed_values)
            )

        self._create_mode = create_mode

    @property
    def creation_date(self):
        """Gets the creation_date of this DatabaseProperties.

        The creation date of the database (ISO8601 format).

        :return: The creation_date of this DatabaseProperties.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this DatabaseProperties.

        The creation date of the database (ISO8601 format).

        :param creation_date: The creation_date of this DatabaseProperties.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def current_service_objective_name(self):
        """Gets the current_service_objective_name of this DatabaseProperties.

        The current service level objective name of the database.

        :return: The current_service_objective_name of this DatabaseProperties.
        :rtype: str
        """
        return self._current_service_objective_name

    @current_service_objective_name.setter
    def current_service_objective_name(self, current_service_objective_name):
        """Sets the current_service_objective_name of this DatabaseProperties.

        The current service level objective name of the database.

        :param current_service_objective_name: The current_service_objective_name of this DatabaseProperties.
        :type current_service_objective_name: str
        """

        self._current_service_objective_name = current_service_objective_name

    @property
    def database_id(self):
        """Gets the database_id of this DatabaseProperties.

        The ID of the database.

        :return: The database_id of this DatabaseProperties.
        :rtype: str
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """Sets the database_id of this DatabaseProperties.

        The ID of the database.

        :param database_id: The database_id of this DatabaseProperties.
        :type database_id: str
        """

        self._database_id = database_id

    @property
    def default_secondary_location(self):
        """Gets the default_secondary_location of this DatabaseProperties.

        The default secondary region for this database.

        :return: The default_secondary_location of this DatabaseProperties.
        :rtype: str
        """
        return self._default_secondary_location

    @default_secondary_location.setter
    def default_secondary_location(self, default_secondary_location):
        """Sets the default_secondary_location of this DatabaseProperties.

        The default secondary region for this database.

        :param default_secondary_location: The default_secondary_location of this DatabaseProperties.
        :type default_secondary_location: str
        """

        self._default_secondary_location = default_secondary_location

    @property
    def elastic_pool_id(self):
        """Gets the elastic_pool_id of this DatabaseProperties.

        The resource identifier of the elastic pool containing this database.

        :return: The elastic_pool_id of this DatabaseProperties.
        :rtype: str
        """
        return self._elastic_pool_id

    @elastic_pool_id.setter
    def elastic_pool_id(self, elastic_pool_id):
        """Sets the elastic_pool_id of this DatabaseProperties.

        The resource identifier of the elastic pool containing this database.

        :param elastic_pool_id: The elastic_pool_id of this DatabaseProperties.
        :type elastic_pool_id: str
        """

        self._elastic_pool_id = elastic_pool_id

    @property
    def failover_group_id(self):
        """Gets the failover_group_id of this DatabaseProperties.

        Failover Group resource identifier that this database belongs to.

        :return: The failover_group_id of this DatabaseProperties.
        :rtype: str
        """
        return self._failover_group_id

    @failover_group_id.setter
    def failover_group_id(self, failover_group_id):
        """Sets the failover_group_id of this DatabaseProperties.

        Failover Group resource identifier that this database belongs to.

        :param failover_group_id: The failover_group_id of this DatabaseProperties.
        :type failover_group_id: str
        """

        self._failover_group_id = failover_group_id

    @property
    def long_term_retention_backup_resource_id(self):
        """Gets the long_term_retention_backup_resource_id of this DatabaseProperties.

        The resource identifier of the long term retention backup associated with create operation of this database.

        :return: The long_term_retention_backup_resource_id of this DatabaseProperties.
        :rtype: str
        """
        return self._long_term_retention_backup_resource_id

    @long_term_retention_backup_resource_id.setter
    def long_term_retention_backup_resource_id(self, long_term_retention_backup_resource_id):
        """Sets the long_term_retention_backup_resource_id of this DatabaseProperties.

        The resource identifier of the long term retention backup associated with create operation of this database.

        :param long_term_retention_backup_resource_id: The long_term_retention_backup_resource_id of this DatabaseProperties.
        :type long_term_retention_backup_resource_id: str
        """

        self._long_term_retention_backup_resource_id = long_term_retention_backup_resource_id

    @property
    def max_size_bytes(self):
        """Gets the max_size_bytes of this DatabaseProperties.

        The max size of the database expressed in bytes.

        :return: The max_size_bytes of this DatabaseProperties.
        :rtype: int
        """
        return self._max_size_bytes

    @max_size_bytes.setter
    def max_size_bytes(self, max_size_bytes):
        """Sets the max_size_bytes of this DatabaseProperties.

        The max size of the database expressed in bytes.

        :param max_size_bytes: The max_size_bytes of this DatabaseProperties.
        :type max_size_bytes: int
        """

        self._max_size_bytes = max_size_bytes

    @property
    def recoverable_database_id(self):
        """Gets the recoverable_database_id of this DatabaseProperties.

        The resource identifier of the recoverable database associated with create operation of this database.

        :return: The recoverable_database_id of this DatabaseProperties.
        :rtype: str
        """
        return self._recoverable_database_id

    @recoverable_database_id.setter
    def recoverable_database_id(self, recoverable_database_id):
        """Sets the recoverable_database_id of this DatabaseProperties.

        The resource identifier of the recoverable database associated with create operation of this database.

        :param recoverable_database_id: The recoverable_database_id of this DatabaseProperties.
        :type recoverable_database_id: str
        """

        self._recoverable_database_id = recoverable_database_id

    @property
    def recovery_services_recovery_point_id(self):
        """Gets the recovery_services_recovery_point_id of this DatabaseProperties.

        The resource identifier of the recovery point associated with create operation of this database.

        :return: The recovery_services_recovery_point_id of this DatabaseProperties.
        :rtype: str
        """
        return self._recovery_services_recovery_point_id

    @recovery_services_recovery_point_id.setter
    def recovery_services_recovery_point_id(self, recovery_services_recovery_point_id):
        """Sets the recovery_services_recovery_point_id of this DatabaseProperties.

        The resource identifier of the recovery point associated with create operation of this database.

        :param recovery_services_recovery_point_id: The recovery_services_recovery_point_id of this DatabaseProperties.
        :type recovery_services_recovery_point_id: str
        """

        self._recovery_services_recovery_point_id = recovery_services_recovery_point_id

    @property
    def restorable_dropped_database_id(self):
        """Gets the restorable_dropped_database_id of this DatabaseProperties.

        The resource identifier of the restorable dropped database associated with create operation of this database.

        :return: The restorable_dropped_database_id of this DatabaseProperties.
        :rtype: str
        """
        return self._restorable_dropped_database_id

    @restorable_dropped_database_id.setter
    def restorable_dropped_database_id(self, restorable_dropped_database_id):
        """Sets the restorable_dropped_database_id of this DatabaseProperties.

        The resource identifier of the restorable dropped database associated with create operation of this database.

        :param restorable_dropped_database_id: The restorable_dropped_database_id of this DatabaseProperties.
        :type restorable_dropped_database_id: str
        """

        self._restorable_dropped_database_id = restorable_dropped_database_id

    @property
    def restore_point_in_time(self):
        """Gets the restore_point_in_time of this DatabaseProperties.

        Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.

        :return: The restore_point_in_time of this DatabaseProperties.
        :rtype: datetime
        """
        return self._restore_point_in_time

    @restore_point_in_time.setter
    def restore_point_in_time(self, restore_point_in_time):
        """Sets the restore_point_in_time of this DatabaseProperties.

        Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.

        :param restore_point_in_time: The restore_point_in_time of this DatabaseProperties.
        :type restore_point_in_time: datetime
        """

        self._restore_point_in_time = restore_point_in_time

    @property
    def sample_name(self):
        """Gets the sample_name of this DatabaseProperties.

        The name of the sample schema to apply when creating this database.

        :return: The sample_name of this DatabaseProperties.
        :rtype: str
        """
        return self._sample_name

    @sample_name.setter
    def sample_name(self, sample_name):
        """Sets the sample_name of this DatabaseProperties.

        The name of the sample schema to apply when creating this database.

        :param sample_name: The sample_name of this DatabaseProperties.
        :type sample_name: str
        """
        allowed_values = ["AdventureWorksLT", "WideWorldImportersStd", "WideWorldImportersFull"]  # noqa: E501
        if sample_name not in allowed_values:
            raise ValueError(
                "Invalid value for `sample_name` ({0}), must be one of {1}"
                .format(sample_name, allowed_values)
            )

        self._sample_name = sample_name

    @property
    def source_database_deletion_date(self):
        """Gets the source_database_deletion_date of this DatabaseProperties.

        Specifies the time that the database was deleted.

        :return: The source_database_deletion_date of this DatabaseProperties.
        :rtype: datetime
        """
        return self._source_database_deletion_date

    @source_database_deletion_date.setter
    def source_database_deletion_date(self, source_database_deletion_date):
        """Sets the source_database_deletion_date of this DatabaseProperties.

        Specifies the time that the database was deleted.

        :param source_database_deletion_date: The source_database_deletion_date of this DatabaseProperties.
        :type source_database_deletion_date: datetime
        """

        self._source_database_deletion_date = source_database_deletion_date

    @property
    def source_database_id(self):
        """Gets the source_database_id of this DatabaseProperties.

        The resource identifier of the source database associated with create operation of this database.

        :return: The source_database_id of this DatabaseProperties.
        :rtype: str
        """
        return self._source_database_id

    @source_database_id.setter
    def source_database_id(self, source_database_id):
        """Sets the source_database_id of this DatabaseProperties.

        The resource identifier of the source database associated with create operation of this database.

        :param source_database_id: The source_database_id of this DatabaseProperties.
        :type source_database_id: str
        """

        self._source_database_id = source_database_id

    @property
    def status(self):
        """Gets the status of this DatabaseProperties.

        The status of the database.

        :return: The status of this DatabaseProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DatabaseProperties.

        The status of the database.

        :param status: The status of this DatabaseProperties.
        :type status: str
        """
        allowed_values = ["Online", "Restoring", "RecoveryPending", "Recovering", "Suspect", "Offline", "Standby", "Shutdown", "EmergencyMode", "AutoClosed", "Copying", "Creating", "Inaccessible", "OfflineSecondary", "Pausing", "Paused", "Resuming", "Scaling"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def zone_redundant(self):
        """Gets the zone_redundant of this DatabaseProperties.

        Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.

        :return: The zone_redundant of this DatabaseProperties.
        :rtype: bool
        """
        return self._zone_redundant

    @zone_redundant.setter
    def zone_redundant(self, zone_redundant):
        """Sets the zone_redundant of this DatabaseProperties.

        Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.

        :param zone_redundant: The zone_redundant of this DatabaseProperties.
        :type zone_redundant: bool
        """

        self._zone_redundant = zone_redundant
