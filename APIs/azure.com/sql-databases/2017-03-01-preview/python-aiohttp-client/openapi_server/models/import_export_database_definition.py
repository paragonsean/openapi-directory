# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportExportDatabaseDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrator_login: str=None, administrator_login_password: str=None, authentication_type: str=None, database_name: str=None, edition: str=None, max_size_bytes: str=None, service_objective_name: str=None, storage_key: str=None, storage_key_type: str=None, storage_uri: str=None):
        """ImportExportDatabaseDefinition - a model defined in OpenAPI

        :param administrator_login: The administrator_login of this ImportExportDatabaseDefinition.
        :param administrator_login_password: The administrator_login_password of this ImportExportDatabaseDefinition.
        :param authentication_type: The authentication_type of this ImportExportDatabaseDefinition.
        :param database_name: The database_name of this ImportExportDatabaseDefinition.
        :param edition: The edition of this ImportExportDatabaseDefinition.
        :param max_size_bytes: The max_size_bytes of this ImportExportDatabaseDefinition.
        :param service_objective_name: The service_objective_name of this ImportExportDatabaseDefinition.
        :param storage_key: The storage_key of this ImportExportDatabaseDefinition.
        :param storage_key_type: The storage_key_type of this ImportExportDatabaseDefinition.
        :param storage_uri: The storage_uri of this ImportExportDatabaseDefinition.
        """
        self.openapi_types = {
            'administrator_login': str,
            'administrator_login_password': str,
            'authentication_type': str,
            'database_name': str,
            'edition': str,
            'max_size_bytes': str,
            'service_objective_name': str,
            'storage_key': str,
            'storage_key_type': str,
            'storage_uri': str
        }

        self.attribute_map = {
            'administrator_login': 'administratorLogin',
            'administrator_login_password': 'administratorLoginPassword',
            'authentication_type': 'authenticationType',
            'database_name': 'databaseName',
            'edition': 'edition',
            'max_size_bytes': 'maxSizeBytes',
            'service_objective_name': 'serviceObjectiveName',
            'storage_key': 'storageKey',
            'storage_key_type': 'storageKeyType',
            'storage_uri': 'storageUri'
        }

        self._administrator_login = administrator_login
        self._administrator_login_password = administrator_login_password
        self._authentication_type = authentication_type
        self._database_name = database_name
        self._edition = edition
        self._max_size_bytes = max_size_bytes
        self._service_objective_name = service_objective_name
        self._storage_key = storage_key
        self._storage_key_type = storage_key_type
        self._storage_uri = storage_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportExportDatabaseDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportExportDatabaseDefinition of this ImportExportDatabaseDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrator_login(self):
        """Gets the administrator_login of this ImportExportDatabaseDefinition.

        Administrator login name.

        :return: The administrator_login of this ImportExportDatabaseDefinition.
        :rtype: str
        """
        return self._administrator_login

    @administrator_login.setter
    def administrator_login(self, administrator_login):
        """Sets the administrator_login of this ImportExportDatabaseDefinition.

        Administrator login name.

        :param administrator_login: The administrator_login of this ImportExportDatabaseDefinition.
        :type administrator_login: str
        """
        if administrator_login is None:
            raise ValueError("Invalid value for `administrator_login`, must not be `None`")

        self._administrator_login = administrator_login

    @property
    def administrator_login_password(self):
        """Gets the administrator_login_password of this ImportExportDatabaseDefinition.

        Administrator login password.

        :return: The administrator_login_password of this ImportExportDatabaseDefinition.
        :rtype: str
        """
        return self._administrator_login_password

    @administrator_login_password.setter
    def administrator_login_password(self, administrator_login_password):
        """Sets the administrator_login_password of this ImportExportDatabaseDefinition.

        Administrator login password.

        :param administrator_login_password: The administrator_login_password of this ImportExportDatabaseDefinition.
        :type administrator_login_password: str
        """
        if administrator_login_password is None:
            raise ValueError("Invalid value for `administrator_login_password`, must not be `None`")

        self._administrator_login_password = administrator_login_password

    @property
    def authentication_type(self):
        """Gets the authentication_type of this ImportExportDatabaseDefinition.

        Authentication type.

        :return: The authentication_type of this ImportExportDatabaseDefinition.
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this ImportExportDatabaseDefinition.

        Authentication type.

        :param authentication_type: The authentication_type of this ImportExportDatabaseDefinition.
        :type authentication_type: str
        """

        self._authentication_type = authentication_type

    @property
    def database_name(self):
        """Gets the database_name of this ImportExportDatabaseDefinition.

        Name of the import database.

        :return: The database_name of this ImportExportDatabaseDefinition.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this ImportExportDatabaseDefinition.

        Name of the import database.

        :param database_name: The database_name of this ImportExportDatabaseDefinition.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def edition(self):
        """Gets the edition of this ImportExportDatabaseDefinition.

        Edition of the import database.

        :return: The edition of this ImportExportDatabaseDefinition.
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this ImportExportDatabaseDefinition.

        Edition of the import database.

        :param edition: The edition of this ImportExportDatabaseDefinition.
        :type edition: str
        """

        self._edition = edition

    @property
    def max_size_bytes(self):
        """Gets the max_size_bytes of this ImportExportDatabaseDefinition.

        Max size in bytes for the import database.

        :return: The max_size_bytes of this ImportExportDatabaseDefinition.
        :rtype: str
        """
        return self._max_size_bytes

    @max_size_bytes.setter
    def max_size_bytes(self, max_size_bytes):
        """Sets the max_size_bytes of this ImportExportDatabaseDefinition.

        Max size in bytes for the import database.

        :param max_size_bytes: The max_size_bytes of this ImportExportDatabaseDefinition.
        :type max_size_bytes: str
        """

        self._max_size_bytes = max_size_bytes

    @property
    def service_objective_name(self):
        """Gets the service_objective_name of this ImportExportDatabaseDefinition.

        Service level objective name of the import database.

        :return: The service_objective_name of this ImportExportDatabaseDefinition.
        :rtype: str
        """
        return self._service_objective_name

    @service_objective_name.setter
    def service_objective_name(self, service_objective_name):
        """Sets the service_objective_name of this ImportExportDatabaseDefinition.

        Service level objective name of the import database.

        :param service_objective_name: The service_objective_name of this ImportExportDatabaseDefinition.
        :type service_objective_name: str
        """

        self._service_objective_name = service_objective_name

    @property
    def storage_key(self):
        """Gets the storage_key of this ImportExportDatabaseDefinition.

        Storage key.

        :return: The storage_key of this ImportExportDatabaseDefinition.
        :rtype: str
        """
        return self._storage_key

    @storage_key.setter
    def storage_key(self, storage_key):
        """Sets the storage_key of this ImportExportDatabaseDefinition.

        Storage key.

        :param storage_key: The storage_key of this ImportExportDatabaseDefinition.
        :type storage_key: str
        """
        if storage_key is None:
            raise ValueError("Invalid value for `storage_key`, must not be `None`")

        self._storage_key = storage_key

    @property
    def storage_key_type(self):
        """Gets the storage_key_type of this ImportExportDatabaseDefinition.

        Storage key type.

        :return: The storage_key_type of this ImportExportDatabaseDefinition.
        :rtype: str
        """
        return self._storage_key_type

    @storage_key_type.setter
    def storage_key_type(self, storage_key_type):
        """Sets the storage_key_type of this ImportExportDatabaseDefinition.

        Storage key type.

        :param storage_key_type: The storage_key_type of this ImportExportDatabaseDefinition.
        :type storage_key_type: str
        """
        if storage_key_type is None:
            raise ValueError("Invalid value for `storage_key_type`, must not be `None`")

        self._storage_key_type = storage_key_type

    @property
    def storage_uri(self):
        """Gets the storage_uri of this ImportExportDatabaseDefinition.

        Storage Uri.

        :return: The storage_uri of this ImportExportDatabaseDefinition.
        :rtype: str
        """
        return self._storage_uri

    @storage_uri.setter
    def storage_uri(self, storage_uri):
        """Sets the storage_uri of this ImportExportDatabaseDefinition.

        Storage Uri.

        :param storage_uri: The storage_uri of this ImportExportDatabaseDefinition.
        :type storage_uri: str
        """
        if storage_uri is None:
            raise ValueError("Invalid value for `storage_uri`, must not be `None`")

        self._storage_uri = storage_uri
