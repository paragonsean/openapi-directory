/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatabaseProperties.h
 *
 * The database&#39;s properties.
 */

#ifndef OAIDatabaseProperties_H
#define OAIDatabaseProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDatabaseProperties : public OAIObject {
public:
    OAIDatabaseProperties();
    OAIDatabaseProperties(QString json);
    ~OAIDatabaseProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCatalogCollation() const;
    void setCatalogCollation(const QString &catalog_collation);
    bool is_catalog_collation_Set() const;
    bool is_catalog_collation_Valid() const;

    QString getCollation() const;
    void setCollation(const QString &collation);
    bool is_collation_Set() const;
    bool is_collation_Valid() const;

    QString getCreateMode() const;
    void setCreateMode(const QString &create_mode);
    bool is_create_mode_Set() const;
    bool is_create_mode_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getCurrentServiceObjectiveName() const;
    void setCurrentServiceObjectiveName(const QString &current_service_objective_name);
    bool is_current_service_objective_name_Set() const;
    bool is_current_service_objective_name_Valid() const;

    QString getDatabaseId() const;
    void setDatabaseId(const QString &database_id);
    bool is_database_id_Set() const;
    bool is_database_id_Valid() const;

    QString getDefaultSecondaryLocation() const;
    void setDefaultSecondaryLocation(const QString &default_secondary_location);
    bool is_default_secondary_location_Set() const;
    bool is_default_secondary_location_Valid() const;

    QString getElasticPoolId() const;
    void setElasticPoolId(const QString &elastic_pool_id);
    bool is_elastic_pool_id_Set() const;
    bool is_elastic_pool_id_Valid() const;

    QString getFailoverGroupId() const;
    void setFailoverGroupId(const QString &failover_group_id);
    bool is_failover_group_id_Set() const;
    bool is_failover_group_id_Valid() const;

    QString getLongTermRetentionBackupResourceId() const;
    void setLongTermRetentionBackupResourceId(const QString &long_term_retention_backup_resource_id);
    bool is_long_term_retention_backup_resource_id_Set() const;
    bool is_long_term_retention_backup_resource_id_Valid() const;

    qint64 getMaxSizeBytes() const;
    void setMaxSizeBytes(const qint64 &max_size_bytes);
    bool is_max_size_bytes_Set() const;
    bool is_max_size_bytes_Valid() const;

    QString getRecoverableDatabaseId() const;
    void setRecoverableDatabaseId(const QString &recoverable_database_id);
    bool is_recoverable_database_id_Set() const;
    bool is_recoverable_database_id_Valid() const;

    QString getRecoveryServicesRecoveryPointId() const;
    void setRecoveryServicesRecoveryPointId(const QString &recovery_services_recovery_point_id);
    bool is_recovery_services_recovery_point_id_Set() const;
    bool is_recovery_services_recovery_point_id_Valid() const;

    QString getRestorableDroppedDatabaseId() const;
    void setRestorableDroppedDatabaseId(const QString &restorable_dropped_database_id);
    bool is_restorable_dropped_database_id_Set() const;
    bool is_restorable_dropped_database_id_Valid() const;

    QDateTime getRestorePointInTime() const;
    void setRestorePointInTime(const QDateTime &restore_point_in_time);
    bool is_restore_point_in_time_Set() const;
    bool is_restore_point_in_time_Valid() const;

    QString getSampleName() const;
    void setSampleName(const QString &sample_name);
    bool is_sample_name_Set() const;
    bool is_sample_name_Valid() const;

    QDateTime getSourceDatabaseDeletionDate() const;
    void setSourceDatabaseDeletionDate(const QDateTime &source_database_deletion_date);
    bool is_source_database_deletion_date_Set() const;
    bool is_source_database_deletion_date_Valid() const;

    QString getSourceDatabaseId() const;
    void setSourceDatabaseId(const QString &source_database_id);
    bool is_source_database_id_Set() const;
    bool is_source_database_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    bool isZoneRedundant() const;
    void setZoneRedundant(const bool &zone_redundant);
    bool is_zone_redundant_Set() const;
    bool is_zone_redundant_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_catalog_collation;
    bool m_catalog_collation_isSet;
    bool m_catalog_collation_isValid;

    QString m_collation;
    bool m_collation_isSet;
    bool m_collation_isValid;

    QString m_create_mode;
    bool m_create_mode_isSet;
    bool m_create_mode_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_current_service_objective_name;
    bool m_current_service_objective_name_isSet;
    bool m_current_service_objective_name_isValid;

    QString m_database_id;
    bool m_database_id_isSet;
    bool m_database_id_isValid;

    QString m_default_secondary_location;
    bool m_default_secondary_location_isSet;
    bool m_default_secondary_location_isValid;

    QString m_elastic_pool_id;
    bool m_elastic_pool_id_isSet;
    bool m_elastic_pool_id_isValid;

    QString m_failover_group_id;
    bool m_failover_group_id_isSet;
    bool m_failover_group_id_isValid;

    QString m_long_term_retention_backup_resource_id;
    bool m_long_term_retention_backup_resource_id_isSet;
    bool m_long_term_retention_backup_resource_id_isValid;

    qint64 m_max_size_bytes;
    bool m_max_size_bytes_isSet;
    bool m_max_size_bytes_isValid;

    QString m_recoverable_database_id;
    bool m_recoverable_database_id_isSet;
    bool m_recoverable_database_id_isValid;

    QString m_recovery_services_recovery_point_id;
    bool m_recovery_services_recovery_point_id_isSet;
    bool m_recovery_services_recovery_point_id_isValid;

    QString m_restorable_dropped_database_id;
    bool m_restorable_dropped_database_id_isSet;
    bool m_restorable_dropped_database_id_isValid;

    QDateTime m_restore_point_in_time;
    bool m_restore_point_in_time_isSet;
    bool m_restore_point_in_time_isValid;

    QString m_sample_name;
    bool m_sample_name_isSet;
    bool m_sample_name_isValid;

    QDateTime m_source_database_deletion_date;
    bool m_source_database_deletion_date_isSet;
    bool m_source_database_deletion_date_isValid;

    QString m_source_database_id;
    bool m_source_database_id_isSet;
    bool m_source_database_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    bool m_zone_redundant;
    bool m_zone_redundant_isSet;
    bool m_zone_redundant_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatabaseProperties)

#endif // OAIDatabaseProperties_H
