/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseProperties::OAIDatabaseProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseProperties::OAIDatabaseProperties() {
    this->initializeModel();
}

OAIDatabaseProperties::~OAIDatabaseProperties() {}

void OAIDatabaseProperties::initializeModel() {

    m_catalog_collation_isSet = false;
    m_catalog_collation_isValid = false;

    m_collation_isSet = false;
    m_collation_isValid = false;

    m_create_mode_isSet = false;
    m_create_mode_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_current_service_objective_name_isSet = false;
    m_current_service_objective_name_isValid = false;

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_default_secondary_location_isSet = false;
    m_default_secondary_location_isValid = false;

    m_elastic_pool_id_isSet = false;
    m_elastic_pool_id_isValid = false;

    m_failover_group_id_isSet = false;
    m_failover_group_id_isValid = false;

    m_long_term_retention_backup_resource_id_isSet = false;
    m_long_term_retention_backup_resource_id_isValid = false;

    m_max_size_bytes_isSet = false;
    m_max_size_bytes_isValid = false;

    m_recoverable_database_id_isSet = false;
    m_recoverable_database_id_isValid = false;

    m_recovery_services_recovery_point_id_isSet = false;
    m_recovery_services_recovery_point_id_isValid = false;

    m_restorable_dropped_database_id_isSet = false;
    m_restorable_dropped_database_id_isValid = false;

    m_restore_point_in_time_isSet = false;
    m_restore_point_in_time_isValid = false;

    m_sample_name_isSet = false;
    m_sample_name_isValid = false;

    m_source_database_deletion_date_isSet = false;
    m_source_database_deletion_date_isValid = false;

    m_source_database_id_isSet = false;
    m_source_database_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_zone_redundant_isSet = false;
    m_zone_redundant_isValid = false;
}

void OAIDatabaseProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseProperties::fromJsonObject(QJsonObject json) {

    m_catalog_collation_isValid = ::OpenAPI::fromJsonValue(m_catalog_collation, json[QString("catalogCollation")]);
    m_catalog_collation_isSet = !json[QString("catalogCollation")].isNull() && m_catalog_collation_isValid;

    m_collation_isValid = ::OpenAPI::fromJsonValue(m_collation, json[QString("collation")]);
    m_collation_isSet = !json[QString("collation")].isNull() && m_collation_isValid;

    m_create_mode_isValid = ::OpenAPI::fromJsonValue(m_create_mode, json[QString("createMode")]);
    m_create_mode_isSet = !json[QString("createMode")].isNull() && m_create_mode_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_current_service_objective_name_isValid = ::OpenAPI::fromJsonValue(m_current_service_objective_name, json[QString("currentServiceObjectiveName")]);
    m_current_service_objective_name_isSet = !json[QString("currentServiceObjectiveName")].isNull() && m_current_service_objective_name_isValid;

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("databaseId")]);
    m_database_id_isSet = !json[QString("databaseId")].isNull() && m_database_id_isValid;

    m_default_secondary_location_isValid = ::OpenAPI::fromJsonValue(m_default_secondary_location, json[QString("defaultSecondaryLocation")]);
    m_default_secondary_location_isSet = !json[QString("defaultSecondaryLocation")].isNull() && m_default_secondary_location_isValid;

    m_elastic_pool_id_isValid = ::OpenAPI::fromJsonValue(m_elastic_pool_id, json[QString("elasticPoolId")]);
    m_elastic_pool_id_isSet = !json[QString("elasticPoolId")].isNull() && m_elastic_pool_id_isValid;

    m_failover_group_id_isValid = ::OpenAPI::fromJsonValue(m_failover_group_id, json[QString("failoverGroupId")]);
    m_failover_group_id_isSet = !json[QString("failoverGroupId")].isNull() && m_failover_group_id_isValid;

    m_long_term_retention_backup_resource_id_isValid = ::OpenAPI::fromJsonValue(m_long_term_retention_backup_resource_id, json[QString("longTermRetentionBackupResourceId")]);
    m_long_term_retention_backup_resource_id_isSet = !json[QString("longTermRetentionBackupResourceId")].isNull() && m_long_term_retention_backup_resource_id_isValid;

    m_max_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_size_bytes, json[QString("maxSizeBytes")]);
    m_max_size_bytes_isSet = !json[QString("maxSizeBytes")].isNull() && m_max_size_bytes_isValid;

    m_recoverable_database_id_isValid = ::OpenAPI::fromJsonValue(m_recoverable_database_id, json[QString("recoverableDatabaseId")]);
    m_recoverable_database_id_isSet = !json[QString("recoverableDatabaseId")].isNull() && m_recoverable_database_id_isValid;

    m_recovery_services_recovery_point_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_services_recovery_point_id, json[QString("recoveryServicesRecoveryPointId")]);
    m_recovery_services_recovery_point_id_isSet = !json[QString("recoveryServicesRecoveryPointId")].isNull() && m_recovery_services_recovery_point_id_isValid;

    m_restorable_dropped_database_id_isValid = ::OpenAPI::fromJsonValue(m_restorable_dropped_database_id, json[QString("restorableDroppedDatabaseId")]);
    m_restorable_dropped_database_id_isSet = !json[QString("restorableDroppedDatabaseId")].isNull() && m_restorable_dropped_database_id_isValid;

    m_restore_point_in_time_isValid = ::OpenAPI::fromJsonValue(m_restore_point_in_time, json[QString("restorePointInTime")]);
    m_restore_point_in_time_isSet = !json[QString("restorePointInTime")].isNull() && m_restore_point_in_time_isValid;

    m_sample_name_isValid = ::OpenAPI::fromJsonValue(m_sample_name, json[QString("sampleName")]);
    m_sample_name_isSet = !json[QString("sampleName")].isNull() && m_sample_name_isValid;

    m_source_database_deletion_date_isValid = ::OpenAPI::fromJsonValue(m_source_database_deletion_date, json[QString("sourceDatabaseDeletionDate")]);
    m_source_database_deletion_date_isSet = !json[QString("sourceDatabaseDeletionDate")].isNull() && m_source_database_deletion_date_isValid;

    m_source_database_id_isValid = ::OpenAPI::fromJsonValue(m_source_database_id, json[QString("sourceDatabaseId")]);
    m_source_database_id_isSet = !json[QString("sourceDatabaseId")].isNull() && m_source_database_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_zone_redundant_isValid = ::OpenAPI::fromJsonValue(m_zone_redundant, json[QString("zoneRedundant")]);
    m_zone_redundant_isSet = !json[QString("zoneRedundant")].isNull() && m_zone_redundant_isValid;
}

QString OAIDatabaseProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_collation_isSet) {
        obj.insert(QString("catalogCollation"), ::OpenAPI::toJsonValue(m_catalog_collation));
    }
    if (m_collation_isSet) {
        obj.insert(QString("collation"), ::OpenAPI::toJsonValue(m_collation));
    }
    if (m_create_mode_isSet) {
        obj.insert(QString("createMode"), ::OpenAPI::toJsonValue(m_create_mode));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_current_service_objective_name_isSet) {
        obj.insert(QString("currentServiceObjectiveName"), ::OpenAPI::toJsonValue(m_current_service_objective_name));
    }
    if (m_database_id_isSet) {
        obj.insert(QString("databaseId"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_default_secondary_location_isSet) {
        obj.insert(QString("defaultSecondaryLocation"), ::OpenAPI::toJsonValue(m_default_secondary_location));
    }
    if (m_elastic_pool_id_isSet) {
        obj.insert(QString("elasticPoolId"), ::OpenAPI::toJsonValue(m_elastic_pool_id));
    }
    if (m_failover_group_id_isSet) {
        obj.insert(QString("failoverGroupId"), ::OpenAPI::toJsonValue(m_failover_group_id));
    }
    if (m_long_term_retention_backup_resource_id_isSet) {
        obj.insert(QString("longTermRetentionBackupResourceId"), ::OpenAPI::toJsonValue(m_long_term_retention_backup_resource_id));
    }
    if (m_max_size_bytes_isSet) {
        obj.insert(QString("maxSizeBytes"), ::OpenAPI::toJsonValue(m_max_size_bytes));
    }
    if (m_recoverable_database_id_isSet) {
        obj.insert(QString("recoverableDatabaseId"), ::OpenAPI::toJsonValue(m_recoverable_database_id));
    }
    if (m_recovery_services_recovery_point_id_isSet) {
        obj.insert(QString("recoveryServicesRecoveryPointId"), ::OpenAPI::toJsonValue(m_recovery_services_recovery_point_id));
    }
    if (m_restorable_dropped_database_id_isSet) {
        obj.insert(QString("restorableDroppedDatabaseId"), ::OpenAPI::toJsonValue(m_restorable_dropped_database_id));
    }
    if (m_restore_point_in_time_isSet) {
        obj.insert(QString("restorePointInTime"), ::OpenAPI::toJsonValue(m_restore_point_in_time));
    }
    if (m_sample_name_isSet) {
        obj.insert(QString("sampleName"), ::OpenAPI::toJsonValue(m_sample_name));
    }
    if (m_source_database_deletion_date_isSet) {
        obj.insert(QString("sourceDatabaseDeletionDate"), ::OpenAPI::toJsonValue(m_source_database_deletion_date));
    }
    if (m_source_database_id_isSet) {
        obj.insert(QString("sourceDatabaseId"), ::OpenAPI::toJsonValue(m_source_database_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_zone_redundant_isSet) {
        obj.insert(QString("zoneRedundant"), ::OpenAPI::toJsonValue(m_zone_redundant));
    }
    return obj;
}

QString OAIDatabaseProperties::getCatalogCollation() const {
    return m_catalog_collation;
}
void OAIDatabaseProperties::setCatalogCollation(const QString &catalog_collation) {
    m_catalog_collation = catalog_collation;
    m_catalog_collation_isSet = true;
}

bool OAIDatabaseProperties::is_catalog_collation_Set() const{
    return m_catalog_collation_isSet;
}

bool OAIDatabaseProperties::is_catalog_collation_Valid() const{
    return m_catalog_collation_isValid;
}

QString OAIDatabaseProperties::getCollation() const {
    return m_collation;
}
void OAIDatabaseProperties::setCollation(const QString &collation) {
    m_collation = collation;
    m_collation_isSet = true;
}

bool OAIDatabaseProperties::is_collation_Set() const{
    return m_collation_isSet;
}

bool OAIDatabaseProperties::is_collation_Valid() const{
    return m_collation_isValid;
}

QString OAIDatabaseProperties::getCreateMode() const {
    return m_create_mode;
}
void OAIDatabaseProperties::setCreateMode(const QString &create_mode) {
    m_create_mode = create_mode;
    m_create_mode_isSet = true;
}

bool OAIDatabaseProperties::is_create_mode_Set() const{
    return m_create_mode_isSet;
}

bool OAIDatabaseProperties::is_create_mode_Valid() const{
    return m_create_mode_isValid;
}

QDateTime OAIDatabaseProperties::getCreationDate() const {
    return m_creation_date;
}
void OAIDatabaseProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIDatabaseProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIDatabaseProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIDatabaseProperties::getCurrentServiceObjectiveName() const {
    return m_current_service_objective_name;
}
void OAIDatabaseProperties::setCurrentServiceObjectiveName(const QString &current_service_objective_name) {
    m_current_service_objective_name = current_service_objective_name;
    m_current_service_objective_name_isSet = true;
}

bool OAIDatabaseProperties::is_current_service_objective_name_Set() const{
    return m_current_service_objective_name_isSet;
}

bool OAIDatabaseProperties::is_current_service_objective_name_Valid() const{
    return m_current_service_objective_name_isValid;
}

QString OAIDatabaseProperties::getDatabaseId() const {
    return m_database_id;
}
void OAIDatabaseProperties::setDatabaseId(const QString &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAIDatabaseProperties::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAIDatabaseProperties::is_database_id_Valid() const{
    return m_database_id_isValid;
}

QString OAIDatabaseProperties::getDefaultSecondaryLocation() const {
    return m_default_secondary_location;
}
void OAIDatabaseProperties::setDefaultSecondaryLocation(const QString &default_secondary_location) {
    m_default_secondary_location = default_secondary_location;
    m_default_secondary_location_isSet = true;
}

bool OAIDatabaseProperties::is_default_secondary_location_Set() const{
    return m_default_secondary_location_isSet;
}

bool OAIDatabaseProperties::is_default_secondary_location_Valid() const{
    return m_default_secondary_location_isValid;
}

QString OAIDatabaseProperties::getElasticPoolId() const {
    return m_elastic_pool_id;
}
void OAIDatabaseProperties::setElasticPoolId(const QString &elastic_pool_id) {
    m_elastic_pool_id = elastic_pool_id;
    m_elastic_pool_id_isSet = true;
}

bool OAIDatabaseProperties::is_elastic_pool_id_Set() const{
    return m_elastic_pool_id_isSet;
}

bool OAIDatabaseProperties::is_elastic_pool_id_Valid() const{
    return m_elastic_pool_id_isValid;
}

QString OAIDatabaseProperties::getFailoverGroupId() const {
    return m_failover_group_id;
}
void OAIDatabaseProperties::setFailoverGroupId(const QString &failover_group_id) {
    m_failover_group_id = failover_group_id;
    m_failover_group_id_isSet = true;
}

bool OAIDatabaseProperties::is_failover_group_id_Set() const{
    return m_failover_group_id_isSet;
}

bool OAIDatabaseProperties::is_failover_group_id_Valid() const{
    return m_failover_group_id_isValid;
}

QString OAIDatabaseProperties::getLongTermRetentionBackupResourceId() const {
    return m_long_term_retention_backup_resource_id;
}
void OAIDatabaseProperties::setLongTermRetentionBackupResourceId(const QString &long_term_retention_backup_resource_id) {
    m_long_term_retention_backup_resource_id = long_term_retention_backup_resource_id;
    m_long_term_retention_backup_resource_id_isSet = true;
}

bool OAIDatabaseProperties::is_long_term_retention_backup_resource_id_Set() const{
    return m_long_term_retention_backup_resource_id_isSet;
}

bool OAIDatabaseProperties::is_long_term_retention_backup_resource_id_Valid() const{
    return m_long_term_retention_backup_resource_id_isValid;
}

qint64 OAIDatabaseProperties::getMaxSizeBytes() const {
    return m_max_size_bytes;
}
void OAIDatabaseProperties::setMaxSizeBytes(const qint64 &max_size_bytes) {
    m_max_size_bytes = max_size_bytes;
    m_max_size_bytes_isSet = true;
}

bool OAIDatabaseProperties::is_max_size_bytes_Set() const{
    return m_max_size_bytes_isSet;
}

bool OAIDatabaseProperties::is_max_size_bytes_Valid() const{
    return m_max_size_bytes_isValid;
}

QString OAIDatabaseProperties::getRecoverableDatabaseId() const {
    return m_recoverable_database_id;
}
void OAIDatabaseProperties::setRecoverableDatabaseId(const QString &recoverable_database_id) {
    m_recoverable_database_id = recoverable_database_id;
    m_recoverable_database_id_isSet = true;
}

bool OAIDatabaseProperties::is_recoverable_database_id_Set() const{
    return m_recoverable_database_id_isSet;
}

bool OAIDatabaseProperties::is_recoverable_database_id_Valid() const{
    return m_recoverable_database_id_isValid;
}

QString OAIDatabaseProperties::getRecoveryServicesRecoveryPointId() const {
    return m_recovery_services_recovery_point_id;
}
void OAIDatabaseProperties::setRecoveryServicesRecoveryPointId(const QString &recovery_services_recovery_point_id) {
    m_recovery_services_recovery_point_id = recovery_services_recovery_point_id;
    m_recovery_services_recovery_point_id_isSet = true;
}

bool OAIDatabaseProperties::is_recovery_services_recovery_point_id_Set() const{
    return m_recovery_services_recovery_point_id_isSet;
}

bool OAIDatabaseProperties::is_recovery_services_recovery_point_id_Valid() const{
    return m_recovery_services_recovery_point_id_isValid;
}

QString OAIDatabaseProperties::getRestorableDroppedDatabaseId() const {
    return m_restorable_dropped_database_id;
}
void OAIDatabaseProperties::setRestorableDroppedDatabaseId(const QString &restorable_dropped_database_id) {
    m_restorable_dropped_database_id = restorable_dropped_database_id;
    m_restorable_dropped_database_id_isSet = true;
}

bool OAIDatabaseProperties::is_restorable_dropped_database_id_Set() const{
    return m_restorable_dropped_database_id_isSet;
}

bool OAIDatabaseProperties::is_restorable_dropped_database_id_Valid() const{
    return m_restorable_dropped_database_id_isValid;
}

QDateTime OAIDatabaseProperties::getRestorePointInTime() const {
    return m_restore_point_in_time;
}
void OAIDatabaseProperties::setRestorePointInTime(const QDateTime &restore_point_in_time) {
    m_restore_point_in_time = restore_point_in_time;
    m_restore_point_in_time_isSet = true;
}

bool OAIDatabaseProperties::is_restore_point_in_time_Set() const{
    return m_restore_point_in_time_isSet;
}

bool OAIDatabaseProperties::is_restore_point_in_time_Valid() const{
    return m_restore_point_in_time_isValid;
}

QString OAIDatabaseProperties::getSampleName() const {
    return m_sample_name;
}
void OAIDatabaseProperties::setSampleName(const QString &sample_name) {
    m_sample_name = sample_name;
    m_sample_name_isSet = true;
}

bool OAIDatabaseProperties::is_sample_name_Set() const{
    return m_sample_name_isSet;
}

bool OAIDatabaseProperties::is_sample_name_Valid() const{
    return m_sample_name_isValid;
}

QDateTime OAIDatabaseProperties::getSourceDatabaseDeletionDate() const {
    return m_source_database_deletion_date;
}
void OAIDatabaseProperties::setSourceDatabaseDeletionDate(const QDateTime &source_database_deletion_date) {
    m_source_database_deletion_date = source_database_deletion_date;
    m_source_database_deletion_date_isSet = true;
}

bool OAIDatabaseProperties::is_source_database_deletion_date_Set() const{
    return m_source_database_deletion_date_isSet;
}

bool OAIDatabaseProperties::is_source_database_deletion_date_Valid() const{
    return m_source_database_deletion_date_isValid;
}

QString OAIDatabaseProperties::getSourceDatabaseId() const {
    return m_source_database_id;
}
void OAIDatabaseProperties::setSourceDatabaseId(const QString &source_database_id) {
    m_source_database_id = source_database_id;
    m_source_database_id_isSet = true;
}

bool OAIDatabaseProperties::is_source_database_id_Set() const{
    return m_source_database_id_isSet;
}

bool OAIDatabaseProperties::is_source_database_id_Valid() const{
    return m_source_database_id_isValid;
}

QString OAIDatabaseProperties::getStatus() const {
    return m_status;
}
void OAIDatabaseProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDatabaseProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDatabaseProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDatabaseProperties::isZoneRedundant() const {
    return m_zone_redundant;
}
void OAIDatabaseProperties::setZoneRedundant(const bool &zone_redundant) {
    m_zone_redundant = zone_redundant;
    m_zone_redundant_isSet = true;
}

bool OAIDatabaseProperties::is_zone_redundant_Set() const{
    return m_zone_redundant_isSet;
}

bool OAIDatabaseProperties::is_zone_redundant_Valid() const{
    return m_zone_redundant_isValid;
}

bool OAIDatabaseProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_service_objective_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_secondary_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_term_retention_backup_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recoverable_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_services_recovery_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restorable_dropped_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_point_in_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_database_deletion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_redundant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
