/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportExportDatabaseDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportExportDatabaseDefinition::OAIImportExportDatabaseDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportExportDatabaseDefinition::OAIImportExportDatabaseDefinition() {
    this->initializeModel();
}

OAIImportExportDatabaseDefinition::~OAIImportExportDatabaseDefinition() {}

void OAIImportExportDatabaseDefinition::initializeModel() {

    m_administrator_login_isSet = false;
    m_administrator_login_isValid = false;

    m_administrator_login_password_isSet = false;
    m_administrator_login_password_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_max_size_bytes_isSet = false;
    m_max_size_bytes_isValid = false;

    m_service_objective_name_isSet = false;
    m_service_objective_name_isValid = false;

    m_storage_key_isSet = false;
    m_storage_key_isValid = false;

    m_storage_key_type_isSet = false;
    m_storage_key_type_isValid = false;

    m_storage_uri_isSet = false;
    m_storage_uri_isValid = false;
}

void OAIImportExportDatabaseDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportExportDatabaseDefinition::fromJsonObject(QJsonObject json) {

    m_administrator_login_isValid = ::OpenAPI::fromJsonValue(m_administrator_login, json[QString("administratorLogin")]);
    m_administrator_login_isSet = !json[QString("administratorLogin")].isNull() && m_administrator_login_isValid;

    m_administrator_login_password_isValid = ::OpenAPI::fromJsonValue(m_administrator_login_password, json[QString("administratorLoginPassword")]);
    m_administrator_login_password_isSet = !json[QString("administratorLoginPassword")].isNull() && m_administrator_login_password_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("authenticationType")]);
    m_authentication_type_isSet = !json[QString("authenticationType")].isNull() && m_authentication_type_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_max_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_size_bytes, json[QString("maxSizeBytes")]);
    m_max_size_bytes_isSet = !json[QString("maxSizeBytes")].isNull() && m_max_size_bytes_isValid;

    m_service_objective_name_isValid = ::OpenAPI::fromJsonValue(m_service_objective_name, json[QString("serviceObjectiveName")]);
    m_service_objective_name_isSet = !json[QString("serviceObjectiveName")].isNull() && m_service_objective_name_isValid;

    m_storage_key_isValid = ::OpenAPI::fromJsonValue(m_storage_key, json[QString("storageKey")]);
    m_storage_key_isSet = !json[QString("storageKey")].isNull() && m_storage_key_isValid;

    m_storage_key_type_isValid = ::OpenAPI::fromJsonValue(m_storage_key_type, json[QString("storageKeyType")]);
    m_storage_key_type_isSet = !json[QString("storageKeyType")].isNull() && m_storage_key_type_isValid;

    m_storage_uri_isValid = ::OpenAPI::fromJsonValue(m_storage_uri, json[QString("storageUri")]);
    m_storage_uri_isSet = !json[QString("storageUri")].isNull() && m_storage_uri_isValid;
}

QString OAIImportExportDatabaseDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportExportDatabaseDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_administrator_login_isSet) {
        obj.insert(QString("administratorLogin"), ::OpenAPI::toJsonValue(m_administrator_login));
    }
    if (m_administrator_login_password_isSet) {
        obj.insert(QString("administratorLoginPassword"), ::OpenAPI::toJsonValue(m_administrator_login_password));
    }
    if (m_authentication_type_isSet) {
        obj.insert(QString("authenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_max_size_bytes_isSet) {
        obj.insert(QString("maxSizeBytes"), ::OpenAPI::toJsonValue(m_max_size_bytes));
    }
    if (m_service_objective_name_isSet) {
        obj.insert(QString("serviceObjectiveName"), ::OpenAPI::toJsonValue(m_service_objective_name));
    }
    if (m_storage_key_isSet) {
        obj.insert(QString("storageKey"), ::OpenAPI::toJsonValue(m_storage_key));
    }
    if (m_storage_key_type_isSet) {
        obj.insert(QString("storageKeyType"), ::OpenAPI::toJsonValue(m_storage_key_type));
    }
    if (m_storage_uri_isSet) {
        obj.insert(QString("storageUri"), ::OpenAPI::toJsonValue(m_storage_uri));
    }
    return obj;
}

QString OAIImportExportDatabaseDefinition::getAdministratorLogin() const {
    return m_administrator_login;
}
void OAIImportExportDatabaseDefinition::setAdministratorLogin(const QString &administrator_login) {
    m_administrator_login = administrator_login;
    m_administrator_login_isSet = true;
}

bool OAIImportExportDatabaseDefinition::is_administrator_login_Set() const{
    return m_administrator_login_isSet;
}

bool OAIImportExportDatabaseDefinition::is_administrator_login_Valid() const{
    return m_administrator_login_isValid;
}

QString OAIImportExportDatabaseDefinition::getAdministratorLoginPassword() const {
    return m_administrator_login_password;
}
void OAIImportExportDatabaseDefinition::setAdministratorLoginPassword(const QString &administrator_login_password) {
    m_administrator_login_password = administrator_login_password;
    m_administrator_login_password_isSet = true;
}

bool OAIImportExportDatabaseDefinition::is_administrator_login_password_Set() const{
    return m_administrator_login_password_isSet;
}

bool OAIImportExportDatabaseDefinition::is_administrator_login_password_Valid() const{
    return m_administrator_login_password_isValid;
}

QString OAIImportExportDatabaseDefinition::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIImportExportDatabaseDefinition::setAuthenticationType(const QString &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIImportExportDatabaseDefinition::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIImportExportDatabaseDefinition::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

QString OAIImportExportDatabaseDefinition::getDatabaseName() const {
    return m_database_name;
}
void OAIImportExportDatabaseDefinition::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIImportExportDatabaseDefinition::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIImportExportDatabaseDefinition::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIImportExportDatabaseDefinition::getEdition() const {
    return m_edition;
}
void OAIImportExportDatabaseDefinition::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIImportExportDatabaseDefinition::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIImportExportDatabaseDefinition::is_edition_Valid() const{
    return m_edition_isValid;
}

QString OAIImportExportDatabaseDefinition::getMaxSizeBytes() const {
    return m_max_size_bytes;
}
void OAIImportExportDatabaseDefinition::setMaxSizeBytes(const QString &max_size_bytes) {
    m_max_size_bytes = max_size_bytes;
    m_max_size_bytes_isSet = true;
}

bool OAIImportExportDatabaseDefinition::is_max_size_bytes_Set() const{
    return m_max_size_bytes_isSet;
}

bool OAIImportExportDatabaseDefinition::is_max_size_bytes_Valid() const{
    return m_max_size_bytes_isValid;
}

QString OAIImportExportDatabaseDefinition::getServiceObjectiveName() const {
    return m_service_objective_name;
}
void OAIImportExportDatabaseDefinition::setServiceObjectiveName(const QString &service_objective_name) {
    m_service_objective_name = service_objective_name;
    m_service_objective_name_isSet = true;
}

bool OAIImportExportDatabaseDefinition::is_service_objective_name_Set() const{
    return m_service_objective_name_isSet;
}

bool OAIImportExportDatabaseDefinition::is_service_objective_name_Valid() const{
    return m_service_objective_name_isValid;
}

QString OAIImportExportDatabaseDefinition::getStorageKey() const {
    return m_storage_key;
}
void OAIImportExportDatabaseDefinition::setStorageKey(const QString &storage_key) {
    m_storage_key = storage_key;
    m_storage_key_isSet = true;
}

bool OAIImportExportDatabaseDefinition::is_storage_key_Set() const{
    return m_storage_key_isSet;
}

bool OAIImportExportDatabaseDefinition::is_storage_key_Valid() const{
    return m_storage_key_isValid;
}

QString OAIImportExportDatabaseDefinition::getStorageKeyType() const {
    return m_storage_key_type;
}
void OAIImportExportDatabaseDefinition::setStorageKeyType(const QString &storage_key_type) {
    m_storage_key_type = storage_key_type;
    m_storage_key_type_isSet = true;
}

bool OAIImportExportDatabaseDefinition::is_storage_key_type_Set() const{
    return m_storage_key_type_isSet;
}

bool OAIImportExportDatabaseDefinition::is_storage_key_type_Valid() const{
    return m_storage_key_type_isValid;
}

QString OAIImportExportDatabaseDefinition::getStorageUri() const {
    return m_storage_uri;
}
void OAIImportExportDatabaseDefinition::setStorageUri(const QString &storage_uri) {
    m_storage_uri = storage_uri;
    m_storage_uri_isSet = true;
}

bool OAIImportExportDatabaseDefinition::is_storage_uri_Set() const{
    return m_storage_uri_isSet;
}

bool OAIImportExportDatabaseDefinition::is_storage_uri_Valid() const{
    return m_storage_uri_isValid;
}

bool OAIImportExportDatabaseDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_administrator_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_administrator_login_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_objective_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportExportDatabaseDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_administrator_login_isValid && m_administrator_login_password_isValid && m_storage_key_isValid && m_storage_key_type_isValid && m_storage_uri_isValid && true;
}

} // namespace OpenAPI
