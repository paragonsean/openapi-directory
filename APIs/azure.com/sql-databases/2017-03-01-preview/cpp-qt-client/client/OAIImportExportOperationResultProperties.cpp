/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportExportOperationResultProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportExportOperationResultProperties::OAIImportExportOperationResultProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportExportOperationResultProperties::OAIImportExportOperationResultProperties() {
    this->initializeModel();
}

OAIImportExportOperationResultProperties::~OAIImportExportOperationResultProperties() {}

void OAIImportExportOperationResultProperties::initializeModel() {

    m_blob_uri_isSet = false;
    m_blob_uri_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_queued_time_isSet = false;
    m_queued_time_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_request_type_isSet = false;
    m_request_type_isValid = false;

    m_server_name_isSet = false;
    m_server_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIImportExportOperationResultProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportExportOperationResultProperties::fromJsonObject(QJsonObject json) {

    m_blob_uri_isValid = ::OpenAPI::fromJsonValue(m_blob_uri, json[QString("blobUri")]);
    m_blob_uri_isSet = !json[QString("blobUri")].isNull() && m_blob_uri_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_queued_time_isValid = ::OpenAPI::fromJsonValue(m_queued_time, json[QString("queuedTime")]);
    m_queued_time_isSet = !json[QString("queuedTime")].isNull() && m_queued_time_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_request_type_isValid = ::OpenAPI::fromJsonValue(m_request_type, json[QString("requestType")]);
    m_request_type_isSet = !json[QString("requestType")].isNull() && m_request_type_isValid;

    m_server_name_isValid = ::OpenAPI::fromJsonValue(m_server_name, json[QString("serverName")]);
    m_server_name_isSet = !json[QString("serverName")].isNull() && m_server_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIImportExportOperationResultProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportExportOperationResultProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_uri_isSet) {
        obj.insert(QString("blobUri"), ::OpenAPI::toJsonValue(m_blob_uri));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_queued_time_isSet) {
        obj.insert(QString("queuedTime"), ::OpenAPI::toJsonValue(m_queued_time));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_request_type_isSet) {
        obj.insert(QString("requestType"), ::OpenAPI::toJsonValue(m_request_type));
    }
    if (m_server_name_isSet) {
        obj.insert(QString("serverName"), ::OpenAPI::toJsonValue(m_server_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIImportExportOperationResultProperties::getBlobUri() const {
    return m_blob_uri;
}
void OAIImportExportOperationResultProperties::setBlobUri(const QString &blob_uri) {
    m_blob_uri = blob_uri;
    m_blob_uri_isSet = true;
}

bool OAIImportExportOperationResultProperties::is_blob_uri_Set() const{
    return m_blob_uri_isSet;
}

bool OAIImportExportOperationResultProperties::is_blob_uri_Valid() const{
    return m_blob_uri_isValid;
}

QString OAIImportExportOperationResultProperties::getDatabaseName() const {
    return m_database_name;
}
void OAIImportExportOperationResultProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIImportExportOperationResultProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIImportExportOperationResultProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIImportExportOperationResultProperties::getErrorMessage() const {
    return m_error_message;
}
void OAIImportExportOperationResultProperties::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIImportExportOperationResultProperties::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIImportExportOperationResultProperties::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIImportExportOperationResultProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIImportExportOperationResultProperties::setLastModifiedTime(const QString &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIImportExportOperationResultProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIImportExportOperationResultProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIImportExportOperationResultProperties::getQueuedTime() const {
    return m_queued_time;
}
void OAIImportExportOperationResultProperties::setQueuedTime(const QString &queued_time) {
    m_queued_time = queued_time;
    m_queued_time_isSet = true;
}

bool OAIImportExportOperationResultProperties::is_queued_time_Set() const{
    return m_queued_time_isSet;
}

bool OAIImportExportOperationResultProperties::is_queued_time_Valid() const{
    return m_queued_time_isValid;
}

QString OAIImportExportOperationResultProperties::getRequestId() const {
    return m_request_id;
}
void OAIImportExportOperationResultProperties::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIImportExportOperationResultProperties::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIImportExportOperationResultProperties::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIImportExportOperationResultProperties::getRequestType() const {
    return m_request_type;
}
void OAIImportExportOperationResultProperties::setRequestType(const QString &request_type) {
    m_request_type = request_type;
    m_request_type_isSet = true;
}

bool OAIImportExportOperationResultProperties::is_request_type_Set() const{
    return m_request_type_isSet;
}

bool OAIImportExportOperationResultProperties::is_request_type_Valid() const{
    return m_request_type_isValid;
}

QString OAIImportExportOperationResultProperties::getServerName() const {
    return m_server_name;
}
void OAIImportExportOperationResultProperties::setServerName(const QString &server_name) {
    m_server_name = server_name;
    m_server_name_isSet = true;
}

bool OAIImportExportOperationResultProperties::is_server_name_Set() const{
    return m_server_name_isSet;
}

bool OAIImportExportOperationResultProperties::is_server_name_Valid() const{
    return m_server_name_isValid;
}

QString OAIImportExportOperationResultProperties::getStatus() const {
    return m_status;
}
void OAIImportExportOperationResultProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIImportExportOperationResultProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIImportExportOperationResultProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIImportExportOperationResultProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queued_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportExportOperationResultProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
