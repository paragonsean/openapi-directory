/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.DatabasesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DatabasesApi', function() {
    describe('databasesCreateOrUpdate', function() {
      it('should call databasesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test databasesCreateOrUpdate
        //instance.databasesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesDelete', function() {
      it('should call databasesDelete successfully', function(done) {
        //uncomment below and update the code to test databasesDelete
        //instance.databasesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesFailover', function() {
      it('should call databasesFailover successfully', function(done) {
        //uncomment below and update the code to test databasesFailover
        //instance.databasesFailover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesGet', function() {
      it('should call databasesGet successfully', function(done) {
        //uncomment below and update the code to test databasesGet
        //instance.databasesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesListByElasticPool', function() {
      it('should call databasesListByElasticPool successfully', function(done) {
        //uncomment below and update the code to test databasesListByElasticPool
        //instance.databasesListByElasticPool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesListByServer', function() {
      it('should call databasesListByServer successfully', function(done) {
        //uncomment below and update the code to test databasesListByServer
        //instance.databasesListByServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesListInaccessibleByServer', function() {
      it('should call databasesListInaccessibleByServer successfully', function(done) {
        //uncomment below and update the code to test databasesListInaccessibleByServer
        //instance.databasesListInaccessibleByServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesPause', function() {
      it('should call databasesPause successfully', function(done) {
        //uncomment below and update the code to test databasesPause
        //instance.databasesPause(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesRename', function() {
      it('should call databasesRename successfully', function(done) {
        //uncomment below and update the code to test databasesRename
        //instance.databasesRename(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesResume', function() {
      it('should call databasesResume successfully', function(done) {
        //uncomment below and update the code to test databasesResume
        //instance.databasesResume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesUpdate', function() {
      it('should call databasesUpdate successfully', function(done) {
        //uncomment below and update the code to test databasesUpdate
        //instance.databasesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('databasesUpgradeDataWarehouse', function() {
      it('should call databasesUpgradeDataWarehouse successfully', function(done) {
        //uncomment below and update the code to test databasesUpgradeDataWarehouse
        //instance.databasesUpgradeDataWarehouse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
