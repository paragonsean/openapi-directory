/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.DatabaseProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DatabaseProperties', function() {
    it('should create an instance of DatabaseProperties', function() {
      // uncomment below and update the code to test DatabaseProperties
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be.a(SqlManagementClient.DatabaseProperties);
    });

    it('should have the property autoPauseDelay (base name: "autoPauseDelay")', function() {
      // uncomment below and update the code to test the property autoPauseDelay
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property catalogCollation (base name: "catalogCollation")', function() {
      // uncomment below and update the code to test the property catalogCollation
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property collation (base name: "collation")', function() {
      // uncomment below and update the code to test the property collation
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property createMode (base name: "createMode")', function() {
      // uncomment below and update the code to test the property createMode
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "creationDate")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property currentServiceObjectiveName (base name: "currentServiceObjectiveName")', function() {
      // uncomment below and update the code to test the property currentServiceObjectiveName
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property currentSku (base name: "currentSku")', function() {
      // uncomment below and update the code to test the property currentSku
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property databaseId (base name: "databaseId")', function() {
      // uncomment below and update the code to test the property databaseId
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property defaultSecondaryLocation (base name: "defaultSecondaryLocation")', function() {
      // uncomment below and update the code to test the property defaultSecondaryLocation
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property earliestRestoreDate (base name: "earliestRestoreDate")', function() {
      // uncomment below and update the code to test the property earliestRestoreDate
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property elasticPoolId (base name: "elasticPoolId")', function() {
      // uncomment below and update the code to test the property elasticPoolId
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property failoverGroupId (base name: "failoverGroupId")', function() {
      // uncomment below and update the code to test the property failoverGroupId
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property licenseType (base name: "licenseType")', function() {
      // uncomment below and update the code to test the property licenseType
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property longTermRetentionBackupResourceId (base name: "longTermRetentionBackupResourceId")', function() {
      // uncomment below and update the code to test the property longTermRetentionBackupResourceId
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxLogSizeBytes (base name: "maxLogSizeBytes")', function() {
      // uncomment below and update the code to test the property maxLogSizeBytes
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxSizeBytes (base name: "maxSizeBytes")', function() {
      // uncomment below and update the code to test the property maxSizeBytes
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property minCapacity (base name: "minCapacity")', function() {
      // uncomment below and update the code to test the property minCapacity
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property pausedDate (base name: "pausedDate")', function() {
      // uncomment below and update the code to test the property pausedDate
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property readReplicaCount (base name: "readReplicaCount")', function() {
      // uncomment below and update the code to test the property readReplicaCount
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property readScale (base name: "readScale")', function() {
      // uncomment below and update the code to test the property readScale
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property recoverableDatabaseId (base name: "recoverableDatabaseId")', function() {
      // uncomment below and update the code to test the property recoverableDatabaseId
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property recoveryServicesRecoveryPointId (base name: "recoveryServicesRecoveryPointId")', function() {
      // uncomment below and update the code to test the property recoveryServicesRecoveryPointId
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property requestedServiceObjectiveName (base name: "requestedServiceObjectiveName")', function() {
      // uncomment below and update the code to test the property requestedServiceObjectiveName
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property restorableDroppedDatabaseId (base name: "restorableDroppedDatabaseId")', function() {
      // uncomment below and update the code to test the property restorableDroppedDatabaseId
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property restorePointInTime (base name: "restorePointInTime")', function() {
      // uncomment below and update the code to test the property restorePointInTime
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property resumedDate (base name: "resumedDate")', function() {
      // uncomment below and update the code to test the property resumedDate
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property sampleName (base name: "sampleName")', function() {
      // uncomment below and update the code to test the property sampleName
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property sourceDatabaseDeletionDate (base name: "sourceDatabaseDeletionDate")', function() {
      // uncomment below and update the code to test the property sourceDatabaseDeletionDate
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property sourceDatabaseId (base name: "sourceDatabaseId")', function() {
      // uncomment below and update the code to test the property sourceDatabaseId
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property storageAccountType (base name: "storageAccountType")', function() {
      // uncomment below and update the code to test the property storageAccountType
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property zoneRedundant (base name: "zoneRedundant")', function() {
      // uncomment below and update the code to test the property zoneRedundant
      //var instance = new SqlManagementClient.DatabaseProperties();
      //expect(instance).to.be();
    });

  });

}));
