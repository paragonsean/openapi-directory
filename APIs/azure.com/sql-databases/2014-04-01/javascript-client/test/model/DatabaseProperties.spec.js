/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AzureSqlDatabase);
  }
}(this, function(expect, AzureSqlDatabase) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AzureSqlDatabase.DatabaseProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DatabaseProperties', function() {
    it('should create an instance of DatabaseProperties', function() {
      // uncomment below and update the code to test DatabaseProperties
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be.a(AzureSqlDatabase.DatabaseProperties);
    });

    it('should have the property collation (base name: "collation")', function() {
      // uncomment below and update the code to test the property collation
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property containmentState (base name: "containmentState")', function() {
      // uncomment below and update the code to test the property containmentState
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property createMode (base name: "createMode")', function() {
      // uncomment below and update the code to test the property createMode
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "creationDate")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property currentServiceObjectiveId (base name: "currentServiceObjectiveId")', function() {
      // uncomment below and update the code to test the property currentServiceObjectiveId
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property databaseId (base name: "databaseId")', function() {
      // uncomment below and update the code to test the property databaseId
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property defaultSecondaryLocation (base name: "defaultSecondaryLocation")', function() {
      // uncomment below and update the code to test the property defaultSecondaryLocation
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property earliestRestoreDate (base name: "earliestRestoreDate")', function() {
      // uncomment below and update the code to test the property earliestRestoreDate
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property edition (base name: "edition")', function() {
      // uncomment below and update the code to test the property edition
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property elasticPoolName (base name: "elasticPoolName")', function() {
      // uncomment below and update the code to test the property elasticPoolName
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property failoverGroupId (base name: "failoverGroupId")', function() {
      // uncomment below and update the code to test the property failoverGroupId
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxSizeBytes (base name: "maxSizeBytes")', function() {
      // uncomment below and update the code to test the property maxSizeBytes
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property readScale (base name: "readScale")', function() {
      // uncomment below and update the code to test the property readScale
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property recommendedIndex (base name: "recommendedIndex")', function() {
      // uncomment below and update the code to test the property recommendedIndex
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property recoveryServicesRecoveryPointResourceId (base name: "recoveryServicesRecoveryPointResourceId")', function() {
      // uncomment below and update the code to test the property recoveryServicesRecoveryPointResourceId
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property requestedServiceObjectiveId (base name: "requestedServiceObjectiveId")', function() {
      // uncomment below and update the code to test the property requestedServiceObjectiveId
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property requestedServiceObjectiveName (base name: "requestedServiceObjectiveName")', function() {
      // uncomment below and update the code to test the property requestedServiceObjectiveName
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property restorePointInTime (base name: "restorePointInTime")', function() {
      // uncomment below and update the code to test the property restorePointInTime
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property sampleName (base name: "sampleName")', function() {
      // uncomment below and update the code to test the property sampleName
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property serviceLevelObjective (base name: "serviceLevelObjective")', function() {
      // uncomment below and update the code to test the property serviceLevelObjective
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property serviceTierAdvisors (base name: "serviceTierAdvisors")', function() {
      // uncomment below and update the code to test the property serviceTierAdvisors
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property sourceDatabaseDeletionDate (base name: "sourceDatabaseDeletionDate")', function() {
      // uncomment below and update the code to test the property sourceDatabaseDeletionDate
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property sourceDatabaseId (base name: "sourceDatabaseId")', function() {
      // uncomment below and update the code to test the property sourceDatabaseId
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property transparentDataEncryption (base name: "transparentDataEncryption")', function() {
      // uncomment below and update the code to test the property transparentDataEncryption
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

    it('should have the property zoneRedundant (base name: "zoneRedundant")', function() {
      // uncomment below and update the code to test the property zoneRedundant
      //var instance = new AzureSqlDatabase.DatabaseProperties();
      //expect(instance).to.be();
    });

  });

}));
