/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner from './DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner';

/**
 * The DatabasePropertiesRecommendedIndexInnerProperties model module.
 * @module model/DatabasePropertiesRecommendedIndexInnerProperties
 * @version 2014-04-01
 */
class DatabasePropertiesRecommendedIndexInnerProperties {
    /**
     * Constructs a new <code>DatabasePropertiesRecommendedIndexInnerProperties</code>.
     * Represents the properties of a database recommended index.
     * @alias module:model/DatabasePropertiesRecommendedIndexInnerProperties
     */
    constructor() { 
        
        DatabasePropertiesRecommendedIndexInnerProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabasePropertiesRecommendedIndexInnerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabasePropertiesRecommendedIndexInnerProperties} obj Optional instance to populate.
     * @return {module:model/DatabasePropertiesRecommendedIndexInnerProperties} The populated <code>DatabasePropertiesRecommendedIndexInnerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabasePropertiesRecommendedIndexInnerProperties();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], ['String']);
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('estimatedImpact')) {
                obj['estimatedImpact'] = ApiClient.convertToType(data['estimatedImpact'], [DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner]);
            }
            if (data.hasOwnProperty('includedColumns')) {
                obj['includedColumns'] = ApiClient.convertToType(data['includedColumns'], ['String']);
            }
            if (data.hasOwnProperty('indexScript')) {
                obj['indexScript'] = ApiClient.convertToType(data['indexScript'], 'String');
            }
            if (data.hasOwnProperty('indexType')) {
                obj['indexType'] = ApiClient.convertToType(data['indexType'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('reportedImpact')) {
                obj['reportedImpact'] = ApiClient.convertToType(data['reportedImpact'], [DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner]);
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = ApiClient.convertToType(data['table'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabasePropertiesRecommendedIndexInnerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabasePropertiesRecommendedIndexInnerProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['columns'])) {
            throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
        }
        if (data['estimatedImpact']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['estimatedImpact'])) {
                throw new Error("Expected the field `estimatedImpact` to be an array in the JSON data but got " + data['estimatedImpact']);
            }
            // validate the optional field `estimatedImpact` (array)
            for (const item of data['estimatedImpact']) {
                DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedColumns'])) {
            throw new Error("Expected the field `includedColumns` to be an array in the JSON data but got " + data['includedColumns']);
        }
        // ensure the json data is a string
        if (data['indexScript'] && !(typeof data['indexScript'] === 'string' || data['indexScript'] instanceof String)) {
            throw new Error("Expected the field `indexScript` to be a primitive type in the JSON string but got " + data['indexScript']);
        }
        // ensure the json data is a string
        if (data['indexType'] && !(typeof data['indexType'] === 'string' || data['indexType'] instanceof String)) {
            throw new Error("Expected the field `indexType` to be a primitive type in the JSON string but got " + data['indexType']);
        }
        if (data['reportedImpact']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reportedImpact'])) {
                throw new Error("Expected the field `reportedImpact` to be an array in the JSON data but got " + data['reportedImpact']);
            }
            // validate the optional field `reportedImpact` (array)
            for (const item of data['reportedImpact']) {
                DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['schema'] && !(typeof data['schema'] === 'string' || data['schema'] instanceof String)) {
            throw new Error("Expected the field `schema` to be a primitive type in the JSON string but got " + data['schema']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['table'] && !(typeof data['table'] === 'string' || data['table'] instanceof String)) {
            throw new Error("Expected the field `table` to be a primitive type in the JSON string but got " + data['table']);
        }

        return true;
    }


}



/**
 * The proposed index action. You can create a missing index, drop an unused index, or rebuild an existing index to improve its performance.
 * @member {module:model/DatabasePropertiesRecommendedIndexInnerProperties.ActionEnum} action
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['action'] = undefined;

/**
 * Columns over which to build index
 * @member {Array.<String>} columns
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['columns'] = undefined;

/**
 * The UTC datetime showing when this resource was created (ISO8601 format).
 * @member {Date} created
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['created'] = undefined;

/**
 * The estimated impact of doing recommended index action.
 * @member {Array.<module:model/DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner>} estimatedImpact
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['estimatedImpact'] = undefined;

/**
 * The list of column names to be included in the index
 * @member {Array.<String>} includedColumns
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['includedColumns'] = undefined;

/**
 * The full build index script
 * @member {String} indexScript
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['indexScript'] = undefined;

/**
 * The type of index (CLUSTERED, NONCLUSTERED, COLUMNSTORE, CLUSTERED COLUMNSTORE)
 * @member {module:model/DatabasePropertiesRecommendedIndexInnerProperties.IndexTypeEnum} indexType
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['indexType'] = undefined;

/**
 * The UTC datetime of when was this resource last changed (ISO8601 format).
 * @member {Date} lastModified
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['lastModified'] = undefined;

/**
 * The values reported after index action is complete.
 * @member {Array.<module:model/DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner>} reportedImpact
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['reportedImpact'] = undefined;

/**
 * The schema where table to build index over resides
 * @member {String} schema
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['schema'] = undefined;

/**
 * The current recommendation state.
 * @member {module:model/DatabasePropertiesRecommendedIndexInnerProperties.StateEnum} state
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['state'] = undefined;

/**
 * The table on which to build index.
 * @member {String} table
 */
DatabasePropertiesRecommendedIndexInnerProperties.prototype['table'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
DatabasePropertiesRecommendedIndexInnerProperties['ActionEnum'] = {

    /**
     * value: "Create"
     * @const
     */
    "Create": "Create",

    /**
     * value: "Drop"
     * @const
     */
    "Drop": "Drop",

    /**
     * value: "Rebuild"
     * @const
     */
    "Rebuild": "Rebuild"
};


/**
 * Allowed values for the <code>indexType</code> property.
 * @enum {String}
 * @readonly
 */
DatabasePropertiesRecommendedIndexInnerProperties['IndexTypeEnum'] = {

    /**
     * value: "CLUSTERED"
     * @const
     */
    "CLUSTERED": "CLUSTERED",

    /**
     * value: "NONCLUSTERED"
     * @const
     */
    "NONCLUSTERED": "NONCLUSTERED",

    /**
     * value: "COLUMNSTORE"
     * @const
     */
    "COLUMNSTORE": "COLUMNSTORE",

    /**
     * value: "CLUSTERED COLUMNSTORE"
     * @const
     */
    "CLUSTERED COLUMNSTORE": "CLUSTERED COLUMNSTORE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DatabasePropertiesRecommendedIndexInnerProperties['StateEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Executing"
     * @const
     */
    "Executing": "Executing",

    /**
     * value: "Verifying"
     * @const
     */
    "Verifying": "Verifying",

    /**
     * value: "Pending Revert"
     * @const
     */
    "Pending Revert": "Pending Revert",

    /**
     * value: "Reverting"
     * @const
     */
    "Reverting": "Reverting",

    /**
     * value: "Reverted"
     * @const
     */
    "Reverted": "Reverted",

    /**
     * value: "Ignored"
     * @const
     */
    "Ignored": "Ignored",

    /**
     * value: "Expired"
     * @const
     */
    "Expired": "Expired",

    /**
     * value: "Blocked"
     * @const
     */
    "Blocked": "Blocked",

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success"
};



export default DatabasePropertiesRecommendedIndexInnerProperties;

