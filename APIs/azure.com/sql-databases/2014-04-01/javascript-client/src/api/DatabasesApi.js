/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Database from '../model/Database';
import DatabaseListResult from '../model/DatabaseListResult';
import DatabaseUpdate from '../model/DatabaseUpdate';

/**
* Databases service.
* @module api/DatabasesApi
* @version 2014-04-01
*/
export default class DatabasesApi {

    /**
    * Constructs a new DatabasesApi. 
    * @alias module:api/DatabasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the databasesCreateOrUpdate operation.
     * @callback module:api/DatabasesApi~databasesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Database} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new database or updates an existing database.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database to be operated on (updated or created).
     * @param {module:model/Database} parameters The required parameters for creating or updating a database.
     * @param {module:api/DatabasesApi~databasesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Database}
     */
    databasesCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databasesCreateOrUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling databasesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesDelete operation.
     * @callback module:api/DatabasesApi~databasesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a database.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database to be deleted.
     * @param {module:api/DatabasesApi~databasesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databasesDelete(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesDelete");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databasesDelete");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesGet operation.
     * @callback module:api/DatabasesApi~databasesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Database} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a database.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database to be retrieved.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] A comma separated list of child objects to expand in the response. Possible properties: serviceTierAdvisors, transparentDataEncryption.
     * @param {module:api/DatabasesApi~databasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Database}
     */
    databasesGet(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databasesGet");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesGetByRecommendedElasticPool operation.
     * @callback module:api/DatabasesApi~databasesGetByRecommendedElasticPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Database} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a database inside of a recommended elastic pool.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} recommendedElasticPoolName The name of the elastic pool to be retrieved.
     * @param {String} databaseName The name of the database to be retrieved.
     * @param {module:api/DatabasesApi~databasesGetByRecommendedElasticPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Database}
     */
    databasesGetByRecommendedElasticPool(apiVersion, subscriptionId, resourceGroupName, serverName, recommendedElasticPoolName, databaseName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesGetByRecommendedElasticPool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesGetByRecommendedElasticPool");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesGetByRecommendedElasticPool");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databasesGetByRecommendedElasticPool");
      }
      // verify the required parameter 'recommendedElasticPoolName' is set
      if (recommendedElasticPoolName === undefined || recommendedElasticPoolName === null) {
        throw new Error("Missing the required parameter 'recommendedElasticPoolName' when calling databasesGetByRecommendedElasticPool");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesGetByRecommendedElasticPool");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'recommendedElasticPoolName': recommendedElasticPoolName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools/{recommendedElasticPoolName}/databases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesListByElasticPool operation.
     * @callback module:api/DatabasesApi~databasesListByElasticPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of databases in an elastic pool.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} elasticPoolName The name of the elastic pool to be retrieved.
     * @param {module:api/DatabasesApi~databasesListByElasticPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseListResult}
     */
    databasesListByElasticPool(apiVersion, subscriptionId, resourceGroupName, serverName, elasticPoolName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesListByElasticPool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesListByElasticPool");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesListByElasticPool");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databasesListByElasticPool");
      }
      // verify the required parameter 'elasticPoolName' is set
      if (elasticPoolName === undefined || elasticPoolName === null) {
        throw new Error("Missing the required parameter 'elasticPoolName' when calling databasesListByElasticPool");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'elasticPoolName': elasticPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesListByRecommendedElasticPool operation.
     * @callback module:api/DatabasesApi~databasesListByRecommendedElasticPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of databases inside a recommended elastic pool.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} recommendedElasticPoolName The name of the recommended elastic pool to be retrieved.
     * @param {module:api/DatabasesApi~databasesListByRecommendedElasticPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseListResult}
     */
    databasesListByRecommendedElasticPool(apiVersion, subscriptionId, resourceGroupName, serverName, recommendedElasticPoolName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesListByRecommendedElasticPool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesListByRecommendedElasticPool");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesListByRecommendedElasticPool");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databasesListByRecommendedElasticPool");
      }
      // verify the required parameter 'recommendedElasticPoolName' is set
      if (recommendedElasticPoolName === undefined || recommendedElasticPoolName === null) {
        throw new Error("Missing the required parameter 'recommendedElasticPoolName' when calling databasesListByRecommendedElasticPool");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'recommendedElasticPoolName': recommendedElasticPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recommendedElasticPools/{recommendedElasticPoolName}/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesListByServer operation.
     * @callback module:api/DatabasesApi~databasesListByServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DatabaseListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of databases in a server.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] A comma separated list of child objects to expand in the response. Possible properties: serviceTierAdvisors, transparentDataEncryption.
     * @param {String} [filter] An OData filter expression that describes a subset of databases to return.
     * @param {module:api/DatabasesApi~databasesListByServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DatabaseListResult}
     */
    databasesListByServer(apiVersion, subscriptionId, resourceGroupName, serverName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesListByServer");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesListByServer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesListByServer");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databasesListByServer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DatabaseListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databasesUpdate operation.
     * @callback module:api/DatabasesApi~databasesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Database} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing database.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} databaseName The name of the database to be updated.
     * @param {module:model/DatabaseUpdate} parameters The required parameters for updating a database.
     * @param {module:api/DatabasesApi~databasesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Database}
     */
    databasesUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling databasesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling databasesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling databasesUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling databasesUpdate");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling databasesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling databasesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'databaseName': databaseName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Database;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
