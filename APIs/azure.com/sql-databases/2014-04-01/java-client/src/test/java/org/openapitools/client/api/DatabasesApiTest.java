/*
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Database;
import org.openapitools.client.model.DatabaseListResult;
import org.openapitools.client.model.DatabaseUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatabasesApi
 */
@Disabled
public class DatabasesApiTest {

    private final DatabasesApi api = new DatabasesApi();

    /**
     * Creates a new database or updates an existing database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesCreateOrUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        Database parameters = null;
        Database response = api.databasesCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        api.databasesDelete(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName);
        // TODO: test validations
    }

    /**
     * Gets a database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        String $expand = null;
        Database response = api.databasesGet(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, $expand);
        // TODO: test validations
    }

    /**
     * Gets a database inside of a recommended elastic pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesGetByRecommendedElasticPoolTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String recommendedElasticPoolName = null;
        String databaseName = null;
        Database response = api.databasesGetByRecommendedElasticPool(apiVersion, subscriptionId, resourceGroupName, serverName, recommendedElasticPoolName, databaseName);
        // TODO: test validations
    }

    /**
     * Returns a list of databases in an elastic pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesListByElasticPoolTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String elasticPoolName = null;
        DatabaseListResult response = api.databasesListByElasticPool(apiVersion, subscriptionId, resourceGroupName, serverName, elasticPoolName);
        // TODO: test validations
    }

    /**
     * Returns a list of databases inside a recommended elastic pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesListByRecommendedElasticPoolTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String recommendedElasticPoolName = null;
        DatabaseListResult response = api.databasesListByRecommendedElasticPool(apiVersion, subscriptionId, resourceGroupName, serverName, recommendedElasticPoolName);
        // TODO: test validations
    }

    /**
     * Returns a list of databases in a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesListByServerTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String $expand = null;
        String $filter = null;
        DatabaseListResult response = api.databasesListByServer(apiVersion, subscriptionId, resourceGroupName, serverName, $expand, $filter);
        // TODO: test validations
    }

    /**
     * Updates an existing database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databasesUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String serverName = null;
        String databaseName = null;
        DatabaseUpdate parameters = null;
        Database response = api.databasesUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, databaseName, parameters);
        // TODO: test validations
    }

}
