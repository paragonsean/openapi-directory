/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseProperties::OAIDatabaseProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseProperties::OAIDatabaseProperties() {
    this->initializeModel();
}

OAIDatabaseProperties::~OAIDatabaseProperties() {}

void OAIDatabaseProperties::initializeModel() {

    m_collation_isSet = false;
    m_collation_isValid = false;

    m_containment_state_isSet = false;
    m_containment_state_isValid = false;

    m_create_mode_isSet = false;
    m_create_mode_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_current_service_objective_id_isSet = false;
    m_current_service_objective_id_isValid = false;

    m_database_id_isSet = false;
    m_database_id_isValid = false;

    m_default_secondary_location_isSet = false;
    m_default_secondary_location_isValid = false;

    m_earliest_restore_date_isSet = false;
    m_earliest_restore_date_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_elastic_pool_name_isSet = false;
    m_elastic_pool_name_isValid = false;

    m_failover_group_id_isSet = false;
    m_failover_group_id_isValid = false;

    m_max_size_bytes_isSet = false;
    m_max_size_bytes_isValid = false;

    m_read_scale_isSet = false;
    m_read_scale_isValid = false;

    m_recommended_index_isSet = false;
    m_recommended_index_isValid = false;

    m_recovery_services_recovery_point_resource_id_isSet = false;
    m_recovery_services_recovery_point_resource_id_isValid = false;

    m_requested_service_objective_id_isSet = false;
    m_requested_service_objective_id_isValid = false;

    m_requested_service_objective_name_isSet = false;
    m_requested_service_objective_name_isValid = false;

    m_restore_point_in_time_isSet = false;
    m_restore_point_in_time_isValid = false;

    m_sample_name_isSet = false;
    m_sample_name_isValid = false;

    m_service_level_objective_isSet = false;
    m_service_level_objective_isValid = false;

    m_service_tier_advisors_isSet = false;
    m_service_tier_advisors_isValid = false;

    m_source_database_deletion_date_isSet = false;
    m_source_database_deletion_date_isValid = false;

    m_source_database_id_isSet = false;
    m_source_database_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transparent_data_encryption_isSet = false;
    m_transparent_data_encryption_isValid = false;

    m_zone_redundant_isSet = false;
    m_zone_redundant_isValid = false;
}

void OAIDatabaseProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseProperties::fromJsonObject(QJsonObject json) {

    m_collation_isValid = ::OpenAPI::fromJsonValue(m_collation, json[QString("collation")]);
    m_collation_isSet = !json[QString("collation")].isNull() && m_collation_isValid;

    m_containment_state_isValid = ::OpenAPI::fromJsonValue(m_containment_state, json[QString("containmentState")]);
    m_containment_state_isSet = !json[QString("containmentState")].isNull() && m_containment_state_isValid;

    m_create_mode_isValid = ::OpenAPI::fromJsonValue(m_create_mode, json[QString("createMode")]);
    m_create_mode_isSet = !json[QString("createMode")].isNull() && m_create_mode_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_current_service_objective_id_isValid = ::OpenAPI::fromJsonValue(m_current_service_objective_id, json[QString("currentServiceObjectiveId")]);
    m_current_service_objective_id_isSet = !json[QString("currentServiceObjectiveId")].isNull() && m_current_service_objective_id_isValid;

    m_database_id_isValid = ::OpenAPI::fromJsonValue(m_database_id, json[QString("databaseId")]);
    m_database_id_isSet = !json[QString("databaseId")].isNull() && m_database_id_isValid;

    m_default_secondary_location_isValid = ::OpenAPI::fromJsonValue(m_default_secondary_location, json[QString("defaultSecondaryLocation")]);
    m_default_secondary_location_isSet = !json[QString("defaultSecondaryLocation")].isNull() && m_default_secondary_location_isValid;

    m_earliest_restore_date_isValid = ::OpenAPI::fromJsonValue(m_earliest_restore_date, json[QString("earliestRestoreDate")]);
    m_earliest_restore_date_isSet = !json[QString("earliestRestoreDate")].isNull() && m_earliest_restore_date_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_elastic_pool_name_isValid = ::OpenAPI::fromJsonValue(m_elastic_pool_name, json[QString("elasticPoolName")]);
    m_elastic_pool_name_isSet = !json[QString("elasticPoolName")].isNull() && m_elastic_pool_name_isValid;

    m_failover_group_id_isValid = ::OpenAPI::fromJsonValue(m_failover_group_id, json[QString("failoverGroupId")]);
    m_failover_group_id_isSet = !json[QString("failoverGroupId")].isNull() && m_failover_group_id_isValid;

    m_max_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_size_bytes, json[QString("maxSizeBytes")]);
    m_max_size_bytes_isSet = !json[QString("maxSizeBytes")].isNull() && m_max_size_bytes_isValid;

    m_read_scale_isValid = ::OpenAPI::fromJsonValue(m_read_scale, json[QString("readScale")]);
    m_read_scale_isSet = !json[QString("readScale")].isNull() && m_read_scale_isValid;

    m_recommended_index_isValid = ::OpenAPI::fromJsonValue(m_recommended_index, json[QString("recommendedIndex")]);
    m_recommended_index_isSet = !json[QString("recommendedIndex")].isNull() && m_recommended_index_isValid;

    m_recovery_services_recovery_point_resource_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_services_recovery_point_resource_id, json[QString("recoveryServicesRecoveryPointResourceId")]);
    m_recovery_services_recovery_point_resource_id_isSet = !json[QString("recoveryServicesRecoveryPointResourceId")].isNull() && m_recovery_services_recovery_point_resource_id_isValid;

    m_requested_service_objective_id_isValid = ::OpenAPI::fromJsonValue(m_requested_service_objective_id, json[QString("requestedServiceObjectiveId")]);
    m_requested_service_objective_id_isSet = !json[QString("requestedServiceObjectiveId")].isNull() && m_requested_service_objective_id_isValid;

    m_requested_service_objective_name_isValid = ::OpenAPI::fromJsonValue(m_requested_service_objective_name, json[QString("requestedServiceObjectiveName")]);
    m_requested_service_objective_name_isSet = !json[QString("requestedServiceObjectiveName")].isNull() && m_requested_service_objective_name_isValid;

    m_restore_point_in_time_isValid = ::OpenAPI::fromJsonValue(m_restore_point_in_time, json[QString("restorePointInTime")]);
    m_restore_point_in_time_isSet = !json[QString("restorePointInTime")].isNull() && m_restore_point_in_time_isValid;

    m_sample_name_isValid = ::OpenAPI::fromJsonValue(m_sample_name, json[QString("sampleName")]);
    m_sample_name_isSet = !json[QString("sampleName")].isNull() && m_sample_name_isValid;

    m_service_level_objective_isValid = ::OpenAPI::fromJsonValue(m_service_level_objective, json[QString("serviceLevelObjective")]);
    m_service_level_objective_isSet = !json[QString("serviceLevelObjective")].isNull() && m_service_level_objective_isValid;

    m_service_tier_advisors_isValid = ::OpenAPI::fromJsonValue(m_service_tier_advisors, json[QString("serviceTierAdvisors")]);
    m_service_tier_advisors_isSet = !json[QString("serviceTierAdvisors")].isNull() && m_service_tier_advisors_isValid;

    m_source_database_deletion_date_isValid = ::OpenAPI::fromJsonValue(m_source_database_deletion_date, json[QString("sourceDatabaseDeletionDate")]);
    m_source_database_deletion_date_isSet = !json[QString("sourceDatabaseDeletionDate")].isNull() && m_source_database_deletion_date_isValid;

    m_source_database_id_isValid = ::OpenAPI::fromJsonValue(m_source_database_id, json[QString("sourceDatabaseId")]);
    m_source_database_id_isSet = !json[QString("sourceDatabaseId")].isNull() && m_source_database_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transparent_data_encryption_isValid = ::OpenAPI::fromJsonValue(m_transparent_data_encryption, json[QString("transparentDataEncryption")]);
    m_transparent_data_encryption_isSet = !json[QString("transparentDataEncryption")].isNull() && m_transparent_data_encryption_isValid;

    m_zone_redundant_isValid = ::OpenAPI::fromJsonValue(m_zone_redundant, json[QString("zoneRedundant")]);
    m_zone_redundant_isSet = !json[QString("zoneRedundant")].isNull() && m_zone_redundant_isValid;
}

QString OAIDatabaseProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_collation_isSet) {
        obj.insert(QString("collation"), ::OpenAPI::toJsonValue(m_collation));
    }
    if (m_containment_state_isSet) {
        obj.insert(QString("containmentState"), ::OpenAPI::toJsonValue(m_containment_state));
    }
    if (m_create_mode_isSet) {
        obj.insert(QString("createMode"), ::OpenAPI::toJsonValue(m_create_mode));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_current_service_objective_id_isSet) {
        obj.insert(QString("currentServiceObjectiveId"), ::OpenAPI::toJsonValue(m_current_service_objective_id));
    }
    if (m_database_id_isSet) {
        obj.insert(QString("databaseId"), ::OpenAPI::toJsonValue(m_database_id));
    }
    if (m_default_secondary_location_isSet) {
        obj.insert(QString("defaultSecondaryLocation"), ::OpenAPI::toJsonValue(m_default_secondary_location));
    }
    if (m_earliest_restore_date_isSet) {
        obj.insert(QString("earliestRestoreDate"), ::OpenAPI::toJsonValue(m_earliest_restore_date));
    }
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_elastic_pool_name_isSet) {
        obj.insert(QString("elasticPoolName"), ::OpenAPI::toJsonValue(m_elastic_pool_name));
    }
    if (m_failover_group_id_isSet) {
        obj.insert(QString("failoverGroupId"), ::OpenAPI::toJsonValue(m_failover_group_id));
    }
    if (m_max_size_bytes_isSet) {
        obj.insert(QString("maxSizeBytes"), ::OpenAPI::toJsonValue(m_max_size_bytes));
    }
    if (m_read_scale_isSet) {
        obj.insert(QString("readScale"), ::OpenAPI::toJsonValue(m_read_scale));
    }
    if (m_recommended_index.size() > 0) {
        obj.insert(QString("recommendedIndex"), ::OpenAPI::toJsonValue(m_recommended_index));
    }
    if (m_recovery_services_recovery_point_resource_id_isSet) {
        obj.insert(QString("recoveryServicesRecoveryPointResourceId"), ::OpenAPI::toJsonValue(m_recovery_services_recovery_point_resource_id));
    }
    if (m_requested_service_objective_id_isSet) {
        obj.insert(QString("requestedServiceObjectiveId"), ::OpenAPI::toJsonValue(m_requested_service_objective_id));
    }
    if (m_requested_service_objective_name_isSet) {
        obj.insert(QString("requestedServiceObjectiveName"), ::OpenAPI::toJsonValue(m_requested_service_objective_name));
    }
    if (m_restore_point_in_time_isSet) {
        obj.insert(QString("restorePointInTime"), ::OpenAPI::toJsonValue(m_restore_point_in_time));
    }
    if (m_sample_name_isSet) {
        obj.insert(QString("sampleName"), ::OpenAPI::toJsonValue(m_sample_name));
    }
    if (m_service_level_objective_isSet) {
        obj.insert(QString("serviceLevelObjective"), ::OpenAPI::toJsonValue(m_service_level_objective));
    }
    if (m_service_tier_advisors.size() > 0) {
        obj.insert(QString("serviceTierAdvisors"), ::OpenAPI::toJsonValue(m_service_tier_advisors));
    }
    if (m_source_database_deletion_date_isSet) {
        obj.insert(QString("sourceDatabaseDeletionDate"), ::OpenAPI::toJsonValue(m_source_database_deletion_date));
    }
    if (m_source_database_id_isSet) {
        obj.insert(QString("sourceDatabaseId"), ::OpenAPI::toJsonValue(m_source_database_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transparent_data_encryption.size() > 0) {
        obj.insert(QString("transparentDataEncryption"), ::OpenAPI::toJsonValue(m_transparent_data_encryption));
    }
    if (m_zone_redundant_isSet) {
        obj.insert(QString("zoneRedundant"), ::OpenAPI::toJsonValue(m_zone_redundant));
    }
    return obj;
}

QString OAIDatabaseProperties::getCollation() const {
    return m_collation;
}
void OAIDatabaseProperties::setCollation(const QString &collation) {
    m_collation = collation;
    m_collation_isSet = true;
}

bool OAIDatabaseProperties::is_collation_Set() const{
    return m_collation_isSet;
}

bool OAIDatabaseProperties::is_collation_Valid() const{
    return m_collation_isValid;
}

qint64 OAIDatabaseProperties::getContainmentState() const {
    return m_containment_state;
}
void OAIDatabaseProperties::setContainmentState(const qint64 &containment_state) {
    m_containment_state = containment_state;
    m_containment_state_isSet = true;
}

bool OAIDatabaseProperties::is_containment_state_Set() const{
    return m_containment_state_isSet;
}

bool OAIDatabaseProperties::is_containment_state_Valid() const{
    return m_containment_state_isValid;
}

QString OAIDatabaseProperties::getCreateMode() const {
    return m_create_mode;
}
void OAIDatabaseProperties::setCreateMode(const QString &create_mode) {
    m_create_mode = create_mode;
    m_create_mode_isSet = true;
}

bool OAIDatabaseProperties::is_create_mode_Set() const{
    return m_create_mode_isSet;
}

bool OAIDatabaseProperties::is_create_mode_Valid() const{
    return m_create_mode_isValid;
}

QDateTime OAIDatabaseProperties::getCreationDate() const {
    return m_creation_date;
}
void OAIDatabaseProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIDatabaseProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIDatabaseProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIDatabaseProperties::getCurrentServiceObjectiveId() const {
    return m_current_service_objective_id;
}
void OAIDatabaseProperties::setCurrentServiceObjectiveId(const QString &current_service_objective_id) {
    m_current_service_objective_id = current_service_objective_id;
    m_current_service_objective_id_isSet = true;
}

bool OAIDatabaseProperties::is_current_service_objective_id_Set() const{
    return m_current_service_objective_id_isSet;
}

bool OAIDatabaseProperties::is_current_service_objective_id_Valid() const{
    return m_current_service_objective_id_isValid;
}

QString OAIDatabaseProperties::getDatabaseId() const {
    return m_database_id;
}
void OAIDatabaseProperties::setDatabaseId(const QString &database_id) {
    m_database_id = database_id;
    m_database_id_isSet = true;
}

bool OAIDatabaseProperties::is_database_id_Set() const{
    return m_database_id_isSet;
}

bool OAIDatabaseProperties::is_database_id_Valid() const{
    return m_database_id_isValid;
}

QString OAIDatabaseProperties::getDefaultSecondaryLocation() const {
    return m_default_secondary_location;
}
void OAIDatabaseProperties::setDefaultSecondaryLocation(const QString &default_secondary_location) {
    m_default_secondary_location = default_secondary_location;
    m_default_secondary_location_isSet = true;
}

bool OAIDatabaseProperties::is_default_secondary_location_Set() const{
    return m_default_secondary_location_isSet;
}

bool OAIDatabaseProperties::is_default_secondary_location_Valid() const{
    return m_default_secondary_location_isValid;
}

QDateTime OAIDatabaseProperties::getEarliestRestoreDate() const {
    return m_earliest_restore_date;
}
void OAIDatabaseProperties::setEarliestRestoreDate(const QDateTime &earliest_restore_date) {
    m_earliest_restore_date = earliest_restore_date;
    m_earliest_restore_date_isSet = true;
}

bool OAIDatabaseProperties::is_earliest_restore_date_Set() const{
    return m_earliest_restore_date_isSet;
}

bool OAIDatabaseProperties::is_earliest_restore_date_Valid() const{
    return m_earliest_restore_date_isValid;
}

QString OAIDatabaseProperties::getEdition() const {
    return m_edition;
}
void OAIDatabaseProperties::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIDatabaseProperties::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIDatabaseProperties::is_edition_Valid() const{
    return m_edition_isValid;
}

QString OAIDatabaseProperties::getElasticPoolName() const {
    return m_elastic_pool_name;
}
void OAIDatabaseProperties::setElasticPoolName(const QString &elastic_pool_name) {
    m_elastic_pool_name = elastic_pool_name;
    m_elastic_pool_name_isSet = true;
}

bool OAIDatabaseProperties::is_elastic_pool_name_Set() const{
    return m_elastic_pool_name_isSet;
}

bool OAIDatabaseProperties::is_elastic_pool_name_Valid() const{
    return m_elastic_pool_name_isValid;
}

QString OAIDatabaseProperties::getFailoverGroupId() const {
    return m_failover_group_id;
}
void OAIDatabaseProperties::setFailoverGroupId(const QString &failover_group_id) {
    m_failover_group_id = failover_group_id;
    m_failover_group_id_isSet = true;
}

bool OAIDatabaseProperties::is_failover_group_id_Set() const{
    return m_failover_group_id_isSet;
}

bool OAIDatabaseProperties::is_failover_group_id_Valid() const{
    return m_failover_group_id_isValid;
}

QString OAIDatabaseProperties::getMaxSizeBytes() const {
    return m_max_size_bytes;
}
void OAIDatabaseProperties::setMaxSizeBytes(const QString &max_size_bytes) {
    m_max_size_bytes = max_size_bytes;
    m_max_size_bytes_isSet = true;
}

bool OAIDatabaseProperties::is_max_size_bytes_Set() const{
    return m_max_size_bytes_isSet;
}

bool OAIDatabaseProperties::is_max_size_bytes_Valid() const{
    return m_max_size_bytes_isValid;
}

QString OAIDatabaseProperties::getReadScale() const {
    return m_read_scale;
}
void OAIDatabaseProperties::setReadScale(const QString &read_scale) {
    m_read_scale = read_scale;
    m_read_scale_isSet = true;
}

bool OAIDatabaseProperties::is_read_scale_Set() const{
    return m_read_scale_isSet;
}

bool OAIDatabaseProperties::is_read_scale_Valid() const{
    return m_read_scale_isValid;
}

QList<OAIDatabaseProperties_recommendedIndex_inner> OAIDatabaseProperties::getRecommendedIndex() const {
    return m_recommended_index;
}
void OAIDatabaseProperties::setRecommendedIndex(const QList<OAIDatabaseProperties_recommendedIndex_inner> &recommended_index) {
    m_recommended_index = recommended_index;
    m_recommended_index_isSet = true;
}

bool OAIDatabaseProperties::is_recommended_index_Set() const{
    return m_recommended_index_isSet;
}

bool OAIDatabaseProperties::is_recommended_index_Valid() const{
    return m_recommended_index_isValid;
}

QString OAIDatabaseProperties::getRecoveryServicesRecoveryPointResourceId() const {
    return m_recovery_services_recovery_point_resource_id;
}
void OAIDatabaseProperties::setRecoveryServicesRecoveryPointResourceId(const QString &recovery_services_recovery_point_resource_id) {
    m_recovery_services_recovery_point_resource_id = recovery_services_recovery_point_resource_id;
    m_recovery_services_recovery_point_resource_id_isSet = true;
}

bool OAIDatabaseProperties::is_recovery_services_recovery_point_resource_id_Set() const{
    return m_recovery_services_recovery_point_resource_id_isSet;
}

bool OAIDatabaseProperties::is_recovery_services_recovery_point_resource_id_Valid() const{
    return m_recovery_services_recovery_point_resource_id_isValid;
}

QString OAIDatabaseProperties::getRequestedServiceObjectiveId() const {
    return m_requested_service_objective_id;
}
void OAIDatabaseProperties::setRequestedServiceObjectiveId(const QString &requested_service_objective_id) {
    m_requested_service_objective_id = requested_service_objective_id;
    m_requested_service_objective_id_isSet = true;
}

bool OAIDatabaseProperties::is_requested_service_objective_id_Set() const{
    return m_requested_service_objective_id_isSet;
}

bool OAIDatabaseProperties::is_requested_service_objective_id_Valid() const{
    return m_requested_service_objective_id_isValid;
}

QString OAIDatabaseProperties::getRequestedServiceObjectiveName() const {
    return m_requested_service_objective_name;
}
void OAIDatabaseProperties::setRequestedServiceObjectiveName(const QString &requested_service_objective_name) {
    m_requested_service_objective_name = requested_service_objective_name;
    m_requested_service_objective_name_isSet = true;
}

bool OAIDatabaseProperties::is_requested_service_objective_name_Set() const{
    return m_requested_service_objective_name_isSet;
}

bool OAIDatabaseProperties::is_requested_service_objective_name_Valid() const{
    return m_requested_service_objective_name_isValid;
}

QDateTime OAIDatabaseProperties::getRestorePointInTime() const {
    return m_restore_point_in_time;
}
void OAIDatabaseProperties::setRestorePointInTime(const QDateTime &restore_point_in_time) {
    m_restore_point_in_time = restore_point_in_time;
    m_restore_point_in_time_isSet = true;
}

bool OAIDatabaseProperties::is_restore_point_in_time_Set() const{
    return m_restore_point_in_time_isSet;
}

bool OAIDatabaseProperties::is_restore_point_in_time_Valid() const{
    return m_restore_point_in_time_isValid;
}

QString OAIDatabaseProperties::getSampleName() const {
    return m_sample_name;
}
void OAIDatabaseProperties::setSampleName(const QString &sample_name) {
    m_sample_name = sample_name;
    m_sample_name_isSet = true;
}

bool OAIDatabaseProperties::is_sample_name_Set() const{
    return m_sample_name_isSet;
}

bool OAIDatabaseProperties::is_sample_name_Valid() const{
    return m_sample_name_isValid;
}

QString OAIDatabaseProperties::getServiceLevelObjective() const {
    return m_service_level_objective;
}
void OAIDatabaseProperties::setServiceLevelObjective(const QString &service_level_objective) {
    m_service_level_objective = service_level_objective;
    m_service_level_objective_isSet = true;
}

bool OAIDatabaseProperties::is_service_level_objective_Set() const{
    return m_service_level_objective_isSet;
}

bool OAIDatabaseProperties::is_service_level_objective_Valid() const{
    return m_service_level_objective_isValid;
}

QList<OAIDatabaseProperties_serviceTierAdvisors_inner> OAIDatabaseProperties::getServiceTierAdvisors() const {
    return m_service_tier_advisors;
}
void OAIDatabaseProperties::setServiceTierAdvisors(const QList<OAIDatabaseProperties_serviceTierAdvisors_inner> &service_tier_advisors) {
    m_service_tier_advisors = service_tier_advisors;
    m_service_tier_advisors_isSet = true;
}

bool OAIDatabaseProperties::is_service_tier_advisors_Set() const{
    return m_service_tier_advisors_isSet;
}

bool OAIDatabaseProperties::is_service_tier_advisors_Valid() const{
    return m_service_tier_advisors_isValid;
}

QDateTime OAIDatabaseProperties::getSourceDatabaseDeletionDate() const {
    return m_source_database_deletion_date;
}
void OAIDatabaseProperties::setSourceDatabaseDeletionDate(const QDateTime &source_database_deletion_date) {
    m_source_database_deletion_date = source_database_deletion_date;
    m_source_database_deletion_date_isSet = true;
}

bool OAIDatabaseProperties::is_source_database_deletion_date_Set() const{
    return m_source_database_deletion_date_isSet;
}

bool OAIDatabaseProperties::is_source_database_deletion_date_Valid() const{
    return m_source_database_deletion_date_isValid;
}

QString OAIDatabaseProperties::getSourceDatabaseId() const {
    return m_source_database_id;
}
void OAIDatabaseProperties::setSourceDatabaseId(const QString &source_database_id) {
    m_source_database_id = source_database_id;
    m_source_database_id_isSet = true;
}

bool OAIDatabaseProperties::is_source_database_id_Set() const{
    return m_source_database_id_isSet;
}

bool OAIDatabaseProperties::is_source_database_id_Valid() const{
    return m_source_database_id_isValid;
}

QString OAIDatabaseProperties::getStatus() const {
    return m_status;
}
void OAIDatabaseProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDatabaseProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDatabaseProperties::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIDatabaseProperties_transparentDataEncryption_inner> OAIDatabaseProperties::getTransparentDataEncryption() const {
    return m_transparent_data_encryption;
}
void OAIDatabaseProperties::setTransparentDataEncryption(const QList<OAIDatabaseProperties_transparentDataEncryption_inner> &transparent_data_encryption) {
    m_transparent_data_encryption = transparent_data_encryption;
    m_transparent_data_encryption_isSet = true;
}

bool OAIDatabaseProperties::is_transparent_data_encryption_Set() const{
    return m_transparent_data_encryption_isSet;
}

bool OAIDatabaseProperties::is_transparent_data_encryption_Valid() const{
    return m_transparent_data_encryption_isValid;
}

bool OAIDatabaseProperties::isZoneRedundant() const {
    return m_zone_redundant;
}
void OAIDatabaseProperties::setZoneRedundant(const bool &zone_redundant) {
    m_zone_redundant = zone_redundant;
    m_zone_redundant_isSet = true;
}

bool OAIDatabaseProperties::is_zone_redundant_Set() const{
    return m_zone_redundant_isSet;
}

bool OAIDatabaseProperties::is_zone_redundant_Valid() const{
    return m_zone_redundant_isValid;
}

bool OAIDatabaseProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_containment_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_service_objective_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_secondary_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_restore_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elastic_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_index.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_services_recovery_point_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_service_objective_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_service_objective_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_point_in_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_level_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_tier_advisors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_database_deletion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_database_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transparent_data_encryption.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_redundant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
