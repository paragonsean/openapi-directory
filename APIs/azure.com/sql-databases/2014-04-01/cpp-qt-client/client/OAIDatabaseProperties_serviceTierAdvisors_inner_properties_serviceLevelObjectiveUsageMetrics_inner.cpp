/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner() {
    this->initializeModel();
}

OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::~OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner() {}

void OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::initializeModel() {

    m_in_range_time_ratio_isSet = false;
    m_in_range_time_ratio_isValid = false;

    m_service_level_objective_isSet = false;
    m_service_level_objective_isValid = false;

    m_service_level_objective_id_isSet = false;
    m_service_level_objective_id_isValid = false;
}

void OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::fromJsonObject(QJsonObject json) {

    m_in_range_time_ratio_isValid = ::OpenAPI::fromJsonValue(m_in_range_time_ratio, json[QString("inRangeTimeRatio")]);
    m_in_range_time_ratio_isSet = !json[QString("inRangeTimeRatio")].isNull() && m_in_range_time_ratio_isValid;

    m_service_level_objective_isValid = ::OpenAPI::fromJsonValue(m_service_level_objective, json[QString("serviceLevelObjective")]);
    m_service_level_objective_isSet = !json[QString("serviceLevelObjective")].isNull() && m_service_level_objective_isValid;

    m_service_level_objective_id_isValid = ::OpenAPI::fromJsonValue(m_service_level_objective_id, json[QString("serviceLevelObjectiveId")]);
    m_service_level_objective_id_isSet = !json[QString("serviceLevelObjectiveId")].isNull() && m_service_level_objective_id_isValid;
}

QString OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_in_range_time_ratio_isSet) {
        obj.insert(QString("inRangeTimeRatio"), ::OpenAPI::toJsonValue(m_in_range_time_ratio));
    }
    if (m_service_level_objective_isSet) {
        obj.insert(QString("serviceLevelObjective"), ::OpenAPI::toJsonValue(m_service_level_objective));
    }
    if (m_service_level_objective_id_isSet) {
        obj.insert(QString("serviceLevelObjectiveId"), ::OpenAPI::toJsonValue(m_service_level_objective_id));
    }
    return obj;
}

double OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::getInRangeTimeRatio() const {
    return m_in_range_time_ratio;
}
void OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::setInRangeTimeRatio(const double &in_range_time_ratio) {
    m_in_range_time_ratio = in_range_time_ratio;
    m_in_range_time_ratio_isSet = true;
}

bool OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::is_in_range_time_ratio_Set() const{
    return m_in_range_time_ratio_isSet;
}

bool OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::is_in_range_time_ratio_Valid() const{
    return m_in_range_time_ratio_isValid;
}

QString OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::getServiceLevelObjective() const {
    return m_service_level_objective;
}
void OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::setServiceLevelObjective(const QString &service_level_objective) {
    m_service_level_objective = service_level_objective;
    m_service_level_objective_isSet = true;
}

bool OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::is_service_level_objective_Set() const{
    return m_service_level_objective_isSet;
}

bool OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::is_service_level_objective_Valid() const{
    return m_service_level_objective_isValid;
}

QString OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::getServiceLevelObjectiveId() const {
    return m_service_level_objective_id;
}
void OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::setServiceLevelObjectiveId(const QString &service_level_objective_id) {
    m_service_level_objective_id = service_level_objective_id;
    m_service_level_objective_id_isSet = true;
}

bool OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::is_service_level_objective_id_Set() const{
    return m_service_level_objective_id_isSet;
}

bool OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::is_service_level_objective_id_Valid() const{
    return m_service_level_objective_id_isValid;
}

bool OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_range_time_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_level_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_level_objective_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseProperties_serviceTierAdvisors_inner_properties_serviceLevelObjectiveUsageMetrics_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
