/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Databases.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatabasesApi_H
#define OAI_OAIDatabasesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDatabase.h"
#include "OAIDatabaseListResult.h"
#include "OAIDatabaseUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatabasesApi : public QObject {
    Q_OBJECT

public:
    OAIDatabasesApi(const int timeOut = 0);
    ~OAIDatabasesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  parameters OAIDatabase [required]
    */
    virtual void databasesCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &database_name, const OAIDatabase &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    */
    virtual void databasesDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &database_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void databasesGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &database_name, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  recommended_elastic_pool_name QString [required]
    * @param[in]  database_name QString [required]
    */
    virtual void databasesGetByRecommendedElasticPool(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &recommended_elastic_pool_name, const QString &database_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  elastic_pool_name QString [required]
    */
    virtual void databasesListByElasticPool(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &elastic_pool_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  recommended_elastic_pool_name QString [required]
    */
    virtual void databasesListByRecommendedElasticPool(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &recommended_elastic_pool_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void databasesListByServer(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  database_name QString [required]
    * @param[in]  parameters OAIDatabaseUpdate [required]
    */
    virtual void databasesUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &database_name, const OAIDatabaseUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databasesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void databasesDeleteCallback(OAIHttpRequestWorker *worker);
    void databasesGetCallback(OAIHttpRequestWorker *worker);
    void databasesGetByRecommendedElasticPoolCallback(OAIHttpRequestWorker *worker);
    void databasesListByElasticPoolCallback(OAIHttpRequestWorker *worker);
    void databasesListByRecommendedElasticPoolCallback(OAIHttpRequestWorker *worker);
    void databasesListByServerCallback(OAIHttpRequestWorker *worker);
    void databasesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void databasesCreateOrUpdateSignal(OAIDatabase summary);
    void databasesDeleteSignal();
    void databasesGetSignal(OAIDatabase summary);
    void databasesGetByRecommendedElasticPoolSignal(OAIDatabase summary);
    void databasesListByElasticPoolSignal(OAIDatabaseListResult summary);
    void databasesListByRecommendedElasticPoolSignal(OAIDatabaseListResult summary);
    void databasesListByServerSignal(OAIDatabaseListResult summary);
    void databasesUpdateSignal(OAIDatabase summary);


    void databasesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);
    void databasesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void databasesGetSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);
    void databasesGetByRecommendedElasticPoolSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);
    void databasesListByElasticPoolSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseListResult summary);
    void databasesListByRecommendedElasticPoolSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseListResult summary);
    void databasesListByServerSignalFull(OAIHttpRequestWorker *worker, OAIDatabaseListResult summary);
    void databasesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDatabase summary);

    Q_DECL_DEPRECATED_X("Use databasesCreateOrUpdateSignalError() instead")
    void databasesCreateOrUpdateSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesCreateOrUpdateSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesDeleteSignalError() instead")
    void databasesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databasesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesGetSignalError() instead")
    void databasesGetSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesGetSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesGetByRecommendedElasticPoolSignalError() instead")
    void databasesGetByRecommendedElasticPoolSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesGetByRecommendedElasticPoolSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByElasticPoolSignalError() instead")
    void databasesListByElasticPoolSignalE(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByElasticPoolSignalError(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByRecommendedElasticPoolSignalError() instead")
    void databasesListByRecommendedElasticPoolSignalE(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByRecommendedElasticPoolSignalError(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByServerSignalError() instead")
    void databasesListByServerSignalE(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByServerSignalError(OAIDatabaseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesUpdateSignalError() instead")
    void databasesUpdateSignalE(OAIDatabase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesUpdateSignalError(OAIDatabase summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use databasesCreateOrUpdateSignalErrorFull() instead")
    void databasesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesDeleteSignalErrorFull() instead")
    void databasesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesGetSignalErrorFull() instead")
    void databasesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesGetByRecommendedElasticPoolSignalErrorFull() instead")
    void databasesGetByRecommendedElasticPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesGetByRecommendedElasticPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByElasticPoolSignalErrorFull() instead")
    void databasesListByElasticPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByElasticPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByRecommendedElasticPoolSignalErrorFull() instead")
    void databasesListByRecommendedElasticPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByRecommendedElasticPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesListByServerSignalErrorFull() instead")
    void databasesListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databasesUpdateSignalErrorFull() instead")
    void databasesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databasesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
