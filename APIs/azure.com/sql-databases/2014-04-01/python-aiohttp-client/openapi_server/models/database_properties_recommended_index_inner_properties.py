# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_properties_recommended_index_inner_properties_estimated_impact_inner import DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner
from openapi_server import util


class DatabasePropertiesRecommendedIndexInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, columns: List[str]=None, created: datetime=None, estimated_impact: List[DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner]=None, included_columns: List[str]=None, index_script: str=None, index_type: str=None, last_modified: datetime=None, reported_impact: List[DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner]=None, _schema: str=None, state: str=None, table: str=None):
        """DatabasePropertiesRecommendedIndexInnerProperties - a model defined in OpenAPI

        :param action: The action of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param columns: The columns of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param created: The created of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param estimated_impact: The estimated_impact of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param included_columns: The included_columns of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param index_script: The index_script of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param index_type: The index_type of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param last_modified: The last_modified of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param reported_impact: The reported_impact of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param _schema: The _schema of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param state: The state of this DatabasePropertiesRecommendedIndexInnerProperties.
        :param table: The table of this DatabasePropertiesRecommendedIndexInnerProperties.
        """
        self.openapi_types = {
            'action': str,
            'columns': List[str],
            'created': datetime,
            'estimated_impact': List[DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner],
            'included_columns': List[str],
            'index_script': str,
            'index_type': str,
            'last_modified': datetime,
            'reported_impact': List[DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner],
            '_schema': str,
            'state': str,
            'table': str
        }

        self.attribute_map = {
            'action': 'action',
            'columns': 'columns',
            'created': 'created',
            'estimated_impact': 'estimatedImpact',
            'included_columns': 'includedColumns',
            'index_script': 'indexScript',
            'index_type': 'indexType',
            'last_modified': 'lastModified',
            'reported_impact': 'reportedImpact',
            '_schema': 'schema',
            'state': 'state',
            'table': 'table'
        }

        self._action = action
        self._columns = columns
        self._created = created
        self._estimated_impact = estimated_impact
        self._included_columns = included_columns
        self._index_script = index_script
        self._index_type = index_type
        self._last_modified = last_modified
        self._reported_impact = reported_impact
        self.__schema = _schema
        self._state = state
        self._table = table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabasePropertiesRecommendedIndexInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseProperties_recommendedIndex_inner_properties of this DatabasePropertiesRecommendedIndexInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this DatabasePropertiesRecommendedIndexInnerProperties.

        The proposed index action. You can create a missing index, drop an unused index, or rebuild an existing index to improve its performance.

        :return: The action of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DatabasePropertiesRecommendedIndexInnerProperties.

        The proposed index action. You can create a missing index, drop an unused index, or rebuild an existing index to improve its performance.

        :param action: The action of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type action: str
        """
        allowed_values = ["Create", "Drop", "Rebuild"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def columns(self):
        """Gets the columns of this DatabasePropertiesRecommendedIndexInnerProperties.

        Columns over which to build index

        :return: The columns of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this DatabasePropertiesRecommendedIndexInnerProperties.

        Columns over which to build index

        :param columns: The columns of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def created(self):
        """Gets the created of this DatabasePropertiesRecommendedIndexInnerProperties.

        The UTC datetime showing when this resource was created (ISO8601 format).

        :return: The created of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DatabasePropertiesRecommendedIndexInnerProperties.

        The UTC datetime showing when this resource was created (ISO8601 format).

        :param created: The created of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type created: datetime
        """

        self._created = created

    @property
    def estimated_impact(self):
        """Gets the estimated_impact of this DatabasePropertiesRecommendedIndexInnerProperties.

        The estimated impact of doing recommended index action.

        :return: The estimated_impact of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: List[DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner]
        """
        return self._estimated_impact

    @estimated_impact.setter
    def estimated_impact(self, estimated_impact):
        """Sets the estimated_impact of this DatabasePropertiesRecommendedIndexInnerProperties.

        The estimated impact of doing recommended index action.

        :param estimated_impact: The estimated_impact of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type estimated_impact: List[DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner]
        """

        self._estimated_impact = estimated_impact

    @property
    def included_columns(self):
        """Gets the included_columns of this DatabasePropertiesRecommendedIndexInnerProperties.

        The list of column names to be included in the index

        :return: The included_columns of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: List[str]
        """
        return self._included_columns

    @included_columns.setter
    def included_columns(self, included_columns):
        """Sets the included_columns of this DatabasePropertiesRecommendedIndexInnerProperties.

        The list of column names to be included in the index

        :param included_columns: The included_columns of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type included_columns: List[str]
        """

        self._included_columns = included_columns

    @property
    def index_script(self):
        """Gets the index_script of this DatabasePropertiesRecommendedIndexInnerProperties.

        The full build index script

        :return: The index_script of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: str
        """
        return self._index_script

    @index_script.setter
    def index_script(self, index_script):
        """Sets the index_script of this DatabasePropertiesRecommendedIndexInnerProperties.

        The full build index script

        :param index_script: The index_script of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type index_script: str
        """

        self._index_script = index_script

    @property
    def index_type(self):
        """Gets the index_type of this DatabasePropertiesRecommendedIndexInnerProperties.

        The type of index (CLUSTERED, NONCLUSTERED, COLUMNSTORE, CLUSTERED COLUMNSTORE)

        :return: The index_type of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: str
        """
        return self._index_type

    @index_type.setter
    def index_type(self, index_type):
        """Sets the index_type of this DatabasePropertiesRecommendedIndexInnerProperties.

        The type of index (CLUSTERED, NONCLUSTERED, COLUMNSTORE, CLUSTERED COLUMNSTORE)

        :param index_type: The index_type of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type index_type: str
        """
        allowed_values = ["CLUSTERED", "NONCLUSTERED", "COLUMNSTORE", "CLUSTERED COLUMNSTORE"]  # noqa: E501
        if index_type not in allowed_values:
            raise ValueError(
                "Invalid value for `index_type` ({0}), must be one of {1}"
                .format(index_type, allowed_values)
            )

        self._index_type = index_type

    @property
    def last_modified(self):
        """Gets the last_modified of this DatabasePropertiesRecommendedIndexInnerProperties.

        The UTC datetime of when was this resource last changed (ISO8601 format).

        :return: The last_modified of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this DatabasePropertiesRecommendedIndexInnerProperties.

        The UTC datetime of when was this resource last changed (ISO8601 format).

        :param last_modified: The last_modified of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def reported_impact(self):
        """Gets the reported_impact of this DatabasePropertiesRecommendedIndexInnerProperties.

        The values reported after index action is complete.

        :return: The reported_impact of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: List[DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner]
        """
        return self._reported_impact

    @reported_impact.setter
    def reported_impact(self, reported_impact):
        """Sets the reported_impact of this DatabasePropertiesRecommendedIndexInnerProperties.

        The values reported after index action is complete.

        :param reported_impact: The reported_impact of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type reported_impact: List[DatabasePropertiesRecommendedIndexInnerPropertiesEstimatedImpactInner]
        """

        self._reported_impact = reported_impact

    @property
    def _schema(self):
        """Gets the _schema of this DatabasePropertiesRecommendedIndexInnerProperties.

        The schema where table to build index over resides

        :return: The _schema of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this DatabasePropertiesRecommendedIndexInnerProperties.

        The schema where table to build index over resides

        :param _schema: The _schema of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type _schema: str
        """

        self.__schema = _schema

    @property
    def state(self):
        """Gets the state of this DatabasePropertiesRecommendedIndexInnerProperties.

        The current recommendation state.

        :return: The state of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DatabasePropertiesRecommendedIndexInnerProperties.

        The current recommendation state.

        :param state: The state of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type state: str
        """
        allowed_values = ["Active", "Pending", "Executing", "Verifying", "Pending Revert", "Reverting", "Reverted", "Ignored", "Expired", "Blocked", "Success"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def table(self):
        """Gets the table of this DatabasePropertiesRecommendedIndexInnerProperties.

        The table on which to build index.

        :return: The table of this DatabasePropertiesRecommendedIndexInnerProperties.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this DatabasePropertiesRecommendedIndexInnerProperties.

        The table on which to build index.

        :param table: The table of this DatabasePropertiesRecommendedIndexInnerProperties.
        :type table: str
        """

        self._table = table
