/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDscNodeConfigurationCreateOrUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDscNodeConfigurationCreateOrUpdateParameters::OAIDscNodeConfigurationCreateOrUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDscNodeConfigurationCreateOrUpdateParameters::OAIDscNodeConfigurationCreateOrUpdateParameters() {
    this->initializeModel();
}

OAIDscNodeConfigurationCreateOrUpdateParameters::~OAIDscNodeConfigurationCreateOrUpdateParameters() {}

void OAIDscNodeConfigurationCreateOrUpdateParameters::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_increment_node_configuration_build_isSet = false;
    m_increment_node_configuration_build_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIDscNodeConfigurationCreateOrUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDscNodeConfigurationCreateOrUpdateParameters::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_increment_node_configuration_build_isValid = ::OpenAPI::fromJsonValue(m_increment_node_configuration_build, json[QString("incrementNodeConfigurationBuild")]);
    m_increment_node_configuration_build_isSet = !json[QString("incrementNodeConfigurationBuild")].isNull() && m_increment_node_configuration_build_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIDscNodeConfigurationCreateOrUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDscNodeConfigurationCreateOrUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_increment_node_configuration_build_isSet) {
        obj.insert(QString("incrementNodeConfigurationBuild"), ::OpenAPI::toJsonValue(m_increment_node_configuration_build));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

OAIDscConfigurationAssociationProperty OAIDscNodeConfigurationCreateOrUpdateParameters::getConfiguration() const {
    return m_configuration;
}
void OAIDscNodeConfigurationCreateOrUpdateParameters::setConfiguration(const OAIDscConfigurationAssociationProperty &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::isIncrementNodeConfigurationBuild() const {
    return m_increment_node_configuration_build;
}
void OAIDscNodeConfigurationCreateOrUpdateParameters::setIncrementNodeConfigurationBuild(const bool &increment_node_configuration_build) {
    m_increment_node_configuration_build = increment_node_configuration_build;
    m_increment_node_configuration_build_isSet = true;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::is_increment_node_configuration_build_Set() const{
    return m_increment_node_configuration_build_isSet;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::is_increment_node_configuration_build_Valid() const{
    return m_increment_node_configuration_build_isValid;
}

QString OAIDscNodeConfigurationCreateOrUpdateParameters::getName() const {
    return m_name;
}
void OAIDscNodeConfigurationCreateOrUpdateParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::is_name_Valid() const{
    return m_name_isValid;
}

OAIContentSource OAIDscNodeConfigurationCreateOrUpdateParameters::getSource() const {
    return m_source;
}
void OAIDscNodeConfigurationCreateOrUpdateParameters::setSource(const OAIContentSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_increment_node_configuration_build_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDscNodeConfigurationCreateOrUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_configuration_isValid && m_name_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
