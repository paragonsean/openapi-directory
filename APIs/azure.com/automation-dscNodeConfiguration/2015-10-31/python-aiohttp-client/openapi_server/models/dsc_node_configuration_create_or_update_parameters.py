# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_source import ContentSource
from openapi_server.models.dsc_configuration_association_property import DscConfigurationAssociationProperty
from openapi_server import util


class DscNodeConfigurationCreateOrUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: DscConfigurationAssociationProperty=None, increment_node_configuration_build: bool=None, name: str=None, source: ContentSource=None):
        """DscNodeConfigurationCreateOrUpdateParameters - a model defined in OpenAPI

        :param configuration: The configuration of this DscNodeConfigurationCreateOrUpdateParameters.
        :param increment_node_configuration_build: The increment_node_configuration_build of this DscNodeConfigurationCreateOrUpdateParameters.
        :param name: The name of this DscNodeConfigurationCreateOrUpdateParameters.
        :param source: The source of this DscNodeConfigurationCreateOrUpdateParameters.
        """
        self.openapi_types = {
            'configuration': DscConfigurationAssociationProperty,
            'increment_node_configuration_build': bool,
            'name': str,
            'source': ContentSource
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'increment_node_configuration_build': 'incrementNodeConfigurationBuild',
            'name': 'name',
            'source': 'source'
        }

        self._configuration = configuration
        self._increment_node_configuration_build = increment_node_configuration_build
        self._name = name
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DscNodeConfigurationCreateOrUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DscNodeConfigurationCreateOrUpdateParameters of this DscNodeConfigurationCreateOrUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this DscNodeConfigurationCreateOrUpdateParameters.


        :return: The configuration of this DscNodeConfigurationCreateOrUpdateParameters.
        :rtype: DscConfigurationAssociationProperty
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this DscNodeConfigurationCreateOrUpdateParameters.


        :param configuration: The configuration of this DscNodeConfigurationCreateOrUpdateParameters.
        :type configuration: DscConfigurationAssociationProperty
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration

    @property
    def increment_node_configuration_build(self):
        """Gets the increment_node_configuration_build of this DscNodeConfigurationCreateOrUpdateParameters.

        If a new build version of NodeConfiguration is required.

        :return: The increment_node_configuration_build of this DscNodeConfigurationCreateOrUpdateParameters.
        :rtype: bool
        """
        return self._increment_node_configuration_build

    @increment_node_configuration_build.setter
    def increment_node_configuration_build(self, increment_node_configuration_build):
        """Sets the increment_node_configuration_build of this DscNodeConfigurationCreateOrUpdateParameters.

        If a new build version of NodeConfiguration is required.

        :param increment_node_configuration_build: The increment_node_configuration_build of this DscNodeConfigurationCreateOrUpdateParameters.
        :type increment_node_configuration_build: bool
        """

        self._increment_node_configuration_build = increment_node_configuration_build

    @property
    def name(self):
        """Gets the name of this DscNodeConfigurationCreateOrUpdateParameters.

        Name of the node configuration.

        :return: The name of this DscNodeConfigurationCreateOrUpdateParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DscNodeConfigurationCreateOrUpdateParameters.

        Name of the node configuration.

        :param name: The name of this DscNodeConfigurationCreateOrUpdateParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def source(self):
        """Gets the source of this DscNodeConfigurationCreateOrUpdateParameters.


        :return: The source of this DscNodeConfigurationCreateOrUpdateParameters.
        :rtype: ContentSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DscNodeConfigurationCreateOrUpdateParameters.


        :param source: The source of this DscNodeConfigurationCreateOrUpdateParameters.
        :type source: ContentSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
