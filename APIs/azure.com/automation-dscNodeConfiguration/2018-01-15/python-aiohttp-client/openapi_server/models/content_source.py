# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_hash import ContentHash
from openapi_server import util


class ContentSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hash: ContentHash=None, type: str=None, value: str=None, version: str=None):
        """ContentSource - a model defined in OpenAPI

        :param hash: The hash of this ContentSource.
        :param type: The type of this ContentSource.
        :param value: The value of this ContentSource.
        :param version: The version of this ContentSource.
        """
        self.openapi_types = {
            'hash': ContentHash,
            'type': str,
            'value': str,
            'version': str
        }

        self.attribute_map = {
            'hash': 'hash',
            'type': 'type',
            'value': 'value',
            'version': 'version'
        }

        self._hash = hash
        self._type = type
        self._value = value
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentSource of this ContentSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hash(self):
        """Gets the hash of this ContentSource.


        :return: The hash of this ContentSource.
        :rtype: ContentHash
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ContentSource.


        :param hash: The hash of this ContentSource.
        :type hash: ContentHash
        """

        self._hash = hash

    @property
    def type(self):
        """Gets the type of this ContentSource.

        Gets or sets the content source type.

        :return: The type of this ContentSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContentSource.

        Gets or sets the content source type.

        :param type: The type of this ContentSource.
        :type type: str
        """
        allowed_values = ["embeddedContent", "uri"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this ContentSource.

        Gets or sets the value of the content. This is based on the content source type.

        :return: The value of this ContentSource.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ContentSource.

        Gets or sets the value of the content. This is based on the content source type.

        :param value: The value of this ContentSource.
        :type value: str
        """

        self._value = value

    @property
    def version(self):
        """Gets the version of this ContentSource.

        Gets or sets the version of the content.

        :return: The version of this ContentSource.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ContentSource.

        Gets or sets the version of the content.

        :param version: The version of this ContentSource.
        :type version: str
        """

        self._version = version
