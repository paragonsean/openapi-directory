# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dsc_configuration_association_property import DscConfigurationAssociationProperty
from openapi_server import util


class DscNodeConfigurationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: DscConfigurationAssociationProperty=None, creation_time: datetime=None, increment_node_configuration_build: bool=None, last_modified_time: datetime=None, node_count: int=None, source: str=None):
        """DscNodeConfigurationProperties - a model defined in OpenAPI

        :param configuration: The configuration of this DscNodeConfigurationProperties.
        :param creation_time: The creation_time of this DscNodeConfigurationProperties.
        :param increment_node_configuration_build: The increment_node_configuration_build of this DscNodeConfigurationProperties.
        :param last_modified_time: The last_modified_time of this DscNodeConfigurationProperties.
        :param node_count: The node_count of this DscNodeConfigurationProperties.
        :param source: The source of this DscNodeConfigurationProperties.
        """
        self.openapi_types = {
            'configuration': DscConfigurationAssociationProperty,
            'creation_time': datetime,
            'increment_node_configuration_build': bool,
            'last_modified_time': datetime,
            'node_count': int,
            'source': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'creation_time': 'creationTime',
            'increment_node_configuration_build': 'incrementNodeConfigurationBuild',
            'last_modified_time': 'lastModifiedTime',
            'node_count': 'nodeCount',
            'source': 'source'
        }

        self._configuration = configuration
        self._creation_time = creation_time
        self._increment_node_configuration_build = increment_node_configuration_build
        self._last_modified_time = last_modified_time
        self._node_count = node_count
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DscNodeConfigurationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DscNodeConfigurationProperties of this DscNodeConfigurationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this DscNodeConfigurationProperties.


        :return: The configuration of this DscNodeConfigurationProperties.
        :rtype: DscConfigurationAssociationProperty
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this DscNodeConfigurationProperties.


        :param configuration: The configuration of this DscNodeConfigurationProperties.
        :type configuration: DscConfigurationAssociationProperty
        """

        self._configuration = configuration

    @property
    def creation_time(self):
        """Gets the creation_time of this DscNodeConfigurationProperties.

        Gets or sets creation time.

        :return: The creation_time of this DscNodeConfigurationProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DscNodeConfigurationProperties.

        Gets or sets creation time.

        :param creation_time: The creation_time of this DscNodeConfigurationProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def increment_node_configuration_build(self):
        """Gets the increment_node_configuration_build of this DscNodeConfigurationProperties.

        If a new build version of NodeConfiguration is required.

        :return: The increment_node_configuration_build of this DscNodeConfigurationProperties.
        :rtype: bool
        """
        return self._increment_node_configuration_build

    @increment_node_configuration_build.setter
    def increment_node_configuration_build(self, increment_node_configuration_build):
        """Sets the increment_node_configuration_build of this DscNodeConfigurationProperties.

        If a new build version of NodeConfiguration is required.

        :param increment_node_configuration_build: The increment_node_configuration_build of this DscNodeConfigurationProperties.
        :type increment_node_configuration_build: bool
        """

        self._increment_node_configuration_build = increment_node_configuration_build

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DscNodeConfigurationProperties.

        Gets or sets the last modified time.

        :return: The last_modified_time of this DscNodeConfigurationProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DscNodeConfigurationProperties.

        Gets or sets the last modified time.

        :param last_modified_time: The last_modified_time of this DscNodeConfigurationProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def node_count(self):
        """Gets the node_count of this DscNodeConfigurationProperties.

        Number of nodes with this node configuration assigned

        :return: The node_count of this DscNodeConfigurationProperties.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this DscNodeConfigurationProperties.

        Number of nodes with this node configuration assigned

        :param node_count: The node_count of this DscNodeConfigurationProperties.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def source(self):
        """Gets the source of this DscNodeConfigurationProperties.

        Source of node configuration.

        :return: The source of this DscNodeConfigurationProperties.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DscNodeConfigurationProperties.

        Source of node configuration.

        :param source: The source of this DscNodeConfigurationProperties.
        :type source: str
        """

        self._source = source
