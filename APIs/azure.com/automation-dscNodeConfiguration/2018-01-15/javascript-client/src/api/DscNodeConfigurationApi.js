/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DscNodeConfiguration from '../model/DscNodeConfiguration';
import DscNodeConfigurationCreateOrUpdateParameters from '../model/DscNodeConfigurationCreateOrUpdateParameters';
import DscNodeConfigurationListByAutomationAccountDefaultResponse from '../model/DscNodeConfigurationListByAutomationAccountDefaultResponse';
import DscNodeConfigurationListResult from '../model/DscNodeConfigurationListResult';

/**
* DscNodeConfiguration service.
* @module api/DscNodeConfigurationApi
* @version 2018-01-15
*/
export default class DscNodeConfigurationApi {

    /**
    * Constructs a new DscNodeConfigurationApi. 
    * @alias module:api/DscNodeConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dscNodeConfigurationCreateOrUpdate operation.
     * @callback module:api/DscNodeConfigurationApi~dscNodeConfigurationCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the node configuration identified by node configuration name.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} automationAccountName The name of the automation account.
     * @param {String} nodeConfigurationName The Dsc node configuration name.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/DscNodeConfigurationCreateOrUpdateParameters} parameters The create or update parameters for configuration.
     * @param {module:api/DscNodeConfigurationApi~dscNodeConfigurationCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dscNodeConfigurationCreateOrUpdate(resourceGroupName, automationAccountName, nodeConfigurationName, subscriptionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dscNodeConfigurationCreateOrUpdate");
      }
      // verify the required parameter 'automationAccountName' is set
      if (automationAccountName === undefined || automationAccountName === null) {
        throw new Error("Missing the required parameter 'automationAccountName' when calling dscNodeConfigurationCreateOrUpdate");
      }
      // verify the required parameter 'nodeConfigurationName' is set
      if (nodeConfigurationName === undefined || nodeConfigurationName === null) {
        throw new Error("Missing the required parameter 'nodeConfigurationName' when calling dscNodeConfigurationCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dscNodeConfigurationCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dscNodeConfigurationCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling dscNodeConfigurationCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'automationAccountName': automationAccountName,
        'nodeConfigurationName': nodeConfigurationName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations/{nodeConfigurationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dscNodeConfigurationDelete operation.
     * @callback module:api/DscNodeConfigurationApi~dscNodeConfigurationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the Dsc node configurations by node configuration.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} automationAccountName The name of the automation account.
     * @param {String} nodeConfigurationName The Dsc node configuration name.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DscNodeConfigurationApi~dscNodeConfigurationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dscNodeConfigurationDelete(subscriptionId, resourceGroupName, automationAccountName, nodeConfigurationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dscNodeConfigurationDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dscNodeConfigurationDelete");
      }
      // verify the required parameter 'automationAccountName' is set
      if (automationAccountName === undefined || automationAccountName === null) {
        throw new Error("Missing the required parameter 'automationAccountName' when calling dscNodeConfigurationDelete");
      }
      // verify the required parameter 'nodeConfigurationName' is set
      if (nodeConfigurationName === undefined || nodeConfigurationName === null) {
        throw new Error("Missing the required parameter 'nodeConfigurationName' when calling dscNodeConfigurationDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dscNodeConfigurationDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'automationAccountName': automationAccountName,
        'nodeConfigurationName': nodeConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations/{nodeConfigurationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dscNodeConfigurationGet operation.
     * @callback module:api/DscNodeConfigurationApi~dscNodeConfigurationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DscNodeConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the Dsc node configurations by node configuration.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} automationAccountName The name of the automation account.
     * @param {String} nodeConfigurationName The Dsc node configuration name.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DscNodeConfigurationApi~dscNodeConfigurationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DscNodeConfiguration}
     */
    dscNodeConfigurationGet(subscriptionId, resourceGroupName, automationAccountName, nodeConfigurationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dscNodeConfigurationGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dscNodeConfigurationGet");
      }
      // verify the required parameter 'automationAccountName' is set
      if (automationAccountName === undefined || automationAccountName === null) {
        throw new Error("Missing the required parameter 'automationAccountName' when calling dscNodeConfigurationGet");
      }
      // verify the required parameter 'nodeConfigurationName' is set
      if (nodeConfigurationName === undefined || nodeConfigurationName === null) {
        throw new Error("Missing the required parameter 'nodeConfigurationName' when calling dscNodeConfigurationGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dscNodeConfigurationGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'automationAccountName': automationAccountName,
        'nodeConfigurationName': nodeConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DscNodeConfiguration;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations/{nodeConfigurationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dscNodeConfigurationListByAutomationAccount operation.
     * @callback module:api/DscNodeConfigurationApi~dscNodeConfigurationListByAutomationAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DscNodeConfigurationListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of dsc node configurations.
     * @param {String} resourceGroupName Name of an Azure Resource group.
     * @param {String} automationAccountName The name of the automation account.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client Api Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation.
     * @param {Number} [skip] The number of rows to skip.
     * @param {Number} [top] The number of rows to take.
     * @param {String} [inlinecount] Return total rows.
     * @param {module:api/DscNodeConfigurationApi~dscNodeConfigurationListByAutomationAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DscNodeConfigurationListResult}
     */
    dscNodeConfigurationListByAutomationAccount(resourceGroupName, automationAccountName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dscNodeConfigurationListByAutomationAccount");
      }
      // verify the required parameter 'automationAccountName' is set
      if (automationAccountName === undefined || automationAccountName === null) {
        throw new Error("Missing the required parameter 'automationAccountName' when calling dscNodeConfigurationListByAutomationAccount");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dscNodeConfigurationListByAutomationAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dscNodeConfigurationListByAutomationAccount");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'automationAccountName': automationAccountName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$skip': opts['skip'],
        '$top': opts['top'],
        '$inlinecount': opts['inlinecount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DscNodeConfigurationListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/nodeConfigurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
