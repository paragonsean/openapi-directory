/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-01-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DscConfigurationAssociationProperty from './DscConfigurationAssociationProperty';

/**
 * The DscNodeConfigurationProperties model module.
 * @module model/DscNodeConfigurationProperties
 * @version 2018-01-15
 */
class DscNodeConfigurationProperties {
    /**
     * Constructs a new <code>DscNodeConfigurationProperties</code>.
     * Properties for the DscNodeConfiguration
     * @alias module:model/DscNodeConfigurationProperties
     */
    constructor() { 
        
        DscNodeConfigurationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DscNodeConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DscNodeConfigurationProperties} obj Optional instance to populate.
     * @return {module:model/DscNodeConfigurationProperties} The populated <code>DscNodeConfigurationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DscNodeConfigurationProperties();

            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = DscConfigurationAssociationProperty.constructFromObject(data['configuration']);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('incrementNodeConfigurationBuild')) {
                obj['incrementNodeConfigurationBuild'] = ApiClient.convertToType(data['incrementNodeConfigurationBuild'], 'Boolean');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DscNodeConfigurationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DscNodeConfigurationProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `configuration`
        if (data['configuration']) { // data not null
          DscConfigurationAssociationProperty.validateJSON(data['configuration']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}



/**
 * @member {module:model/DscConfigurationAssociationProperty} configuration
 */
DscNodeConfigurationProperties.prototype['configuration'] = undefined;

/**
 * Gets or sets creation time.
 * @member {Date} creationTime
 */
DscNodeConfigurationProperties.prototype['creationTime'] = undefined;

/**
 * If a new build version of NodeConfiguration is required.
 * @member {Boolean} incrementNodeConfigurationBuild
 */
DscNodeConfigurationProperties.prototype['incrementNodeConfigurationBuild'] = undefined;

/**
 * Gets or sets the last modified time.
 * @member {Date} lastModifiedTime
 */
DscNodeConfigurationProperties.prototype['lastModifiedTime'] = undefined;

/**
 * Number of nodes with this node configuration assigned
 * @member {Number} nodeCount
 */
DscNodeConfigurationProperties.prototype['nodeCount'] = undefined;

/**
 * Source of node configuration.
 * @member {String} source
 */
DscNodeConfigurationProperties.prototype['source'] = undefined;






export default DscNodeConfigurationProperties;

