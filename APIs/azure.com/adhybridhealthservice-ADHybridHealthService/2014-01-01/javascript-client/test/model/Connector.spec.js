/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdHybridHealthService);
  }
}(this, function(expect, AdHybridHealthService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdHybridHealthService.Connector();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Connector', function() {
    it('should create an instance of Connector', function() {
      // uncomment below and update the code to test Connector
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be.a(AdHybridHealthService.Connector);
    });

    it('should have the property attributesIncluded (base name: "attributesIncluded")', function() {
      // uncomment below and update the code to test the property attributesIncluded
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property classesIncluded (base name: "classesIncluded")', function() {
      // uncomment below and update the code to test the property classesIncluded
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property connectorId (base name: "connectorId")', function() {
      // uncomment below and update the code to test the property connectorId
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property partitions (base name: "partitions")', function() {
      // uncomment below and update the code to test the property partitions
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property passwordHashSyncConfiguration (base name: "passwordHashSyncConfiguration")', function() {
      // uncomment below and update the code to test the property passwordHashSyncConfiguration
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property passwordManagementSettings (base name: "passwordManagementSettings")', function() {
      // uncomment below and update the code to test the property passwordManagementSettings
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property runProfiles (base name: "runProfiles")', function() {
      // uncomment below and update the code to test the property runProfiles
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property schemaXml (base name: "schemaXml")', function() {
      // uncomment below and update the code to test the property schemaXml
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property timeCreated (base name: "timeCreated")', function() {
      // uncomment below and update the code to test the property timeCreated
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property timeLastModified (base name: "timeLastModified")', function() {
      // uncomment below and update the code to test the property timeLastModified
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new AdHybridHealthService.Connector();
      //expect(instance).to.be();
    });

  });

}));
