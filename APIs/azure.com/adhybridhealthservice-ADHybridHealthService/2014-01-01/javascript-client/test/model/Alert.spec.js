/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdHybridHealthService);
  }
}(this, function(expect, AdHybridHealthService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdHybridHealthService.Alert();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Alert', function() {
    it('should create an instance of Alert', function() {
      // uncomment below and update the code to test Alert
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be.a(AdHybridHealthService.Alert);
    });

    it('should have the property activeAlertProperties (base name: "activeAlertProperties")', function() {
      // uncomment below and update the code to test the property activeAlertProperties
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property additionalInformation (base name: "additionalInformation")', function() {
      // uncomment below and update the code to test the property additionalInformation
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property alertId (base name: "alertId")', function() {
      // uncomment below and update the code to test the property alertId
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property createdDate (base name: "createdDate")', function() {
      // uncomment below and update the code to test the property createdDate
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property level (base name: "level")', function() {
      // uncomment below and update the code to test the property level
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property monitorRoleType (base name: "monitorRoleType")', function() {
      // uncomment below and update the code to test the property monitorRoleType
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property relatedLinks (base name: "relatedLinks")', function() {
      // uncomment below and update the code to test the property relatedLinks
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property remediation (base name: "remediation")', function() {
      // uncomment below and update the code to test the property remediation
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property resolvedAlertProperties (base name: "resolvedAlertProperties")', function() {
      // uncomment below and update the code to test the property resolvedAlertProperties
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property resolvedDate (base name: "resolvedDate")', function() {
      // uncomment below and update the code to test the property resolvedDate
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property scope (base name: "scope")', function() {
      // uncomment below and update the code to test the property scope
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property serviceId (base name: "serviceId")', function() {
      // uncomment below and update the code to test the property serviceId
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property serviceMemberId (base name: "serviceMemberId")', function() {
      // uncomment below and update the code to test the property serviceMemberId
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property shortName (base name: "shortName")', function() {
      // uncomment below and update the code to test the property shortName
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

    it('should have the property tenantId (base name: "tenantId")', function() {
      // uncomment below and update the code to test the property tenantId
      //var instance = new AdHybridHealthService.Alert();
      //expect(instance).to.be();
    });

  });

}));
