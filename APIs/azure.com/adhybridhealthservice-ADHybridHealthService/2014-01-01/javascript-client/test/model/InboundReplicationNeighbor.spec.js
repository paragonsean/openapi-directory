/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdHybridHealthService);
  }
}(this, function(expect, AdHybridHealthService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdHybridHealthService.InboundReplicationNeighbor();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InboundReplicationNeighbor', function() {
    it('should create an instance of InboundReplicationNeighbor', function() {
      // uncomment below and update the code to test InboundReplicationNeighbor
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be.a(AdHybridHealthService.InboundReplicationNeighbor);
    });

    it('should have the property additionalInfo (base name: "additionalInfo")', function() {
      // uncomment below and update the code to test the property additionalInfo
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property consecutiveFailureCount (base name: "consecutiveFailureCount")', function() {
      // uncomment below and update the code to test the property consecutiveFailureCount
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property errorDescription (base name: "errorDescription")', function() {
      // uncomment below and update the code to test the property errorDescription
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property errorTitle (base name: "errorTitle")', function() {
      // uncomment below and update the code to test the property errorTitle
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property fixDetails (base name: "fixDetails")', function() {
      // uncomment below and update the code to test the property fixDetails
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property fixLink (base name: "fixLink")', function() {
      // uncomment below and update the code to test the property fixLink
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property lastAttemptedSync (base name: "lastAttemptedSync")', function() {
      // uncomment below and update the code to test the property lastAttemptedSync
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property lastErrorCode (base name: "lastErrorCode")', function() {
      // uncomment below and update the code to test the property lastErrorCode
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property lastErrorMessage (base name: "lastErrorMessage")', function() {
      // uncomment below and update the code to test the property lastErrorMessage
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property lastSuccessfulSync (base name: "lastSuccessfulSync")', function() {
      // uncomment below and update the code to test the property lastSuccessfulSync
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property namingContext (base name: "namingContext")', function() {
      // uncomment below and update the code to test the property namingContext
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property sourceDomainController (base name: "sourceDomainController")', function() {
      // uncomment below and update the code to test the property sourceDomainController
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AdHybridHealthService.InboundReplicationNeighbor();
      //expect(instance).to.be();
    });

  });

}));
