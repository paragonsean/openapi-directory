/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdHybridHealthService);
  }
}(this, function(expect, AdHybridHealthService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdHybridHealthService.ServiceMember();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceMember', function() {
    it('should create an instance of ServiceMember', function() {
      // uncomment below and update the code to test ServiceMember
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be.a(AdHybridHealthService.ServiceMember);
    });

    it('should have the property activeAlerts (base name: "activeAlerts")', function() {
      // uncomment below and update the code to test the property activeAlerts
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property additionalInformation (base name: "additionalInformation")', function() {
      // uncomment below and update the code to test the property additionalInformation
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property createdDate (base name: "createdDate")', function() {
      // uncomment below and update the code to test the property createdDate
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property dimensions (base name: "dimensions")', function() {
      // uncomment below and update the code to test the property dimensions
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property disabledReason (base name: "disabledReason")', function() {
      // uncomment below and update the code to test the property disabledReason
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property installedQfes (base name: "installedQfes")', function() {
      // uncomment below and update the code to test the property installedQfes
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property lastDisabled (base name: "lastDisabled")', function() {
      // uncomment below and update the code to test the property lastDisabled
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property lastReboot (base name: "lastReboot")', function() {
      // uncomment below and update the code to test the property lastReboot
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property lastServerReportedMonitoringLevelChange (base name: "lastServerReportedMonitoringLevelChange")', function() {
      // uncomment below and update the code to test the property lastServerReportedMonitoringLevelChange
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property machineId (base name: "machineId")', function() {
      // uncomment below and update the code to test the property machineId
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property machineName (base name: "machineName")', function() {
      // uncomment below and update the code to test the property machineName
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property monitoringConfigurationsComputed (base name: "monitoringConfigurationsComputed")', function() {
      // uncomment below and update the code to test the property monitoringConfigurationsComputed
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property monitoringConfigurationsCustomized (base name: "monitoringConfigurationsCustomized")', function() {
      // uncomment below and update the code to test the property monitoringConfigurationsCustomized
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property osName (base name: "osName")', function() {
      // uncomment below and update the code to test the property osName
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property osVersion (base name: "osVersion")', function() {
      // uncomment below and update the code to test the property osVersion
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property properties (base name: "properties")', function() {
      // uncomment below and update the code to test the property properties
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property recommendedQfes (base name: "recommendedQfes")', function() {
      // uncomment below and update the code to test the property recommendedQfes
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property resolvedAlerts (base name: "resolvedAlerts")', function() {
      // uncomment below and update the code to test the property resolvedAlerts
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "role")', function() {
      // uncomment below and update the code to test the property role
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property serverReportedMonitoringLevel (base name: "serverReportedMonitoringLevel")', function() {
      // uncomment below and update the code to test the property serverReportedMonitoringLevel
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property serviceId (base name: "serviceId")', function() {
      // uncomment below and update the code to test the property serviceId
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property serviceMemberId (base name: "serviceMemberId")', function() {
      // uncomment below and update the code to test the property serviceMemberId
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

    it('should have the property tenantId (base name: "tenantId")', function() {
      // uncomment below and update the code to test the property tenantId
      //var instance = new AdHybridHealthService.ServiceMember();
      //expect(instance).to.be();
    });

  });

}));
