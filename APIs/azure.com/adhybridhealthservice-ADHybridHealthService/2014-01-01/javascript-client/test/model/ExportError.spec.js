/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdHybridHealthService);
  }
}(this, function(expect, AdHybridHealthService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdHybridHealthService.ExportError();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExportError', function() {
    it('should create an instance of ExportError', function() {
      // uncomment below and update the code to test ExportError
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be.a(AdHybridHealthService.ExportError);
    });

    it('should have the property aadDisplayName (base name: "aadDisplayName")', function() {
      // uncomment below and update the code to test the property aadDisplayName
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property aadDistinguishedName (base name: "aadDistinguishedName")', function() {
      // uncomment below and update the code to test the property aadDistinguishedName
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property aadMail (base name: "aadMail")', function() {
      // uncomment below and update the code to test the property aadMail
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property aadObjectGuid (base name: "aadObjectGuid")', function() {
      // uncomment below and update the code to test the property aadObjectGuid
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property aadObjectType (base name: "aadObjectType")', function() {
      // uncomment below and update the code to test the property aadObjectType
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property aadSourceOfAuthority (base name: "aadSourceOfAuthority")', function() {
      // uncomment below and update the code to test the property aadSourceOfAuthority
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property aadUserPrincipalName (base name: "aadUserPrincipalName")', function() {
      // uncomment below and update the code to test the property aadUserPrincipalName
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property adDisplayName (base name: "adDisplayName")', function() {
      // uncomment below and update the code to test the property adDisplayName
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property adDistinguishedName (base name: "adDistinguishedName")', function() {
      // uncomment below and update the code to test the property adDistinguishedName
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property adMail (base name: "adMail")', function() {
      // uncomment below and update the code to test the property adMail
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property adObjectGuid (base name: "adObjectGuid")', function() {
      // uncomment below and update the code to test the property adObjectGuid
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property adObjectType (base name: "adObjectType")', function() {
      // uncomment below and update the code to test the property adObjectType
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property adSourceAnchor (base name: "adSourceAnchor")', function() {
      // uncomment below and update the code to test the property adSourceAnchor
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property adSourceOfAuthority (base name: "adSourceOfAuthority")', function() {
      // uncomment below and update the code to test the property adSourceOfAuthority
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property adUserPrincipalName (base name: "adUserPrincipalName")', function() {
      // uncomment below and update the code to test the property adUserPrincipalName
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property attributeMultiValue (base name: "attributeMultiValue")', function() {
      // uncomment below and update the code to test the property attributeMultiValue
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property attributeName (base name: "attributeName")', function() {
      // uncomment below and update the code to test the property attributeName
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property attributeValue (base name: "attributeValue")', function() {
      // uncomment below and update the code to test the property attributeValue
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property cloudAnchor (base name: "cloudAnchor")', function() {
      // uncomment below and update the code to test the property cloudAnchor
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property connectorId (base name: "connectorId")', function() {
      // uncomment below and update the code to test the property connectorId
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property csObjectId (base name: "csObjectId")', function() {
      // uncomment below and update the code to test the property csObjectId
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property dn (base name: "dn")', function() {
      // uncomment below and update the code to test the property dn
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property errorCode (base name: "errorCode")', function() {
      // uncomment below and update the code to test the property errorCode
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property lastDirSyncTime (base name: "lastDirSyncTime")', function() {
      // uncomment below and update the code to test the property lastDirSyncTime
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property maxLimit (base name: "maxLimit")', function() {
      // uncomment below and update the code to test the property maxLimit
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property minLimit (base name: "minLimit")', function() {
      // uncomment below and update the code to test the property minLimit
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property modifiedAttributeValue (base name: "modifiedAttributeValue")', function() {
      // uncomment below and update the code to test the property modifiedAttributeValue
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property objectIdConflict (base name: "objectIdConflict")', function() {
      // uncomment below and update the code to test the property objectIdConflict
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property retryCount (base name: "retryCount")', function() {
      // uncomment below and update the code to test the property retryCount
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property runStepResultId (base name: "runStepResultId")', function() {
      // uncomment below and update the code to test the property runStepResultId
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property samAccountName (base name: "samAccountName")', function() {
      // uncomment below and update the code to test the property samAccountName
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property serverErrorDetail (base name: "serverErrorDetail")', function() {
      // uncomment below and update the code to test the property serverErrorDetail
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property timeFirstOccured (base name: "timeFirstOccured")', function() {
      // uncomment below and update the code to test the property timeFirstOccured
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property timeOccured (base name: "timeOccured")', function() {
      // uncomment below and update the code to test the property timeOccured
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AdHybridHealthService.ExportError();
      //expect(instance).to.be();
    });

  });

}));
