/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdHybridHealthService);
  }
}(this, function(expect, AdHybridHealthService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdHybridHealthService.MergedExportError();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MergedExportError', function() {
    it('should create an instance of MergedExportError', function() {
      // uncomment below and update the code to test MergedExportError
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be.a(AdHybridHealthService.MergedExportError);
    });

    it('should have the property attributeName (base name: "attributeName")', function() {
      // uncomment below and update the code to test the property attributeName
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property attributeValue (base name: "attributeValue")', function() {
      // uncomment below and update the code to test the property attributeValue
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property createdDate (base name: "createdDate")', function() {
      // uncomment below and update the code to test the property createdDate
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property csObjectId (base name: "csObjectId")', function() {
      // uncomment below and update the code to test the property csObjectId
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property dn (base name: "dn")', function() {
      // uncomment below and update the code to test the property dn
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property existingObject (base name: "existingObject")', function() {
      // uncomment below and update the code to test the property existingObject
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property exportErrorStatus (base name: "exportErrorStatus")', function() {
      // uncomment below and update the code to test the property exportErrorStatus
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property incomingObject (base name: "incomingObject")', function() {
      // uncomment below and update the code to test the property incomingObject
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property incomingObjectDisplayName (base name: "incomingObjectDisplayName")', function() {
      // uncomment below and update the code to test the property incomingObjectDisplayName
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property incomingObjectType (base name: "incomingObjectType")', function() {
      // uncomment below and update the code to test the property incomingObjectType
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property mergedEntityId (base name: "mergedEntityId")', function() {
      // uncomment below and update the code to test the property mergedEntityId
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property modifiedOrRemovedAttributeValue (base name: "modifiedOrRemovedAttributeValue")', function() {
      // uncomment below and update the code to test the property modifiedOrRemovedAttributeValue
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property runStepResultId (base name: "runStepResultId")', function() {
      // uncomment below and update the code to test the property runStepResultId
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property samAccountName (base name: "samAccountName")', function() {
      // uncomment below and update the code to test the property samAccountName
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property serverErrorDetail (base name: "serverErrorDetail")', function() {
      // uncomment below and update the code to test the property serverErrorDetail
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property serviceId (base name: "serviceId")', function() {
      // uncomment below and update the code to test the property serviceId
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property serviceMemberId (base name: "serviceMemberId")', function() {
      // uncomment below and update the code to test the property serviceMemberId
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property timeFirstOccurred (base name: "timeFirstOccurred")', function() {
      // uncomment below and update the code to test the property timeFirstOccurred
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property timeOccurred (base name: "timeOccurred")', function() {
      // uncomment below and update the code to test the property timeOccurred
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

    it('should have the property userPrincipalName (base name: "userPrincipalName")', function() {
      // uncomment below and update the code to test the property userPrincipalName
      //var instance = new AdHybridHealthService.MergedExportError();
      //expect(instance).to.be();
    });

  });

}));
