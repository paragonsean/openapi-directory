/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdHybridHealthService);
  }
}(this, function(expect, AdHybridHealthService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdHybridHealthService.Tenant();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Tenant', function() {
    it('should create an instance of Tenant', function() {
      // uncomment below and update the code to test Tenant
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be.a(AdHybridHealthService.Tenant);
    });

    it('should have the property aadLicense (base name: "aadLicense")', function() {
      // uncomment below and update the code to test the property aadLicense
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property aadPremium (base name: "aadPremium")', function() {
      // uncomment below and update the code to test the property aadPremium
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property agentAutoUpdate (base name: "agentAutoUpdate")', function() {
      // uncomment below and update the code to test the property agentAutoUpdate
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property alertSuppressionTimeInMins (base name: "alertSuppressionTimeInMins")', function() {
      // uncomment below and update the code to test the property alertSuppressionTimeInMins
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property consentedToMicrosoftDevOps (base name: "consentedToMicrosoftDevOps")', function() {
      // uncomment below and update the code to test the property consentedToMicrosoftDevOps
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property countryLetterCode (base name: "countryLetterCode")', function() {
      // uncomment below and update the code to test the property countryLetterCode
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property createdDate (base name: "createdDate")', function() {
      // uncomment below and update the code to test the property createdDate
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property devOpsTtl (base name: "devOpsTtl")', function() {
      // uncomment below and update the code to test the property devOpsTtl
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property disabledReason (base name: "disabledReason")', function() {
      // uncomment below and update the code to test the property disabledReason
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property globalAdminsEmail (base name: "globalAdminsEmail")', function() {
      // uncomment below and update the code to test the property globalAdminsEmail
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property initialDomain (base name: "initialDomain")', function() {
      // uncomment below and update the code to test the property initialDomain
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property lastDisabled (base name: "lastDisabled")', function() {
      // uncomment below and update the code to test the property lastDisabled
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property lastVerified (base name: "lastVerified")', function() {
      // uncomment below and update the code to test the property lastVerified
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property onboarded (base name: "onboarded")', function() {
      // uncomment below and update the code to test the property onboarded
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property onboardingAllowed (base name: "onboardingAllowed")', function() {
      // uncomment below and update the code to test the property onboardingAllowed
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property pksCertificate (base name: "pksCertificate")', function() {
      // uncomment below and update the code to test the property pksCertificate
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property privatePreviewTenant (base name: "privatePreviewTenant")', function() {
      // uncomment below and update the code to test the property privatePreviewTenant
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property tenantId (base name: "tenantId")', function() {
      // uncomment below and update the code to test the property tenantId
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property tenantInQuarantine (base name: "tenantInQuarantine")', function() {
      // uncomment below and update the code to test the property tenantInQuarantine
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

    it('should have the property tenantName (base name: "tenantName")', function() {
      // uncomment below and update the code to test the property tenantName
      //var instance = new AdHybridHealthService.Tenant();
      //expect(instance).to.be();
    });

  });

}));
