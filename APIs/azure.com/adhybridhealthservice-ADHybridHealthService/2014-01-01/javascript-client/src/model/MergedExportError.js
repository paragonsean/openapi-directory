/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssociatedObject from './AssociatedObject';

/**
 * The MergedExportError model module.
 * @module model/MergedExportError
 * @version 2014-01-01
 */
class MergedExportError {
    /**
     * Constructs a new <code>MergedExportError</code>.
     * The merged export error.
     * @alias module:model/MergedExportError
     */
    constructor() { 
        
        MergedExportError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MergedExportError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MergedExportError} obj Optional instance to populate.
     * @return {module:model/MergedExportError} The populated <code>MergedExportError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MergedExportError();

            if (data.hasOwnProperty('attributeName')) {
                obj['attributeName'] = ApiClient.convertToType(data['attributeName'], 'String');
            }
            if (data.hasOwnProperty('attributeValue')) {
                obj['attributeValue'] = ApiClient.convertToType(data['attributeValue'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('csObjectId')) {
                obj['csObjectId'] = ApiClient.convertToType(data['csObjectId'], 'String');
            }
            if (data.hasOwnProperty('dn')) {
                obj['dn'] = ApiClient.convertToType(data['dn'], 'String');
            }
            if (data.hasOwnProperty('existingObject')) {
                obj['existingObject'] = AssociatedObject.constructFromObject(data['existingObject']);
            }
            if (data.hasOwnProperty('exportErrorStatus')) {
                obj['exportErrorStatus'] = ApiClient.convertToType(data['exportErrorStatus'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('incomingObject')) {
                obj['incomingObject'] = AssociatedObject.constructFromObject(data['incomingObject']);
            }
            if (data.hasOwnProperty('incomingObjectDisplayName')) {
                obj['incomingObjectDisplayName'] = ApiClient.convertToType(data['incomingObjectDisplayName'], 'String');
            }
            if (data.hasOwnProperty('incomingObjectType')) {
                obj['incomingObjectType'] = ApiClient.convertToType(data['incomingObjectType'], 'String');
            }
            if (data.hasOwnProperty('mergedEntityId')) {
                obj['mergedEntityId'] = ApiClient.convertToType(data['mergedEntityId'], 'String');
            }
            if (data.hasOwnProperty('modifiedOrRemovedAttributeValue')) {
                obj['modifiedOrRemovedAttributeValue'] = ApiClient.convertToType(data['modifiedOrRemovedAttributeValue'], 'String');
            }
            if (data.hasOwnProperty('runStepResultId')) {
                obj['runStepResultId'] = ApiClient.convertToType(data['runStepResultId'], 'String');
            }
            if (data.hasOwnProperty('samAccountName')) {
                obj['samAccountName'] = ApiClient.convertToType(data['samAccountName'], 'String');
            }
            if (data.hasOwnProperty('serverErrorDetail')) {
                obj['serverErrorDetail'] = ApiClient.convertToType(data['serverErrorDetail'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('serviceMemberId')) {
                obj['serviceMemberId'] = ApiClient.convertToType(data['serviceMemberId'], 'String');
            }
            if (data.hasOwnProperty('timeFirstOccurred')) {
                obj['timeFirstOccurred'] = ApiClient.convertToType(data['timeFirstOccurred'], 'Date');
            }
            if (data.hasOwnProperty('timeOccurred')) {
                obj['timeOccurred'] = ApiClient.convertToType(data['timeOccurred'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userPrincipalName')) {
                obj['userPrincipalName'] = ApiClient.convertToType(data['userPrincipalName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MergedExportError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MergedExportError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attributeName'] && !(typeof data['attributeName'] === 'string' || data['attributeName'] instanceof String)) {
            throw new Error("Expected the field `attributeName` to be a primitive type in the JSON string but got " + data['attributeName']);
        }
        // ensure the json data is a string
        if (data['attributeValue'] && !(typeof data['attributeValue'] === 'string' || data['attributeValue'] instanceof String)) {
            throw new Error("Expected the field `attributeValue` to be a primitive type in the JSON string but got " + data['attributeValue']);
        }
        // ensure the json data is a string
        if (data['csObjectId'] && !(typeof data['csObjectId'] === 'string' || data['csObjectId'] instanceof String)) {
            throw new Error("Expected the field `csObjectId` to be a primitive type in the JSON string but got " + data['csObjectId']);
        }
        // ensure the json data is a string
        if (data['dn'] && !(typeof data['dn'] === 'string' || data['dn'] instanceof String)) {
            throw new Error("Expected the field `dn` to be a primitive type in the JSON string but got " + data['dn']);
        }
        // validate the optional field `existingObject`
        if (data['existingObject']) { // data not null
          AssociatedObject.validateJSON(data['existingObject']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `incomingObject`
        if (data['incomingObject']) { // data not null
          AssociatedObject.validateJSON(data['incomingObject']);
        }
        // ensure the json data is a string
        if (data['incomingObjectDisplayName'] && !(typeof data['incomingObjectDisplayName'] === 'string' || data['incomingObjectDisplayName'] instanceof String)) {
            throw new Error("Expected the field `incomingObjectDisplayName` to be a primitive type in the JSON string but got " + data['incomingObjectDisplayName']);
        }
        // ensure the json data is a string
        if (data['incomingObjectType'] && !(typeof data['incomingObjectType'] === 'string' || data['incomingObjectType'] instanceof String)) {
            throw new Error("Expected the field `incomingObjectType` to be a primitive type in the JSON string but got " + data['incomingObjectType']);
        }
        // ensure the json data is a string
        if (data['mergedEntityId'] && !(typeof data['mergedEntityId'] === 'string' || data['mergedEntityId'] instanceof String)) {
            throw new Error("Expected the field `mergedEntityId` to be a primitive type in the JSON string but got " + data['mergedEntityId']);
        }
        // ensure the json data is a string
        if (data['modifiedOrRemovedAttributeValue'] && !(typeof data['modifiedOrRemovedAttributeValue'] === 'string' || data['modifiedOrRemovedAttributeValue'] instanceof String)) {
            throw new Error("Expected the field `modifiedOrRemovedAttributeValue` to be a primitive type in the JSON string but got " + data['modifiedOrRemovedAttributeValue']);
        }
        // ensure the json data is a string
        if (data['runStepResultId'] && !(typeof data['runStepResultId'] === 'string' || data['runStepResultId'] instanceof String)) {
            throw new Error("Expected the field `runStepResultId` to be a primitive type in the JSON string but got " + data['runStepResultId']);
        }
        // ensure the json data is a string
        if (data['samAccountName'] && !(typeof data['samAccountName'] === 'string' || data['samAccountName'] instanceof String)) {
            throw new Error("Expected the field `samAccountName` to be a primitive type in the JSON string but got " + data['samAccountName']);
        }
        // ensure the json data is a string
        if (data['serverErrorDetail'] && !(typeof data['serverErrorDetail'] === 'string' || data['serverErrorDetail'] instanceof String)) {
            throw new Error("Expected the field `serverErrorDetail` to be a primitive type in the JSON string but got " + data['serverErrorDetail']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['serviceMemberId'] && !(typeof data['serviceMemberId'] === 'string' || data['serviceMemberId'] instanceof String)) {
            throw new Error("Expected the field `serviceMemberId` to be a primitive type in the JSON string but got " + data['serviceMemberId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userPrincipalName'] && !(typeof data['userPrincipalName'] === 'string' || data['userPrincipalName'] instanceof String)) {
            throw new Error("Expected the field `userPrincipalName` to be a primitive type in the JSON string but got " + data['userPrincipalName']);
        }

        return true;
    }


}



/**
 * The attribute name.
 * @member {String} attributeName
 */
MergedExportError.prototype['attributeName'] = undefined;

/**
 * The attribute value.
 * @member {String} attributeValue
 */
MergedExportError.prototype['attributeValue'] = undefined;

/**
 * The date and time, in UTC, when the error was created.
 * @member {Date} createdDate
 */
MergedExportError.prototype['createdDate'] = undefined;

/**
 *  the cs object Id.
 * @member {String} csObjectId
 */
MergedExportError.prototype['csObjectId'] = undefined;

/**
 * the DN of the object.
 * @member {String} dn
 */
MergedExportError.prototype['dn'] = undefined;

/**
 * @member {module:model/AssociatedObject} existingObject
 */
MergedExportError.prototype['existingObject'] = undefined;

/**
 * The export error status.
 * @member {Number} exportErrorStatus
 */
MergedExportError.prototype['exportErrorStatus'] = undefined;

/**
 * The error Id.
 * @member {String} id
 */
MergedExportError.prototype['id'] = undefined;

/**
 * @member {module:model/AssociatedObject} incomingObject
 */
MergedExportError.prototype['incomingObject'] = undefined;

/**
 * The incoming object display name.
 * @member {String} incomingObjectDisplayName
 */
MergedExportError.prototype['incomingObjectDisplayName'] = undefined;

/**
 * The incoming object type.
 * @member {String} incomingObjectType
 */
MergedExportError.prototype['incomingObjectType'] = undefined;

/**
 * The merged entity Id.
 * @member {String} mergedEntityId
 */
MergedExportError.prototype['mergedEntityId'] = undefined;

/**
 * The modified or removed attribute value.
 * @member {String} modifiedOrRemovedAttributeValue
 */
MergedExportError.prototype['modifiedOrRemovedAttributeValue'] = undefined;

/**
 * The run step result Id.
 * @member {String} runStepResultId
 */
MergedExportError.prototype['runStepResultId'] = undefined;

/**
 * The sam account name.
 * @member {String} samAccountName
 */
MergedExportError.prototype['samAccountName'] = undefined;

/**
 * The server error details.
 * @member {String} serverErrorDetail
 */
MergedExportError.prototype['serverErrorDetail'] = undefined;

/**
 * The service Id.
 * @member {String} serviceId
 */
MergedExportError.prototype['serviceId'] = undefined;

/**
 * The server Id.
 * @member {String} serviceMemberId
 */
MergedExportError.prototype['serviceMemberId'] = undefined;

/**
 * The time when the error first occurred.
 * @member {Date} timeFirstOccurred
 */
MergedExportError.prototype['timeFirstOccurred'] = undefined;

/**
 * The date and time when the error occurred.
 * @member {Date} timeOccurred
 */
MergedExportError.prototype['timeOccurred'] = undefined;

/**
 * The type of the error.
 * @member {String} type
 */
MergedExportError.prototype['type'] = undefined;

/**
 * The user principal name
 * @member {String} userPrincipalName
 */
MergedExportError.prototype['userPrincipalName'] = undefined;






export default MergedExportError;

