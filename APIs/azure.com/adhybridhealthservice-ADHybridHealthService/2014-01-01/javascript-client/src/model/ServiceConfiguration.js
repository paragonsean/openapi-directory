/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceConfiguration model module.
 * @module model/ServiceConfiguration
 * @version 2014-01-01
 */
class ServiceConfiguration {
    /**
     * Constructs a new <code>ServiceConfiguration</code>.
     * The service configuration
     * @alias module:model/ServiceConfiguration
     */
    constructor() { 
        
        ServiceConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceConfiguration} obj Optional instance to populate.
     * @return {module:model/ServiceConfiguration} The populated <code>ServiceConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceConfiguration();

            if (data.hasOwnProperty('serviceAccount')) {
                obj['serviceAccount'] = ApiClient.convertToType(data['serviceAccount'], 'String');
            }
            if (data.hasOwnProperty('serviceType')) {
                obj['serviceType'] = ApiClient.convertToType(data['serviceType'], 'Number');
            }
            if (data.hasOwnProperty('sqlDatabaseName')) {
                obj['sqlDatabaseName'] = ApiClient.convertToType(data['sqlDatabaseName'], 'String');
            }
            if (data.hasOwnProperty('sqlDatabaseSize')) {
                obj['sqlDatabaseSize'] = ApiClient.convertToType(data['sqlDatabaseSize'], 'Number');
            }
            if (data.hasOwnProperty('sqlEdition')) {
                obj['sqlEdition'] = ApiClient.convertToType(data['sqlEdition'], 'String');
            }
            if (data.hasOwnProperty('sqlInstance')) {
                obj['sqlInstance'] = ApiClient.convertToType(data['sqlInstance'], 'String');
            }
            if (data.hasOwnProperty('sqlServer')) {
                obj['sqlServer'] = ApiClient.convertToType(data['sqlServer'], 'String');
            }
            if (data.hasOwnProperty('sqlVersion')) {
                obj['sqlVersion'] = ApiClient.convertToType(data['sqlVersion'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['serviceAccount'] && !(typeof data['serviceAccount'] === 'string' || data['serviceAccount'] instanceof String)) {
            throw new Error("Expected the field `serviceAccount` to be a primitive type in the JSON string but got " + data['serviceAccount']);
        }
        // ensure the json data is a string
        if (data['sqlDatabaseName'] && !(typeof data['sqlDatabaseName'] === 'string' || data['sqlDatabaseName'] instanceof String)) {
            throw new Error("Expected the field `sqlDatabaseName` to be a primitive type in the JSON string but got " + data['sqlDatabaseName']);
        }
        // ensure the json data is a string
        if (data['sqlEdition'] && !(typeof data['sqlEdition'] === 'string' || data['sqlEdition'] instanceof String)) {
            throw new Error("Expected the field `sqlEdition` to be a primitive type in the JSON string but got " + data['sqlEdition']);
        }
        // ensure the json data is a string
        if (data['sqlInstance'] && !(typeof data['sqlInstance'] === 'string' || data['sqlInstance'] instanceof String)) {
            throw new Error("Expected the field `sqlInstance` to be a primitive type in the JSON string but got " + data['sqlInstance']);
        }
        // ensure the json data is a string
        if (data['sqlServer'] && !(typeof data['sqlServer'] === 'string' || data['sqlServer'] instanceof String)) {
            throw new Error("Expected the field `sqlServer` to be a primitive type in the JSON string but got " + data['sqlServer']);
        }
        // ensure the json data is a string
        if (data['sqlVersion'] && !(typeof data['sqlVersion'] === 'string' || data['sqlVersion'] instanceof String)) {
            throw new Error("Expected the field `sqlVersion` to be a primitive type in the JSON string but got " + data['sqlVersion']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * The service account.
 * @member {String} serviceAccount
 */
ServiceConfiguration.prototype['serviceAccount'] = undefined;

/**
 * The service type of the server.
 * @member {Number} serviceType
 */
ServiceConfiguration.prototype['serviceType'] = undefined;

/**
 * The SQL database.
 * @member {String} sqlDatabaseName
 */
ServiceConfiguration.prototype['sqlDatabaseName'] = undefined;

/**
 * The SQL database size.
 * @member {Number} sqlDatabaseSize
 */
ServiceConfiguration.prototype['sqlDatabaseSize'] = undefined;

/**
 * The SQL edition
 * @member {String} sqlEdition
 */
ServiceConfiguration.prototype['sqlEdition'] = undefined;

/**
 * The SQL instance details.
 * @member {String} sqlInstance
 */
ServiceConfiguration.prototype['sqlInstance'] = undefined;

/**
 * The SQL server information.
 * @member {String} sqlServer
 */
ServiceConfiguration.prototype['sqlServer'] = undefined;

/**
 * The SQL version.
 * @member {String} sqlVersion
 */
ServiceConfiguration.prototype['sqlVersion'] = undefined;

/**
 * The version of the sync service.
 * @member {String} version
 */
ServiceConfiguration.prototype['version'] = undefined;






export default ServiceConfiguration;

