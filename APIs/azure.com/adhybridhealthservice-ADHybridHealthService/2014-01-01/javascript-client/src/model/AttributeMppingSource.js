/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AttributeMppingSource model module.
 * @module model/AttributeMppingSource
 * @version 2014-01-01
 */
class AttributeMppingSource {
    /**
     * Constructs a new <code>AttributeMppingSource</code>.
     * The attribute mapping source.
     * @alias module:model/AttributeMppingSource
     */
    constructor() { 
        
        AttributeMppingSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeMppingSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeMppingSource} obj Optional instance to populate.
     * @return {module:model/AttributeMppingSource} The populated <code>AttributeMppingSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeMppingSource();

            if (data.hasOwnProperty('constantValue')) {
                obj['constantValue'] = ApiClient.convertToType(data['constantValue'], 'String');
            }
            if (data.hasOwnProperty('dnPart')) {
                obj['dnPart'] = ApiClient.convertToType(data['dnPart'], 'Number');
            }
            if (data.hasOwnProperty('scriptContext')) {
                obj['scriptContext'] = ApiClient.convertToType(data['scriptContext'], 'String');
            }
            if (data.hasOwnProperty('sourceAttribute')) {
                obj['sourceAttribute'] = ApiClient.convertToType(data['sourceAttribute'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeMppingSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeMppingSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['constantValue'] && !(typeof data['constantValue'] === 'string' || data['constantValue'] instanceof String)) {
            throw new Error("Expected the field `constantValue` to be a primitive type in the JSON string but got " + data['constantValue']);
        }
        // ensure the json data is a string
        if (data['scriptContext'] && !(typeof data['scriptContext'] === 'string' || data['scriptContext'] instanceof String)) {
            throw new Error("Expected the field `scriptContext` to be a primitive type in the JSON string but got " + data['scriptContext']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sourceAttribute'])) {
            throw new Error("Expected the field `sourceAttribute` to be an array in the JSON data but got " + data['sourceAttribute']);
        }

        return true;
    }


}



/**
 * The constant value.
 * @member {String} constantValue
 */
AttributeMppingSource.prototype['constantValue'] = undefined;

/**
 * The value for dn part.
 * @member {Number} dnPart
 */
AttributeMppingSource.prototype['dnPart'] = undefined;

/**
 * The script context.
 * @member {String} scriptContext
 */
AttributeMppingSource.prototype['scriptContext'] = undefined;

/**
 * The source attribute.
 * @member {Array.<String>} sourceAttribute
 */
AttributeMppingSource.prototype['sourceAttribute'] = undefined;






export default AttributeMppingSource;

