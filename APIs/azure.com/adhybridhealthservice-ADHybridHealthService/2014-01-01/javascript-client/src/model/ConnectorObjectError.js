/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConnectorObjectError model module.
 * @module model/ConnectorObjectError
 * @version 2014-01-01
 */
class ConnectorObjectError {
    /**
     * Constructs a new <code>ConnectorObjectError</code>.
     * The connector object error.
     * @alias module:model/ConnectorObjectError
     */
    constructor() { 
        
        ConnectorObjectError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectorObjectError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectorObjectError} obj Optional instance to populate.
     * @return {module:model/ConnectorObjectError} The populated <code>ConnectorObjectError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectorObjectError();

            if (data.hasOwnProperty('anchor')) {
                obj['anchor'] = ApiClient.convertToType(data['anchor'], 'String');
            }
            if (data.hasOwnProperty('attributeName')) {
                obj['attributeName'] = ApiClient.convertToType(data['attributeName'], 'String');
            }
            if (data.hasOwnProperty('columnNumber')) {
                obj['columnNumber'] = ApiClient.convertToType(data['columnNumber'], 'Number');
            }
            if (data.hasOwnProperty('connectorId')) {
                obj['connectorId'] = ApiClient.convertToType(data['connectorId'], 'String');
            }
            if (data.hasOwnProperty('dn')) {
                obj['dn'] = ApiClient.convertToType(data['dn'], 'String');
            }
            if (data.hasOwnProperty('entryNumber')) {
                obj['entryNumber'] = ApiClient.convertToType(data['entryNumber'], 'Number');
            }
            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lineNumber')) {
                obj['lineNumber'] = ApiClient.convertToType(data['lineNumber'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('runStepResultId')) {
                obj['runStepResultId'] = ApiClient.convertToType(data['runStepResultId'], 'String');
            }
            if (data.hasOwnProperty('serverErrorDetail')) {
                obj['serverErrorDetail'] = ApiClient.convertToType(data['serverErrorDetail'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectorObjectError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectorObjectError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['anchor'] && !(typeof data['anchor'] === 'string' || data['anchor'] instanceof String)) {
            throw new Error("Expected the field `anchor` to be a primitive type in the JSON string but got " + data['anchor']);
        }
        // ensure the json data is a string
        if (data['attributeName'] && !(typeof data['attributeName'] === 'string' || data['attributeName'] instanceof String)) {
            throw new Error("Expected the field `attributeName` to be a primitive type in the JSON string but got " + data['attributeName']);
        }
        // ensure the json data is a string
        if (data['connectorId'] && !(typeof data['connectorId'] === 'string' || data['connectorId'] instanceof String)) {
            throw new Error("Expected the field `connectorId` to be a primitive type in the JSON string but got " + data['connectorId']);
        }
        // ensure the json data is a string
        if (data['dn'] && !(typeof data['dn'] === 'string' || data['dn'] instanceof String)) {
            throw new Error("Expected the field `dn` to be a primitive type in the JSON string but got " + data['dn']);
        }
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['runStepResultId'] && !(typeof data['runStepResultId'] === 'string' || data['runStepResultId'] instanceof String)) {
            throw new Error("Expected the field `runStepResultId` to be a primitive type in the JSON string but got " + data['runStepResultId']);
        }
        // ensure the json data is a string
        if (data['serverErrorDetail'] && !(typeof data['serverErrorDetail'] === 'string' || data['serverErrorDetail'] instanceof String)) {
            throw new Error("Expected the field `serverErrorDetail` to be a primitive type in the JSON string but got " + data['serverErrorDetail']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * The name for the anchor of the object.
 * @member {String} anchor
 */
ConnectorObjectError.prototype['anchor'] = undefined;

/**
 * The attribute name of the object.
 * @member {String} attributeName
 */
ConnectorObjectError.prototype['attributeName'] = undefined;

/**
 * The column number for the object error.
 * @member {Number} columnNumber
 */
ConnectorObjectError.prototype['columnNumber'] = undefined;

/**
 * The connector Id.
 * @member {String} connectorId
 */
ConnectorObjectError.prototype['connectorId'] = undefined;

/**
 * The distinguished name of the object.
 * @member {String} dn
 */
ConnectorObjectError.prototype['dn'] = undefined;

/**
 * The entry number for object error occurred.
 * @member {Number} entryNumber
 */
ConnectorObjectError.prototype['entryNumber'] = undefined;

/**
 * The error code.
 * @member {String} errorCode
 */
ConnectorObjectError.prototype['errorCode'] = undefined;

/**
 * The error Id.
 * @member {String} id
 */
ConnectorObjectError.prototype['id'] = undefined;

/**
 * The line number for the object error.
 * @member {Number} lineNumber
 */
ConnectorObjectError.prototype['lineNumber'] = undefined;

/**
 * The message for the object error.
 * @member {String} message
 */
ConnectorObjectError.prototype['message'] = undefined;

/**
 * The run step result Id.
 * @member {String} runStepResultId
 */
ConnectorObjectError.prototype['runStepResultId'] = undefined;

/**
 * The server side error details.
 * @member {String} serverErrorDetail
 */
ConnectorObjectError.prototype['serverErrorDetail'] = undefined;

/**
 * The type of error.
 * @member {String} type
 */
ConnectorObjectError.prototype['type'] = undefined;

/**
 * The value corresponding to attribute name.
 * @member {Array.<String>} values
 */
ConnectorObjectError.prototype['values'] = undefined;






export default ConnectorObjectError;

