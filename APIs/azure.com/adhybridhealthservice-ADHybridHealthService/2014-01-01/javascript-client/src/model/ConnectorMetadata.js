/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectorMetadataDetails from './ConnectorMetadataDetails';

/**
 * The ConnectorMetadata model module.
 * @module model/ConnectorMetadata
 * @version 2014-01-01
 */
class ConnectorMetadata {
    /**
     * Constructs a new <code>ConnectorMetadata</code>.
     * Gets the list of connectors and run profile names.
     * @alias module:model/ConnectorMetadata
     */
    constructor() { 
        
        ConnectorMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectorMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectorMetadata} obj Optional instance to populate.
     * @return {module:model/ConnectorMetadata} The populated <code>ConnectorMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectorMetadata();

            if (data.hasOwnProperty('connectors')) {
                obj['connectors'] = ApiClient.convertToType(data['connectors'], [ConnectorMetadataDetails]);
            }
            if (data.hasOwnProperty('runProfileNames')) {
                obj['runProfileNames'] = ApiClient.convertToType(data['runProfileNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectorMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectorMetadata</code>.
     */
    static validateJSON(data) {
        if (data['connectors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['connectors'])) {
                throw new Error("Expected the field `connectors` to be an array in the JSON data but got " + data['connectors']);
            }
            // validate the optional field `connectors` (array)
            for (const item of data['connectors']) {
                ConnectorMetadataDetails.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['runProfileNames'])) {
            throw new Error("Expected the field `runProfileNames` to be an array in the JSON data but got " + data['runProfileNames']);
        }

        return true;
    }


}



/**
 * The list of connectors.
 * @member {Array.<module:model/ConnectorMetadataDetails>} connectors
 */
ConnectorMetadata.prototype['connectors'] = undefined;

/**
 * The list of run profile names.
 * @member {Array.<String>} runProfileNames
 */
ConnectorMetadata.prototype['runProfileNames'] = undefined;






export default ConnectorMetadata;

