/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObjectWithSyncError model module.
 * @module model/ObjectWithSyncError
 * @version 2014-01-01
 */
class ObjectWithSyncError {
    /**
     * Constructs a new <code>ObjectWithSyncError</code>.
     * The objects with sync errors.
     * @alias module:model/ObjectWithSyncError
     */
    constructor() { 
        
        ObjectWithSyncError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjectWithSyncError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectWithSyncError} obj Optional instance to populate.
     * @return {module:model/ObjectWithSyncError} The populated <code>ObjectWithSyncError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectWithSyncError();

            if (data.hasOwnProperty('attributeMultiValues')) {
                obj['attributeMultiValues'] = ApiClient.convertToType(data['attributeMultiValues'], 'Boolean');
            }
            if (data.hasOwnProperty('attributeName')) {
                obj['attributeName'] = ApiClient.convertToType(data['attributeName'], 'String');
            }
            if (data.hasOwnProperty('attributeValue')) {
                obj['attributeValue'] = ApiClient.convertToType(data['attributeValue'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('distinguishedName')) {
                obj['distinguishedName'] = ApiClient.convertToType(data['distinguishedName'], 'String');
            }
            if (data.hasOwnProperty('errorType')) {
                obj['errorType'] = ApiClient.convertToType(data['errorType'], 'String');
            }
            if (data.hasOwnProperty('mail')) {
                obj['mail'] = ApiClient.convertToType(data['mail'], 'String');
            }
            if (data.hasOwnProperty('maxLimit')) {
                obj['maxLimit'] = ApiClient.convertToType(data['maxLimit'], 'String');
            }
            if (data.hasOwnProperty('minLimit')) {
                obj['minLimit'] = ApiClient.convertToType(data['minLimit'], 'String');
            }
            if (data.hasOwnProperty('modififedValue')) {
                obj['modififedValue'] = ApiClient.convertToType(data['modififedValue'], 'String');
            }
            if (data.hasOwnProperty('objectGuid')) {
                obj['objectGuid'] = ApiClient.convertToType(data['objectGuid'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('sourceAnchor')) {
                obj['sourceAnchor'] = ApiClient.convertToType(data['sourceAnchor'], 'String');
            }
            if (data.hasOwnProperty('sourceOfAuthority')) {
                obj['sourceOfAuthority'] = ApiClient.convertToType(data['sourceOfAuthority'], 'String');
            }
            if (data.hasOwnProperty('timeOccured')) {
                obj['timeOccured'] = ApiClient.convertToType(data['timeOccured'], 'Date');
            }
            if (data.hasOwnProperty('userPrincipalName')) {
                obj['userPrincipalName'] = ApiClient.convertToType(data['userPrincipalName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectWithSyncError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectWithSyncError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['attributeName'] && !(typeof data['attributeName'] === 'string' || data['attributeName'] instanceof String)) {
            throw new Error("Expected the field `attributeName` to be a primitive type in the JSON string but got " + data['attributeName']);
        }
        // ensure the json data is a string
        if (data['attributeValue'] && !(typeof data['attributeValue'] === 'string' || data['attributeValue'] instanceof String)) {
            throw new Error("Expected the field `attributeValue` to be a primitive type in the JSON string but got " + data['attributeValue']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['distinguishedName'] && !(typeof data['distinguishedName'] === 'string' || data['distinguishedName'] instanceof String)) {
            throw new Error("Expected the field `distinguishedName` to be a primitive type in the JSON string but got " + data['distinguishedName']);
        }
        // ensure the json data is a string
        if (data['errorType'] && !(typeof data['errorType'] === 'string' || data['errorType'] instanceof String)) {
            throw new Error("Expected the field `errorType` to be a primitive type in the JSON string but got " + data['errorType']);
        }
        // ensure the json data is a string
        if (data['mail'] && !(typeof data['mail'] === 'string' || data['mail'] instanceof String)) {
            throw new Error("Expected the field `mail` to be a primitive type in the JSON string but got " + data['mail']);
        }
        // ensure the json data is a string
        if (data['maxLimit'] && !(typeof data['maxLimit'] === 'string' || data['maxLimit'] instanceof String)) {
            throw new Error("Expected the field `maxLimit` to be a primitive type in the JSON string but got " + data['maxLimit']);
        }
        // ensure the json data is a string
        if (data['minLimit'] && !(typeof data['minLimit'] === 'string' || data['minLimit'] instanceof String)) {
            throw new Error("Expected the field `minLimit` to be a primitive type in the JSON string but got " + data['minLimit']);
        }
        // ensure the json data is a string
        if (data['modififedValue'] && !(typeof data['modififedValue'] === 'string' || data['modififedValue'] instanceof String)) {
            throw new Error("Expected the field `modififedValue` to be a primitive type in the JSON string but got " + data['modififedValue']);
        }
        // ensure the json data is a string
        if (data['objectGuid'] && !(typeof data['objectGuid'] === 'string' || data['objectGuid'] instanceof String)) {
            throw new Error("Expected the field `objectGuid` to be a primitive type in the JSON string but got " + data['objectGuid']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // ensure the json data is a string
        if (data['sourceAnchor'] && !(typeof data['sourceAnchor'] === 'string' || data['sourceAnchor'] instanceof String)) {
            throw new Error("Expected the field `sourceAnchor` to be a primitive type in the JSON string but got " + data['sourceAnchor']);
        }
        // ensure the json data is a string
        if (data['sourceOfAuthority'] && !(typeof data['sourceOfAuthority'] === 'string' || data['sourceOfAuthority'] instanceof String)) {
            throw new Error("Expected the field `sourceOfAuthority` to be a primitive type in the JSON string but got " + data['sourceOfAuthority']);
        }
        // ensure the json data is a string
        if (data['userPrincipalName'] && !(typeof data['userPrincipalName'] === 'string' || data['userPrincipalName'] instanceof String)) {
            throw new Error("Expected the field `userPrincipalName` to be a primitive type in the JSON string but got " + data['userPrincipalName']);
        }

        return true;
    }


}



/**
 * Indicates if the attribute is multi-valued or not.
 * @member {Boolean} attributeMultiValues
 */
ObjectWithSyncError.prototype['attributeMultiValues'] = undefined;

/**
 * The attribute name.
 * @member {String} attributeName
 */
ObjectWithSyncError.prototype['attributeName'] = undefined;

/**
 * The attribute value.
 * @member {String} attributeValue
 */
ObjectWithSyncError.prototype['attributeValue'] = undefined;

/**
 * The display name.
 * @member {String} displayName
 */
ObjectWithSyncError.prototype['displayName'] = undefined;

/**
 * The distinguished name.
 * @member {String} distinguishedName
 */
ObjectWithSyncError.prototype['distinguishedName'] = undefined;

/**
 * The error type.
 * @member {String} errorType
 */
ObjectWithSyncError.prototype['errorType'] = undefined;

/**
 * The email.
 * @member {String} mail
 */
ObjectWithSyncError.prototype['mail'] = undefined;

/**
 * The maximum limit.
 * @member {String} maxLimit
 */
ObjectWithSyncError.prototype['maxLimit'] = undefined;

/**
 * The minimum limit.
 * @member {String} minLimit
 */
ObjectWithSyncError.prototype['minLimit'] = undefined;

/**
 * The modified value.
 * @member {String} modififedValue
 */
ObjectWithSyncError.prototype['modififedValue'] = undefined;

/**
 * The object guid.
 * @member {String} objectGuid
 */
ObjectWithSyncError.prototype['objectGuid'] = undefined;

/**
 * The object type.
 * @member {String} objectType
 */
ObjectWithSyncError.prototype['objectType'] = undefined;

/**
 * The source anchor.
 * @member {String} sourceAnchor
 */
ObjectWithSyncError.prototype['sourceAnchor'] = undefined;

/**
 * The source of authority.
 * @member {String} sourceOfAuthority
 */
ObjectWithSyncError.prototype['sourceOfAuthority'] = undefined;

/**
 * The date and time of occurrence.
 * @member {Date} timeOccured
 */
ObjectWithSyncError.prototype['timeOccured'] = undefined;

/**
 * The user principal name.
 * @member {String} userPrincipalName
 */
ObjectWithSyncError.prototype['userPrincipalName'] = undefined;






export default ObjectWithSyncError;

