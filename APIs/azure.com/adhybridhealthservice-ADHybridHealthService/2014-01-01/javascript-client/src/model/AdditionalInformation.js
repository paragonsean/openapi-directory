/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdditionalInformation model module.
 * @module model/AdditionalInformation
 * @version 2014-01-01
 */
class AdditionalInformation {
    /**
     * Constructs a new <code>AdditionalInformation</code>.
     * The additional information for a property.
     * @alias module:model/AdditionalInformation
     */
    constructor() { 
        
        AdditionalInformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdditionalInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalInformation} obj Optional instance to populate.
     * @return {module:model/AdditionalInformation} The populated <code>AdditionalInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalInformation();

            if (data.hasOwnProperty('hasProperties')) {
                obj['hasProperties'] = ApiClient.convertToType(data['hasProperties'], 'Boolean');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], Object);
            }
            if (data.hasOwnProperty('titleName')) {
                obj['titleName'] = ApiClient.convertToType(data['titleName'], 'String');
            }
            if (data.hasOwnProperty('titleValue')) {
                obj['titleValue'] = ApiClient.convertToType(data['titleValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalInformation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['titleName'] && !(typeof data['titleName'] === 'string' || data['titleName'] instanceof String)) {
            throw new Error("Expected the field `titleName` to be a primitive type in the JSON string but got " + data['titleName']);
        }
        // ensure the json data is a string
        if (data['titleValue'] && !(typeof data['titleValue'] === 'string' || data['titleValue'] instanceof String)) {
            throw new Error("Expected the field `titleValue` to be a primitive type in the JSON string but got " + data['titleValue']);
        }

        return true;
    }


}



/**
 * Indicates if properties are present or not.
 * @member {Boolean} hasProperties
 */
AdditionalInformation.prototype['hasProperties'] = undefined;

/**
 * The list of properties which are included in the additional information.
 * @member {Object} properties
 */
AdditionalInformation.prototype['properties'] = undefined;

/**
 * The title name for the property.
 * @member {String} titleName
 */
AdditionalInformation.prototype['titleName'] = undefined;

/**
 * The title value for the property.
 * @member {String} titleValue
 */
AdditionalInformation.prototype['titleValue'] = undefined;






export default AdditionalInformation;

