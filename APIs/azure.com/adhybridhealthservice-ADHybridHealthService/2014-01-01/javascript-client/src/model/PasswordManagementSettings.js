/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PasswordManagementSettings model module.
 * @module model/PasswordManagementSettings
 * @version 2014-01-01
 */
class PasswordManagementSettings {
    /**
     * Constructs a new <code>PasswordManagementSettings</code>.
     * The password management settings.
     * @alias module:model/PasswordManagementSettings
     */
    constructor() { 
        
        PasswordManagementSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PasswordManagementSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PasswordManagementSettings} obj Optional instance to populate.
     * @return {module:model/PasswordManagementSettings} The populated <code>PasswordManagementSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PasswordManagementSettings();

            if (data.hasOwnProperty('connectTo')) {
                obj['connectTo'] = ApiClient.convertToType(data['connectTo'], 'String');
            }
            if (data.hasOwnProperty('connectionTimeout')) {
                obj['connectionTimeout'] = ApiClient.convertToType(data['connectionTimeout'], 'Number');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('extensionFilePath')) {
                obj['extensionFilePath'] = ApiClient.convertToType(data['extensionFilePath'], 'String');
            }
            if (data.hasOwnProperty('maximumRetryCount')) {
                obj['maximumRetryCount'] = ApiClient.convertToType(data['maximumRetryCount'], 'Number');
            }
            if (data.hasOwnProperty('requiresSecureConnection')) {
                obj['requiresSecureConnection'] = ApiClient.convertToType(data['requiresSecureConnection'], 'Boolean');
            }
            if (data.hasOwnProperty('retryIntervalInSeconds')) {
                obj['retryIntervalInSeconds'] = ApiClient.convertToType(data['retryIntervalInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('supportedPasswordOperations')) {
                obj['supportedPasswordOperations'] = ApiClient.convertToType(data['supportedPasswordOperations'], 'String');
            }
            if (data.hasOwnProperty('unlockAccount')) {
                obj['unlockAccount'] = ApiClient.convertToType(data['unlockAccount'], 'Boolean');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PasswordManagementSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PasswordManagementSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectTo'] && !(typeof data['connectTo'] === 'string' || data['connectTo'] instanceof String)) {
            throw new Error("Expected the field `connectTo` to be a primitive type in the JSON string but got " + data['connectTo']);
        }
        // ensure the json data is a string
        if (data['extensionFilePath'] && !(typeof data['extensionFilePath'] === 'string' || data['extensionFilePath'] instanceof String)) {
            throw new Error("Expected the field `extensionFilePath` to be a primitive type in the JSON string but got " + data['extensionFilePath']);
        }
        // ensure the json data is a string
        if (data['supportedPasswordOperations'] && !(typeof data['supportedPasswordOperations'] === 'string' || data['supportedPasswordOperations'] instanceof String)) {
            throw new Error("Expected the field `supportedPasswordOperations` to be a primitive type in the JSON string but got " + data['supportedPasswordOperations']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}



/**
 * Connection point of password management.
 * @member {String} connectTo
 */
PasswordManagementSettings.prototype['connectTo'] = undefined;

/**
 * Connection timeout for password extension.
 * @member {Number} connectionTimeout
 */
PasswordManagementSettings.prototype['connectionTimeout'] = undefined;

/**
 * Indicates if the password extension is enabled.
 * @member {Boolean} enabled
 */
PasswordManagementSettings.prototype['enabled'] = undefined;

/**
 * The file path of the password management extension.
 * @member {String} extensionFilePath
 */
PasswordManagementSettings.prototype['extensionFilePath'] = undefined;

/**
 * The maximum number of retries.
 * @member {Number} maximumRetryCount
 */
PasswordManagementSettings.prototype['maximumRetryCount'] = undefined;

/**
 * Indicates if a secure connection is required for password management.
 * @member {Boolean} requiresSecureConnection
 */
PasswordManagementSettings.prototype['requiresSecureConnection'] = undefined;

/**
 * The time between retries.
 * @member {Number} retryIntervalInSeconds
 */
PasswordManagementSettings.prototype['retryIntervalInSeconds'] = undefined;

/**
 * The supported password operations.
 * @member {module:model/PasswordManagementSettings.SupportedPasswordOperationsEnum} supportedPasswordOperations
 */
PasswordManagementSettings.prototype['supportedPasswordOperations'] = undefined;

/**
 * Indicates if accounts should be unlocked when resetting password.
 * @member {Boolean} unlockAccount
 */
PasswordManagementSettings.prototype['unlockAccount'] = undefined;

/**
 * User to execute password extension.
 * @member {String} user
 */
PasswordManagementSettings.prototype['user'] = undefined;





/**
 * Allowed values for the <code>supportedPasswordOperations</code> property.
 * @enum {String}
 * @readonly
 */
PasswordManagementSettings['SupportedPasswordOperationsEnum'] = {

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "Set"
     * @const
     */
    "Set": "Set",

    /**
     * value: "Change"
     * @const
     */
    "Change": "Change"
};



export default PasswordManagementSettings;

