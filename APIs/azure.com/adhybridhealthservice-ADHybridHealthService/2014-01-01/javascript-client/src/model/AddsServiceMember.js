/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Hotfix from './Hotfix';
import Item from './Item';

/**
 * The AddsServiceMember model module.
 * @module model/AddsServiceMember
 * @version 2014-01-01
 */
class AddsServiceMember {
    /**
     * Constructs a new <code>AddsServiceMember</code>.
     * The server details for ADDS service.
     * @alias module:model/AddsServiceMember
     */
    constructor() { 
        
        AddsServiceMember.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AddsServiceMember</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddsServiceMember} obj Optional instance to populate.
     * @return {module:model/AddsServiceMember} The populated <code>AddsServiceMember</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddsServiceMember();

            if (data.hasOwnProperty('activeAlerts')) {
                obj['activeAlerts'] = ApiClient.convertToType(data['activeAlerts'], 'Number');
            }
            if (data.hasOwnProperty('additionalInformation')) {
                obj['additionalInformation'] = ApiClient.convertToType(data['additionalInformation'], 'String');
            }
            if (data.hasOwnProperty('addsRoles')) {
                obj['addsRoles'] = ApiClient.convertToType(data['addsRoles'], ['String']);
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('dcTypes')) {
                obj['dcTypes'] = ApiClient.convertToType(data['dcTypes'], ['String']);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [Item]);
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('disabledReason')) {
                obj['disabledReason'] = ApiClient.convertToType(data['disabledReason'], 'Number');
            }
            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('gcReachable')) {
                obj['gcReachable'] = ApiClient.convertToType(data['gcReachable'], 'Boolean');
            }
            if (data.hasOwnProperty('installedQfes')) {
                obj['installedQfes'] = ApiClient.convertToType(data['installedQfes'], [Hotfix]);
            }
            if (data.hasOwnProperty('isAdvertising')) {
                obj['isAdvertising'] = ApiClient.convertToType(data['isAdvertising'], 'Boolean');
            }
            if (data.hasOwnProperty('lastDisabled')) {
                obj['lastDisabled'] = ApiClient.convertToType(data['lastDisabled'], 'Date');
            }
            if (data.hasOwnProperty('lastReboot')) {
                obj['lastReboot'] = ApiClient.convertToType(data['lastReboot'], 'Date');
            }
            if (data.hasOwnProperty('lastServerReportedMonitoringLevelChange')) {
                obj['lastServerReportedMonitoringLevelChange'] = ApiClient.convertToType(data['lastServerReportedMonitoringLevelChange'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('machineId')) {
                obj['machineId'] = ApiClient.convertToType(data['machineId'], 'String');
            }
            if (data.hasOwnProperty('machineName')) {
                obj['machineName'] = ApiClient.convertToType(data['machineName'], 'String');
            }
            if (data.hasOwnProperty('monitoringConfigurationsComputed')) {
                obj['monitoringConfigurationsComputed'] = ApiClient.convertToType(data['monitoringConfigurationsComputed'], [Item]);
            }
            if (data.hasOwnProperty('monitoringConfigurationsCustomized')) {
                obj['monitoringConfigurationsCustomized'] = ApiClient.convertToType(data['monitoringConfigurationsCustomized'], [Item]);
            }
            if (data.hasOwnProperty('osName')) {
                obj['osName'] = ApiClient.convertToType(data['osName'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('pdcReachable')) {
                obj['pdcReachable'] = ApiClient.convertToType(data['pdcReachable'], 'Boolean');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [Item]);
            }
            if (data.hasOwnProperty('recommendedQfes')) {
                obj['recommendedQfes'] = ApiClient.convertToType(data['recommendedQfes'], [Hotfix]);
            }
            if (data.hasOwnProperty('resolvedAlerts')) {
                obj['resolvedAlerts'] = ApiClient.convertToType(data['resolvedAlerts'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('serverReportedMonitoringLevel')) {
                obj['serverReportedMonitoringLevel'] = ApiClient.convertToType(data['serverReportedMonitoringLevel'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('serviceMemberId')) {
                obj['serviceMemberId'] = ApiClient.convertToType(data['serviceMemberId'], 'String');
            }
            if (data.hasOwnProperty('siteName')) {
                obj['siteName'] = ApiClient.convertToType(data['siteName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('sysvolState')) {
                obj['sysvolState'] = ApiClient.convertToType(data['sysvolState'], 'Boolean');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddsServiceMember</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddsServiceMember</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalInformation'] && !(typeof data['additionalInformation'] === 'string' || data['additionalInformation'] instanceof String)) {
            throw new Error("Expected the field `additionalInformation` to be a primitive type in the JSON string but got " + data['additionalInformation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['addsRoles'])) {
            throw new Error("Expected the field `addsRoles` to be an array in the JSON data but got " + data['addsRoles']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dcTypes'])) {
            throw new Error("Expected the field `dcTypes` to be an array in the JSON data but got " + data['dcTypes']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                Item.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        if (data['installedQfes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['installedQfes'])) {
                throw new Error("Expected the field `installedQfes` to be an array in the JSON data but got " + data['installedQfes']);
            }
            // validate the optional field `installedQfes` (array)
            for (const item of data['installedQfes']) {
                Hotfix.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['machineId'] && !(typeof data['machineId'] === 'string' || data['machineId'] instanceof String)) {
            throw new Error("Expected the field `machineId` to be a primitive type in the JSON string but got " + data['machineId']);
        }
        // ensure the json data is a string
        if (data['machineName'] && !(typeof data['machineName'] === 'string' || data['machineName'] instanceof String)) {
            throw new Error("Expected the field `machineName` to be a primitive type in the JSON string but got " + data['machineName']);
        }
        if (data['monitoringConfigurationsComputed']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['monitoringConfigurationsComputed'])) {
                throw new Error("Expected the field `monitoringConfigurationsComputed` to be an array in the JSON data but got " + data['monitoringConfigurationsComputed']);
            }
            // validate the optional field `monitoringConfigurationsComputed` (array)
            for (const item of data['monitoringConfigurationsComputed']) {
                Item.validateJSON(item);
            };
        }
        if (data['monitoringConfigurationsCustomized']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['monitoringConfigurationsCustomized'])) {
                throw new Error("Expected the field `monitoringConfigurationsCustomized` to be an array in the JSON data but got " + data['monitoringConfigurationsCustomized']);
            }
            // validate the optional field `monitoringConfigurationsCustomized` (array)
            for (const item of data['monitoringConfigurationsCustomized']) {
                Item.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['osName'] && !(typeof data['osName'] === 'string' || data['osName'] instanceof String)) {
            throw new Error("Expected the field `osName` to be a primitive type in the JSON string but got " + data['osName']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                Item.validateJSON(item);
            };
        }
        if (data['recommendedQfes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recommendedQfes'])) {
                throw new Error("Expected the field `recommendedQfes` to be an array in the JSON data but got " + data['recommendedQfes']);
            }
            // validate the optional field `recommendedQfes` (array)
            for (const item of data['recommendedQfes']) {
                Hotfix.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['serverReportedMonitoringLevel'] && !(typeof data['serverReportedMonitoringLevel'] === 'string' || data['serverReportedMonitoringLevel'] instanceof String)) {
            throw new Error("Expected the field `serverReportedMonitoringLevel` to be a primitive type in the JSON string but got " + data['serverReportedMonitoringLevel']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['serviceMemberId'] && !(typeof data['serviceMemberId'] === 'string' || data['serviceMemberId'] instanceof String)) {
            throw new Error("Expected the field `serviceMemberId` to be a primitive type in the JSON string but got " + data['serviceMemberId']);
        }
        // ensure the json data is a string
        if (data['siteName'] && !(typeof data['siteName'] === 'string' || data['siteName'] instanceof String)) {
            throw new Error("Expected the field `siteName` to be a primitive type in the JSON string but got " + data['siteName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}



/**
 * The total number of alerts that are currently active for the server.
 * @member {Number} activeAlerts
 */
AddsServiceMember.prototype['activeAlerts'] = undefined;

/**
 * The additional information, if any, for the server.
 * @member {String} additionalInformation
 */
AddsServiceMember.prototype['additionalInformation'] = undefined;

/**
 * The list of ADDS roles.
 * @member {Array.<String>} addsRoles
 */
AddsServiceMember.prototype['addsRoles'] = undefined;

/**
 * The date time , in UTC, when the server was onboarded to Azure Active Directory Connect Health.
 * @member {Date} createdDate
 */
AddsServiceMember.prototype['createdDate'] = undefined;

/**
 * The list of domain controller types.
 * @member {Array.<String>} dcTypes
 */
AddsServiceMember.prototype['dcTypes'] = undefined;

/**
 * The server specific configuration related dimensions.
 * @member {Array.<module:model/Item>} dimensions
 */
AddsServiceMember.prototype['dimensions'] = undefined;

/**
 * Indicates if the server is disabled or not. 
 * @member {Boolean} disabled
 */
AddsServiceMember.prototype['disabled'] = undefined;

/**
 * The reason for disabling the server.
 * @member {Number} disabledReason
 */
AddsServiceMember.prototype['disabledReason'] = undefined;

/**
 * The domain name.
 * @member {String} domainName
 */
AddsServiceMember.prototype['domainName'] = undefined;

/**
 * Indicates if the global catalog for this domain is reachable or not.
 * @member {Boolean} gcReachable
 */
AddsServiceMember.prototype['gcReachable'] = undefined;

/**
 * The list of installed QFEs for the server.
 * @member {Array.<module:model/Hotfix>} installedQfes
 */
AddsServiceMember.prototype['installedQfes'] = undefined;

/**
 * Indicates if the Dc is advertising or not.
 * @member {Boolean} isAdvertising
 */
AddsServiceMember.prototype['isAdvertising'] = undefined;

/**
 * The date and time , in UTC, when the server was last disabled.
 * @member {Date} lastDisabled
 */
AddsServiceMember.prototype['lastDisabled'] = undefined;

/**
 * The date and time, in UTC, when the server was last rebooted.
 * @member {Date} lastReboot
 */
AddsServiceMember.prototype['lastReboot'] = undefined;

/**
 * The date and time, in UTC, when the server's data monitoring configuration was last changed.
 * @member {Date} lastServerReportedMonitoringLevelChange
 */
AddsServiceMember.prototype['lastServerReportedMonitoringLevelChange'] = undefined;

/**
 * The date and time, in UTC, when the server properties were last updated.
 * @member {Date} lastUpdated
 */
AddsServiceMember.prototype['lastUpdated'] = undefined;

/**
 * The id of the machine.
 * @member {String} machineId
 */
AddsServiceMember.prototype['machineId'] = undefined;

/**
 * The name of the server.
 * @member {String} machineName
 */
AddsServiceMember.prototype['machineName'] = undefined;

/**
 * The monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.
 * @member {Array.<module:model/Item>} monitoringConfigurationsComputed
 */
AddsServiceMember.prototype['monitoringConfigurationsComputed'] = undefined;

/**
 * The customized monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.
 * @member {Array.<module:model/Item>} monitoringConfigurationsCustomized
 */
AddsServiceMember.prototype['monitoringConfigurationsCustomized'] = undefined;

/**
 * The name of the operating system installed in the machine.
 * @member {String} osName
 */
AddsServiceMember.prototype['osName'] = undefined;

/**
 * The version of the operating system installed in the machine.
 * @member {String} osVersion
 */
AddsServiceMember.prototype['osVersion'] = undefined;

/**
 * Indicates if the primary domain controller is reachable or not.
 * @member {Boolean} pdcReachable
 */
AddsServiceMember.prototype['pdcReachable'] = undefined;

/**
 * Server specific properties.
 * @member {Array.<module:model/Item>} properties
 */
AddsServiceMember.prototype['properties'] = undefined;

/**
 * The list of recommended hotfixes for the server.
 * @member {Array.<module:model/Hotfix>} recommendedQfes
 */
AddsServiceMember.prototype['recommendedQfes'] = undefined;

/**
 * The total count of alerts that are resolved for this server.
 * @member {Number} resolvedAlerts
 */
AddsServiceMember.prototype['resolvedAlerts'] = undefined;

/**
 * The service role that is being monitored in the server.
 * @member {String} role
 */
AddsServiceMember.prototype['role'] = undefined;

/**
 * The monitoring level reported by the server.
 * @member {module:model/AddsServiceMember.ServerReportedMonitoringLevelEnum} serverReportedMonitoringLevel
 */
AddsServiceMember.prototype['serverReportedMonitoringLevel'] = undefined;

/**
 * The service id to whom this server belongs.
 * @member {String} serviceId
 */
AddsServiceMember.prototype['serviceId'] = undefined;

/**
 * The id of the server.
 * @member {String} serviceMemberId
 */
AddsServiceMember.prototype['serviceMemberId'] = undefined;

/**
 * The site name.
 * @member {String} siteName
 */
AddsServiceMember.prototype['siteName'] = undefined;

/**
 * The health status of the server.
 * @member {String} status
 */
AddsServiceMember.prototype['status'] = undefined;

/**
 * Indicates if the SYSVOL state is healthy or not.
 * @member {Boolean} sysvolState
 */
AddsServiceMember.prototype['sysvolState'] = undefined;

/**
 * The tenant id to whom this server belongs.
 * @member {String} tenantId
 */
AddsServiceMember.prototype['tenantId'] = undefined;





/**
 * Allowed values for the <code>serverReportedMonitoringLevel</code> property.
 * @enum {String}
 * @readonly
 */
AddsServiceMember['ServerReportedMonitoringLevelEnum'] = {

    /**
     * value: "Partial"
     * @const
     */
    "Partial": "Partial",

    /**
     * value: "Full"
     * @const
     */
    "Full": "Full",

    /**
     * value: "Off"
     * @const
     */
    "Off": "Off"
};



export default AddsServiceMember;

