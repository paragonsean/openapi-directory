/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValueDelta from './ValueDelta';

/**
 * The AttributeDelta model module.
 * @module model/AttributeDelta
 * @version 2014-01-01
 */
class AttributeDelta {
    /**
     * Constructs a new <code>AttributeDelta</code>.
     * The delta attributes.
     * @alias module:model/AttributeDelta
     */
    constructor() { 
        
        AttributeDelta.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeDelta</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeDelta} obj Optional instance to populate.
     * @return {module:model/AttributeDelta} The populated <code>AttributeDelta</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeDelta();

            if (data.hasOwnProperty('multiValued')) {
                obj['multiValued'] = ApiClient.convertToType(data['multiValued'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'String');
            }
            if (data.hasOwnProperty('valueType')) {
                obj['valueType'] = ApiClient.convertToType(data['valueType'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [ValueDelta]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeDelta</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeDelta</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['operationType'] && !(typeof data['operationType'] === 'string' || data['operationType'] instanceof String)) {
            throw new Error("Expected the field `operationType` to be a primitive type in the JSON string but got " + data['operationType']);
        }
        // ensure the json data is a string
        if (data['valueType'] && !(typeof data['valueType'] === 'string' || data['valueType'] instanceof String)) {
            throw new Error("Expected the field `valueType` to be a primitive type in the JSON string but got " + data['valueType']);
        }
        if (data['values']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['values'])) {
                throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
            }
            // validate the optional field `values` (array)
            for (const item of data['values']) {
                ValueDelta.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Indicates if the attribute delta is multivalued or not.
 * @member {Boolean} multiValued
 */
AttributeDelta.prototype['multiValued'] = undefined;

/**
 * The name of the attribute delta.
 * @member {String} name
 */
AttributeDelta.prototype['name'] = undefined;

/**
 * The attribute delta operation type.
 * @member {module:model/AttributeDelta.OperationTypeEnum} operationType
 */
AttributeDelta.prototype['operationType'] = undefined;

/**
 * The value type.
 * @member {module:model/AttributeDelta.ValueTypeEnum} valueType
 */
AttributeDelta.prototype['valueType'] = undefined;

/**
 * The delta values.
 * @member {Array.<module:model/ValueDelta>} values
 */
AttributeDelta.prototype['values'] = undefined;





/**
 * Allowed values for the <code>operationType</code> property.
 * @enum {String}
 * @readonly
 */
AttributeDelta['OperationTypeEnum'] = {

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "Add"
     * @const
     */
    "Add": "Add",

    /**
     * value: "Replace"
     * @const
     */
    "Replace": "Replace",

    /**
     * value: "Update"
     * @const
     */
    "Update": "Update",

    /**
     * value: "Delete"
     * @const
     */
    "Delete": "Delete"
};


/**
 * Allowed values for the <code>valueType</code> property.
 * @enum {String}
 * @readonly
 */
AttributeDelta['ValueTypeEnum'] = {

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "Dn"
     * @const
     */
    "Dn": "Dn",

    /**
     * value: "Binary"
     * @const
     */
    "Binary": "Binary",

    /**
     * value: "String"
     * @const
     */
    "String": "String",

    /**
     * value: "Integer"
     * @const
     */
    "Integer": "Integer",

    /**
     * value: "Boolean"
     * @const
     */
    "Boolean": "Boolean"
};



export default AttributeDelta;

