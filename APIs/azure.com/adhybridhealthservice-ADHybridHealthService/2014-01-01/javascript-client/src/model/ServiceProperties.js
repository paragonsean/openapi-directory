/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceProperties model module.
 * @module model/ServiceProperties
 * @version 2014-01-01
 */
class ServiceProperties {
    /**
     * Constructs a new <code>ServiceProperties</code>.
     * The service properties for a given service.
     * @alias module:model/ServiceProperties
     */
    constructor() { 
        
        ServiceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceProperties} obj Optional instance to populate.
     * @return {module:model/ServiceProperties} The populated <code>ServiceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceProperties();

            if (data.hasOwnProperty('activeAlerts')) {
                obj['activeAlerts'] = ApiClient.convertToType(data['activeAlerts'], 'Number');
            }
            if (data.hasOwnProperty('additionalInformation')) {
                obj['additionalInformation'] = ApiClient.convertToType(data['additionalInformation'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('customNotificationEmails')) {
                obj['customNotificationEmails'] = ApiClient.convertToType(data['customNotificationEmails'], ['String']);
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('health')) {
                obj['health'] = ApiClient.convertToType(data['health'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lastDisabled')) {
                obj['lastDisabled'] = ApiClient.convertToType(data['lastDisabled'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('monitoringConfigurationsComputed')) {
                obj['monitoringConfigurationsComputed'] = ApiClient.convertToType(data['monitoringConfigurationsComputed'], Object);
            }
            if (data.hasOwnProperty('monitoringConfigurationsCustomized')) {
                obj['monitoringConfigurationsCustomized'] = ApiClient.convertToType(data['monitoringConfigurationsCustomized'], Object);
            }
            if (data.hasOwnProperty('notificationEmailEnabled')) {
                obj['notificationEmailEnabled'] = ApiClient.convertToType(data['notificationEmailEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('notificationEmailEnabledForGlobalAdmins')) {
                obj['notificationEmailEnabledForGlobalAdmins'] = ApiClient.convertToType(data['notificationEmailEnabledForGlobalAdmins'], 'Boolean');
            }
            if (data.hasOwnProperty('notificationEmails')) {
                obj['notificationEmails'] = ApiClient.convertToType(data['notificationEmails'], ['String']);
            }
            if (data.hasOwnProperty('notificationEmailsEnabledForGlobalAdmins')) {
                obj['notificationEmailsEnabledForGlobalAdmins'] = ApiClient.convertToType(data['notificationEmailsEnabledForGlobalAdmins'], 'Boolean');
            }
            if (data.hasOwnProperty('originalDisabledState')) {
                obj['originalDisabledState'] = ApiClient.convertToType(data['originalDisabledState'], 'Boolean');
            }
            if (data.hasOwnProperty('resolvedAlerts')) {
                obj['resolvedAlerts'] = ApiClient.convertToType(data['resolvedAlerts'], 'Number');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('serviceName')) {
                obj['serviceName'] = ApiClient.convertToType(data['serviceName'], 'String');
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('simpleProperties')) {
                obj['simpleProperties'] = ApiClient.convertToType(data['simpleProperties'], Object);
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalInformation'] && !(typeof data['additionalInformation'] === 'string' || data['additionalInformation'] instanceof String)) {
            throw new Error("Expected the field `additionalInformation` to be a primitive type in the JSON string but got " + data['additionalInformation']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['customNotificationEmails'])) {
            throw new Error("Expected the field `customNotificationEmails` to be an array in the JSON data but got " + data['customNotificationEmails']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['health'] && !(typeof data['health'] === 'string' || data['health'] instanceof String)) {
            throw new Error("Expected the field `health` to be a primitive type in the JSON string but got " + data['health']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notificationEmails'])) {
            throw new Error("Expected the field `notificationEmails` to be an array in the JSON data but got " + data['notificationEmails']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['serviceName'] && !(typeof data['serviceName'] === 'string' || data['serviceName'] instanceof String)) {
            throw new Error("Expected the field `serviceName` to be a primitive type in the JSON string but got " + data['serviceName']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The count of alerts that are currently active for the service.
 * @member {Number} activeAlerts
 */
ServiceProperties.prototype['activeAlerts'] = undefined;

/**
 * The additional information related to the service.
 * @member {String} additionalInformation
 */
ServiceProperties.prototype['additionalInformation'] = undefined;

/**
 * The date and time, in UTC, when the service was onboarded to Azure Active Directory Connect Health.
 * @member {Date} createdDate
 */
ServiceProperties.prototype['createdDate'] = undefined;

/**
 * The list of additional emails that are configured to receive notifications about the service.
 * @member {Array.<String>} customNotificationEmails
 */
ServiceProperties.prototype['customNotificationEmails'] = undefined;

/**
 * Indicates if the service is disabled or not.
 * @member {Boolean} disabled
 */
ServiceProperties.prototype['disabled'] = undefined;

/**
 * The display name of the service.
 * @member {String} displayName
 */
ServiceProperties.prototype['displayName'] = undefined;

/**
 * The health of the service.
 * @member {String} health
 */
ServiceProperties.prototype['health'] = undefined;

/**
 * The id of the service.
 * @member {String} id
 */
ServiceProperties.prototype['id'] = undefined;

/**
 * The date and time, in UTC, when the service was last disabled.
 * @member {Date} lastDisabled
 */
ServiceProperties.prototype['lastDisabled'] = undefined;

/**
 * The date or time , in UTC, when the service properties were last updated.
 * @member {Date} lastUpdated
 */
ServiceProperties.prototype['lastUpdated'] = undefined;

/**
 * The monitoring configuration of the service which determines what activities are monitored by Azure Active Directory Connect Health.
 * @member {Object} monitoringConfigurationsComputed
 */
ServiceProperties.prototype['monitoringConfigurationsComputed'] = undefined;

/**
 * The customized monitoring configuration of the service which determines what activities are monitored by Azure Active Directory Connect Health.
 * @member {Object} monitoringConfigurationsCustomized
 */
ServiceProperties.prototype['monitoringConfigurationsCustomized'] = undefined;

/**
 * Indicates if email notification is enabled or not.
 * @member {Boolean} notificationEmailEnabled
 */
ServiceProperties.prototype['notificationEmailEnabled'] = undefined;

/**
 * Indicates if email notification is enabled for global administrators of the tenant.
 * @member {Boolean} notificationEmailEnabledForGlobalAdmins
 */
ServiceProperties.prototype['notificationEmailEnabledForGlobalAdmins'] = undefined;

/**
 * The list of emails to whom service notifications will be sent.
 * @member {Array.<String>} notificationEmails
 */
ServiceProperties.prototype['notificationEmails'] = undefined;

/**
 * Indicates if email notification is enabled for global administrators of the tenant.
 * @member {Boolean} notificationEmailsEnabledForGlobalAdmins
 */
ServiceProperties.prototype['notificationEmailsEnabledForGlobalAdmins'] = undefined;

/**
 * Gets the original disable state.
 * @member {Boolean} originalDisabledState
 */
ServiceProperties.prototype['originalDisabledState'] = undefined;

/**
 * The total count of alerts that has been resolved for the service.
 * @member {Number} resolvedAlerts
 */
ServiceProperties.prototype['resolvedAlerts'] = undefined;

/**
 * The id of the service.
 * @member {String} serviceId
 */
ServiceProperties.prototype['serviceId'] = undefined;

/**
 * The name of the service.
 * @member {String} serviceName
 */
ServiceProperties.prototype['serviceName'] = undefined;

/**
 * The signature of the service.
 * @member {String} signature
 */
ServiceProperties.prototype['signature'] = undefined;

/**
 * List of service specific configuration properties.
 * @member {Object} simpleProperties
 */
ServiceProperties.prototype['simpleProperties'] = undefined;

/**
 * The id of the tenant to which the service is registered to.
 * @member {String} tenantId
 */
ServiceProperties.prototype['tenantId'] = undefined;

/**
 * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
 * @member {String} type
 */
ServiceProperties.prototype['type'] = undefined;






export default ServiceProperties;

