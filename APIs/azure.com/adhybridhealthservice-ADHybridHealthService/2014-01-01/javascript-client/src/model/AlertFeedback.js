/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AlertFeedback model module.
 * @module model/AlertFeedback
 * @version 2014-01-01
 */
class AlertFeedback {
    /**
     * Constructs a new <code>AlertFeedback</code>.
     * The alert feedback details.
     * @alias module:model/AlertFeedback
     */
    constructor() { 
        
        AlertFeedback.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlertFeedback</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertFeedback} obj Optional instance to populate.
     * @return {module:model/AlertFeedback} The populated <code>AlertFeedback</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertFeedback();

            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('consentedToShare')) {
                obj['consentedToShare'] = ApiClient.convertToType(data['consentedToShare'], 'Boolean');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('feedback')) {
                obj['feedback'] = ApiClient.convertToType(data['feedback'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('serviceMemberId')) {
                obj['serviceMemberId'] = ApiClient.convertToType(data['serviceMemberId'], 'String');
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertFeedback</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertFeedback</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }
        // ensure the json data is a string
        if (data['feedback'] && !(typeof data['feedback'] === 'string' || data['feedback'] instanceof String)) {
            throw new Error("Expected the field `feedback` to be a primitive type in the JSON string but got " + data['feedback']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['serviceMemberId'] && !(typeof data['serviceMemberId'] === 'string' || data['serviceMemberId'] instanceof String)) {
            throw new Error("Expected the field `serviceMemberId` to be a primitive type in the JSON string but got " + data['serviceMemberId']);
        }
        // ensure the json data is a string
        if (data['shortName'] && !(typeof data['shortName'] === 'string' || data['shortName'] instanceof String)) {
            throw new Error("Expected the field `shortName` to be a primitive type in the JSON string but got " + data['shortName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Additional comments related to the alert.
 * @member {String} comment
 */
AlertFeedback.prototype['comment'] = undefined;

/**
 * Indicates if the alert feedback can be shared from product team.
 * @member {Boolean} consentedToShare
 */
AlertFeedback.prototype['consentedToShare'] = undefined;

/**
 * The date and time,in UTC,when the alert was created.
 * @member {Date} createdDate
 */
AlertFeedback.prototype['createdDate'] = undefined;

/**
 * The feedback for the alert which indicates if the customer likes or dislikes the alert.
 * @member {String} feedback
 */
AlertFeedback.prototype['feedback'] = undefined;

/**
 * The alert level which indicates the severity of the alert.
 * @member {String} level
 */
AlertFeedback.prototype['level'] = undefined;

/**
 * The server Id of the alert.
 * @member {String} serviceMemberId
 */
AlertFeedback.prototype['serviceMemberId'] = undefined;

/**
 * The alert short name.
 * @member {String} shortName
 */
AlertFeedback.prototype['shortName'] = undefined;

/**
 * The alert state which can be either active or resolved with multiple resolution types.
 * @member {String} state
 */
AlertFeedback.prototype['state'] = undefined;






export default AlertFeedback;

