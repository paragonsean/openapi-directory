/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InboundReplicationNeighbor from './InboundReplicationNeighbor';

/**
 * The ReplicationSummary model module.
 * @module model/ReplicationSummary
 * @version 2014-01-01
 */
class ReplicationSummary {
    /**
     * Constructs a new <code>ReplicationSummary</code>.
     * The replication summary for a domain controller.
     * @alias module:model/ReplicationSummary
     */
    constructor() { 
        
        ReplicationSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplicationSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplicationSummary} obj Optional instance to populate.
     * @return {module:model/ReplicationSummary} The populated <code>ReplicationSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplicationSummary();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('inboundNeighborCollection')) {
                obj['inboundNeighborCollection'] = ApiClient.convertToType(data['inboundNeighborCollection'], [InboundReplicationNeighbor]);
            }
            if (data.hasOwnProperty('lastAttemptedSync')) {
                obj['lastAttemptedSync'] = ApiClient.convertToType(data['lastAttemptedSync'], 'Date');
            }
            if (data.hasOwnProperty('lastSuccessfulSync')) {
                obj['lastSuccessfulSync'] = ApiClient.convertToType(data['lastSuccessfulSync'], 'Date');
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = ApiClient.convertToType(data['site'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('targetServer')) {
                obj['targetServer'] = ApiClient.convertToType(data['targetServer'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplicationSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplicationSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        if (data['inboundNeighborCollection']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inboundNeighborCollection'])) {
                throw new Error("Expected the field `inboundNeighborCollection` to be an array in the JSON data but got " + data['inboundNeighborCollection']);
            }
            // validate the optional field `inboundNeighborCollection` (array)
            for (const item of data['inboundNeighborCollection']) {
                InboundReplicationNeighbor.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['site'] && !(typeof data['site'] === 'string' || data['site'] instanceof String)) {
            throw new Error("Expected the field `site` to be a primitive type in the JSON string but got " + data['site']);
        }
        // ensure the json data is a string
        if (data['targetServer'] && !(typeof data['targetServer'] === 'string' || data['targetServer'] instanceof String)) {
            throw new Error("Expected the field `targetServer` to be a primitive type in the JSON string but got " + data['targetServer']);
        }

        return true;
    }


}



/**
 * The domain name for a given domain controller.
 * @member {String} domain
 */
ReplicationSummary.prototype['domain'] = undefined;

/**
 * List of individual domain controller neighbor's inbound replication status.
 * @member {Array.<module:model/InboundReplicationNeighbor>} inboundNeighborCollection
 */
ReplicationSummary.prototype['inboundNeighborCollection'] = undefined;

/**
 * The last time when a sync was attempted for a given domain controller.
 * @member {Date} lastAttemptedSync
 */
ReplicationSummary.prototype['lastAttemptedSync'] = undefined;

/**
 * The time when the last successful sync happened for a given domain controller.
 * @member {Date} lastSuccessfulSync
 */
ReplicationSummary.prototype['lastSuccessfulSync'] = undefined;

/**
 * The site name for a given domain controller.
 * @member {String} site
 */
ReplicationSummary.prototype['site'] = undefined;

/**
 * The health status for a domain controller.
 * @member {Number} status
 */
ReplicationSummary.prototype['status'] = undefined;

/**
 * The domain controller name.
 * @member {String} targetServer
 */
ReplicationSummary.prototype['targetServer'] = undefined;






export default ReplicationSummary;

