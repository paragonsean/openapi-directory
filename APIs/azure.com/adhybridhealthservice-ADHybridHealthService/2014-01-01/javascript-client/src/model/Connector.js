/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Partition from './Partition';
import RunProfile from './RunProfile';

/**
 * The Connector model module.
 * @module model/Connector
 * @version 2014-01-01
 */
class Connector {
    /**
     * Constructs a new <code>Connector</code>.
     * The connect details.
     * @alias module:model/Connector
     */
    constructor() { 
        
        Connector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Connector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connector} obj Optional instance to populate.
     * @return {module:model/Connector} The populated <code>Connector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connector();

            if (data.hasOwnProperty('attributesIncluded')) {
                obj['attributesIncluded'] = ApiClient.convertToType(data['attributesIncluded'], ['String']);
            }
            if (data.hasOwnProperty('classesIncluded')) {
                obj['classesIncluded'] = ApiClient.convertToType(data['classesIncluded'], ['String']);
            }
            if (data.hasOwnProperty('connectorId')) {
                obj['connectorId'] = ApiClient.convertToType(data['connectorId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('partitions')) {
                obj['partitions'] = ApiClient.convertToType(data['partitions'], [Partition]);
            }
            if (data.hasOwnProperty('passwordHashSyncConfiguration')) {
                obj['passwordHashSyncConfiguration'] = ApiClient.convertToType(data['passwordHashSyncConfiguration'], Object);
            }
            if (data.hasOwnProperty('passwordManagementSettings')) {
                obj['passwordManagementSettings'] = ApiClient.convertToType(data['passwordManagementSettings'], Object);
            }
            if (data.hasOwnProperty('runProfiles')) {
                obj['runProfiles'] = ApiClient.convertToType(data['runProfiles'], [RunProfile]);
            }
            if (data.hasOwnProperty('schemaXml')) {
                obj['schemaXml'] = ApiClient.convertToType(data['schemaXml'], 'String');
            }
            if (data.hasOwnProperty('timeCreated')) {
                obj['timeCreated'] = ApiClient.convertToType(data['timeCreated'], 'Date');
            }
            if (data.hasOwnProperty('timeLastModified')) {
                obj['timeLastModified'] = ApiClient.convertToType(data['timeLastModified'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Connector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Connector</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['attributesIncluded'])) {
            throw new Error("Expected the field `attributesIncluded` to be an array in the JSON data but got " + data['attributesIncluded']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['classesIncluded'])) {
            throw new Error("Expected the field `classesIncluded` to be an array in the JSON data but got " + data['classesIncluded']);
        }
        // ensure the json data is a string
        if (data['connectorId'] && !(typeof data['connectorId'] === 'string' || data['connectorId'] instanceof String)) {
            throw new Error("Expected the field `connectorId` to be a primitive type in the JSON string but got " + data['connectorId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['partitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['partitions'])) {
                throw new Error("Expected the field `partitions` to be an array in the JSON data but got " + data['partitions']);
            }
            // validate the optional field `partitions` (array)
            for (const item of data['partitions']) {
                Partition.validateJSON(item);
            };
        }
        if (data['runProfiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['runProfiles'])) {
                throw new Error("Expected the field `runProfiles` to be an array in the JSON data but got " + data['runProfiles']);
            }
            // validate the optional field `runProfiles` (array)
            for (const item of data['runProfiles']) {
                RunProfile.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['schemaXml'] && !(typeof data['schemaXml'] === 'string' || data['schemaXml'] instanceof String)) {
            throw new Error("Expected the field `schemaXml` to be a primitive type in the JSON string but got " + data['schemaXml']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The attribute inclusion list of the connector.
 * @member {Array.<String>} attributesIncluded
 */
Connector.prototype['attributesIncluded'] = undefined;

/**
 * The class inclusion list of the connector.
 * @member {Array.<String>} classesIncluded
 */
Connector.prototype['classesIncluded'] = undefined;

/**
 * The connector Id.
 * @member {String} connectorId
 */
Connector.prototype['connectorId'] = undefined;

/**
 * The connector description.
 * @member {String} description
 */
Connector.prototype['description'] = undefined;

/**
 * The connector Id.
 * @member {String} id
 */
Connector.prototype['id'] = undefined;

/**
 * The connector name.
 * @member {String} name
 */
Connector.prototype['name'] = undefined;

/**
 * The partitions of the connector.
 * @member {Array.<module:model/Partition>} partitions
 */
Connector.prototype['partitions'] = undefined;

/**
 * The password hash synchronization configuration of the connector.
 * @member {Object} passwordHashSyncConfiguration
 */
Connector.prototype['passwordHashSyncConfiguration'] = undefined;

/**
 * The password management settings of the connector.
 * @member {Object} passwordManagementSettings
 */
Connector.prototype['passwordManagementSettings'] = undefined;

/**
 * The run profiles of the connector.
 * @member {Array.<module:model/RunProfile>} runProfiles
 */
Connector.prototype['runProfiles'] = undefined;

/**
 * The schema xml for the connector.
 * @member {String} schemaXml
 */
Connector.prototype['schemaXml'] = undefined;

/**
 * The date and time when this connector was created.
 * @member {Date} timeCreated
 */
Connector.prototype['timeCreated'] = undefined;

/**
 * The date and time when this connector was last modified.
 * @member {Date} timeLastModified
 */
Connector.prototype['timeLastModified'] = undefined;

/**
 * The connector type.
 * @member {String} type
 */
Connector.prototype['type'] = undefined;

/**
 * The connector version
 * @member {Number} version
 */
Connector.prototype['version'] = undefined;






export default Connector;

