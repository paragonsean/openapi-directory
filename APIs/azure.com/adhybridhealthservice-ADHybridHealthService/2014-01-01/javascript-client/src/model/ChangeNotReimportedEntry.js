/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeDelta from './AttributeDelta';

/**
 * The ChangeNotReimportedEntry model module.
 * @module model/ChangeNotReimportedEntry
 * @version 2014-01-01
 */
class ChangeNotReimportedEntry {
    /**
     * Constructs a new <code>ChangeNotReimportedEntry</code>.
     * The object entry in a change that is not re-imported.
     * @alias module:model/ChangeNotReimportedEntry
     */
    constructor() { 
        
        ChangeNotReimportedEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChangeNotReimportedEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangeNotReimportedEntry} obj Optional instance to populate.
     * @return {module:model/ChangeNotReimportedEntry} The populated <code>ChangeNotReimportedEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangeNotReimportedEntry();

            if (data.hasOwnProperty('anchor')) {
                obj['anchor'] = ApiClient.convertToType(data['anchor'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [AttributeDelta]);
            }
            if (data.hasOwnProperty('dn')) {
                obj['dn'] = ApiClient.convertToType(data['dn'], 'String');
            }
            if (data.hasOwnProperty('dnAttributes')) {
                obj['dnAttributes'] = ApiClient.convertToType(data['dnAttributes'], [AttributeDelta]);
            }
            if (data.hasOwnProperty('objectClasses')) {
                obj['objectClasses'] = ApiClient.convertToType(data['objectClasses'], ['String']);
            }
            if (data.hasOwnProperty('parentAnchor')) {
                obj['parentAnchor'] = ApiClient.convertToType(data['parentAnchor'], 'String');
            }
            if (data.hasOwnProperty('primaryObjectClass')) {
                obj['primaryObjectClass'] = ApiClient.convertToType(data['primaryObjectClass'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangeNotReimportedEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangeNotReimportedEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['anchor'] && !(typeof data['anchor'] === 'string' || data['anchor'] instanceof String)) {
            throw new Error("Expected the field `anchor` to be a primitive type in the JSON string but got " + data['anchor']);
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                AttributeDelta.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dn'] && !(typeof data['dn'] === 'string' || data['dn'] instanceof String)) {
            throw new Error("Expected the field `dn` to be a primitive type in the JSON string but got " + data['dn']);
        }
        if (data['dnAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dnAttributes'])) {
                throw new Error("Expected the field `dnAttributes` to be an array in the JSON data but got " + data['dnAttributes']);
            }
            // validate the optional field `dnAttributes` (array)
            for (const item of data['dnAttributes']) {
                AttributeDelta.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['objectClasses'])) {
            throw new Error("Expected the field `objectClasses` to be an array in the JSON data but got " + data['objectClasses']);
        }
        // ensure the json data is a string
        if (data['parentAnchor'] && !(typeof data['parentAnchor'] === 'string' || data['parentAnchor'] instanceof String)) {
            throw new Error("Expected the field `parentAnchor` to be a primitive type in the JSON string but got " + data['parentAnchor']);
        }
        // ensure the json data is a string
        if (data['primaryObjectClass'] && !(typeof data['primaryObjectClass'] === 'string' || data['primaryObjectClass'] instanceof String)) {
            throw new Error("Expected the field `primaryObjectClass` to be a primitive type in the JSON string but got " + data['primaryObjectClass']);
        }

        return true;
    }


}



/**
 * The anchor.
 * @member {String} anchor
 */
ChangeNotReimportedEntry.prototype['anchor'] = undefined;

/**
 * The attributes.
 * @member {Array.<module:model/AttributeDelta>} attributes
 */
ChangeNotReimportedEntry.prototype['attributes'] = undefined;

/**
 * The distinguished name.
 * @member {String} dn
 */
ChangeNotReimportedEntry.prototype['dn'] = undefined;

/**
 * The delta attributes for distinguished names.
 * @member {Array.<module:model/AttributeDelta>} dnAttributes
 */
ChangeNotReimportedEntry.prototype['dnAttributes'] = undefined;

/**
 * The list of object classes.
 * @member {Array.<String>} objectClasses
 */
ChangeNotReimportedEntry.prototype['objectClasses'] = undefined;

/**
 * The parent anchor.
 * @member {String} parentAnchor
 */
ChangeNotReimportedEntry.prototype['parentAnchor'] = undefined;

/**
 * The primary object class.
 * @member {String} primaryObjectClass
 */
ChangeNotReimportedEntry.prototype['primaryObjectClass'] = undefined;






export default ChangeNotReimportedEntry;

