/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeDelta from './AttributeDelta';

/**
 * The ChangeNotReimportedDelta model module.
 * @module model/ChangeNotReimportedDelta
 * @version 2014-01-01
 */
class ChangeNotReimportedDelta {
    /**
     * Constructs a new <code>ChangeNotReimportedDelta</code>.
     * The delta in a change that is not re-imported.
     * @alias module:model/ChangeNotReimportedDelta
     */
    constructor() { 
        
        ChangeNotReimportedDelta.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChangeNotReimportedDelta</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangeNotReimportedDelta} obj Optional instance to populate.
     * @return {module:model/ChangeNotReimportedDelta} The populated <code>ChangeNotReimportedDelta</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangeNotReimportedDelta();

            if (data.hasOwnProperty('anchor')) {
                obj['anchor'] = ApiClient.convertToType(data['anchor'], 'String');
            }
            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [AttributeDelta]);
            }
            if (data.hasOwnProperty('dnAttributes')) {
                obj['dnAttributes'] = ApiClient.convertToType(data['dnAttributes'], [AttributeDelta]);
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangeNotReimportedDelta</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangeNotReimportedDelta</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['anchor'] && !(typeof data['anchor'] === 'string' || data['anchor'] instanceof String)) {
            throw new Error("Expected the field `anchor` to be a primitive type in the JSON string but got " + data['anchor']);
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                AttributeDelta.validateJSON(item);
            };
        }
        if (data['dnAttributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dnAttributes'])) {
                throw new Error("Expected the field `dnAttributes` to be an array in the JSON data but got " + data['dnAttributes']);
            }
            // validate the optional field `dnAttributes` (array)
            for (const item of data['dnAttributes']) {
                AttributeDelta.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operationType'] && !(typeof data['operationType'] === 'string' || data['operationType'] instanceof String)) {
            throw new Error("Expected the field `operationType` to be a primitive type in the JSON string but got " + data['operationType']);
        }

        return true;
    }


}



/**
 * The anchor.
 * @member {String} anchor
 */
ChangeNotReimportedDelta.prototype['anchor'] = undefined;

/**
 * The attributes.
 * @member {Array.<module:model/AttributeDelta>} attributes
 */
ChangeNotReimportedDelta.prototype['attributes'] = undefined;

/**
 * The delta attributes for distinguished names.
 * @member {Array.<module:model/AttributeDelta>} dnAttributes
 */
ChangeNotReimportedDelta.prototype['dnAttributes'] = undefined;

/**
 * The operation type.
 * @member {module:model/ChangeNotReimportedDelta.OperationTypeEnum} operationType
 */
ChangeNotReimportedDelta.prototype['operationType'] = undefined;





/**
 * Allowed values for the <code>operationType</code> property.
 * @enum {String}
 * @readonly
 */
ChangeNotReimportedDelta['OperationTypeEnum'] = {

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Add"
     * @const
     */
    "Add": "Add",

    /**
     * value: "Replace"
     * @const
     */
    "Replace": "Replace",

    /**
     * value: "Update"
     * @const
     */
    "Update": "Update",

    /**
     * value: "Delete"
     * @const
     */
    "Delete": "Delete",

    /**
     * value: "Obsolete"
     * @const
     */
    "Obsolete": "Obsolete",

    /**
     * value: "DeleteAdd"
     * @const
     */
    "DeleteAdd": "DeleteAdd"
};



export default ChangeNotReimportedDelta;

