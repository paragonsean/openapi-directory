/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricGroup from './MetricGroup';

/**
 * The MetricMetadata model module.
 * @module model/MetricMetadata
 * @version 2014-01-01
 */
class MetricMetadata {
    /**
     * Constructs a new <code>MetricMetadata</code>.
     * The metric meta data
     * @alias module:model/MetricMetadata
     */
    constructor() { 
        
        MetricMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricMetadata} obj Optional instance to populate.
     * @return {module:model/MetricMetadata} The populated <code>MetricMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricMetadata();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('groupings')) {
                obj['groupings'] = ApiClient.convertToType(data['groupings'], [MetricGroup]);
            }
            if (data.hasOwnProperty('isDefault')) {
                obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('isDevOps')) {
                obj['isDevOps'] = ApiClient.convertToType(data['isDevOps'], 'Boolean');
            }
            if (data.hasOwnProperty('isPerfCounter')) {
                obj['isPerfCounter'] = ApiClient.convertToType(data['isPerfCounter'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('maxValue')) {
                obj['maxValue'] = ApiClient.convertToType(data['maxValue'], 'Number');
            }
            if (data.hasOwnProperty('metricName')) {
                obj['metricName'] = ApiClient.convertToType(data['metricName'], 'String');
            }
            if (data.hasOwnProperty('metricsProcessorClassName')) {
                obj['metricsProcessorClassName'] = ApiClient.convertToType(data['metricsProcessorClassName'], 'String');
            }
            if (data.hasOwnProperty('minValue')) {
                obj['minValue'] = ApiClient.convertToType(data['minValue'], 'Number');
            }
            if (data.hasOwnProperty('valueKind')) {
                obj['valueKind'] = ApiClient.convertToType(data['valueKind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['groupings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['groupings'])) {
                throw new Error("Expected the field `groupings` to be an array in the JSON data but got " + data['groupings']);
            }
            // validate the optional field `groupings` (array)
            for (const item of data['groupings']) {
                MetricGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['metricName'] && !(typeof data['metricName'] === 'string' || data['metricName'] instanceof String)) {
            throw new Error("Expected the field `metricName` to be a primitive type in the JSON string but got " + data['metricName']);
        }
        // ensure the json data is a string
        if (data['metricsProcessorClassName'] && !(typeof data['metricsProcessorClassName'] === 'string' || data['metricsProcessorClassName'] instanceof String)) {
            throw new Error("Expected the field `metricsProcessorClassName` to be a primitive type in the JSON string but got " + data['metricsProcessorClassName']);
        }
        // ensure the json data is a string
        if (data['valueKind'] && !(typeof data['valueKind'] === 'string' || data['valueKind'] instanceof String)) {
            throw new Error("Expected the field `valueKind` to be a primitive type in the JSON string but got " + data['valueKind']);
        }

        return true;
    }


}



/**
 * The display name for the metric.
 * @member {String} displayName
 */
MetricMetadata.prototype['displayName'] = undefined;

/**
 * The groupings for the metrics.
 * @member {Array.<module:model/MetricGroup>} groupings
 */
MetricMetadata.prototype['groupings'] = undefined;

/**
 * Indicates if the metric is a default metric or not.
 * @member {Boolean} isDefault
 */
MetricMetadata.prototype['isDefault'] = undefined;

/**
 * Indicates if the metric is visible to DevOps or not.
 * @member {Boolean} isDevOps
 */
MetricMetadata.prototype['isDevOps'] = undefined;

/**
 * Indicates if the metric is a performance counter metric or not.
 * @member {Boolean} isPerfCounter
 */
MetricMetadata.prototype['isPerfCounter'] = undefined;

/**
 * Indicates whether the dashboard to represent the metric is a line, bar,pie, area or donut chart.
 * @member {String} kind
 */
MetricMetadata.prototype['kind'] = undefined;

/**
 * The maximum value.
 * @member {Number} maxValue
 */
MetricMetadata.prototype['maxValue'] = undefined;

/**
 * The metric name
 * @member {String} metricName
 */
MetricMetadata.prototype['metricName'] = undefined;

/**
 * The name of the class which retrieve and process the metric.
 * @member {String} metricsProcessorClassName
 */
MetricMetadata.prototype['metricsProcessorClassName'] = undefined;

/**
 * The minimum value.
 * @member {Number} minValue
 */
MetricMetadata.prototype['minValue'] = undefined;

/**
 * Indicates if the metrics is a rate,value, percent or duration type.
 * @member {String} valueKind
 */
MetricMetadata.prototype['valueKind'] = undefined;






export default MetricMetadata;

