/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChangeNotReimported from './ChangeNotReimported';
import ExtensionErrorInfo from './ExtensionErrorInfo';
import RuleErrorInfo from './RuleErrorInfo';

/**
 * The ImportError model module.
 * @module model/ImportError
 * @version 2014-01-01
 */
class ImportError {
    /**
     * Constructs a new <code>ImportError</code>.
     * The import error details.
     * @alias module:model/ImportError
     */
    constructor() { 
        
        ImportError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportError} obj Optional instance to populate.
     * @return {module:model/ImportError} The populated <code>ImportError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportError();

            if (data.hasOwnProperty('algorithmStepType')) {
                obj['algorithmStepType'] = ApiClient.convertToType(data['algorithmStepType'], 'String');
            }
            if (data.hasOwnProperty('changeNotReimported')) {
                obj['changeNotReimported'] = ChangeNotReimported.constructFromObject(data['changeNotReimported']);
            }
            if (data.hasOwnProperty('connectorId')) {
                obj['connectorId'] = ApiClient.convertToType(data['connectorId'], 'String');
            }
            if (data.hasOwnProperty('csObjectId')) {
                obj['csObjectId'] = ApiClient.convertToType(data['csObjectId'], 'String');
            }
            if (data.hasOwnProperty('dn')) {
                obj['dn'] = ApiClient.convertToType(data['dn'], 'String');
            }
            if (data.hasOwnProperty('extensionErrorInfo')) {
                obj['extensionErrorInfo'] = ExtensionErrorInfo.constructFromObject(data['extensionErrorInfo']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('retryCount')) {
                obj['retryCount'] = ApiClient.convertToType(data['retryCount'], 'Number');
            }
            if (data.hasOwnProperty('ruleErrorInfo')) {
                obj['ruleErrorInfo'] = RuleErrorInfo.constructFromObject(data['ruleErrorInfo']);
            }
            if (data.hasOwnProperty('runStepResultId')) {
                obj['runStepResultId'] = ApiClient.convertToType(data['runStepResultId'], 'String');
            }
            if (data.hasOwnProperty('timeFirstOccurred')) {
                obj['timeFirstOccurred'] = ApiClient.convertToType(data['timeFirstOccurred'], 'Date');
            }
            if (data.hasOwnProperty('timeOccurred')) {
                obj['timeOccurred'] = ApiClient.convertToType(data['timeOccurred'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['algorithmStepType'] && !(typeof data['algorithmStepType'] === 'string' || data['algorithmStepType'] instanceof String)) {
            throw new Error("Expected the field `algorithmStepType` to be a primitive type in the JSON string but got " + data['algorithmStepType']);
        }
        // validate the optional field `changeNotReimported`
        if (data['changeNotReimported']) { // data not null
          ChangeNotReimported.validateJSON(data['changeNotReimported']);
        }
        // ensure the json data is a string
        if (data['connectorId'] && !(typeof data['connectorId'] === 'string' || data['connectorId'] instanceof String)) {
            throw new Error("Expected the field `connectorId` to be a primitive type in the JSON string but got " + data['connectorId']);
        }
        // ensure the json data is a string
        if (data['csObjectId'] && !(typeof data['csObjectId'] === 'string' || data['csObjectId'] instanceof String)) {
            throw new Error("Expected the field `csObjectId` to be a primitive type in the JSON string but got " + data['csObjectId']);
        }
        // ensure the json data is a string
        if (data['dn'] && !(typeof data['dn'] === 'string' || data['dn'] instanceof String)) {
            throw new Error("Expected the field `dn` to be a primitive type in the JSON string but got " + data['dn']);
        }
        // validate the optional field `extensionErrorInfo`
        if (data['extensionErrorInfo']) { // data not null
          ExtensionErrorInfo.validateJSON(data['extensionErrorInfo']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `ruleErrorInfo`
        if (data['ruleErrorInfo']) { // data not null
          RuleErrorInfo.validateJSON(data['ruleErrorInfo']);
        }
        // ensure the json data is a string
        if (data['runStepResultId'] && !(typeof data['runStepResultId'] === 'string' || data['runStepResultId'] instanceof String)) {
            throw new Error("Expected the field `runStepResultId` to be a primitive type in the JSON string but got " + data['runStepResultId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The operation type specific  to error reporting.
 * @member {module:model/ImportError.AlgorithmStepTypeEnum} algorithmStepType
 */
ImportError.prototype['algorithmStepType'] = undefined;

/**
 * @member {module:model/ChangeNotReimported} changeNotReimported
 */
ImportError.prototype['changeNotReimported'] = undefined;

/**
 * The connector Id.
 * @member {String} connectorId
 */
ImportError.prototype['connectorId'] = undefined;

/**
 * The object Id.
 * @member {String} csObjectId
 */
ImportError.prototype['csObjectId'] = undefined;

/**
 * The distinguished name.
 * @member {String} dn
 */
ImportError.prototype['dn'] = undefined;

/**
 * @member {module:model/ExtensionErrorInfo} extensionErrorInfo
 */
ImportError.prototype['extensionErrorInfo'] = undefined;

/**
 * The error Id.
 * @member {String} id
 */
ImportError.prototype['id'] = undefined;

/**
 * The retry count.
 * @member {Number} retryCount
 */
ImportError.prototype['retryCount'] = undefined;

/**
 * @member {module:model/RuleErrorInfo} ruleErrorInfo
 */
ImportError.prototype['ruleErrorInfo'] = undefined;

/**
 * The run step result Id.
 * @member {String} runStepResultId
 */
ImportError.prototype['runStepResultId'] = undefined;

/**
 * The time when the import error first occurred.
 * @member {Date} timeFirstOccurred
 */
ImportError.prototype['timeFirstOccurred'] = undefined;

/**
 * The time when the import error occurred.
 * @member {Date} timeOccurred
 */
ImportError.prototype['timeOccurred'] = undefined;

/**
 * The type of error.
 * @member {String} type
 */
ImportError.prototype['type'] = undefined;





/**
 * Allowed values for the <code>algorithmStepType</code> property.
 * @enum {String}
 * @readonly
 */
ImportError['AlgorithmStepTypeEnum'] = {

    /**
     * value: "Undefined"
     * @const
     */
    "Undefined": "Undefined",

    /**
     * value: "Staging"
     * @const
     */
    "Staging": "Staging",

    /**
     * value: "ConnectorFilter"
     * @const
     */
    "ConnectorFilter": "ConnectorFilter",

    /**
     * value: "Join"
     * @const
     */
    "Join": "Join",

    /**
     * value: "Projection"
     * @const
     */
    "Projection": "Projection",

    /**
     * value: "ImportFlow"
     * @const
     */
    "ImportFlow": "ImportFlow",

    /**
     * value: "Provisioning"
     * @const
     */
    "Provisioning": "Provisioning",

    /**
     * value: "ValidateConnectorFilter"
     * @const
     */
    "ValidateConnectorFilter": "ValidateConnectorFilter",

    /**
     * value: "Deprovisioning"
     * @const
     */
    "Deprovisioning": "Deprovisioning",

    /**
     * value: "ExportFlow"
     * @const
     */
    "ExportFlow": "ExportFlow",

    /**
     * value: "MvDeletion"
     * @const
     */
    "MvDeletion": "MvDeletion",

    /**
     * value: "Recall"
     * @const
     */
    "Recall": "Recall",

    /**
     * value: "MvObjectTypeChange"
     * @const
     */
    "MvObjectTypeChange": "MvObjectTypeChange"
};



export default ImportError;

