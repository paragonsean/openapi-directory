/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PartitionScope from './PartitionScope';

/**
 * The Partition model module.
 * @module model/Partition
 * @version 2014-01-01
 */
class Partition {
    /**
     * Constructs a new <code>Partition</code>.
     * Describes the partition in Synchronization service.
     * @alias module:model/Partition
     */
    constructor() { 
        
        Partition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Partition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Partition} obj Optional instance to populate.
     * @return {module:model/Partition} The populated <code>Partition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Partition();

            if (data.hasOwnProperty('dn')) {
                obj['dn'] = ApiClient.convertToType(data['dn'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isDomain')) {
                obj['isDomain'] = ApiClient.convertToType(data['isDomain'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('partitionScope')) {
                obj['partitionScope'] = PartitionScope.constructFromObject(data['partitionScope']);
            }
            if (data.hasOwnProperty('timeCreated')) {
                obj['timeCreated'] = ApiClient.convertToType(data['timeCreated'], 'Date');
            }
            if (data.hasOwnProperty('timeLastModified')) {
                obj['timeLastModified'] = ApiClient.convertToType(data['timeLastModified'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Partition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Partition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dn'] && !(typeof data['dn'] === 'string' || data['dn'] instanceof String)) {
            throw new Error("Expected the field `dn` to be a primitive type in the JSON string but got " + data['dn']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `partitionScope`
        if (data['partitionScope']) { // data not null
          PartitionScope.validateJSON(data['partitionScope']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The distinguished name for the partition.
 * @member {String} dn
 */
Partition.prototype['dn'] = undefined;

/**
 * Indicates if the partition object is selected or not.
 * @member {Boolean} enabled
 */
Partition.prototype['enabled'] = undefined;

/**
 * The partition Id.
 * @member {String} id
 */
Partition.prototype['id'] = undefined;

/**
 * Indicates if the partition is a domain or not.
 * @member {Boolean} isDomain
 */
Partition.prototype['isDomain'] = undefined;

/**
 * The name of the partition.
 * @member {String} name
 */
Partition.prototype['name'] = undefined;

/**
 * @member {module:model/PartitionScope} partitionScope
 */
Partition.prototype['partitionScope'] = undefined;

/**
 * The date and time when the partition is created.
 * @member {Date} timeCreated
 */
Partition.prototype['timeCreated'] = undefined;

/**
 * The time and date when the partition was last modified.
 * @member {Date} timeLastModified
 */
Partition.prototype['timeLastModified'] = undefined;

/**
 * The partition type.
 * @member {String} type
 */
Partition.prototype['type'] = undefined;






export default Partition;

