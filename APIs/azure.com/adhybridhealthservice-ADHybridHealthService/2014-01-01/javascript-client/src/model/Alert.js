/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalInformation from './AdditionalInformation';
import HelpLink from './HelpLink';
import Item from './Item';

/**
 * The Alert model module.
 * @module model/Alert
 * @version 2014-01-01
 */
class Alert {
    /**
     * Constructs a new <code>Alert</code>.
     *  The alert details indicating an issue with service or server.
     * @alias module:model/Alert
     */
    constructor() { 
        
        Alert.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Alert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Alert} obj Optional instance to populate.
     * @return {module:model/Alert} The populated <code>Alert</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Alert();

            if (data.hasOwnProperty('activeAlertProperties')) {
                obj['activeAlertProperties'] = ApiClient.convertToType(data['activeAlertProperties'], [Item]);
            }
            if (data.hasOwnProperty('additionalInformation')) {
                obj['additionalInformation'] = ApiClient.convertToType(data['additionalInformation'], [AdditionalInformation]);
            }
            if (data.hasOwnProperty('alertId')) {
                obj['alertId'] = ApiClient.convertToType(data['alertId'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('monitorRoleType')) {
                obj['monitorRoleType'] = ApiClient.convertToType(data['monitorRoleType'], 'String');
            }
            if (data.hasOwnProperty('relatedLinks')) {
                obj['relatedLinks'] = ApiClient.convertToType(data['relatedLinks'], [HelpLink]);
            }
            if (data.hasOwnProperty('remediation')) {
                obj['remediation'] = ApiClient.convertToType(data['remediation'], 'String');
            }
            if (data.hasOwnProperty('resolvedAlertProperties')) {
                obj['resolvedAlertProperties'] = ApiClient.convertToType(data['resolvedAlertProperties'], [Item]);
            }
            if (data.hasOwnProperty('resolvedDate')) {
                obj['resolvedDate'] = ApiClient.convertToType(data['resolvedDate'], 'Date');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('serviceId')) {
                obj['serviceId'] = ApiClient.convertToType(data['serviceId'], 'String');
            }
            if (data.hasOwnProperty('serviceMemberId')) {
                obj['serviceMemberId'] = ApiClient.convertToType(data['serviceMemberId'], 'String');
            }
            if (data.hasOwnProperty('shortName')) {
                obj['shortName'] = ApiClient.convertToType(data['shortName'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Alert</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Alert</code>.
     */
    static validateJSON(data) {
        if (data['activeAlertProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activeAlertProperties'])) {
                throw new Error("Expected the field `activeAlertProperties` to be an array in the JSON data but got " + data['activeAlertProperties']);
            }
            // validate the optional field `activeAlertProperties` (array)
            for (const item of data['activeAlertProperties']) {
                Item.validateJSON(item);
            };
        }
        if (data['additionalInformation']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalInformation'])) {
                throw new Error("Expected the field `additionalInformation` to be an array in the JSON data but got " + data['additionalInformation']);
            }
            // validate the optional field `additionalInformation` (array)
            for (const item of data['additionalInformation']) {
                AdditionalInformation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['alertId'] && !(typeof data['alertId'] === 'string' || data['alertId'] instanceof String)) {
            throw new Error("Expected the field `alertId` to be a primitive type in the JSON string but got " + data['alertId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['monitorRoleType'] && !(typeof data['monitorRoleType'] === 'string' || data['monitorRoleType'] instanceof String)) {
            throw new Error("Expected the field `monitorRoleType` to be a primitive type in the JSON string but got " + data['monitorRoleType']);
        }
        if (data['relatedLinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['relatedLinks'])) {
                throw new Error("Expected the field `relatedLinks` to be an array in the JSON data but got " + data['relatedLinks']);
            }
            // validate the optional field `relatedLinks` (array)
            for (const item of data['relatedLinks']) {
                HelpLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['remediation'] && !(typeof data['remediation'] === 'string' || data['remediation'] instanceof String)) {
            throw new Error("Expected the field `remediation` to be a primitive type in the JSON string but got " + data['remediation']);
        }
        if (data['resolvedAlertProperties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resolvedAlertProperties'])) {
                throw new Error("Expected the field `resolvedAlertProperties` to be an array in the JSON data but got " + data['resolvedAlertProperties']);
            }
            // validate the optional field `resolvedAlertProperties` (array)
            for (const item of data['resolvedAlertProperties']) {
                Item.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['scope'] && !(typeof data['scope'] === 'string' || data['scope'] instanceof String)) {
            throw new Error("Expected the field `scope` to be a primitive type in the JSON string but got " + data['scope']);
        }
        // ensure the json data is a string
        if (data['serviceId'] && !(typeof data['serviceId'] === 'string' || data['serviceId'] instanceof String)) {
            throw new Error("Expected the field `serviceId` to be a primitive type in the JSON string but got " + data['serviceId']);
        }
        // ensure the json data is a string
        if (data['serviceMemberId'] && !(typeof data['serviceMemberId'] === 'string' || data['serviceMemberId'] instanceof String)) {
            throw new Error("Expected the field `serviceMemberId` to be a primitive type in the JSON string but got " + data['serviceMemberId']);
        }
        // ensure the json data is a string
        if (data['shortName'] && !(typeof data['shortName'] === 'string' || data['shortName'] instanceof String)) {
            throw new Error("Expected the field `shortName` to be a primitive type in the JSON string but got " + data['shortName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}



/**
 * The active alert properties.
 * @member {Array.<module:model/Item>} activeAlertProperties
 */
Alert.prototype['activeAlertProperties'] = undefined;

/**
 * Additional information related to the alert.
 * @member {Array.<module:model/AdditionalInformation>} additionalInformation
 */
Alert.prototype['additionalInformation'] = undefined;

/**
 * The alert Id.
 * @member {String} alertId
 */
Alert.prototype['alertId'] = undefined;

/**
 * The date and time,in UTC,when the alert was created.
 * @member {Date} createdDate
 */
Alert.prototype['createdDate'] = undefined;

/**
 * The alert description.
 * @member {String} description
 */
Alert.prototype['description'] = undefined;

/**
 * The display name for the alert.
 * @member {String} displayName
 */
Alert.prototype['displayName'] = undefined;

/**
 * The date and time, in UTC, when the alert was last updated.
 * @member {Date} lastUpdated
 */
Alert.prototype['lastUpdated'] = undefined;

/**
 * The alert level which indicates the severity of the alert.
 * @member {module:model/Alert.LevelEnum} level
 */
Alert.prototype['level'] = undefined;

/**
 * The monitoring role type for which the alert was raised.
 * @member {String} monitorRoleType
 */
Alert.prototype['monitorRoleType'] = undefined;

/**
 * The help links to get more information related to the alert.
 * @member {Array.<module:model/HelpLink>} relatedLinks
 */
Alert.prototype['relatedLinks'] = undefined;

/**
 * The alert remediation.
 * @member {String} remediation
 */
Alert.prototype['remediation'] = undefined;

/**
 * The resolved alert properties.
 * @member {Array.<module:model/Item>} resolvedAlertProperties
 */
Alert.prototype['resolvedAlertProperties'] = undefined;

/**
 * The date and time, in UTC, when the alert was resolved.
 * @member {Date} resolvedDate
 */
Alert.prototype['resolvedDate'] = undefined;

/**
 * The scope of the alert. Indicates if it is a service or a server related alert.
 * @member {String} scope
 */
Alert.prototype['scope'] = undefined;

/**
 * The service Id.
 * @member {String} serviceId
 */
Alert.prototype['serviceId'] = undefined;

/**
 * The server Id.
 * @member {String} serviceMemberId
 */
Alert.prototype['serviceMemberId'] = undefined;

/**
 * The alert short name.
 * @member {String} shortName
 */
Alert.prototype['shortName'] = undefined;

/**
 * The alert state which can be either active or resolved with multiple resolution types.
 * @member {module:model/Alert.StateEnum} state
 */
Alert.prototype['state'] = undefined;

/**
 * The tenant Id.
 * @member {String} tenantId
 */
Alert.prototype['tenantId'] = undefined;





/**
 * Allowed values for the <code>level</code> property.
 * @enum {String}
 * @readonly
 */
Alert['LevelEnum'] = {

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "PreWarning"
     * @const
     */
    "PreWarning": "PreWarning"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Alert['StateEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "ResolvedByPositiveResult"
     * @const
     */
    "ResolvedByPositiveResult": "ResolvedByPositiveResult",

    /**
     * value: "ResolvedManually"
     * @const
     */
    "ResolvedManually": "ResolvedManually",

    /**
     * value: "ResolvedByTimer"
     * @const
     */
    "ResolvedByTimer": "ResolvedByTimer",

    /**
     * value: "ResolvedByStateChange"
     * @const
     */
    "ResolvedByStateChange": "ResolvedByStateChange"
};



export default Alert;

