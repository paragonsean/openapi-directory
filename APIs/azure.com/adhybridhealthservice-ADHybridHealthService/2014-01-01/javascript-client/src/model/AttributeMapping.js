/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeMppingSource from './AttributeMppingSource';

/**
 * The AttributeMapping model module.
 * @module model/AttributeMapping
 * @version 2014-01-01
 */
class AttributeMapping {
    /**
     * Constructs a new <code>AttributeMapping</code>.
     * The attribute mapping details.
     * @alias module:model/AttributeMapping
     */
    constructor() { 
        
        AttributeMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeMapping} obj Optional instance to populate.
     * @return {module:model/AttributeMapping} The populated <code>AttributeMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeMapping();

            if (data.hasOwnProperty('contextId')) {
                obj['contextId'] = ApiClient.convertToType(data['contextId'], 'String');
            }
            if (data.hasOwnProperty('destinationAttribute')) {
                obj['destinationAttribute'] = ApiClient.convertToType(data['destinationAttribute'], 'String');
            }
            if (data.hasOwnProperty('mappingSource')) {
                obj['mappingSource'] = AttributeMppingSource.constructFromObject(data['mappingSource']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contextId'] && !(typeof data['contextId'] === 'string' || data['contextId'] instanceof String)) {
            throw new Error("Expected the field `contextId` to be a primitive type in the JSON string but got " + data['contextId']);
        }
        // ensure the json data is a string
        if (data['destinationAttribute'] && !(typeof data['destinationAttribute'] === 'string' || data['destinationAttribute'] instanceof String)) {
            throw new Error("Expected the field `destinationAttribute` to be a primitive type in the JSON string but got " + data['destinationAttribute']);
        }
        // validate the optional field `mappingSource`
        if (data['mappingSource']) { // data not null
          AttributeMppingSource.validateJSON(data['mappingSource']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The context Id.
 * @member {String} contextId
 */
AttributeMapping.prototype['contextId'] = undefined;

/**
 * The destination attribute.
 * @member {String} destinationAttribute
 */
AttributeMapping.prototype['destinationAttribute'] = undefined;

/**
 * @member {module:model/AttributeMppingSource} mappingSource
 */
AttributeMapping.prototype['mappingSource'] = undefined;

/**
 * The attribute mapping type.
 * @member {module:model/AttributeMapping.TypeEnum} type
 */
AttributeMapping.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AttributeMapping['TypeEnum'] = {

    /**
     * value: "Constant"
     * @const
     */
    "Constant": "Constant",

    /**
     * value: "Direct"
     * @const
     */
    "Direct": "Direct",

    /**
     * value: "DnPart"
     * @const
     */
    "DnPart": "DnPart",

    /**
     * value: "Script"
     * @const
     */
    "Script": "Script"
};



export default AttributeMapping;

