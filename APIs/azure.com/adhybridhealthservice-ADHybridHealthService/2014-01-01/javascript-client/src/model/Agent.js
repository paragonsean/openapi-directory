/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Agent model module.
 * @module model/Agent
 * @version 2014-01-01
 */
class Agent {
    /**
     * Constructs a new <code>Agent</code>.
     * The agent details.
     * @alias module:model/Agent
     */
    constructor() { 
        
        Agent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Agent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Agent} obj Optional instance to populate.
     * @return {module:model/Agent} The populated <code>Agent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Agent();

            if (data.hasOwnProperty('agentVersion')) {
                obj['agentVersion'] = ApiClient.convertToType(data['agentVersion'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('credential')) {
                obj['credential'] = ApiClient.convertToType(data['credential'], Object);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('machineId')) {
                obj['machineId'] = ApiClient.convertToType(data['machineId'], 'String');
            }
            if (data.hasOwnProperty('machineName')) {
                obj['machineName'] = ApiClient.convertToType(data['machineName'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Agent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Agent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agentVersion'] && !(typeof data['agentVersion'] === 'string' || data['agentVersion'] instanceof String)) {
            throw new Error("Expected the field `agentVersion` to be a primitive type in the JSON string but got " + data['agentVersion']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['machineId'] && !(typeof data['machineId'] === 'string' || data['machineId'] instanceof String)) {
            throw new Error("Expected the field `machineId` to be a primitive type in the JSON string but got " + data['machineId']);
        }
        // ensure the json data is a string
        if (data['machineName'] && !(typeof data['machineName'] === 'string' || data['machineName'] instanceof String)) {
            throw new Error("Expected the field `machineName` to be a primitive type in the JSON string but got " + data['machineName']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}



/**
 * The agent version.
 * @member {String} agentVersion
 */
Agent.prototype['agentVersion'] = undefined;

/**
 * The date and time, in UTC, when the agent was created.
 * @member {Date} createdDate
 */
Agent.prototype['createdDate'] = undefined;

/**
 * The agent credential details.
 * @member {Object} credential
 */
Agent.prototype['credential'] = undefined;

/**
 *  The connector hash key.
 * @member {String} key
 */
Agent.prototype['key'] = undefined;

/**
 * The machine Id.
 * @member {String} machineId
 */
Agent.prototype['machineId'] = undefined;

/**
 * The machine name.
 * @member {String} machineName
 */
Agent.prototype['machineName'] = undefined;

/**
 * The tenant Id.
 * @member {String} tenantId
 */
Agent.prototype['tenantId'] = undefined;






export default Agent;

