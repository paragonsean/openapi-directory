/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeMapping from './AttributeMapping';

/**
 * The RuleErrorInfo model module.
 * @module model/RuleErrorInfo
 * @version 2014-01-01
 */
class RuleErrorInfo {
    /**
     * Constructs a new <code>RuleErrorInfo</code>.
     * The error details in legacy rule processing.
     * @alias module:model/RuleErrorInfo
     */
    constructor() { 
        
        RuleErrorInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RuleErrorInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuleErrorInfo} obj Optional instance to populate.
     * @return {module:model/RuleErrorInfo} The populated <code>RuleErrorInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleErrorInfo();

            if (data.hasOwnProperty('attributeMapping')) {
                obj['attributeMapping'] = AttributeMapping.constructFromObject(data['attributeMapping']);
            }
            if (data.hasOwnProperty('connectorId')) {
                obj['connectorId'] = ApiClient.convertToType(data['connectorId'], 'String');
            }
            if (data.hasOwnProperty('connectorName')) {
                obj['connectorName'] = ApiClient.convertToType(data['connectorName'], 'String');
            }
            if (data.hasOwnProperty('csObjectId')) {
                obj['csObjectId'] = ApiClient.convertToType(data['csObjectId'], 'String');
            }
            if (data.hasOwnProperty('dn')) {
                obj['dn'] = ApiClient.convertToType(data['dn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuleErrorInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuleErrorInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributeMapping`
        if (data['attributeMapping']) { // data not null
          AttributeMapping.validateJSON(data['attributeMapping']);
        }
        // ensure the json data is a string
        if (data['connectorId'] && !(typeof data['connectorId'] === 'string' || data['connectorId'] instanceof String)) {
            throw new Error("Expected the field `connectorId` to be a primitive type in the JSON string but got " + data['connectorId']);
        }
        // ensure the json data is a string
        if (data['connectorName'] && !(typeof data['connectorName'] === 'string' || data['connectorName'] instanceof String)) {
            throw new Error("Expected the field `connectorName` to be a primitive type in the JSON string but got " + data['connectorName']);
        }
        // ensure the json data is a string
        if (data['csObjectId'] && !(typeof data['csObjectId'] === 'string' || data['csObjectId'] instanceof String)) {
            throw new Error("Expected the field `csObjectId` to be a primitive type in the JSON string but got " + data['csObjectId']);
        }
        // ensure the json data is a string
        if (data['dn'] && !(typeof data['dn'] === 'string' || data['dn'] instanceof String)) {
            throw new Error("Expected the field `dn` to be a primitive type in the JSON string but got " + data['dn']);
        }

        return true;
    }


}



/**
 * @member {module:model/AttributeMapping} attributeMapping
 */
RuleErrorInfo.prototype['attributeMapping'] = undefined;

/**
 * The connector Id.
 * @member {String} connectorId
 */
RuleErrorInfo.prototype['connectorId'] = undefined;

/**
 * The connector name.
 * @member {String} connectorName
 */
RuleErrorInfo.prototype['connectorName'] = undefined;

/**
 * The object Id.
 * @member {String} csObjectId
 */
RuleErrorInfo.prototype['csObjectId'] = undefined;

/**
 * The distinguished name.
 * @member {String} dn
 */
RuleErrorInfo.prototype['dn'] = undefined;






export default RuleErrorInfo;

