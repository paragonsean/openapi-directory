/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Alerts from '../model/Alerts';

/**
* Alerts service.
* @module api/AlertsApi
* @version 2014-01-01
*/
export default class AlertsApi {

    /**
    * Constructs a new AlertsApi. 
    * @alias module:api/AlertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serviceMembersListAlerts operation.
     * @callback module:api/AlertsApi~serviceMembersListAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alerts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of an alert for a given service and server combination.
     * @param {String} serviceMemberId The server Id for which the alert details needs to be queried.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The alert property filter to apply.
     * @param {String} [state] The alert state to query for.
     * @param {Date} [from] The start date to query for.
     * @param {Date} [to] The end date till when to query for.
     * @param {module:api/AlertsApi~serviceMembersListAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alerts}
     */
    serviceMembersListAlerts(serviceMemberId, serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceMemberId' is set
      if (serviceMemberId === undefined || serviceMemberId === null) {
        throw new Error("Missing the required parameter 'serviceMemberId' when calling serviceMembersListAlerts");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceMembersListAlerts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceMembersListAlerts");
      }

      let pathParams = {
        'serviceMemberId': serviceMemberId,
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'state': opts['state'],
        'from': opts['from'],
        'to': opts['to'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alerts;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListAlerts operation.
     * @callback module:api/AlertsApi~servicesListAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alerts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the alerts for a given service.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The alert property filter to apply.
     * @param {String} [state] The alert state to query for.
     * @param {Date} [from] The start date to query for.
     * @param {Date} [to] The end date till when to query for.
     * @param {module:api/AlertsApi~servicesListAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alerts}
     */
    servicesListAlerts(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesListAlerts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListAlerts");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'state': opts['state'],
        'from': opts['from'],
        'to': opts['to'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alerts;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
