/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectorMetadata from '../model/ConnectorMetadata';
import MetricMetadata from '../model/MetricMetadata';
import MetricMetadataList from '../model/MetricMetadataList';
import MetricSets from '../model/MetricSets';
import Metrics from '../model/Metrics';

/**
* Metrics service.
* @module api/MetricsApi
* @version 2014-01-01
*/
export default class MetricsApi {

    /**
    * Constructs a new MetricsApi. 
    * @alias module:api/MetricsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serviceGetMetrics operation.
     * @callback module:api/MetricsApi~serviceGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricSets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the server related metrics for a given metric and group combination.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} groupName The group name
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [groupKey] The group key
     * @param {Date} [fromDate] The start date.
     * @param {Date} [toDate] The end date.
     * @param {module:api/MetricsApi~serviceGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricSets}
     */
    serviceGetMetrics(serviceName, metricName, groupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceGetMetrics");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling serviceGetMetrics");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling serviceGetMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceGetMetrics");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName,
        'groupName': groupName
      };
      let queryParams = {
        'groupKey': opts['groupKey'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricSets;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metrics/{metricName}/groups/{groupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceMembersGetConnectorMetadata operation.
     * @callback module:api/MetricsApi~serviceMembersGetConnectorMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectorMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of connectors and run profile names.
     * @param {String} serviceName The name of the service.
     * @param {String} serviceMemberId The service member id.
     * @param {String} metricName The name of the metric.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/MetricsApi~serviceMembersGetConnectorMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectorMetadata}
     */
    serviceMembersGetConnectorMetadata(serviceName, serviceMemberId, metricName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceMembersGetConnectorMetadata");
      }
      // verify the required parameter 'serviceMemberId' is set
      if (serviceMemberId === undefined || serviceMemberId === null) {
        throw new Error("Missing the required parameter 'serviceMemberId' when calling serviceMembersGetConnectorMetadata");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling serviceMembersGetConnectorMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceMembersGetConnectorMetadata");
      }

      let pathParams = {
        'serviceName': serviceName,
        'serviceMemberId': serviceMemberId,
        'metricName': metricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectorMetadata;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/metrics/{metricName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serviceMembersGetMetrics operation.
     * @callback module:api/MetricsApi~serviceMembersGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricSets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the server related metrics for a given metric and group combination.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} groupName The group name
     * @param {String} serviceMemberId The server id.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [groupKey] The group key
     * @param {Date} [fromDate] The start date.
     * @param {Date} [toDate] The end date.
     * @param {module:api/MetricsApi~serviceMembersGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricSets}
     */
    serviceMembersGetMetrics(serviceName, metricName, groupName, serviceMemberId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling serviceMembersGetMetrics");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling serviceMembersGetMetrics");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling serviceMembersGetMetrics");
      }
      // verify the required parameter 'serviceMemberId' is set
      if (serviceMemberId === undefined || serviceMemberId === null) {
        throw new Error("Missing the required parameter 'serviceMemberId' when calling serviceMembersGetMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serviceMembersGetMetrics");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName,
        'groupName': groupName,
        'serviceMemberId': serviceMemberId
      };
      let queryParams = {
        'groupKey': opts['groupKey'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricSets;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/metrics/{metricName}/groups/{groupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesGetMetricMetadata operation.
     * @callback module:api/MetricsApi~servicesGetMetricMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the service related metrics information.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/MetricsApi~servicesGetMetricMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricMetadata}
     */
    servicesGetMetricMetadata(serviceName, metricName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesGetMetricMetadata");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling servicesGetMetricMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesGetMetricMetadata");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricMetadata;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metricmetadata/{metricName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesGetMetricMetadataForGroup operation.
     * @callback module:api/MetricsApi~servicesGetMetricMetadataForGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricSets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the service related metrics for a given metric and group combination.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} groupName The group name
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [groupKey] The group key
     * @param {Date} [fromDate] The start date.
     * @param {Date} [toDate] The end date.
     * @param {module:api/MetricsApi~servicesGetMetricMetadataForGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricSets}
     */
    servicesGetMetricMetadataForGroup(serviceName, metricName, groupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesGetMetricMetadataForGroup");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling servicesGetMetricMetadataForGroup");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesGetMetricMetadataForGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesGetMetricMetadataForGroup");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName,
        'groupName': groupName
      };
      let queryParams = {
        'groupKey': opts['groupKey'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricSets;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metricmetadata/{metricName}/groups/{groupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListMetricMetadata operation.
     * @callback module:api/MetricsApi~servicesListMetricMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricMetadataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the service related metrics information.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The metric metadata property filter to apply.
     * @param {Boolean} [perfCounter] Indicates if only performance counter metrics are requested.
     * @param {module:api/MetricsApi~servicesListMetricMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricMetadataList}
     */
    servicesListMetricMetadata(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesListMetricMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListMetricMetadata");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'perfCounter': opts['perfCounter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricMetadataList;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metricmetadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListMetricsAverage operation.
     * @callback module:api/MetricsApi~servicesListMetricsAverageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the average of the metric values for a given metric and group combination.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} groupName The group name
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/MetricsApi~servicesListMetricsAverageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metrics}
     */
    servicesListMetricsAverage(serviceName, metricName, groupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesListMetricsAverage");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling servicesListMetricsAverage");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesListMetricsAverage");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListMetricsAverage");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metrics;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metrics/{metricName}/groups/{groupName}/average', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListMetricsSum operation.
     * @callback module:api/MetricsApi~servicesListMetricsSumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the sum of the metric values for a given metric and group combination.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} groupName The group name
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/MetricsApi~servicesListMetricsSumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metrics}
     */
    servicesListMetricsSum(serviceName, metricName, groupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesListMetricsSum");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling servicesListMetricsSum");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesListMetricsSum");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListMetricsSum");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metrics;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metrics/{metricName}/groups/{groupName}/sum', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
