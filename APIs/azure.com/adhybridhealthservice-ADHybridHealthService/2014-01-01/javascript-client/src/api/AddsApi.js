/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddsConfiguration from '../model/AddsConfiguration';
import AddsServiceMembers from '../model/AddsServiceMembers';
import Alerts from '../model/Alerts';
import Credentials from '../model/Credentials';
import Dimensions from '../model/Dimensions';
import ForestSummary from '../model/ForestSummary';
import MetricMetadata from '../model/MetricMetadata';
import MetricMetadataList from '../model/MetricMetadataList';
import MetricSets from '../model/MetricSets';
import Metrics from '../model/Metrics';
import ReplicationDetailsList from '../model/ReplicationDetailsList';
import ReplicationStatus from '../model/ReplicationStatus';
import ReplicationSummaryList from '../model/ReplicationSummaryList';
import ServiceMember from '../model/ServiceMember';
import ServiceMembers from '../model/ServiceMembers';
import ServiceProperties from '../model/ServiceProperties';
import Services from '../model/Services';
import UserPreference from '../model/UserPreference';

/**
* Adds service.
* @module api/AddsApi
* @version 2014-01-01
*/
export default class AddsApi {

    /**
    * Constructs a new AddsApi. 
    * @alias module:api/AddsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adDomainServiceMembersList operation.
     * @callback module:api/AddsApi~adDomainServiceMembersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddsServiceMembers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of the servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     * @param {String} serviceName The name of the service.
     * @param {Boolean} isGroupbySite Indicates if the result should be grouped by site or not.
     * @param {module:model/String} nextPartitionKey The next partition key to query for.
     * @param {module:model/String} nextRowKey The next row key to query for.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The server property filter to apply.
     * @param {String} [query] The custom query.
     * @param {Number} [takeCount] The take count , which specifies the number of elements that can be returned from a sequence.
     * @param {module:api/AddsApi~adDomainServiceMembersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddsServiceMembers}
     */
    adDomainServiceMembersList(serviceName, isGroupbySite, nextPartitionKey, nextRowKey, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling adDomainServiceMembersList");
      }
      // verify the required parameter 'isGroupbySite' is set
      if (isGroupbySite === undefined || isGroupbySite === null) {
        throw new Error("Missing the required parameter 'isGroupbySite' when calling adDomainServiceMembersList");
      }
      // verify the required parameter 'nextPartitionKey' is set
      if (nextPartitionKey === undefined || nextPartitionKey === null) {
        throw new Error("Missing the required parameter 'nextPartitionKey' when calling adDomainServiceMembersList");
      }
      // verify the required parameter 'nextRowKey' is set
      if (nextRowKey === undefined || nextRowKey === null) {
        throw new Error("Missing the required parameter 'nextRowKey' when calling adDomainServiceMembersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling adDomainServiceMembersList");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'isGroupbySite': isGroupbySite,
        'query': opts['query'],
        'nextPartitionKey': nextPartitionKey,
        'nextRowKey': nextRowKey,
        'takeCount': opts['takeCount'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddsServiceMembers;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/addomainservicemembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServiceGetMetrics operation.
     * @callback module:api/AddsApi~addsServiceGetMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricSets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the server related metrics for a given metric and group combination.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} groupName The group name
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [groupKey] The group key
     * @param {Date} [fromDate] The start date.
     * @param {Date} [toDate] The end date.
     * @param {module:api/AddsApi~addsServiceGetMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricSets}
     */
    addsServiceGetMetrics(serviceName, metricName, groupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServiceGetMetrics");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling addsServiceGetMetrics");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling addsServiceGetMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServiceGetMetrics");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName,
        'groupName': groupName
      };
      let queryParams = {
        'groupKey': opts['groupKey'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricSets;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metrics/{metricName}/groups/{groupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServiceMembersDelete operation.
     * @callback module:api/AddsApi~addsServiceMembersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     * @param {String} serviceName The name of the service.
     * @param {String} serviceMemberId The server Id.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [confirm] Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @param {module:api/AddsApi~addsServiceMembersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addsServiceMembersDelete(serviceName, serviceMemberId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServiceMembersDelete");
      }
      // verify the required parameter 'serviceMemberId' is set
      if (serviceMemberId === undefined || serviceMemberId === null) {
        throw new Error("Missing the required parameter 'serviceMemberId' when calling addsServiceMembersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServiceMembersDelete");
      }

      let pathParams = {
        'serviceName': serviceName,
        'serviceMemberId': serviceMemberId
      };
      let queryParams = {
        'confirm': opts['confirm'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServiceMembersGet operation.
     * @callback module:api/AddsApi~addsServiceMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a server, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param {String} serviceName The name of the service.
     * @param {String} serviceMemberId The server Id.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/AddsApi~addsServiceMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceMember}
     */
    addsServiceMembersGet(serviceName, serviceMemberId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServiceMembersGet");
      }
      // verify the required parameter 'serviceMemberId' is set
      if (serviceMemberId === undefined || serviceMemberId === null) {
        throw new Error("Missing the required parameter 'serviceMemberId' when calling addsServiceMembersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServiceMembersGet");
      }

      let pathParams = {
        'serviceName': serviceName,
        'serviceMemberId': serviceMemberId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceMember;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServiceMembersList operation.
     * @callback module:api/AddsApi~addsServiceMembersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddsServiceMembers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The server property filter to apply.
     * @param {module:api/AddsApi~addsServiceMembersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddsServiceMembers}
     */
    addsServiceMembersList(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServiceMembersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServiceMembersList");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddsServiceMembers;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/addsservicemembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServiceMembersListCredentials operation.
     * @callback module:api/AddsApi~addsServiceMembersListCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Credentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     * @param {String} serviceName The name of the service.
     * @param {String} serviceMemberId The server Id.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The property filter to apply.
     * @param {module:api/AddsApi~addsServiceMembersListCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Credentials}
     */
    addsServiceMembersListCredentials(serviceName, serviceMemberId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServiceMembersListCredentials");
      }
      // verify the required parameter 'serviceMemberId' is set
      if (serviceMemberId === undefined || serviceMemberId === null) {
        throw new Error("Missing the required parameter 'serviceMemberId' when calling addsServiceMembersListCredentials");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServiceMembersListCredentials");
      }

      let pathParams = {
        'serviceName': serviceName,
        'serviceMemberId': serviceMemberId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Credentials;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}/credentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesAdd operation.
     * @callback module:api/AddsApi~addsServicesAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Onboards a service for a given tenant in Azure Active Directory Connect Health.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:model/ServiceProperties} service The service object.
     * @param {module:api/AddsApi~addsServicesAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceProperties}
     */
    addsServicesAdd(apiVersion, service, callback) {
      let postBody = service;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesAdd");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling addsServicesAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceProperties;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesGetForestSummary operation.
     * @callback module:api/AddsApi~addsServicesGetForestSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ForestSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the forest summary for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/AddsApi~addsServicesGetForestSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ForestSummary}
     */
    addsServicesGetForestSummary(serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesGetForestSummary");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesGetForestSummary");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ForestSummary;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/forestsummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesGetMetricMetadata operation.
     * @callback module:api/AddsApi~addsServicesGetMetricMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the service related metric information.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/AddsApi~addsServicesGetMetricMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricMetadata}
     */
    addsServicesGetMetricMetadata(serviceName, metricName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesGetMetricMetadata");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling addsServicesGetMetricMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesGetMetricMetadata");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricMetadata;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metricmetadata/{metricName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesGetMetricMetadataForGroup operation.
     * @callback module:api/AddsApi~addsServicesGetMetricMetadataForGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricSets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the service related metrics for a given metric and group combination.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} groupName The group name
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [groupKey] The group key
     * @param {Date} [fromDate] The start date.
     * @param {Date} [toDate] The end date.
     * @param {module:api/AddsApi~addsServicesGetMetricMetadataForGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricSets}
     */
    addsServicesGetMetricMetadataForGroup(serviceName, metricName, groupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesGetMetricMetadataForGroup");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling addsServicesGetMetricMetadataForGroup");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling addsServicesGetMetricMetadataForGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesGetMetricMetadataForGroup");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName,
        'groupName': groupName
      };
      let queryParams = {
        'groupKey': opts['groupKey'],
        'fromDate': opts['fromDate'],
        'toDate': opts['toDate'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricSets;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metricmetadata/{metricName}/groups/{groupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesList operation.
     * @callback module:api/AddsApi~addsServicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Services} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of Active Directory Domain Service, for a tenant, that are onboarded to Azure Active Directory Connect Health.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The service property filter to apply.
     * @param {String} [serviceType] The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
     * @param {Number} [skipCount] The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
     * @param {Number} [takeCount] The take count , which specifies the number of elements that can be returned from a sequence.
     * @param {module:api/AddsApi~addsServicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Services}
     */
    addsServicesList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesList");
      }

      let pathParams = {
      };
      let queryParams = {
        '$filter': opts['filter'],
        'serviceType': opts['serviceType'],
        'skipCount': opts['skipCount'],
        'takeCount': opts['takeCount'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Services;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesListMetricMetadata operation.
     * @callback module:api/AddsApi~addsServicesListMetricMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricMetadataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the service related metrics information.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The metric metadata property filter to apply.
     * @param {Boolean} [perfCounter] Indicates if only performance counter metrics are requested.
     * @param {module:api/AddsApi~addsServicesListMetricMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricMetadataList}
     */
    addsServicesListMetricMetadata(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesListMetricMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesListMetricMetadata");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'perfCounter': opts['perfCounter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricMetadataList;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metricmetadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesListMetricsAverage operation.
     * @callback module:api/AddsApi~addsServicesListMetricsAverageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the average of the metric values for a given metric and group combination.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} groupName The group name
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/AddsApi~addsServicesListMetricsAverageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metrics}
     */
    addsServicesListMetricsAverage(serviceName, metricName, groupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesListMetricsAverage");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling addsServicesListMetricsAverage");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling addsServicesListMetricsAverage");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesListMetricsAverage");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metrics;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metrics/{metricName}/groups/{groupName}/average', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesListMetricsSum operation.
     * @callback module:api/AddsApi~addsServicesListMetricsSumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metrics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the sum of the metric values for a given metric and group combination.
     * @param {String} serviceName The name of the service.
     * @param {String} metricName The metric name
     * @param {String} groupName The group name
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/AddsApi~addsServicesListMetricsSumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Metrics}
     */
    addsServicesListMetricsSum(serviceName, metricName, groupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesListMetricsSum");
      }
      // verify the required parameter 'metricName' is set
      if (metricName === undefined || metricName === null) {
        throw new Error("Missing the required parameter 'metricName' when calling addsServicesListMetricsSum");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling addsServicesListMetricsSum");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesListMetricsSum");
      }

      let pathParams = {
        'serviceName': serviceName,
        'metricName': metricName,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metrics;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metrics/{metricName}/groups/{groupName}/sum', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesListReplicationDetails operation.
     * @callback module:api/AddsApi~addsServicesListReplicationDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationDetailsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets complete domain controller list along with replication details for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The server property filter to apply.
     * @param {Boolean} [withDetails] Indicates if InboundReplicationNeighbor details are required or not.
     * @param {module:api/AddsApi~addsServicesListReplicationDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationDetailsList}
     */
    addsServicesListReplicationDetails(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesListReplicationDetails");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesListReplicationDetails");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'withDetails': opts['withDetails'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicationDetailsList;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/replicationdetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesListReplicationSummary operation.
     * @callback module:api/AddsApi~addsServicesListReplicationSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationSummaryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets complete domain controller list along with replication details for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param {String} serviceName The name of the service.
     * @param {Boolean} isGroupbySite Indicates if the result should be grouped by site or not.
     * @param {String} query The custom query.
     * @param {module:model/String} nextPartitionKey The next partition key to query for.
     * @param {module:model/String} nextRowKey The next row key to query for.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The server property filter to apply.
     * @param {Number} [takeCount] The take count , which specifies the number of elements that can be returned from a sequence.
     * @param {module:api/AddsApi~addsServicesListReplicationSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationSummaryList}
     */
    addsServicesListReplicationSummary(serviceName, isGroupbySite, query, nextPartitionKey, nextRowKey, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesListReplicationSummary");
      }
      // verify the required parameter 'isGroupbySite' is set
      if (isGroupbySite === undefined || isGroupbySite === null) {
        throw new Error("Missing the required parameter 'isGroupbySite' when calling addsServicesListReplicationSummary");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling addsServicesListReplicationSummary");
      }
      // verify the required parameter 'nextPartitionKey' is set
      if (nextPartitionKey === undefined || nextPartitionKey === null) {
        throw new Error("Missing the required parameter 'nextPartitionKey' when calling addsServicesListReplicationSummary");
      }
      // verify the required parameter 'nextRowKey' is set
      if (nextRowKey === undefined || nextRowKey === null) {
        throw new Error("Missing the required parameter 'nextRowKey' when calling addsServicesListReplicationSummary");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesListReplicationSummary");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'isGroupbySite': isGroupbySite,
        'query': query,
        'nextPartitionKey': nextPartitionKey,
        'nextRowKey': nextRowKey,
        'takeCount': opts['takeCount'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicationSummaryList;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/replicationsummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesListServerAlerts operation.
     * @callback module:api/AddsApi~addsServicesListServerAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alerts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of an alert for a given Active Directory Domain Controller service and server combination.
     * @param {String} serviceMemberId The server Id for which the alert details needs to be queried.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The alert property filter to apply.
     * @param {String} [state] The alert state to query for.
     * @param {Date} [from] The start date to query for.
     * @param {Date} [to] The end date till when to query for.
     * @param {module:api/AddsApi~addsServicesListServerAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alerts}
     */
    addsServicesListServerAlerts(serviceMemberId, serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceMemberId' is set
      if (serviceMemberId === undefined || serviceMemberId === null) {
        throw new Error("Missing the required parameter 'serviceMemberId' when calling addsServicesListServerAlerts");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesListServerAlerts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesListServerAlerts");
      }

      let pathParams = {
        'serviceMemberId': serviceMemberId,
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'state': opts['state'],
        'from': opts['from'],
        'to': opts['to'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alerts;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesReplicationStatusGet operation.
     * @callback module:api/AddsApi~addsServicesReplicationStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets Replication status for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/AddsApi~addsServicesReplicationStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationStatus}
     */
    addsServicesReplicationStatusGet(serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesReplicationStatusGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesReplicationStatusGet");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicationStatus;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/replicationstatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesServiceMembersAdd operation.
     * @callback module:api/AddsApi~addsServicesServiceMembersAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Onboards  a server, for a given Active Directory Domain Controller service, to Azure Active Directory Connect Health Service.
     * @param {String} serviceName The name of the service under which the server is to be onboarded.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:model/ServiceMember} serviceMember The server object.
     * @param {module:api/AddsApi~addsServicesServiceMembersAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceMember}
     */
    addsServicesServiceMembersAdd(serviceName, apiVersion, serviceMember, callback) {
      let postBody = serviceMember;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesServiceMembersAdd");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesServiceMembersAdd");
      }
      // verify the required parameter 'serviceMember' is set
      if (serviceMember === undefined || serviceMember === null) {
        throw new Error("Missing the required parameter 'serviceMember' when calling addsServicesServiceMembersAdd");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceMember;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesServiceMembersList operation.
     * @callback module:api/AddsApi~addsServicesServiceMembersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceMembers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of the servers, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The server property filter to apply.
     * @param {String} [dimensionType] The server specific dimension.
     * @param {String} [dimensionSignature] The value of the dimension.
     * @param {module:api/AddsApi~addsServicesServiceMembersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceMembers}
     */
    addsServicesServiceMembersList(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesServiceMembersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesServiceMembersList");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'dimensionType': opts['dimensionType'],
        'dimensionSignature': opts['dimensionSignature'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceMembers;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesUserPreferenceAdd operation.
     * @callback module:api/AddsApi~addsServicesUserPreferenceAddCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the user preferences for a given feature.
     * @param {String} serviceName The name of the service.
     * @param {String} featureName The name of the feature.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:model/UserPreference} setting The user preference setting.
     * @param {module:api/AddsApi~addsServicesUserPreferenceAddCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addsServicesUserPreferenceAdd(serviceName, featureName, apiVersion, setting, callback) {
      let postBody = setting;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesUserPreferenceAdd");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling addsServicesUserPreferenceAdd");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesUserPreferenceAdd");
      }
      // verify the required parameter 'setting' is set
      if (setting === undefined || setting === null) {
        throw new Error("Missing the required parameter 'setting' when calling addsServicesUserPreferenceAdd");
      }

      let pathParams = {
        'serviceName': serviceName,
        'featureName': featureName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesUserPreferenceDelete operation.
     * @callback module:api/AddsApi~addsServicesUserPreferenceDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the user preferences for a given feature.
     * @param {String} serviceName The name of the service.
     * @param {String} featureName The name of the feature.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/AddsApi~addsServicesUserPreferenceDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addsServicesUserPreferenceDelete(serviceName, featureName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesUserPreferenceDelete");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling addsServicesUserPreferenceDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesUserPreferenceDelete");
      }

      let pathParams = {
        'serviceName': serviceName,
        'featureName': featureName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesUserPreferenceGet operation.
     * @callback module:api/AddsApi~addsServicesUserPreferenceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPreference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the user preferences for a given feature.
     * @param {String} serviceName The name of the service.
     * @param {String} featureName The name of the feature.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/AddsApi~addsServicesUserPreferenceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPreference}
     */
    addsServicesUserPreferenceGet(serviceName, featureName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesUserPreferenceGet");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling addsServicesUserPreferenceGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesUserPreferenceGet");
      }

      let pathParams = {
        'serviceName': serviceName,
        'featureName': featureName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserPreference;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsListAddsAlerts operation.
     * @callback module:api/AddsApi~alertsListAddsAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alerts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the alerts for a given Active Directory Domain Service.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The alert property filter to apply.
     * @param {String} [state] The alert state to query for.
     * @param {Date} [from] The start date to query for.
     * @param {Date} [to] The end date till when to query for.
     * @param {module:api/AddsApi~alertsListAddsAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alerts}
     */
    alertsListAddsAlerts(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling alertsListAddsAlerts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsListAddsAlerts");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        '$filter': opts['filter'],
        'state': opts['state'],
        'from': opts['from'],
        'to': opts['to'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alerts;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationListAddsConfigurations operation.
     * @callback module:api/AddsApi~configurationListAddsConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddsConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the service configurations.
     * @param {String} serviceName The name of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [grouping] The grouping for configurations.
     * @param {module:api/AddsApi~configurationListAddsConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddsConfiguration}
     */
    configurationListAddsConfigurations(serviceName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling configurationListAddsConfigurations");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'grouping': opts['grouping']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AddsConfiguration;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dimensionsListAddsDimensions operation.
     * @callback module:api/AddsApi~dimensionsListAddsDimensionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dimensions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the dimensions for a given dimension type in a server.
     * @param {String} serviceName The name of the service.
     * @param {String} dimension The dimension type.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/AddsApi~dimensionsListAddsDimensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dimensions}
     */
    dimensionsListAddsDimensions(serviceName, dimension, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling dimensionsListAddsDimensions");
      }
      // verify the required parameter 'dimension' is set
      if (dimension === undefined || dimension === null) {
        throw new Error("Missing the required parameter 'dimension' when calling dimensionsListAddsDimensions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dimensionsListAddsDimensions");
      }

      let pathParams = {
        'serviceName': serviceName,
        'dimension': dimension
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dimensions;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/dimensions/{dimension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
