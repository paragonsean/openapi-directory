/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorCounts from '../model/ErrorCounts';
import ExportStatuses from '../model/ExportStatuses';
import Item from '../model/Item';
import Items from '../model/Items';
import MergedExportErrors from '../model/MergedExportErrors';
import Result from '../model/Result';
import ServiceProperties from '../model/ServiceProperties';
import Services from '../model/Services';

/**
* Services service.
* @module api/ServicesApi
* @version 2014-01-01
*/
export default class ServicesApi {

    /**
    * Constructs a new ServicesApi. 
    * @alias module:api/ServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addsServicesDelete operation.
     * @callback module:api/ServicesApi~addsServicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Active Directory Domain Service which is onboarded to Azure Active Directory Connect Health.
     * @param {String} serviceName The name of the service which needs to be deleted.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [confirm] Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @param {module:api/ServicesApi~addsServicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addsServicesDelete(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesDelete");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'confirm': opts['confirm'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesGet operation.
     * @callback module:api/ServicesApi~addsServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of an Active Directory Domain Service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/ServicesApi~addsServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceProperties}
     */
    addsServicesGet(serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesGet");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceProperties;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesListPremiumServices operation.
     * @callback module:api/ServicesApi~addsServicesListPremiumServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Services} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of Active Directory Domain Services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The service property filter to apply.
     * @param {String} [serviceType] The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
     * @param {Number} [skipCount] The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
     * @param {Number} [takeCount] The take count , which specifies the number of elements that can be returned from a sequence.
     * @param {module:api/ServicesApi~addsServicesListPremiumServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Services}
     */
    addsServicesListPremiumServices(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesListPremiumServices");
      }

      let pathParams = {
      };
      let queryParams = {
        '$filter': opts['filter'],
        'serviceType': opts['serviceType'],
        'skipCount': opts['skipCount'],
        'takeCount': opts['takeCount'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Services;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/premiumCheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addsServicesUpdate operation.
     * @callback module:api/ServicesApi~addsServicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Active Directory Domain Service properties of an onboarded service.
     * @param {String} serviceName The name of the service which needs to be deleted.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:model/ServiceProperties} service The service object.
     * @param {module:api/ServicesApi~addsServicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceProperties}
     */
    addsServicesUpdate(serviceName, apiVersion, service, callback) {
      let postBody = service;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling addsServicesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling addsServicesUpdate");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling addsServicesUpdate");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceProperties;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesAdd operation.
     * @callback module:api/ServicesApi~servicesAddCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Onboards a service for a given tenant in Azure Active Directory Connect Health.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:model/ServiceProperties} service The service object.
     * @param {module:api/ServicesApi~servicesAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceProperties}
     */
    servicesAdd(apiVersion, service, callback) {
      let postBody = service;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesAdd");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling servicesAdd");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceProperties;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesDelete operation.
     * @callback module:api/ServicesApi~servicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a service which is onboarded to Azure Active Directory Connect Health.
     * @param {String} serviceName The name of the service which needs to be deleted.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [confirm] Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered.
     * @param {module:api/ServicesApi~servicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesDelete(serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesDelete");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'confirm': opts['confirm'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesGet operation.
     * @callback module:api/ServicesApi~servicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/ServicesApi~servicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceProperties}
     */
    servicesGet(serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesGet");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceProperties;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesGetFeatureAvailibility operation.
     * @callback module:api/ServicesApi~servicesGetFeatureAvailibilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks if the service has all the pre-requisites met to use a feature.
     * @param {String} serviceName The name of the service.
     * @param {String} featureName The name of the feature.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/ServicesApi~servicesGetFeatureAvailibilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    servicesGetFeatureAvailibility(serviceName, featureName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesGetFeatureAvailibility");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling servicesGetFeatureAvailibility");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesGetFeatureAvailibility");
      }

      let pathParams = {
        'serviceName': serviceName,
        'featureName': featureName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/checkServiceFeatureAvailibility/{featureName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesGetTenantWhitelisting operation.
     * @callback module:api/ServicesApi~servicesGetTenantWhitelistingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks if the tenant, to which a service is registered, is whitelisted to use a feature.
     * @param {String} serviceName The name of the service.
     * @param {String} featureName The name of the feature.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/ServicesApi~servicesGetTenantWhitelistingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    servicesGetTenantWhitelisting(serviceName, featureName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesGetTenantWhitelisting");
      }
      // verify the required parameter 'featureName' is set
      if (featureName === undefined || featureName === null) {
        throw new Error("Missing the required parameter 'featureName' when calling servicesGetTenantWhitelisting");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesGetTenantWhitelisting");
      }

      let pathParams = {
        'serviceName': serviceName,
        'featureName': featureName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/TenantWhitelisting/{featureName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesList operation.
     * @callback module:api/ServicesApi~servicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Services} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of services, for a tenant, that are onboarded to Azure Active Directory Connect Health.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The service property filter to apply.
     * @param {String} [serviceType] The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
     * @param {Number} [skipCount] The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
     * @param {Number} [takeCount] The take count , which specifies the number of elements that can be returned from a sequence.
     * @param {module:api/ServicesApi~servicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Services}
     */
    servicesList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesList");
      }

      let pathParams = {
      };
      let queryParams = {
        '$filter': opts['filter'],
        'serviceType': opts['serviceType'],
        'skipCount': opts['skipCount'],
        'takeCount': opts['takeCount'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Services;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListExportErrors operation.
     * @callback module:api/ServicesApi~servicesListExportErrorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ErrorCounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the count of latest AAD export errors.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/ServicesApi~servicesListExportErrorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ErrorCounts}
     */
    servicesListExportErrors(serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesListExportErrors");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListExportErrors");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ErrorCounts;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/exporterrors/counts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListExportErrorsV2 operation.
     * @callback module:api/ServicesApi~servicesListExportErrorsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MergedExportErrors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Gets the categorized export errors.
     * @param {String} serviceName The name of the service.
     * @param {String} errorBucket The error category to query for.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/ServicesApi~servicesListExportErrorsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergedExportErrors}
     */
    servicesListExportErrorsV2(serviceName, errorBucket, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesListExportErrorsV2");
      }
      // verify the required parameter 'errorBucket' is set
      if (errorBucket === undefined || errorBucket === null) {
        throw new Error("Missing the required parameter 'errorBucket' when calling servicesListExportErrorsV2");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListExportErrorsV2");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'errorBucket': errorBucket,
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergedExportErrors;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/exporterrors/listV2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListExportStatus operation.
     * @callback module:api/ServicesApi~servicesListExportStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportStatuses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the export status.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/ServicesApi~servicesListExportStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportStatuses}
     */
    servicesListExportStatus(serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesListExportStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListExportStatus");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportStatuses;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/exportstatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListMonitoringConfigurations operation.
     * @callback module:api/ServicesApi~servicesListMonitoringConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Items} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the service level monitoring configurations.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:api/ServicesApi~servicesListMonitoringConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Items}
     */
    servicesListMonitoringConfigurations(serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesListMonitoringConfigurations");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListMonitoringConfigurations");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Items;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/monitoringconfigurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListPremium operation.
     * @callback module:api/ServicesApi~servicesListPremiumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Services} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The service property filter to apply.
     * @param {String} [serviceType] The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
     * @param {Number} [skipCount] The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements.
     * @param {Number} [takeCount] The take count , which specifies the number of elements that can be returned from a sequence.
     * @param {module:api/ServicesApi~servicesListPremiumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Services}
     */
    servicesListPremium(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListPremium");
      }

      let pathParams = {
      };
      let queryParams = {
        '$filter': opts['filter'],
        'serviceType': opts['serviceType'],
        'skipCount': opts['skipCount'],
        'takeCount': opts['takeCount'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Services;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/premiumCheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesUpdate operation.
     * @callback module:api/ServicesApi~servicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceProperties} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the service properties of an onboarded service.
     * @param {String} serviceName The name of the service which needs to be deleted.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:model/ServiceProperties} service The service object.
     * @param {module:api/ServicesApi~servicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceProperties}
     */
    servicesUpdate(serviceName, apiVersion, service, callback) {
      let postBody = service;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesUpdate");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling servicesUpdate");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceProperties;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesUpdateMonitoringConfiguration operation.
     * @callback module:api/ServicesApi~servicesUpdateMonitoringConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the service level monitoring configuration.
     * @param {String} serviceName The name of the service.
     * @param {String} apiVersion The version of the API to be used with the client request.
     * @param {module:model/Item} configurationSetting The monitoring configuration to update
     * @param {module:api/ServicesApi~servicesUpdateMonitoringConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesUpdateMonitoringConfiguration(serviceName, apiVersion, configurationSetting, callback) {
      let postBody = configurationSetting;
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesUpdateMonitoringConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesUpdateMonitoringConfiguration");
      }
      // verify the required parameter 'configurationSetting' is set
      if (configurationSetting === undefined || configurationSetting === null) {
        throw new Error("Missing the required parameter 'configurationSetting' when calling servicesUpdateMonitoringConfiguration");
      }

      let pathParams = {
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.ADHybridHealthService/services/{serviceName}/monitoringconfiguration', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
