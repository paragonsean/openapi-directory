# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_group import MetricGroup
from openapi_server import util


class MetricMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, groupings: List[MetricGroup]=None, is_default: bool=None, is_dev_ops: bool=None, is_perf_counter: bool=None, kind: str=None, max_value: int=None, metric_name: str=None, metrics_processor_class_name: str=None, min_value: int=None, value_kind: str=None):
        """MetricMetadata - a model defined in OpenAPI

        :param display_name: The display_name of this MetricMetadata.
        :param groupings: The groupings of this MetricMetadata.
        :param is_default: The is_default of this MetricMetadata.
        :param is_dev_ops: The is_dev_ops of this MetricMetadata.
        :param is_perf_counter: The is_perf_counter of this MetricMetadata.
        :param kind: The kind of this MetricMetadata.
        :param max_value: The max_value of this MetricMetadata.
        :param metric_name: The metric_name of this MetricMetadata.
        :param metrics_processor_class_name: The metrics_processor_class_name of this MetricMetadata.
        :param min_value: The min_value of this MetricMetadata.
        :param value_kind: The value_kind of this MetricMetadata.
        """
        self.openapi_types = {
            'display_name': str,
            'groupings': List[MetricGroup],
            'is_default': bool,
            'is_dev_ops': bool,
            'is_perf_counter': bool,
            'kind': str,
            'max_value': int,
            'metric_name': str,
            'metrics_processor_class_name': str,
            'min_value': int,
            'value_kind': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'groupings': 'groupings',
            'is_default': 'isDefault',
            'is_dev_ops': 'isDevOps',
            'is_perf_counter': 'isPerfCounter',
            'kind': 'kind',
            'max_value': 'maxValue',
            'metric_name': 'metricName',
            'metrics_processor_class_name': 'metricsProcessorClassName',
            'min_value': 'minValue',
            'value_kind': 'valueKind'
        }

        self._display_name = display_name
        self._groupings = groupings
        self._is_default = is_default
        self._is_dev_ops = is_dev_ops
        self._is_perf_counter = is_perf_counter
        self._kind = kind
        self._max_value = max_value
        self._metric_name = metric_name
        self._metrics_processor_class_name = metrics_processor_class_name
        self._min_value = min_value
        self._value_kind = value_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricMetadata of this MetricMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this MetricMetadata.

        The display name for the metric.

        :return: The display_name of this MetricMetadata.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MetricMetadata.

        The display name for the metric.

        :param display_name: The display_name of this MetricMetadata.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def groupings(self):
        """Gets the groupings of this MetricMetadata.

        The groupings for the metrics.

        :return: The groupings of this MetricMetadata.
        :rtype: List[MetricGroup]
        """
        return self._groupings

    @groupings.setter
    def groupings(self, groupings):
        """Sets the groupings of this MetricMetadata.

        The groupings for the metrics.

        :param groupings: The groupings of this MetricMetadata.
        :type groupings: List[MetricGroup]
        """

        self._groupings = groupings

    @property
    def is_default(self):
        """Gets the is_default of this MetricMetadata.

        Indicates if the metric is a default metric or not.

        :return: The is_default of this MetricMetadata.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this MetricMetadata.

        Indicates if the metric is a default metric or not.

        :param is_default: The is_default of this MetricMetadata.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def is_dev_ops(self):
        """Gets the is_dev_ops of this MetricMetadata.

        Indicates if the metric is visible to DevOps or not.

        :return: The is_dev_ops of this MetricMetadata.
        :rtype: bool
        """
        return self._is_dev_ops

    @is_dev_ops.setter
    def is_dev_ops(self, is_dev_ops):
        """Sets the is_dev_ops of this MetricMetadata.

        Indicates if the metric is visible to DevOps or not.

        :param is_dev_ops: The is_dev_ops of this MetricMetadata.
        :type is_dev_ops: bool
        """

        self._is_dev_ops = is_dev_ops

    @property
    def is_perf_counter(self):
        """Gets the is_perf_counter of this MetricMetadata.

        Indicates if the metric is a performance counter metric or not.

        :return: The is_perf_counter of this MetricMetadata.
        :rtype: bool
        """
        return self._is_perf_counter

    @is_perf_counter.setter
    def is_perf_counter(self, is_perf_counter):
        """Sets the is_perf_counter of this MetricMetadata.

        Indicates if the metric is a performance counter metric or not.

        :param is_perf_counter: The is_perf_counter of this MetricMetadata.
        :type is_perf_counter: bool
        """

        self._is_perf_counter = is_perf_counter

    @property
    def kind(self):
        """Gets the kind of this MetricMetadata.

        Indicates whether the dashboard to represent the metric is a line, bar,pie, area or donut chart.

        :return: The kind of this MetricMetadata.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this MetricMetadata.

        Indicates whether the dashboard to represent the metric is a line, bar,pie, area or donut chart.

        :param kind: The kind of this MetricMetadata.
        :type kind: str
        """

        self._kind = kind

    @property
    def max_value(self):
        """Gets the max_value of this MetricMetadata.

        The maximum value.

        :return: The max_value of this MetricMetadata.
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this MetricMetadata.

        The maximum value.

        :param max_value: The max_value of this MetricMetadata.
        :type max_value: int
        """

        self._max_value = max_value

    @property
    def metric_name(self):
        """Gets the metric_name of this MetricMetadata.

        The metric name

        :return: The metric_name of this MetricMetadata.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this MetricMetadata.

        The metric name

        :param metric_name: The metric_name of this MetricMetadata.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def metrics_processor_class_name(self):
        """Gets the metrics_processor_class_name of this MetricMetadata.

        The name of the class which retrieve and process the metric.

        :return: The metrics_processor_class_name of this MetricMetadata.
        :rtype: str
        """
        return self._metrics_processor_class_name

    @metrics_processor_class_name.setter
    def metrics_processor_class_name(self, metrics_processor_class_name):
        """Sets the metrics_processor_class_name of this MetricMetadata.

        The name of the class which retrieve and process the metric.

        :param metrics_processor_class_name: The metrics_processor_class_name of this MetricMetadata.
        :type metrics_processor_class_name: str
        """

        self._metrics_processor_class_name = metrics_processor_class_name

    @property
    def min_value(self):
        """Gets the min_value of this MetricMetadata.

        The minimum value.

        :return: The min_value of this MetricMetadata.
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this MetricMetadata.

        The minimum value.

        :param min_value: The min_value of this MetricMetadata.
        :type min_value: int
        """

        self._min_value = min_value

    @property
    def value_kind(self):
        """Gets the value_kind of this MetricMetadata.

        Indicates if the metrics is a rate,value, percent or duration type.

        :return: The value_kind of this MetricMetadata.
        :rtype: str
        """
        return self._value_kind

    @value_kind.setter
    def value_kind(self, value_kind):
        """Sets the value_kind of this MetricMetadata.

        Indicates if the metrics is a rate,value, percent or duration type.

        :param value_kind: The value_kind of this MetricMetadata.
        :type value_kind: str
        """

        self._value_kind = value_kind
