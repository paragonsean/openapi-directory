# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.value_delta import ValueDelta
from openapi_server import util


class AttributeDelta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, multi_valued: bool=None, name: str=None, operation_type: str=None, value_type: str=None, values: List[ValueDelta]=None):
        """AttributeDelta - a model defined in OpenAPI

        :param multi_valued: The multi_valued of this AttributeDelta.
        :param name: The name of this AttributeDelta.
        :param operation_type: The operation_type of this AttributeDelta.
        :param value_type: The value_type of this AttributeDelta.
        :param values: The values of this AttributeDelta.
        """
        self.openapi_types = {
            'multi_valued': bool,
            'name': str,
            'operation_type': str,
            'value_type': str,
            'values': List[ValueDelta]
        }

        self.attribute_map = {
            'multi_valued': 'multiValued',
            'name': 'name',
            'operation_type': 'operationType',
            'value_type': 'valueType',
            'values': 'values'
        }

        self._multi_valued = multi_valued
        self._name = name
        self._operation_type = operation_type
        self._value_type = value_type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeDelta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeDelta of this AttributeDelta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def multi_valued(self):
        """Gets the multi_valued of this AttributeDelta.

        Indicates if the attribute delta is multivalued or not.

        :return: The multi_valued of this AttributeDelta.
        :rtype: bool
        """
        return self._multi_valued

    @multi_valued.setter
    def multi_valued(self, multi_valued):
        """Sets the multi_valued of this AttributeDelta.

        Indicates if the attribute delta is multivalued or not.

        :param multi_valued: The multi_valued of this AttributeDelta.
        :type multi_valued: bool
        """

        self._multi_valued = multi_valued

    @property
    def name(self):
        """Gets the name of this AttributeDelta.

        The name of the attribute delta.

        :return: The name of this AttributeDelta.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributeDelta.

        The name of the attribute delta.

        :param name: The name of this AttributeDelta.
        :type name: str
        """

        self._name = name

    @property
    def operation_type(self):
        """Gets the operation_type of this AttributeDelta.

        The attribute delta operation type.

        :return: The operation_type of this AttributeDelta.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this AttributeDelta.

        The attribute delta operation type.

        :param operation_type: The operation_type of this AttributeDelta.
        :type operation_type: str
        """
        allowed_values = ["Undefined", "Add", "Replace", "Update", "Delete"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def value_type(self):
        """Gets the value_type of this AttributeDelta.

        The value type.

        :return: The value_type of this AttributeDelta.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this AttributeDelta.

        The value type.

        :param value_type: The value_type of this AttributeDelta.
        :type value_type: str
        """
        allowed_values = ["Undefined", "Dn", "Binary", "String", "Integer", "Boolean"]  # noqa: E501
        if value_type not in allowed_values:
            raise ValueError(
                "Invalid value for `value_type` ({0}), must be one of {1}"
                .format(value_type, allowed_values)
            )

        self._value_type = value_type

    @property
    def values(self):
        """Gets the values of this AttributeDelta.

        The delta values.

        :return: The values of this AttributeDelta.
        :rtype: List[ValueDelta]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AttributeDelta.

        The delta values.

        :param values: The values of this AttributeDelta.
        :type values: List[ValueDelta]
        """

        self._values = values
