# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Dimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_alerts: int=None, additional_information: str=None, display_name: str=None, health: str=None, last_updated: datetime=None, resolved_alerts: int=None, signature: str=None, simple_properties: object=None, type: str=None):
        """Dimension - a model defined in OpenAPI

        :param active_alerts: The active_alerts of this Dimension.
        :param additional_information: The additional_information of this Dimension.
        :param display_name: The display_name of this Dimension.
        :param health: The health of this Dimension.
        :param last_updated: The last_updated of this Dimension.
        :param resolved_alerts: The resolved_alerts of this Dimension.
        :param signature: The signature of this Dimension.
        :param simple_properties: The simple_properties of this Dimension.
        :param type: The type of this Dimension.
        """
        self.openapi_types = {
            'active_alerts': int,
            'additional_information': str,
            'display_name': str,
            'health': str,
            'last_updated': datetime,
            'resolved_alerts': int,
            'signature': str,
            'simple_properties': object,
            'type': str
        }

        self.attribute_map = {
            'active_alerts': 'activeAlerts',
            'additional_information': 'additionalInformation',
            'display_name': 'displayName',
            'health': 'health',
            'last_updated': 'lastUpdated',
            'resolved_alerts': 'resolvedAlerts',
            'signature': 'signature',
            'simple_properties': 'simpleProperties',
            'type': 'type'
        }

        self._active_alerts = active_alerts
        self._additional_information = additional_information
        self._display_name = display_name
        self._health = health
        self._last_updated = last_updated
        self._resolved_alerts = resolved_alerts
        self._signature = signature
        self._simple_properties = simple_properties
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dimension of this Dimension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_alerts(self):
        """Gets the active_alerts of this Dimension.

        The count of alerts that are currently active for the service.

        :return: The active_alerts of this Dimension.
        :rtype: int
        """
        return self._active_alerts

    @active_alerts.setter
    def active_alerts(self, active_alerts):
        """Sets the active_alerts of this Dimension.

        The count of alerts that are currently active for the service.

        :param active_alerts: The active_alerts of this Dimension.
        :type active_alerts: int
        """

        self._active_alerts = active_alerts

    @property
    def additional_information(self):
        """Gets the additional_information of this Dimension.

        The additional information related to the service.

        :return: The additional_information of this Dimension.
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this Dimension.

        The additional information related to the service.

        :param additional_information: The additional_information of this Dimension.
        :type additional_information: str
        """

        self._additional_information = additional_information

    @property
    def display_name(self):
        """Gets the display_name of this Dimension.

        The display name of the service.

        :return: The display_name of this Dimension.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Dimension.

        The display name of the service.

        :param display_name: The display_name of this Dimension.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def health(self):
        """Gets the health of this Dimension.

        The health status for the domain controller.

        :return: The health of this Dimension.
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Dimension.

        The health status for the domain controller.

        :param health: The health of this Dimension.
        :type health: str
        """
        allowed_values = ["Healthy", "Warning", "Error", "NotMonitored", "Missing"]  # noqa: E501
        if health not in allowed_values:
            raise ValueError(
                "Invalid value for `health` ({0}), must be one of {1}"
                .format(health, allowed_values)
            )

        self._health = health

    @property
    def last_updated(self):
        """Gets the last_updated of this Dimension.

        The date or time , in UTC, when the service properties were last updated.

        :return: The last_updated of this Dimension.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Dimension.

        The date or time , in UTC, when the service properties were last updated.

        :param last_updated: The last_updated of this Dimension.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def resolved_alerts(self):
        """Gets the resolved_alerts of this Dimension.

        The total count of alerts that has been resolved for the service.

        :return: The resolved_alerts of this Dimension.
        :rtype: int
        """
        return self._resolved_alerts

    @resolved_alerts.setter
    def resolved_alerts(self, resolved_alerts):
        """Sets the resolved_alerts of this Dimension.

        The total count of alerts that has been resolved for the service.

        :param resolved_alerts: The resolved_alerts of this Dimension.
        :type resolved_alerts: int
        """

        self._resolved_alerts = resolved_alerts

    @property
    def signature(self):
        """Gets the signature of this Dimension.

        The signature of the service.

        :return: The signature of this Dimension.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this Dimension.

        The signature of the service.

        :param signature: The signature of this Dimension.
        :type signature: str
        """

        self._signature = signature

    @property
    def simple_properties(self):
        """Gets the simple_properties of this Dimension.

        List of service specific configuration properties.

        :return: The simple_properties of this Dimension.
        :rtype: object
        """
        return self._simple_properties

    @simple_properties.setter
    def simple_properties(self, simple_properties):
        """Sets the simple_properties of this Dimension.

        List of service specific configuration properties.

        :param simple_properties: The simple_properties of this Dimension.
        :type simple_properties: object
        """

        self._simple_properties = simple_properties

    @property
    def type(self):
        """Gets the type of this Dimension.

        The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.

        :return: The type of this Dimension.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dimension.

        The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.

        :param type: The type of this Dimension.
        :type type: str
        """

        self._type = type
