# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Agent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_version: str=None, created_date: datetime=None, credential: object=None, key: str=None, machine_id: str=None, machine_name: str=None, tenant_id: str=None):
        """Agent - a model defined in OpenAPI

        :param agent_version: The agent_version of this Agent.
        :param created_date: The created_date of this Agent.
        :param credential: The credential of this Agent.
        :param key: The key of this Agent.
        :param machine_id: The machine_id of this Agent.
        :param machine_name: The machine_name of this Agent.
        :param tenant_id: The tenant_id of this Agent.
        """
        self.openapi_types = {
            'agent_version': str,
            'created_date': datetime,
            'credential': object,
            'key': str,
            'machine_id': str,
            'machine_name': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'agent_version': 'agentVersion',
            'created_date': 'createdDate',
            'credential': 'credential',
            'key': 'key',
            'machine_id': 'machineId',
            'machine_name': 'machineName',
            'tenant_id': 'tenantId'
        }

        self._agent_version = agent_version
        self._created_date = created_date
        self._credential = credential
        self._key = key
        self._machine_id = machine_id
        self._machine_name = machine_name
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Agent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Agent of this Agent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_version(self):
        """Gets the agent_version of this Agent.

        The agent version.

        :return: The agent_version of this Agent.
        :rtype: str
        """
        return self._agent_version

    @agent_version.setter
    def agent_version(self, agent_version):
        """Sets the agent_version of this Agent.

        The agent version.

        :param agent_version: The agent_version of this Agent.
        :type agent_version: str
        """

        self._agent_version = agent_version

    @property
    def created_date(self):
        """Gets the created_date of this Agent.

        The date and time, in UTC, when the agent was created.

        :return: The created_date of this Agent.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Agent.

        The date and time, in UTC, when the agent was created.

        :param created_date: The created_date of this Agent.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def credential(self):
        """Gets the credential of this Agent.

        The agent credential details.

        :return: The credential of this Agent.
        :rtype: object
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this Agent.

        The agent credential details.

        :param credential: The credential of this Agent.
        :type credential: object
        """

        self._credential = credential

    @property
    def key(self):
        """Gets the key of this Agent.

         The connector hash key.

        :return: The key of this Agent.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Agent.

         The connector hash key.

        :param key: The key of this Agent.
        :type key: str
        """

        self._key = key

    @property
    def machine_id(self):
        """Gets the machine_id of this Agent.

        The machine Id.

        :return: The machine_id of this Agent.
        :rtype: str
        """
        return self._machine_id

    @machine_id.setter
    def machine_id(self, machine_id):
        """Sets the machine_id of this Agent.

        The machine Id.

        :param machine_id: The machine_id of this Agent.
        :type machine_id: str
        """

        self._machine_id = machine_id

    @property
    def machine_name(self):
        """Gets the machine_name of this Agent.

        The machine name.

        :return: The machine_name of this Agent.
        :rtype: str
        """
        return self._machine_name

    @machine_name.setter
    def machine_name(self, machine_name):
        """Sets the machine_name of this Agent.

        The machine name.

        :param machine_name: The machine_name of this Agent.
        :type machine_name: str
        """

        self._machine_name = machine_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Agent.

        The tenant Id.

        :return: The tenant_id of this Agent.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Agent.

        The tenant Id.

        :param tenant_id: The tenant_id of this Agent.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
