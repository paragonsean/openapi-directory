# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partition import Partition
from openapi_server.models.run_profile import RunProfile
from openapi_server import util


class Connector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes_included: List[str]=None, classes_included: List[str]=None, connector_id: str=None, description: str=None, id: str=None, name: str=None, partitions: List[Partition]=None, password_hash_sync_configuration: object=None, password_management_settings: object=None, run_profiles: List[RunProfile]=None, schema_xml: str=None, time_created: datetime=None, time_last_modified: datetime=None, type: str=None, version: int=None):
        """Connector - a model defined in OpenAPI

        :param attributes_included: The attributes_included of this Connector.
        :param classes_included: The classes_included of this Connector.
        :param connector_id: The connector_id of this Connector.
        :param description: The description of this Connector.
        :param id: The id of this Connector.
        :param name: The name of this Connector.
        :param partitions: The partitions of this Connector.
        :param password_hash_sync_configuration: The password_hash_sync_configuration of this Connector.
        :param password_management_settings: The password_management_settings of this Connector.
        :param run_profiles: The run_profiles of this Connector.
        :param schema_xml: The schema_xml of this Connector.
        :param time_created: The time_created of this Connector.
        :param time_last_modified: The time_last_modified of this Connector.
        :param type: The type of this Connector.
        :param version: The version of this Connector.
        """
        self.openapi_types = {
            'attributes_included': List[str],
            'classes_included': List[str],
            'connector_id': str,
            'description': str,
            'id': str,
            'name': str,
            'partitions': List[Partition],
            'password_hash_sync_configuration': object,
            'password_management_settings': object,
            'run_profiles': List[RunProfile],
            'schema_xml': str,
            'time_created': datetime,
            'time_last_modified': datetime,
            'type': str,
            'version': int
        }

        self.attribute_map = {
            'attributes_included': 'attributesIncluded',
            'classes_included': 'classesIncluded',
            'connector_id': 'connectorId',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'partitions': 'partitions',
            'password_hash_sync_configuration': 'passwordHashSyncConfiguration',
            'password_management_settings': 'passwordManagementSettings',
            'run_profiles': 'runProfiles',
            'schema_xml': 'schemaXml',
            'time_created': 'timeCreated',
            'time_last_modified': 'timeLastModified',
            'type': 'type',
            'version': 'version'
        }

        self._attributes_included = attributes_included
        self._classes_included = classes_included
        self._connector_id = connector_id
        self._description = description
        self._id = id
        self._name = name
        self._partitions = partitions
        self._password_hash_sync_configuration = password_hash_sync_configuration
        self._password_management_settings = password_management_settings
        self._run_profiles = run_profiles
        self._schema_xml = schema_xml
        self._time_created = time_created
        self._time_last_modified = time_last_modified
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connector of this Connector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes_included(self):
        """Gets the attributes_included of this Connector.

        The attribute inclusion list of the connector.

        :return: The attributes_included of this Connector.
        :rtype: List[str]
        """
        return self._attributes_included

    @attributes_included.setter
    def attributes_included(self, attributes_included):
        """Sets the attributes_included of this Connector.

        The attribute inclusion list of the connector.

        :param attributes_included: The attributes_included of this Connector.
        :type attributes_included: List[str]
        """

        self._attributes_included = attributes_included

    @property
    def classes_included(self):
        """Gets the classes_included of this Connector.

        The class inclusion list of the connector.

        :return: The classes_included of this Connector.
        :rtype: List[str]
        """
        return self._classes_included

    @classes_included.setter
    def classes_included(self, classes_included):
        """Sets the classes_included of this Connector.

        The class inclusion list of the connector.

        :param classes_included: The classes_included of this Connector.
        :type classes_included: List[str]
        """

        self._classes_included = classes_included

    @property
    def connector_id(self):
        """Gets the connector_id of this Connector.

        The connector Id.

        :return: The connector_id of this Connector.
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this Connector.

        The connector Id.

        :param connector_id: The connector_id of this Connector.
        :type connector_id: str
        """

        self._connector_id = connector_id

    @property
    def description(self):
        """Gets the description of this Connector.

        The connector description.

        :return: The description of this Connector.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Connector.

        The connector description.

        :param description: The description of this Connector.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Connector.

        The connector Id.

        :return: The id of this Connector.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Connector.

        The connector Id.

        :param id: The id of this Connector.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Connector.

        The connector name.

        :return: The name of this Connector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Connector.

        The connector name.

        :param name: The name of this Connector.
        :type name: str
        """

        self._name = name

    @property
    def partitions(self):
        """Gets the partitions of this Connector.

        The partitions of the connector.

        :return: The partitions of this Connector.
        :rtype: List[Partition]
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """Sets the partitions of this Connector.

        The partitions of the connector.

        :param partitions: The partitions of this Connector.
        :type partitions: List[Partition]
        """

        self._partitions = partitions

    @property
    def password_hash_sync_configuration(self):
        """Gets the password_hash_sync_configuration of this Connector.

        The password hash synchronization configuration of the connector.

        :return: The password_hash_sync_configuration of this Connector.
        :rtype: object
        """
        return self._password_hash_sync_configuration

    @password_hash_sync_configuration.setter
    def password_hash_sync_configuration(self, password_hash_sync_configuration):
        """Sets the password_hash_sync_configuration of this Connector.

        The password hash synchronization configuration of the connector.

        :param password_hash_sync_configuration: The password_hash_sync_configuration of this Connector.
        :type password_hash_sync_configuration: object
        """

        self._password_hash_sync_configuration = password_hash_sync_configuration

    @property
    def password_management_settings(self):
        """Gets the password_management_settings of this Connector.

        The password management settings of the connector.

        :return: The password_management_settings of this Connector.
        :rtype: object
        """
        return self._password_management_settings

    @password_management_settings.setter
    def password_management_settings(self, password_management_settings):
        """Sets the password_management_settings of this Connector.

        The password management settings of the connector.

        :param password_management_settings: The password_management_settings of this Connector.
        :type password_management_settings: object
        """

        self._password_management_settings = password_management_settings

    @property
    def run_profiles(self):
        """Gets the run_profiles of this Connector.

        The run profiles of the connector.

        :return: The run_profiles of this Connector.
        :rtype: List[RunProfile]
        """
        return self._run_profiles

    @run_profiles.setter
    def run_profiles(self, run_profiles):
        """Sets the run_profiles of this Connector.

        The run profiles of the connector.

        :param run_profiles: The run_profiles of this Connector.
        :type run_profiles: List[RunProfile]
        """

        self._run_profiles = run_profiles

    @property
    def schema_xml(self):
        """Gets the schema_xml of this Connector.

        The schema xml for the connector.

        :return: The schema_xml of this Connector.
        :rtype: str
        """
        return self._schema_xml

    @schema_xml.setter
    def schema_xml(self, schema_xml):
        """Sets the schema_xml of this Connector.

        The schema xml for the connector.

        :param schema_xml: The schema_xml of this Connector.
        :type schema_xml: str
        """

        self._schema_xml = schema_xml

    @property
    def time_created(self):
        """Gets the time_created of this Connector.

        The date and time when this connector was created.

        :return: The time_created of this Connector.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this Connector.

        The date and time when this connector was created.

        :param time_created: The time_created of this Connector.
        :type time_created: datetime
        """

        self._time_created = time_created

    @property
    def time_last_modified(self):
        """Gets the time_last_modified of this Connector.

        The date and time when this connector was last modified.

        :return: The time_last_modified of this Connector.
        :rtype: datetime
        """
        return self._time_last_modified

    @time_last_modified.setter
    def time_last_modified(self, time_last_modified):
        """Sets the time_last_modified of this Connector.

        The date and time when this connector was last modified.

        :param time_last_modified: The time_last_modified of this Connector.
        :type time_last_modified: datetime
        """

        self._time_last_modified = time_last_modified

    @property
    def type(self):
        """Gets the type of this Connector.

        The connector type.

        :return: The type of this Connector.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Connector.

        The connector type.

        :param type: The type of this Connector.
        :type type: str
        """

        self._type = type

    @property
    def version(self):
        """Gets the version of this Connector.

        The connector version

        :return: The version of this Connector.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Connector.

        The connector version

        :param version: The version of this Connector.
        :type version: int
        """

        self._version = version
