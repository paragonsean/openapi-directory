# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReplicationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_dc_count: int=None, forest_name: str=None, total_dc_count: int=None):
        """ReplicationStatus - a model defined in OpenAPI

        :param error_dc_count: The error_dc_count of this ReplicationStatus.
        :param forest_name: The forest_name of this ReplicationStatus.
        :param total_dc_count: The total_dc_count of this ReplicationStatus.
        """
        self.openapi_types = {
            'error_dc_count': int,
            'forest_name': str,
            'total_dc_count': int
        }

        self.attribute_map = {
            'error_dc_count': 'errorDcCount',
            'forest_name': 'forestName',
            'total_dc_count': 'totalDcCount'
        }

        self._error_dc_count = error_dc_count
        self._forest_name = forest_name
        self._total_dc_count = total_dc_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicationStatus of this ReplicationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_dc_count(self):
        """Gets the error_dc_count of this ReplicationStatus.

        The total number of domain controllers with error in a given forest.

        :return: The error_dc_count of this ReplicationStatus.
        :rtype: int
        """
        return self._error_dc_count

    @error_dc_count.setter
    def error_dc_count(self, error_dc_count):
        """Sets the error_dc_count of this ReplicationStatus.

        The total number of domain controllers with error in a given forest.

        :param error_dc_count: The error_dc_count of this ReplicationStatus.
        :type error_dc_count: int
        """

        self._error_dc_count = error_dc_count

    @property
    def forest_name(self):
        """Gets the forest_name of this ReplicationStatus.

        The forest name.

        :return: The forest_name of this ReplicationStatus.
        :rtype: str
        """
        return self._forest_name

    @forest_name.setter
    def forest_name(self, forest_name):
        """Sets the forest_name of this ReplicationStatus.

        The forest name.

        :param forest_name: The forest_name of this ReplicationStatus.
        :type forest_name: str
        """

        self._forest_name = forest_name

    @property
    def total_dc_count(self):
        """Gets the total_dc_count of this ReplicationStatus.

        The total number of domain controllers for a given forest.

        :return: The total_dc_count of this ReplicationStatus.
        :rtype: int
        """
        return self._total_dc_count

    @total_dc_count.setter
    def total_dc_count(self, total_dc_count):
        """Sets the total_dc_count of this ReplicationStatus.

        The total number of domain controllers for a given forest.

        :param total_dc_count: The total_dc_count of this ReplicationStatus.
        :type total_dc_count: int
        """

        self._total_dc_count = total_dc_count
