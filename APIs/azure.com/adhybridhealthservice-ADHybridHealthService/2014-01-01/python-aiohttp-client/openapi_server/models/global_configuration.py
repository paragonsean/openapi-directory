# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item import Item
from openapi_server import util


class GlobalConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_set: List[Item]=None, num_saved_pwd_event: int=None, password_sync_enabled: bool=None, schema_xml: str=None, version: int=None):
        """GlobalConfiguration - a model defined in OpenAPI

        :param feature_set: The feature_set of this GlobalConfiguration.
        :param num_saved_pwd_event: The num_saved_pwd_event of this GlobalConfiguration.
        :param password_sync_enabled: The password_sync_enabled of this GlobalConfiguration.
        :param schema_xml: The schema_xml of this GlobalConfiguration.
        :param version: The version of this GlobalConfiguration.
        """
        self.openapi_types = {
            'feature_set': List[Item],
            'num_saved_pwd_event': int,
            'password_sync_enabled': bool,
            'schema_xml': str,
            'version': int
        }

        self.attribute_map = {
            'feature_set': 'featureSet',
            'num_saved_pwd_event': 'numSavedPwdEvent',
            'password_sync_enabled': 'passwordSyncEnabled',
            'schema_xml': 'schemaXml',
            'version': 'version'
        }

        self._feature_set = feature_set
        self._num_saved_pwd_event = num_saved_pwd_event
        self._password_sync_enabled = password_sync_enabled
        self._schema_xml = schema_xml
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalConfiguration of this GlobalConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_set(self):
        """Gets the feature_set of this GlobalConfiguration.

        The list of additional feature sets.

        :return: The feature_set of this GlobalConfiguration.
        :rtype: List[Item]
        """
        return self._feature_set

    @feature_set.setter
    def feature_set(self, feature_set):
        """Sets the feature_set of this GlobalConfiguration.

        The list of additional feature sets.

        :param feature_set: The feature_set of this GlobalConfiguration.
        :type feature_set: List[Item]
        """

        self._feature_set = feature_set

    @property
    def num_saved_pwd_event(self):
        """Gets the num_saved_pwd_event of this GlobalConfiguration.

        The number of saved password events.

        :return: The num_saved_pwd_event of this GlobalConfiguration.
        :rtype: int
        """
        return self._num_saved_pwd_event

    @num_saved_pwd_event.setter
    def num_saved_pwd_event(self, num_saved_pwd_event):
        """Sets the num_saved_pwd_event of this GlobalConfiguration.

        The number of saved password events.

        :param num_saved_pwd_event: The num_saved_pwd_event of this GlobalConfiguration.
        :type num_saved_pwd_event: int
        """

        self._num_saved_pwd_event = num_saved_pwd_event

    @property
    def password_sync_enabled(self):
        """Gets the password_sync_enabled of this GlobalConfiguration.

        Indicates if password sync is enabled or not.

        :return: The password_sync_enabled of this GlobalConfiguration.
        :rtype: bool
        """
        return self._password_sync_enabled

    @password_sync_enabled.setter
    def password_sync_enabled(self, password_sync_enabled):
        """Sets the password_sync_enabled of this GlobalConfiguration.

        Indicates if password sync is enabled or not.

        :param password_sync_enabled: The password_sync_enabled of this GlobalConfiguration.
        :type password_sync_enabled: bool
        """

        self._password_sync_enabled = password_sync_enabled

    @property
    def schema_xml(self):
        """Gets the schema_xml of this GlobalConfiguration.

        The schema for the configuration.

        :return: The schema_xml of this GlobalConfiguration.
        :rtype: str
        """
        return self._schema_xml

    @schema_xml.setter
    def schema_xml(self, schema_xml):
        """Sets the schema_xml of this GlobalConfiguration.

        The schema for the configuration.

        :param schema_xml: The schema_xml of this GlobalConfiguration.
        :type schema_xml: str
        """

        self._schema_xml = schema_xml

    @property
    def version(self):
        """Gets the version of this GlobalConfiguration.

        The version for the global configuration.

        :return: The version of this GlobalConfiguration.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GlobalConfiguration.

        The version for the global configuration.

        :param version: The version of this GlobalConfiguration.
        :type version: int
        """

        self._version = version
