# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_account: str=None, service_type: int=None, sql_database_name: str=None, sql_database_size: int=None, sql_edition: str=None, sql_instance: str=None, sql_server: str=None, sql_version: str=None, version: str=None):
        """ServiceConfiguration - a model defined in OpenAPI

        :param service_account: The service_account of this ServiceConfiguration.
        :param service_type: The service_type of this ServiceConfiguration.
        :param sql_database_name: The sql_database_name of this ServiceConfiguration.
        :param sql_database_size: The sql_database_size of this ServiceConfiguration.
        :param sql_edition: The sql_edition of this ServiceConfiguration.
        :param sql_instance: The sql_instance of this ServiceConfiguration.
        :param sql_server: The sql_server of this ServiceConfiguration.
        :param sql_version: The sql_version of this ServiceConfiguration.
        :param version: The version of this ServiceConfiguration.
        """
        self.openapi_types = {
            'service_account': str,
            'service_type': int,
            'sql_database_name': str,
            'sql_database_size': int,
            'sql_edition': str,
            'sql_instance': str,
            'sql_server': str,
            'sql_version': str,
            'version': str
        }

        self.attribute_map = {
            'service_account': 'serviceAccount',
            'service_type': 'serviceType',
            'sql_database_name': 'sqlDatabaseName',
            'sql_database_size': 'sqlDatabaseSize',
            'sql_edition': 'sqlEdition',
            'sql_instance': 'sqlInstance',
            'sql_server': 'sqlServer',
            'sql_version': 'sqlVersion',
            'version': 'version'
        }

        self._service_account = service_account
        self._service_type = service_type
        self._sql_database_name = sql_database_name
        self._sql_database_size = sql_database_size
        self._sql_edition = sql_edition
        self._sql_instance = sql_instance
        self._sql_server = sql_server
        self._sql_version = sql_version
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceConfiguration of this ServiceConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_account(self):
        """Gets the service_account of this ServiceConfiguration.

        The service account.

        :return: The service_account of this ServiceConfiguration.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this ServiceConfiguration.

        The service account.

        :param service_account: The service_account of this ServiceConfiguration.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def service_type(self):
        """Gets the service_type of this ServiceConfiguration.

        The service type of the server.

        :return: The service_type of this ServiceConfiguration.
        :rtype: int
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this ServiceConfiguration.

        The service type of the server.

        :param service_type: The service_type of this ServiceConfiguration.
        :type service_type: int
        """

        self._service_type = service_type

    @property
    def sql_database_name(self):
        """Gets the sql_database_name of this ServiceConfiguration.

        The SQL database.

        :return: The sql_database_name of this ServiceConfiguration.
        :rtype: str
        """
        return self._sql_database_name

    @sql_database_name.setter
    def sql_database_name(self, sql_database_name):
        """Sets the sql_database_name of this ServiceConfiguration.

        The SQL database.

        :param sql_database_name: The sql_database_name of this ServiceConfiguration.
        :type sql_database_name: str
        """

        self._sql_database_name = sql_database_name

    @property
    def sql_database_size(self):
        """Gets the sql_database_size of this ServiceConfiguration.

        The SQL database size.

        :return: The sql_database_size of this ServiceConfiguration.
        :rtype: int
        """
        return self._sql_database_size

    @sql_database_size.setter
    def sql_database_size(self, sql_database_size):
        """Sets the sql_database_size of this ServiceConfiguration.

        The SQL database size.

        :param sql_database_size: The sql_database_size of this ServiceConfiguration.
        :type sql_database_size: int
        """

        self._sql_database_size = sql_database_size

    @property
    def sql_edition(self):
        """Gets the sql_edition of this ServiceConfiguration.

        The SQL edition

        :return: The sql_edition of this ServiceConfiguration.
        :rtype: str
        """
        return self._sql_edition

    @sql_edition.setter
    def sql_edition(self, sql_edition):
        """Sets the sql_edition of this ServiceConfiguration.

        The SQL edition

        :param sql_edition: The sql_edition of this ServiceConfiguration.
        :type sql_edition: str
        """

        self._sql_edition = sql_edition

    @property
    def sql_instance(self):
        """Gets the sql_instance of this ServiceConfiguration.

        The SQL instance details.

        :return: The sql_instance of this ServiceConfiguration.
        :rtype: str
        """
        return self._sql_instance

    @sql_instance.setter
    def sql_instance(self, sql_instance):
        """Sets the sql_instance of this ServiceConfiguration.

        The SQL instance details.

        :param sql_instance: The sql_instance of this ServiceConfiguration.
        :type sql_instance: str
        """

        self._sql_instance = sql_instance

    @property
    def sql_server(self):
        """Gets the sql_server of this ServiceConfiguration.

        The SQL server information.

        :return: The sql_server of this ServiceConfiguration.
        :rtype: str
        """
        return self._sql_server

    @sql_server.setter
    def sql_server(self, sql_server):
        """Sets the sql_server of this ServiceConfiguration.

        The SQL server information.

        :param sql_server: The sql_server of this ServiceConfiguration.
        :type sql_server: str
        """

        self._sql_server = sql_server

    @property
    def sql_version(self):
        """Gets the sql_version of this ServiceConfiguration.

        The SQL version.

        :return: The sql_version of this ServiceConfiguration.
        :rtype: str
        """
        return self._sql_version

    @sql_version.setter
    def sql_version(self, sql_version):
        """Sets the sql_version of this ServiceConfiguration.

        The SQL version.

        :param sql_version: The sql_version of this ServiceConfiguration.
        :type sql_version: str
        """

        self._sql_version = sql_version

    @property
    def version(self):
        """Gets the version of this ServiceConfiguration.

        The version of the sync service.

        :return: The version of this ServiceConfiguration.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ServiceConfiguration.

        The version of the sync service.

        :param version: The version of this ServiceConfiguration.
        :type version: str
        """

        self._version = version
