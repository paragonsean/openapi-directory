# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_information import AdditionalInformation
from openapi_server.models.help_link import HelpLink
from openapi_server.models.item import Item
from openapi_server import util


class Alert(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_alert_properties: List[Item]=None, additional_information: List[AdditionalInformation]=None, alert_id: str=None, created_date: datetime=None, description: str=None, display_name: str=None, last_updated: datetime=None, level: str=None, monitor_role_type: str=None, related_links: List[HelpLink]=None, remediation: str=None, resolved_alert_properties: List[Item]=None, resolved_date: datetime=None, scope: str=None, service_id: str=None, service_member_id: str=None, short_name: str=None, state: str=None, tenant_id: str=None):
        """Alert - a model defined in OpenAPI

        :param active_alert_properties: The active_alert_properties of this Alert.
        :param additional_information: The additional_information of this Alert.
        :param alert_id: The alert_id of this Alert.
        :param created_date: The created_date of this Alert.
        :param description: The description of this Alert.
        :param display_name: The display_name of this Alert.
        :param last_updated: The last_updated of this Alert.
        :param level: The level of this Alert.
        :param monitor_role_type: The monitor_role_type of this Alert.
        :param related_links: The related_links of this Alert.
        :param remediation: The remediation of this Alert.
        :param resolved_alert_properties: The resolved_alert_properties of this Alert.
        :param resolved_date: The resolved_date of this Alert.
        :param scope: The scope of this Alert.
        :param service_id: The service_id of this Alert.
        :param service_member_id: The service_member_id of this Alert.
        :param short_name: The short_name of this Alert.
        :param state: The state of this Alert.
        :param tenant_id: The tenant_id of this Alert.
        """
        self.openapi_types = {
            'active_alert_properties': List[Item],
            'additional_information': List[AdditionalInformation],
            'alert_id': str,
            'created_date': datetime,
            'description': str,
            'display_name': str,
            'last_updated': datetime,
            'level': str,
            'monitor_role_type': str,
            'related_links': List[HelpLink],
            'remediation': str,
            'resolved_alert_properties': List[Item],
            'resolved_date': datetime,
            'scope': str,
            'service_id': str,
            'service_member_id': str,
            'short_name': str,
            'state': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'active_alert_properties': 'activeAlertProperties',
            'additional_information': 'additionalInformation',
            'alert_id': 'alertId',
            'created_date': 'createdDate',
            'description': 'description',
            'display_name': 'displayName',
            'last_updated': 'lastUpdated',
            'level': 'level',
            'monitor_role_type': 'monitorRoleType',
            'related_links': 'relatedLinks',
            'remediation': 'remediation',
            'resolved_alert_properties': 'resolvedAlertProperties',
            'resolved_date': 'resolvedDate',
            'scope': 'scope',
            'service_id': 'serviceId',
            'service_member_id': 'serviceMemberId',
            'short_name': 'shortName',
            'state': 'state',
            'tenant_id': 'tenantId'
        }

        self._active_alert_properties = active_alert_properties
        self._additional_information = additional_information
        self._alert_id = alert_id
        self._created_date = created_date
        self._description = description
        self._display_name = display_name
        self._last_updated = last_updated
        self._level = level
        self._monitor_role_type = monitor_role_type
        self._related_links = related_links
        self._remediation = remediation
        self._resolved_alert_properties = resolved_alert_properties
        self._resolved_date = resolved_date
        self._scope = scope
        self._service_id = service_id
        self._service_member_id = service_member_id
        self._short_name = short_name
        self._state = state
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Alert':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Alert of this Alert.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_alert_properties(self):
        """Gets the active_alert_properties of this Alert.

        The active alert properties.

        :return: The active_alert_properties of this Alert.
        :rtype: List[Item]
        """
        return self._active_alert_properties

    @active_alert_properties.setter
    def active_alert_properties(self, active_alert_properties):
        """Sets the active_alert_properties of this Alert.

        The active alert properties.

        :param active_alert_properties: The active_alert_properties of this Alert.
        :type active_alert_properties: List[Item]
        """

        self._active_alert_properties = active_alert_properties

    @property
    def additional_information(self):
        """Gets the additional_information of this Alert.

        Additional information related to the alert.

        :return: The additional_information of this Alert.
        :rtype: List[AdditionalInformation]
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this Alert.

        Additional information related to the alert.

        :param additional_information: The additional_information of this Alert.
        :type additional_information: List[AdditionalInformation]
        """

        self._additional_information = additional_information

    @property
    def alert_id(self):
        """Gets the alert_id of this Alert.

        The alert Id.

        :return: The alert_id of this Alert.
        :rtype: str
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this Alert.

        The alert Id.

        :param alert_id: The alert_id of this Alert.
        :type alert_id: str
        """

        self._alert_id = alert_id

    @property
    def created_date(self):
        """Gets the created_date of this Alert.

        The date and time,in UTC,when the alert was created.

        :return: The created_date of this Alert.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Alert.

        The date and time,in UTC,when the alert was created.

        :param created_date: The created_date of this Alert.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def description(self):
        """Gets the description of this Alert.

        The alert description.

        :return: The description of this Alert.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Alert.

        The alert description.

        :param description: The description of this Alert.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Alert.

        The display name for the alert.

        :return: The display_name of this Alert.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Alert.

        The display name for the alert.

        :param display_name: The display_name of this Alert.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def last_updated(self):
        """Gets the last_updated of this Alert.

        The date and time, in UTC, when the alert was last updated.

        :return: The last_updated of this Alert.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Alert.

        The date and time, in UTC, when the alert was last updated.

        :param last_updated: The last_updated of this Alert.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def level(self):
        """Gets the level of this Alert.

        The alert level which indicates the severity of the alert.

        :return: The level of this Alert.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Alert.

        The alert level which indicates the severity of the alert.

        :param level: The level of this Alert.
        :type level: str
        """
        allowed_values = ["Warning", "Error", "PreWarning"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def monitor_role_type(self):
        """Gets the monitor_role_type of this Alert.

        The monitoring role type for which the alert was raised.

        :return: The monitor_role_type of this Alert.
        :rtype: str
        """
        return self._monitor_role_type

    @monitor_role_type.setter
    def monitor_role_type(self, monitor_role_type):
        """Sets the monitor_role_type of this Alert.

        The monitoring role type for which the alert was raised.

        :param monitor_role_type: The monitor_role_type of this Alert.
        :type monitor_role_type: str
        """

        self._monitor_role_type = monitor_role_type

    @property
    def related_links(self):
        """Gets the related_links of this Alert.

        The help links to get more information related to the alert.

        :return: The related_links of this Alert.
        :rtype: List[HelpLink]
        """
        return self._related_links

    @related_links.setter
    def related_links(self, related_links):
        """Sets the related_links of this Alert.

        The help links to get more information related to the alert.

        :param related_links: The related_links of this Alert.
        :type related_links: List[HelpLink]
        """

        self._related_links = related_links

    @property
    def remediation(self):
        """Gets the remediation of this Alert.

        The alert remediation.

        :return: The remediation of this Alert.
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this Alert.

        The alert remediation.

        :param remediation: The remediation of this Alert.
        :type remediation: str
        """

        self._remediation = remediation

    @property
    def resolved_alert_properties(self):
        """Gets the resolved_alert_properties of this Alert.

        The resolved alert properties.

        :return: The resolved_alert_properties of this Alert.
        :rtype: List[Item]
        """
        return self._resolved_alert_properties

    @resolved_alert_properties.setter
    def resolved_alert_properties(self, resolved_alert_properties):
        """Sets the resolved_alert_properties of this Alert.

        The resolved alert properties.

        :param resolved_alert_properties: The resolved_alert_properties of this Alert.
        :type resolved_alert_properties: List[Item]
        """

        self._resolved_alert_properties = resolved_alert_properties

    @property
    def resolved_date(self):
        """Gets the resolved_date of this Alert.

        The date and time, in UTC, when the alert was resolved.

        :return: The resolved_date of this Alert.
        :rtype: datetime
        """
        return self._resolved_date

    @resolved_date.setter
    def resolved_date(self, resolved_date):
        """Sets the resolved_date of this Alert.

        The date and time, in UTC, when the alert was resolved.

        :param resolved_date: The resolved_date of this Alert.
        :type resolved_date: datetime
        """

        self._resolved_date = resolved_date

    @property
    def scope(self):
        """Gets the scope of this Alert.

        The scope of the alert. Indicates if it is a service or a server related alert.

        :return: The scope of this Alert.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Alert.

        The scope of the alert. Indicates if it is a service or a server related alert.

        :param scope: The scope of this Alert.
        :type scope: str
        """

        self._scope = scope

    @property
    def service_id(self):
        """Gets the service_id of this Alert.

        The service Id.

        :return: The service_id of this Alert.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Alert.

        The service Id.

        :param service_id: The service_id of this Alert.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def service_member_id(self):
        """Gets the service_member_id of this Alert.

        The server Id.

        :return: The service_member_id of this Alert.
        :rtype: str
        """
        return self._service_member_id

    @service_member_id.setter
    def service_member_id(self, service_member_id):
        """Sets the service_member_id of this Alert.

        The server Id.

        :param service_member_id: The service_member_id of this Alert.
        :type service_member_id: str
        """

        self._service_member_id = service_member_id

    @property
    def short_name(self):
        """Gets the short_name of this Alert.

        The alert short name.

        :return: The short_name of this Alert.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Alert.

        The alert short name.

        :param short_name: The short_name of this Alert.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def state(self):
        """Gets the state of this Alert.

        The alert state which can be either active or resolved with multiple resolution types.

        :return: The state of this Alert.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Alert.

        The alert state which can be either active or resolved with multiple resolution types.

        :param state: The state of this Alert.
        :type state: str
        """
        allowed_values = ["Active", "ResolvedByPositiveResult", "ResolvedManually", "ResolvedByTimer", "ResolvedByStateChange"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def tenant_id(self):
        """Gets the tenant_id of this Alert.

        The tenant Id.

        :return: The tenant_id of this Alert.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this Alert.

        The tenant Id.

        :param tenant_id: The tenant_id of this Alert.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
