# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PartitionScope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, containers_excluded: List[str]=None, containers_included: List[str]=None, is_default: bool=None, object_classes: List[str]=None):
        """PartitionScope - a model defined in OpenAPI

        :param containers_excluded: The containers_excluded of this PartitionScope.
        :param containers_included: The containers_included of this PartitionScope.
        :param is_default: The is_default of this PartitionScope.
        :param object_classes: The object_classes of this PartitionScope.
        """
        self.openapi_types = {
            'containers_excluded': List[str],
            'containers_included': List[str],
            'is_default': bool,
            'object_classes': List[str]
        }

        self.attribute_map = {
            'containers_excluded': 'containersExcluded',
            'containers_included': 'containersIncluded',
            'is_default': 'isDefault',
            'object_classes': 'objectClasses'
        }

        self._containers_excluded = containers_excluded
        self._containers_included = containers_included
        self._is_default = is_default
        self._object_classes = object_classes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionScope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionScope of this PartitionScope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def containers_excluded(self):
        """Gets the containers_excluded of this PartitionScope.

        The list of containers excluded.

        :return: The containers_excluded of this PartitionScope.
        :rtype: List[str]
        """
        return self._containers_excluded

    @containers_excluded.setter
    def containers_excluded(self, containers_excluded):
        """Sets the containers_excluded of this PartitionScope.

        The list of containers excluded.

        :param containers_excluded: The containers_excluded of this PartitionScope.
        :type containers_excluded: List[str]
        """

        self._containers_excluded = containers_excluded

    @property
    def containers_included(self):
        """Gets the containers_included of this PartitionScope.

        The list of containers included.

        :return: The containers_included of this PartitionScope.
        :rtype: List[str]
        """
        return self._containers_included

    @containers_included.setter
    def containers_included(self, containers_included):
        """Sets the containers_included of this PartitionScope.

        The list of containers included.

        :param containers_included: The containers_included of this PartitionScope.
        :type containers_included: List[str]
        """

        self._containers_included = containers_included

    @property
    def is_default(self):
        """Gets the is_default of this PartitionScope.

        Indicates if the partition scope is default or not.

        :return: The is_default of this PartitionScope.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this PartitionScope.

        Indicates if the partition scope is default or not.

        :param is_default: The is_default of this PartitionScope.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def object_classes(self):
        """Gets the object_classes of this PartitionScope.

        The in-scope object classes.

        :return: The object_classes of this PartitionScope.
        :rtype: List[str]
        """
        return self._object_classes

    @object_classes.setter
    def object_classes(self, object_classes):
        """Sets the object_classes of this PartitionScope.

        The in-scope object classes.

        :param object_classes: The object_classes of this PartitionScope.
        :type object_classes: List[str]
        """

        self._object_classes = object_classes
