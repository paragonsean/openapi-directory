# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_mpping_source import AttributeMppingSource
from openapi_server import util


class AttributeMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_id: str=None, destination_attribute: str=None, mapping_source: AttributeMppingSource=None, type: str=None):
        """AttributeMapping - a model defined in OpenAPI

        :param context_id: The context_id of this AttributeMapping.
        :param destination_attribute: The destination_attribute of this AttributeMapping.
        :param mapping_source: The mapping_source of this AttributeMapping.
        :param type: The type of this AttributeMapping.
        """
        self.openapi_types = {
            'context_id': str,
            'destination_attribute': str,
            'mapping_source': AttributeMppingSource,
            'type': str
        }

        self.attribute_map = {
            'context_id': 'contextId',
            'destination_attribute': 'destinationAttribute',
            'mapping_source': 'mappingSource',
            'type': 'type'
        }

        self._context_id = context_id
        self._destination_attribute = destination_attribute
        self._mapping_source = mapping_source
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeMapping of this AttributeMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_id(self):
        """Gets the context_id of this AttributeMapping.

        The context Id.

        :return: The context_id of this AttributeMapping.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this AttributeMapping.

        The context Id.

        :param context_id: The context_id of this AttributeMapping.
        :type context_id: str
        """

        self._context_id = context_id

    @property
    def destination_attribute(self):
        """Gets the destination_attribute of this AttributeMapping.

        The destination attribute.

        :return: The destination_attribute of this AttributeMapping.
        :rtype: str
        """
        return self._destination_attribute

    @destination_attribute.setter
    def destination_attribute(self, destination_attribute):
        """Sets the destination_attribute of this AttributeMapping.

        The destination attribute.

        :param destination_attribute: The destination_attribute of this AttributeMapping.
        :type destination_attribute: str
        """

        self._destination_attribute = destination_attribute

    @property
    def mapping_source(self):
        """Gets the mapping_source of this AttributeMapping.


        :return: The mapping_source of this AttributeMapping.
        :rtype: AttributeMppingSource
        """
        return self._mapping_source

    @mapping_source.setter
    def mapping_source(self, mapping_source):
        """Sets the mapping_source of this AttributeMapping.


        :param mapping_source: The mapping_source of this AttributeMapping.
        :type mapping_source: AttributeMppingSource
        """

        self._mapping_source = mapping_source

    @property
    def type(self):
        """Gets the type of this AttributeMapping.

        The attribute mapping type.

        :return: The type of this AttributeMapping.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttributeMapping.

        The attribute mapping type.

        :param type: The type of this AttributeMapping.
        :type type: str
        """
        allowed_values = ["Constant", "Direct", "DnPart", "Script"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
