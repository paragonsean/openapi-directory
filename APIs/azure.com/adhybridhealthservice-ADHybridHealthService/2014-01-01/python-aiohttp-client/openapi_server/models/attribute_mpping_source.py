# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttributeMppingSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constant_value: str=None, dn_part: int=None, script_context: str=None, source_attribute: List[str]=None):
        """AttributeMppingSource - a model defined in OpenAPI

        :param constant_value: The constant_value of this AttributeMppingSource.
        :param dn_part: The dn_part of this AttributeMppingSource.
        :param script_context: The script_context of this AttributeMppingSource.
        :param source_attribute: The source_attribute of this AttributeMppingSource.
        """
        self.openapi_types = {
            'constant_value': str,
            'dn_part': int,
            'script_context': str,
            'source_attribute': List[str]
        }

        self.attribute_map = {
            'constant_value': 'constantValue',
            'dn_part': 'dnPart',
            'script_context': 'scriptContext',
            'source_attribute': 'sourceAttribute'
        }

        self._constant_value = constant_value
        self._dn_part = dn_part
        self._script_context = script_context
        self._source_attribute = source_attribute

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeMppingSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeMppingSource of this AttributeMppingSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constant_value(self):
        """Gets the constant_value of this AttributeMppingSource.

        The constant value.

        :return: The constant_value of this AttributeMppingSource.
        :rtype: str
        """
        return self._constant_value

    @constant_value.setter
    def constant_value(self, constant_value):
        """Sets the constant_value of this AttributeMppingSource.

        The constant value.

        :param constant_value: The constant_value of this AttributeMppingSource.
        :type constant_value: str
        """

        self._constant_value = constant_value

    @property
    def dn_part(self):
        """Gets the dn_part of this AttributeMppingSource.

        The value for dn part.

        :return: The dn_part of this AttributeMppingSource.
        :rtype: int
        """
        return self._dn_part

    @dn_part.setter
    def dn_part(self, dn_part):
        """Sets the dn_part of this AttributeMppingSource.

        The value for dn part.

        :param dn_part: The dn_part of this AttributeMppingSource.
        :type dn_part: int
        """

        self._dn_part = dn_part

    @property
    def script_context(self):
        """Gets the script_context of this AttributeMppingSource.

        The script context.

        :return: The script_context of this AttributeMppingSource.
        :rtype: str
        """
        return self._script_context

    @script_context.setter
    def script_context(self, script_context):
        """Sets the script_context of this AttributeMppingSource.

        The script context.

        :param script_context: The script_context of this AttributeMppingSource.
        :type script_context: str
        """

        self._script_context = script_context

    @property
    def source_attribute(self):
        """Gets the source_attribute of this AttributeMppingSource.

        The source attribute.

        :return: The source_attribute of this AttributeMppingSource.
        :rtype: List[str]
        """
        return self._source_attribute

    @source_attribute.setter
    def source_attribute(self, source_attribute):
        """Sets the source_attribute of this AttributeMppingSource.

        The source attribute.

        :param source_attribute: The source_attribute of this AttributeMppingSource.
        :type source_attribute: List[str]
        """

        self._source_attribute = source_attribute
