# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModuleConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agent_service: str=None, module_name: str=None, properties: Dict[str, str]=None):
        """ModuleConfiguration - a model defined in OpenAPI

        :param agent_service: The agent_service of this ModuleConfiguration.
        :param module_name: The module_name of this ModuleConfiguration.
        :param properties: The properties of this ModuleConfiguration.
        """
        self.openapi_types = {
            'agent_service': str,
            'module_name': str,
            'properties': Dict[str, str]
        }

        self.attribute_map = {
            'agent_service': 'agentService',
            'module_name': 'moduleName',
            'properties': 'properties'
        }

        self._agent_service = agent_service
        self._module_name = module_name
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModuleConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModuleConfiguration of this ModuleConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agent_service(self):
        """Gets the agent_service of this ModuleConfiguration.

        The name of agent service.

        :return: The agent_service of this ModuleConfiguration.
        :rtype: str
        """
        return self._agent_service

    @agent_service.setter
    def agent_service(self, agent_service):
        """Sets the agent_service of this ModuleConfiguration.

        The name of agent service.

        :param agent_service: The agent_service of this ModuleConfiguration.
        :type agent_service: str
        """

        self._agent_service = agent_service

    @property
    def module_name(self):
        """Gets the module_name of this ModuleConfiguration.

        The name of the module for which the configuration is applicable.

        :return: The module_name of this ModuleConfiguration.
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this ModuleConfiguration.

        The name of the module for which the configuration is applicable.

        :param module_name: The module_name of this ModuleConfiguration.
        :type module_name: str
        """

        self._module_name = module_name

    @property
    def properties(self):
        """Gets the properties of this ModuleConfiguration.

        The key value pairs of properties required for configuration.

        :return: The properties of this ModuleConfiguration.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ModuleConfiguration.

        The key value pairs of properties required for configuration.

        :param properties: The properties of this ModuleConfiguration.
        :type properties: Dict[str, str]
        """

        self._properties = properties
