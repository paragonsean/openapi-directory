# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectorConnectionError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_id: str=None, error_code: str=None, id: str=None, message: str=None, run_step_result_id: str=None, server: str=None, time_occured: datetime=None, type: str=None):
        """ConnectorConnectionError - a model defined in OpenAPI

        :param connector_id: The connector_id of this ConnectorConnectionError.
        :param error_code: The error_code of this ConnectorConnectionError.
        :param id: The id of this ConnectorConnectionError.
        :param message: The message of this ConnectorConnectionError.
        :param run_step_result_id: The run_step_result_id of this ConnectorConnectionError.
        :param server: The server of this ConnectorConnectionError.
        :param time_occured: The time_occured of this ConnectorConnectionError.
        :param type: The type of this ConnectorConnectionError.
        """
        self.openapi_types = {
            'connector_id': str,
            'error_code': str,
            'id': str,
            'message': str,
            'run_step_result_id': str,
            'server': str,
            'time_occured': datetime,
            'type': str
        }

        self.attribute_map = {
            'connector_id': 'connectorId',
            'error_code': 'errorCode',
            'id': 'id',
            'message': 'message',
            'run_step_result_id': 'runStepResultId',
            'server': 'server',
            'time_occured': 'timeOccured',
            'type': 'type'
        }

        self._connector_id = connector_id
        self._error_code = error_code
        self._id = id
        self._message = message
        self._run_step_result_id = run_step_result_id
        self._server = server
        self._time_occured = time_occured
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectorConnectionError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectorConnectionError of this ConnectorConnectionError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_id(self):
        """Gets the connector_id of this ConnectorConnectionError.

        The connector Id.

        :return: The connector_id of this ConnectorConnectionError.
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this ConnectorConnectionError.

        The connector Id.

        :param connector_id: The connector_id of this ConnectorConnectionError.
        :type connector_id: str
        """

        self._connector_id = connector_id

    @property
    def error_code(self):
        """Gets the error_code of this ConnectorConnectionError.

        The error code.

        :return: The error_code of this ConnectorConnectionError.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ConnectorConnectionError.

        The error code.

        :param error_code: The error_code of this ConnectorConnectionError.
        :type error_code: str
        """

        self._error_code = error_code

    @property
    def id(self):
        """Gets the id of this ConnectorConnectionError.

        The error Id.

        :return: The id of this ConnectorConnectionError.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectorConnectionError.

        The error Id.

        :param id: The id of this ConnectorConnectionError.
        :type id: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this ConnectorConnectionError.

        The message for the connection error.

        :return: The message of this ConnectorConnectionError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ConnectorConnectionError.

        The message for the connection error.

        :param message: The message of this ConnectorConnectionError.
        :type message: str
        """

        self._message = message

    @property
    def run_step_result_id(self):
        """Gets the run_step_result_id of this ConnectorConnectionError.

        The run step result Id.

        :return: The run_step_result_id of this ConnectorConnectionError.
        :rtype: str
        """
        return self._run_step_result_id

    @run_step_result_id.setter
    def run_step_result_id(self, run_step_result_id):
        """Sets the run_step_result_id of this ConnectorConnectionError.

        The run step result Id.

        :param run_step_result_id: The run_step_result_id of this ConnectorConnectionError.
        :type run_step_result_id: str
        """

        self._run_step_result_id = run_step_result_id

    @property
    def server(self):
        """Gets the server of this ConnectorConnectionError.

        The server where the connection error happened.

        :return: The server of this ConnectorConnectionError.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ConnectorConnectionError.

        The server where the connection error happened.

        :param server: The server of this ConnectorConnectionError.
        :type server: str
        """

        self._server = server

    @property
    def time_occured(self):
        """Gets the time_occured of this ConnectorConnectionError.

        The time when the connection error occurred.

        :return: The time_occured of this ConnectorConnectionError.
        :rtype: datetime
        """
        return self._time_occured

    @time_occured.setter
    def time_occured(self, time_occured):
        """Sets the time_occured of this ConnectorConnectionError.

        The time when the connection error occurred.

        :param time_occured: The time_occured of this ConnectorConnectionError.
        :type time_occured: datetime
        """

        self._time_occured = time_occured

    @property
    def type(self):
        """Gets the type of this ConnectorConnectionError.

        The type of error.

        :return: The type of this ConnectorConnectionError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectorConnectionError.

        The type of error.

        :param type: The type of this ConnectorConnectionError.
        :type type: str
        """

        self._type = type
