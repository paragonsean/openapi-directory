# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_not_reimported import ChangeNotReimported
from openapi_server.models.extension_error_info import ExtensionErrorInfo
from openapi_server.models.rule_error_info import RuleErrorInfo
from openapi_server import util


class ImportError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm_step_type: str=None, change_not_reimported: ChangeNotReimported=None, connector_id: str=None, cs_object_id: str=None, dn: str=None, extension_error_info: ExtensionErrorInfo=None, id: str=None, retry_count: int=None, rule_error_info: RuleErrorInfo=None, run_step_result_id: str=None, time_first_occurred: datetime=None, time_occurred: datetime=None, type: str=None):
        """ImportError - a model defined in OpenAPI

        :param algorithm_step_type: The algorithm_step_type of this ImportError.
        :param change_not_reimported: The change_not_reimported of this ImportError.
        :param connector_id: The connector_id of this ImportError.
        :param cs_object_id: The cs_object_id of this ImportError.
        :param dn: The dn of this ImportError.
        :param extension_error_info: The extension_error_info of this ImportError.
        :param id: The id of this ImportError.
        :param retry_count: The retry_count of this ImportError.
        :param rule_error_info: The rule_error_info of this ImportError.
        :param run_step_result_id: The run_step_result_id of this ImportError.
        :param time_first_occurred: The time_first_occurred of this ImportError.
        :param time_occurred: The time_occurred of this ImportError.
        :param type: The type of this ImportError.
        """
        self.openapi_types = {
            'algorithm_step_type': str,
            'change_not_reimported': ChangeNotReimported,
            'connector_id': str,
            'cs_object_id': str,
            'dn': str,
            'extension_error_info': ExtensionErrorInfo,
            'id': str,
            'retry_count': int,
            'rule_error_info': RuleErrorInfo,
            'run_step_result_id': str,
            'time_first_occurred': datetime,
            'time_occurred': datetime,
            'type': str
        }

        self.attribute_map = {
            'algorithm_step_type': 'algorithmStepType',
            'change_not_reimported': 'changeNotReimported',
            'connector_id': 'connectorId',
            'cs_object_id': 'csObjectId',
            'dn': 'dn',
            'extension_error_info': 'extensionErrorInfo',
            'id': 'id',
            'retry_count': 'retryCount',
            'rule_error_info': 'ruleErrorInfo',
            'run_step_result_id': 'runStepResultId',
            'time_first_occurred': 'timeFirstOccurred',
            'time_occurred': 'timeOccurred',
            'type': 'type'
        }

        self._algorithm_step_type = algorithm_step_type
        self._change_not_reimported = change_not_reimported
        self._connector_id = connector_id
        self._cs_object_id = cs_object_id
        self._dn = dn
        self._extension_error_info = extension_error_info
        self._id = id
        self._retry_count = retry_count
        self._rule_error_info = rule_error_info
        self._run_step_result_id = run_step_result_id
        self._time_first_occurred = time_first_occurred
        self._time_occurred = time_occurred
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportError of this ImportError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm_step_type(self):
        """Gets the algorithm_step_type of this ImportError.

        The operation type specific  to error reporting.

        :return: The algorithm_step_type of this ImportError.
        :rtype: str
        """
        return self._algorithm_step_type

    @algorithm_step_type.setter
    def algorithm_step_type(self, algorithm_step_type):
        """Sets the algorithm_step_type of this ImportError.

        The operation type specific  to error reporting.

        :param algorithm_step_type: The algorithm_step_type of this ImportError.
        :type algorithm_step_type: str
        """
        allowed_values = ["Undefined", "Staging", "ConnectorFilter", "Join", "Projection", "ImportFlow", "Provisioning", "ValidateConnectorFilter", "Deprovisioning", "ExportFlow", "MvDeletion", "Recall", "MvObjectTypeChange"]  # noqa: E501
        if algorithm_step_type not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm_step_type` ({0}), must be one of {1}"
                .format(algorithm_step_type, allowed_values)
            )

        self._algorithm_step_type = algorithm_step_type

    @property
    def change_not_reimported(self):
        """Gets the change_not_reimported of this ImportError.


        :return: The change_not_reimported of this ImportError.
        :rtype: ChangeNotReimported
        """
        return self._change_not_reimported

    @change_not_reimported.setter
    def change_not_reimported(self, change_not_reimported):
        """Sets the change_not_reimported of this ImportError.


        :param change_not_reimported: The change_not_reimported of this ImportError.
        :type change_not_reimported: ChangeNotReimported
        """

        self._change_not_reimported = change_not_reimported

    @property
    def connector_id(self):
        """Gets the connector_id of this ImportError.

        The connector Id.

        :return: The connector_id of this ImportError.
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this ImportError.

        The connector Id.

        :param connector_id: The connector_id of this ImportError.
        :type connector_id: str
        """

        self._connector_id = connector_id

    @property
    def cs_object_id(self):
        """Gets the cs_object_id of this ImportError.

        The object Id.

        :return: The cs_object_id of this ImportError.
        :rtype: str
        """
        return self._cs_object_id

    @cs_object_id.setter
    def cs_object_id(self, cs_object_id):
        """Sets the cs_object_id of this ImportError.

        The object Id.

        :param cs_object_id: The cs_object_id of this ImportError.
        :type cs_object_id: str
        """

        self._cs_object_id = cs_object_id

    @property
    def dn(self):
        """Gets the dn of this ImportError.

        The distinguished name.

        :return: The dn of this ImportError.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this ImportError.

        The distinguished name.

        :param dn: The dn of this ImportError.
        :type dn: str
        """

        self._dn = dn

    @property
    def extension_error_info(self):
        """Gets the extension_error_info of this ImportError.


        :return: The extension_error_info of this ImportError.
        :rtype: ExtensionErrorInfo
        """
        return self._extension_error_info

    @extension_error_info.setter
    def extension_error_info(self, extension_error_info):
        """Sets the extension_error_info of this ImportError.


        :param extension_error_info: The extension_error_info of this ImportError.
        :type extension_error_info: ExtensionErrorInfo
        """

        self._extension_error_info = extension_error_info

    @property
    def id(self):
        """Gets the id of this ImportError.

        The error Id.

        :return: The id of this ImportError.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportError.

        The error Id.

        :param id: The id of this ImportError.
        :type id: str
        """

        self._id = id

    @property
    def retry_count(self):
        """Gets the retry_count of this ImportError.

        The retry count.

        :return: The retry_count of this ImportError.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this ImportError.

        The retry count.

        :param retry_count: The retry_count of this ImportError.
        :type retry_count: int
        """

        self._retry_count = retry_count

    @property
    def rule_error_info(self):
        """Gets the rule_error_info of this ImportError.


        :return: The rule_error_info of this ImportError.
        :rtype: RuleErrorInfo
        """
        return self._rule_error_info

    @rule_error_info.setter
    def rule_error_info(self, rule_error_info):
        """Sets the rule_error_info of this ImportError.


        :param rule_error_info: The rule_error_info of this ImportError.
        :type rule_error_info: RuleErrorInfo
        """

        self._rule_error_info = rule_error_info

    @property
    def run_step_result_id(self):
        """Gets the run_step_result_id of this ImportError.

        The run step result Id.

        :return: The run_step_result_id of this ImportError.
        :rtype: str
        """
        return self._run_step_result_id

    @run_step_result_id.setter
    def run_step_result_id(self, run_step_result_id):
        """Sets the run_step_result_id of this ImportError.

        The run step result Id.

        :param run_step_result_id: The run_step_result_id of this ImportError.
        :type run_step_result_id: str
        """

        self._run_step_result_id = run_step_result_id

    @property
    def time_first_occurred(self):
        """Gets the time_first_occurred of this ImportError.

        The time when the import error first occurred.

        :return: The time_first_occurred of this ImportError.
        :rtype: datetime
        """
        return self._time_first_occurred

    @time_first_occurred.setter
    def time_first_occurred(self, time_first_occurred):
        """Sets the time_first_occurred of this ImportError.

        The time when the import error first occurred.

        :param time_first_occurred: The time_first_occurred of this ImportError.
        :type time_first_occurred: datetime
        """

        self._time_first_occurred = time_first_occurred

    @property
    def time_occurred(self):
        """Gets the time_occurred of this ImportError.

        The time when the import error occurred.

        :return: The time_occurred of this ImportError.
        :rtype: datetime
        """
        return self._time_occurred

    @time_occurred.setter
    def time_occurred(self, time_occurred):
        """Sets the time_occurred of this ImportError.

        The time when the import error occurred.

        :param time_occurred: The time_occurred of this ImportError.
        :type time_occurred: datetime
        """

        self._time_occurred = time_occurred

    @property
    def type(self):
        """Gets the type of this ImportError.

        The type of error.

        :return: The type of this ImportError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportError.

        The type of error.

        :param type: The type of this ImportError.
        :type type: str
        """

        self._type = type
