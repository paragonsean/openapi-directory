# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertFeedback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, consented_to_share: bool=None, created_date: datetime=None, feedback: str=None, level: str=None, service_member_id: str=None, short_name: str=None, state: str=None):
        """AlertFeedback - a model defined in OpenAPI

        :param comment: The comment of this AlertFeedback.
        :param consented_to_share: The consented_to_share of this AlertFeedback.
        :param created_date: The created_date of this AlertFeedback.
        :param feedback: The feedback of this AlertFeedback.
        :param level: The level of this AlertFeedback.
        :param service_member_id: The service_member_id of this AlertFeedback.
        :param short_name: The short_name of this AlertFeedback.
        :param state: The state of this AlertFeedback.
        """
        self.openapi_types = {
            'comment': str,
            'consented_to_share': bool,
            'created_date': datetime,
            'feedback': str,
            'level': str,
            'service_member_id': str,
            'short_name': str,
            'state': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'consented_to_share': 'consentedToShare',
            'created_date': 'createdDate',
            'feedback': 'feedback',
            'level': 'level',
            'service_member_id': 'serviceMemberId',
            'short_name': 'shortName',
            'state': 'state'
        }

        self._comment = comment
        self._consented_to_share = consented_to_share
        self._created_date = created_date
        self._feedback = feedback
        self._level = level
        self._service_member_id = service_member_id
        self._short_name = short_name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertFeedback':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertFeedback of this AlertFeedback.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this AlertFeedback.

        Additional comments related to the alert.

        :return: The comment of this AlertFeedback.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AlertFeedback.

        Additional comments related to the alert.

        :param comment: The comment of this AlertFeedback.
        :type comment: str
        """

        self._comment = comment

    @property
    def consented_to_share(self):
        """Gets the consented_to_share of this AlertFeedback.

        Indicates if the alert feedback can be shared from product team.

        :return: The consented_to_share of this AlertFeedback.
        :rtype: bool
        """
        return self._consented_to_share

    @consented_to_share.setter
    def consented_to_share(self, consented_to_share):
        """Sets the consented_to_share of this AlertFeedback.

        Indicates if the alert feedback can be shared from product team.

        :param consented_to_share: The consented_to_share of this AlertFeedback.
        :type consented_to_share: bool
        """

        self._consented_to_share = consented_to_share

    @property
    def created_date(self):
        """Gets the created_date of this AlertFeedback.

        The date and time,in UTC,when the alert was created.

        :return: The created_date of this AlertFeedback.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this AlertFeedback.

        The date and time,in UTC,when the alert was created.

        :param created_date: The created_date of this AlertFeedback.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def feedback(self):
        """Gets the feedback of this AlertFeedback.

        The feedback for the alert which indicates if the customer likes or dislikes the alert.

        :return: The feedback of this AlertFeedback.
        :rtype: str
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this AlertFeedback.

        The feedback for the alert which indicates if the customer likes or dislikes the alert.

        :param feedback: The feedback of this AlertFeedback.
        :type feedback: str
        """

        self._feedback = feedback

    @property
    def level(self):
        """Gets the level of this AlertFeedback.

        The alert level which indicates the severity of the alert.

        :return: The level of this AlertFeedback.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this AlertFeedback.

        The alert level which indicates the severity of the alert.

        :param level: The level of this AlertFeedback.
        :type level: str
        """

        self._level = level

    @property
    def service_member_id(self):
        """Gets the service_member_id of this AlertFeedback.

        The server Id of the alert.

        :return: The service_member_id of this AlertFeedback.
        :rtype: str
        """
        return self._service_member_id

    @service_member_id.setter
    def service_member_id(self, service_member_id):
        """Sets the service_member_id of this AlertFeedback.

        The server Id of the alert.

        :param service_member_id: The service_member_id of this AlertFeedback.
        :type service_member_id: str
        """

        self._service_member_id = service_member_id

    @property
    def short_name(self):
        """Gets the short_name of this AlertFeedback.

        The alert short name.

        :return: The short_name of this AlertFeedback.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this AlertFeedback.

        The alert short name.

        :param short_name: The short_name of this AlertFeedback.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def state(self):
        """Gets the state of this AlertFeedback.

        The alert state which can be either active or resolved with multiple resolution types.

        :return: The state of this AlertFeedback.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AlertFeedback.

        The alert state which can be either active or resolved with multiple resolution types.

        :param state: The state of this AlertFeedback.
        :type state: str
        """

        self._state = state
