# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partition_scope import PartitionScope
from openapi_server import util


class Partition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dn: str=None, enabled: bool=None, id: str=None, is_domain: bool=None, name: str=None, partition_scope: PartitionScope=None, time_created: datetime=None, time_last_modified: datetime=None, type: str=None):
        """Partition - a model defined in OpenAPI

        :param dn: The dn of this Partition.
        :param enabled: The enabled of this Partition.
        :param id: The id of this Partition.
        :param is_domain: The is_domain of this Partition.
        :param name: The name of this Partition.
        :param partition_scope: The partition_scope of this Partition.
        :param time_created: The time_created of this Partition.
        :param time_last_modified: The time_last_modified of this Partition.
        :param type: The type of this Partition.
        """
        self.openapi_types = {
            'dn': str,
            'enabled': bool,
            'id': str,
            'is_domain': bool,
            'name': str,
            'partition_scope': PartitionScope,
            'time_created': datetime,
            'time_last_modified': datetime,
            'type': str
        }

        self.attribute_map = {
            'dn': 'dn',
            'enabled': 'enabled',
            'id': 'id',
            'is_domain': 'isDomain',
            'name': 'name',
            'partition_scope': 'partitionScope',
            'time_created': 'timeCreated',
            'time_last_modified': 'timeLastModified',
            'type': 'type'
        }

        self._dn = dn
        self._enabled = enabled
        self._id = id
        self._is_domain = is_domain
        self._name = name
        self._partition_scope = partition_scope
        self._time_created = time_created
        self._time_last_modified = time_last_modified
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Partition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Partition of this Partition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dn(self):
        """Gets the dn of this Partition.

        The distinguished name for the partition.

        :return: The dn of this Partition.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this Partition.

        The distinguished name for the partition.

        :param dn: The dn of this Partition.
        :type dn: str
        """

        self._dn = dn

    @property
    def enabled(self):
        """Gets the enabled of this Partition.

        Indicates if the partition object is selected or not.

        :return: The enabled of this Partition.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Partition.

        Indicates if the partition object is selected or not.

        :param enabled: The enabled of this Partition.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this Partition.

        The partition Id.

        :return: The id of this Partition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Partition.

        The partition Id.

        :param id: The id of this Partition.
        :type id: str
        """

        self._id = id

    @property
    def is_domain(self):
        """Gets the is_domain of this Partition.

        Indicates if the partition is a domain or not.

        :return: The is_domain of this Partition.
        :rtype: bool
        """
        return self._is_domain

    @is_domain.setter
    def is_domain(self, is_domain):
        """Sets the is_domain of this Partition.

        Indicates if the partition is a domain or not.

        :param is_domain: The is_domain of this Partition.
        :type is_domain: bool
        """

        self._is_domain = is_domain

    @property
    def name(self):
        """Gets the name of this Partition.

        The name of the partition.

        :return: The name of this Partition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Partition.

        The name of the partition.

        :param name: The name of this Partition.
        :type name: str
        """

        self._name = name

    @property
    def partition_scope(self):
        """Gets the partition_scope of this Partition.


        :return: The partition_scope of this Partition.
        :rtype: PartitionScope
        """
        return self._partition_scope

    @partition_scope.setter
    def partition_scope(self, partition_scope):
        """Sets the partition_scope of this Partition.


        :param partition_scope: The partition_scope of this Partition.
        :type partition_scope: PartitionScope
        """

        self._partition_scope = partition_scope

    @property
    def time_created(self):
        """Gets the time_created of this Partition.

        The date and time when the partition is created.

        :return: The time_created of this Partition.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this Partition.

        The date and time when the partition is created.

        :param time_created: The time_created of this Partition.
        :type time_created: datetime
        """

        self._time_created = time_created

    @property
    def time_last_modified(self):
        """Gets the time_last_modified of this Partition.

        The time and date when the partition was last modified.

        :return: The time_last_modified of this Partition.
        :rtype: datetime
        """
        return self._time_last_modified

    @time_last_modified.setter
    def time_last_modified(self, time_last_modified):
        """Sets the time_last_modified of this Partition.

        The time and date when the partition was last modified.

        :param time_last_modified: The time_last_modified of this Partition.
        :type time_last_modified: datetime
        """

        self._time_last_modified = time_last_modified

    @property
    def type(self):
        """Gets the type of this Partition.

        The partition type.

        :return: The type of this Partition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Partition.

        The partition type.

        :param type: The type of this Partition.
        :type type: str
        """

        self._type = type
