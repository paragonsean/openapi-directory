# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InboundReplicationNeighbor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_info: str=None, consecutive_failure_count: int=None, error_description: str=None, error_title: str=None, fix_details: str=None, fix_link: str=None, last_attempted_sync: datetime=None, last_error_code: int=None, last_error_message: str=None, last_successful_sync: datetime=None, naming_context: str=None, source_domain_controller: str=None, status: int=None):
        """InboundReplicationNeighbor - a model defined in OpenAPI

        :param additional_info: The additional_info of this InboundReplicationNeighbor.
        :param consecutive_failure_count: The consecutive_failure_count of this InboundReplicationNeighbor.
        :param error_description: The error_description of this InboundReplicationNeighbor.
        :param error_title: The error_title of this InboundReplicationNeighbor.
        :param fix_details: The fix_details of this InboundReplicationNeighbor.
        :param fix_link: The fix_link of this InboundReplicationNeighbor.
        :param last_attempted_sync: The last_attempted_sync of this InboundReplicationNeighbor.
        :param last_error_code: The last_error_code of this InboundReplicationNeighbor.
        :param last_error_message: The last_error_message of this InboundReplicationNeighbor.
        :param last_successful_sync: The last_successful_sync of this InboundReplicationNeighbor.
        :param naming_context: The naming_context of this InboundReplicationNeighbor.
        :param source_domain_controller: The source_domain_controller of this InboundReplicationNeighbor.
        :param status: The status of this InboundReplicationNeighbor.
        """
        self.openapi_types = {
            'additional_info': str,
            'consecutive_failure_count': int,
            'error_description': str,
            'error_title': str,
            'fix_details': str,
            'fix_link': str,
            'last_attempted_sync': datetime,
            'last_error_code': int,
            'last_error_message': str,
            'last_successful_sync': datetime,
            'naming_context': str,
            'source_domain_controller': str,
            'status': int
        }

        self.attribute_map = {
            'additional_info': 'additionalInfo',
            'consecutive_failure_count': 'consecutiveFailureCount',
            'error_description': 'errorDescription',
            'error_title': 'errorTitle',
            'fix_details': 'fixDetails',
            'fix_link': 'fixLink',
            'last_attempted_sync': 'lastAttemptedSync',
            'last_error_code': 'lastErrorCode',
            'last_error_message': 'lastErrorMessage',
            'last_successful_sync': 'lastSuccessfulSync',
            'naming_context': 'namingContext',
            'source_domain_controller': 'sourceDomainController',
            'status': 'status'
        }

        self._additional_info = additional_info
        self._consecutive_failure_count = consecutive_failure_count
        self._error_description = error_description
        self._error_title = error_title
        self._fix_details = fix_details
        self._fix_link = fix_link
        self._last_attempted_sync = last_attempted_sync
        self._last_error_code = last_error_code
        self._last_error_message = last_error_message
        self._last_successful_sync = last_successful_sync
        self._naming_context = naming_context
        self._source_domain_controller = source_domain_controller
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundReplicationNeighbor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InboundReplicationNeighbor of this InboundReplicationNeighbor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_info(self):
        """Gets the additional_info of this InboundReplicationNeighbor.

        The additional details.

        :return: The additional_info of this InboundReplicationNeighbor.
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this InboundReplicationNeighbor.

        The additional details.

        :param additional_info: The additional_info of this InboundReplicationNeighbor.
        :type additional_info: str
        """

        self._additional_info = additional_info

    @property
    def consecutive_failure_count(self):
        """Gets the consecutive_failure_count of this InboundReplicationNeighbor.

        The number of consecutive failure counts.

        :return: The consecutive_failure_count of this InboundReplicationNeighbor.
        :rtype: int
        """
        return self._consecutive_failure_count

    @consecutive_failure_count.setter
    def consecutive_failure_count(self, consecutive_failure_count):
        """Sets the consecutive_failure_count of this InboundReplicationNeighbor.

        The number of consecutive failure counts.

        :param consecutive_failure_count: The consecutive_failure_count of this InboundReplicationNeighbor.
        :type consecutive_failure_count: int
        """

        self._consecutive_failure_count = consecutive_failure_count

    @property
    def error_description(self):
        """Gets the error_description of this InboundReplicationNeighbor.

        The error description.

        :return: The error_description of this InboundReplicationNeighbor.
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this InboundReplicationNeighbor.

        The error description.

        :param error_description: The error_description of this InboundReplicationNeighbor.
        :type error_description: str
        """

        self._error_description = error_description

    @property
    def error_title(self):
        """Gets the error_title of this InboundReplicationNeighbor.

        The error title.

        :return: The error_title of this InboundReplicationNeighbor.
        :rtype: str
        """
        return self._error_title

    @error_title.setter
    def error_title(self, error_title):
        """Sets the error_title of this InboundReplicationNeighbor.

        The error title.

        :param error_title: The error_title of this InboundReplicationNeighbor.
        :type error_title: str
        """

        self._error_title = error_title

    @property
    def fix_details(self):
        """Gets the fix_details of this InboundReplicationNeighbor.

        The details of the fix.

        :return: The fix_details of this InboundReplicationNeighbor.
        :rtype: str
        """
        return self._fix_details

    @fix_details.setter
    def fix_details(self, fix_details):
        """Sets the fix_details of this InboundReplicationNeighbor.

        The details of the fix.

        :param fix_details: The fix_details of this InboundReplicationNeighbor.
        :type fix_details: str
        """

        self._fix_details = fix_details

    @property
    def fix_link(self):
        """Gets the fix_link of this InboundReplicationNeighbor.

        The link for the fix of the error.

        :return: The fix_link of this InboundReplicationNeighbor.
        :rtype: str
        """
        return self._fix_link

    @fix_link.setter
    def fix_link(self, fix_link):
        """Sets the fix_link of this InboundReplicationNeighbor.

        The link for the fix of the error.

        :param fix_link: The fix_link of this InboundReplicationNeighbor.
        :type fix_link: str
        """

        self._fix_link = fix_link

    @property
    def last_attempted_sync(self):
        """Gets the last_attempted_sync of this InboundReplicationNeighbor.

        The last time a sync was attempted on the domain controller.

        :return: The last_attempted_sync of this InboundReplicationNeighbor.
        :rtype: datetime
        """
        return self._last_attempted_sync

    @last_attempted_sync.setter
    def last_attempted_sync(self, last_attempted_sync):
        """Sets the last_attempted_sync of this InboundReplicationNeighbor.

        The last time a sync was attempted on the domain controller.

        :param last_attempted_sync: The last_attempted_sync of this InboundReplicationNeighbor.
        :type last_attempted_sync: datetime
        """

        self._last_attempted_sync = last_attempted_sync

    @property
    def last_error_code(self):
        """Gets the last_error_code of this InboundReplicationNeighbor.

        The last error code.

        :return: The last_error_code of this InboundReplicationNeighbor.
        :rtype: int
        """
        return self._last_error_code

    @last_error_code.setter
    def last_error_code(self, last_error_code):
        """Sets the last_error_code of this InboundReplicationNeighbor.

        The last error code.

        :param last_error_code: The last_error_code of this InboundReplicationNeighbor.
        :type last_error_code: int
        """

        self._last_error_code = last_error_code

    @property
    def last_error_message(self):
        """Gets the last_error_message of this InboundReplicationNeighbor.

        The error message of the last error.

        :return: The last_error_message of this InboundReplicationNeighbor.
        :rtype: str
        """
        return self._last_error_message

    @last_error_message.setter
    def last_error_message(self, last_error_message):
        """Sets the last_error_message of this InboundReplicationNeighbor.

        The error message of the last error.

        :param last_error_message: The last_error_message of this InboundReplicationNeighbor.
        :type last_error_message: str
        """

        self._last_error_message = last_error_message

    @property
    def last_successful_sync(self):
        """Gets the last_successful_sync of this InboundReplicationNeighbor.

        The last time when a successful sync happened.

        :return: The last_successful_sync of this InboundReplicationNeighbor.
        :rtype: datetime
        """
        return self._last_successful_sync

    @last_successful_sync.setter
    def last_successful_sync(self, last_successful_sync):
        """Sets the last_successful_sync of this InboundReplicationNeighbor.

        The last time when a successful sync happened.

        :param last_successful_sync: The last_successful_sync of this InboundReplicationNeighbor.
        :type last_successful_sync: datetime
        """

        self._last_successful_sync = last_successful_sync

    @property
    def naming_context(self):
        """Gets the naming_context of this InboundReplicationNeighbor.

        The naming context.

        :return: The naming_context of this InboundReplicationNeighbor.
        :rtype: str
        """
        return self._naming_context

    @naming_context.setter
    def naming_context(self, naming_context):
        """Sets the naming_context of this InboundReplicationNeighbor.

        The naming context.

        :param naming_context: The naming_context of this InboundReplicationNeighbor.
        :type naming_context: str
        """

        self._naming_context = naming_context

    @property
    def source_domain_controller(self):
        """Gets the source_domain_controller of this InboundReplicationNeighbor.

        The name of the source domain controller.

        :return: The source_domain_controller of this InboundReplicationNeighbor.
        :rtype: str
        """
        return self._source_domain_controller

    @source_domain_controller.setter
    def source_domain_controller(self, source_domain_controller):
        """Sets the source_domain_controller of this InboundReplicationNeighbor.

        The name of the source domain controller.

        :param source_domain_controller: The source_domain_controller of this InboundReplicationNeighbor.
        :type source_domain_controller: str
        """

        self._source_domain_controller = source_domain_controller

    @property
    def status(self):
        """Gets the status of this InboundReplicationNeighbor.

        The health status for the domain controller

        :return: The status of this InboundReplicationNeighbor.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InboundReplicationNeighbor.

        The health status for the domain controller

        :param status: The status of this InboundReplicationNeighbor.
        :type status: int
        """

        self._status = status
