# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inbound_replication_neighbor import InboundReplicationNeighbor
from openapi_server import util


class ReplicationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, inbound_neighbor_collection: List[InboundReplicationNeighbor]=None, last_attempted_sync: datetime=None, last_successful_sync: datetime=None, site: str=None, status: int=None, target_server: str=None):
        """ReplicationSummary - a model defined in OpenAPI

        :param domain: The domain of this ReplicationSummary.
        :param inbound_neighbor_collection: The inbound_neighbor_collection of this ReplicationSummary.
        :param last_attempted_sync: The last_attempted_sync of this ReplicationSummary.
        :param last_successful_sync: The last_successful_sync of this ReplicationSummary.
        :param site: The site of this ReplicationSummary.
        :param status: The status of this ReplicationSummary.
        :param target_server: The target_server of this ReplicationSummary.
        """
        self.openapi_types = {
            'domain': str,
            'inbound_neighbor_collection': List[InboundReplicationNeighbor],
            'last_attempted_sync': datetime,
            'last_successful_sync': datetime,
            'site': str,
            'status': int,
            'target_server': str
        }

        self.attribute_map = {
            'domain': 'domain',
            'inbound_neighbor_collection': 'inboundNeighborCollection',
            'last_attempted_sync': 'lastAttemptedSync',
            'last_successful_sync': 'lastSuccessfulSync',
            'site': 'site',
            'status': 'status',
            'target_server': 'targetServer'
        }

        self._domain = domain
        self._inbound_neighbor_collection = inbound_neighbor_collection
        self._last_attempted_sync = last_attempted_sync
        self._last_successful_sync = last_successful_sync
        self._site = site
        self._status = status
        self._target_server = target_server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicationSummary of this ReplicationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this ReplicationSummary.

        The domain name for a given domain controller.

        :return: The domain of this ReplicationSummary.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ReplicationSummary.

        The domain name for a given domain controller.

        :param domain: The domain of this ReplicationSummary.
        :type domain: str
        """

        self._domain = domain

    @property
    def inbound_neighbor_collection(self):
        """Gets the inbound_neighbor_collection of this ReplicationSummary.

        List of individual domain controller neighbor's inbound replication status.

        :return: The inbound_neighbor_collection of this ReplicationSummary.
        :rtype: List[InboundReplicationNeighbor]
        """
        return self._inbound_neighbor_collection

    @inbound_neighbor_collection.setter
    def inbound_neighbor_collection(self, inbound_neighbor_collection):
        """Sets the inbound_neighbor_collection of this ReplicationSummary.

        List of individual domain controller neighbor's inbound replication status.

        :param inbound_neighbor_collection: The inbound_neighbor_collection of this ReplicationSummary.
        :type inbound_neighbor_collection: List[InboundReplicationNeighbor]
        """

        self._inbound_neighbor_collection = inbound_neighbor_collection

    @property
    def last_attempted_sync(self):
        """Gets the last_attempted_sync of this ReplicationSummary.

        The last time when a sync was attempted for a given domain controller.

        :return: The last_attempted_sync of this ReplicationSummary.
        :rtype: datetime
        """
        return self._last_attempted_sync

    @last_attempted_sync.setter
    def last_attempted_sync(self, last_attempted_sync):
        """Sets the last_attempted_sync of this ReplicationSummary.

        The last time when a sync was attempted for a given domain controller.

        :param last_attempted_sync: The last_attempted_sync of this ReplicationSummary.
        :type last_attempted_sync: datetime
        """

        self._last_attempted_sync = last_attempted_sync

    @property
    def last_successful_sync(self):
        """Gets the last_successful_sync of this ReplicationSummary.

        The time when the last successful sync happened for a given domain controller.

        :return: The last_successful_sync of this ReplicationSummary.
        :rtype: datetime
        """
        return self._last_successful_sync

    @last_successful_sync.setter
    def last_successful_sync(self, last_successful_sync):
        """Sets the last_successful_sync of this ReplicationSummary.

        The time when the last successful sync happened for a given domain controller.

        :param last_successful_sync: The last_successful_sync of this ReplicationSummary.
        :type last_successful_sync: datetime
        """

        self._last_successful_sync = last_successful_sync

    @property
    def site(self):
        """Gets the site of this ReplicationSummary.

        The site name for a given domain controller.

        :return: The site of this ReplicationSummary.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this ReplicationSummary.

        The site name for a given domain controller.

        :param site: The site of this ReplicationSummary.
        :type site: str
        """

        self._site = site

    @property
    def status(self):
        """Gets the status of this ReplicationSummary.

        The health status for a domain controller.

        :return: The status of this ReplicationSummary.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReplicationSummary.

        The health status for a domain controller.

        :param status: The status of this ReplicationSummary.
        :type status: int
        """

        self._status = status

    @property
    def target_server(self):
        """Gets the target_server of this ReplicationSummary.

        The domain controller name.

        :return: The target_server of this ReplicationSummary.
        :rtype: str
        """
        return self._target_server

    @target_server.setter
    def target_server(self, target_server):
        """Sets the target_server of this ReplicationSummary.

        The domain controller name.

        :param target_server: The target_server of this ReplicationSummary.
        :type target_server: str
        """

        self._target_server = target_server
