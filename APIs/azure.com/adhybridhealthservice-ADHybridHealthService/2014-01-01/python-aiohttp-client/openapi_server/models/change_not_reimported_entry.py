# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_delta import AttributeDelta
from openapi_server import util


class ChangeNotReimportedEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anchor: str=None, attributes: List[AttributeDelta]=None, dn: str=None, dn_attributes: List[AttributeDelta]=None, object_classes: List[str]=None, parent_anchor: str=None, primary_object_class: str=None):
        """ChangeNotReimportedEntry - a model defined in OpenAPI

        :param anchor: The anchor of this ChangeNotReimportedEntry.
        :param attributes: The attributes of this ChangeNotReimportedEntry.
        :param dn: The dn of this ChangeNotReimportedEntry.
        :param dn_attributes: The dn_attributes of this ChangeNotReimportedEntry.
        :param object_classes: The object_classes of this ChangeNotReimportedEntry.
        :param parent_anchor: The parent_anchor of this ChangeNotReimportedEntry.
        :param primary_object_class: The primary_object_class of this ChangeNotReimportedEntry.
        """
        self.openapi_types = {
            'anchor': str,
            'attributes': List[AttributeDelta],
            'dn': str,
            'dn_attributes': List[AttributeDelta],
            'object_classes': List[str],
            'parent_anchor': str,
            'primary_object_class': str
        }

        self.attribute_map = {
            'anchor': 'anchor',
            'attributes': 'attributes',
            'dn': 'dn',
            'dn_attributes': 'dnAttributes',
            'object_classes': 'objectClasses',
            'parent_anchor': 'parentAnchor',
            'primary_object_class': 'primaryObjectClass'
        }

        self._anchor = anchor
        self._attributes = attributes
        self._dn = dn
        self._dn_attributes = dn_attributes
        self._object_classes = object_classes
        self._parent_anchor = parent_anchor
        self._primary_object_class = primary_object_class

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeNotReimportedEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeNotReimportedEntry of this ChangeNotReimportedEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anchor(self):
        """Gets the anchor of this ChangeNotReimportedEntry.

        The anchor.

        :return: The anchor of this ChangeNotReimportedEntry.
        :rtype: str
        """
        return self._anchor

    @anchor.setter
    def anchor(self, anchor):
        """Sets the anchor of this ChangeNotReimportedEntry.

        The anchor.

        :param anchor: The anchor of this ChangeNotReimportedEntry.
        :type anchor: str
        """

        self._anchor = anchor

    @property
    def attributes(self):
        """Gets the attributes of this ChangeNotReimportedEntry.

        The attributes.

        :return: The attributes of this ChangeNotReimportedEntry.
        :rtype: List[AttributeDelta]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ChangeNotReimportedEntry.

        The attributes.

        :param attributes: The attributes of this ChangeNotReimportedEntry.
        :type attributes: List[AttributeDelta]
        """

        self._attributes = attributes

    @property
    def dn(self):
        """Gets the dn of this ChangeNotReimportedEntry.

        The distinguished name.

        :return: The dn of this ChangeNotReimportedEntry.
        :rtype: str
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this ChangeNotReimportedEntry.

        The distinguished name.

        :param dn: The dn of this ChangeNotReimportedEntry.
        :type dn: str
        """

        self._dn = dn

    @property
    def dn_attributes(self):
        """Gets the dn_attributes of this ChangeNotReimportedEntry.

        The delta attributes for distinguished names.

        :return: The dn_attributes of this ChangeNotReimportedEntry.
        :rtype: List[AttributeDelta]
        """
        return self._dn_attributes

    @dn_attributes.setter
    def dn_attributes(self, dn_attributes):
        """Sets the dn_attributes of this ChangeNotReimportedEntry.

        The delta attributes for distinguished names.

        :param dn_attributes: The dn_attributes of this ChangeNotReimportedEntry.
        :type dn_attributes: List[AttributeDelta]
        """

        self._dn_attributes = dn_attributes

    @property
    def object_classes(self):
        """Gets the object_classes of this ChangeNotReimportedEntry.

        The list of object classes.

        :return: The object_classes of this ChangeNotReimportedEntry.
        :rtype: List[str]
        """
        return self._object_classes

    @object_classes.setter
    def object_classes(self, object_classes):
        """Sets the object_classes of this ChangeNotReimportedEntry.

        The list of object classes.

        :param object_classes: The object_classes of this ChangeNotReimportedEntry.
        :type object_classes: List[str]
        """

        self._object_classes = object_classes

    @property
    def parent_anchor(self):
        """Gets the parent_anchor of this ChangeNotReimportedEntry.

        The parent anchor.

        :return: The parent_anchor of this ChangeNotReimportedEntry.
        :rtype: str
        """
        return self._parent_anchor

    @parent_anchor.setter
    def parent_anchor(self, parent_anchor):
        """Sets the parent_anchor of this ChangeNotReimportedEntry.

        The parent anchor.

        :param parent_anchor: The parent_anchor of this ChangeNotReimportedEntry.
        :type parent_anchor: str
        """

        self._parent_anchor = parent_anchor

    @property
    def primary_object_class(self):
        """Gets the primary_object_class of this ChangeNotReimportedEntry.

        The primary object class.

        :return: The primary_object_class of this ChangeNotReimportedEntry.
        :rtype: str
        """
        return self._primary_object_class

    @primary_object_class.setter
    def primary_object_class(self, primary_object_class):
        """Sets the primary_object_class of this ChangeNotReimportedEntry.

        The primary object class.

        :param primary_object_class: The primary_object_class of this ChangeNotReimportedEntry.
        :type primary_object_class: str
        """

        self._primary_object_class = primary_object_class
