# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RunStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_size: int=None, object_delete_limit: int=None, object_process_limit: int=None, operation_type: int=None, page_size: int=None, partition_id: str=None, timeout: int=None):
        """RunStep - a model defined in OpenAPI

        :param batch_size: The batch_size of this RunStep.
        :param object_delete_limit: The object_delete_limit of this RunStep.
        :param object_process_limit: The object_process_limit of this RunStep.
        :param operation_type: The operation_type of this RunStep.
        :param page_size: The page_size of this RunStep.
        :param partition_id: The partition_id of this RunStep.
        :param timeout: The timeout of this RunStep.
        """
        self.openapi_types = {
            'batch_size': int,
            'object_delete_limit': int,
            'object_process_limit': int,
            'operation_type': int,
            'page_size': int,
            'partition_id': str,
            'timeout': int
        }

        self.attribute_map = {
            'batch_size': 'batchSize',
            'object_delete_limit': 'objectDeleteLimit',
            'object_process_limit': 'objectProcessLimit',
            'operation_type': 'operationType',
            'page_size': 'pageSize',
            'partition_id': 'partitionId',
            'timeout': 'timeout'
        }

        self._batch_size = batch_size
        self._object_delete_limit = object_delete_limit
        self._object_process_limit = object_process_limit
        self._operation_type = operation_type
        self._page_size = page_size
        self._partition_id = partition_id
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunStep of this RunStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_size(self):
        """Gets the batch_size of this RunStep.

        The batch size used by the run step.

        :return: The batch_size of this RunStep.
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size):
        """Sets the batch_size of this RunStep.

        The batch size used by the run step.

        :param batch_size: The batch_size of this RunStep.
        :type batch_size: int
        """

        self._batch_size = batch_size

    @property
    def object_delete_limit(self):
        """Gets the object_delete_limit of this RunStep.

        The object deletion limit.

        :return: The object_delete_limit of this RunStep.
        :rtype: int
        """
        return self._object_delete_limit

    @object_delete_limit.setter
    def object_delete_limit(self, object_delete_limit):
        """Sets the object_delete_limit of this RunStep.

        The object deletion limit.

        :param object_delete_limit: The object_delete_limit of this RunStep.
        :type object_delete_limit: int
        """

        self._object_delete_limit = object_delete_limit

    @property
    def object_process_limit(self):
        """Gets the object_process_limit of this RunStep.

        The object processing limit.

        :return: The object_process_limit of this RunStep.
        :rtype: int
        """
        return self._object_process_limit

    @object_process_limit.setter
    def object_process_limit(self, object_process_limit):
        """Sets the object_process_limit of this RunStep.

        The object processing limit.

        :param object_process_limit: The object_process_limit of this RunStep.
        :type object_process_limit: int
        """

        self._object_process_limit = object_process_limit

    @property
    def operation_type(self):
        """Gets the operation_type of this RunStep.

        The run step operation types.

        :return: The operation_type of this RunStep.
        :rtype: int
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this RunStep.

        The run step operation types.

        :param operation_type: The operation_type of this RunStep.
        :type operation_type: int
        """

        self._operation_type = operation_type

    @property
    def page_size(self):
        """Gets the page_size of this RunStep.

        The page size of the run step.

        :return: The page_size of this RunStep.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this RunStep.

        The page size of the run step.

        :param page_size: The page_size of this RunStep.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def partition_id(self):
        """Gets the partition_id of this RunStep.

        The Id of the partition that a current run step operation is executing.

        :return: The partition_id of this RunStep.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this RunStep.

        The Id of the partition that a current run step operation is executing.

        :param partition_id: The partition_id of this RunStep.
        :type partition_id: str
        """

        self._partition_id = partition_id

    @property
    def timeout(self):
        """Gets the timeout of this RunStep.

        The operation timeout.

        :return: The timeout of this RunStep.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this RunStep.

        The operation timeout.

        :param timeout: The timeout of this RunStep.
        :type timeout: int
        """

        self._timeout = timeout
