# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PasswordManagementSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connect_to: str=None, connection_timeout: int=None, enabled: bool=None, extension_file_path: str=None, maximum_retry_count: int=None, requires_secure_connection: bool=None, retry_interval_in_seconds: int=None, supported_password_operations: str=None, unlock_account: bool=None, user: str=None):
        """PasswordManagementSettings - a model defined in OpenAPI

        :param connect_to: The connect_to of this PasswordManagementSettings.
        :param connection_timeout: The connection_timeout of this PasswordManagementSettings.
        :param enabled: The enabled of this PasswordManagementSettings.
        :param extension_file_path: The extension_file_path of this PasswordManagementSettings.
        :param maximum_retry_count: The maximum_retry_count of this PasswordManagementSettings.
        :param requires_secure_connection: The requires_secure_connection of this PasswordManagementSettings.
        :param retry_interval_in_seconds: The retry_interval_in_seconds of this PasswordManagementSettings.
        :param supported_password_operations: The supported_password_operations of this PasswordManagementSettings.
        :param unlock_account: The unlock_account of this PasswordManagementSettings.
        :param user: The user of this PasswordManagementSettings.
        """
        self.openapi_types = {
            'connect_to': str,
            'connection_timeout': int,
            'enabled': bool,
            'extension_file_path': str,
            'maximum_retry_count': int,
            'requires_secure_connection': bool,
            'retry_interval_in_seconds': int,
            'supported_password_operations': str,
            'unlock_account': bool,
            'user': str
        }

        self.attribute_map = {
            'connect_to': 'connectTo',
            'connection_timeout': 'connectionTimeout',
            'enabled': 'enabled',
            'extension_file_path': 'extensionFilePath',
            'maximum_retry_count': 'maximumRetryCount',
            'requires_secure_connection': 'requiresSecureConnection',
            'retry_interval_in_seconds': 'retryIntervalInSeconds',
            'supported_password_operations': 'supportedPasswordOperations',
            'unlock_account': 'unlockAccount',
            'user': 'user'
        }

        self._connect_to = connect_to
        self._connection_timeout = connection_timeout
        self._enabled = enabled
        self._extension_file_path = extension_file_path
        self._maximum_retry_count = maximum_retry_count
        self._requires_secure_connection = requires_secure_connection
        self._retry_interval_in_seconds = retry_interval_in_seconds
        self._supported_password_operations = supported_password_operations
        self._unlock_account = unlock_account
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PasswordManagementSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PasswordManagementSettings of this PasswordManagementSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connect_to(self):
        """Gets the connect_to of this PasswordManagementSettings.

        Connection point of password management.

        :return: The connect_to of this PasswordManagementSettings.
        :rtype: str
        """
        return self._connect_to

    @connect_to.setter
    def connect_to(self, connect_to):
        """Sets the connect_to of this PasswordManagementSettings.

        Connection point of password management.

        :param connect_to: The connect_to of this PasswordManagementSettings.
        :type connect_to: str
        """

        self._connect_to = connect_to

    @property
    def connection_timeout(self):
        """Gets the connection_timeout of this PasswordManagementSettings.

        Connection timeout for password extension.

        :return: The connection_timeout of this PasswordManagementSettings.
        :rtype: int
        """
        return self._connection_timeout

    @connection_timeout.setter
    def connection_timeout(self, connection_timeout):
        """Sets the connection_timeout of this PasswordManagementSettings.

        Connection timeout for password extension.

        :param connection_timeout: The connection_timeout of this PasswordManagementSettings.
        :type connection_timeout: int
        """

        self._connection_timeout = connection_timeout

    @property
    def enabled(self):
        """Gets the enabled of this PasswordManagementSettings.

        Indicates if the password extension is enabled.

        :return: The enabled of this PasswordManagementSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PasswordManagementSettings.

        Indicates if the password extension is enabled.

        :param enabled: The enabled of this PasswordManagementSettings.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def extension_file_path(self):
        """Gets the extension_file_path of this PasswordManagementSettings.

        The file path of the password management extension.

        :return: The extension_file_path of this PasswordManagementSettings.
        :rtype: str
        """
        return self._extension_file_path

    @extension_file_path.setter
    def extension_file_path(self, extension_file_path):
        """Sets the extension_file_path of this PasswordManagementSettings.

        The file path of the password management extension.

        :param extension_file_path: The extension_file_path of this PasswordManagementSettings.
        :type extension_file_path: str
        """

        self._extension_file_path = extension_file_path

    @property
    def maximum_retry_count(self):
        """Gets the maximum_retry_count of this PasswordManagementSettings.

        The maximum number of retries.

        :return: The maximum_retry_count of this PasswordManagementSettings.
        :rtype: int
        """
        return self._maximum_retry_count

    @maximum_retry_count.setter
    def maximum_retry_count(self, maximum_retry_count):
        """Sets the maximum_retry_count of this PasswordManagementSettings.

        The maximum number of retries.

        :param maximum_retry_count: The maximum_retry_count of this PasswordManagementSettings.
        :type maximum_retry_count: int
        """

        self._maximum_retry_count = maximum_retry_count

    @property
    def requires_secure_connection(self):
        """Gets the requires_secure_connection of this PasswordManagementSettings.

        Indicates if a secure connection is required for password management.

        :return: The requires_secure_connection of this PasswordManagementSettings.
        :rtype: bool
        """
        return self._requires_secure_connection

    @requires_secure_connection.setter
    def requires_secure_connection(self, requires_secure_connection):
        """Sets the requires_secure_connection of this PasswordManagementSettings.

        Indicates if a secure connection is required for password management.

        :param requires_secure_connection: The requires_secure_connection of this PasswordManagementSettings.
        :type requires_secure_connection: bool
        """

        self._requires_secure_connection = requires_secure_connection

    @property
    def retry_interval_in_seconds(self):
        """Gets the retry_interval_in_seconds of this PasswordManagementSettings.

        The time between retries.

        :return: The retry_interval_in_seconds of this PasswordManagementSettings.
        :rtype: int
        """
        return self._retry_interval_in_seconds

    @retry_interval_in_seconds.setter
    def retry_interval_in_seconds(self, retry_interval_in_seconds):
        """Sets the retry_interval_in_seconds of this PasswordManagementSettings.

        The time between retries.

        :param retry_interval_in_seconds: The retry_interval_in_seconds of this PasswordManagementSettings.
        :type retry_interval_in_seconds: int
        """

        self._retry_interval_in_seconds = retry_interval_in_seconds

    @property
    def supported_password_operations(self):
        """Gets the supported_password_operations of this PasswordManagementSettings.

        The supported password operations.

        :return: The supported_password_operations of this PasswordManagementSettings.
        :rtype: str
        """
        return self._supported_password_operations

    @supported_password_operations.setter
    def supported_password_operations(self, supported_password_operations):
        """Sets the supported_password_operations of this PasswordManagementSettings.

        The supported password operations.

        :param supported_password_operations: The supported_password_operations of this PasswordManagementSettings.
        :type supported_password_operations: str
        """
        allowed_values = ["Undefined", "Set", "Change"]  # noqa: E501
        if supported_password_operations not in allowed_values:
            raise ValueError(
                "Invalid value for `supported_password_operations` ({0}), must be one of {1}"
                .format(supported_password_operations, allowed_values)
            )

        self._supported_password_operations = supported_password_operations

    @property
    def unlock_account(self):
        """Gets the unlock_account of this PasswordManagementSettings.

        Indicates if accounts should be unlocked when resetting password.

        :return: The unlock_account of this PasswordManagementSettings.
        :rtype: bool
        """
        return self._unlock_account

    @unlock_account.setter
    def unlock_account(self, unlock_account):
        """Sets the unlock_account of this PasswordManagementSettings.

        Indicates if accounts should be unlocked when resetting password.

        :param unlock_account: The unlock_account of this PasswordManagementSettings.
        :type unlock_account: bool
        """

        self._unlock_account = unlock_account

    @property
    def user(self):
        """Gets the user of this PasswordManagementSettings.

        User to execute password extension.

        :return: The user of this PasswordManagementSettings.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PasswordManagementSettings.

        User to execute password extension.

        :param user: The user of this PasswordManagementSettings.
        :type user: str
        """

        self._user = user
