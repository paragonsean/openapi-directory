/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionScope::OAIPartitionScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionScope::OAIPartitionScope() {
    this->initializeModel();
}

OAIPartitionScope::~OAIPartitionScope() {}

void OAIPartitionScope::initializeModel() {

    m_containers_excluded_isSet = false;
    m_containers_excluded_isValid = false;

    m_containers_included_isSet = false;
    m_containers_included_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_object_classes_isSet = false;
    m_object_classes_isValid = false;
}

void OAIPartitionScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionScope::fromJsonObject(QJsonObject json) {

    m_containers_excluded_isValid = ::OpenAPI::fromJsonValue(m_containers_excluded, json[QString("containersExcluded")]);
    m_containers_excluded_isSet = !json[QString("containersExcluded")].isNull() && m_containers_excluded_isValid;

    m_containers_included_isValid = ::OpenAPI::fromJsonValue(m_containers_included, json[QString("containersIncluded")]);
    m_containers_included_isSet = !json[QString("containersIncluded")].isNull() && m_containers_included_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_object_classes_isValid = ::OpenAPI::fromJsonValue(m_object_classes, json[QString("objectClasses")]);
    m_object_classes_isSet = !json[QString("objectClasses")].isNull() && m_object_classes_isValid;
}

QString OAIPartitionScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionScope::asJsonObject() const {
    QJsonObject obj;
    if (m_containers_excluded.size() > 0) {
        obj.insert(QString("containersExcluded"), ::OpenAPI::toJsonValue(m_containers_excluded));
    }
    if (m_containers_included.size() > 0) {
        obj.insert(QString("containersIncluded"), ::OpenAPI::toJsonValue(m_containers_included));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_object_classes.size() > 0) {
        obj.insert(QString("objectClasses"), ::OpenAPI::toJsonValue(m_object_classes));
    }
    return obj;
}

QList<QString> OAIPartitionScope::getContainersExcluded() const {
    return m_containers_excluded;
}
void OAIPartitionScope::setContainersExcluded(const QList<QString> &containers_excluded) {
    m_containers_excluded = containers_excluded;
    m_containers_excluded_isSet = true;
}

bool OAIPartitionScope::is_containers_excluded_Set() const{
    return m_containers_excluded_isSet;
}

bool OAIPartitionScope::is_containers_excluded_Valid() const{
    return m_containers_excluded_isValid;
}

QList<QString> OAIPartitionScope::getContainersIncluded() const {
    return m_containers_included;
}
void OAIPartitionScope::setContainersIncluded(const QList<QString> &containers_included) {
    m_containers_included = containers_included;
    m_containers_included_isSet = true;
}

bool OAIPartitionScope::is_containers_included_Set() const{
    return m_containers_included_isSet;
}

bool OAIPartitionScope::is_containers_included_Valid() const{
    return m_containers_included_isValid;
}

bool OAIPartitionScope::isIsDefault() const {
    return m_is_default;
}
void OAIPartitionScope::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIPartitionScope::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIPartitionScope::is_is_default_Valid() const{
    return m_is_default_isValid;
}

QList<QString> OAIPartitionScope::getObjectClasses() const {
    return m_object_classes;
}
void OAIPartitionScope::setObjectClasses(const QList<QString> &object_classes) {
    m_object_classes = object_classes;
    m_object_classes_isSet = true;
}

bool OAIPartitionScope::is_object_classes_Set() const{
    return m_object_classes_isSet;
}

bool OAIPartitionScope::is_object_classes_Valid() const{
    return m_object_classes_isValid;
}

bool OAIPartitionScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_containers_excluded.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_containers_included.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_classes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
