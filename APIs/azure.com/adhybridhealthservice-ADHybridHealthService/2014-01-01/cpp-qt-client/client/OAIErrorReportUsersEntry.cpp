/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorReportUsersEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorReportUsersEntry::OAIErrorReportUsersEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorReportUsersEntry::OAIErrorReportUsersEntry() {
    this->initializeModel();
}

OAIErrorReportUsersEntry::~OAIErrorReportUsersEntry() {}

void OAIErrorReportUsersEntry::initializeModel() {

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_total_error_attempts_isSet = false;
    m_total_error_attempts_isValid = false;

    m_unique_ip_addresses_isSet = false;
    m_unique_ip_addresses_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIErrorReportUsersEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorReportUsersEntry::fromJsonObject(QJsonObject json) {

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_total_error_attempts_isValid = ::OpenAPI::fromJsonValue(m_total_error_attempts, json[QString("totalErrorAttempts")]);
    m_total_error_attempts_isSet = !json[QString("totalErrorAttempts")].isNull() && m_total_error_attempts_isValid;

    m_unique_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_unique_ip_addresses, json[QString("uniqueIpAddresses")]);
    m_unique_ip_addresses_isSet = !json[QString("uniqueIpAddresses")].isNull() && m_unique_ip_addresses_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIErrorReportUsersEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorReportUsersEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_total_error_attempts_isSet) {
        obj.insert(QString("totalErrorAttempts"), ::OpenAPI::toJsonValue(m_total_error_attempts));
    }
    if (m_unique_ip_addresses_isSet) {
        obj.insert(QString("uniqueIpAddresses"), ::OpenAPI::toJsonValue(m_unique_ip_addresses));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIErrorReportUsersEntry::getIpAddress() const {
    return m_ip_address;
}
void OAIErrorReportUsersEntry::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIErrorReportUsersEntry::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIErrorReportUsersEntry::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QDateTime OAIErrorReportUsersEntry::getLastUpdated() const {
    return m_last_updated;
}
void OAIErrorReportUsersEntry::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIErrorReportUsersEntry::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIErrorReportUsersEntry::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIErrorReportUsersEntry::getTotalErrorAttempts() const {
    return m_total_error_attempts;
}
void OAIErrorReportUsersEntry::setTotalErrorAttempts(const qint32 &total_error_attempts) {
    m_total_error_attempts = total_error_attempts;
    m_total_error_attempts_isSet = true;
}

bool OAIErrorReportUsersEntry::is_total_error_attempts_Set() const{
    return m_total_error_attempts_isSet;
}

bool OAIErrorReportUsersEntry::is_total_error_attempts_Valid() const{
    return m_total_error_attempts_isValid;
}

QString OAIErrorReportUsersEntry::getUniqueIpAddresses() const {
    return m_unique_ip_addresses;
}
void OAIErrorReportUsersEntry::setUniqueIpAddresses(const QString &unique_ip_addresses) {
    m_unique_ip_addresses = unique_ip_addresses;
    m_unique_ip_addresses_isSet = true;
}

bool OAIErrorReportUsersEntry::is_unique_ip_addresses_Set() const{
    return m_unique_ip_addresses_isSet;
}

bool OAIErrorReportUsersEntry::is_unique_ip_addresses_Valid() const{
    return m_unique_ip_addresses_isValid;
}

QString OAIErrorReportUsersEntry::getUserId() const {
    return m_user_id;
}
void OAIErrorReportUsersEntry::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIErrorReportUsersEntry::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIErrorReportUsersEntry::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIErrorReportUsersEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_error_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_ip_addresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorReportUsersEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
