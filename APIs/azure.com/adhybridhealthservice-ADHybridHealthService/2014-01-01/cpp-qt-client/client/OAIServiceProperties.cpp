/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceProperties::OAIServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceProperties::OAIServiceProperties() {
    this->initializeModel();
}

OAIServiceProperties::~OAIServiceProperties() {}

void OAIServiceProperties::initializeModel() {

    m_active_alerts_isSet = false;
    m_active_alerts_isValid = false;

    m_additional_information_isSet = false;
    m_additional_information_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_custom_notification_emails_isSet = false;
    m_custom_notification_emails_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_disabled_isSet = false;
    m_last_disabled_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_monitoring_configurations_computed_isSet = false;
    m_monitoring_configurations_computed_isValid = false;

    m_monitoring_configurations_customized_isSet = false;
    m_monitoring_configurations_customized_isValid = false;

    m_notification_email_enabled_isSet = false;
    m_notification_email_enabled_isValid = false;

    m_notification_email_enabled_for_global_admins_isSet = false;
    m_notification_email_enabled_for_global_admins_isValid = false;

    m_notification_emails_isSet = false;
    m_notification_emails_isValid = false;

    m_notification_emails_enabled_for_global_admins_isSet = false;
    m_notification_emails_enabled_for_global_admins_isValid = false;

    m_original_disabled_state_isSet = false;
    m_original_disabled_state_isValid = false;

    m_resolved_alerts_isSet = false;
    m_resolved_alerts_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_simple_properties_isSet = false;
    m_simple_properties_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceProperties::fromJsonObject(QJsonObject json) {

    m_active_alerts_isValid = ::OpenAPI::fromJsonValue(m_active_alerts, json[QString("activeAlerts")]);
    m_active_alerts_isSet = !json[QString("activeAlerts")].isNull() && m_active_alerts_isValid;

    m_additional_information_isValid = ::OpenAPI::fromJsonValue(m_additional_information, json[QString("additionalInformation")]);
    m_additional_information_isSet = !json[QString("additionalInformation")].isNull() && m_additional_information_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_custom_notification_emails_isValid = ::OpenAPI::fromJsonValue(m_custom_notification_emails, json[QString("customNotificationEmails")]);
    m_custom_notification_emails_isSet = !json[QString("customNotificationEmails")].isNull() && m_custom_notification_emails_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_disabled_isValid = ::OpenAPI::fromJsonValue(m_last_disabled, json[QString("lastDisabled")]);
    m_last_disabled_isSet = !json[QString("lastDisabled")].isNull() && m_last_disabled_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_monitoring_configurations_computed_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configurations_computed, json[QString("monitoringConfigurationsComputed")]);
    m_monitoring_configurations_computed_isSet = !json[QString("monitoringConfigurationsComputed")].isNull() && m_monitoring_configurations_computed_isValid;

    m_monitoring_configurations_customized_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configurations_customized, json[QString("monitoringConfigurationsCustomized")]);
    m_monitoring_configurations_customized_isSet = !json[QString("monitoringConfigurationsCustomized")].isNull() && m_monitoring_configurations_customized_isValid;

    m_notification_email_enabled_isValid = ::OpenAPI::fromJsonValue(m_notification_email_enabled, json[QString("notificationEmailEnabled")]);
    m_notification_email_enabled_isSet = !json[QString("notificationEmailEnabled")].isNull() && m_notification_email_enabled_isValid;

    m_notification_email_enabled_for_global_admins_isValid = ::OpenAPI::fromJsonValue(m_notification_email_enabled_for_global_admins, json[QString("notificationEmailEnabledForGlobalAdmins")]);
    m_notification_email_enabled_for_global_admins_isSet = !json[QString("notificationEmailEnabledForGlobalAdmins")].isNull() && m_notification_email_enabled_for_global_admins_isValid;

    m_notification_emails_isValid = ::OpenAPI::fromJsonValue(m_notification_emails, json[QString("notificationEmails")]);
    m_notification_emails_isSet = !json[QString("notificationEmails")].isNull() && m_notification_emails_isValid;

    m_notification_emails_enabled_for_global_admins_isValid = ::OpenAPI::fromJsonValue(m_notification_emails_enabled_for_global_admins, json[QString("notificationEmailsEnabledForGlobalAdmins")]);
    m_notification_emails_enabled_for_global_admins_isSet = !json[QString("notificationEmailsEnabledForGlobalAdmins")].isNull() && m_notification_emails_enabled_for_global_admins_isValid;

    m_original_disabled_state_isValid = ::OpenAPI::fromJsonValue(m_original_disabled_state, json[QString("originalDisabledState")]);
    m_original_disabled_state_isSet = !json[QString("originalDisabledState")].isNull() && m_original_disabled_state_isValid;

    m_resolved_alerts_isValid = ::OpenAPI::fromJsonValue(m_resolved_alerts, json[QString("resolvedAlerts")]);
    m_resolved_alerts_isSet = !json[QString("resolvedAlerts")].isNull() && m_resolved_alerts_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_simple_properties_isValid = ::OpenAPI::fromJsonValue(m_simple_properties, json[QString("simpleProperties")]);
    m_simple_properties_isSet = !json[QString("simpleProperties")].isNull() && m_simple_properties_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_active_alerts_isSet) {
        obj.insert(QString("activeAlerts"), ::OpenAPI::toJsonValue(m_active_alerts));
    }
    if (m_additional_information_isSet) {
        obj.insert(QString("additionalInformation"), ::OpenAPI::toJsonValue(m_additional_information));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_custom_notification_emails.size() > 0) {
        obj.insert(QString("customNotificationEmails"), ::OpenAPI::toJsonValue(m_custom_notification_emails));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_health_isSet) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_disabled_isSet) {
        obj.insert(QString("lastDisabled"), ::OpenAPI::toJsonValue(m_last_disabled));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_monitoring_configurations_computed_isSet) {
        obj.insert(QString("monitoringConfigurationsComputed"), ::OpenAPI::toJsonValue(m_monitoring_configurations_computed));
    }
    if (m_monitoring_configurations_customized_isSet) {
        obj.insert(QString("monitoringConfigurationsCustomized"), ::OpenAPI::toJsonValue(m_monitoring_configurations_customized));
    }
    if (m_notification_email_enabled_isSet) {
        obj.insert(QString("notificationEmailEnabled"), ::OpenAPI::toJsonValue(m_notification_email_enabled));
    }
    if (m_notification_email_enabled_for_global_admins_isSet) {
        obj.insert(QString("notificationEmailEnabledForGlobalAdmins"), ::OpenAPI::toJsonValue(m_notification_email_enabled_for_global_admins));
    }
    if (m_notification_emails.size() > 0) {
        obj.insert(QString("notificationEmails"), ::OpenAPI::toJsonValue(m_notification_emails));
    }
    if (m_notification_emails_enabled_for_global_admins_isSet) {
        obj.insert(QString("notificationEmailsEnabledForGlobalAdmins"), ::OpenAPI::toJsonValue(m_notification_emails_enabled_for_global_admins));
    }
    if (m_original_disabled_state_isSet) {
        obj.insert(QString("originalDisabledState"), ::OpenAPI::toJsonValue(m_original_disabled_state));
    }
    if (m_resolved_alerts_isSet) {
        obj.insert(QString("resolvedAlerts"), ::OpenAPI::toJsonValue(m_resolved_alerts));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_simple_properties_isSet) {
        obj.insert(QString("simpleProperties"), ::OpenAPI::toJsonValue(m_simple_properties));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIServiceProperties::getActiveAlerts() const {
    return m_active_alerts;
}
void OAIServiceProperties::setActiveAlerts(const qint32 &active_alerts) {
    m_active_alerts = active_alerts;
    m_active_alerts_isSet = true;
}

bool OAIServiceProperties::is_active_alerts_Set() const{
    return m_active_alerts_isSet;
}

bool OAIServiceProperties::is_active_alerts_Valid() const{
    return m_active_alerts_isValid;
}

QString OAIServiceProperties::getAdditionalInformation() const {
    return m_additional_information;
}
void OAIServiceProperties::setAdditionalInformation(const QString &additional_information) {
    m_additional_information = additional_information;
    m_additional_information_isSet = true;
}

bool OAIServiceProperties::is_additional_information_Set() const{
    return m_additional_information_isSet;
}

bool OAIServiceProperties::is_additional_information_Valid() const{
    return m_additional_information_isValid;
}

QDateTime OAIServiceProperties::getCreatedDate() const {
    return m_created_date;
}
void OAIServiceProperties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIServiceProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIServiceProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<QString> OAIServiceProperties::getCustomNotificationEmails() const {
    return m_custom_notification_emails;
}
void OAIServiceProperties::setCustomNotificationEmails(const QList<QString> &custom_notification_emails) {
    m_custom_notification_emails = custom_notification_emails;
    m_custom_notification_emails_isSet = true;
}

bool OAIServiceProperties::is_custom_notification_emails_Set() const{
    return m_custom_notification_emails_isSet;
}

bool OAIServiceProperties::is_custom_notification_emails_Valid() const{
    return m_custom_notification_emails_isValid;
}

bool OAIServiceProperties::isDisabled() const {
    return m_disabled;
}
void OAIServiceProperties::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIServiceProperties::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIServiceProperties::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIServiceProperties::getDisplayName() const {
    return m_display_name;
}
void OAIServiceProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIServiceProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIServiceProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIServiceProperties::getHealth() const {
    return m_health;
}
void OAIServiceProperties::setHealth(const QString &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAIServiceProperties::is_health_Set() const{
    return m_health_isSet;
}

bool OAIServiceProperties::is_health_Valid() const{
    return m_health_isValid;
}

QString OAIServiceProperties::getId() const {
    return m_id;
}
void OAIServiceProperties::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceProperties::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceProperties::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIServiceProperties::getLastDisabled() const {
    return m_last_disabled;
}
void OAIServiceProperties::setLastDisabled(const QDateTime &last_disabled) {
    m_last_disabled = last_disabled;
    m_last_disabled_isSet = true;
}

bool OAIServiceProperties::is_last_disabled_Set() const{
    return m_last_disabled_isSet;
}

bool OAIServiceProperties::is_last_disabled_Valid() const{
    return m_last_disabled_isValid;
}

QDateTime OAIServiceProperties::getLastUpdated() const {
    return m_last_updated;
}
void OAIServiceProperties::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIServiceProperties::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIServiceProperties::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAIObject OAIServiceProperties::getMonitoringConfigurationsComputed() const {
    return m_monitoring_configurations_computed;
}
void OAIServiceProperties::setMonitoringConfigurationsComputed(const OAIObject &monitoring_configurations_computed) {
    m_monitoring_configurations_computed = monitoring_configurations_computed;
    m_monitoring_configurations_computed_isSet = true;
}

bool OAIServiceProperties::is_monitoring_configurations_computed_Set() const{
    return m_monitoring_configurations_computed_isSet;
}

bool OAIServiceProperties::is_monitoring_configurations_computed_Valid() const{
    return m_monitoring_configurations_computed_isValid;
}

OAIObject OAIServiceProperties::getMonitoringConfigurationsCustomized() const {
    return m_monitoring_configurations_customized;
}
void OAIServiceProperties::setMonitoringConfigurationsCustomized(const OAIObject &monitoring_configurations_customized) {
    m_monitoring_configurations_customized = monitoring_configurations_customized;
    m_monitoring_configurations_customized_isSet = true;
}

bool OAIServiceProperties::is_monitoring_configurations_customized_Set() const{
    return m_monitoring_configurations_customized_isSet;
}

bool OAIServiceProperties::is_monitoring_configurations_customized_Valid() const{
    return m_monitoring_configurations_customized_isValid;
}

bool OAIServiceProperties::isNotificationEmailEnabled() const {
    return m_notification_email_enabled;
}
void OAIServiceProperties::setNotificationEmailEnabled(const bool &notification_email_enabled) {
    m_notification_email_enabled = notification_email_enabled;
    m_notification_email_enabled_isSet = true;
}

bool OAIServiceProperties::is_notification_email_enabled_Set() const{
    return m_notification_email_enabled_isSet;
}

bool OAIServiceProperties::is_notification_email_enabled_Valid() const{
    return m_notification_email_enabled_isValid;
}

bool OAIServiceProperties::isNotificationEmailEnabledForGlobalAdmins() const {
    return m_notification_email_enabled_for_global_admins;
}
void OAIServiceProperties::setNotificationEmailEnabledForGlobalAdmins(const bool &notification_email_enabled_for_global_admins) {
    m_notification_email_enabled_for_global_admins = notification_email_enabled_for_global_admins;
    m_notification_email_enabled_for_global_admins_isSet = true;
}

bool OAIServiceProperties::is_notification_email_enabled_for_global_admins_Set() const{
    return m_notification_email_enabled_for_global_admins_isSet;
}

bool OAIServiceProperties::is_notification_email_enabled_for_global_admins_Valid() const{
    return m_notification_email_enabled_for_global_admins_isValid;
}

QList<QString> OAIServiceProperties::getNotificationEmails() const {
    return m_notification_emails;
}
void OAIServiceProperties::setNotificationEmails(const QList<QString> &notification_emails) {
    m_notification_emails = notification_emails;
    m_notification_emails_isSet = true;
}

bool OAIServiceProperties::is_notification_emails_Set() const{
    return m_notification_emails_isSet;
}

bool OAIServiceProperties::is_notification_emails_Valid() const{
    return m_notification_emails_isValid;
}

bool OAIServiceProperties::isNotificationEmailsEnabledForGlobalAdmins() const {
    return m_notification_emails_enabled_for_global_admins;
}
void OAIServiceProperties::setNotificationEmailsEnabledForGlobalAdmins(const bool &notification_emails_enabled_for_global_admins) {
    m_notification_emails_enabled_for_global_admins = notification_emails_enabled_for_global_admins;
    m_notification_emails_enabled_for_global_admins_isSet = true;
}

bool OAIServiceProperties::is_notification_emails_enabled_for_global_admins_Set() const{
    return m_notification_emails_enabled_for_global_admins_isSet;
}

bool OAIServiceProperties::is_notification_emails_enabled_for_global_admins_Valid() const{
    return m_notification_emails_enabled_for_global_admins_isValid;
}

bool OAIServiceProperties::isOriginalDisabledState() const {
    return m_original_disabled_state;
}
void OAIServiceProperties::setOriginalDisabledState(const bool &original_disabled_state) {
    m_original_disabled_state = original_disabled_state;
    m_original_disabled_state_isSet = true;
}

bool OAIServiceProperties::is_original_disabled_state_Set() const{
    return m_original_disabled_state_isSet;
}

bool OAIServiceProperties::is_original_disabled_state_Valid() const{
    return m_original_disabled_state_isValid;
}

qint32 OAIServiceProperties::getResolvedAlerts() const {
    return m_resolved_alerts;
}
void OAIServiceProperties::setResolvedAlerts(const qint32 &resolved_alerts) {
    m_resolved_alerts = resolved_alerts;
    m_resolved_alerts_isSet = true;
}

bool OAIServiceProperties::is_resolved_alerts_Set() const{
    return m_resolved_alerts_isSet;
}

bool OAIServiceProperties::is_resolved_alerts_Valid() const{
    return m_resolved_alerts_isValid;
}

QString OAIServiceProperties::getServiceId() const {
    return m_service_id;
}
void OAIServiceProperties::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIServiceProperties::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIServiceProperties::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIServiceProperties::getServiceName() const {
    return m_service_name;
}
void OAIServiceProperties::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceProperties::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceProperties::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIServiceProperties::getSignature() const {
    return m_signature;
}
void OAIServiceProperties::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIServiceProperties::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIServiceProperties::is_signature_Valid() const{
    return m_signature_isValid;
}

OAIObject OAIServiceProperties::getSimpleProperties() const {
    return m_simple_properties;
}
void OAIServiceProperties::setSimpleProperties(const OAIObject &simple_properties) {
    m_simple_properties = simple_properties;
    m_simple_properties_isSet = true;
}

bool OAIServiceProperties::is_simple_properties_Set() const{
    return m_simple_properties_isSet;
}

bool OAIServiceProperties::is_simple_properties_Valid() const{
    return m_simple_properties_isValid;
}

QString OAIServiceProperties::getTenantId() const {
    return m_tenant_id;
}
void OAIServiceProperties::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIServiceProperties::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIServiceProperties::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIServiceProperties::getType() const {
    return m_type;
}
void OAIServiceProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIServiceProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIServiceProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_notification_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_configurations_computed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_configurations_customized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_email_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_email_enabled_for_global_admins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_emails.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_emails_enabled_for_global_admins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_disabled_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
