/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricSets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricSets::OAIMetricSets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricSets::OAIMetricSets() {
    this->initializeModel();
}

OAIMetricSets::~OAIMetricSets() {}

void OAIMetricSets::initializeModel() {

    m_sets_isSet = false;
    m_sets_isValid = false;

    m_time_stamps_isSet = false;
    m_time_stamps_isValid = false;
}

void OAIMetricSets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricSets::fromJsonObject(QJsonObject json) {

    m_sets_isValid = ::OpenAPI::fromJsonValue(m_sets, json[QString("sets")]);
    m_sets_isSet = !json[QString("sets")].isNull() && m_sets_isValid;

    m_time_stamps_isValid = ::OpenAPI::fromJsonValue(m_time_stamps, json[QString("timeStamps")]);
    m_time_stamps_isSet = !json[QString("timeStamps")].isNull() && m_time_stamps_isValid;
}

QString OAIMetricSets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricSets::asJsonObject() const {
    QJsonObject obj;
    if (m_sets.size() > 0) {
        obj.insert(QString("sets"), ::OpenAPI::toJsonValue(m_sets));
    }
    if (m_time_stamps.size() > 0) {
        obj.insert(QString("timeStamps"), ::OpenAPI::toJsonValue(m_time_stamps));
    }
    return obj;
}

QList<OAIMetricSet> OAIMetricSets::getSets() const {
    return m_sets;
}
void OAIMetricSets::setSets(const QList<OAIMetricSet> &sets) {
    m_sets = sets;
    m_sets_isSet = true;
}

bool OAIMetricSets::is_sets_Set() const{
    return m_sets_isSet;
}

bool OAIMetricSets::is_sets_Valid() const{
    return m_sets_isValid;
}

QList<QDateTime> OAIMetricSets::getTimeStamps() const {
    return m_time_stamps;
}
void OAIMetricSets::setTimeStamps(const QList<QDateTime> &time_stamps) {
    m_time_stamps = time_stamps;
    m_time_stamps_isSet = true;
}

bool OAIMetricSets::is_time_stamps_Set() const{
    return m_time_stamps_isSet;
}

bool OAIMetricSets::is_time_stamps_Valid() const{
    return m_time_stamps_isValid;
}

bool OAIMetricSets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricSets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
