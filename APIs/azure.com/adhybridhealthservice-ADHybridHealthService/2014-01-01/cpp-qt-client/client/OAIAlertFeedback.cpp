/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertFeedback.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertFeedback::OAIAlertFeedback(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertFeedback::OAIAlertFeedback() {
    this->initializeModel();
}

OAIAlertFeedback::~OAIAlertFeedback() {}

void OAIAlertFeedback::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_consented_to_share_isSet = false;
    m_consented_to_share_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_feedback_isSet = false;
    m_feedback_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_service_member_id_isSet = false;
    m_service_member_id_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAlertFeedback::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertFeedback::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_consented_to_share_isValid = ::OpenAPI::fromJsonValue(m_consented_to_share, json[QString("consentedToShare")]);
    m_consented_to_share_isSet = !json[QString("consentedToShare")].isNull() && m_consented_to_share_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_feedback_isValid = ::OpenAPI::fromJsonValue(m_feedback, json[QString("feedback")]);
    m_feedback_isSet = !json[QString("feedback")].isNull() && m_feedback_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_service_member_id_isValid = ::OpenAPI::fromJsonValue(m_service_member_id, json[QString("serviceMemberId")]);
    m_service_member_id_isSet = !json[QString("serviceMemberId")].isNull() && m_service_member_id_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("shortName")]);
    m_short_name_isSet = !json[QString("shortName")].isNull() && m_short_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAlertFeedback::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertFeedback::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_consented_to_share_isSet) {
        obj.insert(QString("consentedToShare"), ::OpenAPI::toJsonValue(m_consented_to_share));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_feedback_isSet) {
        obj.insert(QString("feedback"), ::OpenAPI::toJsonValue(m_feedback));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_service_member_id_isSet) {
        obj.insert(QString("serviceMemberId"), ::OpenAPI::toJsonValue(m_service_member_id));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("shortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIAlertFeedback::getComment() const {
    return m_comment;
}
void OAIAlertFeedback::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIAlertFeedback::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIAlertFeedback::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIAlertFeedback::isConsentedToShare() const {
    return m_consented_to_share;
}
void OAIAlertFeedback::setConsentedToShare(const bool &consented_to_share) {
    m_consented_to_share = consented_to_share;
    m_consented_to_share_isSet = true;
}

bool OAIAlertFeedback::is_consented_to_share_Set() const{
    return m_consented_to_share_isSet;
}

bool OAIAlertFeedback::is_consented_to_share_Valid() const{
    return m_consented_to_share_isValid;
}

QDateTime OAIAlertFeedback::getCreatedDate() const {
    return m_created_date;
}
void OAIAlertFeedback::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIAlertFeedback::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIAlertFeedback::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIAlertFeedback::getFeedback() const {
    return m_feedback;
}
void OAIAlertFeedback::setFeedback(const QString &feedback) {
    m_feedback = feedback;
    m_feedback_isSet = true;
}

bool OAIAlertFeedback::is_feedback_Set() const{
    return m_feedback_isSet;
}

bool OAIAlertFeedback::is_feedback_Valid() const{
    return m_feedback_isValid;
}

QString OAIAlertFeedback::getLevel() const {
    return m_level;
}
void OAIAlertFeedback::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIAlertFeedback::is_level_Set() const{
    return m_level_isSet;
}

bool OAIAlertFeedback::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIAlertFeedback::getServiceMemberId() const {
    return m_service_member_id;
}
void OAIAlertFeedback::setServiceMemberId(const QString &service_member_id) {
    m_service_member_id = service_member_id;
    m_service_member_id_isSet = true;
}

bool OAIAlertFeedback::is_service_member_id_Set() const{
    return m_service_member_id_isSet;
}

bool OAIAlertFeedback::is_service_member_id_Valid() const{
    return m_service_member_id_isValid;
}

QString OAIAlertFeedback::getShortName() const {
    return m_short_name;
}
void OAIAlertFeedback::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIAlertFeedback::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIAlertFeedback::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIAlertFeedback::getState() const {
    return m_state;
}
void OAIAlertFeedback::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAlertFeedback::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAlertFeedback::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAlertFeedback::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consented_to_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertFeedback::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
