/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMetricsApi_H
#define OAI_OAIMetricsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectorMetadata.h"
#include "OAIMetricMetadata.h"
#include "OAIMetricMetadataList.h"
#include "OAIMetricSets.h"
#include "OAIMetrics.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMetricsApi : public QObject {
    Q_OBJECT

public:
    OAIMetricsApi(const int timeOut = 0);
    ~OAIMetricsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  group_key QString [optional]
    * @param[in]  from_date QDateTime [optional]
    * @param[in]  to_date QDateTime [optional]
    */
    virtual void serviceGetMetrics(const QString &service_name, const QString &metric_name, const QString &group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &group_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceMembersGetConnectorMetadata(const QString &service_name, const QString &service_member_id, const QString &metric_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  group_key QString [optional]
    * @param[in]  from_date QDateTime [optional]
    * @param[in]  to_date QDateTime [optional]
    */
    virtual void serviceMembersGetMetrics(const QString &service_name, const QString &metric_name, const QString &group_name, const QString &service_member_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &group_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesGetMetricMetadata(const QString &service_name, const QString &metric_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  group_key QString [optional]
    * @param[in]  from_date QDateTime [optional]
    * @param[in]  to_date QDateTime [optional]
    */
    virtual void servicesGetMetricMetadataForGroup(const QString &service_name, const QString &metric_name, const QString &group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &group_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  perf_counter bool [optional]
    */
    virtual void servicesListMetricMetadata(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &perf_counter = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesListMetricsAverage(const QString &service_name, const QString &metric_name, const QString &group_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesListMetricsSum(const QString &service_name, const QString &metric_name, const QString &group_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serviceGetMetricsCallback(OAIHttpRequestWorker *worker);
    void serviceMembersGetConnectorMetadataCallback(OAIHttpRequestWorker *worker);
    void serviceMembersGetMetricsCallback(OAIHttpRequestWorker *worker);
    void servicesGetMetricMetadataCallback(OAIHttpRequestWorker *worker);
    void servicesGetMetricMetadataForGroupCallback(OAIHttpRequestWorker *worker);
    void servicesListMetricMetadataCallback(OAIHttpRequestWorker *worker);
    void servicesListMetricsAverageCallback(OAIHttpRequestWorker *worker);
    void servicesListMetricsSumCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serviceGetMetricsSignal(OAIMetricSets summary);
    void serviceMembersGetConnectorMetadataSignal(OAIConnectorMetadata summary);
    void serviceMembersGetMetricsSignal(OAIMetricSets summary);
    void servicesGetMetricMetadataSignal(OAIMetricMetadata summary);
    void servicesGetMetricMetadataForGroupSignal(OAIMetricSets summary);
    void servicesListMetricMetadataSignal(OAIMetricMetadataList summary);
    void servicesListMetricsAverageSignal(OAIMetrics summary);
    void servicesListMetricsSumSignal(OAIMetrics summary);


    void serviceGetMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricSets summary);
    void serviceMembersGetConnectorMetadataSignalFull(OAIHttpRequestWorker *worker, OAIConnectorMetadata summary);
    void serviceMembersGetMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricSets summary);
    void servicesGetMetricMetadataSignalFull(OAIHttpRequestWorker *worker, OAIMetricMetadata summary);
    void servicesGetMetricMetadataForGroupSignalFull(OAIHttpRequestWorker *worker, OAIMetricSets summary);
    void servicesListMetricMetadataSignalFull(OAIHttpRequestWorker *worker, OAIMetricMetadataList summary);
    void servicesListMetricsAverageSignalFull(OAIHttpRequestWorker *worker, OAIMetrics summary);
    void servicesListMetricsSumSignalFull(OAIHttpRequestWorker *worker, OAIMetrics summary);

    Q_DECL_DEPRECATED_X("Use serviceGetMetricsSignalError() instead")
    void serviceGetMetricsSignalE(OAIMetricSets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGetMetricsSignalError(OAIMetricSets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersGetConnectorMetadataSignalError() instead")
    void serviceMembersGetConnectorMetadataSignalE(OAIConnectorMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersGetConnectorMetadataSignalError(OAIConnectorMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersGetMetricsSignalError() instead")
    void serviceMembersGetMetricsSignalE(OAIMetricSets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersGetMetricsSignalError(OAIMetricSets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetMetricMetadataSignalError() instead")
    void servicesGetMetricMetadataSignalE(OAIMetricMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetMetricMetadataSignalError(OAIMetricMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetMetricMetadataForGroupSignalError() instead")
    void servicesGetMetricMetadataForGroupSignalE(OAIMetricSets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetMetricMetadataForGroupSignalError(OAIMetricSets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListMetricMetadataSignalError() instead")
    void servicesListMetricMetadataSignalE(OAIMetricMetadataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListMetricMetadataSignalError(OAIMetricMetadataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListMetricsAverageSignalError() instead")
    void servicesListMetricsAverageSignalE(OAIMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListMetricsAverageSignalError(OAIMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListMetricsSumSignalError() instead")
    void servicesListMetricsSumSignalE(OAIMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListMetricsSumSignalError(OAIMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serviceGetMetricsSignalErrorFull() instead")
    void serviceGetMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceGetMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersGetConnectorMetadataSignalErrorFull() instead")
    void serviceMembersGetConnectorMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersGetConnectorMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersGetMetricsSignalErrorFull() instead")
    void serviceMembersGetMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersGetMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetMetricMetadataSignalErrorFull() instead")
    void servicesGetMetricMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetMetricMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetMetricMetadataForGroupSignalErrorFull() instead")
    void servicesGetMetricMetadataForGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetMetricMetadataForGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListMetricMetadataSignalErrorFull() instead")
    void servicesListMetricMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListMetricMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListMetricsAverageSignalErrorFull() instead")
    void servicesListMetricsAverageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListMetricsAverageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListMetricsSumSignalErrorFull() instead")
    void servicesListMetricsSumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListMetricsSumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
