/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenant::OAITenant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenant::OAITenant() {
    this->initializeModel();
}

OAITenant::~OAITenant() {}

void OAITenant::initializeModel() {

    m_aad_license_isSet = false;
    m_aad_license_isValid = false;

    m_aad_premium_isSet = false;
    m_aad_premium_isValid = false;

    m_agent_auto_update_isSet = false;
    m_agent_auto_update_isValid = false;

    m_alert_suppression_time_in_mins_isSet = false;
    m_alert_suppression_time_in_mins_isValid = false;

    m_consented_to_microsoft_dev_ops_isSet = false;
    m_consented_to_microsoft_dev_ops_isValid = false;

    m_country_letter_code_isSet = false;
    m_country_letter_code_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_dev_ops_ttl_isSet = false;
    m_dev_ops_ttl_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_disabled_reason_isSet = false;
    m_disabled_reason_isValid = false;

    m_global_admins_email_isSet = false;
    m_global_admins_email_isValid = false;

    m_initial_domain_isSet = false;
    m_initial_domain_isValid = false;

    m_last_disabled_isSet = false;
    m_last_disabled_isValid = false;

    m_last_verified_isSet = false;
    m_last_verified_isValid = false;

    m_onboarded_isSet = false;
    m_onboarded_isValid = false;

    m_onboarding_allowed_isSet = false;
    m_onboarding_allowed_isValid = false;

    m_pks_certificate_isSet = false;
    m_pks_certificate_isValid = false;

    m_private_preview_tenant_isSet = false;
    m_private_preview_tenant_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_tenant_in_quarantine_isSet = false;
    m_tenant_in_quarantine_isValid = false;

    m_tenant_name_isSet = false;
    m_tenant_name_isValid = false;
}

void OAITenant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenant::fromJsonObject(QJsonObject json) {

    m_aad_license_isValid = ::OpenAPI::fromJsonValue(m_aad_license, json[QString("aadLicense")]);
    m_aad_license_isSet = !json[QString("aadLicense")].isNull() && m_aad_license_isValid;

    m_aad_premium_isValid = ::OpenAPI::fromJsonValue(m_aad_premium, json[QString("aadPremium")]);
    m_aad_premium_isSet = !json[QString("aadPremium")].isNull() && m_aad_premium_isValid;

    m_agent_auto_update_isValid = ::OpenAPI::fromJsonValue(m_agent_auto_update, json[QString("agentAutoUpdate")]);
    m_agent_auto_update_isSet = !json[QString("agentAutoUpdate")].isNull() && m_agent_auto_update_isValid;

    m_alert_suppression_time_in_mins_isValid = ::OpenAPI::fromJsonValue(m_alert_suppression_time_in_mins, json[QString("alertSuppressionTimeInMins")]);
    m_alert_suppression_time_in_mins_isSet = !json[QString("alertSuppressionTimeInMins")].isNull() && m_alert_suppression_time_in_mins_isValid;

    m_consented_to_microsoft_dev_ops_isValid = ::OpenAPI::fromJsonValue(m_consented_to_microsoft_dev_ops, json[QString("consentedToMicrosoftDevOps")]);
    m_consented_to_microsoft_dev_ops_isSet = !json[QString("consentedToMicrosoftDevOps")].isNull() && m_consented_to_microsoft_dev_ops_isValid;

    m_country_letter_code_isValid = ::OpenAPI::fromJsonValue(m_country_letter_code, json[QString("countryLetterCode")]);
    m_country_letter_code_isSet = !json[QString("countryLetterCode")].isNull() && m_country_letter_code_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_dev_ops_ttl_isValid = ::OpenAPI::fromJsonValue(m_dev_ops_ttl, json[QString("devOpsTtl")]);
    m_dev_ops_ttl_isSet = !json[QString("devOpsTtl")].isNull() && m_dev_ops_ttl_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_disabled_reason_isValid = ::OpenAPI::fromJsonValue(m_disabled_reason, json[QString("disabledReason")]);
    m_disabled_reason_isSet = !json[QString("disabledReason")].isNull() && m_disabled_reason_isValid;

    m_global_admins_email_isValid = ::OpenAPI::fromJsonValue(m_global_admins_email, json[QString("globalAdminsEmail")]);
    m_global_admins_email_isSet = !json[QString("globalAdminsEmail")].isNull() && m_global_admins_email_isValid;

    m_initial_domain_isValid = ::OpenAPI::fromJsonValue(m_initial_domain, json[QString("initialDomain")]);
    m_initial_domain_isSet = !json[QString("initialDomain")].isNull() && m_initial_domain_isValid;

    m_last_disabled_isValid = ::OpenAPI::fromJsonValue(m_last_disabled, json[QString("lastDisabled")]);
    m_last_disabled_isSet = !json[QString("lastDisabled")].isNull() && m_last_disabled_isValid;

    m_last_verified_isValid = ::OpenAPI::fromJsonValue(m_last_verified, json[QString("lastVerified")]);
    m_last_verified_isSet = !json[QString("lastVerified")].isNull() && m_last_verified_isValid;

    m_onboarded_isValid = ::OpenAPI::fromJsonValue(m_onboarded, json[QString("onboarded")]);
    m_onboarded_isSet = !json[QString("onboarded")].isNull() && m_onboarded_isValid;

    m_onboarding_allowed_isValid = ::OpenAPI::fromJsonValue(m_onboarding_allowed, json[QString("onboardingAllowed")]);
    m_onboarding_allowed_isSet = !json[QString("onboardingAllowed")].isNull() && m_onboarding_allowed_isValid;

    m_pks_certificate_isValid = ::OpenAPI::fromJsonValue(m_pks_certificate, json[QString("pksCertificate")]);
    m_pks_certificate_isSet = !json[QString("pksCertificate")].isNull() && m_pks_certificate_isValid;

    m_private_preview_tenant_isValid = ::OpenAPI::fromJsonValue(m_private_preview_tenant, json[QString("privatePreviewTenant")]);
    m_private_preview_tenant_isSet = !json[QString("privatePreviewTenant")].isNull() && m_private_preview_tenant_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_tenant_in_quarantine_isValid = ::OpenAPI::fromJsonValue(m_tenant_in_quarantine, json[QString("tenantInQuarantine")]);
    m_tenant_in_quarantine_isSet = !json[QString("tenantInQuarantine")].isNull() && m_tenant_in_quarantine_isValid;

    m_tenant_name_isValid = ::OpenAPI::fromJsonValue(m_tenant_name, json[QString("tenantName")]);
    m_tenant_name_isSet = !json[QString("tenantName")].isNull() && m_tenant_name_isValid;
}

QString OAITenant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenant::asJsonObject() const {
    QJsonObject obj;
    if (m_aad_license_isSet) {
        obj.insert(QString("aadLicense"), ::OpenAPI::toJsonValue(m_aad_license));
    }
    if (m_aad_premium_isSet) {
        obj.insert(QString("aadPremium"), ::OpenAPI::toJsonValue(m_aad_premium));
    }
    if (m_agent_auto_update_isSet) {
        obj.insert(QString("agentAutoUpdate"), ::OpenAPI::toJsonValue(m_agent_auto_update));
    }
    if (m_alert_suppression_time_in_mins_isSet) {
        obj.insert(QString("alertSuppressionTimeInMins"), ::OpenAPI::toJsonValue(m_alert_suppression_time_in_mins));
    }
    if (m_consented_to_microsoft_dev_ops_isSet) {
        obj.insert(QString("consentedToMicrosoftDevOps"), ::OpenAPI::toJsonValue(m_consented_to_microsoft_dev_ops));
    }
    if (m_country_letter_code_isSet) {
        obj.insert(QString("countryLetterCode"), ::OpenAPI::toJsonValue(m_country_letter_code));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_dev_ops_ttl_isSet) {
        obj.insert(QString("devOpsTtl"), ::OpenAPI::toJsonValue(m_dev_ops_ttl));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_disabled_reason_isSet) {
        obj.insert(QString("disabledReason"), ::OpenAPI::toJsonValue(m_disabled_reason));
    }
    if (m_global_admins_email.size() > 0) {
        obj.insert(QString("globalAdminsEmail"), ::OpenAPI::toJsonValue(m_global_admins_email));
    }
    if (m_initial_domain_isSet) {
        obj.insert(QString("initialDomain"), ::OpenAPI::toJsonValue(m_initial_domain));
    }
    if (m_last_disabled_isSet) {
        obj.insert(QString("lastDisabled"), ::OpenAPI::toJsonValue(m_last_disabled));
    }
    if (m_last_verified_isSet) {
        obj.insert(QString("lastVerified"), ::OpenAPI::toJsonValue(m_last_verified));
    }
    if (m_onboarded_isSet) {
        obj.insert(QString("onboarded"), ::OpenAPI::toJsonValue(m_onboarded));
    }
    if (m_onboarding_allowed_isSet) {
        obj.insert(QString("onboardingAllowed"), ::OpenAPI::toJsonValue(m_onboarding_allowed));
    }
    if (m_pks_certificate_isSet) {
        obj.insert(QString("pksCertificate"), ::OpenAPI::toJsonValue(m_pks_certificate));
    }
    if (m_private_preview_tenant_isSet) {
        obj.insert(QString("privatePreviewTenant"), ::OpenAPI::toJsonValue(m_private_preview_tenant));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_tenant_in_quarantine_isSet) {
        obj.insert(QString("tenantInQuarantine"), ::OpenAPI::toJsonValue(m_tenant_in_quarantine));
    }
    if (m_tenant_name_isSet) {
        obj.insert(QString("tenantName"), ::OpenAPI::toJsonValue(m_tenant_name));
    }
    return obj;
}

QString OAITenant::getAadLicense() const {
    return m_aad_license;
}
void OAITenant::setAadLicense(const QString &aad_license) {
    m_aad_license = aad_license;
    m_aad_license_isSet = true;
}

bool OAITenant::is_aad_license_Set() const{
    return m_aad_license_isSet;
}

bool OAITenant::is_aad_license_Valid() const{
    return m_aad_license_isValid;
}

bool OAITenant::isAadPremium() const {
    return m_aad_premium;
}
void OAITenant::setAadPremium(const bool &aad_premium) {
    m_aad_premium = aad_premium;
    m_aad_premium_isSet = true;
}

bool OAITenant::is_aad_premium_Set() const{
    return m_aad_premium_isSet;
}

bool OAITenant::is_aad_premium_Valid() const{
    return m_aad_premium_isValid;
}

bool OAITenant::isAgentAutoUpdate() const {
    return m_agent_auto_update;
}
void OAITenant::setAgentAutoUpdate(const bool &agent_auto_update) {
    m_agent_auto_update = agent_auto_update;
    m_agent_auto_update_isSet = true;
}

bool OAITenant::is_agent_auto_update_Set() const{
    return m_agent_auto_update_isSet;
}

bool OAITenant::is_agent_auto_update_Valid() const{
    return m_agent_auto_update_isValid;
}

qint32 OAITenant::getAlertSuppressionTimeInMins() const {
    return m_alert_suppression_time_in_mins;
}
void OAITenant::setAlertSuppressionTimeInMins(const qint32 &alert_suppression_time_in_mins) {
    m_alert_suppression_time_in_mins = alert_suppression_time_in_mins;
    m_alert_suppression_time_in_mins_isSet = true;
}

bool OAITenant::is_alert_suppression_time_in_mins_Set() const{
    return m_alert_suppression_time_in_mins_isSet;
}

bool OAITenant::is_alert_suppression_time_in_mins_Valid() const{
    return m_alert_suppression_time_in_mins_isValid;
}

bool OAITenant::isConsentedToMicrosoftDevOps() const {
    return m_consented_to_microsoft_dev_ops;
}
void OAITenant::setConsentedToMicrosoftDevOps(const bool &consented_to_microsoft_dev_ops) {
    m_consented_to_microsoft_dev_ops = consented_to_microsoft_dev_ops;
    m_consented_to_microsoft_dev_ops_isSet = true;
}

bool OAITenant::is_consented_to_microsoft_dev_ops_Set() const{
    return m_consented_to_microsoft_dev_ops_isSet;
}

bool OAITenant::is_consented_to_microsoft_dev_ops_Valid() const{
    return m_consented_to_microsoft_dev_ops_isValid;
}

QString OAITenant::getCountryLetterCode() const {
    return m_country_letter_code;
}
void OAITenant::setCountryLetterCode(const QString &country_letter_code) {
    m_country_letter_code = country_letter_code;
    m_country_letter_code_isSet = true;
}

bool OAITenant::is_country_letter_code_Set() const{
    return m_country_letter_code_isSet;
}

bool OAITenant::is_country_letter_code_Valid() const{
    return m_country_letter_code_isValid;
}

QDateTime OAITenant::getCreatedDate() const {
    return m_created_date;
}
void OAITenant::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAITenant::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAITenant::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QDateTime OAITenant::getDevOpsTtl() const {
    return m_dev_ops_ttl;
}
void OAITenant::setDevOpsTtl(const QDateTime &dev_ops_ttl) {
    m_dev_ops_ttl = dev_ops_ttl;
    m_dev_ops_ttl_isSet = true;
}

bool OAITenant::is_dev_ops_ttl_Set() const{
    return m_dev_ops_ttl_isSet;
}

bool OAITenant::is_dev_ops_ttl_Valid() const{
    return m_dev_ops_ttl_isValid;
}

bool OAITenant::isDisabled() const {
    return m_disabled;
}
void OAITenant::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAITenant::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAITenant::is_disabled_Valid() const{
    return m_disabled_isValid;
}

qint32 OAITenant::getDisabledReason() const {
    return m_disabled_reason;
}
void OAITenant::setDisabledReason(const qint32 &disabled_reason) {
    m_disabled_reason = disabled_reason;
    m_disabled_reason_isSet = true;
}

bool OAITenant::is_disabled_reason_Set() const{
    return m_disabled_reason_isSet;
}

bool OAITenant::is_disabled_reason_Valid() const{
    return m_disabled_reason_isValid;
}

QList<QString> OAITenant::getGlobalAdminsEmail() const {
    return m_global_admins_email;
}
void OAITenant::setGlobalAdminsEmail(const QList<QString> &global_admins_email) {
    m_global_admins_email = global_admins_email;
    m_global_admins_email_isSet = true;
}

bool OAITenant::is_global_admins_email_Set() const{
    return m_global_admins_email_isSet;
}

bool OAITenant::is_global_admins_email_Valid() const{
    return m_global_admins_email_isValid;
}

QString OAITenant::getInitialDomain() const {
    return m_initial_domain;
}
void OAITenant::setInitialDomain(const QString &initial_domain) {
    m_initial_domain = initial_domain;
    m_initial_domain_isSet = true;
}

bool OAITenant::is_initial_domain_Set() const{
    return m_initial_domain_isSet;
}

bool OAITenant::is_initial_domain_Valid() const{
    return m_initial_domain_isValid;
}

QDateTime OAITenant::getLastDisabled() const {
    return m_last_disabled;
}
void OAITenant::setLastDisabled(const QDateTime &last_disabled) {
    m_last_disabled = last_disabled;
    m_last_disabled_isSet = true;
}

bool OAITenant::is_last_disabled_Set() const{
    return m_last_disabled_isSet;
}

bool OAITenant::is_last_disabled_Valid() const{
    return m_last_disabled_isValid;
}

QDateTime OAITenant::getLastVerified() const {
    return m_last_verified;
}
void OAITenant::setLastVerified(const QDateTime &last_verified) {
    m_last_verified = last_verified;
    m_last_verified_isSet = true;
}

bool OAITenant::is_last_verified_Set() const{
    return m_last_verified_isSet;
}

bool OAITenant::is_last_verified_Valid() const{
    return m_last_verified_isValid;
}

bool OAITenant::isOnboarded() const {
    return m_onboarded;
}
void OAITenant::setOnboarded(const bool &onboarded) {
    m_onboarded = onboarded;
    m_onboarded_isSet = true;
}

bool OAITenant::is_onboarded_Set() const{
    return m_onboarded_isSet;
}

bool OAITenant::is_onboarded_Valid() const{
    return m_onboarded_isValid;
}

bool OAITenant::isOnboardingAllowed() const {
    return m_onboarding_allowed;
}
void OAITenant::setOnboardingAllowed(const bool &onboarding_allowed) {
    m_onboarding_allowed = onboarding_allowed;
    m_onboarding_allowed_isSet = true;
}

bool OAITenant::is_onboarding_allowed_Set() const{
    return m_onboarding_allowed_isSet;
}

bool OAITenant::is_onboarding_allowed_Valid() const{
    return m_onboarding_allowed_isValid;
}

OAIObject OAITenant::getPksCertificate() const {
    return m_pks_certificate;
}
void OAITenant::setPksCertificate(const OAIObject &pks_certificate) {
    m_pks_certificate = pks_certificate;
    m_pks_certificate_isSet = true;
}

bool OAITenant::is_pks_certificate_Set() const{
    return m_pks_certificate_isSet;
}

bool OAITenant::is_pks_certificate_Valid() const{
    return m_pks_certificate_isValid;
}

bool OAITenant::isPrivatePreviewTenant() const {
    return m_private_preview_tenant;
}
void OAITenant::setPrivatePreviewTenant(const bool &private_preview_tenant) {
    m_private_preview_tenant = private_preview_tenant;
    m_private_preview_tenant_isSet = true;
}

bool OAITenant::is_private_preview_tenant_Set() const{
    return m_private_preview_tenant_isSet;
}

bool OAITenant::is_private_preview_tenant_Valid() const{
    return m_private_preview_tenant_isValid;
}

QString OAITenant::getTenantId() const {
    return m_tenant_id;
}
void OAITenant::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAITenant::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAITenant::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAITenant::isTenantInQuarantine() const {
    return m_tenant_in_quarantine;
}
void OAITenant::setTenantInQuarantine(const bool &tenant_in_quarantine) {
    m_tenant_in_quarantine = tenant_in_quarantine;
    m_tenant_in_quarantine_isSet = true;
}

bool OAITenant::is_tenant_in_quarantine_Set() const{
    return m_tenant_in_quarantine_isSet;
}

bool OAITenant::is_tenant_in_quarantine_Valid() const{
    return m_tenant_in_quarantine_isValid;
}

QString OAITenant::getTenantName() const {
    return m_tenant_name;
}
void OAITenant::setTenantName(const QString &tenant_name) {
    m_tenant_name = tenant_name;
    m_tenant_name_isSet = true;
}

bool OAITenant::is_tenant_name_Set() const{
    return m_tenant_name_isSet;
}

bool OAITenant::is_tenant_name_Valid() const{
    return m_tenant_name_isValid;
}

bool OAITenant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aad_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_premium_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_auto_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_suppression_time_in_mins_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consented_to_microsoft_dev_ops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_letter_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dev_ops_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_admins_email.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarding_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pks_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_preview_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_in_quarantine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
