/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIErrorReportUsersEntry.h
 *
 * The bad password login attempt details.
 */

#ifndef OAIErrorReportUsersEntry_H
#define OAIErrorReportUsersEntry_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIErrorReportUsersEntry : public OAIObject {
public:
    OAIErrorReportUsersEntry();
    OAIErrorReportUsersEntry(QString json);
    ~OAIErrorReportUsersEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QDateTime getLastUpdated() const;
    void setLastUpdated(const QDateTime &last_updated);
    bool is_last_updated_Set() const;
    bool is_last_updated_Valid() const;

    qint32 getTotalErrorAttempts() const;
    void setTotalErrorAttempts(const qint32 &total_error_attempts);
    bool is_total_error_attempts_Set() const;
    bool is_total_error_attempts_Valid() const;

    QString getUniqueIpAddresses() const;
    void setUniqueIpAddresses(const QString &unique_ip_addresses);
    bool is_unique_ip_addresses_Set() const;
    bool is_unique_ip_addresses_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QDateTime m_last_updated;
    bool m_last_updated_isSet;
    bool m_last_updated_isValid;

    qint32 m_total_error_attempts;
    bool m_total_error_attempts_isSet;
    bool m_total_error_attempts_isValid;

    QString m_unique_ip_addresses;
    bool m_unique_ip_addresses_isSet;
    bool m_unique_ip_addresses_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIErrorReportUsersEntry)

#endif // OAIErrorReportUsersEntry_H
