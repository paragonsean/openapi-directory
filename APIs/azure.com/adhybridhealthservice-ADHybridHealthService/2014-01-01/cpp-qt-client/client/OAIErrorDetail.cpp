/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorDetail::OAIErrorDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorDetail::OAIErrorDetail() {
    this->initializeModel();
}

OAIErrorDetail::~OAIErrorDetail() {}

void OAIErrorDetail::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_kb_url_isSet = false;
    m_kb_url_isValid = false;

    m_object_with_sync_error_isSet = false;
    m_object_with_sync_error_isValid = false;

    m_objects_with_sync_error_isSet = false;
    m_objects_with_sync_error_isValid = false;
}

void OAIErrorDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorDetail::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_kb_url_isValid = ::OpenAPI::fromJsonValue(m_kb_url, json[QString("kbUrl")]);
    m_kb_url_isSet = !json[QString("kbUrl")].isNull() && m_kb_url_isValid;

    m_object_with_sync_error_isValid = ::OpenAPI::fromJsonValue(m_object_with_sync_error, json[QString("objectWithSyncError")]);
    m_object_with_sync_error_isSet = !json[QString("objectWithSyncError")].isNull() && m_object_with_sync_error_isValid;

    m_objects_with_sync_error_isValid = ::OpenAPI::fromJsonValue(m_objects_with_sync_error, json[QString("objectsWithSyncError")]);
    m_objects_with_sync_error_isSet = !json[QString("objectsWithSyncError")].isNull() && m_objects_with_sync_error_isValid;
}

QString OAIErrorDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_kb_url_isSet) {
        obj.insert(QString("kbUrl"), ::OpenAPI::toJsonValue(m_kb_url));
    }
    if (m_object_with_sync_error.isSet()) {
        obj.insert(QString("objectWithSyncError"), ::OpenAPI::toJsonValue(m_object_with_sync_error));
    }
    if (m_objects_with_sync_error.isSet()) {
        obj.insert(QString("objectsWithSyncError"), ::OpenAPI::toJsonValue(m_objects_with_sync_error));
    }
    return obj;
}

QString OAIErrorDetail::getDescription() const {
    return m_description;
}
void OAIErrorDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIErrorDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIErrorDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIErrorDetail::getDetail() const {
    return m_detail;
}
void OAIErrorDetail::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIErrorDetail::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIErrorDetail::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIErrorDetail::getKbUrl() const {
    return m_kb_url;
}
void OAIErrorDetail::setKbUrl(const QString &kb_url) {
    m_kb_url = kb_url;
    m_kb_url_isSet = true;
}

bool OAIErrorDetail::is_kb_url_Set() const{
    return m_kb_url_isSet;
}

bool OAIErrorDetail::is_kb_url_Valid() const{
    return m_kb_url_isValid;
}

OAIMergedExportError OAIErrorDetail::getObjectWithSyncError() const {
    return m_object_with_sync_error;
}
void OAIErrorDetail::setObjectWithSyncError(const OAIMergedExportError &object_with_sync_error) {
    m_object_with_sync_error = object_with_sync_error;
    m_object_with_sync_error_isSet = true;
}

bool OAIErrorDetail::is_object_with_sync_error_Set() const{
    return m_object_with_sync_error_isSet;
}

bool OAIErrorDetail::is_object_with_sync_error_Valid() const{
    return m_object_with_sync_error_isValid;
}

OAIObjectWithSyncError OAIErrorDetail::getObjectsWithSyncError() const {
    return m_objects_with_sync_error;
}
void OAIErrorDetail::setObjectsWithSyncError(const OAIObjectWithSyncError &objects_with_sync_error) {
    m_objects_with_sync_error = objects_with_sync_error;
    m_objects_with_sync_error_isSet = true;
}

bool OAIErrorDetail::is_objects_with_sync_error_Set() const{
    return m_objects_with_sync_error_isSet;
}

bool OAIErrorDetail::is_objects_with_sync_error_Valid() const{
    return m_objects_with_sync_error_isValid;
}

bool OAIErrorDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kb_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_with_sync_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects_with_sync_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
