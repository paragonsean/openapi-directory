/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceMember::OAIServiceMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceMember::OAIServiceMember() {
    this->initializeModel();
}

OAIServiceMember::~OAIServiceMember() {}

void OAIServiceMember::initializeModel() {

    m_active_alerts_isSet = false;
    m_active_alerts_isValid = false;

    m_additional_information_isSet = false;
    m_additional_information_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_disabled_reason_isSet = false;
    m_disabled_reason_isValid = false;

    m_installed_qfes_isSet = false;
    m_installed_qfes_isValid = false;

    m_last_disabled_isSet = false;
    m_last_disabled_isValid = false;

    m_last_reboot_isSet = false;
    m_last_reboot_isValid = false;

    m_last_server_reported_monitoring_level_change_isSet = false;
    m_last_server_reported_monitoring_level_change_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_machine_id_isSet = false;
    m_machine_id_isValid = false;

    m_machine_name_isSet = false;
    m_machine_name_isValid = false;

    m_monitoring_configurations_computed_isSet = false;
    m_monitoring_configurations_computed_isValid = false;

    m_monitoring_configurations_customized_isSet = false;
    m_monitoring_configurations_customized_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_recommended_qfes_isSet = false;
    m_recommended_qfes_isValid = false;

    m_resolved_alerts_isSet = false;
    m_resolved_alerts_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_server_reported_monitoring_level_isSet = false;
    m_server_reported_monitoring_level_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_member_id_isSet = false;
    m_service_member_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIServiceMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceMember::fromJsonObject(QJsonObject json) {

    m_active_alerts_isValid = ::OpenAPI::fromJsonValue(m_active_alerts, json[QString("activeAlerts")]);
    m_active_alerts_isSet = !json[QString("activeAlerts")].isNull() && m_active_alerts_isValid;

    m_additional_information_isValid = ::OpenAPI::fromJsonValue(m_additional_information, json[QString("additionalInformation")]);
    m_additional_information_isSet = !json[QString("additionalInformation")].isNull() && m_additional_information_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_disabled_reason_isValid = ::OpenAPI::fromJsonValue(m_disabled_reason, json[QString("disabledReason")]);
    m_disabled_reason_isSet = !json[QString("disabledReason")].isNull() && m_disabled_reason_isValid;

    m_installed_qfes_isValid = ::OpenAPI::fromJsonValue(m_installed_qfes, json[QString("installedQfes")]);
    m_installed_qfes_isSet = !json[QString("installedQfes")].isNull() && m_installed_qfes_isValid;

    m_last_disabled_isValid = ::OpenAPI::fromJsonValue(m_last_disabled, json[QString("lastDisabled")]);
    m_last_disabled_isSet = !json[QString("lastDisabled")].isNull() && m_last_disabled_isValid;

    m_last_reboot_isValid = ::OpenAPI::fromJsonValue(m_last_reboot, json[QString("lastReboot")]);
    m_last_reboot_isSet = !json[QString("lastReboot")].isNull() && m_last_reboot_isValid;

    m_last_server_reported_monitoring_level_change_isValid = ::OpenAPI::fromJsonValue(m_last_server_reported_monitoring_level_change, json[QString("lastServerReportedMonitoringLevelChange")]);
    m_last_server_reported_monitoring_level_change_isSet = !json[QString("lastServerReportedMonitoringLevelChange")].isNull() && m_last_server_reported_monitoring_level_change_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_machine_id_isValid = ::OpenAPI::fromJsonValue(m_machine_id, json[QString("machineId")]);
    m_machine_id_isSet = !json[QString("machineId")].isNull() && m_machine_id_isValid;

    m_machine_name_isValid = ::OpenAPI::fromJsonValue(m_machine_name, json[QString("machineName")]);
    m_machine_name_isSet = !json[QString("machineName")].isNull() && m_machine_name_isValid;

    m_monitoring_configurations_computed_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configurations_computed, json[QString("monitoringConfigurationsComputed")]);
    m_monitoring_configurations_computed_isSet = !json[QString("monitoringConfigurationsComputed")].isNull() && m_monitoring_configurations_computed_isValid;

    m_monitoring_configurations_customized_isValid = ::OpenAPI::fromJsonValue(m_monitoring_configurations_customized, json[QString("monitoringConfigurationsCustomized")]);
    m_monitoring_configurations_customized_isSet = !json[QString("monitoringConfigurationsCustomized")].isNull() && m_monitoring_configurations_customized_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("osName")]);
    m_os_name_isSet = !json[QString("osName")].isNull() && m_os_name_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_recommended_qfes_isValid = ::OpenAPI::fromJsonValue(m_recommended_qfes, json[QString("recommendedQfes")]);
    m_recommended_qfes_isSet = !json[QString("recommendedQfes")].isNull() && m_recommended_qfes_isValid;

    m_resolved_alerts_isValid = ::OpenAPI::fromJsonValue(m_resolved_alerts, json[QString("resolvedAlerts")]);
    m_resolved_alerts_isSet = !json[QString("resolvedAlerts")].isNull() && m_resolved_alerts_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_server_reported_monitoring_level_isValid = ::OpenAPI::fromJsonValue(m_server_reported_monitoring_level, json[QString("serverReportedMonitoringLevel")]);
    m_server_reported_monitoring_level_isSet = !json[QString("serverReportedMonitoringLevel")].isNull() && m_server_reported_monitoring_level_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_member_id_isValid = ::OpenAPI::fromJsonValue(m_service_member_id, json[QString("serviceMemberId")]);
    m_service_member_id_isSet = !json[QString("serviceMemberId")].isNull() && m_service_member_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIServiceMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceMember::asJsonObject() const {
    QJsonObject obj;
    if (m_active_alerts_isSet) {
        obj.insert(QString("activeAlerts"), ::OpenAPI::toJsonValue(m_active_alerts));
    }
    if (m_additional_information_isSet) {
        obj.insert(QString("additionalInformation"), ::OpenAPI::toJsonValue(m_additional_information));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_dimensions_isSet) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_disabled_reason_isSet) {
        obj.insert(QString("disabledReason"), ::OpenAPI::toJsonValue(m_disabled_reason));
    }
    if (m_installed_qfes_isSet) {
        obj.insert(QString("installedQfes"), ::OpenAPI::toJsonValue(m_installed_qfes));
    }
    if (m_last_disabled_isSet) {
        obj.insert(QString("lastDisabled"), ::OpenAPI::toJsonValue(m_last_disabled));
    }
    if (m_last_reboot_isSet) {
        obj.insert(QString("lastReboot"), ::OpenAPI::toJsonValue(m_last_reboot));
    }
    if (m_last_server_reported_monitoring_level_change_isSet) {
        obj.insert(QString("lastServerReportedMonitoringLevelChange"), ::OpenAPI::toJsonValue(m_last_server_reported_monitoring_level_change));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_machine_id_isSet) {
        obj.insert(QString("machineId"), ::OpenAPI::toJsonValue(m_machine_id));
    }
    if (m_machine_name_isSet) {
        obj.insert(QString("machineName"), ::OpenAPI::toJsonValue(m_machine_name));
    }
    if (m_monitoring_configurations_computed_isSet) {
        obj.insert(QString("monitoringConfigurationsComputed"), ::OpenAPI::toJsonValue(m_monitoring_configurations_computed));
    }
    if (m_monitoring_configurations_customized_isSet) {
        obj.insert(QString("monitoringConfigurationsCustomized"), ::OpenAPI::toJsonValue(m_monitoring_configurations_customized));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("osName"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_recommended_qfes_isSet) {
        obj.insert(QString("recommendedQfes"), ::OpenAPI::toJsonValue(m_recommended_qfes));
    }
    if (m_resolved_alerts_isSet) {
        obj.insert(QString("resolvedAlerts"), ::OpenAPI::toJsonValue(m_resolved_alerts));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_server_reported_monitoring_level_isSet) {
        obj.insert(QString("serverReportedMonitoringLevel"), ::OpenAPI::toJsonValue(m_server_reported_monitoring_level));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_member_id_isSet) {
        obj.insert(QString("serviceMemberId"), ::OpenAPI::toJsonValue(m_service_member_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

qint32 OAIServiceMember::getActiveAlerts() const {
    return m_active_alerts;
}
void OAIServiceMember::setActiveAlerts(const qint32 &active_alerts) {
    m_active_alerts = active_alerts;
    m_active_alerts_isSet = true;
}

bool OAIServiceMember::is_active_alerts_Set() const{
    return m_active_alerts_isSet;
}

bool OAIServiceMember::is_active_alerts_Valid() const{
    return m_active_alerts_isValid;
}

QString OAIServiceMember::getAdditionalInformation() const {
    return m_additional_information;
}
void OAIServiceMember::setAdditionalInformation(const QString &additional_information) {
    m_additional_information = additional_information;
    m_additional_information_isSet = true;
}

bool OAIServiceMember::is_additional_information_Set() const{
    return m_additional_information_isSet;
}

bool OAIServiceMember::is_additional_information_Valid() const{
    return m_additional_information_isValid;
}

QDateTime OAIServiceMember::getCreatedDate() const {
    return m_created_date;
}
void OAIServiceMember::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIServiceMember::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIServiceMember::is_created_date_Valid() const{
    return m_created_date_isValid;
}

OAIObject OAIServiceMember::getDimensions() const {
    return m_dimensions;
}
void OAIServiceMember::setDimensions(const OAIObject &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIServiceMember::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIServiceMember::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

bool OAIServiceMember::isDisabled() const {
    return m_disabled;
}
void OAIServiceMember::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIServiceMember::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIServiceMember::is_disabled_Valid() const{
    return m_disabled_isValid;
}

qint32 OAIServiceMember::getDisabledReason() const {
    return m_disabled_reason;
}
void OAIServiceMember::setDisabledReason(const qint32 &disabled_reason) {
    m_disabled_reason = disabled_reason;
    m_disabled_reason_isSet = true;
}

bool OAIServiceMember::is_disabled_reason_Set() const{
    return m_disabled_reason_isSet;
}

bool OAIServiceMember::is_disabled_reason_Valid() const{
    return m_disabled_reason_isValid;
}

OAIObject OAIServiceMember::getInstalledQfes() const {
    return m_installed_qfes;
}
void OAIServiceMember::setInstalledQfes(const OAIObject &installed_qfes) {
    m_installed_qfes = installed_qfes;
    m_installed_qfes_isSet = true;
}

bool OAIServiceMember::is_installed_qfes_Set() const{
    return m_installed_qfes_isSet;
}

bool OAIServiceMember::is_installed_qfes_Valid() const{
    return m_installed_qfes_isValid;
}

QDateTime OAIServiceMember::getLastDisabled() const {
    return m_last_disabled;
}
void OAIServiceMember::setLastDisabled(const QDateTime &last_disabled) {
    m_last_disabled = last_disabled;
    m_last_disabled_isSet = true;
}

bool OAIServiceMember::is_last_disabled_Set() const{
    return m_last_disabled_isSet;
}

bool OAIServiceMember::is_last_disabled_Valid() const{
    return m_last_disabled_isValid;
}

QDateTime OAIServiceMember::getLastReboot() const {
    return m_last_reboot;
}
void OAIServiceMember::setLastReboot(const QDateTime &last_reboot) {
    m_last_reboot = last_reboot;
    m_last_reboot_isSet = true;
}

bool OAIServiceMember::is_last_reboot_Set() const{
    return m_last_reboot_isSet;
}

bool OAIServiceMember::is_last_reboot_Valid() const{
    return m_last_reboot_isValid;
}

QDateTime OAIServiceMember::getLastServerReportedMonitoringLevelChange() const {
    return m_last_server_reported_monitoring_level_change;
}
void OAIServiceMember::setLastServerReportedMonitoringLevelChange(const QDateTime &last_server_reported_monitoring_level_change) {
    m_last_server_reported_monitoring_level_change = last_server_reported_monitoring_level_change;
    m_last_server_reported_monitoring_level_change_isSet = true;
}

bool OAIServiceMember::is_last_server_reported_monitoring_level_change_Set() const{
    return m_last_server_reported_monitoring_level_change_isSet;
}

bool OAIServiceMember::is_last_server_reported_monitoring_level_change_Valid() const{
    return m_last_server_reported_monitoring_level_change_isValid;
}

QDateTime OAIServiceMember::getLastUpdated() const {
    return m_last_updated;
}
void OAIServiceMember::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIServiceMember::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIServiceMember::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIServiceMember::getMachineId() const {
    return m_machine_id;
}
void OAIServiceMember::setMachineId(const QString &machine_id) {
    m_machine_id = machine_id;
    m_machine_id_isSet = true;
}

bool OAIServiceMember::is_machine_id_Set() const{
    return m_machine_id_isSet;
}

bool OAIServiceMember::is_machine_id_Valid() const{
    return m_machine_id_isValid;
}

QString OAIServiceMember::getMachineName() const {
    return m_machine_name;
}
void OAIServiceMember::setMachineName(const QString &machine_name) {
    m_machine_name = machine_name;
    m_machine_name_isSet = true;
}

bool OAIServiceMember::is_machine_name_Set() const{
    return m_machine_name_isSet;
}

bool OAIServiceMember::is_machine_name_Valid() const{
    return m_machine_name_isValid;
}

OAIObject OAIServiceMember::getMonitoringConfigurationsComputed() const {
    return m_monitoring_configurations_computed;
}
void OAIServiceMember::setMonitoringConfigurationsComputed(const OAIObject &monitoring_configurations_computed) {
    m_monitoring_configurations_computed = monitoring_configurations_computed;
    m_monitoring_configurations_computed_isSet = true;
}

bool OAIServiceMember::is_monitoring_configurations_computed_Set() const{
    return m_monitoring_configurations_computed_isSet;
}

bool OAIServiceMember::is_monitoring_configurations_computed_Valid() const{
    return m_monitoring_configurations_computed_isValid;
}

OAIObject OAIServiceMember::getMonitoringConfigurationsCustomized() const {
    return m_monitoring_configurations_customized;
}
void OAIServiceMember::setMonitoringConfigurationsCustomized(const OAIObject &monitoring_configurations_customized) {
    m_monitoring_configurations_customized = monitoring_configurations_customized;
    m_monitoring_configurations_customized_isSet = true;
}

bool OAIServiceMember::is_monitoring_configurations_customized_Set() const{
    return m_monitoring_configurations_customized_isSet;
}

bool OAIServiceMember::is_monitoring_configurations_customized_Valid() const{
    return m_monitoring_configurations_customized_isValid;
}

QString OAIServiceMember::getOsName() const {
    return m_os_name;
}
void OAIServiceMember::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAIServiceMember::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAIServiceMember::is_os_name_Valid() const{
    return m_os_name_isValid;
}

QString OAIServiceMember::getOsVersion() const {
    return m_os_version;
}
void OAIServiceMember::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIServiceMember::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIServiceMember::is_os_version_Valid() const{
    return m_os_version_isValid;
}

OAIObject OAIServiceMember::getProperties() const {
    return m_properties;
}
void OAIServiceMember::setProperties(const OAIObject &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIServiceMember::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIServiceMember::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIObject OAIServiceMember::getRecommendedQfes() const {
    return m_recommended_qfes;
}
void OAIServiceMember::setRecommendedQfes(const OAIObject &recommended_qfes) {
    m_recommended_qfes = recommended_qfes;
    m_recommended_qfes_isSet = true;
}

bool OAIServiceMember::is_recommended_qfes_Set() const{
    return m_recommended_qfes_isSet;
}

bool OAIServiceMember::is_recommended_qfes_Valid() const{
    return m_recommended_qfes_isValid;
}

qint32 OAIServiceMember::getResolvedAlerts() const {
    return m_resolved_alerts;
}
void OAIServiceMember::setResolvedAlerts(const qint32 &resolved_alerts) {
    m_resolved_alerts = resolved_alerts;
    m_resolved_alerts_isSet = true;
}

bool OAIServiceMember::is_resolved_alerts_Set() const{
    return m_resolved_alerts_isSet;
}

bool OAIServiceMember::is_resolved_alerts_Valid() const{
    return m_resolved_alerts_isValid;
}

QString OAIServiceMember::getRole() const {
    return m_role;
}
void OAIServiceMember::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIServiceMember::is_role_Set() const{
    return m_role_isSet;
}

bool OAIServiceMember::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIServiceMember::getServerReportedMonitoringLevel() const {
    return m_server_reported_monitoring_level;
}
void OAIServiceMember::setServerReportedMonitoringLevel(const QString &server_reported_monitoring_level) {
    m_server_reported_monitoring_level = server_reported_monitoring_level;
    m_server_reported_monitoring_level_isSet = true;
}

bool OAIServiceMember::is_server_reported_monitoring_level_Set() const{
    return m_server_reported_monitoring_level_isSet;
}

bool OAIServiceMember::is_server_reported_monitoring_level_Valid() const{
    return m_server_reported_monitoring_level_isValid;
}

QString OAIServiceMember::getServiceId() const {
    return m_service_id;
}
void OAIServiceMember::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIServiceMember::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIServiceMember::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIServiceMember::getServiceMemberId() const {
    return m_service_member_id;
}
void OAIServiceMember::setServiceMemberId(const QString &service_member_id) {
    m_service_member_id = service_member_id;
    m_service_member_id_isSet = true;
}

bool OAIServiceMember::is_service_member_id_Set() const{
    return m_service_member_id_isSet;
}

bool OAIServiceMember::is_service_member_id_Valid() const{
    return m_service_member_id_isValid;
}

QString OAIServiceMember::getStatus() const {
    return m_status;
}
void OAIServiceMember::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServiceMember::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServiceMember::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIServiceMember::getTenantId() const {
    return m_tenant_id;
}
void OAIServiceMember::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIServiceMember::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIServiceMember::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIServiceMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_qfes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_reboot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_server_reported_monitoring_level_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_configurations_computed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_configurations_customized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_qfes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_reported_monitoring_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
