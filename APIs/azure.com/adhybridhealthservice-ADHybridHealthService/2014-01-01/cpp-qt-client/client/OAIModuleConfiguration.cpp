/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModuleConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModuleConfiguration::OAIModuleConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModuleConfiguration::OAIModuleConfiguration() {
    this->initializeModel();
}

OAIModuleConfiguration::~OAIModuleConfiguration() {}

void OAIModuleConfiguration::initializeModel() {

    m_agent_service_isSet = false;
    m_agent_service_isValid = false;

    m_module_name_isSet = false;
    m_module_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIModuleConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModuleConfiguration::fromJsonObject(QJsonObject json) {

    m_agent_service_isValid = ::OpenAPI::fromJsonValue(m_agent_service, json[QString("agentService")]);
    m_agent_service_isSet = !json[QString("agentService")].isNull() && m_agent_service_isValid;

    m_module_name_isValid = ::OpenAPI::fromJsonValue(m_module_name, json[QString("moduleName")]);
    m_module_name_isSet = !json[QString("moduleName")].isNull() && m_module_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIModuleConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModuleConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_service_isSet) {
        obj.insert(QString("agentService"), ::OpenAPI::toJsonValue(m_agent_service));
    }
    if (m_module_name_isSet) {
        obj.insert(QString("moduleName"), ::OpenAPI::toJsonValue(m_module_name));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAIModuleConfiguration::getAgentService() const {
    return m_agent_service;
}
void OAIModuleConfiguration::setAgentService(const QString &agent_service) {
    m_agent_service = agent_service;
    m_agent_service_isSet = true;
}

bool OAIModuleConfiguration::is_agent_service_Set() const{
    return m_agent_service_isSet;
}

bool OAIModuleConfiguration::is_agent_service_Valid() const{
    return m_agent_service_isValid;
}

QString OAIModuleConfiguration::getModuleName() const {
    return m_module_name;
}
void OAIModuleConfiguration::setModuleName(const QString &module_name) {
    m_module_name = module_name;
    m_module_name_isSet = true;
}

bool OAIModuleConfiguration::is_module_name_Set() const{
    return m_module_name_isSet;
}

bool OAIModuleConfiguration::is_module_name_Valid() const{
    return m_module_name_isValid;
}

QMap<QString, QString> OAIModuleConfiguration::getProperties() const {
    return m_properties;
}
void OAIModuleConfiguration::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIModuleConfiguration::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIModuleConfiguration::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIModuleConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_module_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModuleConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
