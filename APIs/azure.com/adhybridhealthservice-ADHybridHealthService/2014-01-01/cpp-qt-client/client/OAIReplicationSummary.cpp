/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationSummary::OAIReplicationSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationSummary::OAIReplicationSummary() {
    this->initializeModel();
}

OAIReplicationSummary::~OAIReplicationSummary() {}

void OAIReplicationSummary::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_inbound_neighbor_collection_isSet = false;
    m_inbound_neighbor_collection_isValid = false;

    m_last_attempted_sync_isSet = false;
    m_last_attempted_sync_isValid = false;

    m_last_successful_sync_isSet = false;
    m_last_successful_sync_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_server_isSet = false;
    m_target_server_isValid = false;
}

void OAIReplicationSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationSummary::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_inbound_neighbor_collection_isValid = ::OpenAPI::fromJsonValue(m_inbound_neighbor_collection, json[QString("inboundNeighborCollection")]);
    m_inbound_neighbor_collection_isSet = !json[QString("inboundNeighborCollection")].isNull() && m_inbound_neighbor_collection_isValid;

    m_last_attempted_sync_isValid = ::OpenAPI::fromJsonValue(m_last_attempted_sync, json[QString("lastAttemptedSync")]);
    m_last_attempted_sync_isSet = !json[QString("lastAttemptedSync")].isNull() && m_last_attempted_sync_isValid;

    m_last_successful_sync_isValid = ::OpenAPI::fromJsonValue(m_last_successful_sync, json[QString("lastSuccessfulSync")]);
    m_last_successful_sync_isSet = !json[QString("lastSuccessfulSync")].isNull() && m_last_successful_sync_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_server_isValid = ::OpenAPI::fromJsonValue(m_target_server, json[QString("targetServer")]);
    m_target_server_isSet = !json[QString("targetServer")].isNull() && m_target_server_isValid;
}

QString OAIReplicationSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_inbound_neighbor_collection.size() > 0) {
        obj.insert(QString("inboundNeighborCollection"), ::OpenAPI::toJsonValue(m_inbound_neighbor_collection));
    }
    if (m_last_attempted_sync_isSet) {
        obj.insert(QString("lastAttemptedSync"), ::OpenAPI::toJsonValue(m_last_attempted_sync));
    }
    if (m_last_successful_sync_isSet) {
        obj.insert(QString("lastSuccessfulSync"), ::OpenAPI::toJsonValue(m_last_successful_sync));
    }
    if (m_site_isSet) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_server_isSet) {
        obj.insert(QString("targetServer"), ::OpenAPI::toJsonValue(m_target_server));
    }
    return obj;
}

QString OAIReplicationSummary::getDomain() const {
    return m_domain;
}
void OAIReplicationSummary::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIReplicationSummary::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIReplicationSummary::is_domain_Valid() const{
    return m_domain_isValid;
}

QList<OAIInboundReplicationNeighbor> OAIReplicationSummary::getInboundNeighborCollection() const {
    return m_inbound_neighbor_collection;
}
void OAIReplicationSummary::setInboundNeighborCollection(const QList<OAIInboundReplicationNeighbor> &inbound_neighbor_collection) {
    m_inbound_neighbor_collection = inbound_neighbor_collection;
    m_inbound_neighbor_collection_isSet = true;
}

bool OAIReplicationSummary::is_inbound_neighbor_collection_Set() const{
    return m_inbound_neighbor_collection_isSet;
}

bool OAIReplicationSummary::is_inbound_neighbor_collection_Valid() const{
    return m_inbound_neighbor_collection_isValid;
}

QDateTime OAIReplicationSummary::getLastAttemptedSync() const {
    return m_last_attempted_sync;
}
void OAIReplicationSummary::setLastAttemptedSync(const QDateTime &last_attempted_sync) {
    m_last_attempted_sync = last_attempted_sync;
    m_last_attempted_sync_isSet = true;
}

bool OAIReplicationSummary::is_last_attempted_sync_Set() const{
    return m_last_attempted_sync_isSet;
}

bool OAIReplicationSummary::is_last_attempted_sync_Valid() const{
    return m_last_attempted_sync_isValid;
}

QDateTime OAIReplicationSummary::getLastSuccessfulSync() const {
    return m_last_successful_sync;
}
void OAIReplicationSummary::setLastSuccessfulSync(const QDateTime &last_successful_sync) {
    m_last_successful_sync = last_successful_sync;
    m_last_successful_sync_isSet = true;
}

bool OAIReplicationSummary::is_last_successful_sync_Set() const{
    return m_last_successful_sync_isSet;
}

bool OAIReplicationSummary::is_last_successful_sync_Valid() const{
    return m_last_successful_sync_isValid;
}

QString OAIReplicationSummary::getSite() const {
    return m_site;
}
void OAIReplicationSummary::setSite(const QString &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIReplicationSummary::is_site_Set() const{
    return m_site_isSet;
}

bool OAIReplicationSummary::is_site_Valid() const{
    return m_site_isValid;
}

qint32 OAIReplicationSummary::getStatus() const {
    return m_status;
}
void OAIReplicationSummary::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReplicationSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReplicationSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIReplicationSummary::getTargetServer() const {
    return m_target_server;
}
void OAIReplicationSummary::setTargetServer(const QString &target_server) {
    m_target_server = target_server;
    m_target_server_isSet = true;
}

bool OAIReplicationSummary::is_target_server_Set() const{
    return m_target_server_isSet;
}

bool OAIReplicationSummary::is_target_server_Valid() const{
    return m_target_server_isValid;
}

bool OAIReplicationSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_neighbor_collection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_attempted_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
