/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalConfiguration::OAIGlobalConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalConfiguration::OAIGlobalConfiguration() {
    this->initializeModel();
}

OAIGlobalConfiguration::~OAIGlobalConfiguration() {}

void OAIGlobalConfiguration::initializeModel() {

    m_feature_set_isSet = false;
    m_feature_set_isValid = false;

    m_num_saved_pwd_event_isSet = false;
    m_num_saved_pwd_event_isValid = false;

    m_password_sync_enabled_isSet = false;
    m_password_sync_enabled_isValid = false;

    m_schema_xml_isSet = false;
    m_schema_xml_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIGlobalConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalConfiguration::fromJsonObject(QJsonObject json) {

    m_feature_set_isValid = ::OpenAPI::fromJsonValue(m_feature_set, json[QString("featureSet")]);
    m_feature_set_isSet = !json[QString("featureSet")].isNull() && m_feature_set_isValid;

    m_num_saved_pwd_event_isValid = ::OpenAPI::fromJsonValue(m_num_saved_pwd_event, json[QString("numSavedPwdEvent")]);
    m_num_saved_pwd_event_isSet = !json[QString("numSavedPwdEvent")].isNull() && m_num_saved_pwd_event_isValid;

    m_password_sync_enabled_isValid = ::OpenAPI::fromJsonValue(m_password_sync_enabled, json[QString("passwordSyncEnabled")]);
    m_password_sync_enabled_isSet = !json[QString("passwordSyncEnabled")].isNull() && m_password_sync_enabled_isValid;

    m_schema_xml_isValid = ::OpenAPI::fromJsonValue(m_schema_xml, json[QString("schemaXml")]);
    m_schema_xml_isSet = !json[QString("schemaXml")].isNull() && m_schema_xml_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIGlobalConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_set.size() > 0) {
        obj.insert(QString("featureSet"), ::OpenAPI::toJsonValue(m_feature_set));
    }
    if (m_num_saved_pwd_event_isSet) {
        obj.insert(QString("numSavedPwdEvent"), ::OpenAPI::toJsonValue(m_num_saved_pwd_event));
    }
    if (m_password_sync_enabled_isSet) {
        obj.insert(QString("passwordSyncEnabled"), ::OpenAPI::toJsonValue(m_password_sync_enabled));
    }
    if (m_schema_xml_isSet) {
        obj.insert(QString("schemaXml"), ::OpenAPI::toJsonValue(m_schema_xml));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIItem> OAIGlobalConfiguration::getFeatureSet() const {
    return m_feature_set;
}
void OAIGlobalConfiguration::setFeatureSet(const QList<OAIItem> &feature_set) {
    m_feature_set = feature_set;
    m_feature_set_isSet = true;
}

bool OAIGlobalConfiguration::is_feature_set_Set() const{
    return m_feature_set_isSet;
}

bool OAIGlobalConfiguration::is_feature_set_Valid() const{
    return m_feature_set_isValid;
}

qint32 OAIGlobalConfiguration::getNumSavedPwdEvent() const {
    return m_num_saved_pwd_event;
}
void OAIGlobalConfiguration::setNumSavedPwdEvent(const qint32 &num_saved_pwd_event) {
    m_num_saved_pwd_event = num_saved_pwd_event;
    m_num_saved_pwd_event_isSet = true;
}

bool OAIGlobalConfiguration::is_num_saved_pwd_event_Set() const{
    return m_num_saved_pwd_event_isSet;
}

bool OAIGlobalConfiguration::is_num_saved_pwd_event_Valid() const{
    return m_num_saved_pwd_event_isValid;
}

bool OAIGlobalConfiguration::isPasswordSyncEnabled() const {
    return m_password_sync_enabled;
}
void OAIGlobalConfiguration::setPasswordSyncEnabled(const bool &password_sync_enabled) {
    m_password_sync_enabled = password_sync_enabled;
    m_password_sync_enabled_isSet = true;
}

bool OAIGlobalConfiguration::is_password_sync_enabled_Set() const{
    return m_password_sync_enabled_isSet;
}

bool OAIGlobalConfiguration::is_password_sync_enabled_Valid() const{
    return m_password_sync_enabled_isValid;
}

QString OAIGlobalConfiguration::getSchemaXml() const {
    return m_schema_xml;
}
void OAIGlobalConfiguration::setSchemaXml(const QString &schema_xml) {
    m_schema_xml = schema_xml;
    m_schema_xml_isSet = true;
}

bool OAIGlobalConfiguration::is_schema_xml_Set() const{
    return m_schema_xml_isSet;
}

bool OAIGlobalConfiguration::is_schema_xml_Valid() const{
    return m_schema_xml_isValid;
}

qint32 OAIGlobalConfiguration::getVersion() const {
    return m_version;
}
void OAIGlobalConfiguration::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGlobalConfiguration::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGlobalConfiguration::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIGlobalConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_saved_pwd_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_sync_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
