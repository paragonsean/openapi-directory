/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorObjectError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorObjectError::OAIConnectorObjectError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorObjectError::OAIConnectorObjectError() {
    this->initializeModel();
}

OAIConnectorObjectError::~OAIConnectorObjectError() {}

void OAIConnectorObjectError::initializeModel() {

    m_anchor_isSet = false;
    m_anchor_isValid = false;

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;

    m_column_number_isSet = false;
    m_column_number_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_dn_isSet = false;
    m_dn_isValid = false;

    m_entry_number_isSet = false;
    m_entry_number_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_line_number_isSet = false;
    m_line_number_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_run_step_result_id_isSet = false;
    m_run_step_result_id_isValid = false;

    m_server_error_detail_isSet = false;
    m_server_error_detail_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIConnectorObjectError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorObjectError::fromJsonObject(QJsonObject json) {

    m_anchor_isValid = ::OpenAPI::fromJsonValue(m_anchor, json[QString("anchor")]);
    m_anchor_isSet = !json[QString("anchor")].isNull() && m_anchor_isValid;

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("attributeName")]);
    m_attribute_name_isSet = !json[QString("attributeName")].isNull() && m_attribute_name_isValid;

    m_column_number_isValid = ::OpenAPI::fromJsonValue(m_column_number, json[QString("columnNumber")]);
    m_column_number_isSet = !json[QString("columnNumber")].isNull() && m_column_number_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_dn_isValid = ::OpenAPI::fromJsonValue(m_dn, json[QString("dn")]);
    m_dn_isSet = !json[QString("dn")].isNull() && m_dn_isValid;

    m_entry_number_isValid = ::OpenAPI::fromJsonValue(m_entry_number, json[QString("entryNumber")]);
    m_entry_number_isSet = !json[QString("entryNumber")].isNull() && m_entry_number_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_line_number_isValid = ::OpenAPI::fromJsonValue(m_line_number, json[QString("lineNumber")]);
    m_line_number_isSet = !json[QString("lineNumber")].isNull() && m_line_number_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_run_step_result_id_isValid = ::OpenAPI::fromJsonValue(m_run_step_result_id, json[QString("runStepResultId")]);
    m_run_step_result_id_isSet = !json[QString("runStepResultId")].isNull() && m_run_step_result_id_isValid;

    m_server_error_detail_isValid = ::OpenAPI::fromJsonValue(m_server_error_detail, json[QString("serverErrorDetail")]);
    m_server_error_detail_isSet = !json[QString("serverErrorDetail")].isNull() && m_server_error_detail_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIConnectorObjectError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorObjectError::asJsonObject() const {
    QJsonObject obj;
    if (m_anchor_isSet) {
        obj.insert(QString("anchor"), ::OpenAPI::toJsonValue(m_anchor));
    }
    if (m_attribute_name_isSet) {
        obj.insert(QString("attributeName"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    if (m_column_number_isSet) {
        obj.insert(QString("columnNumber"), ::OpenAPI::toJsonValue(m_column_number));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_dn_isSet) {
        obj.insert(QString("dn"), ::OpenAPI::toJsonValue(m_dn));
    }
    if (m_entry_number_isSet) {
        obj.insert(QString("entryNumber"), ::OpenAPI::toJsonValue(m_entry_number));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_line_number_isSet) {
        obj.insert(QString("lineNumber"), ::OpenAPI::toJsonValue(m_line_number));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_run_step_result_id_isSet) {
        obj.insert(QString("runStepResultId"), ::OpenAPI::toJsonValue(m_run_step_result_id));
    }
    if (m_server_error_detail_isSet) {
        obj.insert(QString("serverErrorDetail"), ::OpenAPI::toJsonValue(m_server_error_detail));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIConnectorObjectError::getAnchor() const {
    return m_anchor;
}
void OAIConnectorObjectError::setAnchor(const QString &anchor) {
    m_anchor = anchor;
    m_anchor_isSet = true;
}

bool OAIConnectorObjectError::is_anchor_Set() const{
    return m_anchor_isSet;
}

bool OAIConnectorObjectError::is_anchor_Valid() const{
    return m_anchor_isValid;
}

QString OAIConnectorObjectError::getAttributeName() const {
    return m_attribute_name;
}
void OAIConnectorObjectError::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAIConnectorObjectError::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAIConnectorObjectError::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

qint32 OAIConnectorObjectError::getColumnNumber() const {
    return m_column_number;
}
void OAIConnectorObjectError::setColumnNumber(const qint32 &column_number) {
    m_column_number = column_number;
    m_column_number_isSet = true;
}

bool OAIConnectorObjectError::is_column_number_Set() const{
    return m_column_number_isSet;
}

bool OAIConnectorObjectError::is_column_number_Valid() const{
    return m_column_number_isValid;
}

QString OAIConnectorObjectError::getConnectorId() const {
    return m_connector_id;
}
void OAIConnectorObjectError::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIConnectorObjectError::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIConnectorObjectError::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIConnectorObjectError::getDn() const {
    return m_dn;
}
void OAIConnectorObjectError::setDn(const QString &dn) {
    m_dn = dn;
    m_dn_isSet = true;
}

bool OAIConnectorObjectError::is_dn_Set() const{
    return m_dn_isSet;
}

bool OAIConnectorObjectError::is_dn_Valid() const{
    return m_dn_isValid;
}

qint32 OAIConnectorObjectError::getEntryNumber() const {
    return m_entry_number;
}
void OAIConnectorObjectError::setEntryNumber(const qint32 &entry_number) {
    m_entry_number = entry_number;
    m_entry_number_isSet = true;
}

bool OAIConnectorObjectError::is_entry_number_Set() const{
    return m_entry_number_isSet;
}

bool OAIConnectorObjectError::is_entry_number_Valid() const{
    return m_entry_number_isValid;
}

QString OAIConnectorObjectError::getErrorCode() const {
    return m_error_code;
}
void OAIConnectorObjectError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIConnectorObjectError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIConnectorObjectError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIConnectorObjectError::getId() const {
    return m_id;
}
void OAIConnectorObjectError::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConnectorObjectError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConnectorObjectError::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIConnectorObjectError::getLineNumber() const {
    return m_line_number;
}
void OAIConnectorObjectError::setLineNumber(const qint32 &line_number) {
    m_line_number = line_number;
    m_line_number_isSet = true;
}

bool OAIConnectorObjectError::is_line_number_Set() const{
    return m_line_number_isSet;
}

bool OAIConnectorObjectError::is_line_number_Valid() const{
    return m_line_number_isValid;
}

QString OAIConnectorObjectError::getMessage() const {
    return m_message;
}
void OAIConnectorObjectError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIConnectorObjectError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIConnectorObjectError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIConnectorObjectError::getRunStepResultId() const {
    return m_run_step_result_id;
}
void OAIConnectorObjectError::setRunStepResultId(const QString &run_step_result_id) {
    m_run_step_result_id = run_step_result_id;
    m_run_step_result_id_isSet = true;
}

bool OAIConnectorObjectError::is_run_step_result_id_Set() const{
    return m_run_step_result_id_isSet;
}

bool OAIConnectorObjectError::is_run_step_result_id_Valid() const{
    return m_run_step_result_id_isValid;
}

QString OAIConnectorObjectError::getServerErrorDetail() const {
    return m_server_error_detail;
}
void OAIConnectorObjectError::setServerErrorDetail(const QString &server_error_detail) {
    m_server_error_detail = server_error_detail;
    m_server_error_detail_isSet = true;
}

bool OAIConnectorObjectError::is_server_error_detail_Set() const{
    return m_server_error_detail_isSet;
}

bool OAIConnectorObjectError::is_server_error_detail_Valid() const{
    return m_server_error_detail_isValid;
}

QString OAIConnectorObjectError::getType() const {
    return m_type;
}
void OAIConnectorObjectError::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConnectorObjectError::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConnectorObjectError::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAIConnectorObjectError::getValues() const {
    return m_values;
}
void OAIConnectorObjectError::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIConnectorObjectError::is_values_Set() const{
    return m_values_isSet;
}

bool OAIConnectorObjectError::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIConnectorObjectError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anchor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_step_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_error_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorObjectError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
