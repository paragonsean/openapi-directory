/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITabularExportError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITabularExportError::OAITabularExportError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITabularExportError::OAITabularExportError() {
    this->initializeModel();
}

OAITabularExportError::~OAITabularExportError() {}

void OAITabularExportError::initializeModel() {

    m_merged_entity_id_isSet = false;
    m_merged_entity_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_member_id_isSet = false;
    m_service_member_id_isValid = false;

    m_tabular_export_error_data_isSet = false;
    m_tabular_export_error_data_isValid = false;
}

void OAITabularExportError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITabularExportError::fromJsonObject(QJsonObject json) {

    m_merged_entity_id_isValid = ::OpenAPI::fromJsonValue(m_merged_entity_id, json[QString("mergedEntityId")]);
    m_merged_entity_id_isSet = !json[QString("mergedEntityId")].isNull() && m_merged_entity_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_member_id_isValid = ::OpenAPI::fromJsonValue(m_service_member_id, json[QString("serviceMemberId")]);
    m_service_member_id_isSet = !json[QString("serviceMemberId")].isNull() && m_service_member_id_isValid;

    m_tabular_export_error_data_isValid = ::OpenAPI::fromJsonValue(m_tabular_export_error_data, json[QString("tabularExportErrorData")]);
    m_tabular_export_error_data_isSet = !json[QString("tabularExportErrorData")].isNull() && m_tabular_export_error_data_isValid;
}

QString OAITabularExportError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITabularExportError::asJsonObject() const {
    QJsonObject obj;
    if (m_merged_entity_id_isSet) {
        obj.insert(QString("mergedEntityId"), ::OpenAPI::toJsonValue(m_merged_entity_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_member_id_isSet) {
        obj.insert(QString("serviceMemberId"), ::OpenAPI::toJsonValue(m_service_member_id));
    }
    if (m_tabular_export_error_data_isSet) {
        obj.insert(QString("tabularExportErrorData"), ::OpenAPI::toJsonValue(m_tabular_export_error_data));
    }
    return obj;
}

QString OAITabularExportError::getMergedEntityId() const {
    return m_merged_entity_id;
}
void OAITabularExportError::setMergedEntityId(const QString &merged_entity_id) {
    m_merged_entity_id = merged_entity_id;
    m_merged_entity_id_isSet = true;
}

bool OAITabularExportError::is_merged_entity_id_Set() const{
    return m_merged_entity_id_isSet;
}

bool OAITabularExportError::is_merged_entity_id_Valid() const{
    return m_merged_entity_id_isValid;
}

QString OAITabularExportError::getServiceId() const {
    return m_service_id;
}
void OAITabularExportError::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAITabularExportError::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAITabularExportError::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAITabularExportError::getServiceMemberId() const {
    return m_service_member_id;
}
void OAITabularExportError::setServiceMemberId(const QString &service_member_id) {
    m_service_member_id = service_member_id;
    m_service_member_id_isSet = true;
}

bool OAITabularExportError::is_service_member_id_Set() const{
    return m_service_member_id_isSet;
}

bool OAITabularExportError::is_service_member_id_Valid() const{
    return m_service_member_id_isValid;
}

QString OAITabularExportError::getTabularExportErrorData() const {
    return m_tabular_export_error_data;
}
void OAITabularExportError::setTabularExportErrorData(const QString &tabular_export_error_data) {
    m_tabular_export_error_data = tabular_export_error_data;
    m_tabular_export_error_data_isSet = true;
}

bool OAITabularExportError::is_tabular_export_error_data_Set() const{
    return m_tabular_export_error_data_isSet;
}

bool OAITabularExportError::is_tabular_export_error_data_Valid() const{
    return m_tabular_export_error_data_isValid;
}

bool OAITabularExportError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merged_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tabular_export_error_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITabularExportError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
