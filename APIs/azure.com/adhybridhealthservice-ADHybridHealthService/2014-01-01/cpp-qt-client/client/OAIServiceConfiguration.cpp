/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceConfiguration::OAIServiceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceConfiguration::OAIServiceConfiguration() {
    this->initializeModel();
}

OAIServiceConfiguration::~OAIServiceConfiguration() {}

void OAIServiceConfiguration::initializeModel() {

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_sql_database_name_isSet = false;
    m_sql_database_name_isValid = false;

    m_sql_database_size_isSet = false;
    m_sql_database_size_isValid = false;

    m_sql_edition_isSet = false;
    m_sql_edition_isValid = false;

    m_sql_instance_isSet = false;
    m_sql_instance_isValid = false;

    m_sql_server_isSet = false;
    m_sql_server_isValid = false;

    m_sql_version_isSet = false;
    m_sql_version_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIServiceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceConfiguration::fromJsonObject(QJsonObject json) {

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("serviceType")]);
    m_service_type_isSet = !json[QString("serviceType")].isNull() && m_service_type_isValid;

    m_sql_database_name_isValid = ::OpenAPI::fromJsonValue(m_sql_database_name, json[QString("sqlDatabaseName")]);
    m_sql_database_name_isSet = !json[QString("sqlDatabaseName")].isNull() && m_sql_database_name_isValid;

    m_sql_database_size_isValid = ::OpenAPI::fromJsonValue(m_sql_database_size, json[QString("sqlDatabaseSize")]);
    m_sql_database_size_isSet = !json[QString("sqlDatabaseSize")].isNull() && m_sql_database_size_isValid;

    m_sql_edition_isValid = ::OpenAPI::fromJsonValue(m_sql_edition, json[QString("sqlEdition")]);
    m_sql_edition_isSet = !json[QString("sqlEdition")].isNull() && m_sql_edition_isValid;

    m_sql_instance_isValid = ::OpenAPI::fromJsonValue(m_sql_instance, json[QString("sqlInstance")]);
    m_sql_instance_isSet = !json[QString("sqlInstance")].isNull() && m_sql_instance_isValid;

    m_sql_server_isValid = ::OpenAPI::fromJsonValue(m_sql_server, json[QString("sqlServer")]);
    m_sql_server_isSet = !json[QString("sqlServer")].isNull() && m_sql_server_isValid;

    m_sql_version_isValid = ::OpenAPI::fromJsonValue(m_sql_version, json[QString("sqlVersion")]);
    m_sql_version_isSet = !json[QString("sqlVersion")].isNull() && m_sql_version_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIServiceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_service_type_isSet) {
        obj.insert(QString("serviceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_sql_database_name_isSet) {
        obj.insert(QString("sqlDatabaseName"), ::OpenAPI::toJsonValue(m_sql_database_name));
    }
    if (m_sql_database_size_isSet) {
        obj.insert(QString("sqlDatabaseSize"), ::OpenAPI::toJsonValue(m_sql_database_size));
    }
    if (m_sql_edition_isSet) {
        obj.insert(QString("sqlEdition"), ::OpenAPI::toJsonValue(m_sql_edition));
    }
    if (m_sql_instance_isSet) {
        obj.insert(QString("sqlInstance"), ::OpenAPI::toJsonValue(m_sql_instance));
    }
    if (m_sql_server_isSet) {
        obj.insert(QString("sqlServer"), ::OpenAPI::toJsonValue(m_sql_server));
    }
    if (m_sql_version_isSet) {
        obj.insert(QString("sqlVersion"), ::OpenAPI::toJsonValue(m_sql_version));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIServiceConfiguration::getServiceAccount() const {
    return m_service_account;
}
void OAIServiceConfiguration::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAIServiceConfiguration::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAIServiceConfiguration::is_service_account_Valid() const{
    return m_service_account_isValid;
}

qint32 OAIServiceConfiguration::getServiceType() const {
    return m_service_type;
}
void OAIServiceConfiguration::setServiceType(const qint32 &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAIServiceConfiguration::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAIServiceConfiguration::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QString OAIServiceConfiguration::getSqlDatabaseName() const {
    return m_sql_database_name;
}
void OAIServiceConfiguration::setSqlDatabaseName(const QString &sql_database_name) {
    m_sql_database_name = sql_database_name;
    m_sql_database_name_isSet = true;
}

bool OAIServiceConfiguration::is_sql_database_name_Set() const{
    return m_sql_database_name_isSet;
}

bool OAIServiceConfiguration::is_sql_database_name_Valid() const{
    return m_sql_database_name_isValid;
}

qint32 OAIServiceConfiguration::getSqlDatabaseSize() const {
    return m_sql_database_size;
}
void OAIServiceConfiguration::setSqlDatabaseSize(const qint32 &sql_database_size) {
    m_sql_database_size = sql_database_size;
    m_sql_database_size_isSet = true;
}

bool OAIServiceConfiguration::is_sql_database_size_Set() const{
    return m_sql_database_size_isSet;
}

bool OAIServiceConfiguration::is_sql_database_size_Valid() const{
    return m_sql_database_size_isValid;
}

QString OAIServiceConfiguration::getSqlEdition() const {
    return m_sql_edition;
}
void OAIServiceConfiguration::setSqlEdition(const QString &sql_edition) {
    m_sql_edition = sql_edition;
    m_sql_edition_isSet = true;
}

bool OAIServiceConfiguration::is_sql_edition_Set() const{
    return m_sql_edition_isSet;
}

bool OAIServiceConfiguration::is_sql_edition_Valid() const{
    return m_sql_edition_isValid;
}

QString OAIServiceConfiguration::getSqlInstance() const {
    return m_sql_instance;
}
void OAIServiceConfiguration::setSqlInstance(const QString &sql_instance) {
    m_sql_instance = sql_instance;
    m_sql_instance_isSet = true;
}

bool OAIServiceConfiguration::is_sql_instance_Set() const{
    return m_sql_instance_isSet;
}

bool OAIServiceConfiguration::is_sql_instance_Valid() const{
    return m_sql_instance_isValid;
}

QString OAIServiceConfiguration::getSqlServer() const {
    return m_sql_server;
}
void OAIServiceConfiguration::setSqlServer(const QString &sql_server) {
    m_sql_server = sql_server;
    m_sql_server_isSet = true;
}

bool OAIServiceConfiguration::is_sql_server_Set() const{
    return m_sql_server_isSet;
}

bool OAIServiceConfiguration::is_sql_server_Valid() const{
    return m_sql_server_isValid;
}

QString OAIServiceConfiguration::getSqlVersion() const {
    return m_sql_version;
}
void OAIServiceConfiguration::setSqlVersion(const QString &sql_version) {
    m_sql_version = sql_version;
    m_sql_version_isSet = true;
}

bool OAIServiceConfiguration::is_sql_version_Set() const{
    return m_sql_version_isSet;
}

bool OAIServiceConfiguration::is_sql_version_Valid() const{
    return m_sql_version_isValid;
}

QString OAIServiceConfiguration::getVersion() const {
    return m_version;
}
void OAIServiceConfiguration::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIServiceConfiguration::is_version_Set() const{
    return m_version_isSet;
}

bool OAIServiceConfiguration::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIServiceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_database_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
