/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPasswordManagementSettings.h
 *
 * The password management settings.
 */

#ifndef OAIPasswordManagementSettings_H
#define OAIPasswordManagementSettings_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPasswordManagementSettings : public OAIObject {
public:
    OAIPasswordManagementSettings();
    OAIPasswordManagementSettings(QString json);
    ~OAIPasswordManagementSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectTo() const;
    void setConnectTo(const QString &connect_to);
    bool is_connect_to_Set() const;
    bool is_connect_to_Valid() const;

    qint32 getConnectionTimeout() const;
    void setConnectionTimeout(const qint32 &connection_timeout);
    bool is_connection_timeout_Set() const;
    bool is_connection_timeout_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getExtensionFilePath() const;
    void setExtensionFilePath(const QString &extension_file_path);
    bool is_extension_file_path_Set() const;
    bool is_extension_file_path_Valid() const;

    qint32 getMaximumRetryCount() const;
    void setMaximumRetryCount(const qint32 &maximum_retry_count);
    bool is_maximum_retry_count_Set() const;
    bool is_maximum_retry_count_Valid() const;

    bool isRequiresSecureConnection() const;
    void setRequiresSecureConnection(const bool &requires_secure_connection);
    bool is_requires_secure_connection_Set() const;
    bool is_requires_secure_connection_Valid() const;

    qint32 getRetryIntervalInSeconds() const;
    void setRetryIntervalInSeconds(const qint32 &retry_interval_in_seconds);
    bool is_retry_interval_in_seconds_Set() const;
    bool is_retry_interval_in_seconds_Valid() const;

    QString getSupportedPasswordOperations() const;
    void setSupportedPasswordOperations(const QString &supported_password_operations);
    bool is_supported_password_operations_Set() const;
    bool is_supported_password_operations_Valid() const;

    bool isUnlockAccount() const;
    void setUnlockAccount(const bool &unlock_account);
    bool is_unlock_account_Set() const;
    bool is_unlock_account_Valid() const;

    QString getUser() const;
    void setUser(const QString &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connect_to;
    bool m_connect_to_isSet;
    bool m_connect_to_isValid;

    qint32 m_connection_timeout;
    bool m_connection_timeout_isSet;
    bool m_connection_timeout_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_extension_file_path;
    bool m_extension_file_path_isSet;
    bool m_extension_file_path_isValid;

    qint32 m_maximum_retry_count;
    bool m_maximum_retry_count_isSet;
    bool m_maximum_retry_count_isValid;

    bool m_requires_secure_connection;
    bool m_requires_secure_connection_isSet;
    bool m_requires_secure_connection_isValid;

    qint32 m_retry_interval_in_seconds;
    bool m_retry_interval_in_seconds_isSet;
    bool m_retry_interval_in_seconds_isValid;

    QString m_supported_password_operations;
    bool m_supported_password_operations_isSet;
    bool m_supported_password_operations_isValid;

    bool m_unlock_account;
    bool m_unlock_account_isSet;
    bool m_unlock_account_isValid;

    QString m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPasswordManagementSettings)

#endif // OAIPasswordManagementSettings_H
