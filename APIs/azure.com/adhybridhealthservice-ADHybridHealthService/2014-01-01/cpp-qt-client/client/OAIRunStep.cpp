/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunStep::OAIRunStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunStep::OAIRunStep() {
    this->initializeModel();
}

OAIRunStep::~OAIRunStep() {}

void OAIRunStep::initializeModel() {

    m_batch_size_isSet = false;
    m_batch_size_isValid = false;

    m_object_delete_limit_isSet = false;
    m_object_delete_limit_isValid = false;

    m_object_process_limit_isSet = false;
    m_object_process_limit_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_partition_id_isSet = false;
    m_partition_id_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIRunStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunStep::fromJsonObject(QJsonObject json) {

    m_batch_size_isValid = ::OpenAPI::fromJsonValue(m_batch_size, json[QString("batchSize")]);
    m_batch_size_isSet = !json[QString("batchSize")].isNull() && m_batch_size_isValid;

    m_object_delete_limit_isValid = ::OpenAPI::fromJsonValue(m_object_delete_limit, json[QString("objectDeleteLimit")]);
    m_object_delete_limit_isSet = !json[QString("objectDeleteLimit")].isNull() && m_object_delete_limit_isValid;

    m_object_process_limit_isValid = ::OpenAPI::fromJsonValue(m_object_process_limit, json[QString("objectProcessLimit")]);
    m_object_process_limit_isSet = !json[QString("objectProcessLimit")].isNull() && m_object_process_limit_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_partition_id_isValid = ::OpenAPI::fromJsonValue(m_partition_id, json[QString("partitionId")]);
    m_partition_id_isSet = !json[QString("partitionId")].isNull() && m_partition_id_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIRunStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunStep::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_size_isSet) {
        obj.insert(QString("batchSize"), ::OpenAPI::toJsonValue(m_batch_size));
    }
    if (m_object_delete_limit_isSet) {
        obj.insert(QString("objectDeleteLimit"), ::OpenAPI::toJsonValue(m_object_delete_limit));
    }
    if (m_object_process_limit_isSet) {
        obj.insert(QString("objectProcessLimit"), ::OpenAPI::toJsonValue(m_object_process_limit));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_partition_id_isSet) {
        obj.insert(QString("partitionId"), ::OpenAPI::toJsonValue(m_partition_id));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

qint32 OAIRunStep::getBatchSize() const {
    return m_batch_size;
}
void OAIRunStep::setBatchSize(const qint32 &batch_size) {
    m_batch_size = batch_size;
    m_batch_size_isSet = true;
}

bool OAIRunStep::is_batch_size_Set() const{
    return m_batch_size_isSet;
}

bool OAIRunStep::is_batch_size_Valid() const{
    return m_batch_size_isValid;
}

qint32 OAIRunStep::getObjectDeleteLimit() const {
    return m_object_delete_limit;
}
void OAIRunStep::setObjectDeleteLimit(const qint32 &object_delete_limit) {
    m_object_delete_limit = object_delete_limit;
    m_object_delete_limit_isSet = true;
}

bool OAIRunStep::is_object_delete_limit_Set() const{
    return m_object_delete_limit_isSet;
}

bool OAIRunStep::is_object_delete_limit_Valid() const{
    return m_object_delete_limit_isValid;
}

qint32 OAIRunStep::getObjectProcessLimit() const {
    return m_object_process_limit;
}
void OAIRunStep::setObjectProcessLimit(const qint32 &object_process_limit) {
    m_object_process_limit = object_process_limit;
    m_object_process_limit_isSet = true;
}

bool OAIRunStep::is_object_process_limit_Set() const{
    return m_object_process_limit_isSet;
}

bool OAIRunStep::is_object_process_limit_Valid() const{
    return m_object_process_limit_isValid;
}

qint32 OAIRunStep::getOperationType() const {
    return m_operation_type;
}
void OAIRunStep::setOperationType(const qint32 &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIRunStep::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIRunStep::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

qint32 OAIRunStep::getPageSize() const {
    return m_page_size;
}
void OAIRunStep::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIRunStep::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIRunStep::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QString OAIRunStep::getPartitionId() const {
    return m_partition_id;
}
void OAIRunStep::setPartitionId(const QString &partition_id) {
    m_partition_id = partition_id;
    m_partition_id_isSet = true;
}

bool OAIRunStep::is_partition_id_Set() const{
    return m_partition_id_isSet;
}

bool OAIRunStep::is_partition_id_Valid() const{
    return m_partition_id_isValid;
}

qint32 OAIRunStep::getTimeout() const {
    return m_timeout;
}
void OAIRunStep::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIRunStep::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIRunStep::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIRunStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_delete_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_process_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
