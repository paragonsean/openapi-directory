/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationStatus::OAIReplicationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationStatus::OAIReplicationStatus() {
    this->initializeModel();
}

OAIReplicationStatus::~OAIReplicationStatus() {}

void OAIReplicationStatus::initializeModel() {

    m_error_dc_count_isSet = false;
    m_error_dc_count_isValid = false;

    m_forest_name_isSet = false;
    m_forest_name_isValid = false;

    m_total_dc_count_isSet = false;
    m_total_dc_count_isValid = false;
}

void OAIReplicationStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationStatus::fromJsonObject(QJsonObject json) {

    m_error_dc_count_isValid = ::OpenAPI::fromJsonValue(m_error_dc_count, json[QString("errorDcCount")]);
    m_error_dc_count_isSet = !json[QString("errorDcCount")].isNull() && m_error_dc_count_isValid;

    m_forest_name_isValid = ::OpenAPI::fromJsonValue(m_forest_name, json[QString("forestName")]);
    m_forest_name_isSet = !json[QString("forestName")].isNull() && m_forest_name_isValid;

    m_total_dc_count_isValid = ::OpenAPI::fromJsonValue(m_total_dc_count, json[QString("totalDcCount")]);
    m_total_dc_count_isSet = !json[QString("totalDcCount")].isNull() && m_total_dc_count_isValid;
}

QString OAIReplicationStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_error_dc_count_isSet) {
        obj.insert(QString("errorDcCount"), ::OpenAPI::toJsonValue(m_error_dc_count));
    }
    if (m_forest_name_isSet) {
        obj.insert(QString("forestName"), ::OpenAPI::toJsonValue(m_forest_name));
    }
    if (m_total_dc_count_isSet) {
        obj.insert(QString("totalDcCount"), ::OpenAPI::toJsonValue(m_total_dc_count));
    }
    return obj;
}

qint32 OAIReplicationStatus::getErrorDcCount() const {
    return m_error_dc_count;
}
void OAIReplicationStatus::setErrorDcCount(const qint32 &error_dc_count) {
    m_error_dc_count = error_dc_count;
    m_error_dc_count_isSet = true;
}

bool OAIReplicationStatus::is_error_dc_count_Set() const{
    return m_error_dc_count_isSet;
}

bool OAIReplicationStatus::is_error_dc_count_Valid() const{
    return m_error_dc_count_isValid;
}

QString OAIReplicationStatus::getForestName() const {
    return m_forest_name;
}
void OAIReplicationStatus::setForestName(const QString &forest_name) {
    m_forest_name = forest_name;
    m_forest_name_isSet = true;
}

bool OAIReplicationStatus::is_forest_name_Set() const{
    return m_forest_name_isSet;
}

bool OAIReplicationStatus::is_forest_name_Valid() const{
    return m_forest_name_isValid;
}

qint32 OAIReplicationStatus::getTotalDcCount() const {
    return m_total_dc_count;
}
void OAIReplicationStatus::setTotalDcCount(const qint32 &total_dc_count) {
    m_total_dc_count = total_dc_count;
    m_total_dc_count_isSet = true;
}

bool OAIReplicationStatus::is_total_dc_count_Set() const{
    return m_total_dc_count_isSet;
}

bool OAIReplicationStatus::is_total_dc_count_Valid() const{
    return m_total_dc_count_isValid;
}

bool OAIReplicationStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_dc_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_dc_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
