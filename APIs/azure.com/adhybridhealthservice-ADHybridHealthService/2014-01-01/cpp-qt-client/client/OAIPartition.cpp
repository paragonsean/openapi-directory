/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartition::OAIPartition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartition::OAIPartition() {
    this->initializeModel();
}

OAIPartition::~OAIPartition() {}

void OAIPartition::initializeModel() {

    m_dn_isSet = false;
    m_dn_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_domain_isSet = false;
    m_is_domain_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partition_scope_isSet = false;
    m_partition_scope_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;

    m_time_last_modified_isSet = false;
    m_time_last_modified_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPartition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartition::fromJsonObject(QJsonObject json) {

    m_dn_isValid = ::OpenAPI::fromJsonValue(m_dn, json[QString("dn")]);
    m_dn_isSet = !json[QString("dn")].isNull() && m_dn_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_domain_isValid = ::OpenAPI::fromJsonValue(m_is_domain, json[QString("isDomain")]);
    m_is_domain_isSet = !json[QString("isDomain")].isNull() && m_is_domain_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_partition_scope_isValid = ::OpenAPI::fromJsonValue(m_partition_scope, json[QString("partitionScope")]);
    m_partition_scope_isSet = !json[QString("partitionScope")].isNull() && m_partition_scope_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("timeCreated")]);
    m_time_created_isSet = !json[QString("timeCreated")].isNull() && m_time_created_isValid;

    m_time_last_modified_isValid = ::OpenAPI::fromJsonValue(m_time_last_modified, json[QString("timeLastModified")]);
    m_time_last_modified_isSet = !json[QString("timeLastModified")].isNull() && m_time_last_modified_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPartition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartition::asJsonObject() const {
    QJsonObject obj;
    if (m_dn_isSet) {
        obj.insert(QString("dn"), ::OpenAPI::toJsonValue(m_dn));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_domain_isSet) {
        obj.insert(QString("isDomain"), ::OpenAPI::toJsonValue(m_is_domain));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partition_scope.isSet()) {
        obj.insert(QString("partitionScope"), ::OpenAPI::toJsonValue(m_partition_scope));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("timeCreated"), ::OpenAPI::toJsonValue(m_time_created));
    }
    if (m_time_last_modified_isSet) {
        obj.insert(QString("timeLastModified"), ::OpenAPI::toJsonValue(m_time_last_modified));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPartition::getDn() const {
    return m_dn;
}
void OAIPartition::setDn(const QString &dn) {
    m_dn = dn;
    m_dn_isSet = true;
}

bool OAIPartition::is_dn_Set() const{
    return m_dn_isSet;
}

bool OAIPartition::is_dn_Valid() const{
    return m_dn_isValid;
}

bool OAIPartition::isEnabled() const {
    return m_enabled;
}
void OAIPartition::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIPartition::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIPartition::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIPartition::getId() const {
    return m_id;
}
void OAIPartition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPartition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPartition::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIPartition::isIsDomain() const {
    return m_is_domain;
}
void OAIPartition::setIsDomain(const bool &is_domain) {
    m_is_domain = is_domain;
    m_is_domain_isSet = true;
}

bool OAIPartition::is_is_domain_Set() const{
    return m_is_domain_isSet;
}

bool OAIPartition::is_is_domain_Valid() const{
    return m_is_domain_isValid;
}

QString OAIPartition::getName() const {
    return m_name;
}
void OAIPartition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPartition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPartition::is_name_Valid() const{
    return m_name_isValid;
}

OAIPartitionScope OAIPartition::getPartitionScope() const {
    return m_partition_scope;
}
void OAIPartition::setPartitionScope(const OAIPartitionScope &partition_scope) {
    m_partition_scope = partition_scope;
    m_partition_scope_isSet = true;
}

bool OAIPartition::is_partition_scope_Set() const{
    return m_partition_scope_isSet;
}

bool OAIPartition::is_partition_scope_Valid() const{
    return m_partition_scope_isValid;
}

QDateTime OAIPartition::getTimeCreated() const {
    return m_time_created;
}
void OAIPartition::setTimeCreated(const QDateTime &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAIPartition::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAIPartition::is_time_created_Valid() const{
    return m_time_created_isValid;
}

QDateTime OAIPartition::getTimeLastModified() const {
    return m_time_last_modified;
}
void OAIPartition::setTimeLastModified(const QDateTime &time_last_modified) {
    m_time_last_modified = time_last_modified;
    m_time_last_modified_isSet = true;
}

bool OAIPartition::is_time_last_modified_Set() const{
    return m_time_last_modified_isSet;
}

bool OAIPartition::is_time_last_modified_Valid() const{
    return m_time_last_modified_isValid;
}

QString OAIPartition::getType() const {
    return m_type;
}
void OAIPartition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPartition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPartition::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPartition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
