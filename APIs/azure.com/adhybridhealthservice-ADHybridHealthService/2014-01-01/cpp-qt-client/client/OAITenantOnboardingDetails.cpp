/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenantOnboardingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenantOnboardingDetails::OAITenantOnboardingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenantOnboardingDetails::OAITenantOnboardingDetails() {
    this->initializeModel();
}

OAITenantOnboardingDetails::~OAITenantOnboardingDetails() {}

void OAITenantOnboardingDetails::initializeModel() {

    m_onboarding_display_url_isSet = false;
    m_onboarding_display_url_isValid = false;

    m_tenant_onboarded_isSet = false;
    m_tenant_onboarded_isValid = false;
}

void OAITenantOnboardingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenantOnboardingDetails::fromJsonObject(QJsonObject json) {

    m_onboarding_display_url_isValid = ::OpenAPI::fromJsonValue(m_onboarding_display_url, json[QString("onboardingDisplayUrl")]);
    m_onboarding_display_url_isSet = !json[QString("onboardingDisplayUrl")].isNull() && m_onboarding_display_url_isValid;

    m_tenant_onboarded_isValid = ::OpenAPI::fromJsonValue(m_tenant_onboarded, json[QString("tenantOnboarded")]);
    m_tenant_onboarded_isSet = !json[QString("tenantOnboarded")].isNull() && m_tenant_onboarded_isValid;
}

QString OAITenantOnboardingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenantOnboardingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_onboarding_display_url_isSet) {
        obj.insert(QString("onboardingDisplayUrl"), ::OpenAPI::toJsonValue(m_onboarding_display_url));
    }
    if (m_tenant_onboarded_isSet) {
        obj.insert(QString("tenantOnboarded"), ::OpenAPI::toJsonValue(m_tenant_onboarded));
    }
    return obj;
}

QString OAITenantOnboardingDetails::getOnboardingDisplayUrl() const {
    return m_onboarding_display_url;
}
void OAITenantOnboardingDetails::setOnboardingDisplayUrl(const QString &onboarding_display_url) {
    m_onboarding_display_url = onboarding_display_url;
    m_onboarding_display_url_isSet = true;
}

bool OAITenantOnboardingDetails::is_onboarding_display_url_Set() const{
    return m_onboarding_display_url_isSet;
}

bool OAITenantOnboardingDetails::is_onboarding_display_url_Valid() const{
    return m_onboarding_display_url_isValid;
}

bool OAITenantOnboardingDetails::isTenantOnboarded() const {
    return m_tenant_onboarded;
}
void OAITenantOnboardingDetails::setTenantOnboarded(const bool &tenant_onboarded) {
    m_tenant_onboarded = tenant_onboarded;
    m_tenant_onboarded_isSet = true;
}

bool OAITenantOnboardingDetails::is_tenant_onboarded_Set() const{
    return m_tenant_onboarded_isSet;
}

bool OAITenantOnboardingDetails::is_tenant_onboarded_Valid() const{
    return m_tenant_onboarded_isValid;
}

bool OAITenantOnboardingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_onboarding_display_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_onboarded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenantOnboardingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
