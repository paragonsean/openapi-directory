/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportError::OAIImportError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportError::OAIImportError() {
    this->initializeModel();
}

OAIImportError::~OAIImportError() {}

void OAIImportError::initializeModel() {

    m_algorithm_step_type_isSet = false;
    m_algorithm_step_type_isValid = false;

    m_change_not_reimported_isSet = false;
    m_change_not_reimported_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_cs_object_id_isSet = false;
    m_cs_object_id_isValid = false;

    m_dn_isSet = false;
    m_dn_isValid = false;

    m_extension_error_info_isSet = false;
    m_extension_error_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_retry_count_isSet = false;
    m_retry_count_isValid = false;

    m_rule_error_info_isSet = false;
    m_rule_error_info_isValid = false;

    m_run_step_result_id_isSet = false;
    m_run_step_result_id_isValid = false;

    m_time_first_occurred_isSet = false;
    m_time_first_occurred_isValid = false;

    m_time_occurred_isSet = false;
    m_time_occurred_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImportError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportError::fromJsonObject(QJsonObject json) {

    m_algorithm_step_type_isValid = ::OpenAPI::fromJsonValue(m_algorithm_step_type, json[QString("algorithmStepType")]);
    m_algorithm_step_type_isSet = !json[QString("algorithmStepType")].isNull() && m_algorithm_step_type_isValid;

    m_change_not_reimported_isValid = ::OpenAPI::fromJsonValue(m_change_not_reimported, json[QString("changeNotReimported")]);
    m_change_not_reimported_isSet = !json[QString("changeNotReimported")].isNull() && m_change_not_reimported_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_cs_object_id_isValid = ::OpenAPI::fromJsonValue(m_cs_object_id, json[QString("csObjectId")]);
    m_cs_object_id_isSet = !json[QString("csObjectId")].isNull() && m_cs_object_id_isValid;

    m_dn_isValid = ::OpenAPI::fromJsonValue(m_dn, json[QString("dn")]);
    m_dn_isSet = !json[QString("dn")].isNull() && m_dn_isValid;

    m_extension_error_info_isValid = ::OpenAPI::fromJsonValue(m_extension_error_info, json[QString("extensionErrorInfo")]);
    m_extension_error_info_isSet = !json[QString("extensionErrorInfo")].isNull() && m_extension_error_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_retry_count_isValid = ::OpenAPI::fromJsonValue(m_retry_count, json[QString("retryCount")]);
    m_retry_count_isSet = !json[QString("retryCount")].isNull() && m_retry_count_isValid;

    m_rule_error_info_isValid = ::OpenAPI::fromJsonValue(m_rule_error_info, json[QString("ruleErrorInfo")]);
    m_rule_error_info_isSet = !json[QString("ruleErrorInfo")].isNull() && m_rule_error_info_isValid;

    m_run_step_result_id_isValid = ::OpenAPI::fromJsonValue(m_run_step_result_id, json[QString("runStepResultId")]);
    m_run_step_result_id_isSet = !json[QString("runStepResultId")].isNull() && m_run_step_result_id_isValid;

    m_time_first_occurred_isValid = ::OpenAPI::fromJsonValue(m_time_first_occurred, json[QString("timeFirstOccurred")]);
    m_time_first_occurred_isSet = !json[QString("timeFirstOccurred")].isNull() && m_time_first_occurred_isValid;

    m_time_occurred_isValid = ::OpenAPI::fromJsonValue(m_time_occurred, json[QString("timeOccurred")]);
    m_time_occurred_isSet = !json[QString("timeOccurred")].isNull() && m_time_occurred_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIImportError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportError::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_step_type_isSet) {
        obj.insert(QString("algorithmStepType"), ::OpenAPI::toJsonValue(m_algorithm_step_type));
    }
    if (m_change_not_reimported.isSet()) {
        obj.insert(QString("changeNotReimported"), ::OpenAPI::toJsonValue(m_change_not_reimported));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_cs_object_id_isSet) {
        obj.insert(QString("csObjectId"), ::OpenAPI::toJsonValue(m_cs_object_id));
    }
    if (m_dn_isSet) {
        obj.insert(QString("dn"), ::OpenAPI::toJsonValue(m_dn));
    }
    if (m_extension_error_info.isSet()) {
        obj.insert(QString("extensionErrorInfo"), ::OpenAPI::toJsonValue(m_extension_error_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_retry_count_isSet) {
        obj.insert(QString("retryCount"), ::OpenAPI::toJsonValue(m_retry_count));
    }
    if (m_rule_error_info.isSet()) {
        obj.insert(QString("ruleErrorInfo"), ::OpenAPI::toJsonValue(m_rule_error_info));
    }
    if (m_run_step_result_id_isSet) {
        obj.insert(QString("runStepResultId"), ::OpenAPI::toJsonValue(m_run_step_result_id));
    }
    if (m_time_first_occurred_isSet) {
        obj.insert(QString("timeFirstOccurred"), ::OpenAPI::toJsonValue(m_time_first_occurred));
    }
    if (m_time_occurred_isSet) {
        obj.insert(QString("timeOccurred"), ::OpenAPI::toJsonValue(m_time_occurred));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIImportError::getAlgorithmStepType() const {
    return m_algorithm_step_type;
}
void OAIImportError::setAlgorithmStepType(const QString &algorithm_step_type) {
    m_algorithm_step_type = algorithm_step_type;
    m_algorithm_step_type_isSet = true;
}

bool OAIImportError::is_algorithm_step_type_Set() const{
    return m_algorithm_step_type_isSet;
}

bool OAIImportError::is_algorithm_step_type_Valid() const{
    return m_algorithm_step_type_isValid;
}

OAIChangeNotReimported OAIImportError::getChangeNotReimported() const {
    return m_change_not_reimported;
}
void OAIImportError::setChangeNotReimported(const OAIChangeNotReimported &change_not_reimported) {
    m_change_not_reimported = change_not_reimported;
    m_change_not_reimported_isSet = true;
}

bool OAIImportError::is_change_not_reimported_Set() const{
    return m_change_not_reimported_isSet;
}

bool OAIImportError::is_change_not_reimported_Valid() const{
    return m_change_not_reimported_isValid;
}

QString OAIImportError::getConnectorId() const {
    return m_connector_id;
}
void OAIImportError::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIImportError::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIImportError::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIImportError::getCsObjectId() const {
    return m_cs_object_id;
}
void OAIImportError::setCsObjectId(const QString &cs_object_id) {
    m_cs_object_id = cs_object_id;
    m_cs_object_id_isSet = true;
}

bool OAIImportError::is_cs_object_id_Set() const{
    return m_cs_object_id_isSet;
}

bool OAIImportError::is_cs_object_id_Valid() const{
    return m_cs_object_id_isValid;
}

QString OAIImportError::getDn() const {
    return m_dn;
}
void OAIImportError::setDn(const QString &dn) {
    m_dn = dn;
    m_dn_isSet = true;
}

bool OAIImportError::is_dn_Set() const{
    return m_dn_isSet;
}

bool OAIImportError::is_dn_Valid() const{
    return m_dn_isValid;
}

OAIExtensionErrorInfo OAIImportError::getExtensionErrorInfo() const {
    return m_extension_error_info;
}
void OAIImportError::setExtensionErrorInfo(const OAIExtensionErrorInfo &extension_error_info) {
    m_extension_error_info = extension_error_info;
    m_extension_error_info_isSet = true;
}

bool OAIImportError::is_extension_error_info_Set() const{
    return m_extension_error_info_isSet;
}

bool OAIImportError::is_extension_error_info_Valid() const{
    return m_extension_error_info_isValid;
}

QString OAIImportError::getId() const {
    return m_id;
}
void OAIImportError::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImportError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImportError::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIImportError::getRetryCount() const {
    return m_retry_count;
}
void OAIImportError::setRetryCount(const qint32 &retry_count) {
    m_retry_count = retry_count;
    m_retry_count_isSet = true;
}

bool OAIImportError::is_retry_count_Set() const{
    return m_retry_count_isSet;
}

bool OAIImportError::is_retry_count_Valid() const{
    return m_retry_count_isValid;
}

OAIRuleErrorInfo OAIImportError::getRuleErrorInfo() const {
    return m_rule_error_info;
}
void OAIImportError::setRuleErrorInfo(const OAIRuleErrorInfo &rule_error_info) {
    m_rule_error_info = rule_error_info;
    m_rule_error_info_isSet = true;
}

bool OAIImportError::is_rule_error_info_Set() const{
    return m_rule_error_info_isSet;
}

bool OAIImportError::is_rule_error_info_Valid() const{
    return m_rule_error_info_isValid;
}

QString OAIImportError::getRunStepResultId() const {
    return m_run_step_result_id;
}
void OAIImportError::setRunStepResultId(const QString &run_step_result_id) {
    m_run_step_result_id = run_step_result_id;
    m_run_step_result_id_isSet = true;
}

bool OAIImportError::is_run_step_result_id_Set() const{
    return m_run_step_result_id_isSet;
}

bool OAIImportError::is_run_step_result_id_Valid() const{
    return m_run_step_result_id_isValid;
}

QDateTime OAIImportError::getTimeFirstOccurred() const {
    return m_time_first_occurred;
}
void OAIImportError::setTimeFirstOccurred(const QDateTime &time_first_occurred) {
    m_time_first_occurred = time_first_occurred;
    m_time_first_occurred_isSet = true;
}

bool OAIImportError::is_time_first_occurred_Set() const{
    return m_time_first_occurred_isSet;
}

bool OAIImportError::is_time_first_occurred_Valid() const{
    return m_time_first_occurred_isValid;
}

QDateTime OAIImportError::getTimeOccurred() const {
    return m_time_occurred;
}
void OAIImportError::setTimeOccurred(const QDateTime &time_occurred) {
    m_time_occurred = time_occurred;
    m_time_occurred_isSet = true;
}

bool OAIImportError::is_time_occurred_Set() const{
    return m_time_occurred_isSet;
}

bool OAIImportError::is_time_occurred_Valid() const{
    return m_time_occurred_isValid;
}

QString OAIImportError::getType() const {
    return m_type;
}
void OAIImportError::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImportError::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImportError::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImportError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_step_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_not_reimported.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cs_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_step_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_first_occurred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_occurred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
