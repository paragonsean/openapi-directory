/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgent::OAIAgent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgent::OAIAgent() {
    this->initializeModel();
}

OAIAgent::~OAIAgent() {}

void OAIAgent::initializeModel() {

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_credential_isSet = false;
    m_credential_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_machine_id_isSet = false;
    m_machine_id_isValid = false;

    m_machine_name_isSet = false;
    m_machine_name_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIAgent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgent::fromJsonObject(QJsonObject json) {

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_credential_isValid = ::OpenAPI::fromJsonValue(m_credential, json[QString("credential")]);
    m_credential_isSet = !json[QString("credential")].isNull() && m_credential_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_machine_id_isValid = ::OpenAPI::fromJsonValue(m_machine_id, json[QString("machineId")]);
    m_machine_id_isSet = !json[QString("machineId")].isNull() && m_machine_id_isValid;

    m_machine_name_isValid = ::OpenAPI::fromJsonValue(m_machine_name, json[QString("machineName")]);
    m_machine_name_isSet = !json[QString("machineName")].isNull() && m_machine_name_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIAgent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgent::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_credential_isSet) {
        obj.insert(QString("credential"), ::OpenAPI::toJsonValue(m_credential));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_machine_id_isSet) {
        obj.insert(QString("machineId"), ::OpenAPI::toJsonValue(m_machine_id));
    }
    if (m_machine_name_isSet) {
        obj.insert(QString("machineName"), ::OpenAPI::toJsonValue(m_machine_name));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIAgent::getAgentVersion() const {
    return m_agent_version;
}
void OAIAgent::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIAgent::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIAgent::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QDateTime OAIAgent::getCreatedDate() const {
    return m_created_date;
}
void OAIAgent::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIAgent::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIAgent::is_created_date_Valid() const{
    return m_created_date_isValid;
}

OAIObject OAIAgent::getCredential() const {
    return m_credential;
}
void OAIAgent::setCredential(const OAIObject &credential) {
    m_credential = credential;
    m_credential_isSet = true;
}

bool OAIAgent::is_credential_Set() const{
    return m_credential_isSet;
}

bool OAIAgent::is_credential_Valid() const{
    return m_credential_isValid;
}

QString OAIAgent::getKey() const {
    return m_key;
}
void OAIAgent::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIAgent::is_key_Set() const{
    return m_key_isSet;
}

bool OAIAgent::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIAgent::getMachineId() const {
    return m_machine_id;
}
void OAIAgent::setMachineId(const QString &machine_id) {
    m_machine_id = machine_id;
    m_machine_id_isSet = true;
}

bool OAIAgent::is_machine_id_Set() const{
    return m_machine_id_isSet;
}

bool OAIAgent::is_machine_id_Valid() const{
    return m_machine_id_isValid;
}

QString OAIAgent::getMachineName() const {
    return m_machine_name;
}
void OAIAgent::setMachineName(const QString &machine_name) {
    m_machine_name = machine_name;
    m_machine_name_isSet = true;
}

bool OAIAgent::is_machine_name_Set() const{
    return m_machine_name_isSet;
}

bool OAIAgent::is_machine_name_Valid() const{
    return m_machine_name_isValid;
}

QString OAIAgent::getTenantId() const {
    return m_tenant_id;
}
void OAIAgent::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIAgent::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIAgent::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIAgent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
