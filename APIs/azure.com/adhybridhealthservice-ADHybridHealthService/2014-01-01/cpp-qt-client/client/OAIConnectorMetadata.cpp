/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorMetadata::OAIConnectorMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorMetadata::OAIConnectorMetadata() {
    this->initializeModel();
}

OAIConnectorMetadata::~OAIConnectorMetadata() {}

void OAIConnectorMetadata::initializeModel() {

    m_connectors_isSet = false;
    m_connectors_isValid = false;

    m_run_profile_names_isSet = false;
    m_run_profile_names_isValid = false;
}

void OAIConnectorMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorMetadata::fromJsonObject(QJsonObject json) {

    m_connectors_isValid = ::OpenAPI::fromJsonValue(m_connectors, json[QString("connectors")]);
    m_connectors_isSet = !json[QString("connectors")].isNull() && m_connectors_isValid;

    m_run_profile_names_isValid = ::OpenAPI::fromJsonValue(m_run_profile_names, json[QString("runProfileNames")]);
    m_run_profile_names_isSet = !json[QString("runProfileNames")].isNull() && m_run_profile_names_isValid;
}

QString OAIConnectorMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_connectors.size() > 0) {
        obj.insert(QString("connectors"), ::OpenAPI::toJsonValue(m_connectors));
    }
    if (m_run_profile_names.size() > 0) {
        obj.insert(QString("runProfileNames"), ::OpenAPI::toJsonValue(m_run_profile_names));
    }
    return obj;
}

QList<OAIConnectorMetadataDetails> OAIConnectorMetadata::getConnectors() const {
    return m_connectors;
}
void OAIConnectorMetadata::setConnectors(const QList<OAIConnectorMetadataDetails> &connectors) {
    m_connectors = connectors;
    m_connectors_isSet = true;
}

bool OAIConnectorMetadata::is_connectors_Set() const{
    return m_connectors_isSet;
}

bool OAIConnectorMetadata::is_connectors_Valid() const{
    return m_connectors_isValid;
}

QList<QString> OAIConnectorMetadata::getRunProfileNames() const {
    return m_run_profile_names;
}
void OAIConnectorMetadata::setRunProfileNames(const QList<QString> &run_profile_names) {
    m_run_profile_names = run_profile_names;
    m_run_profile_names_isSet = true;
}

bool OAIConnectorMetadata::is_run_profile_names_Set() const{
    return m_run_profile_names_isSet;
}

bool OAIConnectorMetadata::is_run_profile_names_Valid() const{
    return m_run_profile_names_isValid;
}

bool OAIConnectorMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connectors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_profile_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
