/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportError::OAIExportError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportError::OAIExportError() {
    this->initializeModel();
}

OAIExportError::~OAIExportError() {}

void OAIExportError::initializeModel() {

    m_aad_display_name_isSet = false;
    m_aad_display_name_isValid = false;

    m_aad_distinguished_name_isSet = false;
    m_aad_distinguished_name_isValid = false;

    m_aad_mail_isSet = false;
    m_aad_mail_isValid = false;

    m_aad_object_guid_isSet = false;
    m_aad_object_guid_isValid = false;

    m_aad_object_type_isSet = false;
    m_aad_object_type_isValid = false;

    m_aad_source_of_authority_isSet = false;
    m_aad_source_of_authority_isValid = false;

    m_aad_user_principal_name_isSet = false;
    m_aad_user_principal_name_isValid = false;

    m_ad_display_name_isSet = false;
    m_ad_display_name_isValid = false;

    m_ad_distinguished_name_isSet = false;
    m_ad_distinguished_name_isValid = false;

    m_ad_mail_isSet = false;
    m_ad_mail_isValid = false;

    m_ad_object_guid_isSet = false;
    m_ad_object_guid_isValid = false;

    m_ad_object_type_isSet = false;
    m_ad_object_type_isValid = false;

    m_ad_source_anchor_isSet = false;
    m_ad_source_anchor_isValid = false;

    m_ad_source_of_authority_isSet = false;
    m_ad_source_of_authority_isValid = false;

    m_ad_user_principal_name_isSet = false;
    m_ad_user_principal_name_isValid = false;

    m_attribute_multi_value_isSet = false;
    m_attribute_multi_value_isValid = false;

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;

    m_attribute_value_isSet = false;
    m_attribute_value_isValid = false;

    m_cloud_anchor_isSet = false;
    m_cloud_anchor_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_cs_object_id_isSet = false;
    m_cs_object_id_isValid = false;

    m_dn_isSet = false;
    m_dn_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_dir_sync_time_isSet = false;
    m_last_dir_sync_time_isValid = false;

    m_max_limit_isSet = false;
    m_max_limit_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_min_limit_isSet = false;
    m_min_limit_isValid = false;

    m_modified_attribute_value_isSet = false;
    m_modified_attribute_value_isValid = false;

    m_object_id_conflict_isSet = false;
    m_object_id_conflict_isValid = false;

    m_retry_count_isSet = false;
    m_retry_count_isValid = false;

    m_run_step_result_id_isSet = false;
    m_run_step_result_id_isValid = false;

    m_sam_account_name_isSet = false;
    m_sam_account_name_isValid = false;

    m_server_error_detail_isSet = false;
    m_server_error_detail_isValid = false;

    m_time_first_occured_isSet = false;
    m_time_first_occured_isValid = false;

    m_time_occured_isSet = false;
    m_time_occured_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExportError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportError::fromJsonObject(QJsonObject json) {

    m_aad_display_name_isValid = ::OpenAPI::fromJsonValue(m_aad_display_name, json[QString("aadDisplayName")]);
    m_aad_display_name_isSet = !json[QString("aadDisplayName")].isNull() && m_aad_display_name_isValid;

    m_aad_distinguished_name_isValid = ::OpenAPI::fromJsonValue(m_aad_distinguished_name, json[QString("aadDistinguishedName")]);
    m_aad_distinguished_name_isSet = !json[QString("aadDistinguishedName")].isNull() && m_aad_distinguished_name_isValid;

    m_aad_mail_isValid = ::OpenAPI::fromJsonValue(m_aad_mail, json[QString("aadMail")]);
    m_aad_mail_isSet = !json[QString("aadMail")].isNull() && m_aad_mail_isValid;

    m_aad_object_guid_isValid = ::OpenAPI::fromJsonValue(m_aad_object_guid, json[QString("aadObjectGuid")]);
    m_aad_object_guid_isSet = !json[QString("aadObjectGuid")].isNull() && m_aad_object_guid_isValid;

    m_aad_object_type_isValid = ::OpenAPI::fromJsonValue(m_aad_object_type, json[QString("aadObjectType")]);
    m_aad_object_type_isSet = !json[QString("aadObjectType")].isNull() && m_aad_object_type_isValid;

    m_aad_source_of_authority_isValid = ::OpenAPI::fromJsonValue(m_aad_source_of_authority, json[QString("aadSourceOfAuthority")]);
    m_aad_source_of_authority_isSet = !json[QString("aadSourceOfAuthority")].isNull() && m_aad_source_of_authority_isValid;

    m_aad_user_principal_name_isValid = ::OpenAPI::fromJsonValue(m_aad_user_principal_name, json[QString("aadUserPrincipalName")]);
    m_aad_user_principal_name_isSet = !json[QString("aadUserPrincipalName")].isNull() && m_aad_user_principal_name_isValid;

    m_ad_display_name_isValid = ::OpenAPI::fromJsonValue(m_ad_display_name, json[QString("adDisplayName")]);
    m_ad_display_name_isSet = !json[QString("adDisplayName")].isNull() && m_ad_display_name_isValid;

    m_ad_distinguished_name_isValid = ::OpenAPI::fromJsonValue(m_ad_distinguished_name, json[QString("adDistinguishedName")]);
    m_ad_distinguished_name_isSet = !json[QString("adDistinguishedName")].isNull() && m_ad_distinguished_name_isValid;

    m_ad_mail_isValid = ::OpenAPI::fromJsonValue(m_ad_mail, json[QString("adMail")]);
    m_ad_mail_isSet = !json[QString("adMail")].isNull() && m_ad_mail_isValid;

    m_ad_object_guid_isValid = ::OpenAPI::fromJsonValue(m_ad_object_guid, json[QString("adObjectGuid")]);
    m_ad_object_guid_isSet = !json[QString("adObjectGuid")].isNull() && m_ad_object_guid_isValid;

    m_ad_object_type_isValid = ::OpenAPI::fromJsonValue(m_ad_object_type, json[QString("adObjectType")]);
    m_ad_object_type_isSet = !json[QString("adObjectType")].isNull() && m_ad_object_type_isValid;

    m_ad_source_anchor_isValid = ::OpenAPI::fromJsonValue(m_ad_source_anchor, json[QString("adSourceAnchor")]);
    m_ad_source_anchor_isSet = !json[QString("adSourceAnchor")].isNull() && m_ad_source_anchor_isValid;

    m_ad_source_of_authority_isValid = ::OpenAPI::fromJsonValue(m_ad_source_of_authority, json[QString("adSourceOfAuthority")]);
    m_ad_source_of_authority_isSet = !json[QString("adSourceOfAuthority")].isNull() && m_ad_source_of_authority_isValid;

    m_ad_user_principal_name_isValid = ::OpenAPI::fromJsonValue(m_ad_user_principal_name, json[QString("adUserPrincipalName")]);
    m_ad_user_principal_name_isSet = !json[QString("adUserPrincipalName")].isNull() && m_ad_user_principal_name_isValid;

    m_attribute_multi_value_isValid = ::OpenAPI::fromJsonValue(m_attribute_multi_value, json[QString("attributeMultiValue")]);
    m_attribute_multi_value_isSet = !json[QString("attributeMultiValue")].isNull() && m_attribute_multi_value_isValid;

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("attributeName")]);
    m_attribute_name_isSet = !json[QString("attributeName")].isNull() && m_attribute_name_isValid;

    m_attribute_value_isValid = ::OpenAPI::fromJsonValue(m_attribute_value, json[QString("attributeValue")]);
    m_attribute_value_isSet = !json[QString("attributeValue")].isNull() && m_attribute_value_isValid;

    m_cloud_anchor_isValid = ::OpenAPI::fromJsonValue(m_cloud_anchor, json[QString("cloudAnchor")]);
    m_cloud_anchor_isSet = !json[QString("cloudAnchor")].isNull() && m_cloud_anchor_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_cs_object_id_isValid = ::OpenAPI::fromJsonValue(m_cs_object_id, json[QString("csObjectId")]);
    m_cs_object_id_isSet = !json[QString("csObjectId")].isNull() && m_cs_object_id_isValid;

    m_dn_isValid = ::OpenAPI::fromJsonValue(m_dn, json[QString("dn")]);
    m_dn_isSet = !json[QString("dn")].isNull() && m_dn_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_dir_sync_time_isValid = ::OpenAPI::fromJsonValue(m_last_dir_sync_time, json[QString("lastDirSyncTime")]);
    m_last_dir_sync_time_isSet = !json[QString("lastDirSyncTime")].isNull() && m_last_dir_sync_time_isValid;

    m_max_limit_isValid = ::OpenAPI::fromJsonValue(m_max_limit, json[QString("maxLimit")]);
    m_max_limit_isSet = !json[QString("maxLimit")].isNull() && m_max_limit_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_min_limit_isValid = ::OpenAPI::fromJsonValue(m_min_limit, json[QString("minLimit")]);
    m_min_limit_isSet = !json[QString("minLimit")].isNull() && m_min_limit_isValid;

    m_modified_attribute_value_isValid = ::OpenAPI::fromJsonValue(m_modified_attribute_value, json[QString("modifiedAttributeValue")]);
    m_modified_attribute_value_isSet = !json[QString("modifiedAttributeValue")].isNull() && m_modified_attribute_value_isValid;

    m_object_id_conflict_isValid = ::OpenAPI::fromJsonValue(m_object_id_conflict, json[QString("objectIdConflict")]);
    m_object_id_conflict_isSet = !json[QString("objectIdConflict")].isNull() && m_object_id_conflict_isValid;

    m_retry_count_isValid = ::OpenAPI::fromJsonValue(m_retry_count, json[QString("retryCount")]);
    m_retry_count_isSet = !json[QString("retryCount")].isNull() && m_retry_count_isValid;

    m_run_step_result_id_isValid = ::OpenAPI::fromJsonValue(m_run_step_result_id, json[QString("runStepResultId")]);
    m_run_step_result_id_isSet = !json[QString("runStepResultId")].isNull() && m_run_step_result_id_isValid;

    m_sam_account_name_isValid = ::OpenAPI::fromJsonValue(m_sam_account_name, json[QString("samAccountName")]);
    m_sam_account_name_isSet = !json[QString("samAccountName")].isNull() && m_sam_account_name_isValid;

    m_server_error_detail_isValid = ::OpenAPI::fromJsonValue(m_server_error_detail, json[QString("serverErrorDetail")]);
    m_server_error_detail_isSet = !json[QString("serverErrorDetail")].isNull() && m_server_error_detail_isValid;

    m_time_first_occured_isValid = ::OpenAPI::fromJsonValue(m_time_first_occured, json[QString("timeFirstOccured")]);
    m_time_first_occured_isSet = !json[QString("timeFirstOccured")].isNull() && m_time_first_occured_isValid;

    m_time_occured_isValid = ::OpenAPI::fromJsonValue(m_time_occured, json[QString("timeOccured")]);
    m_time_occured_isSet = !json[QString("timeOccured")].isNull() && m_time_occured_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIExportError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportError::asJsonObject() const {
    QJsonObject obj;
    if (m_aad_display_name_isSet) {
        obj.insert(QString("aadDisplayName"), ::OpenAPI::toJsonValue(m_aad_display_name));
    }
    if (m_aad_distinguished_name_isSet) {
        obj.insert(QString("aadDistinguishedName"), ::OpenAPI::toJsonValue(m_aad_distinguished_name));
    }
    if (m_aad_mail_isSet) {
        obj.insert(QString("aadMail"), ::OpenAPI::toJsonValue(m_aad_mail));
    }
    if (m_aad_object_guid_isSet) {
        obj.insert(QString("aadObjectGuid"), ::OpenAPI::toJsonValue(m_aad_object_guid));
    }
    if (m_aad_object_type_isSet) {
        obj.insert(QString("aadObjectType"), ::OpenAPI::toJsonValue(m_aad_object_type));
    }
    if (m_aad_source_of_authority_isSet) {
        obj.insert(QString("aadSourceOfAuthority"), ::OpenAPI::toJsonValue(m_aad_source_of_authority));
    }
    if (m_aad_user_principal_name_isSet) {
        obj.insert(QString("aadUserPrincipalName"), ::OpenAPI::toJsonValue(m_aad_user_principal_name));
    }
    if (m_ad_display_name_isSet) {
        obj.insert(QString("adDisplayName"), ::OpenAPI::toJsonValue(m_ad_display_name));
    }
    if (m_ad_distinguished_name_isSet) {
        obj.insert(QString("adDistinguishedName"), ::OpenAPI::toJsonValue(m_ad_distinguished_name));
    }
    if (m_ad_mail_isSet) {
        obj.insert(QString("adMail"), ::OpenAPI::toJsonValue(m_ad_mail));
    }
    if (m_ad_object_guid_isSet) {
        obj.insert(QString("adObjectGuid"), ::OpenAPI::toJsonValue(m_ad_object_guid));
    }
    if (m_ad_object_type_isSet) {
        obj.insert(QString("adObjectType"), ::OpenAPI::toJsonValue(m_ad_object_type));
    }
    if (m_ad_source_anchor_isSet) {
        obj.insert(QString("adSourceAnchor"), ::OpenAPI::toJsonValue(m_ad_source_anchor));
    }
    if (m_ad_source_of_authority_isSet) {
        obj.insert(QString("adSourceOfAuthority"), ::OpenAPI::toJsonValue(m_ad_source_of_authority));
    }
    if (m_ad_user_principal_name_isSet) {
        obj.insert(QString("adUserPrincipalName"), ::OpenAPI::toJsonValue(m_ad_user_principal_name));
    }
    if (m_attribute_multi_value_isSet) {
        obj.insert(QString("attributeMultiValue"), ::OpenAPI::toJsonValue(m_attribute_multi_value));
    }
    if (m_attribute_name_isSet) {
        obj.insert(QString("attributeName"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    if (m_attribute_value_isSet) {
        obj.insert(QString("attributeValue"), ::OpenAPI::toJsonValue(m_attribute_value));
    }
    if (m_cloud_anchor_isSet) {
        obj.insert(QString("cloudAnchor"), ::OpenAPI::toJsonValue(m_cloud_anchor));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_cs_object_id_isSet) {
        obj.insert(QString("csObjectId"), ::OpenAPI::toJsonValue(m_cs_object_id));
    }
    if (m_dn_isSet) {
        obj.insert(QString("dn"), ::OpenAPI::toJsonValue(m_dn));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_dir_sync_time_isSet) {
        obj.insert(QString("lastDirSyncTime"), ::OpenAPI::toJsonValue(m_last_dir_sync_time));
    }
    if (m_max_limit_isSet) {
        obj.insert(QString("maxLimit"), ::OpenAPI::toJsonValue(m_max_limit));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_min_limit_isSet) {
        obj.insert(QString("minLimit"), ::OpenAPI::toJsonValue(m_min_limit));
    }
    if (m_modified_attribute_value_isSet) {
        obj.insert(QString("modifiedAttributeValue"), ::OpenAPI::toJsonValue(m_modified_attribute_value));
    }
    if (m_object_id_conflict_isSet) {
        obj.insert(QString("objectIdConflict"), ::OpenAPI::toJsonValue(m_object_id_conflict));
    }
    if (m_retry_count_isSet) {
        obj.insert(QString("retryCount"), ::OpenAPI::toJsonValue(m_retry_count));
    }
    if (m_run_step_result_id_isSet) {
        obj.insert(QString("runStepResultId"), ::OpenAPI::toJsonValue(m_run_step_result_id));
    }
    if (m_sam_account_name_isSet) {
        obj.insert(QString("samAccountName"), ::OpenAPI::toJsonValue(m_sam_account_name));
    }
    if (m_server_error_detail_isSet) {
        obj.insert(QString("serverErrorDetail"), ::OpenAPI::toJsonValue(m_server_error_detail));
    }
    if (m_time_first_occured_isSet) {
        obj.insert(QString("timeFirstOccured"), ::OpenAPI::toJsonValue(m_time_first_occured));
    }
    if (m_time_occured_isSet) {
        obj.insert(QString("timeOccured"), ::OpenAPI::toJsonValue(m_time_occured));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIExportError::getAadDisplayName() const {
    return m_aad_display_name;
}
void OAIExportError::setAadDisplayName(const QString &aad_display_name) {
    m_aad_display_name = aad_display_name;
    m_aad_display_name_isSet = true;
}

bool OAIExportError::is_aad_display_name_Set() const{
    return m_aad_display_name_isSet;
}

bool OAIExportError::is_aad_display_name_Valid() const{
    return m_aad_display_name_isValid;
}

QString OAIExportError::getAadDistinguishedName() const {
    return m_aad_distinguished_name;
}
void OAIExportError::setAadDistinguishedName(const QString &aad_distinguished_name) {
    m_aad_distinguished_name = aad_distinguished_name;
    m_aad_distinguished_name_isSet = true;
}

bool OAIExportError::is_aad_distinguished_name_Set() const{
    return m_aad_distinguished_name_isSet;
}

bool OAIExportError::is_aad_distinguished_name_Valid() const{
    return m_aad_distinguished_name_isValid;
}

QString OAIExportError::getAadMail() const {
    return m_aad_mail;
}
void OAIExportError::setAadMail(const QString &aad_mail) {
    m_aad_mail = aad_mail;
    m_aad_mail_isSet = true;
}

bool OAIExportError::is_aad_mail_Set() const{
    return m_aad_mail_isSet;
}

bool OAIExportError::is_aad_mail_Valid() const{
    return m_aad_mail_isValid;
}

QString OAIExportError::getAadObjectGuid() const {
    return m_aad_object_guid;
}
void OAIExportError::setAadObjectGuid(const QString &aad_object_guid) {
    m_aad_object_guid = aad_object_guid;
    m_aad_object_guid_isSet = true;
}

bool OAIExportError::is_aad_object_guid_Set() const{
    return m_aad_object_guid_isSet;
}

bool OAIExportError::is_aad_object_guid_Valid() const{
    return m_aad_object_guid_isValid;
}

QString OAIExportError::getAadObjectType() const {
    return m_aad_object_type;
}
void OAIExportError::setAadObjectType(const QString &aad_object_type) {
    m_aad_object_type = aad_object_type;
    m_aad_object_type_isSet = true;
}

bool OAIExportError::is_aad_object_type_Set() const{
    return m_aad_object_type_isSet;
}

bool OAIExportError::is_aad_object_type_Valid() const{
    return m_aad_object_type_isValid;
}

QString OAIExportError::getAadSourceOfAuthority() const {
    return m_aad_source_of_authority;
}
void OAIExportError::setAadSourceOfAuthority(const QString &aad_source_of_authority) {
    m_aad_source_of_authority = aad_source_of_authority;
    m_aad_source_of_authority_isSet = true;
}

bool OAIExportError::is_aad_source_of_authority_Set() const{
    return m_aad_source_of_authority_isSet;
}

bool OAIExportError::is_aad_source_of_authority_Valid() const{
    return m_aad_source_of_authority_isValid;
}

QString OAIExportError::getAadUserPrincipalName() const {
    return m_aad_user_principal_name;
}
void OAIExportError::setAadUserPrincipalName(const QString &aad_user_principal_name) {
    m_aad_user_principal_name = aad_user_principal_name;
    m_aad_user_principal_name_isSet = true;
}

bool OAIExportError::is_aad_user_principal_name_Set() const{
    return m_aad_user_principal_name_isSet;
}

bool OAIExportError::is_aad_user_principal_name_Valid() const{
    return m_aad_user_principal_name_isValid;
}

QString OAIExportError::getAdDisplayName() const {
    return m_ad_display_name;
}
void OAIExportError::setAdDisplayName(const QString &ad_display_name) {
    m_ad_display_name = ad_display_name;
    m_ad_display_name_isSet = true;
}

bool OAIExportError::is_ad_display_name_Set() const{
    return m_ad_display_name_isSet;
}

bool OAIExportError::is_ad_display_name_Valid() const{
    return m_ad_display_name_isValid;
}

QString OAIExportError::getAdDistinguishedName() const {
    return m_ad_distinguished_name;
}
void OAIExportError::setAdDistinguishedName(const QString &ad_distinguished_name) {
    m_ad_distinguished_name = ad_distinguished_name;
    m_ad_distinguished_name_isSet = true;
}

bool OAIExportError::is_ad_distinguished_name_Set() const{
    return m_ad_distinguished_name_isSet;
}

bool OAIExportError::is_ad_distinguished_name_Valid() const{
    return m_ad_distinguished_name_isValid;
}

QString OAIExportError::getAdMail() const {
    return m_ad_mail;
}
void OAIExportError::setAdMail(const QString &ad_mail) {
    m_ad_mail = ad_mail;
    m_ad_mail_isSet = true;
}

bool OAIExportError::is_ad_mail_Set() const{
    return m_ad_mail_isSet;
}

bool OAIExportError::is_ad_mail_Valid() const{
    return m_ad_mail_isValid;
}

QString OAIExportError::getAdObjectGuid() const {
    return m_ad_object_guid;
}
void OAIExportError::setAdObjectGuid(const QString &ad_object_guid) {
    m_ad_object_guid = ad_object_guid;
    m_ad_object_guid_isSet = true;
}

bool OAIExportError::is_ad_object_guid_Set() const{
    return m_ad_object_guid_isSet;
}

bool OAIExportError::is_ad_object_guid_Valid() const{
    return m_ad_object_guid_isValid;
}

QString OAIExportError::getAdObjectType() const {
    return m_ad_object_type;
}
void OAIExportError::setAdObjectType(const QString &ad_object_type) {
    m_ad_object_type = ad_object_type;
    m_ad_object_type_isSet = true;
}

bool OAIExportError::is_ad_object_type_Set() const{
    return m_ad_object_type_isSet;
}

bool OAIExportError::is_ad_object_type_Valid() const{
    return m_ad_object_type_isValid;
}

QString OAIExportError::getAdSourceAnchor() const {
    return m_ad_source_anchor;
}
void OAIExportError::setAdSourceAnchor(const QString &ad_source_anchor) {
    m_ad_source_anchor = ad_source_anchor;
    m_ad_source_anchor_isSet = true;
}

bool OAIExportError::is_ad_source_anchor_Set() const{
    return m_ad_source_anchor_isSet;
}

bool OAIExportError::is_ad_source_anchor_Valid() const{
    return m_ad_source_anchor_isValid;
}

QString OAIExportError::getAdSourceOfAuthority() const {
    return m_ad_source_of_authority;
}
void OAIExportError::setAdSourceOfAuthority(const QString &ad_source_of_authority) {
    m_ad_source_of_authority = ad_source_of_authority;
    m_ad_source_of_authority_isSet = true;
}

bool OAIExportError::is_ad_source_of_authority_Set() const{
    return m_ad_source_of_authority_isSet;
}

bool OAIExportError::is_ad_source_of_authority_Valid() const{
    return m_ad_source_of_authority_isValid;
}

QString OAIExportError::getAdUserPrincipalName() const {
    return m_ad_user_principal_name;
}
void OAIExportError::setAdUserPrincipalName(const QString &ad_user_principal_name) {
    m_ad_user_principal_name = ad_user_principal_name;
    m_ad_user_principal_name_isSet = true;
}

bool OAIExportError::is_ad_user_principal_name_Set() const{
    return m_ad_user_principal_name_isSet;
}

bool OAIExportError::is_ad_user_principal_name_Valid() const{
    return m_ad_user_principal_name_isValid;
}

bool OAIExportError::isAttributeMultiValue() const {
    return m_attribute_multi_value;
}
void OAIExportError::setAttributeMultiValue(const bool &attribute_multi_value) {
    m_attribute_multi_value = attribute_multi_value;
    m_attribute_multi_value_isSet = true;
}

bool OAIExportError::is_attribute_multi_value_Set() const{
    return m_attribute_multi_value_isSet;
}

bool OAIExportError::is_attribute_multi_value_Valid() const{
    return m_attribute_multi_value_isValid;
}

QString OAIExportError::getAttributeName() const {
    return m_attribute_name;
}
void OAIExportError::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAIExportError::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAIExportError::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

QString OAIExportError::getAttributeValue() const {
    return m_attribute_value;
}
void OAIExportError::setAttributeValue(const QString &attribute_value) {
    m_attribute_value = attribute_value;
    m_attribute_value_isSet = true;
}

bool OAIExportError::is_attribute_value_Set() const{
    return m_attribute_value_isSet;
}

bool OAIExportError::is_attribute_value_Valid() const{
    return m_attribute_value_isValid;
}

QString OAIExportError::getCloudAnchor() const {
    return m_cloud_anchor;
}
void OAIExportError::setCloudAnchor(const QString &cloud_anchor) {
    m_cloud_anchor = cloud_anchor;
    m_cloud_anchor_isSet = true;
}

bool OAIExportError::is_cloud_anchor_Set() const{
    return m_cloud_anchor_isSet;
}

bool OAIExportError::is_cloud_anchor_Valid() const{
    return m_cloud_anchor_isValid;
}

QString OAIExportError::getConnectorId() const {
    return m_connector_id;
}
void OAIExportError::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIExportError::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIExportError::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIExportError::getCsObjectId() const {
    return m_cs_object_id;
}
void OAIExportError::setCsObjectId(const QString &cs_object_id) {
    m_cs_object_id = cs_object_id;
    m_cs_object_id_isSet = true;
}

bool OAIExportError::is_cs_object_id_Set() const{
    return m_cs_object_id_isSet;
}

bool OAIExportError::is_cs_object_id_Valid() const{
    return m_cs_object_id_isValid;
}

QString OAIExportError::getDn() const {
    return m_dn;
}
void OAIExportError::setDn(const QString &dn) {
    m_dn = dn;
    m_dn_isSet = true;
}

bool OAIExportError::is_dn_Set() const{
    return m_dn_isSet;
}

bool OAIExportError::is_dn_Valid() const{
    return m_dn_isValid;
}

QString OAIExportError::getErrorCode() const {
    return m_error_code;
}
void OAIExportError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIExportError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIExportError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIExportError::getId() const {
    return m_id;
}
void OAIExportError::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExportError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExportError::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIExportError::getLastDirSyncTime() const {
    return m_last_dir_sync_time;
}
void OAIExportError::setLastDirSyncTime(const QDateTime &last_dir_sync_time) {
    m_last_dir_sync_time = last_dir_sync_time;
    m_last_dir_sync_time_isSet = true;
}

bool OAIExportError::is_last_dir_sync_time_Set() const{
    return m_last_dir_sync_time_isSet;
}

bool OAIExportError::is_last_dir_sync_time_Valid() const{
    return m_last_dir_sync_time_isValid;
}

QString OAIExportError::getMaxLimit() const {
    return m_max_limit;
}
void OAIExportError::setMaxLimit(const QString &max_limit) {
    m_max_limit = max_limit;
    m_max_limit_isSet = true;
}

bool OAIExportError::is_max_limit_Set() const{
    return m_max_limit_isSet;
}

bool OAIExportError::is_max_limit_Valid() const{
    return m_max_limit_isValid;
}

QString OAIExportError::getMessage() const {
    return m_message;
}
void OAIExportError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIExportError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIExportError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIExportError::getMinLimit() const {
    return m_min_limit;
}
void OAIExportError::setMinLimit(const QString &min_limit) {
    m_min_limit = min_limit;
    m_min_limit_isSet = true;
}

bool OAIExportError::is_min_limit_Set() const{
    return m_min_limit_isSet;
}

bool OAIExportError::is_min_limit_Valid() const{
    return m_min_limit_isValid;
}

QString OAIExportError::getModifiedAttributeValue() const {
    return m_modified_attribute_value;
}
void OAIExportError::setModifiedAttributeValue(const QString &modified_attribute_value) {
    m_modified_attribute_value = modified_attribute_value;
    m_modified_attribute_value_isSet = true;
}

bool OAIExportError::is_modified_attribute_value_Set() const{
    return m_modified_attribute_value_isSet;
}

bool OAIExportError::is_modified_attribute_value_Valid() const{
    return m_modified_attribute_value_isValid;
}

QString OAIExportError::getObjectIdConflict() const {
    return m_object_id_conflict;
}
void OAIExportError::setObjectIdConflict(const QString &object_id_conflict) {
    m_object_id_conflict = object_id_conflict;
    m_object_id_conflict_isSet = true;
}

bool OAIExportError::is_object_id_conflict_Set() const{
    return m_object_id_conflict_isSet;
}

bool OAIExportError::is_object_id_conflict_Valid() const{
    return m_object_id_conflict_isValid;
}

qint32 OAIExportError::getRetryCount() const {
    return m_retry_count;
}
void OAIExportError::setRetryCount(const qint32 &retry_count) {
    m_retry_count = retry_count;
    m_retry_count_isSet = true;
}

bool OAIExportError::is_retry_count_Set() const{
    return m_retry_count_isSet;
}

bool OAIExportError::is_retry_count_Valid() const{
    return m_retry_count_isValid;
}

QString OAIExportError::getRunStepResultId() const {
    return m_run_step_result_id;
}
void OAIExportError::setRunStepResultId(const QString &run_step_result_id) {
    m_run_step_result_id = run_step_result_id;
    m_run_step_result_id_isSet = true;
}

bool OAIExportError::is_run_step_result_id_Set() const{
    return m_run_step_result_id_isSet;
}

bool OAIExportError::is_run_step_result_id_Valid() const{
    return m_run_step_result_id_isValid;
}

QString OAIExportError::getSamAccountName() const {
    return m_sam_account_name;
}
void OAIExportError::setSamAccountName(const QString &sam_account_name) {
    m_sam_account_name = sam_account_name;
    m_sam_account_name_isSet = true;
}

bool OAIExportError::is_sam_account_name_Set() const{
    return m_sam_account_name_isSet;
}

bool OAIExportError::is_sam_account_name_Valid() const{
    return m_sam_account_name_isValid;
}

QString OAIExportError::getServerErrorDetail() const {
    return m_server_error_detail;
}
void OAIExportError::setServerErrorDetail(const QString &server_error_detail) {
    m_server_error_detail = server_error_detail;
    m_server_error_detail_isSet = true;
}

bool OAIExportError::is_server_error_detail_Set() const{
    return m_server_error_detail_isSet;
}

bool OAIExportError::is_server_error_detail_Valid() const{
    return m_server_error_detail_isValid;
}

QDateTime OAIExportError::getTimeFirstOccured() const {
    return m_time_first_occured;
}
void OAIExportError::setTimeFirstOccured(const QDateTime &time_first_occured) {
    m_time_first_occured = time_first_occured;
    m_time_first_occured_isSet = true;
}

bool OAIExportError::is_time_first_occured_Set() const{
    return m_time_first_occured_isSet;
}

bool OAIExportError::is_time_first_occured_Valid() const{
    return m_time_first_occured_isValid;
}

QDateTime OAIExportError::getTimeOccured() const {
    return m_time_occured;
}
void OAIExportError::setTimeOccured(const QDateTime &time_occured) {
    m_time_occured = time_occured;
    m_time_occured_isSet = true;
}

bool OAIExportError::is_time_occured_Set() const{
    return m_time_occured_isSet;
}

bool OAIExportError::is_time_occured_Valid() const{
    return m_time_occured_isValid;
}

QString OAIExportError::getType() const {
    return m_type;
}
void OAIExportError::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExportError::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExportError::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExportError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aad_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_distinguished_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_object_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_source_of_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_distinguished_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_object_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_source_anchor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_source_of_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_multi_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_anchor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cs_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_dir_sync_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_attribute_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_conflict_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_step_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sam_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_error_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_first_occured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_occured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
