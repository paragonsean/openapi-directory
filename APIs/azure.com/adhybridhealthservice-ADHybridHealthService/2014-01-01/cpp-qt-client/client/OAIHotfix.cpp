/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHotfix.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHotfix::OAIHotfix(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHotfix::OAIHotfix() {
    this->initializeModel();
}

OAIHotfix::~OAIHotfix() {}

void OAIHotfix::initializeModel() {

    m_installed_date_isSet = false;
    m_installed_date_isValid = false;

    m_kb_name_isSet = false;
    m_kb_name_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;
}

void OAIHotfix::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHotfix::fromJsonObject(QJsonObject json) {

    m_installed_date_isValid = ::OpenAPI::fromJsonValue(m_installed_date, json[QString("installedDate")]);
    m_installed_date_isSet = !json[QString("installedDate")].isNull() && m_installed_date_isValid;

    m_kb_name_isValid = ::OpenAPI::fromJsonValue(m_kb_name, json[QString("kbName")]);
    m_kb_name_isSet = !json[QString("kbName")].isNull() && m_kb_name_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;
}

QString OAIHotfix::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHotfix::asJsonObject() const {
    QJsonObject obj;
    if (m_installed_date_isSet) {
        obj.insert(QString("installedDate"), ::OpenAPI::toJsonValue(m_installed_date));
    }
    if (m_kb_name_isSet) {
        obj.insert(QString("kbName"), ::OpenAPI::toJsonValue(m_kb_name));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    return obj;
}

QDateTime OAIHotfix::getInstalledDate() const {
    return m_installed_date;
}
void OAIHotfix::setInstalledDate(const QDateTime &installed_date) {
    m_installed_date = installed_date;
    m_installed_date_isSet = true;
}

bool OAIHotfix::is_installed_date_Set() const{
    return m_installed_date_isSet;
}

bool OAIHotfix::is_installed_date_Valid() const{
    return m_installed_date_isValid;
}

QString OAIHotfix::getKbName() const {
    return m_kb_name;
}
void OAIHotfix::setKbName(const QString &kb_name) {
    m_kb_name = kb_name;
    m_kb_name_isSet = true;
}

bool OAIHotfix::is_kb_name_Set() const{
    return m_kb_name_isSet;
}

bool OAIHotfix::is_kb_name_Valid() const{
    return m_kb_name_isValid;
}

QString OAIHotfix::getLink() const {
    return m_link;
}
void OAIHotfix::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIHotfix::is_link_Set() const{
    return m_link_isSet;
}

bool OAIHotfix::is_link_Valid() const{
    return m_link_isValid;
}

bool OAIHotfix::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_installed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kb_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHotfix::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
