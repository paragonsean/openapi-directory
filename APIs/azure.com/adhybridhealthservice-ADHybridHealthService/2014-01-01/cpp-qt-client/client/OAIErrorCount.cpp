/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorCount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorCount::OAIErrorCount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorCount::OAIErrorCount() {
    this->initializeModel();
}

OAIErrorCount::~OAIErrorCount() {}

void OAIErrorCount::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_error_bucket_isSet = false;
    m_error_bucket_isValid = false;

    m_truncated_isSet = false;
    m_truncated_isValid = false;
}

void OAIErrorCount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorCount::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_error_bucket_isValid = ::OpenAPI::fromJsonValue(m_error_bucket, json[QString("errorBucket")]);
    m_error_bucket_isSet = !json[QString("errorBucket")].isNull() && m_error_bucket_isValid;

    m_truncated_isValid = ::OpenAPI::fromJsonValue(m_truncated, json[QString("truncated")]);
    m_truncated_isSet = !json[QString("truncated")].isNull() && m_truncated_isValid;
}

QString OAIErrorCount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorCount::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_error_bucket_isSet) {
        obj.insert(QString("errorBucket"), ::OpenAPI::toJsonValue(m_error_bucket));
    }
    if (m_truncated_isSet) {
        obj.insert(QString("truncated"), ::OpenAPI::toJsonValue(m_truncated));
    }
    return obj;
}

qint32 OAIErrorCount::getCount() const {
    return m_count;
}
void OAIErrorCount::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIErrorCount::is_count_Set() const{
    return m_count_isSet;
}

bool OAIErrorCount::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIErrorCount::getErrorBucket() const {
    return m_error_bucket;
}
void OAIErrorCount::setErrorBucket(const QString &error_bucket) {
    m_error_bucket = error_bucket;
    m_error_bucket_isSet = true;
}

bool OAIErrorCount::is_error_bucket_Set() const{
    return m_error_bucket_isSet;
}

bool OAIErrorCount::is_error_bucket_Valid() const{
    return m_error_bucket_isValid;
}

bool OAIErrorCount::isTruncated() const {
    return m_truncated;
}
void OAIErrorCount::setTruncated(const bool &truncated) {
    m_truncated = truncated;
    m_truncated_isSet = true;
}

bool OAIErrorCount::is_truncated_Set() const{
    return m_truncated_isSet;
}

bool OAIErrorCount::is_truncated_Valid() const{
    return m_truncated_isValid;
}

bool OAIErrorCount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorCount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
