/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorConnectionError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorConnectionError::OAIConnectorConnectionError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorConnectionError::OAIConnectorConnectionError() {
    this->initializeModel();
}

OAIConnectorConnectionError::~OAIConnectorConnectionError() {}

void OAIConnectorConnectionError::initializeModel() {

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_run_step_result_id_isSet = false;
    m_run_step_result_id_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_time_occured_isSet = false;
    m_time_occured_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConnectorConnectionError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorConnectionError::fromJsonObject(QJsonObject json) {

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_run_step_result_id_isValid = ::OpenAPI::fromJsonValue(m_run_step_result_id, json[QString("runStepResultId")]);
    m_run_step_result_id_isSet = !json[QString("runStepResultId")].isNull() && m_run_step_result_id_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_time_occured_isValid = ::OpenAPI::fromJsonValue(m_time_occured, json[QString("timeOccured")]);
    m_time_occured_isSet = !json[QString("timeOccured")].isNull() && m_time_occured_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConnectorConnectionError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorConnectionError::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_run_step_result_id_isSet) {
        obj.insert(QString("runStepResultId"), ::OpenAPI::toJsonValue(m_run_step_result_id));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_time_occured_isSet) {
        obj.insert(QString("timeOccured"), ::OpenAPI::toJsonValue(m_time_occured));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIConnectorConnectionError::getConnectorId() const {
    return m_connector_id;
}
void OAIConnectorConnectionError::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIConnectorConnectionError::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIConnectorConnectionError::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIConnectorConnectionError::getErrorCode() const {
    return m_error_code;
}
void OAIConnectorConnectionError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIConnectorConnectionError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIConnectorConnectionError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIConnectorConnectionError::getId() const {
    return m_id;
}
void OAIConnectorConnectionError::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConnectorConnectionError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConnectorConnectionError::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConnectorConnectionError::getMessage() const {
    return m_message;
}
void OAIConnectorConnectionError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIConnectorConnectionError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIConnectorConnectionError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIConnectorConnectionError::getRunStepResultId() const {
    return m_run_step_result_id;
}
void OAIConnectorConnectionError::setRunStepResultId(const QString &run_step_result_id) {
    m_run_step_result_id = run_step_result_id;
    m_run_step_result_id_isSet = true;
}

bool OAIConnectorConnectionError::is_run_step_result_id_Set() const{
    return m_run_step_result_id_isSet;
}

bool OAIConnectorConnectionError::is_run_step_result_id_Valid() const{
    return m_run_step_result_id_isValid;
}

QString OAIConnectorConnectionError::getServer() const {
    return m_server;
}
void OAIConnectorConnectionError::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIConnectorConnectionError::is_server_Set() const{
    return m_server_isSet;
}

bool OAIConnectorConnectionError::is_server_Valid() const{
    return m_server_isValid;
}

QDateTime OAIConnectorConnectionError::getTimeOccured() const {
    return m_time_occured;
}
void OAIConnectorConnectionError::setTimeOccured(const QDateTime &time_occured) {
    m_time_occured = time_occured;
    m_time_occured_isSet = true;
}

bool OAIConnectorConnectionError::is_time_occured_Set() const{
    return m_time_occured_isSet;
}

bool OAIConnectorConnectionError::is_time_occured_Valid() const{
    return m_time_occured_isValid;
}

QString OAIConnectorConnectionError::getType() const {
    return m_type;
}
void OAIConnectorConnectionError::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConnectorConnectionError::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConnectorConnectionError::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConnectorConnectionError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_step_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_occured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorConnectionError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
