/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServicesApi_H
#define OAI_OAIServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorCounts.h"
#include "OAIExportStatuses.h"
#include "OAIItem.h"
#include "OAIItems.h"
#include "OAIMergedExportErrors.h"
#include "OAIResult.h"
#include "OAIServiceProperties.h"
#include "OAIServices.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServicesApi : public QObject {
    Q_OBJECT

public:
    OAIServicesApi(const int timeOut = 0);
    ~OAIServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  confirm bool [optional]
    */
    virtual void addsServicesDelete(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &confirm = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void addsServicesGet(const QString &service_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  service_type QString [optional]
    * @param[in]  skip_count qint32 [optional]
    * @param[in]  take_count qint32 [optional]
    */
    virtual void addsServicesListPremiumServices(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service OAIServiceProperties [required]
    */
    virtual void addsServicesUpdate(const QString &service_name, const QString &api_version, const OAIServiceProperties &service);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service OAIServiceProperties [required]
    */
    virtual void servicesAdd(const QString &api_version, const OAIServiceProperties &service);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  confirm bool [optional]
    */
    virtual void servicesDelete(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &confirm = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesGet(const QString &service_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesGetFeatureAvailibility(const QString &service_name, const QString &feature_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesGetTenantWhitelisting(const QString &service_name, const QString &feature_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  service_type QString [optional]
    * @param[in]  skip_count qint32 [optional]
    * @param[in]  take_count qint32 [optional]
    */
    virtual void servicesList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesListExportErrors(const QString &service_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  error_bucket QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesListExportErrorsV2(const QString &service_name, const QString &error_bucket, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesListExportStatus(const QString &service_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesListMonitoringConfigurations(const QString &service_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  service_type QString [optional]
    * @param[in]  skip_count qint32 [optional]
    * @param[in]  take_count qint32 [optional]
    */
    virtual void servicesListPremium(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service OAIServiceProperties [required]
    */
    virtual void servicesUpdate(const QString &service_name, const QString &api_version, const OAIServiceProperties &service);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  configuration_setting OAIItem [required]
    */
    virtual void servicesUpdateMonitoringConfiguration(const QString &service_name, const QString &api_version, const OAIItem &configuration_setting);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addsServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void addsServicesGetCallback(OAIHttpRequestWorker *worker);
    void addsServicesListPremiumServicesCallback(OAIHttpRequestWorker *worker);
    void addsServicesUpdateCallback(OAIHttpRequestWorker *worker);
    void servicesAddCallback(OAIHttpRequestWorker *worker);
    void servicesDeleteCallback(OAIHttpRequestWorker *worker);
    void servicesGetCallback(OAIHttpRequestWorker *worker);
    void servicesGetFeatureAvailibilityCallback(OAIHttpRequestWorker *worker);
    void servicesGetTenantWhitelistingCallback(OAIHttpRequestWorker *worker);
    void servicesListCallback(OAIHttpRequestWorker *worker);
    void servicesListExportErrorsCallback(OAIHttpRequestWorker *worker);
    void servicesListExportErrorsV2Callback(OAIHttpRequestWorker *worker);
    void servicesListExportStatusCallback(OAIHttpRequestWorker *worker);
    void servicesListMonitoringConfigurationsCallback(OAIHttpRequestWorker *worker);
    void servicesListPremiumCallback(OAIHttpRequestWorker *worker);
    void servicesUpdateCallback(OAIHttpRequestWorker *worker);
    void servicesUpdateMonitoringConfigurationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addsServicesDeleteSignal();
    void addsServicesGetSignal(OAIServiceProperties summary);
    void addsServicesListPremiumServicesSignal(OAIServices summary);
    void addsServicesUpdateSignal(OAIServiceProperties summary);
    void servicesAddSignal(OAIServiceProperties summary);
    void servicesDeleteSignal();
    void servicesGetSignal(OAIServiceProperties summary);
    void servicesGetFeatureAvailibilitySignal(OAIResult summary);
    void servicesGetTenantWhitelistingSignal(OAIResult summary);
    void servicesListSignal(OAIServices summary);
    void servicesListExportErrorsSignal(OAIErrorCounts summary);
    void servicesListExportErrorsV2Signal(OAIMergedExportErrors summary);
    void servicesListExportStatusSignal(OAIExportStatuses summary);
    void servicesListMonitoringConfigurationsSignal(OAIItems summary);
    void servicesListPremiumSignal(OAIServices summary);
    void servicesUpdateSignal(OAIServiceProperties summary);
    void servicesUpdateMonitoringConfigurationSignal();


    void addsServicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void addsServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceProperties summary);
    void addsServicesListPremiumServicesSignalFull(OAIHttpRequestWorker *worker, OAIServices summary);
    void addsServicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceProperties summary);
    void servicesAddSignalFull(OAIHttpRequestWorker *worker, OAIServiceProperties summary);
    void servicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void servicesGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceProperties summary);
    void servicesGetFeatureAvailibilitySignalFull(OAIHttpRequestWorker *worker, OAIResult summary);
    void servicesGetTenantWhitelistingSignalFull(OAIHttpRequestWorker *worker, OAIResult summary);
    void servicesListSignalFull(OAIHttpRequestWorker *worker, OAIServices summary);
    void servicesListExportErrorsSignalFull(OAIHttpRequestWorker *worker, OAIErrorCounts summary);
    void servicesListExportErrorsV2SignalFull(OAIHttpRequestWorker *worker, OAIMergedExportErrors summary);
    void servicesListExportStatusSignalFull(OAIHttpRequestWorker *worker, OAIExportStatuses summary);
    void servicesListMonitoringConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIItems summary);
    void servicesListPremiumSignalFull(OAIHttpRequestWorker *worker, OAIServices summary);
    void servicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServiceProperties summary);
    void servicesUpdateMonitoringConfigurationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addsServicesDeleteSignalError() instead")
    void addsServicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesGetSignalError() instead")
    void addsServicesGetSignalE(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesGetSignalError(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListPremiumServicesSignalError() instead")
    void addsServicesListPremiumServicesSignalE(OAIServices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListPremiumServicesSignalError(OAIServices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesUpdateSignalError() instead")
    void addsServicesUpdateSignalE(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesUpdateSignalError(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesAddSignalError() instead")
    void servicesAddSignalE(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesAddSignalError(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDeleteSignalError() instead")
    void servicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetSignalError() instead")
    void servicesGetSignalE(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetSignalError(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetFeatureAvailibilitySignalError() instead")
    void servicesGetFeatureAvailibilitySignalE(OAIResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetFeatureAvailibilitySignalError(OAIResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetTenantWhitelistingSignalError() instead")
    void servicesGetTenantWhitelistingSignalE(OAIResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetTenantWhitelistingSignalError(OAIResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListSignalError() instead")
    void servicesListSignalE(OAIServices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListSignalError(OAIServices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListExportErrorsSignalError() instead")
    void servicesListExportErrorsSignalE(OAIErrorCounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListExportErrorsSignalError(OAIErrorCounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListExportErrorsV2SignalError() instead")
    void servicesListExportErrorsV2SignalE(OAIMergedExportErrors summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListExportErrorsV2SignalError(OAIMergedExportErrors summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListExportStatusSignalError() instead")
    void servicesListExportStatusSignalE(OAIExportStatuses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListExportStatusSignalError(OAIExportStatuses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListMonitoringConfigurationsSignalError() instead")
    void servicesListMonitoringConfigurationsSignalE(OAIItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListMonitoringConfigurationsSignalError(OAIItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListPremiumSignalError() instead")
    void servicesListPremiumSignalE(OAIServices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListPremiumSignalError(OAIServices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesUpdateSignalError() instead")
    void servicesUpdateSignalE(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesUpdateSignalError(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesUpdateMonitoringConfigurationSignalError() instead")
    void servicesUpdateMonitoringConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesUpdateMonitoringConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addsServicesDeleteSignalErrorFull() instead")
    void addsServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesGetSignalErrorFull() instead")
    void addsServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListPremiumServicesSignalErrorFull() instead")
    void addsServicesListPremiumServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListPremiumServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesUpdateSignalErrorFull() instead")
    void addsServicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesAddSignalErrorFull() instead")
    void servicesAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDeleteSignalErrorFull() instead")
    void servicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetSignalErrorFull() instead")
    void servicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetFeatureAvailibilitySignalErrorFull() instead")
    void servicesGetFeatureAvailibilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetFeatureAvailibilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetTenantWhitelistingSignalErrorFull() instead")
    void servicesGetTenantWhitelistingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetTenantWhitelistingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListSignalErrorFull() instead")
    void servicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListExportErrorsSignalErrorFull() instead")
    void servicesListExportErrorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListExportErrorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListExportErrorsV2SignalErrorFull() instead")
    void servicesListExportErrorsV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListExportErrorsV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListExportStatusSignalErrorFull() instead")
    void servicesListExportStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListExportStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListMonitoringConfigurationsSignalErrorFull() instead")
    void servicesListMonitoringConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListMonitoringConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListPremiumSignalErrorFull() instead")
    void servicesListPremiumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListPremiumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesUpdateSignalErrorFull() instead")
    void servicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesUpdateMonitoringConfigurationSignalErrorFull() instead")
    void servicesUpdateMonitoringConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesUpdateMonitoringConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
