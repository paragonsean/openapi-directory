/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimension::OAIDimension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimension::OAIDimension() {
    this->initializeModel();
}

OAIDimension::~OAIDimension() {}

void OAIDimension::initializeModel() {

    m_active_alerts_isSet = false;
    m_active_alerts_isValid = false;

    m_additional_information_isSet = false;
    m_additional_information_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_health_isSet = false;
    m_health_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_resolved_alerts_isSet = false;
    m_resolved_alerts_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_simple_properties_isSet = false;
    m_simple_properties_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDimension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimension::fromJsonObject(QJsonObject json) {

    m_active_alerts_isValid = ::OpenAPI::fromJsonValue(m_active_alerts, json[QString("activeAlerts")]);
    m_active_alerts_isSet = !json[QString("activeAlerts")].isNull() && m_active_alerts_isValid;

    m_additional_information_isValid = ::OpenAPI::fromJsonValue(m_additional_information, json[QString("additionalInformation")]);
    m_additional_information_isSet = !json[QString("additionalInformation")].isNull() && m_additional_information_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_health_isValid = ::OpenAPI::fromJsonValue(m_health, json[QString("health")]);
    m_health_isSet = !json[QString("health")].isNull() && m_health_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_resolved_alerts_isValid = ::OpenAPI::fromJsonValue(m_resolved_alerts, json[QString("resolvedAlerts")]);
    m_resolved_alerts_isSet = !json[QString("resolvedAlerts")].isNull() && m_resolved_alerts_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_simple_properties_isValid = ::OpenAPI::fromJsonValue(m_simple_properties, json[QString("simpleProperties")]);
    m_simple_properties_isSet = !json[QString("simpleProperties")].isNull() && m_simple_properties_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDimension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimension::asJsonObject() const {
    QJsonObject obj;
    if (m_active_alerts_isSet) {
        obj.insert(QString("activeAlerts"), ::OpenAPI::toJsonValue(m_active_alerts));
    }
    if (m_additional_information_isSet) {
        obj.insert(QString("additionalInformation"), ::OpenAPI::toJsonValue(m_additional_information));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_health_isSet) {
        obj.insert(QString("health"), ::OpenAPI::toJsonValue(m_health));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_resolved_alerts_isSet) {
        obj.insert(QString("resolvedAlerts"), ::OpenAPI::toJsonValue(m_resolved_alerts));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_simple_properties_isSet) {
        obj.insert(QString("simpleProperties"), ::OpenAPI::toJsonValue(m_simple_properties));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIDimension::getActiveAlerts() const {
    return m_active_alerts;
}
void OAIDimension::setActiveAlerts(const qint32 &active_alerts) {
    m_active_alerts = active_alerts;
    m_active_alerts_isSet = true;
}

bool OAIDimension::is_active_alerts_Set() const{
    return m_active_alerts_isSet;
}

bool OAIDimension::is_active_alerts_Valid() const{
    return m_active_alerts_isValid;
}

QString OAIDimension::getAdditionalInformation() const {
    return m_additional_information;
}
void OAIDimension::setAdditionalInformation(const QString &additional_information) {
    m_additional_information = additional_information;
    m_additional_information_isSet = true;
}

bool OAIDimension::is_additional_information_Set() const{
    return m_additional_information_isSet;
}

bool OAIDimension::is_additional_information_Valid() const{
    return m_additional_information_isValid;
}

QString OAIDimension::getDisplayName() const {
    return m_display_name;
}
void OAIDimension::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDimension::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDimension::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDimension::getHealth() const {
    return m_health;
}
void OAIDimension::setHealth(const QString &health) {
    m_health = health;
    m_health_isSet = true;
}

bool OAIDimension::is_health_Set() const{
    return m_health_isSet;
}

bool OAIDimension::is_health_Valid() const{
    return m_health_isValid;
}

QDateTime OAIDimension::getLastUpdated() const {
    return m_last_updated;
}
void OAIDimension::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDimension::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDimension::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAIDimension::getResolvedAlerts() const {
    return m_resolved_alerts;
}
void OAIDimension::setResolvedAlerts(const qint32 &resolved_alerts) {
    m_resolved_alerts = resolved_alerts;
    m_resolved_alerts_isSet = true;
}

bool OAIDimension::is_resolved_alerts_Set() const{
    return m_resolved_alerts_isSet;
}

bool OAIDimension::is_resolved_alerts_Valid() const{
    return m_resolved_alerts_isValid;
}

QString OAIDimension::getSignature() const {
    return m_signature;
}
void OAIDimension::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIDimension::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIDimension::is_signature_Valid() const{
    return m_signature_isValid;
}

OAIObject OAIDimension::getSimpleProperties() const {
    return m_simple_properties;
}
void OAIDimension::setSimpleProperties(const OAIObject &simple_properties) {
    m_simple_properties = simple_properties;
    m_simple_properties_isSet = true;
}

bool OAIDimension::is_simple_properties_Set() const{
    return m_simple_properties_isSet;
}

bool OAIDimension::is_simple_properties_Valid() const{
    return m_simple_properties_isValid;
}

QString OAIDimension::getType() const {
    return m_type;
}
void OAIDimension::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDimension::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDimension::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDimension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_alerts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
