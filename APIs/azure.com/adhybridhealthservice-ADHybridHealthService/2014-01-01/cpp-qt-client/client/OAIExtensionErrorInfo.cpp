/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtensionErrorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtensionErrorInfo::OAIExtensionErrorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtensionErrorInfo::OAIExtensionErrorInfo() {
    this->initializeModel();
}

OAIExtensionErrorInfo::~OAIExtensionErrorInfo() {}

void OAIExtensionErrorInfo::initializeModel() {

    m_call_stack_isSet = false;
    m_call_stack_isValid = false;

    m_extension_context_isSet = false;
    m_extension_context_isValid = false;

    m_extension_name_isSet = false;
    m_extension_name_isValid = false;
}

void OAIExtensionErrorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtensionErrorInfo::fromJsonObject(QJsonObject json) {

    m_call_stack_isValid = ::OpenAPI::fromJsonValue(m_call_stack, json[QString("callStack")]);
    m_call_stack_isSet = !json[QString("callStack")].isNull() && m_call_stack_isValid;

    m_extension_context_isValid = ::OpenAPI::fromJsonValue(m_extension_context, json[QString("extensionContext")]);
    m_extension_context_isSet = !json[QString("extensionContext")].isNull() && m_extension_context_isValid;

    m_extension_name_isValid = ::OpenAPI::fromJsonValue(m_extension_name, json[QString("extensionName")]);
    m_extension_name_isSet = !json[QString("extensionName")].isNull() && m_extension_name_isValid;
}

QString OAIExtensionErrorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtensionErrorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_call_stack_isSet) {
        obj.insert(QString("callStack"), ::OpenAPI::toJsonValue(m_call_stack));
    }
    if (m_extension_context_isSet) {
        obj.insert(QString("extensionContext"), ::OpenAPI::toJsonValue(m_extension_context));
    }
    if (m_extension_name_isSet) {
        obj.insert(QString("extensionName"), ::OpenAPI::toJsonValue(m_extension_name));
    }
    return obj;
}

QString OAIExtensionErrorInfo::getCallStack() const {
    return m_call_stack;
}
void OAIExtensionErrorInfo::setCallStack(const QString &call_stack) {
    m_call_stack = call_stack;
    m_call_stack_isSet = true;
}

bool OAIExtensionErrorInfo::is_call_stack_Set() const{
    return m_call_stack_isSet;
}

bool OAIExtensionErrorInfo::is_call_stack_Valid() const{
    return m_call_stack_isValid;
}

QString OAIExtensionErrorInfo::getExtensionContext() const {
    return m_extension_context;
}
void OAIExtensionErrorInfo::setExtensionContext(const QString &extension_context) {
    m_extension_context = extension_context;
    m_extension_context_isSet = true;
}

bool OAIExtensionErrorInfo::is_extension_context_Set() const{
    return m_extension_context_isSet;
}

bool OAIExtensionErrorInfo::is_extension_context_Valid() const{
    return m_extension_context_isValid;
}

QString OAIExtensionErrorInfo::getExtensionName() const {
    return m_extension_name;
}
void OAIExtensionErrorInfo::setExtensionName(const QString &extension_name) {
    m_extension_name = extension_name;
    m_extension_name_isSet = true;
}

bool OAIExtensionErrorInfo::is_extension_name_Set() const{
    return m_extension_name_isSet;
}

bool OAIExtensionErrorInfo::is_extension_name_Valid() const{
    return m_extension_name_isValid;
}

bool OAIExtensionErrorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_stack_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtensionErrorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
