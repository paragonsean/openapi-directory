/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnector::OAIConnector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnector::OAIConnector() {
    this->initializeModel();
}

OAIConnector::~OAIConnector() {}

void OAIConnector::initializeModel() {

    m_attributes_included_isSet = false;
    m_attributes_included_isValid = false;

    m_classes_included_isSet = false;
    m_classes_included_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partitions_isSet = false;
    m_partitions_isValid = false;

    m_password_hash_sync_configuration_isSet = false;
    m_password_hash_sync_configuration_isValid = false;

    m_password_management_settings_isSet = false;
    m_password_management_settings_isValid = false;

    m_run_profiles_isSet = false;
    m_run_profiles_isValid = false;

    m_schema_xml_isSet = false;
    m_schema_xml_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;

    m_time_last_modified_isSet = false;
    m_time_last_modified_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIConnector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnector::fromJsonObject(QJsonObject json) {

    m_attributes_included_isValid = ::OpenAPI::fromJsonValue(m_attributes_included, json[QString("attributesIncluded")]);
    m_attributes_included_isSet = !json[QString("attributesIncluded")].isNull() && m_attributes_included_isValid;

    m_classes_included_isValid = ::OpenAPI::fromJsonValue(m_classes_included, json[QString("classesIncluded")]);
    m_classes_included_isSet = !json[QString("classesIncluded")].isNull() && m_classes_included_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_partitions_isValid = ::OpenAPI::fromJsonValue(m_partitions, json[QString("partitions")]);
    m_partitions_isSet = !json[QString("partitions")].isNull() && m_partitions_isValid;

    m_password_hash_sync_configuration_isValid = ::OpenAPI::fromJsonValue(m_password_hash_sync_configuration, json[QString("passwordHashSyncConfiguration")]);
    m_password_hash_sync_configuration_isSet = !json[QString("passwordHashSyncConfiguration")].isNull() && m_password_hash_sync_configuration_isValid;

    m_password_management_settings_isValid = ::OpenAPI::fromJsonValue(m_password_management_settings, json[QString("passwordManagementSettings")]);
    m_password_management_settings_isSet = !json[QString("passwordManagementSettings")].isNull() && m_password_management_settings_isValid;

    m_run_profiles_isValid = ::OpenAPI::fromJsonValue(m_run_profiles, json[QString("runProfiles")]);
    m_run_profiles_isSet = !json[QString("runProfiles")].isNull() && m_run_profiles_isValid;

    m_schema_xml_isValid = ::OpenAPI::fromJsonValue(m_schema_xml, json[QString("schemaXml")]);
    m_schema_xml_isSet = !json[QString("schemaXml")].isNull() && m_schema_xml_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("timeCreated")]);
    m_time_created_isSet = !json[QString("timeCreated")].isNull() && m_time_created_isValid;

    m_time_last_modified_isValid = ::OpenAPI::fromJsonValue(m_time_last_modified, json[QString("timeLastModified")]);
    m_time_last_modified_isSet = !json[QString("timeLastModified")].isNull() && m_time_last_modified_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIConnector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnector::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes_included.size() > 0) {
        obj.insert(QString("attributesIncluded"), ::OpenAPI::toJsonValue(m_attributes_included));
    }
    if (m_classes_included.size() > 0) {
        obj.insert(QString("classesIncluded"), ::OpenAPI::toJsonValue(m_classes_included));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partitions.size() > 0) {
        obj.insert(QString("partitions"), ::OpenAPI::toJsonValue(m_partitions));
    }
    if (m_password_hash_sync_configuration_isSet) {
        obj.insert(QString("passwordHashSyncConfiguration"), ::OpenAPI::toJsonValue(m_password_hash_sync_configuration));
    }
    if (m_password_management_settings_isSet) {
        obj.insert(QString("passwordManagementSettings"), ::OpenAPI::toJsonValue(m_password_management_settings));
    }
    if (m_run_profiles.size() > 0) {
        obj.insert(QString("runProfiles"), ::OpenAPI::toJsonValue(m_run_profiles));
    }
    if (m_schema_xml_isSet) {
        obj.insert(QString("schemaXml"), ::OpenAPI::toJsonValue(m_schema_xml));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("timeCreated"), ::OpenAPI::toJsonValue(m_time_created));
    }
    if (m_time_last_modified_isSet) {
        obj.insert(QString("timeLastModified"), ::OpenAPI::toJsonValue(m_time_last_modified));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<QString> OAIConnector::getAttributesIncluded() const {
    return m_attributes_included;
}
void OAIConnector::setAttributesIncluded(const QList<QString> &attributes_included) {
    m_attributes_included = attributes_included;
    m_attributes_included_isSet = true;
}

bool OAIConnector::is_attributes_included_Set() const{
    return m_attributes_included_isSet;
}

bool OAIConnector::is_attributes_included_Valid() const{
    return m_attributes_included_isValid;
}

QList<QString> OAIConnector::getClassesIncluded() const {
    return m_classes_included;
}
void OAIConnector::setClassesIncluded(const QList<QString> &classes_included) {
    m_classes_included = classes_included;
    m_classes_included_isSet = true;
}

bool OAIConnector::is_classes_included_Set() const{
    return m_classes_included_isSet;
}

bool OAIConnector::is_classes_included_Valid() const{
    return m_classes_included_isValid;
}

QString OAIConnector::getConnectorId() const {
    return m_connector_id;
}
void OAIConnector::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIConnector::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIConnector::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIConnector::getDescription() const {
    return m_description;
}
void OAIConnector::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConnector::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConnector::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIConnector::getId() const {
    return m_id;
}
void OAIConnector::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConnector::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConnector::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConnector::getName() const {
    return m_name;
}
void OAIConnector::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConnector::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConnector::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPartition> OAIConnector::getPartitions() const {
    return m_partitions;
}
void OAIConnector::setPartitions(const QList<OAIPartition> &partitions) {
    m_partitions = partitions;
    m_partitions_isSet = true;
}

bool OAIConnector::is_partitions_Set() const{
    return m_partitions_isSet;
}

bool OAIConnector::is_partitions_Valid() const{
    return m_partitions_isValid;
}

OAIObject OAIConnector::getPasswordHashSyncConfiguration() const {
    return m_password_hash_sync_configuration;
}
void OAIConnector::setPasswordHashSyncConfiguration(const OAIObject &password_hash_sync_configuration) {
    m_password_hash_sync_configuration = password_hash_sync_configuration;
    m_password_hash_sync_configuration_isSet = true;
}

bool OAIConnector::is_password_hash_sync_configuration_Set() const{
    return m_password_hash_sync_configuration_isSet;
}

bool OAIConnector::is_password_hash_sync_configuration_Valid() const{
    return m_password_hash_sync_configuration_isValid;
}

OAIObject OAIConnector::getPasswordManagementSettings() const {
    return m_password_management_settings;
}
void OAIConnector::setPasswordManagementSettings(const OAIObject &password_management_settings) {
    m_password_management_settings = password_management_settings;
    m_password_management_settings_isSet = true;
}

bool OAIConnector::is_password_management_settings_Set() const{
    return m_password_management_settings_isSet;
}

bool OAIConnector::is_password_management_settings_Valid() const{
    return m_password_management_settings_isValid;
}

QList<OAIRunProfile> OAIConnector::getRunProfiles() const {
    return m_run_profiles;
}
void OAIConnector::setRunProfiles(const QList<OAIRunProfile> &run_profiles) {
    m_run_profiles = run_profiles;
    m_run_profiles_isSet = true;
}

bool OAIConnector::is_run_profiles_Set() const{
    return m_run_profiles_isSet;
}

bool OAIConnector::is_run_profiles_Valid() const{
    return m_run_profiles_isValid;
}

QString OAIConnector::getSchemaXml() const {
    return m_schema_xml;
}
void OAIConnector::setSchemaXml(const QString &schema_xml) {
    m_schema_xml = schema_xml;
    m_schema_xml_isSet = true;
}

bool OAIConnector::is_schema_xml_Set() const{
    return m_schema_xml_isSet;
}

bool OAIConnector::is_schema_xml_Valid() const{
    return m_schema_xml_isValid;
}

QDateTime OAIConnector::getTimeCreated() const {
    return m_time_created;
}
void OAIConnector::setTimeCreated(const QDateTime &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAIConnector::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAIConnector::is_time_created_Valid() const{
    return m_time_created_isValid;
}

QDateTime OAIConnector::getTimeLastModified() const {
    return m_time_last_modified;
}
void OAIConnector::setTimeLastModified(const QDateTime &time_last_modified) {
    m_time_last_modified = time_last_modified;
    m_time_last_modified_isSet = true;
}

bool OAIConnector::is_time_last_modified_Set() const{
    return m_time_last_modified_isSet;
}

bool OAIConnector::is_time_last_modified_Valid() const{
    return m_time_last_modified_isValid;
}

QString OAIConnector::getType() const {
    return m_type;
}
void OAIConnector::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConnector::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConnector::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIConnector::getVersion() const {
    return m_version;
}
void OAIConnector::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIConnector::is_version_Set() const{
    return m_version_isSet;
}

bool OAIConnector::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIConnector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes_included.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_classes_included.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_hash_sync_configuration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_management_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
