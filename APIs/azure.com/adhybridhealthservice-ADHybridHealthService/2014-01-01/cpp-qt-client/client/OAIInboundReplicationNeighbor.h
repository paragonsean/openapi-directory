/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInboundReplicationNeighbor.h
 *
 * The replication summary for the domain controller inbound neighbor.
 */

#ifndef OAIInboundReplicationNeighbor_H
#define OAIInboundReplicationNeighbor_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInboundReplicationNeighbor : public OAIObject {
public:
    OAIInboundReplicationNeighbor();
    OAIInboundReplicationNeighbor(QString json);
    ~OAIInboundReplicationNeighbor() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdditionalInfo() const;
    void setAdditionalInfo(const QString &additional_info);
    bool is_additional_info_Set() const;
    bool is_additional_info_Valid() const;

    qint32 getConsecutiveFailureCount() const;
    void setConsecutiveFailureCount(const qint32 &consecutive_failure_count);
    bool is_consecutive_failure_count_Set() const;
    bool is_consecutive_failure_count_Valid() const;

    QString getErrorDescription() const;
    void setErrorDescription(const QString &error_description);
    bool is_error_description_Set() const;
    bool is_error_description_Valid() const;

    QString getErrorTitle() const;
    void setErrorTitle(const QString &error_title);
    bool is_error_title_Set() const;
    bool is_error_title_Valid() const;

    QString getFixDetails() const;
    void setFixDetails(const QString &fix_details);
    bool is_fix_details_Set() const;
    bool is_fix_details_Valid() const;

    QString getFixLink() const;
    void setFixLink(const QString &fix_link);
    bool is_fix_link_Set() const;
    bool is_fix_link_Valid() const;

    QDateTime getLastAttemptedSync() const;
    void setLastAttemptedSync(const QDateTime &last_attempted_sync);
    bool is_last_attempted_sync_Set() const;
    bool is_last_attempted_sync_Valid() const;

    qint32 getLastErrorCode() const;
    void setLastErrorCode(const qint32 &last_error_code);
    bool is_last_error_code_Set() const;
    bool is_last_error_code_Valid() const;

    QString getLastErrorMessage() const;
    void setLastErrorMessage(const QString &last_error_message);
    bool is_last_error_message_Set() const;
    bool is_last_error_message_Valid() const;

    QDateTime getLastSuccessfulSync() const;
    void setLastSuccessfulSync(const QDateTime &last_successful_sync);
    bool is_last_successful_sync_Set() const;
    bool is_last_successful_sync_Valid() const;

    QString getNamingContext() const;
    void setNamingContext(const QString &naming_context);
    bool is_naming_context_Set() const;
    bool is_naming_context_Valid() const;

    QString getSourceDomainController() const;
    void setSourceDomainController(const QString &source_domain_controller);
    bool is_source_domain_controller_Set() const;
    bool is_source_domain_controller_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_additional_info;
    bool m_additional_info_isSet;
    bool m_additional_info_isValid;

    qint32 m_consecutive_failure_count;
    bool m_consecutive_failure_count_isSet;
    bool m_consecutive_failure_count_isValid;

    QString m_error_description;
    bool m_error_description_isSet;
    bool m_error_description_isValid;

    QString m_error_title;
    bool m_error_title_isSet;
    bool m_error_title_isValid;

    QString m_fix_details;
    bool m_fix_details_isSet;
    bool m_fix_details_isValid;

    QString m_fix_link;
    bool m_fix_link_isSet;
    bool m_fix_link_isValid;

    QDateTime m_last_attempted_sync;
    bool m_last_attempted_sync_isSet;
    bool m_last_attempted_sync_isValid;

    qint32 m_last_error_code;
    bool m_last_error_code_isSet;
    bool m_last_error_code_isValid;

    QString m_last_error_message;
    bool m_last_error_message_isSet;
    bool m_last_error_message_isValid;

    QDateTime m_last_successful_sync;
    bool m_last_successful_sync_isSet;
    bool m_last_successful_sync_isValid;

    QString m_naming_context;
    bool m_naming_context_isSet;
    bool m_naming_context_isValid;

    QString m_source_domain_controller;
    bool m_source_domain_controller_isSet;
    bool m_source_domain_controller_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInboundReplicationNeighbor)

#endif // OAIInboundReplicationNeighbor_H
