/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlert::OAIAlert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlert::OAIAlert() {
    this->initializeModel();
}

OAIAlert::~OAIAlert() {}

void OAIAlert::initializeModel() {

    m_active_alert_properties_isSet = false;
    m_active_alert_properties_isValid = false;

    m_additional_information_isSet = false;
    m_additional_information_isValid = false;

    m_alert_id_isSet = false;
    m_alert_id_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_monitor_role_type_isSet = false;
    m_monitor_role_type_isValid = false;

    m_related_links_isSet = false;
    m_related_links_isValid = false;

    m_remediation_isSet = false;
    m_remediation_isValid = false;

    m_resolved_alert_properties_isSet = false;
    m_resolved_alert_properties_isValid = false;

    m_resolved_date_isSet = false;
    m_resolved_date_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_member_id_isSet = false;
    m_service_member_id_isValid = false;

    m_short_name_isSet = false;
    m_short_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIAlert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlert::fromJsonObject(QJsonObject json) {

    m_active_alert_properties_isValid = ::OpenAPI::fromJsonValue(m_active_alert_properties, json[QString("activeAlertProperties")]);
    m_active_alert_properties_isSet = !json[QString("activeAlertProperties")].isNull() && m_active_alert_properties_isValid;

    m_additional_information_isValid = ::OpenAPI::fromJsonValue(m_additional_information, json[QString("additionalInformation")]);
    m_additional_information_isSet = !json[QString("additionalInformation")].isNull() && m_additional_information_isValid;

    m_alert_id_isValid = ::OpenAPI::fromJsonValue(m_alert_id, json[QString("alertId")]);
    m_alert_id_isSet = !json[QString("alertId")].isNull() && m_alert_id_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_monitor_role_type_isValid = ::OpenAPI::fromJsonValue(m_monitor_role_type, json[QString("monitorRoleType")]);
    m_monitor_role_type_isSet = !json[QString("monitorRoleType")].isNull() && m_monitor_role_type_isValid;

    m_related_links_isValid = ::OpenAPI::fromJsonValue(m_related_links, json[QString("relatedLinks")]);
    m_related_links_isSet = !json[QString("relatedLinks")].isNull() && m_related_links_isValid;

    m_remediation_isValid = ::OpenAPI::fromJsonValue(m_remediation, json[QString("remediation")]);
    m_remediation_isSet = !json[QString("remediation")].isNull() && m_remediation_isValid;

    m_resolved_alert_properties_isValid = ::OpenAPI::fromJsonValue(m_resolved_alert_properties, json[QString("resolvedAlertProperties")]);
    m_resolved_alert_properties_isSet = !json[QString("resolvedAlertProperties")].isNull() && m_resolved_alert_properties_isValid;

    m_resolved_date_isValid = ::OpenAPI::fromJsonValue(m_resolved_date, json[QString("resolvedDate")]);
    m_resolved_date_isSet = !json[QString("resolvedDate")].isNull() && m_resolved_date_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_member_id_isValid = ::OpenAPI::fromJsonValue(m_service_member_id, json[QString("serviceMemberId")]);
    m_service_member_id_isSet = !json[QString("serviceMemberId")].isNull() && m_service_member_id_isValid;

    m_short_name_isValid = ::OpenAPI::fromJsonValue(m_short_name, json[QString("shortName")]);
    m_short_name_isSet = !json[QString("shortName")].isNull() && m_short_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIAlert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlert::asJsonObject() const {
    QJsonObject obj;
    if (m_active_alert_properties.size() > 0) {
        obj.insert(QString("activeAlertProperties"), ::OpenAPI::toJsonValue(m_active_alert_properties));
    }
    if (m_additional_information.size() > 0) {
        obj.insert(QString("additionalInformation"), ::OpenAPI::toJsonValue(m_additional_information));
    }
    if (m_alert_id_isSet) {
        obj.insert(QString("alertId"), ::OpenAPI::toJsonValue(m_alert_id));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_monitor_role_type_isSet) {
        obj.insert(QString("monitorRoleType"), ::OpenAPI::toJsonValue(m_monitor_role_type));
    }
    if (m_related_links.size() > 0) {
        obj.insert(QString("relatedLinks"), ::OpenAPI::toJsonValue(m_related_links));
    }
    if (m_remediation_isSet) {
        obj.insert(QString("remediation"), ::OpenAPI::toJsonValue(m_remediation));
    }
    if (m_resolved_alert_properties.size() > 0) {
        obj.insert(QString("resolvedAlertProperties"), ::OpenAPI::toJsonValue(m_resolved_alert_properties));
    }
    if (m_resolved_date_isSet) {
        obj.insert(QString("resolvedDate"), ::OpenAPI::toJsonValue(m_resolved_date));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_member_id_isSet) {
        obj.insert(QString("serviceMemberId"), ::OpenAPI::toJsonValue(m_service_member_id));
    }
    if (m_short_name_isSet) {
        obj.insert(QString("shortName"), ::OpenAPI::toJsonValue(m_short_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QList<OAIItem> OAIAlert::getActiveAlertProperties() const {
    return m_active_alert_properties;
}
void OAIAlert::setActiveAlertProperties(const QList<OAIItem> &active_alert_properties) {
    m_active_alert_properties = active_alert_properties;
    m_active_alert_properties_isSet = true;
}

bool OAIAlert::is_active_alert_properties_Set() const{
    return m_active_alert_properties_isSet;
}

bool OAIAlert::is_active_alert_properties_Valid() const{
    return m_active_alert_properties_isValid;
}

QList<OAIAdditionalInformation> OAIAlert::getAdditionalInformation() const {
    return m_additional_information;
}
void OAIAlert::setAdditionalInformation(const QList<OAIAdditionalInformation> &additional_information) {
    m_additional_information = additional_information;
    m_additional_information_isSet = true;
}

bool OAIAlert::is_additional_information_Set() const{
    return m_additional_information_isSet;
}

bool OAIAlert::is_additional_information_Valid() const{
    return m_additional_information_isValid;
}

QString OAIAlert::getAlertId() const {
    return m_alert_id;
}
void OAIAlert::setAlertId(const QString &alert_id) {
    m_alert_id = alert_id;
    m_alert_id_isSet = true;
}

bool OAIAlert::is_alert_id_Set() const{
    return m_alert_id_isSet;
}

bool OAIAlert::is_alert_id_Valid() const{
    return m_alert_id_isValid;
}

QDateTime OAIAlert::getCreatedDate() const {
    return m_created_date;
}
void OAIAlert::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIAlert::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIAlert::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIAlert::getDescription() const {
    return m_description;
}
void OAIAlert::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAlert::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAlert::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAlert::getDisplayName() const {
    return m_display_name;
}
void OAIAlert::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAlert::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAlert::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDateTime OAIAlert::getLastUpdated() const {
    return m_last_updated;
}
void OAIAlert::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAlert::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAlert::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIAlert::getLevel() const {
    return m_level;
}
void OAIAlert::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIAlert::is_level_Set() const{
    return m_level_isSet;
}

bool OAIAlert::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIAlert::getMonitorRoleType() const {
    return m_monitor_role_type;
}
void OAIAlert::setMonitorRoleType(const QString &monitor_role_type) {
    m_monitor_role_type = monitor_role_type;
    m_monitor_role_type_isSet = true;
}

bool OAIAlert::is_monitor_role_type_Set() const{
    return m_monitor_role_type_isSet;
}

bool OAIAlert::is_monitor_role_type_Valid() const{
    return m_monitor_role_type_isValid;
}

QList<OAIHelpLink> OAIAlert::getRelatedLinks() const {
    return m_related_links;
}
void OAIAlert::setRelatedLinks(const QList<OAIHelpLink> &related_links) {
    m_related_links = related_links;
    m_related_links_isSet = true;
}

bool OAIAlert::is_related_links_Set() const{
    return m_related_links_isSet;
}

bool OAIAlert::is_related_links_Valid() const{
    return m_related_links_isValid;
}

QString OAIAlert::getRemediation() const {
    return m_remediation;
}
void OAIAlert::setRemediation(const QString &remediation) {
    m_remediation = remediation;
    m_remediation_isSet = true;
}

bool OAIAlert::is_remediation_Set() const{
    return m_remediation_isSet;
}

bool OAIAlert::is_remediation_Valid() const{
    return m_remediation_isValid;
}

QList<OAIItem> OAIAlert::getResolvedAlertProperties() const {
    return m_resolved_alert_properties;
}
void OAIAlert::setResolvedAlertProperties(const QList<OAIItem> &resolved_alert_properties) {
    m_resolved_alert_properties = resolved_alert_properties;
    m_resolved_alert_properties_isSet = true;
}

bool OAIAlert::is_resolved_alert_properties_Set() const{
    return m_resolved_alert_properties_isSet;
}

bool OAIAlert::is_resolved_alert_properties_Valid() const{
    return m_resolved_alert_properties_isValid;
}

QDateTime OAIAlert::getResolvedDate() const {
    return m_resolved_date;
}
void OAIAlert::setResolvedDate(const QDateTime &resolved_date) {
    m_resolved_date = resolved_date;
    m_resolved_date_isSet = true;
}

bool OAIAlert::is_resolved_date_Set() const{
    return m_resolved_date_isSet;
}

bool OAIAlert::is_resolved_date_Valid() const{
    return m_resolved_date_isValid;
}

QString OAIAlert::getScope() const {
    return m_scope;
}
void OAIAlert::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAlert::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAlert::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIAlert::getServiceId() const {
    return m_service_id;
}
void OAIAlert::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIAlert::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIAlert::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIAlert::getServiceMemberId() const {
    return m_service_member_id;
}
void OAIAlert::setServiceMemberId(const QString &service_member_id) {
    m_service_member_id = service_member_id;
    m_service_member_id_isSet = true;
}

bool OAIAlert::is_service_member_id_Set() const{
    return m_service_member_id_isSet;
}

bool OAIAlert::is_service_member_id_Valid() const{
    return m_service_member_id_isValid;
}

QString OAIAlert::getShortName() const {
    return m_short_name;
}
void OAIAlert::setShortName(const QString &short_name) {
    m_short_name = short_name;
    m_short_name_isSet = true;
}

bool OAIAlert::is_short_name_Set() const{
    return m_short_name_isSet;
}

bool OAIAlert::is_short_name_Valid() const{
    return m_short_name_isValid;
}

QString OAIAlert::getState() const {
    return m_state;
}
void OAIAlert::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAlert::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAlert::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAlert::getTenantId() const {
    return m_tenant_id;
}
void OAIAlert::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIAlert::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIAlert::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIAlert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_alert_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_information.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_role_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remediation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_alert_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
