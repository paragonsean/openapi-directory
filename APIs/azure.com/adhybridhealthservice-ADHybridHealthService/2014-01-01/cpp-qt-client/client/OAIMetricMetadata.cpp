/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricMetadata::OAIMetricMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricMetadata::OAIMetricMetadata() {
    this->initializeModel();
}

OAIMetricMetadata::~OAIMetricMetadata() {}

void OAIMetricMetadata::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_groupings_isSet = false;
    m_groupings_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_is_dev_ops_isSet = false;
    m_is_dev_ops_isValid = false;

    m_is_perf_counter_isSet = false;
    m_is_perf_counter_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_metrics_processor_class_name_isSet = false;
    m_metrics_processor_class_name_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_value_kind_isSet = false;
    m_value_kind_isValid = false;
}

void OAIMetricMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricMetadata::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_groupings_isValid = ::OpenAPI::fromJsonValue(m_groupings, json[QString("groupings")]);
    m_groupings_isSet = !json[QString("groupings")].isNull() && m_groupings_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_is_dev_ops_isValid = ::OpenAPI::fromJsonValue(m_is_dev_ops, json[QString("isDevOps")]);
    m_is_dev_ops_isSet = !json[QString("isDevOps")].isNull() && m_is_dev_ops_isValid;

    m_is_perf_counter_isValid = ::OpenAPI::fromJsonValue(m_is_perf_counter, json[QString("isPerfCounter")]);
    m_is_perf_counter_isSet = !json[QString("isPerfCounter")].isNull() && m_is_perf_counter_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_metrics_processor_class_name_isValid = ::OpenAPI::fromJsonValue(m_metrics_processor_class_name, json[QString("metricsProcessorClassName")]);
    m_metrics_processor_class_name_isSet = !json[QString("metricsProcessorClassName")].isNull() && m_metrics_processor_class_name_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;

    m_value_kind_isValid = ::OpenAPI::fromJsonValue(m_value_kind, json[QString("valueKind")]);
    m_value_kind_isSet = !json[QString("valueKind")].isNull() && m_value_kind_isValid;
}

QString OAIMetricMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_groupings.size() > 0) {
        obj.insert(QString("groupings"), ::OpenAPI::toJsonValue(m_groupings));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_is_dev_ops_isSet) {
        obj.insert(QString("isDevOps"), ::OpenAPI::toJsonValue(m_is_dev_ops));
    }
    if (m_is_perf_counter_isSet) {
        obj.insert(QString("isPerfCounter"), ::OpenAPI::toJsonValue(m_is_perf_counter));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_metrics_processor_class_name_isSet) {
        obj.insert(QString("metricsProcessorClassName"), ::OpenAPI::toJsonValue(m_metrics_processor_class_name));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_value_kind_isSet) {
        obj.insert(QString("valueKind"), ::OpenAPI::toJsonValue(m_value_kind));
    }
    return obj;
}

QString OAIMetricMetadata::getDisplayName() const {
    return m_display_name;
}
void OAIMetricMetadata::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMetricMetadata::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMetricMetadata::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<OAIMetricGroup> OAIMetricMetadata::getGroupings() const {
    return m_groupings;
}
void OAIMetricMetadata::setGroupings(const QList<OAIMetricGroup> &groupings) {
    m_groupings = groupings;
    m_groupings_isSet = true;
}

bool OAIMetricMetadata::is_groupings_Set() const{
    return m_groupings_isSet;
}

bool OAIMetricMetadata::is_groupings_Valid() const{
    return m_groupings_isValid;
}

bool OAIMetricMetadata::isIsDefault() const {
    return m_is_default;
}
void OAIMetricMetadata::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIMetricMetadata::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIMetricMetadata::is_is_default_Valid() const{
    return m_is_default_isValid;
}

bool OAIMetricMetadata::isIsDevOps() const {
    return m_is_dev_ops;
}
void OAIMetricMetadata::setIsDevOps(const bool &is_dev_ops) {
    m_is_dev_ops = is_dev_ops;
    m_is_dev_ops_isSet = true;
}

bool OAIMetricMetadata::is_is_dev_ops_Set() const{
    return m_is_dev_ops_isSet;
}

bool OAIMetricMetadata::is_is_dev_ops_Valid() const{
    return m_is_dev_ops_isValid;
}

bool OAIMetricMetadata::isIsPerfCounter() const {
    return m_is_perf_counter;
}
void OAIMetricMetadata::setIsPerfCounter(const bool &is_perf_counter) {
    m_is_perf_counter = is_perf_counter;
    m_is_perf_counter_isSet = true;
}

bool OAIMetricMetadata::is_is_perf_counter_Set() const{
    return m_is_perf_counter_isSet;
}

bool OAIMetricMetadata::is_is_perf_counter_Valid() const{
    return m_is_perf_counter_isValid;
}

QString OAIMetricMetadata::getKind() const {
    return m_kind;
}
void OAIMetricMetadata::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIMetricMetadata::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIMetricMetadata::is_kind_Valid() const{
    return m_kind_isValid;
}

qint32 OAIMetricMetadata::getMaxValue() const {
    return m_max_value;
}
void OAIMetricMetadata::setMaxValue(const qint32 &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIMetricMetadata::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIMetricMetadata::is_max_value_Valid() const{
    return m_max_value_isValid;
}

QString OAIMetricMetadata::getMetricName() const {
    return m_metric_name;
}
void OAIMetricMetadata::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIMetricMetadata::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIMetricMetadata::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QString OAIMetricMetadata::getMetricsProcessorClassName() const {
    return m_metrics_processor_class_name;
}
void OAIMetricMetadata::setMetricsProcessorClassName(const QString &metrics_processor_class_name) {
    m_metrics_processor_class_name = metrics_processor_class_name;
    m_metrics_processor_class_name_isSet = true;
}

bool OAIMetricMetadata::is_metrics_processor_class_name_Set() const{
    return m_metrics_processor_class_name_isSet;
}

bool OAIMetricMetadata::is_metrics_processor_class_name_Valid() const{
    return m_metrics_processor_class_name_isValid;
}

qint32 OAIMetricMetadata::getMinValue() const {
    return m_min_value;
}
void OAIMetricMetadata::setMinValue(const qint32 &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIMetricMetadata::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIMetricMetadata::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QString OAIMetricMetadata::getValueKind() const {
    return m_value_kind;
}
void OAIMetricMetadata::setValueKind(const QString &value_kind) {
    m_value_kind = value_kind;
    m_value_kind_isSet = true;
}

bool OAIMetricMetadata::is_value_kind_Set() const{
    return m_value_kind_isSet;
}

bool OAIMetricMetadata::is_value_kind_Valid() const{
    return m_value_kind_isValid;
}

bool OAIMetricMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groupings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dev_ops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_perf_counter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_processor_class_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
