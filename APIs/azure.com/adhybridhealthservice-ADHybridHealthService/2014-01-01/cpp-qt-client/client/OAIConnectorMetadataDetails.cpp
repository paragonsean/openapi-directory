/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectorMetadataDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectorMetadataDetails::OAIConnectorMetadataDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectorMetadataDetails::OAIConnectorMetadataDetails() {
    this->initializeModel();
}

OAIConnectorMetadataDetails::~OAIConnectorMetadataDetails() {}

void OAIConnectorMetadataDetails::initializeModel() {

    m_connector_display_name_isSet = false;
    m_connector_display_name_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;
}

void OAIConnectorMetadataDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectorMetadataDetails::fromJsonObject(QJsonObject json) {

    m_connector_display_name_isValid = ::OpenAPI::fromJsonValue(m_connector_display_name, json[QString("connectorDisplayName")]);
    m_connector_display_name_isSet = !json[QString("connectorDisplayName")].isNull() && m_connector_display_name_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;
}

QString OAIConnectorMetadataDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectorMetadataDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_display_name_isSet) {
        obj.insert(QString("connectorDisplayName"), ::OpenAPI::toJsonValue(m_connector_display_name));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    return obj;
}

QString OAIConnectorMetadataDetails::getConnectorDisplayName() const {
    return m_connector_display_name;
}
void OAIConnectorMetadataDetails::setConnectorDisplayName(const QString &connector_display_name) {
    m_connector_display_name = connector_display_name;
    m_connector_display_name_isSet = true;
}

bool OAIConnectorMetadataDetails::is_connector_display_name_Set() const{
    return m_connector_display_name_isSet;
}

bool OAIConnectorMetadataDetails::is_connector_display_name_Valid() const{
    return m_connector_display_name_isValid;
}

QString OAIConnectorMetadataDetails::getConnectorId() const {
    return m_connector_id;
}
void OAIConnectorMetadataDetails::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIConnectorMetadataDetails::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIConnectorMetadataDetails::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

bool OAIConnectorMetadataDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectorMetadataDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
