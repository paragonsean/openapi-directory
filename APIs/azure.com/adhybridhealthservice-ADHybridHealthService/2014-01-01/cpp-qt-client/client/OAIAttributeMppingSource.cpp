/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeMppingSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeMppingSource::OAIAttributeMppingSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeMppingSource::OAIAttributeMppingSource() {
    this->initializeModel();
}

OAIAttributeMppingSource::~OAIAttributeMppingSource() {}

void OAIAttributeMppingSource::initializeModel() {

    m_constant_value_isSet = false;
    m_constant_value_isValid = false;

    m_dn_part_isSet = false;
    m_dn_part_isValid = false;

    m_script_context_isSet = false;
    m_script_context_isValid = false;

    m_source_attribute_isSet = false;
    m_source_attribute_isValid = false;
}

void OAIAttributeMppingSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeMppingSource::fromJsonObject(QJsonObject json) {

    m_constant_value_isValid = ::OpenAPI::fromJsonValue(m_constant_value, json[QString("constantValue")]);
    m_constant_value_isSet = !json[QString("constantValue")].isNull() && m_constant_value_isValid;

    m_dn_part_isValid = ::OpenAPI::fromJsonValue(m_dn_part, json[QString("dnPart")]);
    m_dn_part_isSet = !json[QString("dnPart")].isNull() && m_dn_part_isValid;

    m_script_context_isValid = ::OpenAPI::fromJsonValue(m_script_context, json[QString("scriptContext")]);
    m_script_context_isSet = !json[QString("scriptContext")].isNull() && m_script_context_isValid;

    m_source_attribute_isValid = ::OpenAPI::fromJsonValue(m_source_attribute, json[QString("sourceAttribute")]);
    m_source_attribute_isSet = !json[QString("sourceAttribute")].isNull() && m_source_attribute_isValid;
}

QString OAIAttributeMppingSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeMppingSource::asJsonObject() const {
    QJsonObject obj;
    if (m_constant_value_isSet) {
        obj.insert(QString("constantValue"), ::OpenAPI::toJsonValue(m_constant_value));
    }
    if (m_dn_part_isSet) {
        obj.insert(QString("dnPart"), ::OpenAPI::toJsonValue(m_dn_part));
    }
    if (m_script_context_isSet) {
        obj.insert(QString("scriptContext"), ::OpenAPI::toJsonValue(m_script_context));
    }
    if (m_source_attribute.size() > 0) {
        obj.insert(QString("sourceAttribute"), ::OpenAPI::toJsonValue(m_source_attribute));
    }
    return obj;
}

QString OAIAttributeMppingSource::getConstantValue() const {
    return m_constant_value;
}
void OAIAttributeMppingSource::setConstantValue(const QString &constant_value) {
    m_constant_value = constant_value;
    m_constant_value_isSet = true;
}

bool OAIAttributeMppingSource::is_constant_value_Set() const{
    return m_constant_value_isSet;
}

bool OAIAttributeMppingSource::is_constant_value_Valid() const{
    return m_constant_value_isValid;
}

qint32 OAIAttributeMppingSource::getDnPart() const {
    return m_dn_part;
}
void OAIAttributeMppingSource::setDnPart(const qint32 &dn_part) {
    m_dn_part = dn_part;
    m_dn_part_isSet = true;
}

bool OAIAttributeMppingSource::is_dn_part_Set() const{
    return m_dn_part_isSet;
}

bool OAIAttributeMppingSource::is_dn_part_Valid() const{
    return m_dn_part_isValid;
}

QString OAIAttributeMppingSource::getScriptContext() const {
    return m_script_context;
}
void OAIAttributeMppingSource::setScriptContext(const QString &script_context) {
    m_script_context = script_context;
    m_script_context_isSet = true;
}

bool OAIAttributeMppingSource::is_script_context_Set() const{
    return m_script_context_isSet;
}

bool OAIAttributeMppingSource::is_script_context_Valid() const{
    return m_script_context_isValid;
}

QList<QString> OAIAttributeMppingSource::getSourceAttribute() const {
    return m_source_attribute;
}
void OAIAttributeMppingSource::setSourceAttribute(const QList<QString> &source_attribute) {
    m_source_attribute = source_attribute;
    m_source_attribute_isSet = true;
}

bool OAIAttributeMppingSource::is_source_attribute_Set() const{
    return m_source_attribute_isSet;
}

bool OAIAttributeMppingSource::is_source_attribute_Valid() const{
    return m_source_attribute_isValid;
}

bool OAIAttributeMppingSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constant_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dn_part_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_attribute.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeMppingSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
