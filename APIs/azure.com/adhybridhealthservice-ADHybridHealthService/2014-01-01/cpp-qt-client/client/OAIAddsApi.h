/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAddsApi_H
#define OAI_OAIAddsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddsConfiguration.h"
#include "OAIAddsServiceMembers.h"
#include "OAIAlerts.h"
#include "OAICredentials.h"
#include "OAIDimensions.h"
#include "OAIForestSummary.h"
#include "OAIMetricMetadata.h"
#include "OAIMetricMetadataList.h"
#include "OAIMetricSets.h"
#include "OAIMetrics.h"
#include "OAIReplicationDetailsList.h"
#include "OAIReplicationStatus.h"
#include "OAIReplicationSummaryList.h"
#include "OAIServiceMember.h"
#include "OAIServiceMembers.h"
#include "OAIServiceProperties.h"
#include "OAIServices.h"
#include "OAIUserPreference.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAddsApi : public QObject {
    Q_OBJECT

public:
    OAIAddsApi(const int timeOut = 0);
    ~OAIAddsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  is_groupby_site bool [required]
    * @param[in]  next_partition_key QString [required]
    * @param[in]  next_row_key QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  take_count qint32 [optional]
    */
    virtual void adDomainServiceMembersList(const QString &service_name, const bool &is_groupby_site, const QString &next_partition_key, const QString &next_row_key, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &take_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  group_key QString [optional]
    * @param[in]  from_date QDateTime [optional]
    * @param[in]  to_date QDateTime [optional]
    */
    virtual void addsServiceGetMetrics(const QString &service_name, const QString &metric_name, const QString &group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &group_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  confirm bool [optional]
    */
    virtual void addsServiceMembersDelete(const QString &service_name, const QString &service_member_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &confirm = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void addsServiceMembersGet(const QString &service_name, const QString &service_member_id, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void addsServiceMembersList(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void addsServiceMembersListCredentials(const QString &service_name, const QString &service_member_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  service OAIServiceProperties [required]
    */
    virtual void addsServicesAdd(const QString &api_version, const OAIServiceProperties &service);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void addsServicesGetForestSummary(const QString &service_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void addsServicesGetMetricMetadata(const QString &service_name, const QString &metric_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  group_key QString [optional]
    * @param[in]  from_date QDateTime [optional]
    * @param[in]  to_date QDateTime [optional]
    */
    virtual void addsServicesGetMetricMetadataForGroup(const QString &service_name, const QString &metric_name, const QString &group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &group_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to_date = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  service_type QString [optional]
    * @param[in]  skip_count qint32 [optional]
    * @param[in]  take_count qint32 [optional]
    */
    virtual void addsServicesList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &take_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  perf_counter bool [optional]
    */
    virtual void addsServicesListMetricMetadata(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &perf_counter = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void addsServicesListMetricsAverage(const QString &service_name, const QString &metric_name, const QString &group_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  metric_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void addsServicesListMetricsSum(const QString &service_name, const QString &metric_name, const QString &group_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  with_details bool [optional]
    */
    virtual void addsServicesListReplicationDetails(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &with_details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  is_groupby_site bool [required]
    * @param[in]  query QString [required]
    * @param[in]  next_partition_key QString [required]
    * @param[in]  next_row_key QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  take_count qint32 [optional]
    */
    virtual void addsServicesListReplicationSummary(const QString &service_name, const bool &is_groupby_site, const QString &query, const QString &next_partition_key, const QString &next_row_key, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &take_count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  service_member_id QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    */
    virtual void addsServicesListServerAlerts(const QString &service_member_id, const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void addsServicesReplicationStatusGet(const QString &service_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service_member OAIServiceMember [required]
    */
    virtual void addsServicesServiceMembersAdd(const QString &service_name, const QString &api_version, const OAIServiceMember &service_member);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  dimension_type QString [optional]
    * @param[in]  dimension_signature QString [optional]
    */
    virtual void addsServicesServiceMembersList(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dimension_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dimension_signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  setting OAIUserPreference [required]
    */
    virtual void addsServicesUserPreferenceAdd(const QString &service_name, const QString &feature_name, const QString &api_version, const OAIUserPreference &setting);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void addsServicesUserPreferenceDelete(const QString &service_name, const QString &feature_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  feature_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void addsServicesUserPreferenceGet(const QString &service_name, const QString &feature_name, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    */
    virtual void alertsListAddsAlerts(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  grouping QString [optional]
    */
    virtual void configurationListAddsConfigurations(const QString &service_name, const ::OpenAPI::OptionalParam<QString> &grouping = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  dimension QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dimensionsListAddsDimensions(const QString &service_name, const QString &dimension, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adDomainServiceMembersListCallback(OAIHttpRequestWorker *worker);
    void addsServiceGetMetricsCallback(OAIHttpRequestWorker *worker);
    void addsServiceMembersDeleteCallback(OAIHttpRequestWorker *worker);
    void addsServiceMembersGetCallback(OAIHttpRequestWorker *worker);
    void addsServiceMembersListCallback(OAIHttpRequestWorker *worker);
    void addsServiceMembersListCredentialsCallback(OAIHttpRequestWorker *worker);
    void addsServicesAddCallback(OAIHttpRequestWorker *worker);
    void addsServicesGetForestSummaryCallback(OAIHttpRequestWorker *worker);
    void addsServicesGetMetricMetadataCallback(OAIHttpRequestWorker *worker);
    void addsServicesGetMetricMetadataForGroupCallback(OAIHttpRequestWorker *worker);
    void addsServicesListCallback(OAIHttpRequestWorker *worker);
    void addsServicesListMetricMetadataCallback(OAIHttpRequestWorker *worker);
    void addsServicesListMetricsAverageCallback(OAIHttpRequestWorker *worker);
    void addsServicesListMetricsSumCallback(OAIHttpRequestWorker *worker);
    void addsServicesListReplicationDetailsCallback(OAIHttpRequestWorker *worker);
    void addsServicesListReplicationSummaryCallback(OAIHttpRequestWorker *worker);
    void addsServicesListServerAlertsCallback(OAIHttpRequestWorker *worker);
    void addsServicesReplicationStatusGetCallback(OAIHttpRequestWorker *worker);
    void addsServicesServiceMembersAddCallback(OAIHttpRequestWorker *worker);
    void addsServicesServiceMembersListCallback(OAIHttpRequestWorker *worker);
    void addsServicesUserPreferenceAddCallback(OAIHttpRequestWorker *worker);
    void addsServicesUserPreferenceDeleteCallback(OAIHttpRequestWorker *worker);
    void addsServicesUserPreferenceGetCallback(OAIHttpRequestWorker *worker);
    void alertsListAddsAlertsCallback(OAIHttpRequestWorker *worker);
    void configurationListAddsConfigurationsCallback(OAIHttpRequestWorker *worker);
    void dimensionsListAddsDimensionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adDomainServiceMembersListSignal(OAIAddsServiceMembers summary);
    void addsServiceGetMetricsSignal(OAIMetricSets summary);
    void addsServiceMembersDeleteSignal();
    void addsServiceMembersGetSignal(OAIServiceMember summary);
    void addsServiceMembersListSignal(OAIAddsServiceMembers summary);
    void addsServiceMembersListCredentialsSignal(OAICredentials summary);
    void addsServicesAddSignal(OAIServiceProperties summary);
    void addsServicesGetForestSummarySignal(OAIForestSummary summary);
    void addsServicesGetMetricMetadataSignal(OAIMetricMetadata summary);
    void addsServicesGetMetricMetadataForGroupSignal(OAIMetricSets summary);
    void addsServicesListSignal(OAIServices summary);
    void addsServicesListMetricMetadataSignal(OAIMetricMetadataList summary);
    void addsServicesListMetricsAverageSignal(OAIMetrics summary);
    void addsServicesListMetricsSumSignal(OAIMetrics summary);
    void addsServicesListReplicationDetailsSignal(OAIReplicationDetailsList summary);
    void addsServicesListReplicationSummarySignal(OAIReplicationSummaryList summary);
    void addsServicesListServerAlertsSignal(OAIAlerts summary);
    void addsServicesReplicationStatusGetSignal(OAIReplicationStatus summary);
    void addsServicesServiceMembersAddSignal(OAIServiceMember summary);
    void addsServicesServiceMembersListSignal(OAIServiceMembers summary);
    void addsServicesUserPreferenceAddSignal();
    void addsServicesUserPreferenceDeleteSignal();
    void addsServicesUserPreferenceGetSignal(OAIUserPreference summary);
    void alertsListAddsAlertsSignal(OAIAlerts summary);
    void configurationListAddsConfigurationsSignal(OAIAddsConfiguration summary);
    void dimensionsListAddsDimensionsSignal(OAIDimensions summary);


    void adDomainServiceMembersListSignalFull(OAIHttpRequestWorker *worker, OAIAddsServiceMembers summary);
    void addsServiceGetMetricsSignalFull(OAIHttpRequestWorker *worker, OAIMetricSets summary);
    void addsServiceMembersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void addsServiceMembersGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceMember summary);
    void addsServiceMembersListSignalFull(OAIHttpRequestWorker *worker, OAIAddsServiceMembers summary);
    void addsServiceMembersListCredentialsSignalFull(OAIHttpRequestWorker *worker, OAICredentials summary);
    void addsServicesAddSignalFull(OAIHttpRequestWorker *worker, OAIServiceProperties summary);
    void addsServicesGetForestSummarySignalFull(OAIHttpRequestWorker *worker, OAIForestSummary summary);
    void addsServicesGetMetricMetadataSignalFull(OAIHttpRequestWorker *worker, OAIMetricMetadata summary);
    void addsServicesGetMetricMetadataForGroupSignalFull(OAIHttpRequestWorker *worker, OAIMetricSets summary);
    void addsServicesListSignalFull(OAIHttpRequestWorker *worker, OAIServices summary);
    void addsServicesListMetricMetadataSignalFull(OAIHttpRequestWorker *worker, OAIMetricMetadataList summary);
    void addsServicesListMetricsAverageSignalFull(OAIHttpRequestWorker *worker, OAIMetrics summary);
    void addsServicesListMetricsSumSignalFull(OAIHttpRequestWorker *worker, OAIMetrics summary);
    void addsServicesListReplicationDetailsSignalFull(OAIHttpRequestWorker *worker, OAIReplicationDetailsList summary);
    void addsServicesListReplicationSummarySignalFull(OAIHttpRequestWorker *worker, OAIReplicationSummaryList summary);
    void addsServicesListServerAlertsSignalFull(OAIHttpRequestWorker *worker, OAIAlerts summary);
    void addsServicesReplicationStatusGetSignalFull(OAIHttpRequestWorker *worker, OAIReplicationStatus summary);
    void addsServicesServiceMembersAddSignalFull(OAIHttpRequestWorker *worker, OAIServiceMember summary);
    void addsServicesServiceMembersListSignalFull(OAIHttpRequestWorker *worker, OAIServiceMembers summary);
    void addsServicesUserPreferenceAddSignalFull(OAIHttpRequestWorker *worker);
    void addsServicesUserPreferenceDeleteSignalFull(OAIHttpRequestWorker *worker);
    void addsServicesUserPreferenceGetSignalFull(OAIHttpRequestWorker *worker, OAIUserPreference summary);
    void alertsListAddsAlertsSignalFull(OAIHttpRequestWorker *worker, OAIAlerts summary);
    void configurationListAddsConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIAddsConfiguration summary);
    void dimensionsListAddsDimensionsSignalFull(OAIHttpRequestWorker *worker, OAIDimensions summary);

    Q_DECL_DEPRECATED_X("Use adDomainServiceMembersListSignalError() instead")
    void adDomainServiceMembersListSignalE(OAIAddsServiceMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adDomainServiceMembersListSignalError(OAIAddsServiceMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServiceGetMetricsSignalError() instead")
    void addsServiceGetMetricsSignalE(OAIMetricSets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServiceGetMetricsSignalError(OAIMetricSets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServiceMembersDeleteSignalError() instead")
    void addsServiceMembersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addsServiceMembersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServiceMembersGetSignalError() instead")
    void addsServiceMembersGetSignalE(OAIServiceMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServiceMembersGetSignalError(OAIServiceMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServiceMembersListSignalError() instead")
    void addsServiceMembersListSignalE(OAIAddsServiceMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServiceMembersListSignalError(OAIAddsServiceMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServiceMembersListCredentialsSignalError() instead")
    void addsServiceMembersListCredentialsSignalE(OAICredentials summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServiceMembersListCredentialsSignalError(OAICredentials summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesAddSignalError() instead")
    void addsServicesAddSignalE(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesAddSignalError(OAIServiceProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesGetForestSummarySignalError() instead")
    void addsServicesGetForestSummarySignalE(OAIForestSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesGetForestSummarySignalError(OAIForestSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesGetMetricMetadataSignalError() instead")
    void addsServicesGetMetricMetadataSignalE(OAIMetricMetadata summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesGetMetricMetadataSignalError(OAIMetricMetadata summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesGetMetricMetadataForGroupSignalError() instead")
    void addsServicesGetMetricMetadataForGroupSignalE(OAIMetricSets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesGetMetricMetadataForGroupSignalError(OAIMetricSets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListSignalError() instead")
    void addsServicesListSignalE(OAIServices summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListSignalError(OAIServices summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListMetricMetadataSignalError() instead")
    void addsServicesListMetricMetadataSignalE(OAIMetricMetadataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListMetricMetadataSignalError(OAIMetricMetadataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListMetricsAverageSignalError() instead")
    void addsServicesListMetricsAverageSignalE(OAIMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListMetricsAverageSignalError(OAIMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListMetricsSumSignalError() instead")
    void addsServicesListMetricsSumSignalE(OAIMetrics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListMetricsSumSignalError(OAIMetrics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListReplicationDetailsSignalError() instead")
    void addsServicesListReplicationDetailsSignalE(OAIReplicationDetailsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListReplicationDetailsSignalError(OAIReplicationDetailsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListReplicationSummarySignalError() instead")
    void addsServicesListReplicationSummarySignalE(OAIReplicationSummaryList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListReplicationSummarySignalError(OAIReplicationSummaryList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListServerAlertsSignalError() instead")
    void addsServicesListServerAlertsSignalE(OAIAlerts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListServerAlertsSignalError(OAIAlerts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesReplicationStatusGetSignalError() instead")
    void addsServicesReplicationStatusGetSignalE(OAIReplicationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesReplicationStatusGetSignalError(OAIReplicationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesServiceMembersAddSignalError() instead")
    void addsServicesServiceMembersAddSignalE(OAIServiceMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesServiceMembersAddSignalError(OAIServiceMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesServiceMembersListSignalError() instead")
    void addsServicesServiceMembersListSignalE(OAIServiceMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesServiceMembersListSignalError(OAIServiceMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesUserPreferenceAddSignalError() instead")
    void addsServicesUserPreferenceAddSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesUserPreferenceAddSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesUserPreferenceDeleteSignalError() instead")
    void addsServicesUserPreferenceDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesUserPreferenceDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesUserPreferenceGetSignalError() instead")
    void addsServicesUserPreferenceGetSignalE(OAIUserPreference summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesUserPreferenceGetSignalError(OAIUserPreference summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListAddsAlertsSignalError() instead")
    void alertsListAddsAlertsSignalE(OAIAlerts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListAddsAlertsSignalError(OAIAlerts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationListAddsConfigurationsSignalError() instead")
    void configurationListAddsConfigurationsSignalE(OAIAddsConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationListAddsConfigurationsSignalError(OAIAddsConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListAddsDimensionsSignalError() instead")
    void dimensionsListAddsDimensionsSignalE(OAIDimensions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListAddsDimensionsSignalError(OAIDimensions summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adDomainServiceMembersListSignalErrorFull() instead")
    void adDomainServiceMembersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adDomainServiceMembersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServiceGetMetricsSignalErrorFull() instead")
    void addsServiceGetMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServiceGetMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServiceMembersDeleteSignalErrorFull() instead")
    void addsServiceMembersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServiceMembersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServiceMembersGetSignalErrorFull() instead")
    void addsServiceMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServiceMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServiceMembersListSignalErrorFull() instead")
    void addsServiceMembersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServiceMembersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServiceMembersListCredentialsSignalErrorFull() instead")
    void addsServiceMembersListCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServiceMembersListCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesAddSignalErrorFull() instead")
    void addsServicesAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesGetForestSummarySignalErrorFull() instead")
    void addsServicesGetForestSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesGetForestSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesGetMetricMetadataSignalErrorFull() instead")
    void addsServicesGetMetricMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesGetMetricMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesGetMetricMetadataForGroupSignalErrorFull() instead")
    void addsServicesGetMetricMetadataForGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesGetMetricMetadataForGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListSignalErrorFull() instead")
    void addsServicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListMetricMetadataSignalErrorFull() instead")
    void addsServicesListMetricMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListMetricMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListMetricsAverageSignalErrorFull() instead")
    void addsServicesListMetricsAverageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListMetricsAverageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListMetricsSumSignalErrorFull() instead")
    void addsServicesListMetricsSumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListMetricsSumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListReplicationDetailsSignalErrorFull() instead")
    void addsServicesListReplicationDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListReplicationDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListReplicationSummarySignalErrorFull() instead")
    void addsServicesListReplicationSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListReplicationSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesListServerAlertsSignalErrorFull() instead")
    void addsServicesListServerAlertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesListServerAlertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesReplicationStatusGetSignalErrorFull() instead")
    void addsServicesReplicationStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesReplicationStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesServiceMembersAddSignalErrorFull() instead")
    void addsServicesServiceMembersAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesServiceMembersAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesServiceMembersListSignalErrorFull() instead")
    void addsServicesServiceMembersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesServiceMembersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesUserPreferenceAddSignalErrorFull() instead")
    void addsServicesUserPreferenceAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesUserPreferenceAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesUserPreferenceDeleteSignalErrorFull() instead")
    void addsServicesUserPreferenceDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesUserPreferenceDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addsServicesUserPreferenceGetSignalErrorFull() instead")
    void addsServicesUserPreferenceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addsServicesUserPreferenceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsListAddsAlertsSignalErrorFull() instead")
    void alertsListAddsAlertsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsListAddsAlertsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationListAddsConfigurationsSignalErrorFull() instead")
    void configurationListAddsConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationListAddsConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dimensionsListAddsDimensionsSignalErrorFull() instead")
    void dimensionsListAddsDimensionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dimensionsListAddsDimensionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
