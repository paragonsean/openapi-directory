/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleErrorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleErrorInfo::OAIRuleErrorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleErrorInfo::OAIRuleErrorInfo() {
    this->initializeModel();
}

OAIRuleErrorInfo::~OAIRuleErrorInfo() {}

void OAIRuleErrorInfo::initializeModel() {

    m_attribute_mapping_isSet = false;
    m_attribute_mapping_isValid = false;

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_connector_name_isSet = false;
    m_connector_name_isValid = false;

    m_cs_object_id_isSet = false;
    m_cs_object_id_isValid = false;

    m_dn_isSet = false;
    m_dn_isValid = false;
}

void OAIRuleErrorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleErrorInfo::fromJsonObject(QJsonObject json) {

    m_attribute_mapping_isValid = ::OpenAPI::fromJsonValue(m_attribute_mapping, json[QString("attributeMapping")]);
    m_attribute_mapping_isSet = !json[QString("attributeMapping")].isNull() && m_attribute_mapping_isValid;

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_connector_name_isValid = ::OpenAPI::fromJsonValue(m_connector_name, json[QString("connectorName")]);
    m_connector_name_isSet = !json[QString("connectorName")].isNull() && m_connector_name_isValid;

    m_cs_object_id_isValid = ::OpenAPI::fromJsonValue(m_cs_object_id, json[QString("csObjectId")]);
    m_cs_object_id_isSet = !json[QString("csObjectId")].isNull() && m_cs_object_id_isValid;

    m_dn_isValid = ::OpenAPI::fromJsonValue(m_dn, json[QString("dn")]);
    m_dn_isSet = !json[QString("dn")].isNull() && m_dn_isValid;
}

QString OAIRuleErrorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleErrorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_mapping.isSet()) {
        obj.insert(QString("attributeMapping"), ::OpenAPI::toJsonValue(m_attribute_mapping));
    }
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_connector_name_isSet) {
        obj.insert(QString("connectorName"), ::OpenAPI::toJsonValue(m_connector_name));
    }
    if (m_cs_object_id_isSet) {
        obj.insert(QString("csObjectId"), ::OpenAPI::toJsonValue(m_cs_object_id));
    }
    if (m_dn_isSet) {
        obj.insert(QString("dn"), ::OpenAPI::toJsonValue(m_dn));
    }
    return obj;
}

OAIAttributeMapping OAIRuleErrorInfo::getAttributeMapping() const {
    return m_attribute_mapping;
}
void OAIRuleErrorInfo::setAttributeMapping(const OAIAttributeMapping &attribute_mapping) {
    m_attribute_mapping = attribute_mapping;
    m_attribute_mapping_isSet = true;
}

bool OAIRuleErrorInfo::is_attribute_mapping_Set() const{
    return m_attribute_mapping_isSet;
}

bool OAIRuleErrorInfo::is_attribute_mapping_Valid() const{
    return m_attribute_mapping_isValid;
}

QString OAIRuleErrorInfo::getConnectorId() const {
    return m_connector_id;
}
void OAIRuleErrorInfo::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIRuleErrorInfo::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIRuleErrorInfo::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIRuleErrorInfo::getConnectorName() const {
    return m_connector_name;
}
void OAIRuleErrorInfo::setConnectorName(const QString &connector_name) {
    m_connector_name = connector_name;
    m_connector_name_isSet = true;
}

bool OAIRuleErrorInfo::is_connector_name_Set() const{
    return m_connector_name_isSet;
}

bool OAIRuleErrorInfo::is_connector_name_Valid() const{
    return m_connector_name_isValid;
}

QString OAIRuleErrorInfo::getCsObjectId() const {
    return m_cs_object_id;
}
void OAIRuleErrorInfo::setCsObjectId(const QString &cs_object_id) {
    m_cs_object_id = cs_object_id;
    m_cs_object_id_isSet = true;
}

bool OAIRuleErrorInfo::is_cs_object_id_Set() const{
    return m_cs_object_id_isSet;
}

bool OAIRuleErrorInfo::is_cs_object_id_Valid() const{
    return m_cs_object_id_isValid;
}

QString OAIRuleErrorInfo::getDn() const {
    return m_dn;
}
void OAIRuleErrorInfo::setDn(const QString &dn) {
    m_dn = dn;
    m_dn_isSet = true;
}

bool OAIRuleErrorInfo::is_dn_Set() const{
    return m_dn_isSet;
}

bool OAIRuleErrorInfo::is_dn_Valid() const{
    return m_dn_isValid;
}

bool OAIRuleErrorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cs_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleErrorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
