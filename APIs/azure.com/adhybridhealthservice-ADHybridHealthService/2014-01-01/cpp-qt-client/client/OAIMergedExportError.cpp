/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMergedExportError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMergedExportError::OAIMergedExportError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMergedExportError::OAIMergedExportError() {
    this->initializeModel();
}

OAIMergedExportError::~OAIMergedExportError() {}

void OAIMergedExportError::initializeModel() {

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;

    m_attribute_value_isSet = false;
    m_attribute_value_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_cs_object_id_isSet = false;
    m_cs_object_id_isValid = false;

    m_dn_isSet = false;
    m_dn_isValid = false;

    m_existing_object_isSet = false;
    m_existing_object_isValid = false;

    m_export_error_status_isSet = false;
    m_export_error_status_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_incoming_object_isSet = false;
    m_incoming_object_isValid = false;

    m_incoming_object_display_name_isSet = false;
    m_incoming_object_display_name_isValid = false;

    m_incoming_object_type_isSet = false;
    m_incoming_object_type_isValid = false;

    m_merged_entity_id_isSet = false;
    m_merged_entity_id_isValid = false;

    m_modified_or_removed_attribute_value_isSet = false;
    m_modified_or_removed_attribute_value_isValid = false;

    m_run_step_result_id_isSet = false;
    m_run_step_result_id_isValid = false;

    m_sam_account_name_isSet = false;
    m_sam_account_name_isValid = false;

    m_server_error_detail_isSet = false;
    m_server_error_detail_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_member_id_isSet = false;
    m_service_member_id_isValid = false;

    m_time_first_occurred_isSet = false;
    m_time_first_occurred_isValid = false;

    m_time_occurred_isSet = false;
    m_time_occurred_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_principal_name_isSet = false;
    m_user_principal_name_isValid = false;
}

void OAIMergedExportError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMergedExportError::fromJsonObject(QJsonObject json) {

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("attributeName")]);
    m_attribute_name_isSet = !json[QString("attributeName")].isNull() && m_attribute_name_isValid;

    m_attribute_value_isValid = ::OpenAPI::fromJsonValue(m_attribute_value, json[QString("attributeValue")]);
    m_attribute_value_isSet = !json[QString("attributeValue")].isNull() && m_attribute_value_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_cs_object_id_isValid = ::OpenAPI::fromJsonValue(m_cs_object_id, json[QString("csObjectId")]);
    m_cs_object_id_isSet = !json[QString("csObjectId")].isNull() && m_cs_object_id_isValid;

    m_dn_isValid = ::OpenAPI::fromJsonValue(m_dn, json[QString("dn")]);
    m_dn_isSet = !json[QString("dn")].isNull() && m_dn_isValid;

    m_existing_object_isValid = ::OpenAPI::fromJsonValue(m_existing_object, json[QString("existingObject")]);
    m_existing_object_isSet = !json[QString("existingObject")].isNull() && m_existing_object_isValid;

    m_export_error_status_isValid = ::OpenAPI::fromJsonValue(m_export_error_status, json[QString("exportErrorStatus")]);
    m_export_error_status_isSet = !json[QString("exportErrorStatus")].isNull() && m_export_error_status_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_incoming_object_isValid = ::OpenAPI::fromJsonValue(m_incoming_object, json[QString("incomingObject")]);
    m_incoming_object_isSet = !json[QString("incomingObject")].isNull() && m_incoming_object_isValid;

    m_incoming_object_display_name_isValid = ::OpenAPI::fromJsonValue(m_incoming_object_display_name, json[QString("incomingObjectDisplayName")]);
    m_incoming_object_display_name_isSet = !json[QString("incomingObjectDisplayName")].isNull() && m_incoming_object_display_name_isValid;

    m_incoming_object_type_isValid = ::OpenAPI::fromJsonValue(m_incoming_object_type, json[QString("incomingObjectType")]);
    m_incoming_object_type_isSet = !json[QString("incomingObjectType")].isNull() && m_incoming_object_type_isValid;

    m_merged_entity_id_isValid = ::OpenAPI::fromJsonValue(m_merged_entity_id, json[QString("mergedEntityId")]);
    m_merged_entity_id_isSet = !json[QString("mergedEntityId")].isNull() && m_merged_entity_id_isValid;

    m_modified_or_removed_attribute_value_isValid = ::OpenAPI::fromJsonValue(m_modified_or_removed_attribute_value, json[QString("modifiedOrRemovedAttributeValue")]);
    m_modified_or_removed_attribute_value_isSet = !json[QString("modifiedOrRemovedAttributeValue")].isNull() && m_modified_or_removed_attribute_value_isValid;

    m_run_step_result_id_isValid = ::OpenAPI::fromJsonValue(m_run_step_result_id, json[QString("runStepResultId")]);
    m_run_step_result_id_isSet = !json[QString("runStepResultId")].isNull() && m_run_step_result_id_isValid;

    m_sam_account_name_isValid = ::OpenAPI::fromJsonValue(m_sam_account_name, json[QString("samAccountName")]);
    m_sam_account_name_isSet = !json[QString("samAccountName")].isNull() && m_sam_account_name_isValid;

    m_server_error_detail_isValid = ::OpenAPI::fromJsonValue(m_server_error_detail, json[QString("serverErrorDetail")]);
    m_server_error_detail_isSet = !json[QString("serverErrorDetail")].isNull() && m_server_error_detail_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_service_member_id_isValid = ::OpenAPI::fromJsonValue(m_service_member_id, json[QString("serviceMemberId")]);
    m_service_member_id_isSet = !json[QString("serviceMemberId")].isNull() && m_service_member_id_isValid;

    m_time_first_occurred_isValid = ::OpenAPI::fromJsonValue(m_time_first_occurred, json[QString("timeFirstOccurred")]);
    m_time_first_occurred_isSet = !json[QString("timeFirstOccurred")].isNull() && m_time_first_occurred_isValid;

    m_time_occurred_isValid = ::OpenAPI::fromJsonValue(m_time_occurred, json[QString("timeOccurred")]);
    m_time_occurred_isSet = !json[QString("timeOccurred")].isNull() && m_time_occurred_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_principal_name_isValid = ::OpenAPI::fromJsonValue(m_user_principal_name, json[QString("userPrincipalName")]);
    m_user_principal_name_isSet = !json[QString("userPrincipalName")].isNull() && m_user_principal_name_isValid;
}

QString OAIMergedExportError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMergedExportError::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_name_isSet) {
        obj.insert(QString("attributeName"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    if (m_attribute_value_isSet) {
        obj.insert(QString("attributeValue"), ::OpenAPI::toJsonValue(m_attribute_value));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_cs_object_id_isSet) {
        obj.insert(QString("csObjectId"), ::OpenAPI::toJsonValue(m_cs_object_id));
    }
    if (m_dn_isSet) {
        obj.insert(QString("dn"), ::OpenAPI::toJsonValue(m_dn));
    }
    if (m_existing_object.isSet()) {
        obj.insert(QString("existingObject"), ::OpenAPI::toJsonValue(m_existing_object));
    }
    if (m_export_error_status_isSet) {
        obj.insert(QString("exportErrorStatus"), ::OpenAPI::toJsonValue(m_export_error_status));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_incoming_object.isSet()) {
        obj.insert(QString("incomingObject"), ::OpenAPI::toJsonValue(m_incoming_object));
    }
    if (m_incoming_object_display_name_isSet) {
        obj.insert(QString("incomingObjectDisplayName"), ::OpenAPI::toJsonValue(m_incoming_object_display_name));
    }
    if (m_incoming_object_type_isSet) {
        obj.insert(QString("incomingObjectType"), ::OpenAPI::toJsonValue(m_incoming_object_type));
    }
    if (m_merged_entity_id_isSet) {
        obj.insert(QString("mergedEntityId"), ::OpenAPI::toJsonValue(m_merged_entity_id));
    }
    if (m_modified_or_removed_attribute_value_isSet) {
        obj.insert(QString("modifiedOrRemovedAttributeValue"), ::OpenAPI::toJsonValue(m_modified_or_removed_attribute_value));
    }
    if (m_run_step_result_id_isSet) {
        obj.insert(QString("runStepResultId"), ::OpenAPI::toJsonValue(m_run_step_result_id));
    }
    if (m_sam_account_name_isSet) {
        obj.insert(QString("samAccountName"), ::OpenAPI::toJsonValue(m_sam_account_name));
    }
    if (m_server_error_detail_isSet) {
        obj.insert(QString("serverErrorDetail"), ::OpenAPI::toJsonValue(m_server_error_detail));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_member_id_isSet) {
        obj.insert(QString("serviceMemberId"), ::OpenAPI::toJsonValue(m_service_member_id));
    }
    if (m_time_first_occurred_isSet) {
        obj.insert(QString("timeFirstOccurred"), ::OpenAPI::toJsonValue(m_time_first_occurred));
    }
    if (m_time_occurred_isSet) {
        obj.insert(QString("timeOccurred"), ::OpenAPI::toJsonValue(m_time_occurred));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_principal_name_isSet) {
        obj.insert(QString("userPrincipalName"), ::OpenAPI::toJsonValue(m_user_principal_name));
    }
    return obj;
}

QString OAIMergedExportError::getAttributeName() const {
    return m_attribute_name;
}
void OAIMergedExportError::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAIMergedExportError::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAIMergedExportError::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

QString OAIMergedExportError::getAttributeValue() const {
    return m_attribute_value;
}
void OAIMergedExportError::setAttributeValue(const QString &attribute_value) {
    m_attribute_value = attribute_value;
    m_attribute_value_isSet = true;
}

bool OAIMergedExportError::is_attribute_value_Set() const{
    return m_attribute_value_isSet;
}

bool OAIMergedExportError::is_attribute_value_Valid() const{
    return m_attribute_value_isValid;
}

QDateTime OAIMergedExportError::getCreatedDate() const {
    return m_created_date;
}
void OAIMergedExportError::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIMergedExportError::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIMergedExportError::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIMergedExportError::getCsObjectId() const {
    return m_cs_object_id;
}
void OAIMergedExportError::setCsObjectId(const QString &cs_object_id) {
    m_cs_object_id = cs_object_id;
    m_cs_object_id_isSet = true;
}

bool OAIMergedExportError::is_cs_object_id_Set() const{
    return m_cs_object_id_isSet;
}

bool OAIMergedExportError::is_cs_object_id_Valid() const{
    return m_cs_object_id_isValid;
}

QString OAIMergedExportError::getDn() const {
    return m_dn;
}
void OAIMergedExportError::setDn(const QString &dn) {
    m_dn = dn;
    m_dn_isSet = true;
}

bool OAIMergedExportError::is_dn_Set() const{
    return m_dn_isSet;
}

bool OAIMergedExportError::is_dn_Valid() const{
    return m_dn_isValid;
}

OAIAssociatedObject OAIMergedExportError::getExistingObject() const {
    return m_existing_object;
}
void OAIMergedExportError::setExistingObject(const OAIAssociatedObject &existing_object) {
    m_existing_object = existing_object;
    m_existing_object_isSet = true;
}

bool OAIMergedExportError::is_existing_object_Set() const{
    return m_existing_object_isSet;
}

bool OAIMergedExportError::is_existing_object_Valid() const{
    return m_existing_object_isValid;
}

qint32 OAIMergedExportError::getExportErrorStatus() const {
    return m_export_error_status;
}
void OAIMergedExportError::setExportErrorStatus(const qint32 &export_error_status) {
    m_export_error_status = export_error_status;
    m_export_error_status_isSet = true;
}

bool OAIMergedExportError::is_export_error_status_Set() const{
    return m_export_error_status_isSet;
}

bool OAIMergedExportError::is_export_error_status_Valid() const{
    return m_export_error_status_isValid;
}

QString OAIMergedExportError::getId() const {
    return m_id;
}
void OAIMergedExportError::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMergedExportError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMergedExportError::is_id_Valid() const{
    return m_id_isValid;
}

OAIAssociatedObject OAIMergedExportError::getIncomingObject() const {
    return m_incoming_object;
}
void OAIMergedExportError::setIncomingObject(const OAIAssociatedObject &incoming_object) {
    m_incoming_object = incoming_object;
    m_incoming_object_isSet = true;
}

bool OAIMergedExportError::is_incoming_object_Set() const{
    return m_incoming_object_isSet;
}

bool OAIMergedExportError::is_incoming_object_Valid() const{
    return m_incoming_object_isValid;
}

QString OAIMergedExportError::getIncomingObjectDisplayName() const {
    return m_incoming_object_display_name;
}
void OAIMergedExportError::setIncomingObjectDisplayName(const QString &incoming_object_display_name) {
    m_incoming_object_display_name = incoming_object_display_name;
    m_incoming_object_display_name_isSet = true;
}

bool OAIMergedExportError::is_incoming_object_display_name_Set() const{
    return m_incoming_object_display_name_isSet;
}

bool OAIMergedExportError::is_incoming_object_display_name_Valid() const{
    return m_incoming_object_display_name_isValid;
}

QString OAIMergedExportError::getIncomingObjectType() const {
    return m_incoming_object_type;
}
void OAIMergedExportError::setIncomingObjectType(const QString &incoming_object_type) {
    m_incoming_object_type = incoming_object_type;
    m_incoming_object_type_isSet = true;
}

bool OAIMergedExportError::is_incoming_object_type_Set() const{
    return m_incoming_object_type_isSet;
}

bool OAIMergedExportError::is_incoming_object_type_Valid() const{
    return m_incoming_object_type_isValid;
}

QString OAIMergedExportError::getMergedEntityId() const {
    return m_merged_entity_id;
}
void OAIMergedExportError::setMergedEntityId(const QString &merged_entity_id) {
    m_merged_entity_id = merged_entity_id;
    m_merged_entity_id_isSet = true;
}

bool OAIMergedExportError::is_merged_entity_id_Set() const{
    return m_merged_entity_id_isSet;
}

bool OAIMergedExportError::is_merged_entity_id_Valid() const{
    return m_merged_entity_id_isValid;
}

QString OAIMergedExportError::getModifiedOrRemovedAttributeValue() const {
    return m_modified_or_removed_attribute_value;
}
void OAIMergedExportError::setModifiedOrRemovedAttributeValue(const QString &modified_or_removed_attribute_value) {
    m_modified_or_removed_attribute_value = modified_or_removed_attribute_value;
    m_modified_or_removed_attribute_value_isSet = true;
}

bool OAIMergedExportError::is_modified_or_removed_attribute_value_Set() const{
    return m_modified_or_removed_attribute_value_isSet;
}

bool OAIMergedExportError::is_modified_or_removed_attribute_value_Valid() const{
    return m_modified_or_removed_attribute_value_isValid;
}

QString OAIMergedExportError::getRunStepResultId() const {
    return m_run_step_result_id;
}
void OAIMergedExportError::setRunStepResultId(const QString &run_step_result_id) {
    m_run_step_result_id = run_step_result_id;
    m_run_step_result_id_isSet = true;
}

bool OAIMergedExportError::is_run_step_result_id_Set() const{
    return m_run_step_result_id_isSet;
}

bool OAIMergedExportError::is_run_step_result_id_Valid() const{
    return m_run_step_result_id_isValid;
}

QString OAIMergedExportError::getSamAccountName() const {
    return m_sam_account_name;
}
void OAIMergedExportError::setSamAccountName(const QString &sam_account_name) {
    m_sam_account_name = sam_account_name;
    m_sam_account_name_isSet = true;
}

bool OAIMergedExportError::is_sam_account_name_Set() const{
    return m_sam_account_name_isSet;
}

bool OAIMergedExportError::is_sam_account_name_Valid() const{
    return m_sam_account_name_isValid;
}

QString OAIMergedExportError::getServerErrorDetail() const {
    return m_server_error_detail;
}
void OAIMergedExportError::setServerErrorDetail(const QString &server_error_detail) {
    m_server_error_detail = server_error_detail;
    m_server_error_detail_isSet = true;
}

bool OAIMergedExportError::is_server_error_detail_Set() const{
    return m_server_error_detail_isSet;
}

bool OAIMergedExportError::is_server_error_detail_Valid() const{
    return m_server_error_detail_isValid;
}

QString OAIMergedExportError::getServiceId() const {
    return m_service_id;
}
void OAIMergedExportError::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIMergedExportError::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIMergedExportError::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIMergedExportError::getServiceMemberId() const {
    return m_service_member_id;
}
void OAIMergedExportError::setServiceMemberId(const QString &service_member_id) {
    m_service_member_id = service_member_id;
    m_service_member_id_isSet = true;
}

bool OAIMergedExportError::is_service_member_id_Set() const{
    return m_service_member_id_isSet;
}

bool OAIMergedExportError::is_service_member_id_Valid() const{
    return m_service_member_id_isValid;
}

QDateTime OAIMergedExportError::getTimeFirstOccurred() const {
    return m_time_first_occurred;
}
void OAIMergedExportError::setTimeFirstOccurred(const QDateTime &time_first_occurred) {
    m_time_first_occurred = time_first_occurred;
    m_time_first_occurred_isSet = true;
}

bool OAIMergedExportError::is_time_first_occurred_Set() const{
    return m_time_first_occurred_isSet;
}

bool OAIMergedExportError::is_time_first_occurred_Valid() const{
    return m_time_first_occurred_isValid;
}

QDateTime OAIMergedExportError::getTimeOccurred() const {
    return m_time_occurred;
}
void OAIMergedExportError::setTimeOccurred(const QDateTime &time_occurred) {
    m_time_occurred = time_occurred;
    m_time_occurred_isSet = true;
}

bool OAIMergedExportError::is_time_occurred_Set() const{
    return m_time_occurred_isSet;
}

bool OAIMergedExportError::is_time_occurred_Valid() const{
    return m_time_occurred_isValid;
}

QString OAIMergedExportError::getType() const {
    return m_type;
}
void OAIMergedExportError::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMergedExportError::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMergedExportError::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIMergedExportError::getUserPrincipalName() const {
    return m_user_principal_name;
}
void OAIMergedExportError::setUserPrincipalName(const QString &user_principal_name) {
    m_user_principal_name = user_principal_name;
    m_user_principal_name_isSet = true;
}

bool OAIMergedExportError::is_user_principal_name_Set() const{
    return m_user_principal_name_isSet;
}

bool OAIMergedExportError::is_user_principal_name_Valid() const{
    return m_user_principal_name_isValid;
}

bool OAIMergedExportError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cs_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_existing_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_error_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incoming_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_incoming_object_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incoming_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_or_removed_attribute_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_step_result_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sam_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_error_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_first_occurred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_occurred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMergedExportError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
