/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociatedObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociatedObject::OAIAssociatedObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociatedObject::OAIAssociatedObject() {
    this->initializeModel();
}

OAIAssociatedObject::~OAIAssociatedObject() {}

void OAIAssociatedObject::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_distinguished_name_isSet = false;
    m_distinguished_name_isValid = false;

    m_last_dir_sync_time_isSet = false;
    m_last_dir_sync_time_isValid = false;

    m_mail_isSet = false;
    m_mail_isValid = false;

    m_object_guid_isSet = false;
    m_object_guid_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_onpremises_user_principal_name_isSet = false;
    m_onpremises_user_principal_name_isValid = false;

    m_proxy_addresses_isSet = false;
    m_proxy_addresses_isValid = false;

    m_source_anchor_isSet = false;
    m_source_anchor_isValid = false;

    m_source_of_authority_isSet = false;
    m_source_of_authority_isValid = false;

    m_time_occurred_isSet = false;
    m_time_occurred_isValid = false;

    m_user_principal_name_isSet = false;
    m_user_principal_name_isValid = false;
}

void OAIAssociatedObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociatedObject::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_distinguished_name_isValid = ::OpenAPI::fromJsonValue(m_distinguished_name, json[QString("distinguishedName")]);
    m_distinguished_name_isSet = !json[QString("distinguishedName")].isNull() && m_distinguished_name_isValid;

    m_last_dir_sync_time_isValid = ::OpenAPI::fromJsonValue(m_last_dir_sync_time, json[QString("lastDirSyncTime")]);
    m_last_dir_sync_time_isSet = !json[QString("lastDirSyncTime")].isNull() && m_last_dir_sync_time_isValid;

    m_mail_isValid = ::OpenAPI::fromJsonValue(m_mail, json[QString("mail")]);
    m_mail_isSet = !json[QString("mail")].isNull() && m_mail_isValid;

    m_object_guid_isValid = ::OpenAPI::fromJsonValue(m_object_guid, json[QString("objectGuid")]);
    m_object_guid_isSet = !json[QString("objectGuid")].isNull() && m_object_guid_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_onpremises_user_principal_name_isValid = ::OpenAPI::fromJsonValue(m_onpremises_user_principal_name, json[QString("onpremisesUserPrincipalName")]);
    m_onpremises_user_principal_name_isSet = !json[QString("onpremisesUserPrincipalName")].isNull() && m_onpremises_user_principal_name_isValid;

    m_proxy_addresses_isValid = ::OpenAPI::fromJsonValue(m_proxy_addresses, json[QString("proxyAddresses")]);
    m_proxy_addresses_isSet = !json[QString("proxyAddresses")].isNull() && m_proxy_addresses_isValid;

    m_source_anchor_isValid = ::OpenAPI::fromJsonValue(m_source_anchor, json[QString("sourceAnchor")]);
    m_source_anchor_isSet = !json[QString("sourceAnchor")].isNull() && m_source_anchor_isValid;

    m_source_of_authority_isValid = ::OpenAPI::fromJsonValue(m_source_of_authority, json[QString("sourceOfAuthority")]);
    m_source_of_authority_isSet = !json[QString("sourceOfAuthority")].isNull() && m_source_of_authority_isValid;

    m_time_occurred_isValid = ::OpenAPI::fromJsonValue(m_time_occurred, json[QString("timeOccurred")]);
    m_time_occurred_isSet = !json[QString("timeOccurred")].isNull() && m_time_occurred_isValid;

    m_user_principal_name_isValid = ::OpenAPI::fromJsonValue(m_user_principal_name, json[QString("userPrincipalName")]);
    m_user_principal_name_isSet = !json[QString("userPrincipalName")].isNull() && m_user_principal_name_isValid;
}

QString OAIAssociatedObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociatedObject::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_distinguished_name_isSet) {
        obj.insert(QString("distinguishedName"), ::OpenAPI::toJsonValue(m_distinguished_name));
    }
    if (m_last_dir_sync_time_isSet) {
        obj.insert(QString("lastDirSyncTime"), ::OpenAPI::toJsonValue(m_last_dir_sync_time));
    }
    if (m_mail_isSet) {
        obj.insert(QString("mail"), ::OpenAPI::toJsonValue(m_mail));
    }
    if (m_object_guid_isSet) {
        obj.insert(QString("objectGuid"), ::OpenAPI::toJsonValue(m_object_guid));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_onpremises_user_principal_name_isSet) {
        obj.insert(QString("onpremisesUserPrincipalName"), ::OpenAPI::toJsonValue(m_onpremises_user_principal_name));
    }
    if (m_proxy_addresses_isSet) {
        obj.insert(QString("proxyAddresses"), ::OpenAPI::toJsonValue(m_proxy_addresses));
    }
    if (m_source_anchor_isSet) {
        obj.insert(QString("sourceAnchor"), ::OpenAPI::toJsonValue(m_source_anchor));
    }
    if (m_source_of_authority_isSet) {
        obj.insert(QString("sourceOfAuthority"), ::OpenAPI::toJsonValue(m_source_of_authority));
    }
    if (m_time_occurred_isSet) {
        obj.insert(QString("timeOccurred"), ::OpenAPI::toJsonValue(m_time_occurred));
    }
    if (m_user_principal_name_isSet) {
        obj.insert(QString("userPrincipalName"), ::OpenAPI::toJsonValue(m_user_principal_name));
    }
    return obj;
}

QString OAIAssociatedObject::getDisplayName() const {
    return m_display_name;
}
void OAIAssociatedObject::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAssociatedObject::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAssociatedObject::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAssociatedObject::getDistinguishedName() const {
    return m_distinguished_name;
}
void OAIAssociatedObject::setDistinguishedName(const QString &distinguished_name) {
    m_distinguished_name = distinguished_name;
    m_distinguished_name_isSet = true;
}

bool OAIAssociatedObject::is_distinguished_name_Set() const{
    return m_distinguished_name_isSet;
}

bool OAIAssociatedObject::is_distinguished_name_Valid() const{
    return m_distinguished_name_isValid;
}

QDateTime OAIAssociatedObject::getLastDirSyncTime() const {
    return m_last_dir_sync_time;
}
void OAIAssociatedObject::setLastDirSyncTime(const QDateTime &last_dir_sync_time) {
    m_last_dir_sync_time = last_dir_sync_time;
    m_last_dir_sync_time_isSet = true;
}

bool OAIAssociatedObject::is_last_dir_sync_time_Set() const{
    return m_last_dir_sync_time_isSet;
}

bool OAIAssociatedObject::is_last_dir_sync_time_Valid() const{
    return m_last_dir_sync_time_isValid;
}

QString OAIAssociatedObject::getMail() const {
    return m_mail;
}
void OAIAssociatedObject::setMail(const QString &mail) {
    m_mail = mail;
    m_mail_isSet = true;
}

bool OAIAssociatedObject::is_mail_Set() const{
    return m_mail_isSet;
}

bool OAIAssociatedObject::is_mail_Valid() const{
    return m_mail_isValid;
}

QString OAIAssociatedObject::getObjectGuid() const {
    return m_object_guid;
}
void OAIAssociatedObject::setObjectGuid(const QString &object_guid) {
    m_object_guid = object_guid;
    m_object_guid_isSet = true;
}

bool OAIAssociatedObject::is_object_guid_Set() const{
    return m_object_guid_isSet;
}

bool OAIAssociatedObject::is_object_guid_Valid() const{
    return m_object_guid_isValid;
}

QString OAIAssociatedObject::getObjectType() const {
    return m_object_type;
}
void OAIAssociatedObject::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIAssociatedObject::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIAssociatedObject::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAIAssociatedObject::getOnpremisesUserPrincipalName() const {
    return m_onpremises_user_principal_name;
}
void OAIAssociatedObject::setOnpremisesUserPrincipalName(const QString &onpremises_user_principal_name) {
    m_onpremises_user_principal_name = onpremises_user_principal_name;
    m_onpremises_user_principal_name_isSet = true;
}

bool OAIAssociatedObject::is_onpremises_user_principal_name_Set() const{
    return m_onpremises_user_principal_name_isSet;
}

bool OAIAssociatedObject::is_onpremises_user_principal_name_Valid() const{
    return m_onpremises_user_principal_name_isValid;
}

QString OAIAssociatedObject::getProxyAddresses() const {
    return m_proxy_addresses;
}
void OAIAssociatedObject::setProxyAddresses(const QString &proxy_addresses) {
    m_proxy_addresses = proxy_addresses;
    m_proxy_addresses_isSet = true;
}

bool OAIAssociatedObject::is_proxy_addresses_Set() const{
    return m_proxy_addresses_isSet;
}

bool OAIAssociatedObject::is_proxy_addresses_Valid() const{
    return m_proxy_addresses_isValid;
}

QString OAIAssociatedObject::getSourceAnchor() const {
    return m_source_anchor;
}
void OAIAssociatedObject::setSourceAnchor(const QString &source_anchor) {
    m_source_anchor = source_anchor;
    m_source_anchor_isSet = true;
}

bool OAIAssociatedObject::is_source_anchor_Set() const{
    return m_source_anchor_isSet;
}

bool OAIAssociatedObject::is_source_anchor_Valid() const{
    return m_source_anchor_isValid;
}

QString OAIAssociatedObject::getSourceOfAuthority() const {
    return m_source_of_authority;
}
void OAIAssociatedObject::setSourceOfAuthority(const QString &source_of_authority) {
    m_source_of_authority = source_of_authority;
    m_source_of_authority_isSet = true;
}

bool OAIAssociatedObject::is_source_of_authority_Set() const{
    return m_source_of_authority_isSet;
}

bool OAIAssociatedObject::is_source_of_authority_Valid() const{
    return m_source_of_authority_isValid;
}

QDateTime OAIAssociatedObject::getTimeOccurred() const {
    return m_time_occurred;
}
void OAIAssociatedObject::setTimeOccurred(const QDateTime &time_occurred) {
    m_time_occurred = time_occurred;
    m_time_occurred_isSet = true;
}

bool OAIAssociatedObject::is_time_occurred_Set() const{
    return m_time_occurred_isSet;
}

bool OAIAssociatedObject::is_time_occurred_Valid() const{
    return m_time_occurred_isValid;
}

QString OAIAssociatedObject::getUserPrincipalName() const {
    return m_user_principal_name;
}
void OAIAssociatedObject::setUserPrincipalName(const QString &user_principal_name) {
    m_user_principal_name = user_principal_name;
    m_user_principal_name_isSet = true;
}

bool OAIAssociatedObject::is_user_principal_name_Set() const{
    return m_user_principal_name_isSet;
}

bool OAIAssociatedObject::is_user_principal_name_Valid() const{
    return m_user_principal_name_isValid;
}

bool OAIAssociatedObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distinguished_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_dir_sync_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onpremises_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_addresses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_anchor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_of_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_occurred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociatedObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
