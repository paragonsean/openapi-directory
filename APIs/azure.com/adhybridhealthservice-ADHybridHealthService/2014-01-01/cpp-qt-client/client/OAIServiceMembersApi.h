/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceMembersApi_H
#define OAI_OAIServiceMembersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectors.h"
#include "OAICredentials.h"
#include "OAIDataFreshnessDetails.h"
#include "OAIExportStatuses.h"
#include "OAIGlobalConfigurations.h"
#include "OAIServiceConfiguration.h"
#include "OAIServiceMember.h"
#include "OAIServiceMembers.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceMembersApi : public QObject {
    Q_OBJECT

public:
    OAIServiceMembersApi(const int timeOut = 0);
    ~OAIServiceMembersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service_member OAIServiceMember [required]
    */
    virtual void serviceMembersAdd(const QString &service_name, const QString &api_version, const OAIServiceMember &service_member);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  confirm bool [optional]
    */
    virtual void serviceMembersDelete(const QString &service_name, const QString &service_member_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &confirm = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceMembersDeleteData(const QString &service_name, const QString &service_member_id, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceMembersGet(const QString &service_name, const QString &service_member_id, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceMembersGetServiceConfiguration(const QString &service_name, const QString &service_member_id, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  dimension_type QString [optional]
    * @param[in]  dimension_signature QString [optional]
    */
    virtual void serviceMembersList(const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dimension_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dimension_signature = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceMembersListConnectors(const QString &service_name, const QString &service_member_id, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void serviceMembersListCredentials(const QString &service_name, const QString &service_member_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceMembersListDataFreshness(const QString &service_name, const QString &service_member_id, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceMembersListExportStatus(const QString &service_name, const QString &service_member_id, const QString &api_version);

    /**
    * @param[in]  service_name QString [required]
    * @param[in]  service_member_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serviceMembersListGlobalConfiguration(const QString &service_name, const QString &service_member_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serviceMembersAddCallback(OAIHttpRequestWorker *worker);
    void serviceMembersDeleteCallback(OAIHttpRequestWorker *worker);
    void serviceMembersDeleteDataCallback(OAIHttpRequestWorker *worker);
    void serviceMembersGetCallback(OAIHttpRequestWorker *worker);
    void serviceMembersGetServiceConfigurationCallback(OAIHttpRequestWorker *worker);
    void serviceMembersListCallback(OAIHttpRequestWorker *worker);
    void serviceMembersListConnectorsCallback(OAIHttpRequestWorker *worker);
    void serviceMembersListCredentialsCallback(OAIHttpRequestWorker *worker);
    void serviceMembersListDataFreshnessCallback(OAIHttpRequestWorker *worker);
    void serviceMembersListExportStatusCallback(OAIHttpRequestWorker *worker);
    void serviceMembersListGlobalConfigurationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serviceMembersAddSignal(OAIServiceMember summary);
    void serviceMembersDeleteSignal();
    void serviceMembersDeleteDataSignal();
    void serviceMembersGetSignal(OAIServiceMember summary);
    void serviceMembersGetServiceConfigurationSignal(OAIServiceConfiguration summary);
    void serviceMembersListSignal(OAIServiceMembers summary);
    void serviceMembersListConnectorsSignal(OAIConnectors summary);
    void serviceMembersListCredentialsSignal(OAICredentials summary);
    void serviceMembersListDataFreshnessSignal(OAIDataFreshnessDetails summary);
    void serviceMembersListExportStatusSignal(OAIExportStatuses summary);
    void serviceMembersListGlobalConfigurationSignal(OAIGlobalConfigurations summary);


    void serviceMembersAddSignalFull(OAIHttpRequestWorker *worker, OAIServiceMember summary);
    void serviceMembersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serviceMembersDeleteDataSignalFull(OAIHttpRequestWorker *worker);
    void serviceMembersGetSignalFull(OAIHttpRequestWorker *worker, OAIServiceMember summary);
    void serviceMembersGetServiceConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIServiceConfiguration summary);
    void serviceMembersListSignalFull(OAIHttpRequestWorker *worker, OAIServiceMembers summary);
    void serviceMembersListConnectorsSignalFull(OAIHttpRequestWorker *worker, OAIConnectors summary);
    void serviceMembersListCredentialsSignalFull(OAIHttpRequestWorker *worker, OAICredentials summary);
    void serviceMembersListDataFreshnessSignalFull(OAIHttpRequestWorker *worker, OAIDataFreshnessDetails summary);
    void serviceMembersListExportStatusSignalFull(OAIHttpRequestWorker *worker, OAIExportStatuses summary);
    void serviceMembersListGlobalConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGlobalConfigurations summary);

    Q_DECL_DEPRECATED_X("Use serviceMembersAddSignalError() instead")
    void serviceMembersAddSignalE(OAIServiceMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersAddSignalError(OAIServiceMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersDeleteSignalError() instead")
    void serviceMembersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersDeleteDataSignalError() instead")
    void serviceMembersDeleteDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersDeleteDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersGetSignalError() instead")
    void serviceMembersGetSignalE(OAIServiceMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersGetSignalError(OAIServiceMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersGetServiceConfigurationSignalError() instead")
    void serviceMembersGetServiceConfigurationSignalE(OAIServiceConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersGetServiceConfigurationSignalError(OAIServiceConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListSignalError() instead")
    void serviceMembersListSignalE(OAIServiceMembers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListSignalError(OAIServiceMembers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListConnectorsSignalError() instead")
    void serviceMembersListConnectorsSignalE(OAIConnectors summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListConnectorsSignalError(OAIConnectors summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListCredentialsSignalError() instead")
    void serviceMembersListCredentialsSignalE(OAICredentials summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListCredentialsSignalError(OAICredentials summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListDataFreshnessSignalError() instead")
    void serviceMembersListDataFreshnessSignalE(OAIDataFreshnessDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListDataFreshnessSignalError(OAIDataFreshnessDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListExportStatusSignalError() instead")
    void serviceMembersListExportStatusSignalE(OAIExportStatuses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListExportStatusSignalError(OAIExportStatuses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListGlobalConfigurationSignalError() instead")
    void serviceMembersListGlobalConfigurationSignalE(OAIGlobalConfigurations summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListGlobalConfigurationSignalError(OAIGlobalConfigurations summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serviceMembersAddSignalErrorFull() instead")
    void serviceMembersAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersDeleteSignalErrorFull() instead")
    void serviceMembersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersDeleteDataSignalErrorFull() instead")
    void serviceMembersDeleteDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersDeleteDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersGetSignalErrorFull() instead")
    void serviceMembersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersGetServiceConfigurationSignalErrorFull() instead")
    void serviceMembersGetServiceConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersGetServiceConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListSignalErrorFull() instead")
    void serviceMembersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListConnectorsSignalErrorFull() instead")
    void serviceMembersListConnectorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListConnectorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListCredentialsSignalErrorFull() instead")
    void serviceMembersListCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListDataFreshnessSignalErrorFull() instead")
    void serviceMembersListDataFreshnessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListDataFreshnessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListExportStatusSignalErrorFull() instead")
    void serviceMembersListExportStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListExportStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serviceMembersListGlobalConfigurationSignalErrorFull() instead")
    void serviceMembersListGlobalConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serviceMembersListGlobalConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
