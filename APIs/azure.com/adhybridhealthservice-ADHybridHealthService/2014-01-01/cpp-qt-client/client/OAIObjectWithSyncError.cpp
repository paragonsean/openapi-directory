/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectWithSyncError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectWithSyncError::OAIObjectWithSyncError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectWithSyncError::OAIObjectWithSyncError() {
    this->initializeModel();
}

OAIObjectWithSyncError::~OAIObjectWithSyncError() {}

void OAIObjectWithSyncError::initializeModel() {

    m_attribute_multi_values_isSet = false;
    m_attribute_multi_values_isValid = false;

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;

    m_attribute_value_isSet = false;
    m_attribute_value_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_distinguished_name_isSet = false;
    m_distinguished_name_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_mail_isSet = false;
    m_mail_isValid = false;

    m_max_limit_isSet = false;
    m_max_limit_isValid = false;

    m_min_limit_isSet = false;
    m_min_limit_isValid = false;

    m_modififed_value_isSet = false;
    m_modififed_value_isValid = false;

    m_object_guid_isSet = false;
    m_object_guid_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_source_anchor_isSet = false;
    m_source_anchor_isValid = false;

    m_source_of_authority_isSet = false;
    m_source_of_authority_isValid = false;

    m_time_occured_isSet = false;
    m_time_occured_isValid = false;

    m_user_principal_name_isSet = false;
    m_user_principal_name_isValid = false;
}

void OAIObjectWithSyncError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectWithSyncError::fromJsonObject(QJsonObject json) {

    m_attribute_multi_values_isValid = ::OpenAPI::fromJsonValue(m_attribute_multi_values, json[QString("attributeMultiValues")]);
    m_attribute_multi_values_isSet = !json[QString("attributeMultiValues")].isNull() && m_attribute_multi_values_isValid;

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("attributeName")]);
    m_attribute_name_isSet = !json[QString("attributeName")].isNull() && m_attribute_name_isValid;

    m_attribute_value_isValid = ::OpenAPI::fromJsonValue(m_attribute_value, json[QString("attributeValue")]);
    m_attribute_value_isSet = !json[QString("attributeValue")].isNull() && m_attribute_value_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_distinguished_name_isValid = ::OpenAPI::fromJsonValue(m_distinguished_name, json[QString("distinguishedName")]);
    m_distinguished_name_isSet = !json[QString("distinguishedName")].isNull() && m_distinguished_name_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_mail_isValid = ::OpenAPI::fromJsonValue(m_mail, json[QString("mail")]);
    m_mail_isSet = !json[QString("mail")].isNull() && m_mail_isValid;

    m_max_limit_isValid = ::OpenAPI::fromJsonValue(m_max_limit, json[QString("maxLimit")]);
    m_max_limit_isSet = !json[QString("maxLimit")].isNull() && m_max_limit_isValid;

    m_min_limit_isValid = ::OpenAPI::fromJsonValue(m_min_limit, json[QString("minLimit")]);
    m_min_limit_isSet = !json[QString("minLimit")].isNull() && m_min_limit_isValid;

    m_modififed_value_isValid = ::OpenAPI::fromJsonValue(m_modififed_value, json[QString("modififedValue")]);
    m_modififed_value_isSet = !json[QString("modififedValue")].isNull() && m_modififed_value_isValid;

    m_object_guid_isValid = ::OpenAPI::fromJsonValue(m_object_guid, json[QString("objectGuid")]);
    m_object_guid_isSet = !json[QString("objectGuid")].isNull() && m_object_guid_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_source_anchor_isValid = ::OpenAPI::fromJsonValue(m_source_anchor, json[QString("sourceAnchor")]);
    m_source_anchor_isSet = !json[QString("sourceAnchor")].isNull() && m_source_anchor_isValid;

    m_source_of_authority_isValid = ::OpenAPI::fromJsonValue(m_source_of_authority, json[QString("sourceOfAuthority")]);
    m_source_of_authority_isSet = !json[QString("sourceOfAuthority")].isNull() && m_source_of_authority_isValid;

    m_time_occured_isValid = ::OpenAPI::fromJsonValue(m_time_occured, json[QString("timeOccured")]);
    m_time_occured_isSet = !json[QString("timeOccured")].isNull() && m_time_occured_isValid;

    m_user_principal_name_isValid = ::OpenAPI::fromJsonValue(m_user_principal_name, json[QString("userPrincipalName")]);
    m_user_principal_name_isSet = !json[QString("userPrincipalName")].isNull() && m_user_principal_name_isValid;
}

QString OAIObjectWithSyncError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectWithSyncError::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_multi_values_isSet) {
        obj.insert(QString("attributeMultiValues"), ::OpenAPI::toJsonValue(m_attribute_multi_values));
    }
    if (m_attribute_name_isSet) {
        obj.insert(QString("attributeName"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    if (m_attribute_value_isSet) {
        obj.insert(QString("attributeValue"), ::OpenAPI::toJsonValue(m_attribute_value));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_distinguished_name_isSet) {
        obj.insert(QString("distinguishedName"), ::OpenAPI::toJsonValue(m_distinguished_name));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_mail_isSet) {
        obj.insert(QString("mail"), ::OpenAPI::toJsonValue(m_mail));
    }
    if (m_max_limit_isSet) {
        obj.insert(QString("maxLimit"), ::OpenAPI::toJsonValue(m_max_limit));
    }
    if (m_min_limit_isSet) {
        obj.insert(QString("minLimit"), ::OpenAPI::toJsonValue(m_min_limit));
    }
    if (m_modififed_value_isSet) {
        obj.insert(QString("modififedValue"), ::OpenAPI::toJsonValue(m_modififed_value));
    }
    if (m_object_guid_isSet) {
        obj.insert(QString("objectGuid"), ::OpenAPI::toJsonValue(m_object_guid));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_source_anchor_isSet) {
        obj.insert(QString("sourceAnchor"), ::OpenAPI::toJsonValue(m_source_anchor));
    }
    if (m_source_of_authority_isSet) {
        obj.insert(QString("sourceOfAuthority"), ::OpenAPI::toJsonValue(m_source_of_authority));
    }
    if (m_time_occured_isSet) {
        obj.insert(QString("timeOccured"), ::OpenAPI::toJsonValue(m_time_occured));
    }
    if (m_user_principal_name_isSet) {
        obj.insert(QString("userPrincipalName"), ::OpenAPI::toJsonValue(m_user_principal_name));
    }
    return obj;
}

bool OAIObjectWithSyncError::isAttributeMultiValues() const {
    return m_attribute_multi_values;
}
void OAIObjectWithSyncError::setAttributeMultiValues(const bool &attribute_multi_values) {
    m_attribute_multi_values = attribute_multi_values;
    m_attribute_multi_values_isSet = true;
}

bool OAIObjectWithSyncError::is_attribute_multi_values_Set() const{
    return m_attribute_multi_values_isSet;
}

bool OAIObjectWithSyncError::is_attribute_multi_values_Valid() const{
    return m_attribute_multi_values_isValid;
}

QString OAIObjectWithSyncError::getAttributeName() const {
    return m_attribute_name;
}
void OAIObjectWithSyncError::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAIObjectWithSyncError::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAIObjectWithSyncError::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

QString OAIObjectWithSyncError::getAttributeValue() const {
    return m_attribute_value;
}
void OAIObjectWithSyncError::setAttributeValue(const QString &attribute_value) {
    m_attribute_value = attribute_value;
    m_attribute_value_isSet = true;
}

bool OAIObjectWithSyncError::is_attribute_value_Set() const{
    return m_attribute_value_isSet;
}

bool OAIObjectWithSyncError::is_attribute_value_Valid() const{
    return m_attribute_value_isValid;
}

QString OAIObjectWithSyncError::getDisplayName() const {
    return m_display_name;
}
void OAIObjectWithSyncError::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIObjectWithSyncError::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIObjectWithSyncError::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIObjectWithSyncError::getDistinguishedName() const {
    return m_distinguished_name;
}
void OAIObjectWithSyncError::setDistinguishedName(const QString &distinguished_name) {
    m_distinguished_name = distinguished_name;
    m_distinguished_name_isSet = true;
}

bool OAIObjectWithSyncError::is_distinguished_name_Set() const{
    return m_distinguished_name_isSet;
}

bool OAIObjectWithSyncError::is_distinguished_name_Valid() const{
    return m_distinguished_name_isValid;
}

QString OAIObjectWithSyncError::getErrorType() const {
    return m_error_type;
}
void OAIObjectWithSyncError::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIObjectWithSyncError::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIObjectWithSyncError::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QString OAIObjectWithSyncError::getMail() const {
    return m_mail;
}
void OAIObjectWithSyncError::setMail(const QString &mail) {
    m_mail = mail;
    m_mail_isSet = true;
}

bool OAIObjectWithSyncError::is_mail_Set() const{
    return m_mail_isSet;
}

bool OAIObjectWithSyncError::is_mail_Valid() const{
    return m_mail_isValid;
}

QString OAIObjectWithSyncError::getMaxLimit() const {
    return m_max_limit;
}
void OAIObjectWithSyncError::setMaxLimit(const QString &max_limit) {
    m_max_limit = max_limit;
    m_max_limit_isSet = true;
}

bool OAIObjectWithSyncError::is_max_limit_Set() const{
    return m_max_limit_isSet;
}

bool OAIObjectWithSyncError::is_max_limit_Valid() const{
    return m_max_limit_isValid;
}

QString OAIObjectWithSyncError::getMinLimit() const {
    return m_min_limit;
}
void OAIObjectWithSyncError::setMinLimit(const QString &min_limit) {
    m_min_limit = min_limit;
    m_min_limit_isSet = true;
}

bool OAIObjectWithSyncError::is_min_limit_Set() const{
    return m_min_limit_isSet;
}

bool OAIObjectWithSyncError::is_min_limit_Valid() const{
    return m_min_limit_isValid;
}

QString OAIObjectWithSyncError::getModififedValue() const {
    return m_modififed_value;
}
void OAIObjectWithSyncError::setModififedValue(const QString &modififed_value) {
    m_modififed_value = modififed_value;
    m_modififed_value_isSet = true;
}

bool OAIObjectWithSyncError::is_modififed_value_Set() const{
    return m_modififed_value_isSet;
}

bool OAIObjectWithSyncError::is_modififed_value_Valid() const{
    return m_modififed_value_isValid;
}

QString OAIObjectWithSyncError::getObjectGuid() const {
    return m_object_guid;
}
void OAIObjectWithSyncError::setObjectGuid(const QString &object_guid) {
    m_object_guid = object_guid;
    m_object_guid_isSet = true;
}

bool OAIObjectWithSyncError::is_object_guid_Set() const{
    return m_object_guid_isSet;
}

bool OAIObjectWithSyncError::is_object_guid_Valid() const{
    return m_object_guid_isValid;
}

QString OAIObjectWithSyncError::getObjectType() const {
    return m_object_type;
}
void OAIObjectWithSyncError::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIObjectWithSyncError::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIObjectWithSyncError::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAIObjectWithSyncError::getSourceAnchor() const {
    return m_source_anchor;
}
void OAIObjectWithSyncError::setSourceAnchor(const QString &source_anchor) {
    m_source_anchor = source_anchor;
    m_source_anchor_isSet = true;
}

bool OAIObjectWithSyncError::is_source_anchor_Set() const{
    return m_source_anchor_isSet;
}

bool OAIObjectWithSyncError::is_source_anchor_Valid() const{
    return m_source_anchor_isValid;
}

QString OAIObjectWithSyncError::getSourceOfAuthority() const {
    return m_source_of_authority;
}
void OAIObjectWithSyncError::setSourceOfAuthority(const QString &source_of_authority) {
    m_source_of_authority = source_of_authority;
    m_source_of_authority_isSet = true;
}

bool OAIObjectWithSyncError::is_source_of_authority_Set() const{
    return m_source_of_authority_isSet;
}

bool OAIObjectWithSyncError::is_source_of_authority_Valid() const{
    return m_source_of_authority_isValid;
}

QDateTime OAIObjectWithSyncError::getTimeOccured() const {
    return m_time_occured;
}
void OAIObjectWithSyncError::setTimeOccured(const QDateTime &time_occured) {
    m_time_occured = time_occured;
    m_time_occured_isSet = true;
}

bool OAIObjectWithSyncError::is_time_occured_Set() const{
    return m_time_occured_isSet;
}

bool OAIObjectWithSyncError::is_time_occured_Valid() const{
    return m_time_occured_isValid;
}

QString OAIObjectWithSyncError::getUserPrincipalName() const {
    return m_user_principal_name;
}
void OAIObjectWithSyncError::setUserPrincipalName(const QString &user_principal_name) {
    m_user_principal_name = user_principal_name;
    m_user_principal_name_isSet = true;
}

bool OAIObjectWithSyncError::is_user_principal_name_Set() const{
    return m_user_principal_name_isSet;
}

bool OAIObjectWithSyncError::is_user_principal_name_Valid() const{
    return m_user_principal_name_isValid;
}

bool OAIObjectWithSyncError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_multi_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distinguished_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modififed_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_anchor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_of_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_occured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectWithSyncError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
