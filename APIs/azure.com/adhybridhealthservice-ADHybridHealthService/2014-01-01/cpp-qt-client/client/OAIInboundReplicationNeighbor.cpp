/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundReplicationNeighbor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundReplicationNeighbor::OAIInboundReplicationNeighbor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundReplicationNeighbor::OAIInboundReplicationNeighbor() {
    this->initializeModel();
}

OAIInboundReplicationNeighbor::~OAIInboundReplicationNeighbor() {}

void OAIInboundReplicationNeighbor::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_consecutive_failure_count_isSet = false;
    m_consecutive_failure_count_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;

    m_error_title_isSet = false;
    m_error_title_isValid = false;

    m_fix_details_isSet = false;
    m_fix_details_isValid = false;

    m_fix_link_isSet = false;
    m_fix_link_isValid = false;

    m_last_attempted_sync_isSet = false;
    m_last_attempted_sync_isValid = false;

    m_last_error_code_isSet = false;
    m_last_error_code_isValid = false;

    m_last_error_message_isSet = false;
    m_last_error_message_isValid = false;

    m_last_successful_sync_isSet = false;
    m_last_successful_sync_isValid = false;

    m_naming_context_isSet = false;
    m_naming_context_isValid = false;

    m_source_domain_controller_isSet = false;
    m_source_domain_controller_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIInboundReplicationNeighbor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundReplicationNeighbor::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_consecutive_failure_count_isValid = ::OpenAPI::fromJsonValue(m_consecutive_failure_count, json[QString("consecutiveFailureCount")]);
    m_consecutive_failure_count_isSet = !json[QString("consecutiveFailureCount")].isNull() && m_consecutive_failure_count_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(m_error_description, json[QString("errorDescription")]);
    m_error_description_isSet = !json[QString("errorDescription")].isNull() && m_error_description_isValid;

    m_error_title_isValid = ::OpenAPI::fromJsonValue(m_error_title, json[QString("errorTitle")]);
    m_error_title_isSet = !json[QString("errorTitle")].isNull() && m_error_title_isValid;

    m_fix_details_isValid = ::OpenAPI::fromJsonValue(m_fix_details, json[QString("fixDetails")]);
    m_fix_details_isSet = !json[QString("fixDetails")].isNull() && m_fix_details_isValid;

    m_fix_link_isValid = ::OpenAPI::fromJsonValue(m_fix_link, json[QString("fixLink")]);
    m_fix_link_isSet = !json[QString("fixLink")].isNull() && m_fix_link_isValid;

    m_last_attempted_sync_isValid = ::OpenAPI::fromJsonValue(m_last_attempted_sync, json[QString("lastAttemptedSync")]);
    m_last_attempted_sync_isSet = !json[QString("lastAttemptedSync")].isNull() && m_last_attempted_sync_isValid;

    m_last_error_code_isValid = ::OpenAPI::fromJsonValue(m_last_error_code, json[QString("lastErrorCode")]);
    m_last_error_code_isSet = !json[QString("lastErrorCode")].isNull() && m_last_error_code_isValid;

    m_last_error_message_isValid = ::OpenAPI::fromJsonValue(m_last_error_message, json[QString("lastErrorMessage")]);
    m_last_error_message_isSet = !json[QString("lastErrorMessage")].isNull() && m_last_error_message_isValid;

    m_last_successful_sync_isValid = ::OpenAPI::fromJsonValue(m_last_successful_sync, json[QString("lastSuccessfulSync")]);
    m_last_successful_sync_isSet = !json[QString("lastSuccessfulSync")].isNull() && m_last_successful_sync_isValid;

    m_naming_context_isValid = ::OpenAPI::fromJsonValue(m_naming_context, json[QString("namingContext")]);
    m_naming_context_isSet = !json[QString("namingContext")].isNull() && m_naming_context_isValid;

    m_source_domain_controller_isValid = ::OpenAPI::fromJsonValue(m_source_domain_controller, json[QString("sourceDomainController")]);
    m_source_domain_controller_isSet = !json[QString("sourceDomainController")].isNull() && m_source_domain_controller_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIInboundReplicationNeighbor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundReplicationNeighbor::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info_isSet) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_consecutive_failure_count_isSet) {
        obj.insert(QString("consecutiveFailureCount"), ::OpenAPI::toJsonValue(m_consecutive_failure_count));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("errorDescription"), ::OpenAPI::toJsonValue(m_error_description));
    }
    if (m_error_title_isSet) {
        obj.insert(QString("errorTitle"), ::OpenAPI::toJsonValue(m_error_title));
    }
    if (m_fix_details_isSet) {
        obj.insert(QString("fixDetails"), ::OpenAPI::toJsonValue(m_fix_details));
    }
    if (m_fix_link_isSet) {
        obj.insert(QString("fixLink"), ::OpenAPI::toJsonValue(m_fix_link));
    }
    if (m_last_attempted_sync_isSet) {
        obj.insert(QString("lastAttemptedSync"), ::OpenAPI::toJsonValue(m_last_attempted_sync));
    }
    if (m_last_error_code_isSet) {
        obj.insert(QString("lastErrorCode"), ::OpenAPI::toJsonValue(m_last_error_code));
    }
    if (m_last_error_message_isSet) {
        obj.insert(QString("lastErrorMessage"), ::OpenAPI::toJsonValue(m_last_error_message));
    }
    if (m_last_successful_sync_isSet) {
        obj.insert(QString("lastSuccessfulSync"), ::OpenAPI::toJsonValue(m_last_successful_sync));
    }
    if (m_naming_context_isSet) {
        obj.insert(QString("namingContext"), ::OpenAPI::toJsonValue(m_naming_context));
    }
    if (m_source_domain_controller_isSet) {
        obj.insert(QString("sourceDomainController"), ::OpenAPI::toJsonValue(m_source_domain_controller));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIInboundReplicationNeighbor::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIInboundReplicationNeighbor::setAdditionalInfo(const QString &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIInboundReplicationNeighbor::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

qint32 OAIInboundReplicationNeighbor::getConsecutiveFailureCount() const {
    return m_consecutive_failure_count;
}
void OAIInboundReplicationNeighbor::setConsecutiveFailureCount(const qint32 &consecutive_failure_count) {
    m_consecutive_failure_count = consecutive_failure_count;
    m_consecutive_failure_count_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_consecutive_failure_count_Set() const{
    return m_consecutive_failure_count_isSet;
}

bool OAIInboundReplicationNeighbor::is_consecutive_failure_count_Valid() const{
    return m_consecutive_failure_count_isValid;
}

QString OAIInboundReplicationNeighbor::getErrorDescription() const {
    return m_error_description;
}
void OAIInboundReplicationNeighbor::setErrorDescription(const QString &error_description) {
    m_error_description = error_description;
    m_error_description_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAIInboundReplicationNeighbor::is_error_description_Valid() const{
    return m_error_description_isValid;
}

QString OAIInboundReplicationNeighbor::getErrorTitle() const {
    return m_error_title;
}
void OAIInboundReplicationNeighbor::setErrorTitle(const QString &error_title) {
    m_error_title = error_title;
    m_error_title_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_error_title_Set() const{
    return m_error_title_isSet;
}

bool OAIInboundReplicationNeighbor::is_error_title_Valid() const{
    return m_error_title_isValid;
}

QString OAIInboundReplicationNeighbor::getFixDetails() const {
    return m_fix_details;
}
void OAIInboundReplicationNeighbor::setFixDetails(const QString &fix_details) {
    m_fix_details = fix_details;
    m_fix_details_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_fix_details_Set() const{
    return m_fix_details_isSet;
}

bool OAIInboundReplicationNeighbor::is_fix_details_Valid() const{
    return m_fix_details_isValid;
}

QString OAIInboundReplicationNeighbor::getFixLink() const {
    return m_fix_link;
}
void OAIInboundReplicationNeighbor::setFixLink(const QString &fix_link) {
    m_fix_link = fix_link;
    m_fix_link_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_fix_link_Set() const{
    return m_fix_link_isSet;
}

bool OAIInboundReplicationNeighbor::is_fix_link_Valid() const{
    return m_fix_link_isValid;
}

QDateTime OAIInboundReplicationNeighbor::getLastAttemptedSync() const {
    return m_last_attempted_sync;
}
void OAIInboundReplicationNeighbor::setLastAttemptedSync(const QDateTime &last_attempted_sync) {
    m_last_attempted_sync = last_attempted_sync;
    m_last_attempted_sync_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_last_attempted_sync_Set() const{
    return m_last_attempted_sync_isSet;
}

bool OAIInboundReplicationNeighbor::is_last_attempted_sync_Valid() const{
    return m_last_attempted_sync_isValid;
}

qint32 OAIInboundReplicationNeighbor::getLastErrorCode() const {
    return m_last_error_code;
}
void OAIInboundReplicationNeighbor::setLastErrorCode(const qint32 &last_error_code) {
    m_last_error_code = last_error_code;
    m_last_error_code_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_last_error_code_Set() const{
    return m_last_error_code_isSet;
}

bool OAIInboundReplicationNeighbor::is_last_error_code_Valid() const{
    return m_last_error_code_isValid;
}

QString OAIInboundReplicationNeighbor::getLastErrorMessage() const {
    return m_last_error_message;
}
void OAIInboundReplicationNeighbor::setLastErrorMessage(const QString &last_error_message) {
    m_last_error_message = last_error_message;
    m_last_error_message_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_last_error_message_Set() const{
    return m_last_error_message_isSet;
}

bool OAIInboundReplicationNeighbor::is_last_error_message_Valid() const{
    return m_last_error_message_isValid;
}

QDateTime OAIInboundReplicationNeighbor::getLastSuccessfulSync() const {
    return m_last_successful_sync;
}
void OAIInboundReplicationNeighbor::setLastSuccessfulSync(const QDateTime &last_successful_sync) {
    m_last_successful_sync = last_successful_sync;
    m_last_successful_sync_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_last_successful_sync_Set() const{
    return m_last_successful_sync_isSet;
}

bool OAIInboundReplicationNeighbor::is_last_successful_sync_Valid() const{
    return m_last_successful_sync_isValid;
}

QString OAIInboundReplicationNeighbor::getNamingContext() const {
    return m_naming_context;
}
void OAIInboundReplicationNeighbor::setNamingContext(const QString &naming_context) {
    m_naming_context = naming_context;
    m_naming_context_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_naming_context_Set() const{
    return m_naming_context_isSet;
}

bool OAIInboundReplicationNeighbor::is_naming_context_Valid() const{
    return m_naming_context_isValid;
}

QString OAIInboundReplicationNeighbor::getSourceDomainController() const {
    return m_source_domain_controller;
}
void OAIInboundReplicationNeighbor::setSourceDomainController(const QString &source_domain_controller) {
    m_source_domain_controller = source_domain_controller;
    m_source_domain_controller_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_source_domain_controller_Set() const{
    return m_source_domain_controller_isSet;
}

bool OAIInboundReplicationNeighbor::is_source_domain_controller_Valid() const{
    return m_source_domain_controller_isValid;
}

qint32 OAIInboundReplicationNeighbor::getStatus() const {
    return m_status;
}
void OAIInboundReplicationNeighbor::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInboundReplicationNeighbor::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInboundReplicationNeighbor::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIInboundReplicationNeighbor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consecutive_failure_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fix_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fix_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_attempted_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_naming_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_domain_controller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundReplicationNeighbor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
