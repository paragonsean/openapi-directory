/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForestSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForestSummary::OAIForestSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForestSummary::OAIForestSummary() {
    this->initializeModel();
}

OAIForestSummary::~OAIForestSummary() {}

void OAIForestSummary::initializeModel() {

    m_domain_count_isSet = false;
    m_domain_count_isValid = false;

    m_domains_isSet = false;
    m_domains_isValid = false;

    m_forest_name_isSet = false;
    m_forest_name_isValid = false;

    m_monitored_dc_count_isSet = false;
    m_monitored_dc_count_isValid = false;

    m_site_count_isSet = false;
    m_site_count_isValid = false;

    m_sites_isSet = false;
    m_sites_isValid = false;

    m_total_dc_count_isSet = false;
    m_total_dc_count_isValid = false;
}

void OAIForestSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForestSummary::fromJsonObject(QJsonObject json) {

    m_domain_count_isValid = ::OpenAPI::fromJsonValue(m_domain_count, json[QString("domainCount")]);
    m_domain_count_isSet = !json[QString("domainCount")].isNull() && m_domain_count_isValid;

    m_domains_isValid = ::OpenAPI::fromJsonValue(m_domains, json[QString("domains")]);
    m_domains_isSet = !json[QString("domains")].isNull() && m_domains_isValid;

    m_forest_name_isValid = ::OpenAPI::fromJsonValue(m_forest_name, json[QString("forestName")]);
    m_forest_name_isSet = !json[QString("forestName")].isNull() && m_forest_name_isValid;

    m_monitored_dc_count_isValid = ::OpenAPI::fromJsonValue(m_monitored_dc_count, json[QString("monitoredDcCount")]);
    m_monitored_dc_count_isSet = !json[QString("monitoredDcCount")].isNull() && m_monitored_dc_count_isValid;

    m_site_count_isValid = ::OpenAPI::fromJsonValue(m_site_count, json[QString("siteCount")]);
    m_site_count_isSet = !json[QString("siteCount")].isNull() && m_site_count_isValid;

    m_sites_isValid = ::OpenAPI::fromJsonValue(m_sites, json[QString("sites")]);
    m_sites_isSet = !json[QString("sites")].isNull() && m_sites_isValid;

    m_total_dc_count_isValid = ::OpenAPI::fromJsonValue(m_total_dc_count, json[QString("totalDcCount")]);
    m_total_dc_count_isSet = !json[QString("totalDcCount")].isNull() && m_total_dc_count_isValid;
}

QString OAIForestSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForestSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_count_isSet) {
        obj.insert(QString("domainCount"), ::OpenAPI::toJsonValue(m_domain_count));
    }
    if (m_domains.size() > 0) {
        obj.insert(QString("domains"), ::OpenAPI::toJsonValue(m_domains));
    }
    if (m_forest_name_isSet) {
        obj.insert(QString("forestName"), ::OpenAPI::toJsonValue(m_forest_name));
    }
    if (m_monitored_dc_count_isSet) {
        obj.insert(QString("monitoredDcCount"), ::OpenAPI::toJsonValue(m_monitored_dc_count));
    }
    if (m_site_count_isSet) {
        obj.insert(QString("siteCount"), ::OpenAPI::toJsonValue(m_site_count));
    }
    if (m_sites.size() > 0) {
        obj.insert(QString("sites"), ::OpenAPI::toJsonValue(m_sites));
    }
    if (m_total_dc_count_isSet) {
        obj.insert(QString("totalDcCount"), ::OpenAPI::toJsonValue(m_total_dc_count));
    }
    return obj;
}

qint32 OAIForestSummary::getDomainCount() const {
    return m_domain_count;
}
void OAIForestSummary::setDomainCount(const qint32 &domain_count) {
    m_domain_count = domain_count;
    m_domain_count_isSet = true;
}

bool OAIForestSummary::is_domain_count_Set() const{
    return m_domain_count_isSet;
}

bool OAIForestSummary::is_domain_count_Valid() const{
    return m_domain_count_isValid;
}

QList<QString> OAIForestSummary::getDomains() const {
    return m_domains;
}
void OAIForestSummary::setDomains(const QList<QString> &domains) {
    m_domains = domains;
    m_domains_isSet = true;
}

bool OAIForestSummary::is_domains_Set() const{
    return m_domains_isSet;
}

bool OAIForestSummary::is_domains_Valid() const{
    return m_domains_isValid;
}

QString OAIForestSummary::getForestName() const {
    return m_forest_name;
}
void OAIForestSummary::setForestName(const QString &forest_name) {
    m_forest_name = forest_name;
    m_forest_name_isSet = true;
}

bool OAIForestSummary::is_forest_name_Set() const{
    return m_forest_name_isSet;
}

bool OAIForestSummary::is_forest_name_Valid() const{
    return m_forest_name_isValid;
}

qint32 OAIForestSummary::getMonitoredDcCount() const {
    return m_monitored_dc_count;
}
void OAIForestSummary::setMonitoredDcCount(const qint32 &monitored_dc_count) {
    m_monitored_dc_count = monitored_dc_count;
    m_monitored_dc_count_isSet = true;
}

bool OAIForestSummary::is_monitored_dc_count_Set() const{
    return m_monitored_dc_count_isSet;
}

bool OAIForestSummary::is_monitored_dc_count_Valid() const{
    return m_monitored_dc_count_isValid;
}

qint32 OAIForestSummary::getSiteCount() const {
    return m_site_count;
}
void OAIForestSummary::setSiteCount(const qint32 &site_count) {
    m_site_count = site_count;
    m_site_count_isSet = true;
}

bool OAIForestSummary::is_site_count_Set() const{
    return m_site_count_isSet;
}

bool OAIForestSummary::is_site_count_Valid() const{
    return m_site_count_isValid;
}

QList<QString> OAIForestSummary::getSites() const {
    return m_sites;
}
void OAIForestSummary::setSites(const QList<QString> &sites) {
    m_sites = sites;
    m_sites_isSet = true;
}

bool OAIForestSummary::is_sites_Set() const{
    return m_sites_isSet;
}

bool OAIForestSummary::is_sites_Valid() const{
    return m_sites_isValid;
}

qint32 OAIForestSummary::getTotalDcCount() const {
    return m_total_dc_count;
}
void OAIForestSummary::setTotalDcCount(const qint32 &total_dc_count) {
    m_total_dc_count = total_dc_count;
    m_total_dc_count_isSet = true;
}

bool OAIForestSummary::is_total_dc_count_Set() const{
    return m_total_dc_count_isSet;
}

bool OAIForestSummary::is_total_dc_count_Valid() const{
    return m_total_dc_count_isValid;
}

bool OAIForestSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_forest_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitored_dc_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_dc_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForestSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
