/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeMapping::OAIAttributeMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeMapping::OAIAttributeMapping() {
    this->initializeModel();
}

OAIAttributeMapping::~OAIAttributeMapping() {}

void OAIAttributeMapping::initializeModel() {

    m_context_id_isSet = false;
    m_context_id_isValid = false;

    m_destination_attribute_isSet = false;
    m_destination_attribute_isValid = false;

    m_mapping_source_isSet = false;
    m_mapping_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAttributeMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeMapping::fromJsonObject(QJsonObject json) {

    m_context_id_isValid = ::OpenAPI::fromJsonValue(m_context_id, json[QString("contextId")]);
    m_context_id_isSet = !json[QString("contextId")].isNull() && m_context_id_isValid;

    m_destination_attribute_isValid = ::OpenAPI::fromJsonValue(m_destination_attribute, json[QString("destinationAttribute")]);
    m_destination_attribute_isSet = !json[QString("destinationAttribute")].isNull() && m_destination_attribute_isValid;

    m_mapping_source_isValid = ::OpenAPI::fromJsonValue(m_mapping_source, json[QString("mappingSource")]);
    m_mapping_source_isSet = !json[QString("mappingSource")].isNull() && m_mapping_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAttributeMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_context_id_isSet) {
        obj.insert(QString("contextId"), ::OpenAPI::toJsonValue(m_context_id));
    }
    if (m_destination_attribute_isSet) {
        obj.insert(QString("destinationAttribute"), ::OpenAPI::toJsonValue(m_destination_attribute));
    }
    if (m_mapping_source.isSet()) {
        obj.insert(QString("mappingSource"), ::OpenAPI::toJsonValue(m_mapping_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAttributeMapping::getContextId() const {
    return m_context_id;
}
void OAIAttributeMapping::setContextId(const QString &context_id) {
    m_context_id = context_id;
    m_context_id_isSet = true;
}

bool OAIAttributeMapping::is_context_id_Set() const{
    return m_context_id_isSet;
}

bool OAIAttributeMapping::is_context_id_Valid() const{
    return m_context_id_isValid;
}

QString OAIAttributeMapping::getDestinationAttribute() const {
    return m_destination_attribute;
}
void OAIAttributeMapping::setDestinationAttribute(const QString &destination_attribute) {
    m_destination_attribute = destination_attribute;
    m_destination_attribute_isSet = true;
}

bool OAIAttributeMapping::is_destination_attribute_Set() const{
    return m_destination_attribute_isSet;
}

bool OAIAttributeMapping::is_destination_attribute_Valid() const{
    return m_destination_attribute_isValid;
}

OAIAttributeMppingSource OAIAttributeMapping::getMappingSource() const {
    return m_mapping_source;
}
void OAIAttributeMapping::setMappingSource(const OAIAttributeMppingSource &mapping_source) {
    m_mapping_source = mapping_source;
    m_mapping_source_isSet = true;
}

bool OAIAttributeMapping::is_mapping_source_Set() const{
    return m_mapping_source_isSet;
}

bool OAIAttributeMapping::is_mapping_source_Valid() const{
    return m_mapping_source_isValid;
}

QString OAIAttributeMapping::getType() const {
    return m_type;
}
void OAIAttributeMapping::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAttributeMapping::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAttributeMapping::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAttributeMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
