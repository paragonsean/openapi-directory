/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricGroup::OAIMetricGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricGroup::OAIMetricGroup() {
    this->initializeModel();
}

OAIMetricGroup::~OAIMetricGroup() {}

void OAIMetricGroup::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_invisible_for_ui_isSet = false;
    m_invisible_for_ui_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIMetricGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricGroup::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_invisible_for_ui_isValid = ::OpenAPI::fromJsonValue(m_invisible_for_ui, json[QString("invisibleForUi")]);
    m_invisible_for_ui_isSet = !json[QString("invisibleForUi")].isNull() && m_invisible_for_ui_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;
}

QString OAIMetricGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_invisible_for_ui_isSet) {
        obj.insert(QString("invisibleForUi"), ::OpenAPI::toJsonValue(m_invisible_for_ui));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

QString OAIMetricGroup::getDisplayName() const {
    return m_display_name;
}
void OAIMetricGroup::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMetricGroup::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMetricGroup::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIMetricGroup::isInvisibleForUi() const {
    return m_invisible_for_ui;
}
void OAIMetricGroup::setInvisibleForUi(const bool &invisible_for_ui) {
    m_invisible_for_ui = invisible_for_ui;
    m_invisible_for_ui_isSet = true;
}

bool OAIMetricGroup::is_invisible_for_ui_Set() const{
    return m_invisible_for_ui_isSet;
}

bool OAIMetricGroup::is_invisible_for_ui_Valid() const{
    return m_invisible_for_ui_isValid;
}

QString OAIMetricGroup::getKey() const {
    return m_key;
}
void OAIMetricGroup::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIMetricGroup::is_key_Set() const{
    return m_key_isSet;
}

bool OAIMetricGroup::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIMetricGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invisible_for_ui_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
