/**
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeNotReimportedDelta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeNotReimportedDelta::OAIChangeNotReimportedDelta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeNotReimportedDelta::OAIChangeNotReimportedDelta() {
    this->initializeModel();
}

OAIChangeNotReimportedDelta::~OAIChangeNotReimportedDelta() {}

void OAIChangeNotReimportedDelta::initializeModel() {

    m_anchor_isSet = false;
    m_anchor_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_dn_attributes_isSet = false;
    m_dn_attributes_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;
}

void OAIChangeNotReimportedDelta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeNotReimportedDelta::fromJsonObject(QJsonObject json) {

    m_anchor_isValid = ::OpenAPI::fromJsonValue(m_anchor, json[QString("anchor")]);
    m_anchor_isSet = !json[QString("anchor")].isNull() && m_anchor_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_dn_attributes_isValid = ::OpenAPI::fromJsonValue(m_dn_attributes, json[QString("dnAttributes")]);
    m_dn_attributes_isSet = !json[QString("dnAttributes")].isNull() && m_dn_attributes_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;
}

QString OAIChangeNotReimportedDelta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeNotReimportedDelta::asJsonObject() const {
    QJsonObject obj;
    if (m_anchor_isSet) {
        obj.insert(QString("anchor"), ::OpenAPI::toJsonValue(m_anchor));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_dn_attributes.size() > 0) {
        obj.insert(QString("dnAttributes"), ::OpenAPI::toJsonValue(m_dn_attributes));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    return obj;
}

QString OAIChangeNotReimportedDelta::getAnchor() const {
    return m_anchor;
}
void OAIChangeNotReimportedDelta::setAnchor(const QString &anchor) {
    m_anchor = anchor;
    m_anchor_isSet = true;
}

bool OAIChangeNotReimportedDelta::is_anchor_Set() const{
    return m_anchor_isSet;
}

bool OAIChangeNotReimportedDelta::is_anchor_Valid() const{
    return m_anchor_isValid;
}

QList<OAIAttributeDelta> OAIChangeNotReimportedDelta::getAttributes() const {
    return m_attributes;
}
void OAIChangeNotReimportedDelta::setAttributes(const QList<OAIAttributeDelta> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIChangeNotReimportedDelta::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIChangeNotReimportedDelta::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QList<OAIAttributeDelta> OAIChangeNotReimportedDelta::getDnAttributes() const {
    return m_dn_attributes;
}
void OAIChangeNotReimportedDelta::setDnAttributes(const QList<OAIAttributeDelta> &dn_attributes) {
    m_dn_attributes = dn_attributes;
    m_dn_attributes_isSet = true;
}

bool OAIChangeNotReimportedDelta::is_dn_attributes_Set() const{
    return m_dn_attributes_isSet;
}

bool OAIChangeNotReimportedDelta::is_dn_attributes_Valid() const{
    return m_dn_attributes_isValid;
}

QString OAIChangeNotReimportedDelta::getOperationType() const {
    return m_operation_type;
}
void OAIChangeNotReimportedDelta::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIChangeNotReimportedDelta::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIChangeNotReimportedDelta::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

bool OAIChangeNotReimportedDelta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anchor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dn_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeNotReimportedDelta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
