/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorCounts;
import org.openapitools.client.model.ExportStatuses;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.Items;
import org.openapitools.client.model.MergedExportErrors;
import org.openapitools.client.model.Result;
import org.openapitools.client.model.ServiceProperties;
import org.openapitools.client.model.Services;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicesApi
 */
@Disabled
public class ServicesApiTest {

    private final ServicesApi api = new ServicesApi();

    /**
     * Deletes an Active Directory Domain Service which is onboarded to Azure Active Directory Connect Health.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addsServicesDeleteTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        Boolean confirm = null;
        api.addsServicesDelete(serviceName, apiVersion, confirm);
        // TODO: test validations
    }

    /**
     * Gets the details of an Active Directory Domain Service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addsServicesGetTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        ServiceProperties response = api.addsServicesGet(serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the details of Active Directory Domain Services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addsServicesListPremiumServicesTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        String serviceType = null;
        Integer skipCount = null;
        Integer takeCount = null;
        Services response = api.addsServicesListPremiumServices(apiVersion, $filter, serviceType, skipCount, takeCount);
        // TODO: test validations
    }

    /**
     * Updates an Active Directory Domain Service properties of an onboarded service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addsServicesUpdateTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        ServiceProperties service = null;
        ServiceProperties response = api.addsServicesUpdate(serviceName, apiVersion, service);
        // TODO: test validations
    }

    /**
     * Onboards a service for a given tenant in Azure Active Directory Connect Health.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesAddTest() throws ApiException {
        String apiVersion = null;
        ServiceProperties service = null;
        ServiceProperties response = api.servicesAdd(apiVersion, service);
        // TODO: test validations
    }

    /**
     * Deletes a service which is onboarded to Azure Active Directory Connect Health.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesDeleteTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        Boolean confirm = null;
        api.servicesDelete(serviceName, apiVersion, confirm);
        // TODO: test validations
    }

    /**
     * Gets the details of a service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesGetTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        ServiceProperties response = api.servicesGet(serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Checks if the service has all the pre-requisites met to use a feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesGetFeatureAvailibilityTest() throws ApiException {
        String serviceName = null;
        String featureName = null;
        String apiVersion = null;
        Result response = api.servicesGetFeatureAvailibility(serviceName, featureName, apiVersion);
        // TODO: test validations
    }

    /**
     * Checks if the tenant, to which a service is registered, is whitelisted to use a feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesGetTenantWhitelistingTest() throws ApiException {
        String serviceName = null;
        String featureName = null;
        String apiVersion = null;
        Result response = api.servicesGetTenantWhitelisting(serviceName, featureName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the details of services, for a tenant, that are onboarded to Azure Active Directory Connect Health.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesListTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        String serviceType = null;
        Integer skipCount = null;
        Integer takeCount = null;
        Services response = api.servicesList(apiVersion, $filter, serviceType, skipCount, takeCount);
        // TODO: test validations
    }

    /**
     * Gets the count of latest AAD export errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesListExportErrorsTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        ErrorCounts response = api.servicesListExportErrors(serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     *  Gets the categorized export errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesListExportErrorsV2Test() throws ApiException {
        String serviceName = null;
        String errorBucket = null;
        String apiVersion = null;
        MergedExportErrors response = api.servicesListExportErrorsV2(serviceName, errorBucket, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the export status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesListExportStatusTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        ExportStatuses response = api.servicesListExportStatus(serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the service level monitoring configurations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesListMonitoringConfigurationsTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        Items response = api.servicesListMonitoringConfigurations(serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the details of services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesListPremiumTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        String serviceType = null;
        Integer skipCount = null;
        Integer takeCount = null;
        Services response = api.servicesListPremium(apiVersion, $filter, serviceType, skipCount, takeCount);
        // TODO: test validations
    }

    /**
     * Updates the service properties of an onboarded service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesUpdateTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        ServiceProperties service = null;
        ServiceProperties response = api.servicesUpdate(serviceName, apiVersion, service);
        // TODO: test validations
    }

    /**
     * Updates the service level monitoring configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesUpdateMonitoringConfigurationTest() throws ApiException {
        String serviceName = null;
        String apiVersion = null;
        Item configurationSetting = null;
        api.servicesUpdateMonitoringConfiguration(serviceName, apiVersion, configurationSetting);
        // TODO: test validations
    }

}
