/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The password management settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PasswordManagementSettings {
  public static final String SERIALIZED_NAME_CONNECT_TO = "connectTo";
  @SerializedName(SERIALIZED_NAME_CONNECT_TO)
  private String connectTo;

  public static final String SERIALIZED_NAME_CONNECTION_TIMEOUT = "connectionTimeout";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TIMEOUT)
  private Integer connectionTimeout;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXTENSION_FILE_PATH = "extensionFilePath";
  @SerializedName(SERIALIZED_NAME_EXTENSION_FILE_PATH)
  private String extensionFilePath;

  public static final String SERIALIZED_NAME_MAXIMUM_RETRY_COUNT = "maximumRetryCount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_RETRY_COUNT)
  private Integer maximumRetryCount;

  public static final String SERIALIZED_NAME_REQUIRES_SECURE_CONNECTION = "requiresSecureConnection";
  @SerializedName(SERIALIZED_NAME_REQUIRES_SECURE_CONNECTION)
  private Boolean requiresSecureConnection;

  public static final String SERIALIZED_NAME_RETRY_INTERVAL_IN_SECONDS = "retryIntervalInSeconds";
  @SerializedName(SERIALIZED_NAME_RETRY_INTERVAL_IN_SECONDS)
  private Integer retryIntervalInSeconds;

  /**
   * The supported password operations.
   */
  @JsonAdapter(SupportedPasswordOperationsEnum.Adapter.class)
  public enum SupportedPasswordOperationsEnum {
    UNDEFINED("Undefined"),
    
    SET("Set"),
    
    CHANGE("Change");

    private String value;

    SupportedPasswordOperationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedPasswordOperationsEnum fromValue(String value) {
      for (SupportedPasswordOperationsEnum b : SupportedPasswordOperationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedPasswordOperationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedPasswordOperationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedPasswordOperationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedPasswordOperationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedPasswordOperationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_PASSWORD_OPERATIONS = "supportedPasswordOperations";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_PASSWORD_OPERATIONS)
  private SupportedPasswordOperationsEnum supportedPasswordOperations;

  public static final String SERIALIZED_NAME_UNLOCK_ACCOUNT = "unlockAccount";
  @SerializedName(SERIALIZED_NAME_UNLOCK_ACCOUNT)
  private Boolean unlockAccount;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public PasswordManagementSettings() {
  }

  public PasswordManagementSettings connectTo(String connectTo) {
    this.connectTo = connectTo;
    return this;
  }

  /**
   * Connection point of password management.
   * @return connectTo
   */
  @javax.annotation.Nullable
  public String getConnectTo() {
    return connectTo;
  }

  public void setConnectTo(String connectTo) {
    this.connectTo = connectTo;
  }


  public PasswordManagementSettings connectionTimeout(Integer connectionTimeout) {
    this.connectionTimeout = connectionTimeout;
    return this;
  }

  /**
   * Connection timeout for password extension.
   * @return connectionTimeout
   */
  @javax.annotation.Nullable
  public Integer getConnectionTimeout() {
    return connectionTimeout;
  }

  public void setConnectionTimeout(Integer connectionTimeout) {
    this.connectionTimeout = connectionTimeout;
  }


  public PasswordManagementSettings enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Indicates if the password extension is enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public PasswordManagementSettings extensionFilePath(String extensionFilePath) {
    this.extensionFilePath = extensionFilePath;
    return this;
  }

  /**
   * The file path of the password management extension.
   * @return extensionFilePath
   */
  @javax.annotation.Nullable
  public String getExtensionFilePath() {
    return extensionFilePath;
  }

  public void setExtensionFilePath(String extensionFilePath) {
    this.extensionFilePath = extensionFilePath;
  }


  public PasswordManagementSettings maximumRetryCount(Integer maximumRetryCount) {
    this.maximumRetryCount = maximumRetryCount;
    return this;
  }

  /**
   * The maximum number of retries.
   * @return maximumRetryCount
   */
  @javax.annotation.Nullable
  public Integer getMaximumRetryCount() {
    return maximumRetryCount;
  }

  public void setMaximumRetryCount(Integer maximumRetryCount) {
    this.maximumRetryCount = maximumRetryCount;
  }


  public PasswordManagementSettings requiresSecureConnection(Boolean requiresSecureConnection) {
    this.requiresSecureConnection = requiresSecureConnection;
    return this;
  }

  /**
   * Indicates if a secure connection is required for password management.
   * @return requiresSecureConnection
   */
  @javax.annotation.Nullable
  public Boolean getRequiresSecureConnection() {
    return requiresSecureConnection;
  }

  public void setRequiresSecureConnection(Boolean requiresSecureConnection) {
    this.requiresSecureConnection = requiresSecureConnection;
  }


  public PasswordManagementSettings retryIntervalInSeconds(Integer retryIntervalInSeconds) {
    this.retryIntervalInSeconds = retryIntervalInSeconds;
    return this;
  }

  /**
   * The time between retries.
   * @return retryIntervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getRetryIntervalInSeconds() {
    return retryIntervalInSeconds;
  }

  public void setRetryIntervalInSeconds(Integer retryIntervalInSeconds) {
    this.retryIntervalInSeconds = retryIntervalInSeconds;
  }


  public PasswordManagementSettings supportedPasswordOperations(SupportedPasswordOperationsEnum supportedPasswordOperations) {
    this.supportedPasswordOperations = supportedPasswordOperations;
    return this;
  }

  /**
   * The supported password operations.
   * @return supportedPasswordOperations
   */
  @javax.annotation.Nullable
  public SupportedPasswordOperationsEnum getSupportedPasswordOperations() {
    return supportedPasswordOperations;
  }

  public void setSupportedPasswordOperations(SupportedPasswordOperationsEnum supportedPasswordOperations) {
    this.supportedPasswordOperations = supportedPasswordOperations;
  }


  public PasswordManagementSettings unlockAccount(Boolean unlockAccount) {
    this.unlockAccount = unlockAccount;
    return this;
  }

  /**
   * Indicates if accounts should be unlocked when resetting password.
   * @return unlockAccount
   */
  @javax.annotation.Nullable
  public Boolean getUnlockAccount() {
    return unlockAccount;
  }

  public void setUnlockAccount(Boolean unlockAccount) {
    this.unlockAccount = unlockAccount;
  }


  public PasswordManagementSettings user(String user) {
    this.user = user;
    return this;
  }

  /**
   * User to execute password extension.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordManagementSettings passwordManagementSettings = (PasswordManagementSettings) o;
    return Objects.equals(this.connectTo, passwordManagementSettings.connectTo) &&
        Objects.equals(this.connectionTimeout, passwordManagementSettings.connectionTimeout) &&
        Objects.equals(this.enabled, passwordManagementSettings.enabled) &&
        Objects.equals(this.extensionFilePath, passwordManagementSettings.extensionFilePath) &&
        Objects.equals(this.maximumRetryCount, passwordManagementSettings.maximumRetryCount) &&
        Objects.equals(this.requiresSecureConnection, passwordManagementSettings.requiresSecureConnection) &&
        Objects.equals(this.retryIntervalInSeconds, passwordManagementSettings.retryIntervalInSeconds) &&
        Objects.equals(this.supportedPasswordOperations, passwordManagementSettings.supportedPasswordOperations) &&
        Objects.equals(this.unlockAccount, passwordManagementSettings.unlockAccount) &&
        Objects.equals(this.user, passwordManagementSettings.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectTo, connectionTimeout, enabled, extensionFilePath, maximumRetryCount, requiresSecureConnection, retryIntervalInSeconds, supportedPasswordOperations, unlockAccount, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordManagementSettings {\n");
    sb.append("    connectTo: ").append(toIndentedString(connectTo)).append("\n");
    sb.append("    connectionTimeout: ").append(toIndentedString(connectionTimeout)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    extensionFilePath: ").append(toIndentedString(extensionFilePath)).append("\n");
    sb.append("    maximumRetryCount: ").append(toIndentedString(maximumRetryCount)).append("\n");
    sb.append("    requiresSecureConnection: ").append(toIndentedString(requiresSecureConnection)).append("\n");
    sb.append("    retryIntervalInSeconds: ").append(toIndentedString(retryIntervalInSeconds)).append("\n");
    sb.append("    supportedPasswordOperations: ").append(toIndentedString(supportedPasswordOperations)).append("\n");
    sb.append("    unlockAccount: ").append(toIndentedString(unlockAccount)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectTo");
    openapiFields.add("connectionTimeout");
    openapiFields.add("enabled");
    openapiFields.add("extensionFilePath");
    openapiFields.add("maximumRetryCount");
    openapiFields.add("requiresSecureConnection");
    openapiFields.add("retryIntervalInSeconds");
    openapiFields.add("supportedPasswordOperations");
    openapiFields.add("unlockAccount");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PasswordManagementSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasswordManagementSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordManagementSettings is not found in the empty JSON string", PasswordManagementSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PasswordManagementSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PasswordManagementSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectTo") != null && !jsonObj.get("connectTo").isJsonNull()) && !jsonObj.get("connectTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectTo").toString()));
      }
      if ((jsonObj.get("extensionFilePath") != null && !jsonObj.get("extensionFilePath").isJsonNull()) && !jsonObj.get("extensionFilePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extensionFilePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extensionFilePath").toString()));
      }
      if ((jsonObj.get("supportedPasswordOperations") != null && !jsonObj.get("supportedPasswordOperations").isJsonNull()) && !jsonObj.get("supportedPasswordOperations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedPasswordOperations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supportedPasswordOperations").toString()));
      }
      // validate the optional field `supportedPasswordOperations`
      if (jsonObj.get("supportedPasswordOperations") != null && !jsonObj.get("supportedPasswordOperations").isJsonNull()) {
        SupportedPasswordOperationsEnum.validateJsonElement(jsonObj.get("supportedPasswordOperations"));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordManagementSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordManagementSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordManagementSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordManagementSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordManagementSettings>() {
           @Override
           public void write(JsonWriter out, PasswordManagementSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordManagementSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PasswordManagementSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PasswordManagementSettings
   * @throws IOException if the JSON string is invalid with respect to PasswordManagementSettings
   */
  public static PasswordManagementSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordManagementSettings.class);
  }

  /**
   * Convert an instance of PasswordManagementSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

