/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of the onboarded tenant.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Tenant {
  public static final String SERIALIZED_NAME_AAD_LICENSE = "aadLicense";
  @SerializedName(SERIALIZED_NAME_AAD_LICENSE)
  private String aadLicense;

  public static final String SERIALIZED_NAME_AAD_PREMIUM = "aadPremium";
  @SerializedName(SERIALIZED_NAME_AAD_PREMIUM)
  private Boolean aadPremium;

  public static final String SERIALIZED_NAME_AGENT_AUTO_UPDATE = "agentAutoUpdate";
  @SerializedName(SERIALIZED_NAME_AGENT_AUTO_UPDATE)
  private Boolean agentAutoUpdate;

  public static final String SERIALIZED_NAME_ALERT_SUPPRESSION_TIME_IN_MINS = "alertSuppressionTimeInMins";
  @SerializedName(SERIALIZED_NAME_ALERT_SUPPRESSION_TIME_IN_MINS)
  private Integer alertSuppressionTimeInMins;

  public static final String SERIALIZED_NAME_CONSENTED_TO_MICROSOFT_DEV_OPS = "consentedToMicrosoftDevOps";
  @SerializedName(SERIALIZED_NAME_CONSENTED_TO_MICROSOFT_DEV_OPS)
  private Boolean consentedToMicrosoftDevOps;

  public static final String SERIALIZED_NAME_COUNTRY_LETTER_CODE = "countryLetterCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_LETTER_CODE)
  private String countryLetterCode;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DEV_OPS_TTL = "devOpsTtl";
  @SerializedName(SERIALIZED_NAME_DEV_OPS_TTL)
  private OffsetDateTime devOpsTtl;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DISABLED_REASON = "disabledReason";
  @SerializedName(SERIALIZED_NAME_DISABLED_REASON)
  private Integer disabledReason;

  public static final String SERIALIZED_NAME_GLOBAL_ADMINS_EMAIL = "globalAdminsEmail";
  @SerializedName(SERIALIZED_NAME_GLOBAL_ADMINS_EMAIL)
  private List<String> globalAdminsEmail = new ArrayList<>();

  public static final String SERIALIZED_NAME_INITIAL_DOMAIN = "initialDomain";
  @SerializedName(SERIALIZED_NAME_INITIAL_DOMAIN)
  private String initialDomain;

  public static final String SERIALIZED_NAME_LAST_DISABLED = "lastDisabled";
  @SerializedName(SERIALIZED_NAME_LAST_DISABLED)
  private OffsetDateTime lastDisabled;

  public static final String SERIALIZED_NAME_LAST_VERIFIED = "lastVerified";
  @SerializedName(SERIALIZED_NAME_LAST_VERIFIED)
  private OffsetDateTime lastVerified;

  public static final String SERIALIZED_NAME_ONBOARDED = "onboarded";
  @SerializedName(SERIALIZED_NAME_ONBOARDED)
  private Boolean onboarded;

  public static final String SERIALIZED_NAME_ONBOARDING_ALLOWED = "onboardingAllowed";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_ALLOWED)
  private Boolean onboardingAllowed;

  public static final String SERIALIZED_NAME_PKS_CERTIFICATE = "pksCertificate";
  @SerializedName(SERIALIZED_NAME_PKS_CERTIFICATE)
  private Object pksCertificate;

  public static final String SERIALIZED_NAME_PRIVATE_PREVIEW_TENANT = "privatePreviewTenant";
  @SerializedName(SERIALIZED_NAME_PRIVATE_PREVIEW_TENANT)
  private Boolean privatePreviewTenant;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TENANT_IN_QUARANTINE = "tenantInQuarantine";
  @SerializedName(SERIALIZED_NAME_TENANT_IN_QUARANTINE)
  private Boolean tenantInQuarantine;

  public static final String SERIALIZED_NAME_TENANT_NAME = "tenantName";
  @SerializedName(SERIALIZED_NAME_TENANT_NAME)
  private String tenantName;

  public Tenant() {
  }

  public Tenant aadLicense(String aadLicense) {
    this.aadLicense = aadLicense;
    return this;
  }

  /**
   * The Azure Active Directory license of the tenant.
   * @return aadLicense
   */
  @javax.annotation.Nullable
  public String getAadLicense() {
    return aadLicense;
  }

  public void setAadLicense(String aadLicense) {
    this.aadLicense = aadLicense;
  }


  public Tenant aadPremium(Boolean aadPremium) {
    this.aadPremium = aadPremium;
    return this;
  }

  /**
   * Indicate if the tenant has Azure Active Directory Premium license or not.
   * @return aadPremium
   */
  @javax.annotation.Nullable
  public Boolean getAadPremium() {
    return aadPremium;
  }

  public void setAadPremium(Boolean aadPremium) {
    this.aadPremium = aadPremium;
  }


  public Tenant agentAutoUpdate(Boolean agentAutoUpdate) {
    this.agentAutoUpdate = agentAutoUpdate;
    return this;
  }

  /**
   * Indicates if the tenant is configured to automatically receive updates for Azure Active Directory Connect Health client side features.
   * @return agentAutoUpdate
   */
  @javax.annotation.Nullable
  public Boolean getAgentAutoUpdate() {
    return agentAutoUpdate;
  }

  public void setAgentAutoUpdate(Boolean agentAutoUpdate) {
    this.agentAutoUpdate = agentAutoUpdate;
  }


  public Tenant alertSuppressionTimeInMins(Integer alertSuppressionTimeInMins) {
    this.alertSuppressionTimeInMins = alertSuppressionTimeInMins;
    return this;
  }

  /**
   * The time in minutes after which an alert will be auto-suppressed.
   * @return alertSuppressionTimeInMins
   */
  @javax.annotation.Nullable
  public Integer getAlertSuppressionTimeInMins() {
    return alertSuppressionTimeInMins;
  }

  public void setAlertSuppressionTimeInMins(Integer alertSuppressionTimeInMins) {
    this.alertSuppressionTimeInMins = alertSuppressionTimeInMins;
  }


  public Tenant consentedToMicrosoftDevOps(Boolean consentedToMicrosoftDevOps) {
    this.consentedToMicrosoftDevOps = consentedToMicrosoftDevOps;
    return this;
  }

  /**
   * Indicates if the tenant data can be seen by Microsoft through Azure portal.
   * @return consentedToMicrosoftDevOps
   */
  @javax.annotation.Nullable
  public Boolean getConsentedToMicrosoftDevOps() {
    return consentedToMicrosoftDevOps;
  }

  public void setConsentedToMicrosoftDevOps(Boolean consentedToMicrosoftDevOps) {
    this.consentedToMicrosoftDevOps = consentedToMicrosoftDevOps;
  }


  public Tenant countryLetterCode(String countryLetterCode) {
    this.countryLetterCode = countryLetterCode;
    return this;
  }

  /**
   * The country letter code of the tenant.
   * @return countryLetterCode
   */
  @javax.annotation.Nullable
  public String getCountryLetterCode() {
    return countryLetterCode;
  }

  public void setCountryLetterCode(String countryLetterCode) {
    this.countryLetterCode = countryLetterCode;
  }


  public Tenant createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date, in UTC, when the tenant was onboarded to Azure Active Directory Connect Health.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public Tenant devOpsTtl(OffsetDateTime devOpsTtl) {
    this.devOpsTtl = devOpsTtl;
    return this;
  }

  /**
   * The date and time, in UTC, till when the tenant data can be seen by Microsoft through Azure portal.
   * @return devOpsTtl
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDevOpsTtl() {
    return devOpsTtl;
  }

  public void setDevOpsTtl(OffsetDateTime devOpsTtl) {
    this.devOpsTtl = devOpsTtl;
  }


  public Tenant disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Indicates if the tenant is disabled in Azure Active Directory Connect Health.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public Tenant disabledReason(Integer disabledReason) {
    this.disabledReason = disabledReason;
    return this;
  }

  /**
   * The reason due to which the tenant was disabled in Azure Active Directory Connect Health.
   * @return disabledReason
   */
  @javax.annotation.Nullable
  public Integer getDisabledReason() {
    return disabledReason;
  }

  public void setDisabledReason(Integer disabledReason) {
    this.disabledReason = disabledReason;
  }


  public Tenant globalAdminsEmail(List<String> globalAdminsEmail) {
    this.globalAdminsEmail = globalAdminsEmail;
    return this;
  }

  public Tenant addGlobalAdminsEmailItem(String globalAdminsEmailItem) {
    if (this.globalAdminsEmail == null) {
      this.globalAdminsEmail = new ArrayList<>();
    }
    this.globalAdminsEmail.add(globalAdminsEmailItem);
    return this;
  }

  /**
   * The list of global administrators for the tenant.
   * @return globalAdminsEmail
   */
  @javax.annotation.Nullable
  public List<String> getGlobalAdminsEmail() {
    return globalAdminsEmail;
  }

  public void setGlobalAdminsEmail(List<String> globalAdminsEmail) {
    this.globalAdminsEmail = globalAdminsEmail;
  }


  public Tenant initialDomain(String initialDomain) {
    this.initialDomain = initialDomain;
    return this;
  }

  /**
   * The initial domain of the tenant.
   * @return initialDomain
   */
  @javax.annotation.Nullable
  public String getInitialDomain() {
    return initialDomain;
  }

  public void setInitialDomain(String initialDomain) {
    this.initialDomain = initialDomain;
  }


  public Tenant lastDisabled(OffsetDateTime lastDisabled) {
    this.lastDisabled = lastDisabled;
    return this;
  }

  /**
   * The date and time, in UTC, when the tenant was last disabled in Azure Active Directory Connect Health.
   * @return lastDisabled
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDisabled() {
    return lastDisabled;
  }

  public void setLastDisabled(OffsetDateTime lastDisabled) {
    this.lastDisabled = lastDisabled;
  }


  public Tenant lastVerified(OffsetDateTime lastVerified) {
    this.lastVerified = lastVerified;
    return this;
  }

  /**
   * The date and time, in UTC, when the tenant onboarding status in Azure Active Directory Connect Health was last verified.
   * @return lastVerified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastVerified() {
    return lastVerified;
  }

  public void setLastVerified(OffsetDateTime lastVerified) {
    this.lastVerified = lastVerified;
  }


  public Tenant onboarded(Boolean onboarded) {
    this.onboarded = onboarded;
    return this;
  }

  /**
   * Indicates if the tenant is already onboarded to Azure Active Directory Connect Health.
   * @return onboarded
   */
  @javax.annotation.Nullable
  public Boolean getOnboarded() {
    return onboarded;
  }

  public void setOnboarded(Boolean onboarded) {
    this.onboarded = onboarded;
  }


  public Tenant onboardingAllowed(Boolean onboardingAllowed) {
    this.onboardingAllowed = onboardingAllowed;
    return this;
  }

  /**
   * Indicates if the tenant is allowed to  onboard to Azure Active Directory Connect Health.
   * @return onboardingAllowed
   */
  @javax.annotation.Nullable
  public Boolean getOnboardingAllowed() {
    return onboardingAllowed;
  }

  public void setOnboardingAllowed(Boolean onboardingAllowed) {
    this.onboardingAllowed = onboardingAllowed;
  }


  public Tenant pksCertificate(Object pksCertificate) {
    this.pksCertificate = pksCertificate;
    return this;
  }

  /**
   * The certificate associated with the tenant to onboard data to Azure Active Directory Connect Health.
   * @return pksCertificate
   */
  @javax.annotation.Nullable
  public Object getPksCertificate() {
    return pksCertificate;
  }

  public void setPksCertificate(Object pksCertificate) {
    this.pksCertificate = pksCertificate;
  }


  public Tenant privatePreviewTenant(Boolean privatePreviewTenant) {
    this.privatePreviewTenant = privatePreviewTenant;
    return this;
  }

  /**
   * Indicates if the tenant has signed up for private preview of Azure Active Directory Connect Health features.
   * @return privatePreviewTenant
   */
  @javax.annotation.Nullable
  public Boolean getPrivatePreviewTenant() {
    return privatePreviewTenant;
  }

  public void setPrivatePreviewTenant(Boolean privatePreviewTenant) {
    this.privatePreviewTenant = privatePreviewTenant;
  }


  public Tenant tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The Id of the tenant.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public Tenant tenantInQuarantine(Boolean tenantInQuarantine) {
    this.tenantInQuarantine = tenantInQuarantine;
    return this;
  }

  /**
   * Indicates if data collection for this tenant is disabled or not.
   * @return tenantInQuarantine
   */
  @javax.annotation.Nullable
  public Boolean getTenantInQuarantine() {
    return tenantInQuarantine;
  }

  public void setTenantInQuarantine(Boolean tenantInQuarantine) {
    this.tenantInQuarantine = tenantInQuarantine;
  }


  public Tenant tenantName(String tenantName) {
    this.tenantName = tenantName;
    return this;
  }

  /**
   * The name of the tenant.
   * @return tenantName
   */
  @javax.annotation.Nullable
  public String getTenantName() {
    return tenantName;
  }

  public void setTenantName(String tenantName) {
    this.tenantName = tenantName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tenant tenant = (Tenant) o;
    return Objects.equals(this.aadLicense, tenant.aadLicense) &&
        Objects.equals(this.aadPremium, tenant.aadPremium) &&
        Objects.equals(this.agentAutoUpdate, tenant.agentAutoUpdate) &&
        Objects.equals(this.alertSuppressionTimeInMins, tenant.alertSuppressionTimeInMins) &&
        Objects.equals(this.consentedToMicrosoftDevOps, tenant.consentedToMicrosoftDevOps) &&
        Objects.equals(this.countryLetterCode, tenant.countryLetterCode) &&
        Objects.equals(this.createdDate, tenant.createdDate) &&
        Objects.equals(this.devOpsTtl, tenant.devOpsTtl) &&
        Objects.equals(this.disabled, tenant.disabled) &&
        Objects.equals(this.disabledReason, tenant.disabledReason) &&
        Objects.equals(this.globalAdminsEmail, tenant.globalAdminsEmail) &&
        Objects.equals(this.initialDomain, tenant.initialDomain) &&
        Objects.equals(this.lastDisabled, tenant.lastDisabled) &&
        Objects.equals(this.lastVerified, tenant.lastVerified) &&
        Objects.equals(this.onboarded, tenant.onboarded) &&
        Objects.equals(this.onboardingAllowed, tenant.onboardingAllowed) &&
        Objects.equals(this.pksCertificate, tenant.pksCertificate) &&
        Objects.equals(this.privatePreviewTenant, tenant.privatePreviewTenant) &&
        Objects.equals(this.tenantId, tenant.tenantId) &&
        Objects.equals(this.tenantInQuarantine, tenant.tenantInQuarantine) &&
        Objects.equals(this.tenantName, tenant.tenantName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aadLicense, aadPremium, agentAutoUpdate, alertSuppressionTimeInMins, consentedToMicrosoftDevOps, countryLetterCode, createdDate, devOpsTtl, disabled, disabledReason, globalAdminsEmail, initialDomain, lastDisabled, lastVerified, onboarded, onboardingAllowed, pksCertificate, privatePreviewTenant, tenantId, tenantInQuarantine, tenantName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tenant {\n");
    sb.append("    aadLicense: ").append(toIndentedString(aadLicense)).append("\n");
    sb.append("    aadPremium: ").append(toIndentedString(aadPremium)).append("\n");
    sb.append("    agentAutoUpdate: ").append(toIndentedString(agentAutoUpdate)).append("\n");
    sb.append("    alertSuppressionTimeInMins: ").append(toIndentedString(alertSuppressionTimeInMins)).append("\n");
    sb.append("    consentedToMicrosoftDevOps: ").append(toIndentedString(consentedToMicrosoftDevOps)).append("\n");
    sb.append("    countryLetterCode: ").append(toIndentedString(countryLetterCode)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    devOpsTtl: ").append(toIndentedString(devOpsTtl)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    disabledReason: ").append(toIndentedString(disabledReason)).append("\n");
    sb.append("    globalAdminsEmail: ").append(toIndentedString(globalAdminsEmail)).append("\n");
    sb.append("    initialDomain: ").append(toIndentedString(initialDomain)).append("\n");
    sb.append("    lastDisabled: ").append(toIndentedString(lastDisabled)).append("\n");
    sb.append("    lastVerified: ").append(toIndentedString(lastVerified)).append("\n");
    sb.append("    onboarded: ").append(toIndentedString(onboarded)).append("\n");
    sb.append("    onboardingAllowed: ").append(toIndentedString(onboardingAllowed)).append("\n");
    sb.append("    pksCertificate: ").append(toIndentedString(pksCertificate)).append("\n");
    sb.append("    privatePreviewTenant: ").append(toIndentedString(privatePreviewTenant)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    tenantInQuarantine: ").append(toIndentedString(tenantInQuarantine)).append("\n");
    sb.append("    tenantName: ").append(toIndentedString(tenantName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aadLicense");
    openapiFields.add("aadPremium");
    openapiFields.add("agentAutoUpdate");
    openapiFields.add("alertSuppressionTimeInMins");
    openapiFields.add("consentedToMicrosoftDevOps");
    openapiFields.add("countryLetterCode");
    openapiFields.add("createdDate");
    openapiFields.add("devOpsTtl");
    openapiFields.add("disabled");
    openapiFields.add("disabledReason");
    openapiFields.add("globalAdminsEmail");
    openapiFields.add("initialDomain");
    openapiFields.add("lastDisabled");
    openapiFields.add("lastVerified");
    openapiFields.add("onboarded");
    openapiFields.add("onboardingAllowed");
    openapiFields.add("pksCertificate");
    openapiFields.add("privatePreviewTenant");
    openapiFields.add("tenantId");
    openapiFields.add("tenantInQuarantine");
    openapiFields.add("tenantName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Tenant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tenant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tenant is not found in the empty JSON string", Tenant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tenant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tenant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aadLicense") != null && !jsonObj.get("aadLicense").isJsonNull()) && !jsonObj.get("aadLicense").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aadLicense` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aadLicense").toString()));
      }
      if ((jsonObj.get("countryLetterCode") != null && !jsonObj.get("countryLetterCode").isJsonNull()) && !jsonObj.get("countryLetterCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryLetterCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryLetterCode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("globalAdminsEmail") != null && !jsonObj.get("globalAdminsEmail").isJsonNull() && !jsonObj.get("globalAdminsEmail").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `globalAdminsEmail` to be an array in the JSON string but got `%s`", jsonObj.get("globalAdminsEmail").toString()));
      }
      if ((jsonObj.get("initialDomain") != null && !jsonObj.get("initialDomain").isJsonNull()) && !jsonObj.get("initialDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialDomain").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("tenantName") != null && !jsonObj.get("tenantName").isJsonNull()) && !jsonObj.get("tenantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tenant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tenant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tenant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tenant.class));

       return (TypeAdapter<T>) new TypeAdapter<Tenant>() {
           @Override
           public void write(JsonWriter out, Tenant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tenant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Tenant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Tenant
   * @throws IOException if the JSON string is invalid with respect to Tenant
   */
  public static Tenant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tenant.class);
  }

  /**
   * Convert an instance of Tenant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

