/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConnectorMetadataDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gets the list of connectors and run profile names.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorMetadata {
  public static final String SERIALIZED_NAME_CONNECTORS = "connectors";
  @SerializedName(SERIALIZED_NAME_CONNECTORS)
  private List<ConnectorMetadataDetails> connectors = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_PROFILE_NAMES = "runProfileNames";
  @SerializedName(SERIALIZED_NAME_RUN_PROFILE_NAMES)
  private List<String> runProfileNames = new ArrayList<>();

  public ConnectorMetadata() {
  }

  public ConnectorMetadata connectors(List<ConnectorMetadataDetails> connectors) {
    this.connectors = connectors;
    return this;
  }

  public ConnectorMetadata addConnectorsItem(ConnectorMetadataDetails connectorsItem) {
    if (this.connectors == null) {
      this.connectors = new ArrayList<>();
    }
    this.connectors.add(connectorsItem);
    return this;
  }

  /**
   * The list of connectors.
   * @return connectors
   */
  @javax.annotation.Nullable
  public List<ConnectorMetadataDetails> getConnectors() {
    return connectors;
  }

  public void setConnectors(List<ConnectorMetadataDetails> connectors) {
    this.connectors = connectors;
  }


  public ConnectorMetadata runProfileNames(List<String> runProfileNames) {
    this.runProfileNames = runProfileNames;
    return this;
  }

  public ConnectorMetadata addRunProfileNamesItem(String runProfileNamesItem) {
    if (this.runProfileNames == null) {
      this.runProfileNames = new ArrayList<>();
    }
    this.runProfileNames.add(runProfileNamesItem);
    return this;
  }

  /**
   * The list of run profile names.
   * @return runProfileNames
   */
  @javax.annotation.Nullable
  public List<String> getRunProfileNames() {
    return runProfileNames;
  }

  public void setRunProfileNames(List<String> runProfileNames) {
    this.runProfileNames = runProfileNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorMetadata connectorMetadata = (ConnectorMetadata) o;
    return Objects.equals(this.connectors, connectorMetadata.connectors) &&
        Objects.equals(this.runProfileNames, connectorMetadata.runProfileNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectors, runProfileNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorMetadata {\n");
    sb.append("    connectors: ").append(toIndentedString(connectors)).append("\n");
    sb.append("    runProfileNames: ").append(toIndentedString(runProfileNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectors");
    openapiFields.add("runProfileNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorMetadata is not found in the empty JSON string", ConnectorMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("connectors") != null && !jsonObj.get("connectors").isJsonNull()) {
        JsonArray jsonArrayconnectors = jsonObj.getAsJsonArray("connectors");
        if (jsonArrayconnectors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connectors` to be an array in the JSON string but got `%s`", jsonObj.get("connectors").toString()));
          }

          // validate the optional field `connectors` (array)
          for (int i = 0; i < jsonArrayconnectors.size(); i++) {
            ConnectorMetadataDetails.validateJsonElement(jsonArrayconnectors.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("runProfileNames") != null && !jsonObj.get("runProfileNames").isJsonNull() && !jsonObj.get("runProfileNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `runProfileNames` to be an array in the JSON string but got `%s`", jsonObj.get("runProfileNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorMetadata>() {
           @Override
           public void write(JsonWriter out, ConnectorMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorMetadata
   * @throws IOException if the JSON string is invalid with respect to ConnectorMetadata
   */
  public static ConnectorMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorMetadata.class);
  }

  /**
   * Convert an instance of ConnectorMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

