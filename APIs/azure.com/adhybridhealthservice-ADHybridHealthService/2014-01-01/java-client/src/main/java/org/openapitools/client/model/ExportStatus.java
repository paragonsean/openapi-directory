/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of the export status.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportStatus {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_RUN_STEP_RESULT_ID = "runStepResultId";
  @SerializedName(SERIALIZED_NAME_RUN_STEP_RESULT_ID)
  private String runStepResultId;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private UUID serviceId;

  public static final String SERIALIZED_NAME_SERVICE_MEMBER_ID = "serviceMemberId";
  @SerializedName(SERIALIZED_NAME_SERVICE_MEMBER_ID)
  private UUID serviceMemberId;

  public ExportStatus() {
  }

  public ExportStatus endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The date and time when the export ended.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ExportStatus runStepResultId(String runStepResultId) {
    this.runStepResultId = runStepResultId;
    return this;
  }

  /**
   * The run step result Id.
   * @return runStepResultId
   */
  @javax.annotation.Nullable
  public String getRunStepResultId() {
    return runStepResultId;
  }

  public void setRunStepResultId(String runStepResultId) {
    this.runStepResultId = runStepResultId;
  }


  public ExportStatus serviceId(UUID serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * The id of the service for whom the export status is being reported.
   * @return serviceId
   */
  @javax.annotation.Nullable
  public UUID getServiceId() {
    return serviceId;
  }

  public void setServiceId(UUID serviceId) {
    this.serviceId = serviceId;
  }


  public ExportStatus serviceMemberId(UUID serviceMemberId) {
    this.serviceMemberId = serviceMemberId;
    return this;
  }

  /**
   * The server Id for whom the export status is being reported.
   * @return serviceMemberId
   */
  @javax.annotation.Nullable
  public UUID getServiceMemberId() {
    return serviceMemberId;
  }

  public void setServiceMemberId(UUID serviceMemberId) {
    this.serviceMemberId = serviceMemberId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportStatus exportStatus = (ExportStatus) o;
    return Objects.equals(this.endTime, exportStatus.endTime) &&
        Objects.equals(this.runStepResultId, exportStatus.runStepResultId) &&
        Objects.equals(this.serviceId, exportStatus.serviceId) &&
        Objects.equals(this.serviceMemberId, exportStatus.serviceMemberId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, runStepResultId, serviceId, serviceMemberId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportStatus {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    runStepResultId: ").append(toIndentedString(runStepResultId)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceMemberId: ").append(toIndentedString(serviceMemberId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("runStepResultId");
    openapiFields.add("serviceId");
    openapiFields.add("serviceMemberId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportStatus is not found in the empty JSON string", ExportStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("runStepResultId") != null && !jsonObj.get("runStepResultId").isJsonNull()) && !jsonObj.get("runStepResultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runStepResultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runStepResultId").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("serviceMemberId") != null && !jsonObj.get("serviceMemberId").isJsonNull()) && !jsonObj.get("serviceMemberId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceMemberId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceMemberId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportStatus>() {
           @Override
           public void write(JsonWriter out, ExportStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportStatus
   * @throws IOException if the JSON string is invalid with respect to ExportStatus
   */
  public static ExportStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportStatus.class);
  }

  /**
   * Convert an instance of ExportStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

