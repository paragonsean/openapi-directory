/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The connector connection error.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorConnectionError {
  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private String connectorId;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RUN_STEP_RESULT_ID = "runStepResultId";
  @SerializedName(SERIALIZED_NAME_RUN_STEP_RESULT_ID)
  private String runStepResultId;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_TIME_OCCURED = "timeOccured";
  @SerializedName(SERIALIZED_NAME_TIME_OCCURED)
  private OffsetDateTime timeOccured;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ConnectorConnectionError() {
  }

  public ConnectorConnectionError connectorId(String connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * The connector Id.
   * @return connectorId
   */
  @javax.annotation.Nullable
  public String getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }


  public ConnectorConnectionError errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * The error code.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public ConnectorConnectionError id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The error Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ConnectorConnectionError message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The message for the connection error.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ConnectorConnectionError runStepResultId(String runStepResultId) {
    this.runStepResultId = runStepResultId;
    return this;
  }

  /**
   * The run step result Id.
   * @return runStepResultId
   */
  @javax.annotation.Nullable
  public String getRunStepResultId() {
    return runStepResultId;
  }

  public void setRunStepResultId(String runStepResultId) {
    this.runStepResultId = runStepResultId;
  }


  public ConnectorConnectionError server(String server) {
    this.server = server;
    return this;
  }

  /**
   * The server where the connection error happened.
   * @return server
   */
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public ConnectorConnectionError timeOccured(OffsetDateTime timeOccured) {
    this.timeOccured = timeOccured;
    return this;
  }

  /**
   * The time when the connection error occurred.
   * @return timeOccured
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeOccured() {
    return timeOccured;
  }

  public void setTimeOccured(OffsetDateTime timeOccured) {
    this.timeOccured = timeOccured;
  }


  public ConnectorConnectionError type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of error.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorConnectionError connectorConnectionError = (ConnectorConnectionError) o;
    return Objects.equals(this.connectorId, connectorConnectionError.connectorId) &&
        Objects.equals(this.errorCode, connectorConnectionError.errorCode) &&
        Objects.equals(this.id, connectorConnectionError.id) &&
        Objects.equals(this.message, connectorConnectionError.message) &&
        Objects.equals(this.runStepResultId, connectorConnectionError.runStepResultId) &&
        Objects.equals(this.server, connectorConnectionError.server) &&
        Objects.equals(this.timeOccured, connectorConnectionError.timeOccured) &&
        Objects.equals(this.type, connectorConnectionError.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorId, errorCode, id, message, runStepResultId, server, timeOccured, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorConnectionError {\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    runStepResultId: ").append(toIndentedString(runStepResultId)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    timeOccured: ").append(toIndentedString(timeOccured)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorId");
    openapiFields.add("errorCode");
    openapiFields.add("id");
    openapiFields.add("message");
    openapiFields.add("runStepResultId");
    openapiFields.add("server");
    openapiFields.add("timeOccured");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorConnectionError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorConnectionError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorConnectionError is not found in the empty JSON string", ConnectorConnectionError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorConnectionError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorConnectionError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) && !jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("runStepResultId") != null && !jsonObj.get("runStepResultId").isJsonNull()) && !jsonObj.get("runStepResultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runStepResultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runStepResultId").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorConnectionError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorConnectionError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorConnectionError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorConnectionError.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorConnectionError>() {
           @Override
           public void write(JsonWriter out, ConnectorConnectionError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorConnectionError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorConnectionError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorConnectionError
   * @throws IOException if the JSON string is invalid with respect to ConnectorConnectionError
   */
  public static ConnectorConnectionError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorConnectionError.class);
  }

  /**
   * Convert an instance of ConnectorConnectionError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

