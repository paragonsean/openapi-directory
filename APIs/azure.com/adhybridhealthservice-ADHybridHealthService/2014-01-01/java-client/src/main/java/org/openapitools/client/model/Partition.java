/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PartitionScope;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the partition in Synchronization service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Partition {
  public static final String SERIALIZED_NAME_DN = "dn";
  @SerializedName(SERIALIZED_NAME_DN)
  private String dn;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_DOMAIN = "isDomain";
  @SerializedName(SERIALIZED_NAME_IS_DOMAIN)
  private Boolean isDomain;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTITION_SCOPE = "partitionScope";
  @SerializedName(SERIALIZED_NAME_PARTITION_SCOPE)
  private PartitionScope partitionScope;

  public static final String SERIALIZED_NAME_TIME_CREATED = "timeCreated";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private OffsetDateTime timeCreated;

  public static final String SERIALIZED_NAME_TIME_LAST_MODIFIED = "timeLastModified";
  @SerializedName(SERIALIZED_NAME_TIME_LAST_MODIFIED)
  private OffsetDateTime timeLastModified;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Partition() {
  }

  public Partition dn(String dn) {
    this.dn = dn;
    return this;
  }

  /**
   * The distinguished name for the partition.
   * @return dn
   */
  @javax.annotation.Nullable
  public String getDn() {
    return dn;
  }

  public void setDn(String dn) {
    this.dn = dn;
  }


  public Partition enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Indicates if the partition object is selected or not.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Partition id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The partition Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Partition isDomain(Boolean isDomain) {
    this.isDomain = isDomain;
    return this;
  }

  /**
   * Indicates if the partition is a domain or not.
   * @return isDomain
   */
  @javax.annotation.Nullable
  public Boolean getIsDomain() {
    return isDomain;
  }

  public void setIsDomain(Boolean isDomain) {
    this.isDomain = isDomain;
  }


  public Partition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the partition.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Partition partitionScope(PartitionScope partitionScope) {
    this.partitionScope = partitionScope;
    return this;
  }

  /**
   * Get partitionScope
   * @return partitionScope
   */
  @javax.annotation.Nullable
  public PartitionScope getPartitionScope() {
    return partitionScope;
  }

  public void setPartitionScope(PartitionScope partitionScope) {
    this.partitionScope = partitionScope;
  }


  public Partition timeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
    return this;
  }

  /**
   * The date and time when the partition is created.
   * @return timeCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeCreated() {
    return timeCreated;
  }

  public void setTimeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
  }


  public Partition timeLastModified(OffsetDateTime timeLastModified) {
    this.timeLastModified = timeLastModified;
    return this;
  }

  /**
   * The time and date when the partition was last modified.
   * @return timeLastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeLastModified() {
    return timeLastModified;
  }

  public void setTimeLastModified(OffsetDateTime timeLastModified) {
    this.timeLastModified = timeLastModified;
  }


  public Partition type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The partition type.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Partition partition = (Partition) o;
    return Objects.equals(this.dn, partition.dn) &&
        Objects.equals(this.enabled, partition.enabled) &&
        Objects.equals(this.id, partition.id) &&
        Objects.equals(this.isDomain, partition.isDomain) &&
        Objects.equals(this.name, partition.name) &&
        Objects.equals(this.partitionScope, partition.partitionScope) &&
        Objects.equals(this.timeCreated, partition.timeCreated) &&
        Objects.equals(this.timeLastModified, partition.timeLastModified) &&
        Objects.equals(this.type, partition.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dn, enabled, id, isDomain, name, partitionScope, timeCreated, timeLastModified, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Partition {\n");
    sb.append("    dn: ").append(toIndentedString(dn)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDomain: ").append(toIndentedString(isDomain)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partitionScope: ").append(toIndentedString(partitionScope)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    timeLastModified: ").append(toIndentedString(timeLastModified)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dn");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("isDomain");
    openapiFields.add("name");
    openapiFields.add("partitionScope");
    openapiFields.add("timeCreated");
    openapiFields.add("timeLastModified");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Partition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Partition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Partition is not found in the empty JSON string", Partition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Partition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Partition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dn") != null && !jsonObj.get("dn").isJsonNull()) && !jsonObj.get("dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dn").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `partitionScope`
      if (jsonObj.get("partitionScope") != null && !jsonObj.get("partitionScope").isJsonNull()) {
        PartitionScope.validateJsonElement(jsonObj.get("partitionScope"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Partition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Partition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Partition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Partition.class));

       return (TypeAdapter<T>) new TypeAdapter<Partition>() {
           @Override
           public void write(JsonWriter out, Partition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Partition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Partition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Partition
   * @throws IOException if the JSON string is invalid with respect to Partition
   */
  public static Partition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Partition.class);
  }

  /**
   * Convert an instance of Partition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

