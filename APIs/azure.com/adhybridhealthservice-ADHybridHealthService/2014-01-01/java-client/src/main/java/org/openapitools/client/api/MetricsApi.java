/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConnectorMetadata;
import org.openapitools.client.model.MetricMetadata;
import org.openapitools.client.model.MetricMetadataList;
import org.openapitools.client.model.MetricSets;
import org.openapitools.client.model.Metrics;
import java.time.OffsetDateTime;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for serviceGetMetrics
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGetMetricsCall(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metrics/{metricName}/groups/{groupName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupKey", groupKey));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceGetMetricsValidateBeforeCall(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceGetMetrics(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling serviceGetMetrics(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling serviceGetMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceGetMetrics(Async)");
        }

        return serviceGetMetricsCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, _callback);

    }

    /**
     * 
     * Gets the server related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @return MetricSets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public MetricSets serviceGetMetrics(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        ApiResponse<MetricSets> localVarResp = serviceGetMetricsWithHttpInfo(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the server related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @return ApiResponse&lt;MetricSets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricSets> serviceGetMetricsWithHttpInfo(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        okhttp3.Call localVarCall = serviceGetMetricsValidateBeforeCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<MetricSets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the server related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceGetMetricsAsync(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback<MetricSets> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceGetMetricsValidateBeforeCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<MetricSets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersGetConnectorMetadata
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The service member id. (required)
     * @param metricName The name of the metric. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of connectors and run profile names for the given service and service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersGetConnectorMetadataCall(String serviceName, UUID serviceMemberId, String metricName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/metrics/{metricName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersGetConnectorMetadataValidateBeforeCall(String serviceName, UUID serviceMemberId, String metricName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersGetConnectorMetadata(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersGetConnectorMetadata(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling serviceMembersGetConnectorMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersGetConnectorMetadata(Async)");
        }

        return serviceMembersGetConnectorMetadataCall(serviceName, serviceMemberId, metricName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the list of connectors and run profile names.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The service member id. (required)
     * @param metricName The name of the metric. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ConnectorMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of connectors and run profile names for the given service and service member. </td><td>  -  </td></tr>
     </table>
     */
    public ConnectorMetadata serviceMembersGetConnectorMetadata(String serviceName, UUID serviceMemberId, String metricName, String apiVersion) throws ApiException {
        ApiResponse<ConnectorMetadata> localVarResp = serviceMembersGetConnectorMetadataWithHttpInfo(serviceName, serviceMemberId, metricName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the list of connectors and run profile names.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The service member id. (required)
     * @param metricName The name of the metric. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ConnectorMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of connectors and run profile names for the given service and service member. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectorMetadata> serviceMembersGetConnectorMetadataWithHttpInfo(String serviceName, UUID serviceMemberId, String metricName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersGetConnectorMetadataValidateBeforeCall(serviceName, serviceMemberId, metricName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectorMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the list of connectors and run profile names.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The service member id. (required)
     * @param metricName The name of the metric. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of connectors and run profile names for the given service and service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersGetConnectorMetadataAsync(String serviceName, UUID serviceMemberId, String metricName, String apiVersion, final ApiCallback<ConnectorMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersGetConnectorMetadataValidateBeforeCall(serviceName, serviceMemberId, metricName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectorMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersGetMetrics
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param serviceMemberId The server id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric sets for a given metric. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersGetMetricsCall(String serviceName, String metricName, String groupName, UUID serviceMemberId, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/metrics/{metricName}/groups/{groupName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupKey", groupKey));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersGetMetricsValidateBeforeCall(String serviceName, String metricName, String groupName, UUID serviceMemberId, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersGetMetrics(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling serviceMembersGetMetrics(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling serviceMembersGetMetrics(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersGetMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersGetMetrics(Async)");
        }

        return serviceMembersGetMetricsCall(serviceName, metricName, groupName, serviceMemberId, apiVersion, groupKey, fromDate, toDate, _callback);

    }

    /**
     * 
     * Gets the server related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param serviceMemberId The server id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @return MetricSets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric sets for a given metric. </td><td>  -  </td></tr>
     </table>
     */
    public MetricSets serviceMembersGetMetrics(String serviceName, String metricName, String groupName, UUID serviceMemberId, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        ApiResponse<MetricSets> localVarResp = serviceMembersGetMetricsWithHttpInfo(serviceName, metricName, groupName, serviceMemberId, apiVersion, groupKey, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the server related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param serviceMemberId The server id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @return ApiResponse&lt;MetricSets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric sets for a given metric. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricSets> serviceMembersGetMetricsWithHttpInfo(String serviceName, String metricName, String groupName, UUID serviceMemberId, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersGetMetricsValidateBeforeCall(serviceName, metricName, groupName, serviceMemberId, apiVersion, groupKey, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<MetricSets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the server related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param serviceMemberId The server id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric sets for a given metric. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersGetMetricsAsync(String serviceName, String metricName, String groupName, UUID serviceMemberId, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback<MetricSets> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersGetMetricsValidateBeforeCall(serviceName, metricName, groupName, serviceMemberId, apiVersion, groupKey, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<MetricSets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGetMetricMetadata
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric metadata for a given metric. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetMetricMetadataCall(String serviceName, String metricName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metricmetadata/{metricName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGetMetricMetadataValidateBeforeCall(String serviceName, String metricName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesGetMetricMetadata(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling servicesGetMetricMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesGetMetricMetadata(Async)");
        }

        return servicesGetMetricMetadataCall(serviceName, metricName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the service related metrics information.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return MetricMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric metadata for a given metric. </td><td>  -  </td></tr>
     </table>
     */
    public MetricMetadata servicesGetMetricMetadata(String serviceName, String metricName, String apiVersion) throws ApiException {
        ApiResponse<MetricMetadata> localVarResp = servicesGetMetricMetadataWithHttpInfo(serviceName, metricName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the service related metrics information.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;MetricMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric metadata for a given metric. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricMetadata> servicesGetMetricMetadataWithHttpInfo(String serviceName, String metricName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesGetMetricMetadataValidateBeforeCall(serviceName, metricName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the service related metrics information.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric metadata for a given metric. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetMetricMetadataAsync(String serviceName, String metricName, String apiVersion, final ApiCallback<MetricMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGetMetricMetadataValidateBeforeCall(serviceName, metricName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGetMetricMetadataForGroup
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service and group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetMetricMetadataForGroupCall(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metricmetadata/{metricName}/groups/{groupName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupKey", groupKey));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGetMetricMetadataForGroupValidateBeforeCall(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesGetMetricMetadataForGroup(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling servicesGetMetricMetadataForGroup(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesGetMetricMetadataForGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesGetMetricMetadataForGroup(Async)");
        }

        return servicesGetMetricMetadataForGroupCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, _callback);

    }

    /**
     * 
     * Gets the service related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @return MetricSets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service and group. </td><td>  -  </td></tr>
     </table>
     */
    public MetricSets servicesGetMetricMetadataForGroup(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        ApiResponse<MetricSets> localVarResp = servicesGetMetricMetadataForGroupWithHttpInfo(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the service related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @return ApiResponse&lt;MetricSets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service and group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricSets> servicesGetMetricMetadataForGroupWithHttpInfo(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        okhttp3.Call localVarCall = servicesGetMetricMetadataForGroupValidateBeforeCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<MetricSets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the service related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service and group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetMetricMetadataForGroupAsync(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback<MetricSets> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGetMetricMetadataForGroupValidateBeforeCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<MetricSets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListMetricMetadata
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The metric metadata property filter to apply. (optional)
     * @param perfCounter Indicates if only performance counter metrics are requested. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric metadata for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListMetricMetadataCall(String serviceName, String apiVersion, String $filter, Boolean perfCounter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metricmetadata"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (perfCounter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perfCounter", perfCounter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListMetricMetadataValidateBeforeCall(String serviceName, String apiVersion, String $filter, Boolean perfCounter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesListMetricMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListMetricMetadata(Async)");
        }

        return servicesListMetricMetadataCall(serviceName, apiVersion, $filter, perfCounter, _callback);

    }

    /**
     * 
     * Gets the service related metrics information.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The metric metadata property filter to apply. (optional)
     * @param perfCounter Indicates if only performance counter metrics are requested. (optional)
     * @return MetricMetadataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric metadata for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public MetricMetadataList servicesListMetricMetadata(String serviceName, String apiVersion, String $filter, Boolean perfCounter) throws ApiException {
        ApiResponse<MetricMetadataList> localVarResp = servicesListMetricMetadataWithHttpInfo(serviceName, apiVersion, $filter, perfCounter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the service related metrics information.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The metric metadata property filter to apply. (optional)
     * @param perfCounter Indicates if only performance counter metrics are requested. (optional)
     * @return ApiResponse&lt;MetricMetadataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric metadata for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricMetadataList> servicesListMetricMetadataWithHttpInfo(String serviceName, String apiVersion, String $filter, Boolean perfCounter) throws ApiException {
        okhttp3.Call localVarCall = servicesListMetricMetadataValidateBeforeCall(serviceName, apiVersion, $filter, perfCounter, null);
        Type localVarReturnType = new TypeToken<MetricMetadataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the service related metrics information.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The metric metadata property filter to apply. (optional)
     * @param perfCounter Indicates if only performance counter metrics are requested. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric metadata for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListMetricMetadataAsync(String serviceName, String apiVersion, String $filter, Boolean perfCounter, final ApiCallback<MetricMetadataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListMetricMetadataValidateBeforeCall(serviceName, apiVersion, $filter, perfCounter, _callback);
        Type localVarReturnType = new TypeToken<MetricMetadataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListMetricsAverage
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of average metrics for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListMetricsAverageCall(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metrics/{metricName}/groups/{groupName}/average"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListMetricsAverageValidateBeforeCall(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesListMetricsAverage(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling servicesListMetricsAverage(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesListMetricsAverage(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListMetricsAverage(Async)");
        }

        return servicesListMetricsAverageCall(serviceName, metricName, groupName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the average of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return Metrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of average metrics for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public Metrics servicesListMetricsAverage(String serviceName, String metricName, String groupName, String apiVersion) throws ApiException {
        ApiResponse<Metrics> localVarResp = servicesListMetricsAverageWithHttpInfo(serviceName, metricName, groupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the average of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Metrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of average metrics for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metrics> servicesListMetricsAverageWithHttpInfo(String serviceName, String metricName, String groupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesListMetricsAverageValidateBeforeCall(serviceName, metricName, groupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the average of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of average metrics for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListMetricsAverageAsync(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback<Metrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListMetricsAverageValidateBeforeCall(serviceName, metricName, groupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListMetricsSum
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metrics for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListMetricsSumCall(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/metrics/{metricName}/groups/{groupName}/sum"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListMetricsSumValidateBeforeCall(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesListMetricsSum(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling servicesListMetricsSum(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesListMetricsSum(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListMetricsSum(Async)");
        }

        return servicesListMetricsSumCall(serviceName, metricName, groupName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the sum of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return Metrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metrics for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public Metrics servicesListMetricsSum(String serviceName, String metricName, String groupName, String apiVersion) throws ApiException {
        ApiResponse<Metrics> localVarResp = servicesListMetricsSumWithHttpInfo(serviceName, metricName, groupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the sum of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Metrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metrics for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metrics> servicesListMetricsSumWithHttpInfo(String serviceName, String metricName, String groupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesListMetricsSumValidateBeforeCall(serviceName, metricName, groupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the sum of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metrics for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListMetricsSumAsync(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback<Metrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListMetricsSumValidateBeforeCall(serviceName, metricName, groupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
