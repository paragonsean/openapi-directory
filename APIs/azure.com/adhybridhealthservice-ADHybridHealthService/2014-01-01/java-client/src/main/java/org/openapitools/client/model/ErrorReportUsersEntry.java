/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The bad password login attempt details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErrorReportUsersEntry {
  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_TOTAL_ERROR_ATTEMPTS = "totalErrorAttempts";
  @SerializedName(SERIALIZED_NAME_TOTAL_ERROR_ATTEMPTS)
  private Integer totalErrorAttempts;

  public static final String SERIALIZED_NAME_UNIQUE_IP_ADDRESSES = "uniqueIpAddresses";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IP_ADDRESSES)
  private String uniqueIpAddresses;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public ErrorReportUsersEntry() {
  }

  public ErrorReportUsersEntry ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * The Ip address corresponding to the last error event.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ErrorReportUsersEntry lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The date and time when the last error event was logged.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ErrorReportUsersEntry totalErrorAttempts(Integer totalErrorAttempts) {
    this.totalErrorAttempts = totalErrorAttempts;
    return this;
  }

  /**
   * The total count of specific error events.
   * @return totalErrorAttempts
   */
  @javax.annotation.Nullable
  public Integer getTotalErrorAttempts() {
    return totalErrorAttempts;
  }

  public void setTotalErrorAttempts(Integer totalErrorAttempts) {
    this.totalErrorAttempts = totalErrorAttempts;
  }


  public ErrorReportUsersEntry uniqueIpAddresses(String uniqueIpAddresses) {
    this.uniqueIpAddresses = uniqueIpAddresses;
    return this;
  }

  /**
   * The list of unique IP addresses.
   * @return uniqueIpAddresses
   */
  @javax.annotation.Nullable
  public String getUniqueIpAddresses() {
    return uniqueIpAddresses;
  }

  public void setUniqueIpAddresses(String uniqueIpAddresses) {
    this.uniqueIpAddresses = uniqueIpAddresses;
  }


  public ErrorReportUsersEntry userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The user ID value.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorReportUsersEntry errorReportUsersEntry = (ErrorReportUsersEntry) o;
    return Objects.equals(this.ipAddress, errorReportUsersEntry.ipAddress) &&
        Objects.equals(this.lastUpdated, errorReportUsersEntry.lastUpdated) &&
        Objects.equals(this.totalErrorAttempts, errorReportUsersEntry.totalErrorAttempts) &&
        Objects.equals(this.uniqueIpAddresses, errorReportUsersEntry.uniqueIpAddresses) &&
        Objects.equals(this.userId, errorReportUsersEntry.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipAddress, lastUpdated, totalErrorAttempts, uniqueIpAddresses, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorReportUsersEntry {\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    totalErrorAttempts: ").append(toIndentedString(totalErrorAttempts)).append("\n");
    sb.append("    uniqueIpAddresses: ").append(toIndentedString(uniqueIpAddresses)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipAddress");
    openapiFields.add("lastUpdated");
    openapiFields.add("totalErrorAttempts");
    openapiFields.add("uniqueIpAddresses");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErrorReportUsersEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErrorReportUsersEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorReportUsersEntry is not found in the empty JSON string", ErrorReportUsersEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErrorReportUsersEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErrorReportUsersEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("uniqueIpAddresses") != null && !jsonObj.get("uniqueIpAddresses").isJsonNull()) && !jsonObj.get("uniqueIpAddresses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueIpAddresses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueIpAddresses").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorReportUsersEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorReportUsersEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorReportUsersEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorReportUsersEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorReportUsersEntry>() {
           @Override
           public void write(JsonWriter out, ErrorReportUsersEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorReportUsersEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErrorReportUsersEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErrorReportUsersEntry
   * @throws IOException if the JSON string is invalid with respect to ErrorReportUsersEntry
   */
  public static ErrorReportUsersEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorReportUsersEntry.class);
  }

  /**
   * Convert an instance of ErrorReportUsersEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

