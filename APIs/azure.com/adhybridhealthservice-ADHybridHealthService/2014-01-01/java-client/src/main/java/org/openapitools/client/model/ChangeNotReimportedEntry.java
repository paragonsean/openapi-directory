/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeDelta;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The object entry in a change that is not re-imported.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangeNotReimportedEntry {
  public static final String SERIALIZED_NAME_ANCHOR = "anchor";
  @SerializedName(SERIALIZED_NAME_ANCHOR)
  private String anchor;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<AttributeDelta> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DN = "dn";
  @SerializedName(SERIALIZED_NAME_DN)
  private String dn;

  public static final String SERIALIZED_NAME_DN_ATTRIBUTES = "dnAttributes";
  @SerializedName(SERIALIZED_NAME_DN_ATTRIBUTES)
  private List<AttributeDelta> dnAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECT_CLASSES = "objectClasses";
  @SerializedName(SERIALIZED_NAME_OBJECT_CLASSES)
  private List<String> objectClasses = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_ANCHOR = "parentAnchor";
  @SerializedName(SERIALIZED_NAME_PARENT_ANCHOR)
  private String parentAnchor;

  public static final String SERIALIZED_NAME_PRIMARY_OBJECT_CLASS = "primaryObjectClass";
  @SerializedName(SERIALIZED_NAME_PRIMARY_OBJECT_CLASS)
  private String primaryObjectClass;

  public ChangeNotReimportedEntry() {
  }

  public ChangeNotReimportedEntry anchor(String anchor) {
    this.anchor = anchor;
    return this;
  }

  /**
   * The anchor.
   * @return anchor
   */
  @javax.annotation.Nullable
  public String getAnchor() {
    return anchor;
  }

  public void setAnchor(String anchor) {
    this.anchor = anchor;
  }


  public ChangeNotReimportedEntry attributes(List<AttributeDelta> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ChangeNotReimportedEntry addAttributesItem(AttributeDelta attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * The attributes.
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<AttributeDelta> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<AttributeDelta> attributes) {
    this.attributes = attributes;
  }


  public ChangeNotReimportedEntry dn(String dn) {
    this.dn = dn;
    return this;
  }

  /**
   * The distinguished name.
   * @return dn
   */
  @javax.annotation.Nullable
  public String getDn() {
    return dn;
  }

  public void setDn(String dn) {
    this.dn = dn;
  }


  public ChangeNotReimportedEntry dnAttributes(List<AttributeDelta> dnAttributes) {
    this.dnAttributes = dnAttributes;
    return this;
  }

  public ChangeNotReimportedEntry addDnAttributesItem(AttributeDelta dnAttributesItem) {
    if (this.dnAttributes == null) {
      this.dnAttributes = new ArrayList<>();
    }
    this.dnAttributes.add(dnAttributesItem);
    return this;
  }

  /**
   * The delta attributes for distinguished names.
   * @return dnAttributes
   */
  @javax.annotation.Nullable
  public List<AttributeDelta> getDnAttributes() {
    return dnAttributes;
  }

  public void setDnAttributes(List<AttributeDelta> dnAttributes) {
    this.dnAttributes = dnAttributes;
  }


  public ChangeNotReimportedEntry objectClasses(List<String> objectClasses) {
    this.objectClasses = objectClasses;
    return this;
  }

  public ChangeNotReimportedEntry addObjectClassesItem(String objectClassesItem) {
    if (this.objectClasses == null) {
      this.objectClasses = new ArrayList<>();
    }
    this.objectClasses.add(objectClassesItem);
    return this;
  }

  /**
   * The list of object classes.
   * @return objectClasses
   */
  @javax.annotation.Nullable
  public List<String> getObjectClasses() {
    return objectClasses;
  }

  public void setObjectClasses(List<String> objectClasses) {
    this.objectClasses = objectClasses;
  }


  public ChangeNotReimportedEntry parentAnchor(String parentAnchor) {
    this.parentAnchor = parentAnchor;
    return this;
  }

  /**
   * The parent anchor.
   * @return parentAnchor
   */
  @javax.annotation.Nullable
  public String getParentAnchor() {
    return parentAnchor;
  }

  public void setParentAnchor(String parentAnchor) {
    this.parentAnchor = parentAnchor;
  }


  public ChangeNotReimportedEntry primaryObjectClass(String primaryObjectClass) {
    this.primaryObjectClass = primaryObjectClass;
    return this;
  }

  /**
   * The primary object class.
   * @return primaryObjectClass
   */
  @javax.annotation.Nullable
  public String getPrimaryObjectClass() {
    return primaryObjectClass;
  }

  public void setPrimaryObjectClass(String primaryObjectClass) {
    this.primaryObjectClass = primaryObjectClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeNotReimportedEntry changeNotReimportedEntry = (ChangeNotReimportedEntry) o;
    return Objects.equals(this.anchor, changeNotReimportedEntry.anchor) &&
        Objects.equals(this.attributes, changeNotReimportedEntry.attributes) &&
        Objects.equals(this.dn, changeNotReimportedEntry.dn) &&
        Objects.equals(this.dnAttributes, changeNotReimportedEntry.dnAttributes) &&
        Objects.equals(this.objectClasses, changeNotReimportedEntry.objectClasses) &&
        Objects.equals(this.parentAnchor, changeNotReimportedEntry.parentAnchor) &&
        Objects.equals(this.primaryObjectClass, changeNotReimportedEntry.primaryObjectClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anchor, attributes, dn, dnAttributes, objectClasses, parentAnchor, primaryObjectClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeNotReimportedEntry {\n");
    sb.append("    anchor: ").append(toIndentedString(anchor)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    dn: ").append(toIndentedString(dn)).append("\n");
    sb.append("    dnAttributes: ").append(toIndentedString(dnAttributes)).append("\n");
    sb.append("    objectClasses: ").append(toIndentedString(objectClasses)).append("\n");
    sb.append("    parentAnchor: ").append(toIndentedString(parentAnchor)).append("\n");
    sb.append("    primaryObjectClass: ").append(toIndentedString(primaryObjectClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anchor");
    openapiFields.add("attributes");
    openapiFields.add("dn");
    openapiFields.add("dnAttributes");
    openapiFields.add("objectClasses");
    openapiFields.add("parentAnchor");
    openapiFields.add("primaryObjectClass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangeNotReimportedEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangeNotReimportedEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangeNotReimportedEntry is not found in the empty JSON string", ChangeNotReimportedEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangeNotReimportedEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangeNotReimportedEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("anchor") != null && !jsonObj.get("anchor").isJsonNull()) && !jsonObj.get("anchor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anchor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anchor").toString()));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            AttributeDelta.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if ((jsonObj.get("dn") != null && !jsonObj.get("dn").isJsonNull()) && !jsonObj.get("dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dn").toString()));
      }
      if (jsonObj.get("dnAttributes") != null && !jsonObj.get("dnAttributes").isJsonNull()) {
        JsonArray jsonArraydnAttributes = jsonObj.getAsJsonArray("dnAttributes");
        if (jsonArraydnAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dnAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dnAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("dnAttributes").toString()));
          }

          // validate the optional field `dnAttributes` (array)
          for (int i = 0; i < jsonArraydnAttributes.size(); i++) {
            AttributeDelta.validateJsonElement(jsonArraydnAttributes.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("objectClasses") != null && !jsonObj.get("objectClasses").isJsonNull() && !jsonObj.get("objectClasses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectClasses` to be an array in the JSON string but got `%s`", jsonObj.get("objectClasses").toString()));
      }
      if ((jsonObj.get("parentAnchor") != null && !jsonObj.get("parentAnchor").isJsonNull()) && !jsonObj.get("parentAnchor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentAnchor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentAnchor").toString()));
      }
      if ((jsonObj.get("primaryObjectClass") != null && !jsonObj.get("primaryObjectClass").isJsonNull()) && !jsonObj.get("primaryObjectClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryObjectClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryObjectClass").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangeNotReimportedEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangeNotReimportedEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangeNotReimportedEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangeNotReimportedEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangeNotReimportedEntry>() {
           @Override
           public void write(JsonWriter out, ChangeNotReimportedEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangeNotReimportedEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangeNotReimportedEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangeNotReimportedEntry
   * @throws IOException if the JSON string is invalid with respect to ChangeNotReimportedEntry
   */
  public static ChangeNotReimportedEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangeNotReimportedEntry.class);
  }

  /**
   * Convert an instance of ChangeNotReimportedEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

