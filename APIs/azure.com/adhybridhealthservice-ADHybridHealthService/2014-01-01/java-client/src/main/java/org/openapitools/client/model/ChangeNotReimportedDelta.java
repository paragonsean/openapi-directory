/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeDelta;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The delta in a change that is not re-imported.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangeNotReimportedDelta {
  public static final String SERIALIZED_NAME_ANCHOR = "anchor";
  @SerializedName(SERIALIZED_NAME_ANCHOR)
  private String anchor;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<AttributeDelta> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DN_ATTRIBUTES = "dnAttributes";
  @SerializedName(SERIALIZED_NAME_DN_ATTRIBUTES)
  private List<AttributeDelta> dnAttributes = new ArrayList<>();

  /**
   * The operation type.
   */
  @JsonAdapter(OperationTypeEnum.Adapter.class)
  public enum OperationTypeEnum {
    UNDEFINED("Undefined"),
    
    NONE("None"),
    
    ADD("Add"),
    
    REPLACE("Replace"),
    
    UPDATE("Update"),
    
    DELETE("Delete"),
    
    OBSOLETE("Obsolete"),
    
    DELETE_ADD("DeleteAdd");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationTypeEnum fromValue(String value) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private OperationTypeEnum operationType;

  public ChangeNotReimportedDelta() {
  }

  public ChangeNotReimportedDelta anchor(String anchor) {
    this.anchor = anchor;
    return this;
  }

  /**
   * The anchor.
   * @return anchor
   */
  @javax.annotation.Nullable
  public String getAnchor() {
    return anchor;
  }

  public void setAnchor(String anchor) {
    this.anchor = anchor;
  }


  public ChangeNotReimportedDelta attributes(List<AttributeDelta> attributes) {
    this.attributes = attributes;
    return this;
  }

  public ChangeNotReimportedDelta addAttributesItem(AttributeDelta attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * The attributes.
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<AttributeDelta> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<AttributeDelta> attributes) {
    this.attributes = attributes;
  }


  public ChangeNotReimportedDelta dnAttributes(List<AttributeDelta> dnAttributes) {
    this.dnAttributes = dnAttributes;
    return this;
  }

  public ChangeNotReimportedDelta addDnAttributesItem(AttributeDelta dnAttributesItem) {
    if (this.dnAttributes == null) {
      this.dnAttributes = new ArrayList<>();
    }
    this.dnAttributes.add(dnAttributesItem);
    return this;
  }

  /**
   * The delta attributes for distinguished names.
   * @return dnAttributes
   */
  @javax.annotation.Nullable
  public List<AttributeDelta> getDnAttributes() {
    return dnAttributes;
  }

  public void setDnAttributes(List<AttributeDelta> dnAttributes) {
    this.dnAttributes = dnAttributes;
  }


  public ChangeNotReimportedDelta operationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * The operation type.
   * @return operationType
   */
  @javax.annotation.Nullable
  public OperationTypeEnum getOperationType() {
    return operationType;
  }

  public void setOperationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeNotReimportedDelta changeNotReimportedDelta = (ChangeNotReimportedDelta) o;
    return Objects.equals(this.anchor, changeNotReimportedDelta.anchor) &&
        Objects.equals(this.attributes, changeNotReimportedDelta.attributes) &&
        Objects.equals(this.dnAttributes, changeNotReimportedDelta.dnAttributes) &&
        Objects.equals(this.operationType, changeNotReimportedDelta.operationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anchor, attributes, dnAttributes, operationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeNotReimportedDelta {\n");
    sb.append("    anchor: ").append(toIndentedString(anchor)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    dnAttributes: ").append(toIndentedString(dnAttributes)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anchor");
    openapiFields.add("attributes");
    openapiFields.add("dnAttributes");
    openapiFields.add("operationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangeNotReimportedDelta
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangeNotReimportedDelta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangeNotReimportedDelta is not found in the empty JSON string", ChangeNotReimportedDelta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangeNotReimportedDelta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangeNotReimportedDelta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("anchor") != null && !jsonObj.get("anchor").isJsonNull()) && !jsonObj.get("anchor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anchor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anchor").toString()));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            AttributeDelta.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if (jsonObj.get("dnAttributes") != null && !jsonObj.get("dnAttributes").isJsonNull()) {
        JsonArray jsonArraydnAttributes = jsonObj.getAsJsonArray("dnAttributes");
        if (jsonArraydnAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dnAttributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dnAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("dnAttributes").toString()));
          }

          // validate the optional field `dnAttributes` (array)
          for (int i = 0; i < jsonArraydnAttributes.size(); i++) {
            AttributeDelta.validateJsonElement(jsonArraydnAttributes.get(i));
          };
        }
      }
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      // validate the optional field `operationType`
      if (jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) {
        OperationTypeEnum.validateJsonElement(jsonObj.get("operationType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangeNotReimportedDelta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangeNotReimportedDelta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangeNotReimportedDelta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangeNotReimportedDelta.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangeNotReimportedDelta>() {
           @Override
           public void write(JsonWriter out, ChangeNotReimportedDelta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangeNotReimportedDelta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangeNotReimportedDelta given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangeNotReimportedDelta
   * @throws IOException if the JSON string is invalid with respect to ChangeNotReimportedDelta
   */
  public static ChangeNotReimportedDelta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangeNotReimportedDelta.class);
  }

  /**
   * Convert an instance of ChangeNotReimportedDelta to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

