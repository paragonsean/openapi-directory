/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.AssociatedObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The merged export error.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MergedExportError {
  public static final String SERIALIZED_NAME_ATTRIBUTE_NAME = "attributeName";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME)
  private String attributeName;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE = "attributeValue";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE)
  private String attributeValue;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_CS_OBJECT_ID = "csObjectId";
  @SerializedName(SERIALIZED_NAME_CS_OBJECT_ID)
  private String csObjectId;

  public static final String SERIALIZED_NAME_DN = "dn";
  @SerializedName(SERIALIZED_NAME_DN)
  private String dn;

  public static final String SERIALIZED_NAME_EXISTING_OBJECT = "existingObject";
  @SerializedName(SERIALIZED_NAME_EXISTING_OBJECT)
  private AssociatedObject existingObject;

  public static final String SERIALIZED_NAME_EXPORT_ERROR_STATUS = "exportErrorStatus";
  @SerializedName(SERIALIZED_NAME_EXPORT_ERROR_STATUS)
  private Integer exportErrorStatus;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INCOMING_OBJECT = "incomingObject";
  @SerializedName(SERIALIZED_NAME_INCOMING_OBJECT)
  private AssociatedObject incomingObject;

  public static final String SERIALIZED_NAME_INCOMING_OBJECT_DISPLAY_NAME = "incomingObjectDisplayName";
  @SerializedName(SERIALIZED_NAME_INCOMING_OBJECT_DISPLAY_NAME)
  private String incomingObjectDisplayName;

  public static final String SERIALIZED_NAME_INCOMING_OBJECT_TYPE = "incomingObjectType";
  @SerializedName(SERIALIZED_NAME_INCOMING_OBJECT_TYPE)
  private String incomingObjectType;

  public static final String SERIALIZED_NAME_MERGED_ENTITY_ID = "mergedEntityId";
  @SerializedName(SERIALIZED_NAME_MERGED_ENTITY_ID)
  private UUID mergedEntityId;

  public static final String SERIALIZED_NAME_MODIFIED_OR_REMOVED_ATTRIBUTE_VALUE = "modifiedOrRemovedAttributeValue";
  @SerializedName(SERIALIZED_NAME_MODIFIED_OR_REMOVED_ATTRIBUTE_VALUE)
  private String modifiedOrRemovedAttributeValue;

  public static final String SERIALIZED_NAME_RUN_STEP_RESULT_ID = "runStepResultId";
  @SerializedName(SERIALIZED_NAME_RUN_STEP_RESULT_ID)
  private UUID runStepResultId;

  public static final String SERIALIZED_NAME_SAM_ACCOUNT_NAME = "samAccountName";
  @SerializedName(SERIALIZED_NAME_SAM_ACCOUNT_NAME)
  private String samAccountName;

  public static final String SERIALIZED_NAME_SERVER_ERROR_DETAIL = "serverErrorDetail";
  @SerializedName(SERIALIZED_NAME_SERVER_ERROR_DETAIL)
  private String serverErrorDetail;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private UUID serviceId;

  public static final String SERIALIZED_NAME_SERVICE_MEMBER_ID = "serviceMemberId";
  @SerializedName(SERIALIZED_NAME_SERVICE_MEMBER_ID)
  private UUID serviceMemberId;

  public static final String SERIALIZED_NAME_TIME_FIRST_OCCURRED = "timeFirstOccurred";
  @SerializedName(SERIALIZED_NAME_TIME_FIRST_OCCURRED)
  private OffsetDateTime timeFirstOccurred;

  public static final String SERIALIZED_NAME_TIME_OCCURRED = "timeOccurred";
  @SerializedName(SERIALIZED_NAME_TIME_OCCURRED)
  private OffsetDateTime timeOccurred;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_PRINCIPAL_NAME = "userPrincipalName";
  @SerializedName(SERIALIZED_NAME_USER_PRINCIPAL_NAME)
  private String userPrincipalName;

  public MergedExportError() {
  }

  public MergedExportError attributeName(String attributeName) {
    this.attributeName = attributeName;
    return this;
  }

  /**
   * The attribute name.
   * @return attributeName
   */
  @javax.annotation.Nullable
  public String getAttributeName() {
    return attributeName;
  }

  public void setAttributeName(String attributeName) {
    this.attributeName = attributeName;
  }


  public MergedExportError attributeValue(String attributeValue) {
    this.attributeValue = attributeValue;
    return this;
  }

  /**
   * The attribute value.
   * @return attributeValue
   */
  @javax.annotation.Nullable
  public String getAttributeValue() {
    return attributeValue;
  }

  public void setAttributeValue(String attributeValue) {
    this.attributeValue = attributeValue;
  }


  public MergedExportError createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date and time, in UTC, when the error was created.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public MergedExportError csObjectId(String csObjectId) {
    this.csObjectId = csObjectId;
    return this;
  }

  /**
   *  the cs object Id.
   * @return csObjectId
   */
  @javax.annotation.Nullable
  public String getCsObjectId() {
    return csObjectId;
  }

  public void setCsObjectId(String csObjectId) {
    this.csObjectId = csObjectId;
  }


  public MergedExportError dn(String dn) {
    this.dn = dn;
    return this;
  }

  /**
   * the DN of the object.
   * @return dn
   */
  @javax.annotation.Nullable
  public String getDn() {
    return dn;
  }

  public void setDn(String dn) {
    this.dn = dn;
  }


  public MergedExportError existingObject(AssociatedObject existingObject) {
    this.existingObject = existingObject;
    return this;
  }

  /**
   * Get existingObject
   * @return existingObject
   */
  @javax.annotation.Nullable
  public AssociatedObject getExistingObject() {
    return existingObject;
  }

  public void setExistingObject(AssociatedObject existingObject) {
    this.existingObject = existingObject;
  }


  public MergedExportError exportErrorStatus(Integer exportErrorStatus) {
    this.exportErrorStatus = exportErrorStatus;
    return this;
  }

  /**
   * The export error status.
   * @return exportErrorStatus
   */
  @javax.annotation.Nullable
  public Integer getExportErrorStatus() {
    return exportErrorStatus;
  }

  public void setExportErrorStatus(Integer exportErrorStatus) {
    this.exportErrorStatus = exportErrorStatus;
  }


  public MergedExportError id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The error Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MergedExportError incomingObject(AssociatedObject incomingObject) {
    this.incomingObject = incomingObject;
    return this;
  }

  /**
   * Get incomingObject
   * @return incomingObject
   */
  @javax.annotation.Nullable
  public AssociatedObject getIncomingObject() {
    return incomingObject;
  }

  public void setIncomingObject(AssociatedObject incomingObject) {
    this.incomingObject = incomingObject;
  }


  public MergedExportError incomingObjectDisplayName(String incomingObjectDisplayName) {
    this.incomingObjectDisplayName = incomingObjectDisplayName;
    return this;
  }

  /**
   * The incoming object display name.
   * @return incomingObjectDisplayName
   */
  @javax.annotation.Nullable
  public String getIncomingObjectDisplayName() {
    return incomingObjectDisplayName;
  }

  public void setIncomingObjectDisplayName(String incomingObjectDisplayName) {
    this.incomingObjectDisplayName = incomingObjectDisplayName;
  }


  public MergedExportError incomingObjectType(String incomingObjectType) {
    this.incomingObjectType = incomingObjectType;
    return this;
  }

  /**
   * The incoming object type.
   * @return incomingObjectType
   */
  @javax.annotation.Nullable
  public String getIncomingObjectType() {
    return incomingObjectType;
  }

  public void setIncomingObjectType(String incomingObjectType) {
    this.incomingObjectType = incomingObjectType;
  }


  public MergedExportError mergedEntityId(UUID mergedEntityId) {
    this.mergedEntityId = mergedEntityId;
    return this;
  }

  /**
   * The merged entity Id.
   * @return mergedEntityId
   */
  @javax.annotation.Nullable
  public UUID getMergedEntityId() {
    return mergedEntityId;
  }

  public void setMergedEntityId(UUID mergedEntityId) {
    this.mergedEntityId = mergedEntityId;
  }


  public MergedExportError modifiedOrRemovedAttributeValue(String modifiedOrRemovedAttributeValue) {
    this.modifiedOrRemovedAttributeValue = modifiedOrRemovedAttributeValue;
    return this;
  }

  /**
   * The modified or removed attribute value.
   * @return modifiedOrRemovedAttributeValue
   */
  @javax.annotation.Nullable
  public String getModifiedOrRemovedAttributeValue() {
    return modifiedOrRemovedAttributeValue;
  }

  public void setModifiedOrRemovedAttributeValue(String modifiedOrRemovedAttributeValue) {
    this.modifiedOrRemovedAttributeValue = modifiedOrRemovedAttributeValue;
  }


  public MergedExportError runStepResultId(UUID runStepResultId) {
    this.runStepResultId = runStepResultId;
    return this;
  }

  /**
   * The run step result Id.
   * @return runStepResultId
   */
  @javax.annotation.Nullable
  public UUID getRunStepResultId() {
    return runStepResultId;
  }

  public void setRunStepResultId(UUID runStepResultId) {
    this.runStepResultId = runStepResultId;
  }


  public MergedExportError samAccountName(String samAccountName) {
    this.samAccountName = samAccountName;
    return this;
  }

  /**
   * The sam account name.
   * @return samAccountName
   */
  @javax.annotation.Nullable
  public String getSamAccountName() {
    return samAccountName;
  }

  public void setSamAccountName(String samAccountName) {
    this.samAccountName = samAccountName;
  }


  public MergedExportError serverErrorDetail(String serverErrorDetail) {
    this.serverErrorDetail = serverErrorDetail;
    return this;
  }

  /**
   * The server error details.
   * @return serverErrorDetail
   */
  @javax.annotation.Nullable
  public String getServerErrorDetail() {
    return serverErrorDetail;
  }

  public void setServerErrorDetail(String serverErrorDetail) {
    this.serverErrorDetail = serverErrorDetail;
  }


  public MergedExportError serviceId(UUID serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * The service Id.
   * @return serviceId
   */
  @javax.annotation.Nullable
  public UUID getServiceId() {
    return serviceId;
  }

  public void setServiceId(UUID serviceId) {
    this.serviceId = serviceId;
  }


  public MergedExportError serviceMemberId(UUID serviceMemberId) {
    this.serviceMemberId = serviceMemberId;
    return this;
  }

  /**
   * The server Id.
   * @return serviceMemberId
   */
  @javax.annotation.Nullable
  public UUID getServiceMemberId() {
    return serviceMemberId;
  }

  public void setServiceMemberId(UUID serviceMemberId) {
    this.serviceMemberId = serviceMemberId;
  }


  public MergedExportError timeFirstOccurred(OffsetDateTime timeFirstOccurred) {
    this.timeFirstOccurred = timeFirstOccurred;
    return this;
  }

  /**
   * The time when the error first occurred.
   * @return timeFirstOccurred
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeFirstOccurred() {
    return timeFirstOccurred;
  }

  public void setTimeFirstOccurred(OffsetDateTime timeFirstOccurred) {
    this.timeFirstOccurred = timeFirstOccurred;
  }


  public MergedExportError timeOccurred(OffsetDateTime timeOccurred) {
    this.timeOccurred = timeOccurred;
    return this;
  }

  /**
   * The date and time when the error occurred.
   * @return timeOccurred
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeOccurred() {
    return timeOccurred;
  }

  public void setTimeOccurred(OffsetDateTime timeOccurred) {
    this.timeOccurred = timeOccurred;
  }


  public MergedExportError type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the error.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public MergedExportError userPrincipalName(String userPrincipalName) {
    this.userPrincipalName = userPrincipalName;
    return this;
  }

  /**
   * The user principal name
   * @return userPrincipalName
   */
  @javax.annotation.Nullable
  public String getUserPrincipalName() {
    return userPrincipalName;
  }

  public void setUserPrincipalName(String userPrincipalName) {
    this.userPrincipalName = userPrincipalName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergedExportError mergedExportError = (MergedExportError) o;
    return Objects.equals(this.attributeName, mergedExportError.attributeName) &&
        Objects.equals(this.attributeValue, mergedExportError.attributeValue) &&
        Objects.equals(this.createdDate, mergedExportError.createdDate) &&
        Objects.equals(this.csObjectId, mergedExportError.csObjectId) &&
        Objects.equals(this.dn, mergedExportError.dn) &&
        Objects.equals(this.existingObject, mergedExportError.existingObject) &&
        Objects.equals(this.exportErrorStatus, mergedExportError.exportErrorStatus) &&
        Objects.equals(this.id, mergedExportError.id) &&
        Objects.equals(this.incomingObject, mergedExportError.incomingObject) &&
        Objects.equals(this.incomingObjectDisplayName, mergedExportError.incomingObjectDisplayName) &&
        Objects.equals(this.incomingObjectType, mergedExportError.incomingObjectType) &&
        Objects.equals(this.mergedEntityId, mergedExportError.mergedEntityId) &&
        Objects.equals(this.modifiedOrRemovedAttributeValue, mergedExportError.modifiedOrRemovedAttributeValue) &&
        Objects.equals(this.runStepResultId, mergedExportError.runStepResultId) &&
        Objects.equals(this.samAccountName, mergedExportError.samAccountName) &&
        Objects.equals(this.serverErrorDetail, mergedExportError.serverErrorDetail) &&
        Objects.equals(this.serviceId, mergedExportError.serviceId) &&
        Objects.equals(this.serviceMemberId, mergedExportError.serviceMemberId) &&
        Objects.equals(this.timeFirstOccurred, mergedExportError.timeFirstOccurred) &&
        Objects.equals(this.timeOccurred, mergedExportError.timeOccurred) &&
        Objects.equals(this.type, mergedExportError.type) &&
        Objects.equals(this.userPrincipalName, mergedExportError.userPrincipalName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeName, attributeValue, createdDate, csObjectId, dn, existingObject, exportErrorStatus, id, incomingObject, incomingObjectDisplayName, incomingObjectType, mergedEntityId, modifiedOrRemovedAttributeValue, runStepResultId, samAccountName, serverErrorDetail, serviceId, serviceMemberId, timeFirstOccurred, timeOccurred, type, userPrincipalName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergedExportError {\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    attributeValue: ").append(toIndentedString(attributeValue)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    csObjectId: ").append(toIndentedString(csObjectId)).append("\n");
    sb.append("    dn: ").append(toIndentedString(dn)).append("\n");
    sb.append("    existingObject: ").append(toIndentedString(existingObject)).append("\n");
    sb.append("    exportErrorStatus: ").append(toIndentedString(exportErrorStatus)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    incomingObject: ").append(toIndentedString(incomingObject)).append("\n");
    sb.append("    incomingObjectDisplayName: ").append(toIndentedString(incomingObjectDisplayName)).append("\n");
    sb.append("    incomingObjectType: ").append(toIndentedString(incomingObjectType)).append("\n");
    sb.append("    mergedEntityId: ").append(toIndentedString(mergedEntityId)).append("\n");
    sb.append("    modifiedOrRemovedAttributeValue: ").append(toIndentedString(modifiedOrRemovedAttributeValue)).append("\n");
    sb.append("    runStepResultId: ").append(toIndentedString(runStepResultId)).append("\n");
    sb.append("    samAccountName: ").append(toIndentedString(samAccountName)).append("\n");
    sb.append("    serverErrorDetail: ").append(toIndentedString(serverErrorDetail)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceMemberId: ").append(toIndentedString(serviceMemberId)).append("\n");
    sb.append("    timeFirstOccurred: ").append(toIndentedString(timeFirstOccurred)).append("\n");
    sb.append("    timeOccurred: ").append(toIndentedString(timeOccurred)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userPrincipalName: ").append(toIndentedString(userPrincipalName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeName");
    openapiFields.add("attributeValue");
    openapiFields.add("createdDate");
    openapiFields.add("csObjectId");
    openapiFields.add("dn");
    openapiFields.add("existingObject");
    openapiFields.add("exportErrorStatus");
    openapiFields.add("id");
    openapiFields.add("incomingObject");
    openapiFields.add("incomingObjectDisplayName");
    openapiFields.add("incomingObjectType");
    openapiFields.add("mergedEntityId");
    openapiFields.add("modifiedOrRemovedAttributeValue");
    openapiFields.add("runStepResultId");
    openapiFields.add("samAccountName");
    openapiFields.add("serverErrorDetail");
    openapiFields.add("serviceId");
    openapiFields.add("serviceMemberId");
    openapiFields.add("timeFirstOccurred");
    openapiFields.add("timeOccurred");
    openapiFields.add("type");
    openapiFields.add("userPrincipalName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MergedExportError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MergedExportError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MergedExportError is not found in the empty JSON string", MergedExportError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MergedExportError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MergedExportError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attributeName") != null && !jsonObj.get("attributeName").isJsonNull()) && !jsonObj.get("attributeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeName").toString()));
      }
      if ((jsonObj.get("attributeValue") != null && !jsonObj.get("attributeValue").isJsonNull()) && !jsonObj.get("attributeValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeValue").toString()));
      }
      if ((jsonObj.get("csObjectId") != null && !jsonObj.get("csObjectId").isJsonNull()) && !jsonObj.get("csObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csObjectId").toString()));
      }
      if ((jsonObj.get("dn") != null && !jsonObj.get("dn").isJsonNull()) && !jsonObj.get("dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dn").toString()));
      }
      // validate the optional field `existingObject`
      if (jsonObj.get("existingObject") != null && !jsonObj.get("existingObject").isJsonNull()) {
        AssociatedObject.validateJsonElement(jsonObj.get("existingObject"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `incomingObject`
      if (jsonObj.get("incomingObject") != null && !jsonObj.get("incomingObject").isJsonNull()) {
        AssociatedObject.validateJsonElement(jsonObj.get("incomingObject"));
      }
      if ((jsonObj.get("incomingObjectDisplayName") != null && !jsonObj.get("incomingObjectDisplayName").isJsonNull()) && !jsonObj.get("incomingObjectDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incomingObjectDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incomingObjectDisplayName").toString()));
      }
      if ((jsonObj.get("incomingObjectType") != null && !jsonObj.get("incomingObjectType").isJsonNull()) && !jsonObj.get("incomingObjectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incomingObjectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incomingObjectType").toString()));
      }
      if ((jsonObj.get("mergedEntityId") != null && !jsonObj.get("mergedEntityId").isJsonNull()) && !jsonObj.get("mergedEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergedEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergedEntityId").toString()));
      }
      if ((jsonObj.get("modifiedOrRemovedAttributeValue") != null && !jsonObj.get("modifiedOrRemovedAttributeValue").isJsonNull()) && !jsonObj.get("modifiedOrRemovedAttributeValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedOrRemovedAttributeValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedOrRemovedAttributeValue").toString()));
      }
      if ((jsonObj.get("runStepResultId") != null && !jsonObj.get("runStepResultId").isJsonNull()) && !jsonObj.get("runStepResultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runStepResultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runStepResultId").toString()));
      }
      if ((jsonObj.get("samAccountName") != null && !jsonObj.get("samAccountName").isJsonNull()) && !jsonObj.get("samAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samAccountName").toString()));
      }
      if ((jsonObj.get("serverErrorDetail") != null && !jsonObj.get("serverErrorDetail").isJsonNull()) && !jsonObj.get("serverErrorDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverErrorDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverErrorDetail").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("serviceMemberId") != null && !jsonObj.get("serviceMemberId").isJsonNull()) && !jsonObj.get("serviceMemberId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceMemberId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceMemberId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("userPrincipalName") != null && !jsonObj.get("userPrincipalName").isJsonNull()) && !jsonObj.get("userPrincipalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userPrincipalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userPrincipalName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MergedExportError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MergedExportError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MergedExportError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MergedExportError.class));

       return (TypeAdapter<T>) new TypeAdapter<MergedExportError>() {
           @Override
           public void write(JsonWriter out, MergedExportError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MergedExportError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MergedExportError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MergedExportError
   * @throws IOException if the JSON string is invalid with respect to MergedExportError
   */
  public static MergedExportError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MergedExportError.class);
  }

  /**
   * Convert an instance of MergedExportError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

