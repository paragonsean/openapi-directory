/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The service properties for a given service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceProperties {
  public static final String SERIALIZED_NAME_ACTIVE_ALERTS = "activeAlerts";
  @SerializedName(SERIALIZED_NAME_ACTIVE_ALERTS)
  private Integer activeAlerts;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private String additionalInformation;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_CUSTOM_NOTIFICATION_EMAILS = "customNotificationEmails";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NOTIFICATION_EMAILS)
  private List<String> customNotificationEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_HEALTH = "health";
  @SerializedName(SERIALIZED_NAME_HEALTH)
  private String health;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_DISABLED = "lastDisabled";
  @SerializedName(SERIALIZED_NAME_LAST_DISABLED)
  private OffsetDateTime lastDisabled;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATIONS_COMPUTED = "monitoringConfigurationsComputed";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATIONS_COMPUTED)
  private Object monitoringConfigurationsComputed;

  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATIONS_CUSTOMIZED = "monitoringConfigurationsCustomized";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATIONS_CUSTOMIZED)
  private Object monitoringConfigurationsCustomized;

  public static final String SERIALIZED_NAME_NOTIFICATION_EMAIL_ENABLED = "notificationEmailEnabled";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EMAIL_ENABLED)
  private Boolean notificationEmailEnabled;

  public static final String SERIALIZED_NAME_NOTIFICATION_EMAIL_ENABLED_FOR_GLOBAL_ADMINS = "notificationEmailEnabledForGlobalAdmins";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EMAIL_ENABLED_FOR_GLOBAL_ADMINS)
  private Boolean notificationEmailEnabledForGlobalAdmins;

  public static final String SERIALIZED_NAME_NOTIFICATION_EMAILS = "notificationEmails";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EMAILS)
  private List<String> notificationEmails = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_EMAILS_ENABLED_FOR_GLOBAL_ADMINS = "notificationEmailsEnabledForGlobalAdmins";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EMAILS_ENABLED_FOR_GLOBAL_ADMINS)
  private Boolean notificationEmailsEnabledForGlobalAdmins;

  public static final String SERIALIZED_NAME_ORIGINAL_DISABLED_STATE = "originalDisabledState";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_DISABLED_STATE)
  private Boolean originalDisabledState;

  public static final String SERIALIZED_NAME_RESOLVED_ALERTS = "resolvedAlerts";
  @SerializedName(SERIALIZED_NAME_RESOLVED_ALERTS)
  private Integer resolvedAlerts;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public static final String SERIALIZED_NAME_SIMPLE_PROPERTIES = "simpleProperties";
  @SerializedName(SERIALIZED_NAME_SIMPLE_PROPERTIES)
  private Object simpleProperties;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ServiceProperties() {
  }

  public ServiceProperties activeAlerts(Integer activeAlerts) {
    this.activeAlerts = activeAlerts;
    return this;
  }

  /**
   * The count of alerts that are currently active for the service.
   * @return activeAlerts
   */
  @javax.annotation.Nullable
  public Integer getActiveAlerts() {
    return activeAlerts;
  }

  public void setActiveAlerts(Integer activeAlerts) {
    this.activeAlerts = activeAlerts;
  }


  public ServiceProperties additionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  /**
   * The additional information related to the service.
   * @return additionalInformation
   */
  @javax.annotation.Nullable
  public String getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public ServiceProperties createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date and time, in UTC, when the service was onboarded to Azure Active Directory Connect Health.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public ServiceProperties customNotificationEmails(List<String> customNotificationEmails) {
    this.customNotificationEmails = customNotificationEmails;
    return this;
  }

  public ServiceProperties addCustomNotificationEmailsItem(String customNotificationEmailsItem) {
    if (this.customNotificationEmails == null) {
      this.customNotificationEmails = new ArrayList<>();
    }
    this.customNotificationEmails.add(customNotificationEmailsItem);
    return this;
  }

  /**
   * The list of additional emails that are configured to receive notifications about the service.
   * @return customNotificationEmails
   */
  @javax.annotation.Nullable
  public List<String> getCustomNotificationEmails() {
    return customNotificationEmails;
  }

  public void setCustomNotificationEmails(List<String> customNotificationEmails) {
    this.customNotificationEmails = customNotificationEmails;
  }


  public ServiceProperties disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Indicates if the service is disabled or not.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public ServiceProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the service.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ServiceProperties health(String health) {
    this.health = health;
    return this;
  }

  /**
   * The health of the service.
   * @return health
   */
  @javax.annotation.Nullable
  public String getHealth() {
    return health;
  }

  public void setHealth(String health) {
    this.health = health;
  }


  public ServiceProperties id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the service.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ServiceProperties lastDisabled(OffsetDateTime lastDisabled) {
    this.lastDisabled = lastDisabled;
    return this;
  }

  /**
   * The date and time, in UTC, when the service was last disabled.
   * @return lastDisabled
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDisabled() {
    return lastDisabled;
  }

  public void setLastDisabled(OffsetDateTime lastDisabled) {
    this.lastDisabled = lastDisabled;
  }


  public ServiceProperties lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The date or time , in UTC, when the service properties were last updated.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ServiceProperties monitoringConfigurationsComputed(Object monitoringConfigurationsComputed) {
    this.monitoringConfigurationsComputed = monitoringConfigurationsComputed;
    return this;
  }

  /**
   * The monitoring configuration of the service which determines what activities are monitored by Azure Active Directory Connect Health.
   * @return monitoringConfigurationsComputed
   */
  @javax.annotation.Nullable
  public Object getMonitoringConfigurationsComputed() {
    return monitoringConfigurationsComputed;
  }

  public void setMonitoringConfigurationsComputed(Object monitoringConfigurationsComputed) {
    this.monitoringConfigurationsComputed = monitoringConfigurationsComputed;
  }


  public ServiceProperties monitoringConfigurationsCustomized(Object monitoringConfigurationsCustomized) {
    this.monitoringConfigurationsCustomized = monitoringConfigurationsCustomized;
    return this;
  }

  /**
   * The customized monitoring configuration of the service which determines what activities are monitored by Azure Active Directory Connect Health.
   * @return monitoringConfigurationsCustomized
   */
  @javax.annotation.Nullable
  public Object getMonitoringConfigurationsCustomized() {
    return monitoringConfigurationsCustomized;
  }

  public void setMonitoringConfigurationsCustomized(Object monitoringConfigurationsCustomized) {
    this.monitoringConfigurationsCustomized = monitoringConfigurationsCustomized;
  }


  public ServiceProperties notificationEmailEnabled(Boolean notificationEmailEnabled) {
    this.notificationEmailEnabled = notificationEmailEnabled;
    return this;
  }

  /**
   * Indicates if email notification is enabled or not.
   * @return notificationEmailEnabled
   */
  @javax.annotation.Nullable
  public Boolean getNotificationEmailEnabled() {
    return notificationEmailEnabled;
  }

  public void setNotificationEmailEnabled(Boolean notificationEmailEnabled) {
    this.notificationEmailEnabled = notificationEmailEnabled;
  }


  public ServiceProperties notificationEmailEnabledForGlobalAdmins(Boolean notificationEmailEnabledForGlobalAdmins) {
    this.notificationEmailEnabledForGlobalAdmins = notificationEmailEnabledForGlobalAdmins;
    return this;
  }

  /**
   * Indicates if email notification is enabled for global administrators of the tenant.
   * @return notificationEmailEnabledForGlobalAdmins
   */
  @javax.annotation.Nullable
  public Boolean getNotificationEmailEnabledForGlobalAdmins() {
    return notificationEmailEnabledForGlobalAdmins;
  }

  public void setNotificationEmailEnabledForGlobalAdmins(Boolean notificationEmailEnabledForGlobalAdmins) {
    this.notificationEmailEnabledForGlobalAdmins = notificationEmailEnabledForGlobalAdmins;
  }


  public ServiceProperties notificationEmails(List<String> notificationEmails) {
    this.notificationEmails = notificationEmails;
    return this;
  }

  public ServiceProperties addNotificationEmailsItem(String notificationEmailsItem) {
    if (this.notificationEmails == null) {
      this.notificationEmails = new ArrayList<>();
    }
    this.notificationEmails.add(notificationEmailsItem);
    return this;
  }

  /**
   * The list of emails to whom service notifications will be sent.
   * @return notificationEmails
   */
  @javax.annotation.Nullable
  public List<String> getNotificationEmails() {
    return notificationEmails;
  }

  public void setNotificationEmails(List<String> notificationEmails) {
    this.notificationEmails = notificationEmails;
  }


  public ServiceProperties notificationEmailsEnabledForGlobalAdmins(Boolean notificationEmailsEnabledForGlobalAdmins) {
    this.notificationEmailsEnabledForGlobalAdmins = notificationEmailsEnabledForGlobalAdmins;
    return this;
  }

  /**
   * Indicates if email notification is enabled for global administrators of the tenant.
   * @return notificationEmailsEnabledForGlobalAdmins
   */
  @javax.annotation.Nullable
  public Boolean getNotificationEmailsEnabledForGlobalAdmins() {
    return notificationEmailsEnabledForGlobalAdmins;
  }

  public void setNotificationEmailsEnabledForGlobalAdmins(Boolean notificationEmailsEnabledForGlobalAdmins) {
    this.notificationEmailsEnabledForGlobalAdmins = notificationEmailsEnabledForGlobalAdmins;
  }


  public ServiceProperties originalDisabledState(Boolean originalDisabledState) {
    this.originalDisabledState = originalDisabledState;
    return this;
  }

  /**
   * Gets the original disable state.
   * @return originalDisabledState
   */
  @javax.annotation.Nullable
  public Boolean getOriginalDisabledState() {
    return originalDisabledState;
  }

  public void setOriginalDisabledState(Boolean originalDisabledState) {
    this.originalDisabledState = originalDisabledState;
  }


  public ServiceProperties resolvedAlerts(Integer resolvedAlerts) {
    this.resolvedAlerts = resolvedAlerts;
    return this;
  }

  /**
   * The total count of alerts that has been resolved for the service.
   * @return resolvedAlerts
   */
  @javax.annotation.Nullable
  public Integer getResolvedAlerts() {
    return resolvedAlerts;
  }

  public void setResolvedAlerts(Integer resolvedAlerts) {
    this.resolvedAlerts = resolvedAlerts;
  }


  public ServiceProperties serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * The id of the service.
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public ServiceProperties serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * The name of the service.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public ServiceProperties signature(String signature) {
    this.signature = signature;
    return this;
  }

  /**
   * The signature of the service.
   * @return signature
   */
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }


  public ServiceProperties simpleProperties(Object simpleProperties) {
    this.simpleProperties = simpleProperties;
    return this;
  }

  /**
   * List of service specific configuration properties.
   * @return simpleProperties
   */
  @javax.annotation.Nullable
  public Object getSimpleProperties() {
    return simpleProperties;
  }

  public void setSimpleProperties(Object simpleProperties) {
    this.simpleProperties = simpleProperties;
  }


  public ServiceProperties tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The id of the tenant to which the service is registered to.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public ServiceProperties type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceProperties serviceProperties = (ServiceProperties) o;
    return Objects.equals(this.activeAlerts, serviceProperties.activeAlerts) &&
        Objects.equals(this.additionalInformation, serviceProperties.additionalInformation) &&
        Objects.equals(this.createdDate, serviceProperties.createdDate) &&
        Objects.equals(this.customNotificationEmails, serviceProperties.customNotificationEmails) &&
        Objects.equals(this.disabled, serviceProperties.disabled) &&
        Objects.equals(this.displayName, serviceProperties.displayName) &&
        Objects.equals(this.health, serviceProperties.health) &&
        Objects.equals(this.id, serviceProperties.id) &&
        Objects.equals(this.lastDisabled, serviceProperties.lastDisabled) &&
        Objects.equals(this.lastUpdated, serviceProperties.lastUpdated) &&
        Objects.equals(this.monitoringConfigurationsComputed, serviceProperties.monitoringConfigurationsComputed) &&
        Objects.equals(this.monitoringConfigurationsCustomized, serviceProperties.monitoringConfigurationsCustomized) &&
        Objects.equals(this.notificationEmailEnabled, serviceProperties.notificationEmailEnabled) &&
        Objects.equals(this.notificationEmailEnabledForGlobalAdmins, serviceProperties.notificationEmailEnabledForGlobalAdmins) &&
        Objects.equals(this.notificationEmails, serviceProperties.notificationEmails) &&
        Objects.equals(this.notificationEmailsEnabledForGlobalAdmins, serviceProperties.notificationEmailsEnabledForGlobalAdmins) &&
        Objects.equals(this.originalDisabledState, serviceProperties.originalDisabledState) &&
        Objects.equals(this.resolvedAlerts, serviceProperties.resolvedAlerts) &&
        Objects.equals(this.serviceId, serviceProperties.serviceId) &&
        Objects.equals(this.serviceName, serviceProperties.serviceName) &&
        Objects.equals(this.signature, serviceProperties.signature) &&
        Objects.equals(this.simpleProperties, serviceProperties.simpleProperties) &&
        Objects.equals(this.tenantId, serviceProperties.tenantId) &&
        Objects.equals(this.type, serviceProperties.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeAlerts, additionalInformation, createdDate, customNotificationEmails, disabled, displayName, health, id, lastDisabled, lastUpdated, monitoringConfigurationsComputed, monitoringConfigurationsCustomized, notificationEmailEnabled, notificationEmailEnabledForGlobalAdmins, notificationEmails, notificationEmailsEnabledForGlobalAdmins, originalDisabledState, resolvedAlerts, serviceId, serviceName, signature, simpleProperties, tenantId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceProperties {\n");
    sb.append("    activeAlerts: ").append(toIndentedString(activeAlerts)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    customNotificationEmails: ").append(toIndentedString(customNotificationEmails)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastDisabled: ").append(toIndentedString(lastDisabled)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    monitoringConfigurationsComputed: ").append(toIndentedString(monitoringConfigurationsComputed)).append("\n");
    sb.append("    monitoringConfigurationsCustomized: ").append(toIndentedString(monitoringConfigurationsCustomized)).append("\n");
    sb.append("    notificationEmailEnabled: ").append(toIndentedString(notificationEmailEnabled)).append("\n");
    sb.append("    notificationEmailEnabledForGlobalAdmins: ").append(toIndentedString(notificationEmailEnabledForGlobalAdmins)).append("\n");
    sb.append("    notificationEmails: ").append(toIndentedString(notificationEmails)).append("\n");
    sb.append("    notificationEmailsEnabledForGlobalAdmins: ").append(toIndentedString(notificationEmailsEnabledForGlobalAdmins)).append("\n");
    sb.append("    originalDisabledState: ").append(toIndentedString(originalDisabledState)).append("\n");
    sb.append("    resolvedAlerts: ").append(toIndentedString(resolvedAlerts)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    simpleProperties: ").append(toIndentedString(simpleProperties)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeAlerts");
    openapiFields.add("additionalInformation");
    openapiFields.add("createdDate");
    openapiFields.add("customNotificationEmails");
    openapiFields.add("disabled");
    openapiFields.add("displayName");
    openapiFields.add("health");
    openapiFields.add("id");
    openapiFields.add("lastDisabled");
    openapiFields.add("lastUpdated");
    openapiFields.add("monitoringConfigurationsComputed");
    openapiFields.add("monitoringConfigurationsCustomized");
    openapiFields.add("notificationEmailEnabled");
    openapiFields.add("notificationEmailEnabledForGlobalAdmins");
    openapiFields.add("notificationEmails");
    openapiFields.add("notificationEmailsEnabledForGlobalAdmins");
    openapiFields.add("originalDisabledState");
    openapiFields.add("resolvedAlerts");
    openapiFields.add("serviceId");
    openapiFields.add("serviceName");
    openapiFields.add("signature");
    openapiFields.add("simpleProperties");
    openapiFields.add("tenantId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceProperties is not found in the empty JSON string", ServiceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalInformation") != null && !jsonObj.get("additionalInformation").isJsonNull()) && !jsonObj.get("additionalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInformation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customNotificationEmails") != null && !jsonObj.get("customNotificationEmails").isJsonNull() && !jsonObj.get("customNotificationEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customNotificationEmails` to be an array in the JSON string but got `%s`", jsonObj.get("customNotificationEmails").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) && !jsonObj.get("health").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notificationEmails") != null && !jsonObj.get("notificationEmails").isJsonNull() && !jsonObj.get("notificationEmails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationEmails` to be an array in the JSON string but got `%s`", jsonObj.get("notificationEmails").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceProperties>() {
           @Override
           public void write(JsonWriter out, ServiceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceProperties
   * @throws IOException if the JSON string is invalid with respect to ServiceProperties
   */
  public static ServiceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceProperties.class);
  }

  /**
   * Convert an instance of ServiceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

