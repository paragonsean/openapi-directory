/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ChangeNotReimported;
import org.openapitools.client.model.ExtensionErrorInfo;
import org.openapitools.client.model.RuleErrorInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The import error details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportError {
  /**
   * The operation type specific  to error reporting.
   */
  @JsonAdapter(AlgorithmStepTypeEnum.Adapter.class)
  public enum AlgorithmStepTypeEnum {
    UNDEFINED("Undefined"),
    
    STAGING("Staging"),
    
    CONNECTOR_FILTER("ConnectorFilter"),
    
    JOIN("Join"),
    
    PROJECTION("Projection"),
    
    IMPORT_FLOW("ImportFlow"),
    
    PROVISIONING("Provisioning"),
    
    VALIDATE_CONNECTOR_FILTER("ValidateConnectorFilter"),
    
    DEPROVISIONING("Deprovisioning"),
    
    EXPORT_FLOW("ExportFlow"),
    
    MV_DELETION("MvDeletion"),
    
    RECALL("Recall"),
    
    MV_OBJECT_TYPE_CHANGE("MvObjectTypeChange");

    private String value;

    AlgorithmStepTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlgorithmStepTypeEnum fromValue(String value) {
      for (AlgorithmStepTypeEnum b : AlgorithmStepTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlgorithmStepTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlgorithmStepTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlgorithmStepTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlgorithmStepTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlgorithmStepTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALGORITHM_STEP_TYPE = "algorithmStepType";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_STEP_TYPE)
  private AlgorithmStepTypeEnum algorithmStepType;

  public static final String SERIALIZED_NAME_CHANGE_NOT_REIMPORTED = "changeNotReimported";
  @SerializedName(SERIALIZED_NAME_CHANGE_NOT_REIMPORTED)
  private ChangeNotReimported changeNotReimported;

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private String connectorId;

  public static final String SERIALIZED_NAME_CS_OBJECT_ID = "csObjectId";
  @SerializedName(SERIALIZED_NAME_CS_OBJECT_ID)
  private String csObjectId;

  public static final String SERIALIZED_NAME_DN = "dn";
  @SerializedName(SERIALIZED_NAME_DN)
  private String dn;

  public static final String SERIALIZED_NAME_EXTENSION_ERROR_INFO = "extensionErrorInfo";
  @SerializedName(SERIALIZED_NAME_EXTENSION_ERROR_INFO)
  private ExtensionErrorInfo extensionErrorInfo;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RETRY_COUNT = "retryCount";
  @SerializedName(SERIALIZED_NAME_RETRY_COUNT)
  private Integer retryCount;

  public static final String SERIALIZED_NAME_RULE_ERROR_INFO = "ruleErrorInfo";
  @SerializedName(SERIALIZED_NAME_RULE_ERROR_INFO)
  private RuleErrorInfo ruleErrorInfo;

  public static final String SERIALIZED_NAME_RUN_STEP_RESULT_ID = "runStepResultId";
  @SerializedName(SERIALIZED_NAME_RUN_STEP_RESULT_ID)
  private String runStepResultId;

  public static final String SERIALIZED_NAME_TIME_FIRST_OCCURRED = "timeFirstOccurred";
  @SerializedName(SERIALIZED_NAME_TIME_FIRST_OCCURRED)
  private OffsetDateTime timeFirstOccurred;

  public static final String SERIALIZED_NAME_TIME_OCCURRED = "timeOccurred";
  @SerializedName(SERIALIZED_NAME_TIME_OCCURRED)
  private OffsetDateTime timeOccurred;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ImportError() {
  }

  public ImportError algorithmStepType(AlgorithmStepTypeEnum algorithmStepType) {
    this.algorithmStepType = algorithmStepType;
    return this;
  }

  /**
   * The operation type specific  to error reporting.
   * @return algorithmStepType
   */
  @javax.annotation.Nullable
  public AlgorithmStepTypeEnum getAlgorithmStepType() {
    return algorithmStepType;
  }

  public void setAlgorithmStepType(AlgorithmStepTypeEnum algorithmStepType) {
    this.algorithmStepType = algorithmStepType;
  }


  public ImportError changeNotReimported(ChangeNotReimported changeNotReimported) {
    this.changeNotReimported = changeNotReimported;
    return this;
  }

  /**
   * Get changeNotReimported
   * @return changeNotReimported
   */
  @javax.annotation.Nullable
  public ChangeNotReimported getChangeNotReimported() {
    return changeNotReimported;
  }

  public void setChangeNotReimported(ChangeNotReimported changeNotReimported) {
    this.changeNotReimported = changeNotReimported;
  }


  public ImportError connectorId(String connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * The connector Id.
   * @return connectorId
   */
  @javax.annotation.Nullable
  public String getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }


  public ImportError csObjectId(String csObjectId) {
    this.csObjectId = csObjectId;
    return this;
  }

  /**
   * The object Id.
   * @return csObjectId
   */
  @javax.annotation.Nullable
  public String getCsObjectId() {
    return csObjectId;
  }

  public void setCsObjectId(String csObjectId) {
    this.csObjectId = csObjectId;
  }


  public ImportError dn(String dn) {
    this.dn = dn;
    return this;
  }

  /**
   * The distinguished name.
   * @return dn
   */
  @javax.annotation.Nullable
  public String getDn() {
    return dn;
  }

  public void setDn(String dn) {
    this.dn = dn;
  }


  public ImportError extensionErrorInfo(ExtensionErrorInfo extensionErrorInfo) {
    this.extensionErrorInfo = extensionErrorInfo;
    return this;
  }

  /**
   * Get extensionErrorInfo
   * @return extensionErrorInfo
   */
  @javax.annotation.Nullable
  public ExtensionErrorInfo getExtensionErrorInfo() {
    return extensionErrorInfo;
  }

  public void setExtensionErrorInfo(ExtensionErrorInfo extensionErrorInfo) {
    this.extensionErrorInfo = extensionErrorInfo;
  }


  public ImportError id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The error Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ImportError retryCount(Integer retryCount) {
    this.retryCount = retryCount;
    return this;
  }

  /**
   * The retry count.
   * @return retryCount
   */
  @javax.annotation.Nullable
  public Integer getRetryCount() {
    return retryCount;
  }

  public void setRetryCount(Integer retryCount) {
    this.retryCount = retryCount;
  }


  public ImportError ruleErrorInfo(RuleErrorInfo ruleErrorInfo) {
    this.ruleErrorInfo = ruleErrorInfo;
    return this;
  }

  /**
   * Get ruleErrorInfo
   * @return ruleErrorInfo
   */
  @javax.annotation.Nullable
  public RuleErrorInfo getRuleErrorInfo() {
    return ruleErrorInfo;
  }

  public void setRuleErrorInfo(RuleErrorInfo ruleErrorInfo) {
    this.ruleErrorInfo = ruleErrorInfo;
  }


  public ImportError runStepResultId(String runStepResultId) {
    this.runStepResultId = runStepResultId;
    return this;
  }

  /**
   * The run step result Id.
   * @return runStepResultId
   */
  @javax.annotation.Nullable
  public String getRunStepResultId() {
    return runStepResultId;
  }

  public void setRunStepResultId(String runStepResultId) {
    this.runStepResultId = runStepResultId;
  }


  public ImportError timeFirstOccurred(OffsetDateTime timeFirstOccurred) {
    this.timeFirstOccurred = timeFirstOccurred;
    return this;
  }

  /**
   * The time when the import error first occurred.
   * @return timeFirstOccurred
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeFirstOccurred() {
    return timeFirstOccurred;
  }

  public void setTimeFirstOccurred(OffsetDateTime timeFirstOccurred) {
    this.timeFirstOccurred = timeFirstOccurred;
  }


  public ImportError timeOccurred(OffsetDateTime timeOccurred) {
    this.timeOccurred = timeOccurred;
    return this;
  }

  /**
   * The time when the import error occurred.
   * @return timeOccurred
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeOccurred() {
    return timeOccurred;
  }

  public void setTimeOccurred(OffsetDateTime timeOccurred) {
    this.timeOccurred = timeOccurred;
  }


  public ImportError type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of error.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportError importError = (ImportError) o;
    return Objects.equals(this.algorithmStepType, importError.algorithmStepType) &&
        Objects.equals(this.changeNotReimported, importError.changeNotReimported) &&
        Objects.equals(this.connectorId, importError.connectorId) &&
        Objects.equals(this.csObjectId, importError.csObjectId) &&
        Objects.equals(this.dn, importError.dn) &&
        Objects.equals(this.extensionErrorInfo, importError.extensionErrorInfo) &&
        Objects.equals(this.id, importError.id) &&
        Objects.equals(this.retryCount, importError.retryCount) &&
        Objects.equals(this.ruleErrorInfo, importError.ruleErrorInfo) &&
        Objects.equals(this.runStepResultId, importError.runStepResultId) &&
        Objects.equals(this.timeFirstOccurred, importError.timeFirstOccurred) &&
        Objects.equals(this.timeOccurred, importError.timeOccurred) &&
        Objects.equals(this.type, importError.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithmStepType, changeNotReimported, connectorId, csObjectId, dn, extensionErrorInfo, id, retryCount, ruleErrorInfo, runStepResultId, timeFirstOccurred, timeOccurred, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportError {\n");
    sb.append("    algorithmStepType: ").append(toIndentedString(algorithmStepType)).append("\n");
    sb.append("    changeNotReimported: ").append(toIndentedString(changeNotReimported)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    csObjectId: ").append(toIndentedString(csObjectId)).append("\n");
    sb.append("    dn: ").append(toIndentedString(dn)).append("\n");
    sb.append("    extensionErrorInfo: ").append(toIndentedString(extensionErrorInfo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    ruleErrorInfo: ").append(toIndentedString(ruleErrorInfo)).append("\n");
    sb.append("    runStepResultId: ").append(toIndentedString(runStepResultId)).append("\n");
    sb.append("    timeFirstOccurred: ").append(toIndentedString(timeFirstOccurred)).append("\n");
    sb.append("    timeOccurred: ").append(toIndentedString(timeOccurred)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algorithmStepType");
    openapiFields.add("changeNotReimported");
    openapiFields.add("connectorId");
    openapiFields.add("csObjectId");
    openapiFields.add("dn");
    openapiFields.add("extensionErrorInfo");
    openapiFields.add("id");
    openapiFields.add("retryCount");
    openapiFields.add("ruleErrorInfo");
    openapiFields.add("runStepResultId");
    openapiFields.add("timeFirstOccurred");
    openapiFields.add("timeOccurred");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportError is not found in the empty JSON string", ImportError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("algorithmStepType") != null && !jsonObj.get("algorithmStepType").isJsonNull()) && !jsonObj.get("algorithmStepType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithmStepType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithmStepType").toString()));
      }
      // validate the optional field `algorithmStepType`
      if (jsonObj.get("algorithmStepType") != null && !jsonObj.get("algorithmStepType").isJsonNull()) {
        AlgorithmStepTypeEnum.validateJsonElement(jsonObj.get("algorithmStepType"));
      }
      // validate the optional field `changeNotReimported`
      if (jsonObj.get("changeNotReimported") != null && !jsonObj.get("changeNotReimported").isJsonNull()) {
        ChangeNotReimported.validateJsonElement(jsonObj.get("changeNotReimported"));
      }
      if ((jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) && !jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if ((jsonObj.get("csObjectId") != null && !jsonObj.get("csObjectId").isJsonNull()) && !jsonObj.get("csObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csObjectId").toString()));
      }
      if ((jsonObj.get("dn") != null && !jsonObj.get("dn").isJsonNull()) && !jsonObj.get("dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dn").toString()));
      }
      // validate the optional field `extensionErrorInfo`
      if (jsonObj.get("extensionErrorInfo") != null && !jsonObj.get("extensionErrorInfo").isJsonNull()) {
        ExtensionErrorInfo.validateJsonElement(jsonObj.get("extensionErrorInfo"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `ruleErrorInfo`
      if (jsonObj.get("ruleErrorInfo") != null && !jsonObj.get("ruleErrorInfo").isJsonNull()) {
        RuleErrorInfo.validateJsonElement(jsonObj.get("ruleErrorInfo"));
      }
      if ((jsonObj.get("runStepResultId") != null && !jsonObj.get("runStepResultId").isJsonNull()) && !jsonObj.get("runStepResultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runStepResultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runStepResultId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportError.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportError>() {
           @Override
           public void write(JsonWriter out, ImportError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportError
   * @throws IOException if the JSON string is invalid with respect to ImportError
   */
  public static ImportError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportError.class);
  }

  /**
   * Convert an instance of ImportError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

