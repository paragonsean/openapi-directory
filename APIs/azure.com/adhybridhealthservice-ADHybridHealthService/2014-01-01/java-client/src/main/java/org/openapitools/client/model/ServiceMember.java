/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The server properties for a given service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceMember {
  public static final String SERIALIZED_NAME_ACTIVE_ALERTS = "activeAlerts";
  @SerializedName(SERIALIZED_NAME_ACTIVE_ALERTS)
  private Integer activeAlerts;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private String additionalInformation;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Object dimensions;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DISABLED_REASON = "disabledReason";
  @SerializedName(SERIALIZED_NAME_DISABLED_REASON)
  private Integer disabledReason;

  public static final String SERIALIZED_NAME_INSTALLED_QFES = "installedQfes";
  @SerializedName(SERIALIZED_NAME_INSTALLED_QFES)
  private Object installedQfes;

  public static final String SERIALIZED_NAME_LAST_DISABLED = "lastDisabled";
  @SerializedName(SERIALIZED_NAME_LAST_DISABLED)
  private OffsetDateTime lastDisabled;

  public static final String SERIALIZED_NAME_LAST_REBOOT = "lastReboot";
  @SerializedName(SERIALIZED_NAME_LAST_REBOOT)
  private OffsetDateTime lastReboot;

  public static final String SERIALIZED_NAME_LAST_SERVER_REPORTED_MONITORING_LEVEL_CHANGE = "lastServerReportedMonitoringLevelChange";
  @SerializedName(SERIALIZED_NAME_LAST_SERVER_REPORTED_MONITORING_LEVEL_CHANGE)
  private OffsetDateTime lastServerReportedMonitoringLevelChange;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MACHINE_ID = "machineId";
  @SerializedName(SERIALIZED_NAME_MACHINE_ID)
  private String machineId;

  public static final String SERIALIZED_NAME_MACHINE_NAME = "machineName";
  @SerializedName(SERIALIZED_NAME_MACHINE_NAME)
  private String machineName;

  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATIONS_COMPUTED = "monitoringConfigurationsComputed";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATIONS_COMPUTED)
  private Object monitoringConfigurationsComputed;

  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATIONS_CUSTOMIZED = "monitoringConfigurationsCustomized";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATIONS_CUSTOMIZED)
  private Object monitoringConfigurationsCustomized;

  public static final String SERIALIZED_NAME_OS_NAME = "osName";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private String osName;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Object properties;

  public static final String SERIALIZED_NAME_RECOMMENDED_QFES = "recommendedQfes";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_QFES)
  private Object recommendedQfes;

  public static final String SERIALIZED_NAME_RESOLVED_ALERTS = "resolvedAlerts";
  @SerializedName(SERIALIZED_NAME_RESOLVED_ALERTS)
  private Integer resolvedAlerts;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  /**
   * The monitoring level reported by the server.
   */
  @JsonAdapter(ServerReportedMonitoringLevelEnum.Adapter.class)
  public enum ServerReportedMonitoringLevelEnum {
    PARTIAL("Partial"),
    
    FULL("Full"),
    
    OFF("Off");

    private String value;

    ServerReportedMonitoringLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServerReportedMonitoringLevelEnum fromValue(String value) {
      for (ServerReportedMonitoringLevelEnum b : ServerReportedMonitoringLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServerReportedMonitoringLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServerReportedMonitoringLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServerReportedMonitoringLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServerReportedMonitoringLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServerReportedMonitoringLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVER_REPORTED_MONITORING_LEVEL = "serverReportedMonitoringLevel";
  @SerializedName(SERIALIZED_NAME_SERVER_REPORTED_MONITORING_LEVEL)
  private ServerReportedMonitoringLevelEnum serverReportedMonitoringLevel;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SERVICE_MEMBER_ID = "serviceMemberId";
  @SerializedName(SERIALIZED_NAME_SERVICE_MEMBER_ID)
  private String serviceMemberId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public ServiceMember() {
  }

  public ServiceMember activeAlerts(Integer activeAlerts) {
    this.activeAlerts = activeAlerts;
    return this;
  }

  /**
   * The total number of alerts that are currently active for the server.
   * @return activeAlerts
   */
  @javax.annotation.Nullable
  public Integer getActiveAlerts() {
    return activeAlerts;
  }

  public void setActiveAlerts(Integer activeAlerts) {
    this.activeAlerts = activeAlerts;
  }


  public ServiceMember additionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  /**
   * The additional information, if any, for the server.
   * @return additionalInformation
   */
  @javax.annotation.Nullable
  public String getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public ServiceMember createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date time , in UTC, when the server was onboarded to Azure Active Directory Connect Health.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public ServiceMember dimensions(Object dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * The server specific configuration related dimensions.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Object getDimensions() {
    return dimensions;
  }

  public void setDimensions(Object dimensions) {
    this.dimensions = dimensions;
  }


  public ServiceMember disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Indicates if the server is disabled or not. 
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public ServiceMember disabledReason(Integer disabledReason) {
    this.disabledReason = disabledReason;
    return this;
  }

  /**
   * The reason for disabling the server.
   * @return disabledReason
   */
  @javax.annotation.Nullable
  public Integer getDisabledReason() {
    return disabledReason;
  }

  public void setDisabledReason(Integer disabledReason) {
    this.disabledReason = disabledReason;
  }


  public ServiceMember installedQfes(Object installedQfes) {
    this.installedQfes = installedQfes;
    return this;
  }

  /**
   * The list of installed QFEs for the server.
   * @return installedQfes
   */
  @javax.annotation.Nullable
  public Object getInstalledQfes() {
    return installedQfes;
  }

  public void setInstalledQfes(Object installedQfes) {
    this.installedQfes = installedQfes;
  }


  public ServiceMember lastDisabled(OffsetDateTime lastDisabled) {
    this.lastDisabled = lastDisabled;
    return this;
  }

  /**
   * The date and time , in UTC, when the server was last disabled.
   * @return lastDisabled
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDisabled() {
    return lastDisabled;
  }

  public void setLastDisabled(OffsetDateTime lastDisabled) {
    this.lastDisabled = lastDisabled;
  }


  public ServiceMember lastReboot(OffsetDateTime lastReboot) {
    this.lastReboot = lastReboot;
    return this;
  }

  /**
   * The date and time, in UTC, when the server was last rebooted.
   * @return lastReboot
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastReboot() {
    return lastReboot;
  }

  public void setLastReboot(OffsetDateTime lastReboot) {
    this.lastReboot = lastReboot;
  }


  public ServiceMember lastServerReportedMonitoringLevelChange(OffsetDateTime lastServerReportedMonitoringLevelChange) {
    this.lastServerReportedMonitoringLevelChange = lastServerReportedMonitoringLevelChange;
    return this;
  }

  /**
   * The date and time, in UTC, when the server&#39;s data monitoring configuration was last changed.
   * @return lastServerReportedMonitoringLevelChange
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastServerReportedMonitoringLevelChange() {
    return lastServerReportedMonitoringLevelChange;
  }

  public void setLastServerReportedMonitoringLevelChange(OffsetDateTime lastServerReportedMonitoringLevelChange) {
    this.lastServerReportedMonitoringLevelChange = lastServerReportedMonitoringLevelChange;
  }


  public ServiceMember lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The date and time, in UTC, when the server properties were last updated.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ServiceMember machineId(String machineId) {
    this.machineId = machineId;
    return this;
  }

  /**
   * The id of the machine.
   * @return machineId
   */
  @javax.annotation.Nullable
  public String getMachineId() {
    return machineId;
  }

  public void setMachineId(String machineId) {
    this.machineId = machineId;
  }


  public ServiceMember machineName(String machineName) {
    this.machineName = machineName;
    return this;
  }

  /**
   * The name of the server.
   * @return machineName
   */
  @javax.annotation.Nullable
  public String getMachineName() {
    return machineName;
  }

  public void setMachineName(String machineName) {
    this.machineName = machineName;
  }


  public ServiceMember monitoringConfigurationsComputed(Object monitoringConfigurationsComputed) {
    this.monitoringConfigurationsComputed = monitoringConfigurationsComputed;
    return this;
  }

  /**
   * The monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.
   * @return monitoringConfigurationsComputed
   */
  @javax.annotation.Nullable
  public Object getMonitoringConfigurationsComputed() {
    return monitoringConfigurationsComputed;
  }

  public void setMonitoringConfigurationsComputed(Object monitoringConfigurationsComputed) {
    this.monitoringConfigurationsComputed = monitoringConfigurationsComputed;
  }


  public ServiceMember monitoringConfigurationsCustomized(Object monitoringConfigurationsCustomized) {
    this.monitoringConfigurationsCustomized = monitoringConfigurationsCustomized;
    return this;
  }

  /**
   * The customized monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.
   * @return monitoringConfigurationsCustomized
   */
  @javax.annotation.Nullable
  public Object getMonitoringConfigurationsCustomized() {
    return monitoringConfigurationsCustomized;
  }

  public void setMonitoringConfigurationsCustomized(Object monitoringConfigurationsCustomized) {
    this.monitoringConfigurationsCustomized = monitoringConfigurationsCustomized;
  }


  public ServiceMember osName(String osName) {
    this.osName = osName;
    return this;
  }

  /**
   * The name of the operating system installed in the machine.
   * @return osName
   */
  @javax.annotation.Nullable
  public String getOsName() {
    return osName;
  }

  public void setOsName(String osName) {
    this.osName = osName;
  }


  public ServiceMember osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * The version of the operating system installed in the machine.
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public ServiceMember properties(Object properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Server specific properties.
   * @return properties
   */
  @javax.annotation.Nullable
  public Object getProperties() {
    return properties;
  }

  public void setProperties(Object properties) {
    this.properties = properties;
  }


  public ServiceMember recommendedQfes(Object recommendedQfes) {
    this.recommendedQfes = recommendedQfes;
    return this;
  }

  /**
   * The list of recommended hotfixes for the server.
   * @return recommendedQfes
   */
  @javax.annotation.Nullable
  public Object getRecommendedQfes() {
    return recommendedQfes;
  }

  public void setRecommendedQfes(Object recommendedQfes) {
    this.recommendedQfes = recommendedQfes;
  }


  public ServiceMember resolvedAlerts(Integer resolvedAlerts) {
    this.resolvedAlerts = resolvedAlerts;
    return this;
  }

  /**
   * The total count of alerts that are resolved for this server.
   * @return resolvedAlerts
   */
  @javax.annotation.Nullable
  public Integer getResolvedAlerts() {
    return resolvedAlerts;
  }

  public void setResolvedAlerts(Integer resolvedAlerts) {
    this.resolvedAlerts = resolvedAlerts;
  }


  public ServiceMember role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The service role that is being monitored in the server.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public ServiceMember serverReportedMonitoringLevel(ServerReportedMonitoringLevelEnum serverReportedMonitoringLevel) {
    this.serverReportedMonitoringLevel = serverReportedMonitoringLevel;
    return this;
  }

  /**
   * The monitoring level reported by the server.
   * @return serverReportedMonitoringLevel
   */
  @javax.annotation.Nullable
  public ServerReportedMonitoringLevelEnum getServerReportedMonitoringLevel() {
    return serverReportedMonitoringLevel;
  }

  public void setServerReportedMonitoringLevel(ServerReportedMonitoringLevelEnum serverReportedMonitoringLevel) {
    this.serverReportedMonitoringLevel = serverReportedMonitoringLevel;
  }


  public ServiceMember serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * The service id to whom this server belongs.
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public ServiceMember serviceMemberId(String serviceMemberId) {
    this.serviceMemberId = serviceMemberId;
    return this;
  }

  /**
   * The id of the server.
   * @return serviceMemberId
   */
  @javax.annotation.Nullable
  public String getServiceMemberId() {
    return serviceMemberId;
  }

  public void setServiceMemberId(String serviceMemberId) {
    this.serviceMemberId = serviceMemberId;
  }


  public ServiceMember status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The health status of the server.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ServiceMember tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The tenant id to whom this server belongs.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceMember serviceMember = (ServiceMember) o;
    return Objects.equals(this.activeAlerts, serviceMember.activeAlerts) &&
        Objects.equals(this.additionalInformation, serviceMember.additionalInformation) &&
        Objects.equals(this.createdDate, serviceMember.createdDate) &&
        Objects.equals(this.dimensions, serviceMember.dimensions) &&
        Objects.equals(this.disabled, serviceMember.disabled) &&
        Objects.equals(this.disabledReason, serviceMember.disabledReason) &&
        Objects.equals(this.installedQfes, serviceMember.installedQfes) &&
        Objects.equals(this.lastDisabled, serviceMember.lastDisabled) &&
        Objects.equals(this.lastReboot, serviceMember.lastReboot) &&
        Objects.equals(this.lastServerReportedMonitoringLevelChange, serviceMember.lastServerReportedMonitoringLevelChange) &&
        Objects.equals(this.lastUpdated, serviceMember.lastUpdated) &&
        Objects.equals(this.machineId, serviceMember.machineId) &&
        Objects.equals(this.machineName, serviceMember.machineName) &&
        Objects.equals(this.monitoringConfigurationsComputed, serviceMember.monitoringConfigurationsComputed) &&
        Objects.equals(this.monitoringConfigurationsCustomized, serviceMember.monitoringConfigurationsCustomized) &&
        Objects.equals(this.osName, serviceMember.osName) &&
        Objects.equals(this.osVersion, serviceMember.osVersion) &&
        Objects.equals(this.properties, serviceMember.properties) &&
        Objects.equals(this.recommendedQfes, serviceMember.recommendedQfes) &&
        Objects.equals(this.resolvedAlerts, serviceMember.resolvedAlerts) &&
        Objects.equals(this.role, serviceMember.role) &&
        Objects.equals(this.serverReportedMonitoringLevel, serviceMember.serverReportedMonitoringLevel) &&
        Objects.equals(this.serviceId, serviceMember.serviceId) &&
        Objects.equals(this.serviceMemberId, serviceMember.serviceMemberId) &&
        Objects.equals(this.status, serviceMember.status) &&
        Objects.equals(this.tenantId, serviceMember.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeAlerts, additionalInformation, createdDate, dimensions, disabled, disabledReason, installedQfes, lastDisabled, lastReboot, lastServerReportedMonitoringLevelChange, lastUpdated, machineId, machineName, monitoringConfigurationsComputed, monitoringConfigurationsCustomized, osName, osVersion, properties, recommendedQfes, resolvedAlerts, role, serverReportedMonitoringLevel, serviceId, serviceMemberId, status, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceMember {\n");
    sb.append("    activeAlerts: ").append(toIndentedString(activeAlerts)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    disabledReason: ").append(toIndentedString(disabledReason)).append("\n");
    sb.append("    installedQfes: ").append(toIndentedString(installedQfes)).append("\n");
    sb.append("    lastDisabled: ").append(toIndentedString(lastDisabled)).append("\n");
    sb.append("    lastReboot: ").append(toIndentedString(lastReboot)).append("\n");
    sb.append("    lastServerReportedMonitoringLevelChange: ").append(toIndentedString(lastServerReportedMonitoringLevelChange)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    machineId: ").append(toIndentedString(machineId)).append("\n");
    sb.append("    machineName: ").append(toIndentedString(machineName)).append("\n");
    sb.append("    monitoringConfigurationsComputed: ").append(toIndentedString(monitoringConfigurationsComputed)).append("\n");
    sb.append("    monitoringConfigurationsCustomized: ").append(toIndentedString(monitoringConfigurationsCustomized)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    recommendedQfes: ").append(toIndentedString(recommendedQfes)).append("\n");
    sb.append("    resolvedAlerts: ").append(toIndentedString(resolvedAlerts)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    serverReportedMonitoringLevel: ").append(toIndentedString(serverReportedMonitoringLevel)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceMemberId: ").append(toIndentedString(serviceMemberId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeAlerts");
    openapiFields.add("additionalInformation");
    openapiFields.add("createdDate");
    openapiFields.add("dimensions");
    openapiFields.add("disabled");
    openapiFields.add("disabledReason");
    openapiFields.add("installedQfes");
    openapiFields.add("lastDisabled");
    openapiFields.add("lastReboot");
    openapiFields.add("lastServerReportedMonitoringLevelChange");
    openapiFields.add("lastUpdated");
    openapiFields.add("machineId");
    openapiFields.add("machineName");
    openapiFields.add("monitoringConfigurationsComputed");
    openapiFields.add("monitoringConfigurationsCustomized");
    openapiFields.add("osName");
    openapiFields.add("osVersion");
    openapiFields.add("properties");
    openapiFields.add("recommendedQfes");
    openapiFields.add("resolvedAlerts");
    openapiFields.add("role");
    openapiFields.add("serverReportedMonitoringLevel");
    openapiFields.add("serviceId");
    openapiFields.add("serviceMemberId");
    openapiFields.add("status");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceMember is not found in the empty JSON string", ServiceMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalInformation") != null && !jsonObj.get("additionalInformation").isJsonNull()) && !jsonObj.get("additionalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInformation").toString()));
      }
      if ((jsonObj.get("machineId") != null && !jsonObj.get("machineId").isJsonNull()) && !jsonObj.get("machineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineId").toString()));
      }
      if ((jsonObj.get("machineName") != null && !jsonObj.get("machineName").isJsonNull()) && !jsonObj.get("machineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineName").toString()));
      }
      if ((jsonObj.get("osName") != null && !jsonObj.get("osName").isJsonNull()) && !jsonObj.get("osName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osName").toString()));
      }
      if ((jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) && !jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("serverReportedMonitoringLevel") != null && !jsonObj.get("serverReportedMonitoringLevel").isJsonNull()) && !jsonObj.get("serverReportedMonitoringLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverReportedMonitoringLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverReportedMonitoringLevel").toString()));
      }
      // validate the optional field `serverReportedMonitoringLevel`
      if (jsonObj.get("serverReportedMonitoringLevel") != null && !jsonObj.get("serverReportedMonitoringLevel").isJsonNull()) {
        ServerReportedMonitoringLevelEnum.validateJsonElement(jsonObj.get("serverReportedMonitoringLevel"));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("serviceMemberId") != null && !jsonObj.get("serviceMemberId").isJsonNull()) && !jsonObj.get("serviceMemberId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceMemberId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceMemberId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceMember.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceMember>() {
           @Override
           public void write(JsonWriter out, ServiceMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceMember
   * @throws IOException if the JSON string is invalid with respect to ServiceMember
   */
  public static ServiceMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceMember.class);
  }

  /**
   * Convert an instance of ServiceMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

