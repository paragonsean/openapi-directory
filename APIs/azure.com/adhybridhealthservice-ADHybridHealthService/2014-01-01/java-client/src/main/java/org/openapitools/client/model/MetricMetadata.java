/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The metric meta data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricMetadata {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GROUPINGS = "groupings";
  @SerializedName(SERIALIZED_NAME_GROUPINGS)
  private List<MetricGroup> groupings = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_IS_DEV_OPS = "isDevOps";
  @SerializedName(SERIALIZED_NAME_IS_DEV_OPS)
  private Boolean isDevOps;

  public static final String SERIALIZED_NAME_IS_PERF_COUNTER = "isPerfCounter";
  @SerializedName(SERIALIZED_NAME_IS_PERF_COUNTER)
  private Boolean isPerfCounter;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private Integer maxValue;

  public static final String SERIALIZED_NAME_METRIC_NAME = "metricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_METRICS_PROCESSOR_CLASS_NAME = "metricsProcessorClassName";
  @SerializedName(SERIALIZED_NAME_METRICS_PROCESSOR_CLASS_NAME)
  private String metricsProcessorClassName;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private Integer minValue;

  public static final String SERIALIZED_NAME_VALUE_KIND = "valueKind";
  @SerializedName(SERIALIZED_NAME_VALUE_KIND)
  private String valueKind;

  public MetricMetadata() {
  }

  public MetricMetadata displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name for the metric.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MetricMetadata groupings(List<MetricGroup> groupings) {
    this.groupings = groupings;
    return this;
  }

  public MetricMetadata addGroupingsItem(MetricGroup groupingsItem) {
    if (this.groupings == null) {
      this.groupings = new ArrayList<>();
    }
    this.groupings.add(groupingsItem);
    return this;
  }

  /**
   * The groupings for the metrics.
   * @return groupings
   */
  @javax.annotation.Nullable
  public List<MetricGroup> getGroupings() {
    return groupings;
  }

  public void setGroupings(List<MetricGroup> groupings) {
    this.groupings = groupings;
  }


  public MetricMetadata isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Indicates if the metric is a default metric or not.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public MetricMetadata isDevOps(Boolean isDevOps) {
    this.isDevOps = isDevOps;
    return this;
  }

  /**
   * Indicates if the metric is visible to DevOps or not.
   * @return isDevOps
   */
  @javax.annotation.Nullable
  public Boolean getIsDevOps() {
    return isDevOps;
  }

  public void setIsDevOps(Boolean isDevOps) {
    this.isDevOps = isDevOps;
  }


  public MetricMetadata isPerfCounter(Boolean isPerfCounter) {
    this.isPerfCounter = isPerfCounter;
    return this;
  }

  /**
   * Indicates if the metric is a performance counter metric or not.
   * @return isPerfCounter
   */
  @javax.annotation.Nullable
  public Boolean getIsPerfCounter() {
    return isPerfCounter;
  }

  public void setIsPerfCounter(Boolean isPerfCounter) {
    this.isPerfCounter = isPerfCounter;
  }


  public MetricMetadata kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Indicates whether the dashboard to represent the metric is a line, bar,pie, area or donut chart.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public MetricMetadata maxValue(Integer maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * The maximum value.
   * @return maxValue
   */
  @javax.annotation.Nullable
  public Integer getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(Integer maxValue) {
    this.maxValue = maxValue;
  }


  public MetricMetadata metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * The metric name
   * @return metricName
   */
  @javax.annotation.Nullable
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public MetricMetadata metricsProcessorClassName(String metricsProcessorClassName) {
    this.metricsProcessorClassName = metricsProcessorClassName;
    return this;
  }

  /**
   * The name of the class which retrieve and process the metric.
   * @return metricsProcessorClassName
   */
  @javax.annotation.Nullable
  public String getMetricsProcessorClassName() {
    return metricsProcessorClassName;
  }

  public void setMetricsProcessorClassName(String metricsProcessorClassName) {
    this.metricsProcessorClassName = metricsProcessorClassName;
  }


  public MetricMetadata minValue(Integer minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * The minimum value.
   * @return minValue
   */
  @javax.annotation.Nullable
  public Integer getMinValue() {
    return minValue;
  }

  public void setMinValue(Integer minValue) {
    this.minValue = minValue;
  }


  public MetricMetadata valueKind(String valueKind) {
    this.valueKind = valueKind;
    return this;
  }

  /**
   * Indicates if the metrics is a rate,value, percent or duration type.
   * @return valueKind
   */
  @javax.annotation.Nullable
  public String getValueKind() {
    return valueKind;
  }

  public void setValueKind(String valueKind) {
    this.valueKind = valueKind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricMetadata metricMetadata = (MetricMetadata) o;
    return Objects.equals(this.displayName, metricMetadata.displayName) &&
        Objects.equals(this.groupings, metricMetadata.groupings) &&
        Objects.equals(this.isDefault, metricMetadata.isDefault) &&
        Objects.equals(this.isDevOps, metricMetadata.isDevOps) &&
        Objects.equals(this.isPerfCounter, metricMetadata.isPerfCounter) &&
        Objects.equals(this.kind, metricMetadata.kind) &&
        Objects.equals(this.maxValue, metricMetadata.maxValue) &&
        Objects.equals(this.metricName, metricMetadata.metricName) &&
        Objects.equals(this.metricsProcessorClassName, metricMetadata.metricsProcessorClassName) &&
        Objects.equals(this.minValue, metricMetadata.minValue) &&
        Objects.equals(this.valueKind, metricMetadata.valueKind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, groupings, isDefault, isDevOps, isPerfCounter, kind, maxValue, metricName, metricsProcessorClassName, minValue, valueKind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricMetadata {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    groupings: ").append(toIndentedString(groupings)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    isDevOps: ").append(toIndentedString(isDevOps)).append("\n");
    sb.append("    isPerfCounter: ").append(toIndentedString(isPerfCounter)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    metricsProcessorClassName: ").append(toIndentedString(metricsProcessorClassName)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    valueKind: ").append(toIndentedString(valueKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("groupings");
    openapiFields.add("isDefault");
    openapiFields.add("isDevOps");
    openapiFields.add("isPerfCounter");
    openapiFields.add("kind");
    openapiFields.add("maxValue");
    openapiFields.add("metricName");
    openapiFields.add("metricsProcessorClassName");
    openapiFields.add("minValue");
    openapiFields.add("valueKind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricMetadata is not found in the empty JSON string", MetricMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("groupings") != null && !jsonObj.get("groupings").isJsonNull()) {
        JsonArray jsonArraygroupings = jsonObj.getAsJsonArray("groupings");
        if (jsonArraygroupings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupings` to be an array in the JSON string but got `%s`", jsonObj.get("groupings").toString()));
          }

          // validate the optional field `groupings` (array)
          for (int i = 0; i < jsonArraygroupings.size(); i++) {
            MetricGroup.validateJsonElement(jsonArraygroupings.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("metricName") != null && !jsonObj.get("metricName").isJsonNull()) && !jsonObj.get("metricName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricName").toString()));
      }
      if ((jsonObj.get("metricsProcessorClassName") != null && !jsonObj.get("metricsProcessorClassName").isJsonNull()) && !jsonObj.get("metricsProcessorClassName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricsProcessorClassName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricsProcessorClassName").toString()));
      }
      if ((jsonObj.get("valueKind") != null && !jsonObj.get("valueKind").isJsonNull()) && !jsonObj.get("valueKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueKind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricMetadata>() {
           @Override
           public void write(JsonWriter out, MetricMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricMetadata
   * @throws IOException if the JSON string is invalid with respect to MetricMetadata
   */
  public static MetricMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricMetadata.class);
  }

  /**
   * Convert an instance of MetricMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

