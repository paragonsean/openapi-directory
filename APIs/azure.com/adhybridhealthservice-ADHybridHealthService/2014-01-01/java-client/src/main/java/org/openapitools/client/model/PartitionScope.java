/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The connector partition scope.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionScope {
  public static final String SERIALIZED_NAME_CONTAINERS_EXCLUDED = "containersExcluded";
  @SerializedName(SERIALIZED_NAME_CONTAINERS_EXCLUDED)
  private List<String> containersExcluded = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINERS_INCLUDED = "containersIncluded";
  @SerializedName(SERIALIZED_NAME_CONTAINERS_INCLUDED)
  private List<String> containersIncluded = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_OBJECT_CLASSES = "objectClasses";
  @SerializedName(SERIALIZED_NAME_OBJECT_CLASSES)
  private List<String> objectClasses = new ArrayList<>();

  public PartitionScope() {
  }

  public PartitionScope containersExcluded(List<String> containersExcluded) {
    this.containersExcluded = containersExcluded;
    return this;
  }

  public PartitionScope addContainersExcludedItem(String containersExcludedItem) {
    if (this.containersExcluded == null) {
      this.containersExcluded = new ArrayList<>();
    }
    this.containersExcluded.add(containersExcludedItem);
    return this;
  }

  /**
   * The list of containers excluded.
   * @return containersExcluded
   */
  @javax.annotation.Nullable
  public List<String> getContainersExcluded() {
    return containersExcluded;
  }

  public void setContainersExcluded(List<String> containersExcluded) {
    this.containersExcluded = containersExcluded;
  }


  public PartitionScope containersIncluded(List<String> containersIncluded) {
    this.containersIncluded = containersIncluded;
    return this;
  }

  public PartitionScope addContainersIncludedItem(String containersIncludedItem) {
    if (this.containersIncluded == null) {
      this.containersIncluded = new ArrayList<>();
    }
    this.containersIncluded.add(containersIncludedItem);
    return this;
  }

  /**
   * The list of containers included.
   * @return containersIncluded
   */
  @javax.annotation.Nullable
  public List<String> getContainersIncluded() {
    return containersIncluded;
  }

  public void setContainersIncluded(List<String> containersIncluded) {
    this.containersIncluded = containersIncluded;
  }


  public PartitionScope isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Indicates if the partition scope is default or not.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public PartitionScope objectClasses(List<String> objectClasses) {
    this.objectClasses = objectClasses;
    return this;
  }

  public PartitionScope addObjectClassesItem(String objectClassesItem) {
    if (this.objectClasses == null) {
      this.objectClasses = new ArrayList<>();
    }
    this.objectClasses.add(objectClassesItem);
    return this;
  }

  /**
   * The in-scope object classes.
   * @return objectClasses
   */
  @javax.annotation.Nullable
  public List<String> getObjectClasses() {
    return objectClasses;
  }

  public void setObjectClasses(List<String> objectClasses) {
    this.objectClasses = objectClasses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionScope partitionScope = (PartitionScope) o;
    return Objects.equals(this.containersExcluded, partitionScope.containersExcluded) &&
        Objects.equals(this.containersIncluded, partitionScope.containersIncluded) &&
        Objects.equals(this.isDefault, partitionScope.isDefault) &&
        Objects.equals(this.objectClasses, partitionScope.objectClasses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containersExcluded, containersIncluded, isDefault, objectClasses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionScope {\n");
    sb.append("    containersExcluded: ").append(toIndentedString(containersExcluded)).append("\n");
    sb.append("    containersIncluded: ").append(toIndentedString(containersIncluded)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    objectClasses: ").append(toIndentedString(objectClasses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containersExcluded");
    openapiFields.add("containersIncluded");
    openapiFields.add("isDefault");
    openapiFields.add("objectClasses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionScope
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionScope.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionScope is not found in the empty JSON string", PartitionScope.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionScope.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionScope` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("containersExcluded") != null && !jsonObj.get("containersExcluded").isJsonNull() && !jsonObj.get("containersExcluded").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `containersExcluded` to be an array in the JSON string but got `%s`", jsonObj.get("containersExcluded").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("containersIncluded") != null && !jsonObj.get("containersIncluded").isJsonNull() && !jsonObj.get("containersIncluded").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `containersIncluded` to be an array in the JSON string but got `%s`", jsonObj.get("containersIncluded").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("objectClasses") != null && !jsonObj.get("objectClasses").isJsonNull() && !jsonObj.get("objectClasses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectClasses` to be an array in the JSON string but got `%s`", jsonObj.get("objectClasses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionScope.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionScope' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionScope> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionScope.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionScope>() {
           @Override
           public void write(JsonWriter out, PartitionScope value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionScope read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionScope given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionScope
   * @throws IOException if the JSON string is invalid with respect to PartitionScope
   */
  public static PartitionScope fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionScope.class);
  }

  /**
   * Convert an instance of PartitionScope to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

