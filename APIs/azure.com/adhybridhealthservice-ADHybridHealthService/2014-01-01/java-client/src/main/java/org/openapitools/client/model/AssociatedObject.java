/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object that hold sync object details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociatedObject {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DISTINGUISHED_NAME = "distinguishedName";
  @SerializedName(SERIALIZED_NAME_DISTINGUISHED_NAME)
  private String distinguishedName;

  public static final String SERIALIZED_NAME_LAST_DIR_SYNC_TIME = "lastDirSyncTime";
  @SerializedName(SERIALIZED_NAME_LAST_DIR_SYNC_TIME)
  private OffsetDateTime lastDirSyncTime;

  public static final String SERIALIZED_NAME_MAIL = "mail";
  @SerializedName(SERIALIZED_NAME_MAIL)
  private String mail;

  public static final String SERIALIZED_NAME_OBJECT_GUID = "objectGuid";
  @SerializedName(SERIALIZED_NAME_OBJECT_GUID)
  private String objectGuid;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "objectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private String objectType;

  public static final String SERIALIZED_NAME_ONPREMISES_USER_PRINCIPAL_NAME = "onpremisesUserPrincipalName";
  @SerializedName(SERIALIZED_NAME_ONPREMISES_USER_PRINCIPAL_NAME)
  private String onpremisesUserPrincipalName;

  public static final String SERIALIZED_NAME_PROXY_ADDRESSES = "proxyAddresses";
  @SerializedName(SERIALIZED_NAME_PROXY_ADDRESSES)
  private String proxyAddresses;

  public static final String SERIALIZED_NAME_SOURCE_ANCHOR = "sourceAnchor";
  @SerializedName(SERIALIZED_NAME_SOURCE_ANCHOR)
  private String sourceAnchor;

  public static final String SERIALIZED_NAME_SOURCE_OF_AUTHORITY = "sourceOfAuthority";
  @SerializedName(SERIALIZED_NAME_SOURCE_OF_AUTHORITY)
  private String sourceOfAuthority;

  public static final String SERIALIZED_NAME_TIME_OCCURRED = "timeOccurred";
  @SerializedName(SERIALIZED_NAME_TIME_OCCURRED)
  private OffsetDateTime timeOccurred;

  public static final String SERIALIZED_NAME_USER_PRINCIPAL_NAME = "userPrincipalName";
  @SerializedName(SERIALIZED_NAME_USER_PRINCIPAL_NAME)
  private String userPrincipalName;

  public AssociatedObject() {
  }

  public AssociatedObject displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the object.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AssociatedObject distinguishedName(String distinguishedName) {
    this.distinguishedName = distinguishedName;
    return this;
  }

  /**
   * The distinguished name of the object.
   * @return distinguishedName
   */
  @javax.annotation.Nullable
  public String getDistinguishedName() {
    return distinguishedName;
  }

  public void setDistinguishedName(String distinguishedName) {
    this.distinguishedName = distinguishedName;
  }


  public AssociatedObject lastDirSyncTime(OffsetDateTime lastDirSyncTime) {
    this.lastDirSyncTime = lastDirSyncTime;
    return this;
  }

  /**
   * The last dirSync time.
   * @return lastDirSyncTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDirSyncTime() {
    return lastDirSyncTime;
  }

  public void setLastDirSyncTime(OffsetDateTime lastDirSyncTime) {
    this.lastDirSyncTime = lastDirSyncTime;
  }


  public AssociatedObject mail(String mail) {
    this.mail = mail;
    return this;
  }

  /**
   * The email of the object.
   * @return mail
   */
  @javax.annotation.Nullable
  public String getMail() {
    return mail;
  }

  public void setMail(String mail) {
    this.mail = mail;
  }


  public AssociatedObject objectGuid(String objectGuid) {
    this.objectGuid = objectGuid;
    return this;
  }

  /**
   * The object guid.
   * @return objectGuid
   */
  @javax.annotation.Nullable
  public String getObjectGuid() {
    return objectGuid;
  }

  public void setObjectGuid(String objectGuid) {
    this.objectGuid = objectGuid;
  }


  public AssociatedObject objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * The object type.
   * @return objectType
   */
  @javax.annotation.Nullable
  public String getObjectType() {
    return objectType;
  }

  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public AssociatedObject onpremisesUserPrincipalName(String onpremisesUserPrincipalName) {
    this.onpremisesUserPrincipalName = onpremisesUserPrincipalName;
    return this;
  }

  /**
   * The On-premises UPN.
   * @return onpremisesUserPrincipalName
   */
  @javax.annotation.Nullable
  public String getOnpremisesUserPrincipalName() {
    return onpremisesUserPrincipalName;
  }

  public void setOnpremisesUserPrincipalName(String onpremisesUserPrincipalName) {
    this.onpremisesUserPrincipalName = onpremisesUserPrincipalName;
  }


  public AssociatedObject proxyAddresses(String proxyAddresses) {
    this.proxyAddresses = proxyAddresses;
    return this;
  }

  /**
   * The proxy addresses.
   * @return proxyAddresses
   */
  @javax.annotation.Nullable
  public String getProxyAddresses() {
    return proxyAddresses;
  }

  public void setProxyAddresses(String proxyAddresses) {
    this.proxyAddresses = proxyAddresses;
  }


  public AssociatedObject sourceAnchor(String sourceAnchor) {
    this.sourceAnchor = sourceAnchor;
    return this;
  }

  /**
   * The source anchor.
   * @return sourceAnchor
   */
  @javax.annotation.Nullable
  public String getSourceAnchor() {
    return sourceAnchor;
  }

  public void setSourceAnchor(String sourceAnchor) {
    this.sourceAnchor = sourceAnchor;
  }


  public AssociatedObject sourceOfAuthority(String sourceOfAuthority) {
    this.sourceOfAuthority = sourceOfAuthority;
    return this;
  }

  /**
   * The source of authority.
   * @return sourceOfAuthority
   */
  @javax.annotation.Nullable
  public String getSourceOfAuthority() {
    return sourceOfAuthority;
  }

  public void setSourceOfAuthority(String sourceOfAuthority) {
    this.sourceOfAuthority = sourceOfAuthority;
  }


  public AssociatedObject timeOccurred(OffsetDateTime timeOccurred) {
    this.timeOccurred = timeOccurred;
    return this;
  }

  /**
   *  The time of the error.
   * @return timeOccurred
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeOccurred() {
    return timeOccurred;
  }

  public void setTimeOccurred(OffsetDateTime timeOccurred) {
    this.timeOccurred = timeOccurred;
  }


  public AssociatedObject userPrincipalName(String userPrincipalName) {
    this.userPrincipalName = userPrincipalName;
    return this;
  }

  /**
   *  The UPN.
   * @return userPrincipalName
   */
  @javax.annotation.Nullable
  public String getUserPrincipalName() {
    return userPrincipalName;
  }

  public void setUserPrincipalName(String userPrincipalName) {
    this.userPrincipalName = userPrincipalName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociatedObject associatedObject = (AssociatedObject) o;
    return Objects.equals(this.displayName, associatedObject.displayName) &&
        Objects.equals(this.distinguishedName, associatedObject.distinguishedName) &&
        Objects.equals(this.lastDirSyncTime, associatedObject.lastDirSyncTime) &&
        Objects.equals(this.mail, associatedObject.mail) &&
        Objects.equals(this.objectGuid, associatedObject.objectGuid) &&
        Objects.equals(this.objectType, associatedObject.objectType) &&
        Objects.equals(this.onpremisesUserPrincipalName, associatedObject.onpremisesUserPrincipalName) &&
        Objects.equals(this.proxyAddresses, associatedObject.proxyAddresses) &&
        Objects.equals(this.sourceAnchor, associatedObject.sourceAnchor) &&
        Objects.equals(this.sourceOfAuthority, associatedObject.sourceOfAuthority) &&
        Objects.equals(this.timeOccurred, associatedObject.timeOccurred) &&
        Objects.equals(this.userPrincipalName, associatedObject.userPrincipalName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, distinguishedName, lastDirSyncTime, mail, objectGuid, objectType, onpremisesUserPrincipalName, proxyAddresses, sourceAnchor, sourceOfAuthority, timeOccurred, userPrincipalName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociatedObject {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    distinguishedName: ").append(toIndentedString(distinguishedName)).append("\n");
    sb.append("    lastDirSyncTime: ").append(toIndentedString(lastDirSyncTime)).append("\n");
    sb.append("    mail: ").append(toIndentedString(mail)).append("\n");
    sb.append("    objectGuid: ").append(toIndentedString(objectGuid)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    onpremisesUserPrincipalName: ").append(toIndentedString(onpremisesUserPrincipalName)).append("\n");
    sb.append("    proxyAddresses: ").append(toIndentedString(proxyAddresses)).append("\n");
    sb.append("    sourceAnchor: ").append(toIndentedString(sourceAnchor)).append("\n");
    sb.append("    sourceOfAuthority: ").append(toIndentedString(sourceOfAuthority)).append("\n");
    sb.append("    timeOccurred: ").append(toIndentedString(timeOccurred)).append("\n");
    sb.append("    userPrincipalName: ").append(toIndentedString(userPrincipalName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("distinguishedName");
    openapiFields.add("lastDirSyncTime");
    openapiFields.add("mail");
    openapiFields.add("objectGuid");
    openapiFields.add("objectType");
    openapiFields.add("onpremisesUserPrincipalName");
    openapiFields.add("proxyAddresses");
    openapiFields.add("sourceAnchor");
    openapiFields.add("sourceOfAuthority");
    openapiFields.add("timeOccurred");
    openapiFields.add("userPrincipalName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociatedObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociatedObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociatedObject is not found in the empty JSON string", AssociatedObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociatedObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociatedObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("distinguishedName") != null && !jsonObj.get("distinguishedName").isJsonNull()) && !jsonObj.get("distinguishedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distinguishedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distinguishedName").toString()));
      }
      if ((jsonObj.get("mail") != null && !jsonObj.get("mail").isJsonNull()) && !jsonObj.get("mail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mail").toString()));
      }
      if ((jsonObj.get("objectGuid") != null && !jsonObj.get("objectGuid").isJsonNull()) && !jsonObj.get("objectGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectGuid").toString()));
      }
      if ((jsonObj.get("objectType") != null && !jsonObj.get("objectType").isJsonNull()) && !jsonObj.get("objectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectType").toString()));
      }
      if ((jsonObj.get("onpremisesUserPrincipalName") != null && !jsonObj.get("onpremisesUserPrincipalName").isJsonNull()) && !jsonObj.get("onpremisesUserPrincipalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onpremisesUserPrincipalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onpremisesUserPrincipalName").toString()));
      }
      if ((jsonObj.get("proxyAddresses") != null && !jsonObj.get("proxyAddresses").isJsonNull()) && !jsonObj.get("proxyAddresses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyAddresses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyAddresses").toString()));
      }
      if ((jsonObj.get("sourceAnchor") != null && !jsonObj.get("sourceAnchor").isJsonNull()) && !jsonObj.get("sourceAnchor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAnchor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAnchor").toString()));
      }
      if ((jsonObj.get("sourceOfAuthority") != null && !jsonObj.get("sourceOfAuthority").isJsonNull()) && !jsonObj.get("sourceOfAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceOfAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceOfAuthority").toString()));
      }
      if ((jsonObj.get("userPrincipalName") != null && !jsonObj.get("userPrincipalName").isJsonNull()) && !jsonObj.get("userPrincipalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userPrincipalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userPrincipalName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociatedObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociatedObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociatedObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociatedObject.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociatedObject>() {
           @Override
           public void write(JsonWriter out, AssociatedObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociatedObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociatedObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociatedObject
   * @throws IOException if the JSON string is invalid with respect to AssociatedObject
   */
  public static AssociatedObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociatedObject.class);
  }

  /**
   * Convert an instance of AssociatedObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

