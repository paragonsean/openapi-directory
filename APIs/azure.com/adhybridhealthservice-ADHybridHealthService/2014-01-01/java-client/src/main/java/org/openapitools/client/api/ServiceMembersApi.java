/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Connectors;
import org.openapitools.client.model.Credentials;
import org.openapitools.client.model.DataFreshnessDetails;
import org.openapitools.client.model.ExportStatuses;
import org.openapitools.client.model.GlobalConfigurations;
import org.openapitools.client.model.ServiceConfiguration;
import org.openapitools.client.model.ServiceMember;
import org.openapitools.client.model.ServiceMembers;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceMembersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServiceMembersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceMembersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for serviceMembersAdd
     * @param serviceName The name of the service under which the server is to be onboarded. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param serviceMember The server object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersAddCall(String serviceName, String apiVersion, ServiceMember serviceMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceMember;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersAddValidateBeforeCall(String serviceName, String apiVersion, ServiceMember serviceMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersAdd(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersAdd(Async)");
        }

        // verify the required parameter 'serviceMember' is set
        if (serviceMember == null) {
            throw new ApiException("Missing the required parameter 'serviceMember' when calling serviceMembersAdd(Async)");
        }

        return serviceMembersAddCall(serviceName, apiVersion, serviceMember, _callback);

    }

    /**
     * 
     * Onboards  a server, for a given service, to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service under which the server is to be onboarded. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param serviceMember The server object. (required)
     * @return ServiceMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service member. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceMember serviceMembersAdd(String serviceName, String apiVersion, ServiceMember serviceMember) throws ApiException {
        ApiResponse<ServiceMember> localVarResp = serviceMembersAddWithHttpInfo(serviceName, apiVersion, serviceMember);
        return localVarResp.getData();
    }

    /**
     * 
     * Onboards  a server, for a given service, to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service under which the server is to be onboarded. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param serviceMember The server object. (required)
     * @return ApiResponse&lt;ServiceMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service member. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceMember> serviceMembersAddWithHttpInfo(String serviceName, String apiVersion, ServiceMember serviceMember) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersAddValidateBeforeCall(serviceName, apiVersion, serviceMember, null);
        Type localVarReturnType = new TypeToken<ServiceMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Onboards  a server, for a given service, to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service under which the server is to be onboarded. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param serviceMember The server object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersAddAsync(String serviceName, String apiVersion, ServiceMember serviceMember, final ApiCallback<ServiceMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersAddValidateBeforeCall(serviceName, apiVersion, serviceMember, _callback);
        Type localVarReturnType = new TypeToken<ServiceMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersDelete
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersDeleteCall(String serviceName, UUID serviceMemberId, String apiVersion, Boolean confirm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confirm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("confirm", confirm));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersDeleteValidateBeforeCall(String serviceName, UUID serviceMemberId, String apiVersion, Boolean confirm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersDelete(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersDelete(Async)");
        }

        return serviceMembersDeleteCall(serviceName, serviceMemberId, apiVersion, confirm, _callback);

    }

    /**
     * 
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public void serviceMembersDelete(String serviceName, UUID serviceMemberId, String apiVersion, Boolean confirm) throws ApiException {
        serviceMembersDeleteWithHttpInfo(serviceName, serviceMemberId, apiVersion, confirm);
    }

    /**
     * 
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceMembersDeleteWithHttpInfo(String serviceName, UUID serviceMemberId, String apiVersion, Boolean confirm) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersDeleteValidateBeforeCall(serviceName, serviceMemberId, apiVersion, confirm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a server that has been onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersDeleteAsync(String serviceName, UUID serviceMemberId, String apiVersion, Boolean confirm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersDeleteValidateBeforeCall(serviceName, serviceMemberId, apiVersion, confirm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersDeleteData
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersDeleteDataCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/data"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersDeleteDataValidateBeforeCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersDeleteData(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersDeleteData(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersDeleteData(Async)");
        }

        return serviceMembersDeleteDataCall(serviceName, serviceMemberId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the data uploaded by the server to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public void serviceMembersDeleteData(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        serviceMembersDeleteDataWithHttpInfo(serviceName, serviceMemberId, apiVersion);
    }

    /**
     * 
     * Deletes the data uploaded by the server to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serviceMembersDeleteDataWithHttpInfo(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersDeleteDataValidateBeforeCall(serviceName, serviceMemberId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the data uploaded by the server to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersDeleteDataAsync(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersDeleteDataValidateBeforeCall(serviceName, serviceMemberId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersGet
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specific service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersGetCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersGetValidateBeforeCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersGet(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersGet(Async)");
        }

        return serviceMembersGetCall(serviceName, serviceMemberId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the details of a server, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ServiceMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specific service member. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceMember serviceMembersGet(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        ApiResponse<ServiceMember> localVarResp = serviceMembersGetWithHttpInfo(serviceName, serviceMemberId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of a server, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ServiceMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specific service member. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceMember> serviceMembersGetWithHttpInfo(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersGetValidateBeforeCall(serviceName, serviceMemberId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServiceMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of a server, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The specific service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersGetAsync(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback<ServiceMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersGetValidateBeforeCall(serviceName, serviceMemberId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServiceMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersGetServiceConfiguration
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersGetServiceConfigurationCall(String serviceName, String serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/serviceconfiguration"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersGetServiceConfigurationValidateBeforeCall(String serviceName, String serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersGetServiceConfiguration(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersGetServiceConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersGetServiceConfiguration(Async)");
        }

        return serviceMembersGetServiceConfigurationCall(serviceName, serviceMemberId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the service configuration.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ServiceConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceConfiguration serviceMembersGetServiceConfiguration(String serviceName, String serviceMemberId, String apiVersion) throws ApiException {
        ApiResponse<ServiceConfiguration> localVarResp = serviceMembersGetServiceConfigurationWithHttpInfo(serviceName, serviceMemberId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the service configuration.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ServiceConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceConfiguration> serviceMembersGetServiceConfigurationWithHttpInfo(String serviceName, String serviceMemberId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersGetServiceConfigurationValidateBeforeCall(serviceName, serviceMemberId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServiceConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the service configuration.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersGetServiceConfigurationAsync(String serviceName, String serviceMemberId, String apiVersion, final ApiCallback<ServiceConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersGetServiceConfigurationValidateBeforeCall(serviceName, serviceMemberId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServiceConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersList
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param dimensionType The server specific dimension. (optional)
     * @param dimensionSignature The value of the dimension. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service members. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListCall(String serviceName, String apiVersion, String $filter, String dimensionType, String dimensionSignature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (dimensionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimensionType", dimensionType));
        }

        if (dimensionSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimensionSignature", dimensionSignature));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersListValidateBeforeCall(String serviceName, String apiVersion, String $filter, String dimensionType, String dimensionSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersList(Async)");
        }

        return serviceMembersListCall(serviceName, apiVersion, $filter, dimensionType, dimensionSignature, _callback);

    }

    /**
     * 
     * Gets the details of the servers, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param dimensionType The server specific dimension. (optional)
     * @param dimensionSignature The value of the dimension. (optional)
     * @return ServiceMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service members. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceMembers serviceMembersList(String serviceName, String apiVersion, String $filter, String dimensionType, String dimensionSignature) throws ApiException {
        ApiResponse<ServiceMembers> localVarResp = serviceMembersListWithHttpInfo(serviceName, apiVersion, $filter, dimensionType, dimensionSignature);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of the servers, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param dimensionType The server specific dimension. (optional)
     * @param dimensionSignature The value of the dimension. (optional)
     * @return ApiResponse&lt;ServiceMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service members. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceMembers> serviceMembersListWithHttpInfo(String serviceName, String apiVersion, String $filter, String dimensionType, String dimensionSignature) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersListValidateBeforeCall(serviceName, apiVersion, $filter, dimensionType, dimensionSignature, null);
        Type localVarReturnType = new TypeToken<ServiceMembers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of the servers, for a given service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param dimensionType The server specific dimension. (optional)
     * @param dimensionSignature The value of the dimension. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service members. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListAsync(String serviceName, String apiVersion, String $filter, String dimensionType, String dimensionSignature, final ApiCallback<ServiceMembers> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersListValidateBeforeCall(serviceName, apiVersion, $filter, dimensionType, dimensionSignature, _callback);
        Type localVarReturnType = new TypeToken<ServiceMembers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersListConnectors
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of connector details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListConnectorsCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/service/{serviceName}/servicemembers/{serviceMemberId}/connectors"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersListConnectorsValidateBeforeCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersListConnectors(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersListConnectors(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersListConnectors(Async)");
        }

        return serviceMembersListConnectorsCall(serviceName, serviceMemberId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the connector details for a service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return Connectors
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of connector details. </td><td>  -  </td></tr>
     </table>
     */
    public Connectors serviceMembersListConnectors(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        ApiResponse<Connectors> localVarResp = serviceMembersListConnectorsWithHttpInfo(serviceName, serviceMemberId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the connector details for a service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Connectors&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of connector details. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectors> serviceMembersListConnectorsWithHttpInfo(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersListConnectorsValidateBeforeCall(serviceName, serviceMemberId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Connectors>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the connector details for a service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of connector details. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListConnectorsAsync(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback<Connectors> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersListConnectorsValidateBeforeCall(serviceName, serviceMemberId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Connectors>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersListCredentials
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The property filter to apply. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service member credentials. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListCredentialsCall(String serviceName, UUID serviceMemberId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/credentials"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersListCredentialsValidateBeforeCall(String serviceName, UUID serviceMemberId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersListCredentials(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersListCredentials(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersListCredentials(Async)");
        }

        return serviceMembersListCredentialsCall(serviceName, serviceMemberId, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The property filter to apply. (optional)
     * @return Credentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service member credentials. </td><td>  -  </td></tr>
     </table>
     */
    public Credentials serviceMembersListCredentials(String serviceName, UUID serviceMemberId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<Credentials> localVarResp = serviceMembersListCredentialsWithHttpInfo(serviceName, serviceMemberId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The property filter to apply. (optional)
     * @return ApiResponse&lt;Credentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service member credentials. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credentials> serviceMembersListCredentialsWithHttpInfo(String serviceName, UUID serviceMemberId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersListCredentialsValidateBeforeCall(serviceName, serviceMemberId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<Credentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The property filter to apply. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service member credentials. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListCredentialsAsync(String serviceName, UUID serviceMemberId, String apiVersion, String $filter, final ApiCallback<Credentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersListCredentialsValidateBeforeCall(serviceName, serviceMemberId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<Credentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersListDataFreshness
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of datafreshness details for a server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListDataFreshnessCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/datafreshness"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersListDataFreshnessValidateBeforeCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersListDataFreshness(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersListDataFreshness(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersListDataFreshness(Async)");
        }

        return serviceMembersListDataFreshnessCall(serviceName, serviceMemberId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the last time when the server uploaded data to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return DataFreshnessDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of datafreshness details for a server. </td><td>  -  </td></tr>
     </table>
     */
    public DataFreshnessDetails serviceMembersListDataFreshness(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        ApiResponse<DataFreshnessDetails> localVarResp = serviceMembersListDataFreshnessWithHttpInfo(serviceName, serviceMemberId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the last time when the server uploaded data to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;DataFreshnessDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of datafreshness details for a server. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataFreshnessDetails> serviceMembersListDataFreshnessWithHttpInfo(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersListDataFreshnessValidateBeforeCall(serviceName, serviceMemberId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DataFreshnessDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the last time when the server uploaded data to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of datafreshness details for a server. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListDataFreshnessAsync(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback<DataFreshnessDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersListDataFreshnessValidateBeforeCall(serviceName, serviceMemberId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DataFreshnessDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersListExportStatus
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export statuses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListExportStatusCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/exportstatus"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersListExportStatusValidateBeforeCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersListExportStatus(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersListExportStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersListExportStatus(Async)");
        }

        return serviceMembersListExportStatusCall(serviceName, serviceMemberId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the export status.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ExportStatuses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export statuses. </td><td>  -  </td></tr>
     </table>
     */
    public ExportStatuses serviceMembersListExportStatus(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        ApiResponse<ExportStatuses> localVarResp = serviceMembersListExportStatusWithHttpInfo(serviceName, serviceMemberId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the export status.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ExportStatuses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export statuses. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportStatuses> serviceMembersListExportStatusWithHttpInfo(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersListExportStatusValidateBeforeCall(serviceName, serviceMemberId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ExportStatuses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the export status.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export statuses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListExportStatusAsync(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback<ExportStatuses> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersListExportStatusValidateBeforeCall(serviceName, serviceMemberId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ExportStatuses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serviceMembersListGlobalConfiguration
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of global configurations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListGlobalConfigurationCall(String serviceName, String serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/servicemembers/{serviceMemberId}/globalconfiguration"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serviceMembersListGlobalConfigurationValidateBeforeCall(String serviceName, String serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling serviceMembersListGlobalConfiguration(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling serviceMembersListGlobalConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serviceMembersListGlobalConfiguration(Async)");
        }

        return serviceMembersListGlobalConfigurationCall(serviceName, serviceMemberId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the global configuration.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return GlobalConfigurations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of global configurations. </td><td>  -  </td></tr>
     </table>
     */
    public GlobalConfigurations serviceMembersListGlobalConfiguration(String serviceName, String serviceMemberId, String apiVersion) throws ApiException {
        ApiResponse<GlobalConfigurations> localVarResp = serviceMembersListGlobalConfigurationWithHttpInfo(serviceName, serviceMemberId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the global configuration.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;GlobalConfigurations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of global configurations. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GlobalConfigurations> serviceMembersListGlobalConfigurationWithHttpInfo(String serviceName, String serviceMemberId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serviceMembersListGlobalConfigurationValidateBeforeCall(serviceName, serviceMemberId, apiVersion, null);
        Type localVarReturnType = new TypeToken<GlobalConfigurations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the global configuration.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of global configurations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serviceMembersListGlobalConfigurationAsync(String serviceName, String serviceMemberId, String apiVersion, final ApiCallback<GlobalConfigurations> _callback) throws ApiException {

        okhttp3.Call localVarCall = serviceMembersListGlobalConfigurationValidateBeforeCall(serviceName, serviceMemberId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<GlobalConfigurations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
