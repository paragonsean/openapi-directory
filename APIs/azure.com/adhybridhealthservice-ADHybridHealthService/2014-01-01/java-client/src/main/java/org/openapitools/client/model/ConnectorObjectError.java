/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The connector object error.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectorObjectError {
  public static final String SERIALIZED_NAME_ANCHOR = "anchor";
  @SerializedName(SERIALIZED_NAME_ANCHOR)
  private String anchor;

  public static final String SERIALIZED_NAME_ATTRIBUTE_NAME = "attributeName";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME)
  private String attributeName;

  public static final String SERIALIZED_NAME_COLUMN_NUMBER = "columnNumber";
  @SerializedName(SERIALIZED_NAME_COLUMN_NUMBER)
  private Integer columnNumber;

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private String connectorId;

  public static final String SERIALIZED_NAME_DN = "dn";
  @SerializedName(SERIALIZED_NAME_DN)
  private String dn;

  public static final String SERIALIZED_NAME_ENTRY_NUMBER = "entryNumber";
  @SerializedName(SERIALIZED_NAME_ENTRY_NUMBER)
  private Integer entryNumber;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  private Integer lineNumber;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RUN_STEP_RESULT_ID = "runStepResultId";
  @SerializedName(SERIALIZED_NAME_RUN_STEP_RESULT_ID)
  private String runStepResultId;

  public static final String SERIALIZED_NAME_SERVER_ERROR_DETAIL = "serverErrorDetail";
  @SerializedName(SERIALIZED_NAME_SERVER_ERROR_DETAIL)
  private String serverErrorDetail;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values = new ArrayList<>();

  public ConnectorObjectError() {
  }

  public ConnectorObjectError anchor(String anchor) {
    this.anchor = anchor;
    return this;
  }

  /**
   * The name for the anchor of the object.
   * @return anchor
   */
  @javax.annotation.Nullable
  public String getAnchor() {
    return anchor;
  }

  public void setAnchor(String anchor) {
    this.anchor = anchor;
  }


  public ConnectorObjectError attributeName(String attributeName) {
    this.attributeName = attributeName;
    return this;
  }

  /**
   * The attribute name of the object.
   * @return attributeName
   */
  @javax.annotation.Nullable
  public String getAttributeName() {
    return attributeName;
  }

  public void setAttributeName(String attributeName) {
    this.attributeName = attributeName;
  }


  public ConnectorObjectError columnNumber(Integer columnNumber) {
    this.columnNumber = columnNumber;
    return this;
  }

  /**
   * The column number for the object error.
   * @return columnNumber
   */
  @javax.annotation.Nullable
  public Integer getColumnNumber() {
    return columnNumber;
  }

  public void setColumnNumber(Integer columnNumber) {
    this.columnNumber = columnNumber;
  }


  public ConnectorObjectError connectorId(String connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * The connector Id.
   * @return connectorId
   */
  @javax.annotation.Nullable
  public String getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }


  public ConnectorObjectError dn(String dn) {
    this.dn = dn;
    return this;
  }

  /**
   * The distinguished name of the object.
   * @return dn
   */
  @javax.annotation.Nullable
  public String getDn() {
    return dn;
  }

  public void setDn(String dn) {
    this.dn = dn;
  }


  public ConnectorObjectError entryNumber(Integer entryNumber) {
    this.entryNumber = entryNumber;
    return this;
  }

  /**
   * The entry number for object error occurred.
   * @return entryNumber
   */
  @javax.annotation.Nullable
  public Integer getEntryNumber() {
    return entryNumber;
  }

  public void setEntryNumber(Integer entryNumber) {
    this.entryNumber = entryNumber;
  }


  public ConnectorObjectError errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * The error code.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public ConnectorObjectError id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The error Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ConnectorObjectError lineNumber(Integer lineNumber) {
    this.lineNumber = lineNumber;
    return this;
  }

  /**
   * The line number for the object error.
   * @return lineNumber
   */
  @javax.annotation.Nullable
  public Integer getLineNumber() {
    return lineNumber;
  }

  public void setLineNumber(Integer lineNumber) {
    this.lineNumber = lineNumber;
  }


  public ConnectorObjectError message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The message for the object error.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ConnectorObjectError runStepResultId(String runStepResultId) {
    this.runStepResultId = runStepResultId;
    return this;
  }

  /**
   * The run step result Id.
   * @return runStepResultId
   */
  @javax.annotation.Nullable
  public String getRunStepResultId() {
    return runStepResultId;
  }

  public void setRunStepResultId(String runStepResultId) {
    this.runStepResultId = runStepResultId;
  }


  public ConnectorObjectError serverErrorDetail(String serverErrorDetail) {
    this.serverErrorDetail = serverErrorDetail;
    return this;
  }

  /**
   * The server side error details.
   * @return serverErrorDetail
   */
  @javax.annotation.Nullable
  public String getServerErrorDetail() {
    return serverErrorDetail;
  }

  public void setServerErrorDetail(String serverErrorDetail) {
    this.serverErrorDetail = serverErrorDetail;
  }


  public ConnectorObjectError type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of error.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ConnectorObjectError values(List<String> values) {
    this.values = values;
    return this;
  }

  public ConnectorObjectError addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * The value corresponding to attribute name.
   * @return values
   */
  @javax.annotation.Nullable
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorObjectError connectorObjectError = (ConnectorObjectError) o;
    return Objects.equals(this.anchor, connectorObjectError.anchor) &&
        Objects.equals(this.attributeName, connectorObjectError.attributeName) &&
        Objects.equals(this.columnNumber, connectorObjectError.columnNumber) &&
        Objects.equals(this.connectorId, connectorObjectError.connectorId) &&
        Objects.equals(this.dn, connectorObjectError.dn) &&
        Objects.equals(this.entryNumber, connectorObjectError.entryNumber) &&
        Objects.equals(this.errorCode, connectorObjectError.errorCode) &&
        Objects.equals(this.id, connectorObjectError.id) &&
        Objects.equals(this.lineNumber, connectorObjectError.lineNumber) &&
        Objects.equals(this.message, connectorObjectError.message) &&
        Objects.equals(this.runStepResultId, connectorObjectError.runStepResultId) &&
        Objects.equals(this.serverErrorDetail, connectorObjectError.serverErrorDetail) &&
        Objects.equals(this.type, connectorObjectError.type) &&
        Objects.equals(this.values, connectorObjectError.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anchor, attributeName, columnNumber, connectorId, dn, entryNumber, errorCode, id, lineNumber, message, runStepResultId, serverErrorDetail, type, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorObjectError {\n");
    sb.append("    anchor: ").append(toIndentedString(anchor)).append("\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    columnNumber: ").append(toIndentedString(columnNumber)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    dn: ").append(toIndentedString(dn)).append("\n");
    sb.append("    entryNumber: ").append(toIndentedString(entryNumber)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    runStepResultId: ").append(toIndentedString(runStepResultId)).append("\n");
    sb.append("    serverErrorDetail: ").append(toIndentedString(serverErrorDetail)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anchor");
    openapiFields.add("attributeName");
    openapiFields.add("columnNumber");
    openapiFields.add("connectorId");
    openapiFields.add("dn");
    openapiFields.add("entryNumber");
    openapiFields.add("errorCode");
    openapiFields.add("id");
    openapiFields.add("lineNumber");
    openapiFields.add("message");
    openapiFields.add("runStepResultId");
    openapiFields.add("serverErrorDetail");
    openapiFields.add("type");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorObjectError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectorObjectError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorObjectError is not found in the empty JSON string", ConnectorObjectError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorObjectError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorObjectError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("anchor") != null && !jsonObj.get("anchor").isJsonNull()) && !jsonObj.get("anchor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anchor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anchor").toString()));
      }
      if ((jsonObj.get("attributeName") != null && !jsonObj.get("attributeName").isJsonNull()) && !jsonObj.get("attributeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeName").toString()));
      }
      if ((jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) && !jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if ((jsonObj.get("dn") != null && !jsonObj.get("dn").isJsonNull()) && !jsonObj.get("dn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dn").toString()));
      }
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("runStepResultId") != null && !jsonObj.get("runStepResultId").isJsonNull()) && !jsonObj.get("runStepResultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runStepResultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runStepResultId").toString()));
      }
      if ((jsonObj.get("serverErrorDetail") != null && !jsonObj.get("serverErrorDetail").isJsonNull()) && !jsonObj.get("serverErrorDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverErrorDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverErrorDetail").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorObjectError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorObjectError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorObjectError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorObjectError.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorObjectError>() {
           @Override
           public void write(JsonWriter out, ConnectorObjectError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorObjectError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorObjectError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorObjectError
   * @throws IOException if the JSON string is invalid with respect to ConnectorObjectError
   */
  public static ConnectorObjectError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorObjectError.class);
  }

  /**
   * Convert an instance of ConnectorObjectError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

