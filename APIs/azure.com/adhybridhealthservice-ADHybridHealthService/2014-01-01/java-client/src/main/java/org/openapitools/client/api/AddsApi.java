/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddsConfiguration;
import org.openapitools.client.model.AddsServiceMembers;
import org.openapitools.client.model.Alerts;
import org.openapitools.client.model.Credentials;
import org.openapitools.client.model.Dimensions;
import org.openapitools.client.model.ForestSummary;
import org.openapitools.client.model.MetricMetadata;
import org.openapitools.client.model.MetricMetadataList;
import org.openapitools.client.model.MetricSets;
import org.openapitools.client.model.Metrics;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ReplicationDetailsList;
import org.openapitools.client.model.ReplicationStatus;
import org.openapitools.client.model.ReplicationSummaryList;
import org.openapitools.client.model.ServiceMember;
import org.openapitools.client.model.ServiceMembers;
import org.openapitools.client.model.ServiceProperties;
import org.openapitools.client.model.Services;
import java.util.UUID;
import org.openapitools.client.model.UserPreference;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AddsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AddsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adDomainServiceMembersList
     * @param serviceName The name of the service. (required)
     * @param isGroupbySite Indicates if the result should be grouped by site or not. (required)
     * @param nextPartitionKey The next partition key to query for. (required)
     * @param nextRowKey The next row key to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param query The custom query. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Active Directory Domain Servers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adDomainServiceMembersListCall(String serviceName, Boolean isGroupbySite, String nextPartitionKey, String nextRowKey, String apiVersion, String $filter, String query, Integer takeCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/addomainservicemembers"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (isGroupbySite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isGroupbySite", isGroupbySite));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (nextPartitionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPartitionKey", nextPartitionKey));
        }

        if (nextRowKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextRowKey", nextRowKey));
        }

        if (takeCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("takeCount", takeCount));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adDomainServiceMembersListValidateBeforeCall(String serviceName, Boolean isGroupbySite, String nextPartitionKey, String nextRowKey, String apiVersion, String $filter, String query, Integer takeCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling adDomainServiceMembersList(Async)");
        }

        // verify the required parameter 'isGroupbySite' is set
        if (isGroupbySite == null) {
            throw new ApiException("Missing the required parameter 'isGroupbySite' when calling adDomainServiceMembersList(Async)");
        }

        // verify the required parameter 'nextPartitionKey' is set
        if (nextPartitionKey == null) {
            throw new ApiException("Missing the required parameter 'nextPartitionKey' when calling adDomainServiceMembersList(Async)");
        }

        // verify the required parameter 'nextRowKey' is set
        if (nextRowKey == null) {
            throw new ApiException("Missing the required parameter 'nextRowKey' when calling adDomainServiceMembersList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling adDomainServiceMembersList(Async)");
        }

        return adDomainServiceMembersListCall(serviceName, isGroupbySite, nextPartitionKey, nextRowKey, apiVersion, $filter, query, takeCount, _callback);

    }

    /**
     * 
     * Gets the details of the servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param isGroupbySite Indicates if the result should be grouped by site or not. (required)
     * @param nextPartitionKey The next partition key to query for. (required)
     * @param nextRowKey The next row key to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param query The custom query. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return AddsServiceMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Active Directory Domain Servers. </td><td>  -  </td></tr>
     </table>
     */
    public AddsServiceMembers adDomainServiceMembersList(String serviceName, Boolean isGroupbySite, String nextPartitionKey, String nextRowKey, String apiVersion, String $filter, String query, Integer takeCount) throws ApiException {
        ApiResponse<AddsServiceMembers> localVarResp = adDomainServiceMembersListWithHttpInfo(serviceName, isGroupbySite, nextPartitionKey, nextRowKey, apiVersion, $filter, query, takeCount);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of the servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param isGroupbySite Indicates if the result should be grouped by site or not. (required)
     * @param nextPartitionKey The next partition key to query for. (required)
     * @param nextRowKey The next row key to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param query The custom query. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return ApiResponse&lt;AddsServiceMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Active Directory Domain Servers. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddsServiceMembers> adDomainServiceMembersListWithHttpInfo(String serviceName, Boolean isGroupbySite, String nextPartitionKey, String nextRowKey, String apiVersion, String $filter, String query, Integer takeCount) throws ApiException {
        okhttp3.Call localVarCall = adDomainServiceMembersListValidateBeforeCall(serviceName, isGroupbySite, nextPartitionKey, nextRowKey, apiVersion, $filter, query, takeCount, null);
        Type localVarReturnType = new TypeToken<AddsServiceMembers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of the servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param isGroupbySite Indicates if the result should be grouped by site or not. (required)
     * @param nextPartitionKey The next partition key to query for. (required)
     * @param nextRowKey The next row key to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param query The custom query. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Active Directory Domain Servers. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adDomainServiceMembersListAsync(String serviceName, Boolean isGroupbySite, String nextPartitionKey, String nextRowKey, String apiVersion, String $filter, String query, Integer takeCount, final ApiCallback<AddsServiceMembers> _callback) throws ApiException {

        okhttp3.Call localVarCall = adDomainServiceMembersListValidateBeforeCall(serviceName, isGroupbySite, nextPartitionKey, nextRowKey, apiVersion, $filter, query, takeCount, _callback);
        Type localVarReturnType = new TypeToken<AddsServiceMembers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServiceGetMetrics
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for the service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServiceGetMetricsCall(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metrics/{metricName}/groups/{groupName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupKey", groupKey));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServiceGetMetricsValidateBeforeCall(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServiceGetMetrics(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling addsServiceGetMetrics(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling addsServiceGetMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServiceGetMetrics(Async)");
        }

        return addsServiceGetMetricsCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, _callback);

    }

    /**
     * 
     * Gets the server related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @return MetricSets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for the service.  </td><td>  -  </td></tr>
     </table>
     */
    public MetricSets addsServiceGetMetrics(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        ApiResponse<MetricSets> localVarResp = addsServiceGetMetricsWithHttpInfo(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the server related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @return ApiResponse&lt;MetricSets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for the service.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricSets> addsServiceGetMetricsWithHttpInfo(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        okhttp3.Call localVarCall = addsServiceGetMetricsValidateBeforeCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<MetricSets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the server related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for the service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServiceGetMetricsAsync(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback<MetricSets> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServiceGetMetricsValidateBeforeCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<MetricSets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServiceMembersDelete
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServiceMembersDeleteCall(String serviceName, UUID serviceMemberId, String apiVersion, Boolean confirm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confirm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("confirm", confirm));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServiceMembersDeleteValidateBeforeCall(String serviceName, UUID serviceMemberId, String apiVersion, Boolean confirm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServiceMembersDelete(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling addsServiceMembersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServiceMembersDelete(Async)");
        }

        return addsServiceMembersDeleteCall(serviceName, serviceMemberId, apiVersion, confirm, _callback);

    }

    /**
     * 
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public void addsServiceMembersDelete(String serviceName, UUID serviceMemberId, String apiVersion, Boolean confirm) throws ApiException {
        addsServiceMembersDeleteWithHttpInfo(serviceName, serviceMemberId, apiVersion, confirm);
    }

    /**
     * 
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addsServiceMembersDeleteWithHttpInfo(String serviceName, UUID serviceMemberId, String apiVersion, Boolean confirm) throws ApiException {
        okhttp3.Call localVarCall = addsServiceMembersDeleteValidateBeforeCall(serviceName, serviceMemberId, apiVersion, confirm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a Active Directory Domain Controller server that has been onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the server will be permanently deleted or disabled. True indicates that the server will be permanently deleted and False indicates that the server will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServiceMembersDeleteAsync(String serviceName, UUID serviceMemberId, String apiVersion, Boolean confirm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServiceMembersDeleteValidateBeforeCall(serviceName, serviceMemberId, apiVersion, confirm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServiceMembersGet
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service member details for a given service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServiceMembersGetCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServiceMembersGetValidateBeforeCall(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServiceMembersGet(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling addsServiceMembersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServiceMembersGet(Async)");
        }

        return addsServiceMembersGetCall(serviceName, serviceMemberId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the details of a server, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ServiceMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service member details for a given service.  </td><td>  -  </td></tr>
     </table>
     */
    public ServiceMember addsServiceMembersGet(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        ApiResponse<ServiceMember> localVarResp = addsServiceMembersGetWithHttpInfo(serviceName, serviceMemberId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of a server, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ServiceMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service member details for a given service.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceMember> addsServiceMembersGetWithHttpInfo(String serviceName, UUID serviceMemberId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = addsServiceMembersGetValidateBeforeCall(serviceName, serviceMemberId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServiceMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of a server, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service member details for a given service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServiceMembersGetAsync(String serviceName, UUID serviceMemberId, String apiVersion, final ApiCallback<ServiceMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServiceMembersGetValidateBeforeCall(serviceName, serviceMemberId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServiceMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServiceMembersList
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Active Directory Domain Servers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServiceMembersListCall(String serviceName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/addsservicemembers"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServiceMembersListValidateBeforeCall(String serviceName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServiceMembersList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServiceMembersList(Async)");
        }

        return addsServiceMembersListCall(serviceName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @return AddsServiceMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Active Directory Domain Servers.  </td><td>  -  </td></tr>
     </table>
     */
    public AddsServiceMembers addsServiceMembersList(String serviceName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<AddsServiceMembers> localVarResp = addsServiceMembersListWithHttpInfo(serviceName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @return ApiResponse&lt;AddsServiceMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Active Directory Domain Servers.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddsServiceMembers> addsServiceMembersListWithHttpInfo(String serviceName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = addsServiceMembersListValidateBeforeCall(serviceName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<AddsServiceMembers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of the Active Directory Domain servers, for a given Active Directory Domain Service, that are onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of Active Directory Domain Servers.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServiceMembersListAsync(String serviceName, String apiVersion, String $filter, final ApiCallback<AddsServiceMembers> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServiceMembersListValidateBeforeCall(serviceName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<AddsServiceMembers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServiceMembersListCredentials
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The property filter to apply. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of server credentials. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServiceMembersListCredentialsCall(String serviceName, UUID serviceMemberId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}/credentials"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServiceMembersListCredentialsValidateBeforeCall(String serviceName, UUID serviceMemberId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServiceMembersListCredentials(Async)");
        }

        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling addsServiceMembersListCredentials(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServiceMembersListCredentials(Async)");
        }

        return addsServiceMembersListCredentialsCall(serviceName, serviceMemberId, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The property filter to apply. (optional)
     * @return Credentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of server credentials. </td><td>  -  </td></tr>
     </table>
     */
    public Credentials addsServiceMembersListCredentials(String serviceName, UUID serviceMemberId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<Credentials> localVarResp = addsServiceMembersListCredentialsWithHttpInfo(serviceName, serviceMemberId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The property filter to apply. (optional)
     * @return ApiResponse&lt;Credentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of server credentials. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credentials> addsServiceMembersListCredentialsWithHttpInfo(String serviceName, UUID serviceMemberId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = addsServiceMembersListCredentialsValidateBeforeCall(serviceName, serviceMemberId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<Credentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the credentials of the server which is needed by the agent to connect to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param serviceMemberId The server Id. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The property filter to apply. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of server credentials. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServiceMembersListCredentialsAsync(String serviceName, UUID serviceMemberId, String apiVersion, String $filter, final ApiCallback<Credentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServiceMembersListCredentialsValidateBeforeCall(serviceName, serviceMemberId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<Credentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesAdd
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Adds the Active Directory Domain Controller Services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesAddCall(String apiVersion, ServiceProperties service, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = service;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesAddValidateBeforeCall(String apiVersion, ServiceProperties service, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesAdd(Async)");
        }

        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling addsServicesAdd(Async)");
        }

        return addsServicesAddCall(apiVersion, service, _callback);

    }

    /**
     * 
     * Onboards a service for a given tenant in Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @return ServiceProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Adds the Active Directory Domain Controller Services. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceProperties addsServicesAdd(String apiVersion, ServiceProperties service) throws ApiException {
        ApiResponse<ServiceProperties> localVarResp = addsServicesAddWithHttpInfo(apiVersion, service);
        return localVarResp.getData();
    }

    /**
     * 
     * Onboards a service for a given tenant in Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @return ApiResponse&lt;ServiceProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Adds the Active Directory Domain Controller Services. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceProperties> addsServicesAddWithHttpInfo(String apiVersion, ServiceProperties service) throws ApiException {
        okhttp3.Call localVarCall = addsServicesAddValidateBeforeCall(apiVersion, service, null);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Onboards a service for a given tenant in Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Adds the Active Directory Domain Controller Services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesAddAsync(String apiVersion, ServiceProperties service, final ApiCallback<ServiceProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesAddValidateBeforeCall(apiVersion, service, _callback);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesGetForestSummary
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of forest summary for the service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesGetForestSummaryCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/forestsummary"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesGetForestSummaryValidateBeforeCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesGetForestSummary(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesGetForestSummary(Async)");
        }

        return addsServicesGetForestSummaryCall(serviceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the forest summary for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ForestSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of forest summary for the service.  </td><td>  -  </td></tr>
     </table>
     */
    public ForestSummary addsServicesGetForestSummary(String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ForestSummary> localVarResp = addsServicesGetForestSummaryWithHttpInfo(serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the forest summary for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ForestSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of forest summary for the service.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ForestSummary> addsServicesGetForestSummaryWithHttpInfo(String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = addsServicesGetForestSummaryValidateBeforeCall(serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ForestSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the forest summary for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of forest summary for the service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesGetForestSummaryAsync(String serviceName, String apiVersion, final ApiCallback<ForestSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesGetForestSummaryValidateBeforeCall(serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ForestSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesGetMetricMetadata
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  The metric metadata for the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesGetMetricMetadataCall(String serviceName, String metricName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metricmetadata/{metricName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesGetMetricMetadataValidateBeforeCall(String serviceName, String metricName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesGetMetricMetadata(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling addsServicesGetMetricMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesGetMetricMetadata(Async)");
        }

        return addsServicesGetMetricMetadataCall(serviceName, metricName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the service related metric information.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return MetricMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  The metric metadata for the service. </td><td>  -  </td></tr>
     </table>
     */
    public MetricMetadata addsServicesGetMetricMetadata(String serviceName, String metricName, String apiVersion) throws ApiException {
        ApiResponse<MetricMetadata> localVarResp = addsServicesGetMetricMetadataWithHttpInfo(serviceName, metricName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the service related metric information.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;MetricMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  The metric metadata for the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricMetadata> addsServicesGetMetricMetadataWithHttpInfo(String serviceName, String metricName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = addsServicesGetMetricMetadataValidateBeforeCall(serviceName, metricName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the service related metric information.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  The metric metadata for the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesGetMetricMetadataAsync(String serviceName, String metricName, String apiVersion, final ApiCallback<MetricMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesGetMetricMetadataValidateBeforeCall(serviceName, metricName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesGetMetricMetadataForGroup
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service and group.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesGetMetricMetadataForGroupCall(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metricmetadata/{metricName}/groups/{groupName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupKey", groupKey));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesGetMetricMetadataForGroupValidateBeforeCall(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesGetMetricMetadataForGroup(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling addsServicesGetMetricMetadataForGroup(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling addsServicesGetMetricMetadataForGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesGetMetricMetadataForGroup(Async)");
        }

        return addsServicesGetMetricMetadataForGroupCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, _callback);

    }

    /**
     * 
     * Gets the service related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @return MetricSets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service and group.  </td><td>  -  </td></tr>
     </table>
     */
    public MetricSets addsServicesGetMetricMetadataForGroup(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        ApiResponse<MetricSets> localVarResp = addsServicesGetMetricMetadataForGroupWithHttpInfo(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the service related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @return ApiResponse&lt;MetricSets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service and group.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricSets> addsServicesGetMetricMetadataForGroupWithHttpInfo(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate) throws ApiException {
        okhttp3.Call localVarCall = addsServicesGetMetricMetadataForGroupValidateBeforeCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<MetricSets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the service related metrics for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param groupKey The group key (optional)
     * @param fromDate The start date. (optional)
     * @param toDate The end date. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The metric sets for a given service and group.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesGetMetricMetadataForGroupAsync(String serviceName, String metricName, String groupName, String apiVersion, String groupKey, OffsetDateTime fromDate, OffsetDateTime toDate, final ApiCallback<MetricSets> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesGetMetricMetadataForGroupValidateBeforeCall(serviceName, metricName, groupName, apiVersion, groupKey, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<MetricSets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesList
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  The list of Active Directory Domain Controller services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListCall(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (serviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceType", serviceType));
        }

        if (skipCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipCount", skipCount));
        }

        if (takeCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("takeCount", takeCount));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesListValidateBeforeCall(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesList(Async)");
        }

        return addsServicesListCall(apiVersion, $filter, serviceType, skipCount, takeCount, _callback);

    }

    /**
     * 
     * Gets the details of Active Directory Domain Service, for a tenant, that are onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return Services
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  The list of Active Directory Domain Controller services. </td><td>  -  </td></tr>
     </table>
     */
    public Services addsServicesList(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount) throws ApiException {
        ApiResponse<Services> localVarResp = addsServicesListWithHttpInfo(apiVersion, $filter, serviceType, skipCount, takeCount);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of Active Directory Domain Service, for a tenant, that are onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return ApiResponse&lt;Services&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  The list of Active Directory Domain Controller services. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Services> addsServicesListWithHttpInfo(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount) throws ApiException {
        okhttp3.Call localVarCall = addsServicesListValidateBeforeCall(apiVersion, $filter, serviceType, skipCount, takeCount, null);
        Type localVarReturnType = new TypeToken<Services>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of Active Directory Domain Service, for a tenant, that are onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  The list of Active Directory Domain Controller services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListAsync(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback<Services> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesListValidateBeforeCall(apiVersion, $filter, serviceType, skipCount, takeCount, _callback);
        Type localVarReturnType = new TypeToken<Services>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesListMetricMetadata
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The metric metadata property filter to apply. (optional)
     * @param perfCounter Indicates if only performance counter metrics are requested. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric metadata for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListMetricMetadataCall(String serviceName, String apiVersion, String $filter, Boolean perfCounter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metricmetadata"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (perfCounter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("perfCounter", perfCounter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesListMetricMetadataValidateBeforeCall(String serviceName, String apiVersion, String $filter, Boolean perfCounter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesListMetricMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesListMetricMetadata(Async)");
        }

        return addsServicesListMetricMetadataCall(serviceName, apiVersion, $filter, perfCounter, _callback);

    }

    /**
     * 
     * Gets the service related metrics information.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The metric metadata property filter to apply. (optional)
     * @param perfCounter Indicates if only performance counter metrics are requested. (optional)
     * @return MetricMetadataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric metadata for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public MetricMetadataList addsServicesListMetricMetadata(String serviceName, String apiVersion, String $filter, Boolean perfCounter) throws ApiException {
        ApiResponse<MetricMetadataList> localVarResp = addsServicesListMetricMetadataWithHttpInfo(serviceName, apiVersion, $filter, perfCounter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the service related metrics information.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The metric metadata property filter to apply. (optional)
     * @param perfCounter Indicates if only performance counter metrics are requested. (optional)
     * @return ApiResponse&lt;MetricMetadataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric metadata for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricMetadataList> addsServicesListMetricMetadataWithHttpInfo(String serviceName, String apiVersion, String $filter, Boolean perfCounter) throws ApiException {
        okhttp3.Call localVarCall = addsServicesListMetricMetadataValidateBeforeCall(serviceName, apiVersion, $filter, perfCounter, null);
        Type localVarReturnType = new TypeToken<MetricMetadataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the service related metrics information.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The metric metadata property filter to apply. (optional)
     * @param perfCounter Indicates if only performance counter metrics are requested. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metric metadata for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListMetricMetadataAsync(String serviceName, String apiVersion, String $filter, Boolean perfCounter, final ApiCallback<MetricMetadataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesListMetricMetadataValidateBeforeCall(serviceName, apiVersion, $filter, perfCounter, _callback);
        Type localVarReturnType = new TypeToken<MetricMetadataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesListMetricsAverage
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metrics.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListMetricsAverageCall(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metrics/{metricName}/groups/{groupName}/average"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesListMetricsAverageValidateBeforeCall(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesListMetricsAverage(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling addsServicesListMetricsAverage(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling addsServicesListMetricsAverage(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesListMetricsAverage(Async)");
        }

        return addsServicesListMetricsAverageCall(serviceName, metricName, groupName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the average of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return Metrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metrics.  </td><td>  -  </td></tr>
     </table>
     */
    public Metrics addsServicesListMetricsAverage(String serviceName, String metricName, String groupName, String apiVersion) throws ApiException {
        ApiResponse<Metrics> localVarResp = addsServicesListMetricsAverageWithHttpInfo(serviceName, metricName, groupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the average of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Metrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metrics.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metrics> addsServicesListMetricsAverageWithHttpInfo(String serviceName, String metricName, String groupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = addsServicesListMetricsAverageValidateBeforeCall(serviceName, metricName, groupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the average of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of metrics.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListMetricsAverageAsync(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback<Metrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesListMetricsAverageValidateBeforeCall(serviceName, metricName, groupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesListMetricsSum
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of aum of the metric values for a given service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListMetricsSumCall(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/metrics/{metricName}/groups/{groupName}/sum"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "metricName" + "}", localVarApiClient.escapeString(metricName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesListMetricsSumValidateBeforeCall(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesListMetricsSum(Async)");
        }

        // verify the required parameter 'metricName' is set
        if (metricName == null) {
            throw new ApiException("Missing the required parameter 'metricName' when calling addsServicesListMetricsSum(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling addsServicesListMetricsSum(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesListMetricsSum(Async)");
        }

        return addsServicesListMetricsSumCall(serviceName, metricName, groupName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the sum of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return Metrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of aum of the metric values for a given service.  </td><td>  -  </td></tr>
     </table>
     */
    public Metrics addsServicesListMetricsSum(String serviceName, String metricName, String groupName, String apiVersion) throws ApiException {
        ApiResponse<Metrics> localVarResp = addsServicesListMetricsSumWithHttpInfo(serviceName, metricName, groupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the sum of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Metrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of aum of the metric values for a given service.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Metrics> addsServicesListMetricsSumWithHttpInfo(String serviceName, String metricName, String groupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = addsServicesListMetricsSumValidateBeforeCall(serviceName, metricName, groupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the sum of the metric values for a given metric and group combination.
     * @param serviceName The name of the service. (required)
     * @param metricName The metric name (required)
     * @param groupName The group name (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of aum of the metric values for a given service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListMetricsSumAsync(String serviceName, String metricName, String groupName, String apiVersion, final ApiCallback<Metrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesListMetricsSumValidateBeforeCall(serviceName, metricName, groupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Metrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesListReplicationDetails
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param withDetails Indicates if InboundReplicationNeighbor details are required or not. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of replication details for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListReplicationDetailsCall(String serviceName, String apiVersion, String $filter, Boolean withDetails, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/replicationdetails"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (withDetails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("withDetails", withDetails));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesListReplicationDetailsValidateBeforeCall(String serviceName, String apiVersion, String $filter, Boolean withDetails, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesListReplicationDetails(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesListReplicationDetails(Async)");
        }

        return addsServicesListReplicationDetailsCall(serviceName, apiVersion, $filter, withDetails, _callback);

    }

    /**
     * 
     * Gets complete domain controller list along with replication details for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param withDetails Indicates if InboundReplicationNeighbor details are required or not. (optional)
     * @return ReplicationDetailsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of replication details for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationDetailsList addsServicesListReplicationDetails(String serviceName, String apiVersion, String $filter, Boolean withDetails) throws ApiException {
        ApiResponse<ReplicationDetailsList> localVarResp = addsServicesListReplicationDetailsWithHttpInfo(serviceName, apiVersion, $filter, withDetails);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets complete domain controller list along with replication details for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param withDetails Indicates if InboundReplicationNeighbor details are required or not. (optional)
     * @return ApiResponse&lt;ReplicationDetailsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of replication details for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationDetailsList> addsServicesListReplicationDetailsWithHttpInfo(String serviceName, String apiVersion, String $filter, Boolean withDetails) throws ApiException {
        okhttp3.Call localVarCall = addsServicesListReplicationDetailsValidateBeforeCall(serviceName, apiVersion, $filter, withDetails, null);
        Type localVarReturnType = new TypeToken<ReplicationDetailsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets complete domain controller list along with replication details for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param withDetails Indicates if InboundReplicationNeighbor details are required or not. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of replication details for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListReplicationDetailsAsync(String serviceName, String apiVersion, String $filter, Boolean withDetails, final ApiCallback<ReplicationDetailsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesListReplicationDetailsValidateBeforeCall(serviceName, apiVersion, $filter, withDetails, _callback);
        Type localVarReturnType = new TypeToken<ReplicationDetailsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesListReplicationSummary
     * @param serviceName The name of the service. (required)
     * @param isGroupbySite Indicates if the result should be grouped by site or not. (required)
     * @param query The custom query. (required)
     * @param nextPartitionKey The next partition key to query for. (required)
     * @param nextRowKey The next row key to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of replication summary for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListReplicationSummaryCall(String serviceName, Boolean isGroupbySite, String query, String nextPartitionKey, String nextRowKey, String apiVersion, String $filter, Integer takeCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/replicationsummary"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (isGroupbySite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isGroupbySite", isGroupbySite));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (nextPartitionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPartitionKey", nextPartitionKey));
        }

        if (nextRowKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextRowKey", nextRowKey));
        }

        if (takeCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("takeCount", takeCount));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesListReplicationSummaryValidateBeforeCall(String serviceName, Boolean isGroupbySite, String query, String nextPartitionKey, String nextRowKey, String apiVersion, String $filter, Integer takeCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesListReplicationSummary(Async)");
        }

        // verify the required parameter 'isGroupbySite' is set
        if (isGroupbySite == null) {
            throw new ApiException("Missing the required parameter 'isGroupbySite' when calling addsServicesListReplicationSummary(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling addsServicesListReplicationSummary(Async)");
        }

        // verify the required parameter 'nextPartitionKey' is set
        if (nextPartitionKey == null) {
            throw new ApiException("Missing the required parameter 'nextPartitionKey' when calling addsServicesListReplicationSummary(Async)");
        }

        // verify the required parameter 'nextRowKey' is set
        if (nextRowKey == null) {
            throw new ApiException("Missing the required parameter 'nextRowKey' when calling addsServicesListReplicationSummary(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesListReplicationSummary(Async)");
        }

        return addsServicesListReplicationSummaryCall(serviceName, isGroupbySite, query, nextPartitionKey, nextRowKey, apiVersion, $filter, takeCount, _callback);

    }

    /**
     * 
     * Gets complete domain controller list along with replication details for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param isGroupbySite Indicates if the result should be grouped by site or not. (required)
     * @param query The custom query. (required)
     * @param nextPartitionKey The next partition key to query for. (required)
     * @param nextRowKey The next row key to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return ReplicationSummaryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of replication summary for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationSummaryList addsServicesListReplicationSummary(String serviceName, Boolean isGroupbySite, String query, String nextPartitionKey, String nextRowKey, String apiVersion, String $filter, Integer takeCount) throws ApiException {
        ApiResponse<ReplicationSummaryList> localVarResp = addsServicesListReplicationSummaryWithHttpInfo(serviceName, isGroupbySite, query, nextPartitionKey, nextRowKey, apiVersion, $filter, takeCount);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets complete domain controller list along with replication details for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param isGroupbySite Indicates if the result should be grouped by site or not. (required)
     * @param query The custom query. (required)
     * @param nextPartitionKey The next partition key to query for. (required)
     * @param nextRowKey The next row key to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return ApiResponse&lt;ReplicationSummaryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of replication summary for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationSummaryList> addsServicesListReplicationSummaryWithHttpInfo(String serviceName, Boolean isGroupbySite, String query, String nextPartitionKey, String nextRowKey, String apiVersion, String $filter, Integer takeCount) throws ApiException {
        okhttp3.Call localVarCall = addsServicesListReplicationSummaryValidateBeforeCall(serviceName, isGroupbySite, query, nextPartitionKey, nextRowKey, apiVersion, $filter, takeCount, null);
        Type localVarReturnType = new TypeToken<ReplicationSummaryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets complete domain controller list along with replication details for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param isGroupbySite Indicates if the result should be grouped by site or not. (required)
     * @param query The custom query. (required)
     * @param nextPartitionKey The next partition key to query for. (required)
     * @param nextRowKey The next row key to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of replication summary for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListReplicationSummaryAsync(String serviceName, Boolean isGroupbySite, String query, String nextPartitionKey, String nextRowKey, String apiVersion, String $filter, Integer takeCount, final ApiCallback<ReplicationSummaryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesListReplicationSummaryValidateBeforeCall(serviceName, isGroupbySite, query, nextPartitionKey, nextRowKey, apiVersion, $filter, takeCount, _callback);
        Type localVarReturnType = new TypeToken<ReplicationSummaryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesListServerAlerts
     * @param serviceMemberId The server Id for which the alert details needs to be queried. (required)
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The alert property filter to apply. (optional)
     * @param state The alert state to query for. (optional)
     * @param from The start date to query for. (optional)
     * @param to The end date till when to query for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of server alerts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListServerAlertsCall(UUID serviceMemberId, String serviceName, String apiVersion, String $filter, String state, OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers/{serviceMemberId}/alerts"
            .replace("{" + "serviceMemberId" + "}", localVarApiClient.escapeString(serviceMemberId.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesListServerAlertsValidateBeforeCall(UUID serviceMemberId, String serviceName, String apiVersion, String $filter, String state, OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceMemberId' is set
        if (serviceMemberId == null) {
            throw new ApiException("Missing the required parameter 'serviceMemberId' when calling addsServicesListServerAlerts(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesListServerAlerts(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesListServerAlerts(Async)");
        }

        return addsServicesListServerAlertsCall(serviceMemberId, serviceName, apiVersion, $filter, state, from, to, _callback);

    }

    /**
     * 
     * Gets the details of an alert for a given Active Directory Domain Controller service and server combination.
     * @param serviceMemberId The server Id for which the alert details needs to be queried. (required)
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The alert property filter to apply. (optional)
     * @param state The alert state to query for. (optional)
     * @param from The start date to query for. (optional)
     * @param to The end date till when to query for. (optional)
     * @return Alerts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of server alerts. </td><td>  -  </td></tr>
     </table>
     */
    public Alerts addsServicesListServerAlerts(UUID serviceMemberId, String serviceName, String apiVersion, String $filter, String state, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        ApiResponse<Alerts> localVarResp = addsServicesListServerAlertsWithHttpInfo(serviceMemberId, serviceName, apiVersion, $filter, state, from, to);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of an alert for a given Active Directory Domain Controller service and server combination.
     * @param serviceMemberId The server Id for which the alert details needs to be queried. (required)
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The alert property filter to apply. (optional)
     * @param state The alert state to query for. (optional)
     * @param from The start date to query for. (optional)
     * @param to The end date till when to query for. (optional)
     * @return ApiResponse&lt;Alerts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of server alerts. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alerts> addsServicesListServerAlertsWithHttpInfo(UUID serviceMemberId, String serviceName, String apiVersion, String $filter, String state, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        okhttp3.Call localVarCall = addsServicesListServerAlertsValidateBeforeCall(serviceMemberId, serviceName, apiVersion, $filter, state, from, to, null);
        Type localVarReturnType = new TypeToken<Alerts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of an alert for a given Active Directory Domain Controller service and server combination.
     * @param serviceMemberId The server Id for which the alert details needs to be queried. (required)
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The alert property filter to apply. (optional)
     * @param state The alert state to query for. (optional)
     * @param from The start date to query for. (optional)
     * @param to The end date till when to query for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of server alerts. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListServerAlertsAsync(UUID serviceMemberId, String serviceName, String apiVersion, String $filter, String state, OffsetDateTime from, OffsetDateTime to, final ApiCallback<Alerts> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesListServerAlertsValidateBeforeCall(serviceMemberId, serviceName, apiVersion, $filter, state, from, to, _callback);
        Type localVarReturnType = new TypeToken<Alerts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesReplicationStatusGet
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replication status for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesReplicationStatusGetCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/replicationstatus"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesReplicationStatusGetValidateBeforeCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesReplicationStatusGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesReplicationStatusGet(Async)");
        }

        return addsServicesReplicationStatusGetCall(serviceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets Replication status for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ReplicationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replication status for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationStatus addsServicesReplicationStatusGet(String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ReplicationStatus> localVarResp = addsServicesReplicationStatusGetWithHttpInfo(serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets Replication status for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ReplicationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replication status for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationStatus> addsServicesReplicationStatusGetWithHttpInfo(String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = addsServicesReplicationStatusGetValidateBeforeCall(serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ReplicationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets Replication status for a given Active Directory Domain Service, that is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replication status for a service.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesReplicationStatusGetAsync(String serviceName, String apiVersion, final ApiCallback<ReplicationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesReplicationStatusGetValidateBeforeCall(serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ReplicationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesServiceMembersAdd
     * @param serviceName The name of the service under which the server is to be onboarded. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param serviceMember The server object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesServiceMembersAddCall(String serviceName, String apiVersion, ServiceMember serviceMember, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serviceMember;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesServiceMembersAddValidateBeforeCall(String serviceName, String apiVersion, ServiceMember serviceMember, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesServiceMembersAdd(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesServiceMembersAdd(Async)");
        }

        // verify the required parameter 'serviceMember' is set
        if (serviceMember == null) {
            throw new ApiException("Missing the required parameter 'serviceMember' when calling addsServicesServiceMembersAdd(Async)");
        }

        return addsServicesServiceMembersAddCall(serviceName, apiVersion, serviceMember, _callback);

    }

    /**
     * 
     * Onboards  a server, for a given Active Directory Domain Controller service, to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service under which the server is to be onboarded. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param serviceMember The server object. (required)
     * @return ServiceMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service member. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceMember addsServicesServiceMembersAdd(String serviceName, String apiVersion, ServiceMember serviceMember) throws ApiException {
        ApiResponse<ServiceMember> localVarResp = addsServicesServiceMembersAddWithHttpInfo(serviceName, apiVersion, serviceMember);
        return localVarResp.getData();
    }

    /**
     * 
     * Onboards  a server, for a given Active Directory Domain Controller service, to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service under which the server is to be onboarded. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param serviceMember The server object. (required)
     * @return ApiResponse&lt;ServiceMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service member. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceMember> addsServicesServiceMembersAddWithHttpInfo(String serviceName, String apiVersion, ServiceMember serviceMember) throws ApiException {
        okhttp3.Call localVarCall = addsServicesServiceMembersAddValidateBeforeCall(serviceName, apiVersion, serviceMember, null);
        Type localVarReturnType = new TypeToken<ServiceMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Onboards  a server, for a given Active Directory Domain Controller service, to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service under which the server is to be onboarded. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param serviceMember The server object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service member. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesServiceMembersAddAsync(String serviceName, String apiVersion, ServiceMember serviceMember, final ApiCallback<ServiceMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesServiceMembersAddValidateBeforeCall(serviceName, apiVersion, serviceMember, _callback);
        Type localVarReturnType = new TypeToken<ServiceMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesServiceMembersList
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param dimensionType The server specific dimension. (optional)
     * @param dimensionSignature The value of the dimension. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service members for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesServiceMembersListCall(String serviceName, String apiVersion, String $filter, String dimensionType, String dimensionSignature, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/servicemembers"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (dimensionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimensionType", dimensionType));
        }

        if (dimensionSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimensionSignature", dimensionSignature));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesServiceMembersListValidateBeforeCall(String serviceName, String apiVersion, String $filter, String dimensionType, String dimensionSignature, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesServiceMembersList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesServiceMembersList(Async)");
        }

        return addsServicesServiceMembersListCall(serviceName, apiVersion, $filter, dimensionType, dimensionSignature, _callback);

    }

    /**
     * 
     * Gets the details of the servers, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param dimensionType The server specific dimension. (optional)
     * @param dimensionSignature The value of the dimension. (optional)
     * @return ServiceMembers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service members for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceMembers addsServicesServiceMembersList(String serviceName, String apiVersion, String $filter, String dimensionType, String dimensionSignature) throws ApiException {
        ApiResponse<ServiceMembers> localVarResp = addsServicesServiceMembersListWithHttpInfo(serviceName, apiVersion, $filter, dimensionType, dimensionSignature);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of the servers, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param dimensionType The server specific dimension. (optional)
     * @param dimensionSignature The value of the dimension. (optional)
     * @return ApiResponse&lt;ServiceMembers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service members for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceMembers> addsServicesServiceMembersListWithHttpInfo(String serviceName, String apiVersion, String $filter, String dimensionType, String dimensionSignature) throws ApiException {
        okhttp3.Call localVarCall = addsServicesServiceMembersListValidateBeforeCall(serviceName, apiVersion, $filter, dimensionType, dimensionSignature, null);
        Type localVarReturnType = new TypeToken<ServiceMembers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of the servers, for a given Active Directory Domain Controller service, that are onboarded to Azure Active Directory Connect Health Service.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The server property filter to apply. (optional)
     * @param dimensionType The server specific dimension. (optional)
     * @param dimensionSignature The value of the dimension. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of service members for a given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesServiceMembersListAsync(String serviceName, String apiVersion, String $filter, String dimensionType, String dimensionSignature, final ApiCallback<ServiceMembers> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesServiceMembersListValidateBeforeCall(serviceName, apiVersion, $filter, dimensionType, dimensionSignature, _callback);
        Type localVarReturnType = new TypeToken<ServiceMembers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesUserPreferenceAdd
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param setting The user preference setting. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  Successfully added the user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesUserPreferenceAddCall(String serviceName, String featureName, String apiVersion, UserPreference setting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setting;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "featureName" + "}", localVarApiClient.escapeString(featureName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesUserPreferenceAddValidateBeforeCall(String serviceName, String featureName, String apiVersion, UserPreference setting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesUserPreferenceAdd(Async)");
        }

        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException("Missing the required parameter 'featureName' when calling addsServicesUserPreferenceAdd(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesUserPreferenceAdd(Async)");
        }

        // verify the required parameter 'setting' is set
        if (setting == null) {
            throw new ApiException("Missing the required parameter 'setting' when calling addsServicesUserPreferenceAdd(Async)");
        }

        return addsServicesUserPreferenceAddCall(serviceName, featureName, apiVersion, setting, _callback);

    }

    /**
     * 
     * Adds the user preferences for a given feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param setting The user preference setting. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  Successfully added the user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public void addsServicesUserPreferenceAdd(String serviceName, String featureName, String apiVersion, UserPreference setting) throws ApiException {
        addsServicesUserPreferenceAddWithHttpInfo(serviceName, featureName, apiVersion, setting);
    }

    /**
     * 
     * Adds the user preferences for a given feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param setting The user preference setting. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  Successfully added the user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addsServicesUserPreferenceAddWithHttpInfo(String serviceName, String featureName, String apiVersion, UserPreference setting) throws ApiException {
        okhttp3.Call localVarCall = addsServicesUserPreferenceAddValidateBeforeCall(serviceName, featureName, apiVersion, setting, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Adds the user preferences for a given feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param setting The user preference setting. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  Successfully added the user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesUserPreferenceAddAsync(String serviceName, String featureName, String apiVersion, UserPreference setting, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesUserPreferenceAddValidateBeforeCall(serviceName, featureName, apiVersion, setting, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesUserPreferenceDelete
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesUserPreferenceDeleteCall(String serviceName, String featureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "featureName" + "}", localVarApiClient.escapeString(featureName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesUserPreferenceDeleteValidateBeforeCall(String serviceName, String featureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesUserPreferenceDelete(Async)");
        }

        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException("Missing the required parameter 'featureName' when calling addsServicesUserPreferenceDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesUserPreferenceDelete(Async)");
        }

        return addsServicesUserPreferenceDeleteCall(serviceName, featureName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the user preferences for a given feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public void addsServicesUserPreferenceDelete(String serviceName, String featureName, String apiVersion) throws ApiException {
        addsServicesUserPreferenceDeleteWithHttpInfo(serviceName, featureName, apiVersion);
    }

    /**
     * 
     * Deletes the user preferences for a given feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addsServicesUserPreferenceDeleteWithHttpInfo(String serviceName, String featureName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = addsServicesUserPreferenceDeleteValidateBeforeCall(serviceName, featureName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the user preferences for a given feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesUserPreferenceDeleteAsync(String serviceName, String featureName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesUserPreferenceDeleteValidateBeforeCall(serviceName, featureName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesUserPreferenceGet
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesUserPreferenceGetCall(String serviceName, String featureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/features/{featureName}/userpreference"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "featureName" + "}", localVarApiClient.escapeString(featureName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesUserPreferenceGetValidateBeforeCall(String serviceName, String featureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesUserPreferenceGet(Async)");
        }

        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException("Missing the required parameter 'featureName' when calling addsServicesUserPreferenceGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesUserPreferenceGet(Async)");
        }

        return addsServicesUserPreferenceGetCall(serviceName, featureName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the user preferences for a given feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return UserPreference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public UserPreference addsServicesUserPreferenceGet(String serviceName, String featureName, String apiVersion) throws ApiException {
        ApiResponse<UserPreference> localVarResp = addsServicesUserPreferenceGetWithHttpInfo(serviceName, featureName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the user preferences for a given feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;UserPreference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserPreference> addsServicesUserPreferenceGetWithHttpInfo(String serviceName, String featureName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = addsServicesUserPreferenceGetValidateBeforeCall(serviceName, featureName, apiVersion, null);
        Type localVarReturnType = new TypeToken<UserPreference>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the user preferences for a given feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user preference settings.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesUserPreferenceGetAsync(String serviceName, String featureName, String apiVersion, final ApiCallback<UserPreference> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesUserPreferenceGetValidateBeforeCall(serviceName, featureName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<UserPreference>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsListAddsAlerts
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The alert property filter to apply. (optional)
     * @param state The alert state to query for. (optional)
     * @param from The start date to query for. (optional)
     * @param to The end date till when to query for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of alerts for the given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListAddsAlertsCall(String serviceName, String apiVersion, String $filter, String state, OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/alerts"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListAddsAlertsValidateBeforeCall(String serviceName, String apiVersion, String $filter, String state, OffsetDateTime from, OffsetDateTime to, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling alertsListAddsAlerts(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsListAddsAlerts(Async)");
        }

        return alertsListAddsAlertsCall(serviceName, apiVersion, $filter, state, from, to, _callback);

    }

    /**
     * 
     * Gets the alerts for a given Active Directory Domain Service.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The alert property filter to apply. (optional)
     * @param state The alert state to query for. (optional)
     * @param from The start date to query for. (optional)
     * @param to The end date till when to query for. (optional)
     * @return Alerts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of alerts for the given service. </td><td>  -  </td></tr>
     </table>
     */
    public Alerts alertsListAddsAlerts(String serviceName, String apiVersion, String $filter, String state, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        ApiResponse<Alerts> localVarResp = alertsListAddsAlertsWithHttpInfo(serviceName, apiVersion, $filter, state, from, to);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the alerts for a given Active Directory Domain Service.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The alert property filter to apply. (optional)
     * @param state The alert state to query for. (optional)
     * @param from The start date to query for. (optional)
     * @param to The end date till when to query for. (optional)
     * @return ApiResponse&lt;Alerts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of alerts for the given service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alerts> alertsListAddsAlertsWithHttpInfo(String serviceName, String apiVersion, String $filter, String state, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        okhttp3.Call localVarCall = alertsListAddsAlertsValidateBeforeCall(serviceName, apiVersion, $filter, state, from, to, null);
        Type localVarReturnType = new TypeToken<Alerts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the alerts for a given Active Directory Domain Service.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The alert property filter to apply. (optional)
     * @param state The alert state to query for. (optional)
     * @param from The start date to query for. (optional)
     * @param to The end date till when to query for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of alerts for the given service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListAddsAlertsAsync(String serviceName, String apiVersion, String $filter, String state, OffsetDateTime from, OffsetDateTime to, final ApiCallback<Alerts> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListAddsAlertsValidateBeforeCall(serviceName, apiVersion, $filter, state, from, to, _callback);
        Type localVarReturnType = new TypeToken<Alerts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configurationListAddsConfigurations
     * @param serviceName The name of the service. (required)
     * @param grouping The grouping for configurations. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Active Directory Domain Controller service configuration.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationListAddsConfigurationsCall(String serviceName, String grouping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/configuration"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grouping != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grouping", grouping));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configurationListAddsConfigurationsValidateBeforeCall(String serviceName, String grouping, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling configurationListAddsConfigurations(Async)");
        }

        return configurationListAddsConfigurationsCall(serviceName, grouping, _callback);

    }

    /**
     * 
     * Gets the service configurations.
     * @param serviceName The name of the service. (required)
     * @param grouping The grouping for configurations. (optional)
     * @return AddsConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Active Directory Domain Controller service configuration.  </td><td>  -  </td></tr>
     </table>
     */
    public AddsConfiguration configurationListAddsConfigurations(String serviceName, String grouping) throws ApiException {
        ApiResponse<AddsConfiguration> localVarResp = configurationListAddsConfigurationsWithHttpInfo(serviceName, grouping);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the service configurations.
     * @param serviceName The name of the service. (required)
     * @param grouping The grouping for configurations. (optional)
     * @return ApiResponse&lt;AddsConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Active Directory Domain Controller service configuration.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddsConfiguration> configurationListAddsConfigurationsWithHttpInfo(String serviceName, String grouping) throws ApiException {
        okhttp3.Call localVarCall = configurationListAddsConfigurationsValidateBeforeCall(serviceName, grouping, null);
        Type localVarReturnType = new TypeToken<AddsConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the service configurations.
     * @param serviceName The name of the service. (required)
     * @param grouping The grouping for configurations. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Active Directory Domain Controller service configuration.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configurationListAddsConfigurationsAsync(String serviceName, String grouping, final ApiCallback<AddsConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = configurationListAddsConfigurationsValidateBeforeCall(serviceName, grouping, _callback);
        Type localVarReturnType = new TypeToken<AddsConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dimensionsListAddsDimensions
     * @param serviceName The name of the service. (required)
     * @param dimension The dimension type. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of dimensions for a server.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dimensionsListAddsDimensionsCall(String serviceName, String dimension, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}/dimensions/{dimension}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "dimension" + "}", localVarApiClient.escapeString(dimension.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dimensionsListAddsDimensionsValidateBeforeCall(String serviceName, String dimension, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling dimensionsListAddsDimensions(Async)");
        }

        // verify the required parameter 'dimension' is set
        if (dimension == null) {
            throw new ApiException("Missing the required parameter 'dimension' when calling dimensionsListAddsDimensions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dimensionsListAddsDimensions(Async)");
        }

        return dimensionsListAddsDimensionsCall(serviceName, dimension, apiVersion, _callback);

    }

    /**
     * 
     * Gets the dimensions for a given dimension type in a server.
     * @param serviceName The name of the service. (required)
     * @param dimension The dimension type. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return Dimensions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of dimensions for a server.  </td><td>  -  </td></tr>
     </table>
     */
    public Dimensions dimensionsListAddsDimensions(String serviceName, String dimension, String apiVersion) throws ApiException {
        ApiResponse<Dimensions> localVarResp = dimensionsListAddsDimensionsWithHttpInfo(serviceName, dimension, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the dimensions for a given dimension type in a server.
     * @param serviceName The name of the service. (required)
     * @param dimension The dimension type. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Dimensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of dimensions for a server.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dimensions> dimensionsListAddsDimensionsWithHttpInfo(String serviceName, String dimension, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dimensionsListAddsDimensionsValidateBeforeCall(serviceName, dimension, apiVersion, null);
        Type localVarReturnType = new TypeToken<Dimensions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the dimensions for a given dimension type in a server.
     * @param serviceName The name of the service. (required)
     * @param dimension The dimension type. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of dimensions for a server.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dimensionsListAddsDimensionsAsync(String serviceName, String dimension, String apiVersion, final ApiCallback<Dimensions> _callback) throws ApiException {

        okhttp3.Call localVarCall = dimensionsListAddsDimensionsValidateBeforeCall(serviceName, dimension, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Dimensions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
