/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The blob uri pointing to Risky IP Report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RiskyIPBlobUri {
  public static final String SERIALIZED_NAME_BLOB_CREATE_DATE_TIME = "blobCreateDateTime";
  @SerializedName(SERIALIZED_NAME_BLOB_CREATE_DATE_TIME)
  private OffsetDateTime blobCreateDateTime;

  public static final String SERIALIZED_NAME_JOB_COMPLETION_TIME = "jobCompletionTime";
  @SerializedName(SERIALIZED_NAME_JOB_COMPLETION_TIME)
  private OffsetDateTime jobCompletionTime;

  public static final String SERIALIZED_NAME_RESULT_SAS_URI = "resultSasUri";
  @SerializedName(SERIALIZED_NAME_RESULT_SAS_URI)
  private String resultSasUri;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public RiskyIPBlobUri() {
  }

  public RiskyIPBlobUri blobCreateDateTime(OffsetDateTime blobCreateDateTime) {
    this.blobCreateDateTime = blobCreateDateTime;
    return this;
  }

  /**
   * Time at which the new Risky IP report was requested.
   * @return blobCreateDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBlobCreateDateTime() {
    return blobCreateDateTime;
  }

  public void setBlobCreateDateTime(OffsetDateTime blobCreateDateTime) {
    this.blobCreateDateTime = blobCreateDateTime;
  }


  public RiskyIPBlobUri jobCompletionTime(OffsetDateTime jobCompletionTime) {
    this.jobCompletionTime = jobCompletionTime;
    return this;
  }

  /**
   * Time at which the blob creation job for the new Risky IP report was completed.
   * @return jobCompletionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getJobCompletionTime() {
    return jobCompletionTime;
  }

  public void setJobCompletionTime(OffsetDateTime jobCompletionTime) {
    this.jobCompletionTime = jobCompletionTime;
  }


  public RiskyIPBlobUri resultSasUri(String resultSasUri) {
    this.resultSasUri = resultSasUri;
    return this;
  }

  /**
   * The blob uri for the report.
   * @return resultSasUri
   */
  @javax.annotation.Nullable
  public String getResultSasUri() {
    return resultSasUri;
  }

  public void setResultSasUri(String resultSasUri) {
    this.resultSasUri = resultSasUri;
  }


  public RiskyIPBlobUri serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * The service id for whom the report belongs to.
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public RiskyIPBlobUri status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the Risky IP report generation.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public RiskyIPBlobUri tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The tenant id for whom the report belongs to.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskyIPBlobUri riskyIPBlobUri = (RiskyIPBlobUri) o;
    return Objects.equals(this.blobCreateDateTime, riskyIPBlobUri.blobCreateDateTime) &&
        Objects.equals(this.jobCompletionTime, riskyIPBlobUri.jobCompletionTime) &&
        Objects.equals(this.resultSasUri, riskyIPBlobUri.resultSasUri) &&
        Objects.equals(this.serviceId, riskyIPBlobUri.serviceId) &&
        Objects.equals(this.status, riskyIPBlobUri.status) &&
        Objects.equals(this.tenantId, riskyIPBlobUri.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blobCreateDateTime, jobCompletionTime, resultSasUri, serviceId, status, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskyIPBlobUri {\n");
    sb.append("    blobCreateDateTime: ").append(toIndentedString(blobCreateDateTime)).append("\n");
    sb.append("    jobCompletionTime: ").append(toIndentedString(jobCompletionTime)).append("\n");
    sb.append("    resultSasUri: ").append(toIndentedString(resultSasUri)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blobCreateDateTime");
    openapiFields.add("jobCompletionTime");
    openapiFields.add("resultSasUri");
    openapiFields.add("serviceId");
    openapiFields.add("status");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RiskyIPBlobUri
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RiskyIPBlobUri.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RiskyIPBlobUri is not found in the empty JSON string", RiskyIPBlobUri.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RiskyIPBlobUri.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RiskyIPBlobUri` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("resultSasUri") != null && !jsonObj.get("resultSasUri").isJsonNull()) && !jsonObj.get("resultSasUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultSasUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultSasUri").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RiskyIPBlobUri.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RiskyIPBlobUri' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RiskyIPBlobUri> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RiskyIPBlobUri.class));

       return (TypeAdapter<T>) new TypeAdapter<RiskyIPBlobUri>() {
           @Override
           public void write(JsonWriter out, RiskyIPBlobUri value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RiskyIPBlobUri read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RiskyIPBlobUri given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RiskyIPBlobUri
   * @throws IOException if the JSON string is invalid with respect to RiskyIPBlobUri
   */
  public static RiskyIPBlobUri fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RiskyIPBlobUri.class);
  }

  /**
   * Convert an instance of RiskyIPBlobUri to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

