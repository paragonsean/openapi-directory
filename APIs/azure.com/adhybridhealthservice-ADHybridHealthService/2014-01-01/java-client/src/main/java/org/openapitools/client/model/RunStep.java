/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The run step for a run profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunStep {
  public static final String SERIALIZED_NAME_BATCH_SIZE = "batchSize";
  @SerializedName(SERIALIZED_NAME_BATCH_SIZE)
  private Integer batchSize;

  public static final String SERIALIZED_NAME_OBJECT_DELETE_LIMIT = "objectDeleteLimit";
  @SerializedName(SERIALIZED_NAME_OBJECT_DELETE_LIMIT)
  private Integer objectDeleteLimit;

  public static final String SERIALIZED_NAME_OBJECT_PROCESS_LIMIT = "objectProcessLimit";
  @SerializedName(SERIALIZED_NAME_OBJECT_PROCESS_LIMIT)
  private Integer objectProcessLimit;

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private Integer operationType;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_PARTITION_ID = "partitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private String partitionId;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public RunStep() {
  }

  public RunStep batchSize(Integer batchSize) {
    this.batchSize = batchSize;
    return this;
  }

  /**
   * The batch size used by the run step.
   * @return batchSize
   */
  @javax.annotation.Nullable
  public Integer getBatchSize() {
    return batchSize;
  }

  public void setBatchSize(Integer batchSize) {
    this.batchSize = batchSize;
  }


  public RunStep objectDeleteLimit(Integer objectDeleteLimit) {
    this.objectDeleteLimit = objectDeleteLimit;
    return this;
  }

  /**
   * The object deletion limit.
   * @return objectDeleteLimit
   */
  @javax.annotation.Nullable
  public Integer getObjectDeleteLimit() {
    return objectDeleteLimit;
  }

  public void setObjectDeleteLimit(Integer objectDeleteLimit) {
    this.objectDeleteLimit = objectDeleteLimit;
  }


  public RunStep objectProcessLimit(Integer objectProcessLimit) {
    this.objectProcessLimit = objectProcessLimit;
    return this;
  }

  /**
   * The object processing limit.
   * @return objectProcessLimit
   */
  @javax.annotation.Nullable
  public Integer getObjectProcessLimit() {
    return objectProcessLimit;
  }

  public void setObjectProcessLimit(Integer objectProcessLimit) {
    this.objectProcessLimit = objectProcessLimit;
  }


  public RunStep operationType(Integer operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * The run step operation types.
   * @return operationType
   */
  @javax.annotation.Nullable
  public Integer getOperationType() {
    return operationType;
  }

  public void setOperationType(Integer operationType) {
    this.operationType = operationType;
  }


  public RunStep pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * The page size of the run step.
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public RunStep partitionId(String partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * The Id of the partition that a current run step operation is executing.
   * @return partitionId
   */
  @javax.annotation.Nullable
  public String getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(String partitionId) {
    this.partitionId = partitionId;
  }


  public RunStep timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * The operation timeout.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunStep runStep = (RunStep) o;
    return Objects.equals(this.batchSize, runStep.batchSize) &&
        Objects.equals(this.objectDeleteLimit, runStep.objectDeleteLimit) &&
        Objects.equals(this.objectProcessLimit, runStep.objectProcessLimit) &&
        Objects.equals(this.operationType, runStep.operationType) &&
        Objects.equals(this.pageSize, runStep.pageSize) &&
        Objects.equals(this.partitionId, runStep.partitionId) &&
        Objects.equals(this.timeout, runStep.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchSize, objectDeleteLimit, objectProcessLimit, operationType, pageSize, partitionId, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunStep {\n");
    sb.append("    batchSize: ").append(toIndentedString(batchSize)).append("\n");
    sb.append("    objectDeleteLimit: ").append(toIndentedString(objectDeleteLimit)).append("\n");
    sb.append("    objectProcessLimit: ").append(toIndentedString(objectProcessLimit)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batchSize");
    openapiFields.add("objectDeleteLimit");
    openapiFields.add("objectProcessLimit");
    openapiFields.add("operationType");
    openapiFields.add("pageSize");
    openapiFields.add("partitionId");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunStep
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunStep is not found in the empty JSON string", RunStep.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunStep` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("partitionId") != null && !jsonObj.get("partitionId").isJsonNull()) && !jsonObj.get("partitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partitionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunStep.class));

       return (TypeAdapter<T>) new TypeAdapter<RunStep>() {
           @Override
           public void write(JsonWriter out, RunStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunStep read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunStep given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunStep
   * @throws IOException if the JSON string is invalid with respect to RunStep
   */
  public static RunStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunStep.class);
  }

  /**
   * Convert an instance of RunStep to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

