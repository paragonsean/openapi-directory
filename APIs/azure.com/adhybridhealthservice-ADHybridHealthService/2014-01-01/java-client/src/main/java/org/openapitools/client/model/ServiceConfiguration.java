/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The service configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceConfiguration {
  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  public static final String SERIALIZED_NAME_SERVICE_TYPE = "serviceType";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE)
  private Integer serviceType;

  public static final String SERIALIZED_NAME_SQL_DATABASE_NAME = "sqlDatabaseName";
  @SerializedName(SERIALIZED_NAME_SQL_DATABASE_NAME)
  private String sqlDatabaseName;

  public static final String SERIALIZED_NAME_SQL_DATABASE_SIZE = "sqlDatabaseSize";
  @SerializedName(SERIALIZED_NAME_SQL_DATABASE_SIZE)
  private Integer sqlDatabaseSize;

  public static final String SERIALIZED_NAME_SQL_EDITION = "sqlEdition";
  @SerializedName(SERIALIZED_NAME_SQL_EDITION)
  private String sqlEdition;

  public static final String SERIALIZED_NAME_SQL_INSTANCE = "sqlInstance";
  @SerializedName(SERIALIZED_NAME_SQL_INSTANCE)
  private String sqlInstance;

  public static final String SERIALIZED_NAME_SQL_SERVER = "sqlServer";
  @SerializedName(SERIALIZED_NAME_SQL_SERVER)
  private String sqlServer;

  public static final String SERIALIZED_NAME_SQL_VERSION = "sqlVersion";
  @SerializedName(SERIALIZED_NAME_SQL_VERSION)
  private String sqlVersion;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ServiceConfiguration() {
  }

  public ServiceConfiguration serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * The service account.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  public ServiceConfiguration serviceType(Integer serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  /**
   * The service type of the server.
   * @return serviceType
   */
  @javax.annotation.Nullable
  public Integer getServiceType() {
    return serviceType;
  }

  public void setServiceType(Integer serviceType) {
    this.serviceType = serviceType;
  }


  public ServiceConfiguration sqlDatabaseName(String sqlDatabaseName) {
    this.sqlDatabaseName = sqlDatabaseName;
    return this;
  }

  /**
   * The SQL database.
   * @return sqlDatabaseName
   */
  @javax.annotation.Nullable
  public String getSqlDatabaseName() {
    return sqlDatabaseName;
  }

  public void setSqlDatabaseName(String sqlDatabaseName) {
    this.sqlDatabaseName = sqlDatabaseName;
  }


  public ServiceConfiguration sqlDatabaseSize(Integer sqlDatabaseSize) {
    this.sqlDatabaseSize = sqlDatabaseSize;
    return this;
  }

  /**
   * The SQL database size.
   * @return sqlDatabaseSize
   */
  @javax.annotation.Nullable
  public Integer getSqlDatabaseSize() {
    return sqlDatabaseSize;
  }

  public void setSqlDatabaseSize(Integer sqlDatabaseSize) {
    this.sqlDatabaseSize = sqlDatabaseSize;
  }


  public ServiceConfiguration sqlEdition(String sqlEdition) {
    this.sqlEdition = sqlEdition;
    return this;
  }

  /**
   * The SQL edition
   * @return sqlEdition
   */
  @javax.annotation.Nullable
  public String getSqlEdition() {
    return sqlEdition;
  }

  public void setSqlEdition(String sqlEdition) {
    this.sqlEdition = sqlEdition;
  }


  public ServiceConfiguration sqlInstance(String sqlInstance) {
    this.sqlInstance = sqlInstance;
    return this;
  }

  /**
   * The SQL instance details.
   * @return sqlInstance
   */
  @javax.annotation.Nullable
  public String getSqlInstance() {
    return sqlInstance;
  }

  public void setSqlInstance(String sqlInstance) {
    this.sqlInstance = sqlInstance;
  }


  public ServiceConfiguration sqlServer(String sqlServer) {
    this.sqlServer = sqlServer;
    return this;
  }

  /**
   * The SQL server information.
   * @return sqlServer
   */
  @javax.annotation.Nullable
  public String getSqlServer() {
    return sqlServer;
  }

  public void setSqlServer(String sqlServer) {
    this.sqlServer = sqlServer;
  }


  public ServiceConfiguration sqlVersion(String sqlVersion) {
    this.sqlVersion = sqlVersion;
    return this;
  }

  /**
   * The SQL version.
   * @return sqlVersion
   */
  @javax.annotation.Nullable
  public String getSqlVersion() {
    return sqlVersion;
  }

  public void setSqlVersion(String sqlVersion) {
    this.sqlVersion = sqlVersion;
  }


  public ServiceConfiguration version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the sync service.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceConfiguration serviceConfiguration = (ServiceConfiguration) o;
    return Objects.equals(this.serviceAccount, serviceConfiguration.serviceAccount) &&
        Objects.equals(this.serviceType, serviceConfiguration.serviceType) &&
        Objects.equals(this.sqlDatabaseName, serviceConfiguration.sqlDatabaseName) &&
        Objects.equals(this.sqlDatabaseSize, serviceConfiguration.sqlDatabaseSize) &&
        Objects.equals(this.sqlEdition, serviceConfiguration.sqlEdition) &&
        Objects.equals(this.sqlInstance, serviceConfiguration.sqlInstance) &&
        Objects.equals(this.sqlServer, serviceConfiguration.sqlServer) &&
        Objects.equals(this.sqlVersion, serviceConfiguration.sqlVersion) &&
        Objects.equals(this.version, serviceConfiguration.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceAccount, serviceType, sqlDatabaseName, sqlDatabaseSize, sqlEdition, sqlInstance, sqlServer, sqlVersion, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceConfiguration {\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("    sqlDatabaseName: ").append(toIndentedString(sqlDatabaseName)).append("\n");
    sb.append("    sqlDatabaseSize: ").append(toIndentedString(sqlDatabaseSize)).append("\n");
    sb.append("    sqlEdition: ").append(toIndentedString(sqlEdition)).append("\n");
    sb.append("    sqlInstance: ").append(toIndentedString(sqlInstance)).append("\n");
    sb.append("    sqlServer: ").append(toIndentedString(sqlServer)).append("\n");
    sb.append("    sqlVersion: ").append(toIndentedString(sqlVersion)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("serviceAccount");
    openapiFields.add("serviceType");
    openapiFields.add("sqlDatabaseName");
    openapiFields.add("sqlDatabaseSize");
    openapiFields.add("sqlEdition");
    openapiFields.add("sqlInstance");
    openapiFields.add("sqlServer");
    openapiFields.add("sqlVersion");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceConfiguration is not found in the empty JSON string", ServiceConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("sqlDatabaseName") != null && !jsonObj.get("sqlDatabaseName").isJsonNull()) && !jsonObj.get("sqlDatabaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlDatabaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlDatabaseName").toString()));
      }
      if ((jsonObj.get("sqlEdition") != null && !jsonObj.get("sqlEdition").isJsonNull()) && !jsonObj.get("sqlEdition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlEdition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlEdition").toString()));
      }
      if ((jsonObj.get("sqlInstance") != null && !jsonObj.get("sqlInstance").isJsonNull()) && !jsonObj.get("sqlInstance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlInstance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlInstance").toString()));
      }
      if ((jsonObj.get("sqlServer") != null && !jsonObj.get("sqlServer").isJsonNull()) && !jsonObj.get("sqlServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlServer").toString()));
      }
      if ((jsonObj.get("sqlVersion") != null && !jsonObj.get("sqlVersion").isJsonNull()) && !jsonObj.get("sqlVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlVersion").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceConfiguration>() {
           @Override
           public void write(JsonWriter out, ServiceConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceConfiguration
   * @throws IOException if the JSON string is invalid with respect to ServiceConfiguration
   */
  public static ServiceConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceConfiguration.class);
  }

  /**
   * Convert an instance of ServiceConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

