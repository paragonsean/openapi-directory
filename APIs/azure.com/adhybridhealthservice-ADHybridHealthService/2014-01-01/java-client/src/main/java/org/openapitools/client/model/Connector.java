/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Partition;
import org.openapitools.client.model.RunProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The connect details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Connector {
  public static final String SERIALIZED_NAME_ATTRIBUTES_INCLUDED = "attributesIncluded";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES_INCLUDED)
  private List<String> attributesIncluded = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLASSES_INCLUDED = "classesIncluded";
  @SerializedName(SERIALIZED_NAME_CLASSES_INCLUDED)
  private List<String> classesIncluded = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private String connectorId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTITIONS = "partitions";
  @SerializedName(SERIALIZED_NAME_PARTITIONS)
  private List<Partition> partitions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD_HASH_SYNC_CONFIGURATION = "passwordHashSyncConfiguration";
  @SerializedName(SERIALIZED_NAME_PASSWORD_HASH_SYNC_CONFIGURATION)
  private Object passwordHashSyncConfiguration;

  public static final String SERIALIZED_NAME_PASSWORD_MANAGEMENT_SETTINGS = "passwordManagementSettings";
  @SerializedName(SERIALIZED_NAME_PASSWORD_MANAGEMENT_SETTINGS)
  private Object passwordManagementSettings;

  public static final String SERIALIZED_NAME_RUN_PROFILES = "runProfiles";
  @SerializedName(SERIALIZED_NAME_RUN_PROFILES)
  private List<RunProfile> runProfiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEMA_XML = "schemaXml";
  @SerializedName(SERIALIZED_NAME_SCHEMA_XML)
  private String schemaXml;

  public static final String SERIALIZED_NAME_TIME_CREATED = "timeCreated";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private OffsetDateTime timeCreated;

  public static final String SERIALIZED_NAME_TIME_LAST_MODIFIED = "timeLastModified";
  @SerializedName(SERIALIZED_NAME_TIME_LAST_MODIFIED)
  private OffsetDateTime timeLastModified;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public Connector() {
  }

  public Connector attributesIncluded(List<String> attributesIncluded) {
    this.attributesIncluded = attributesIncluded;
    return this;
  }

  public Connector addAttributesIncludedItem(String attributesIncludedItem) {
    if (this.attributesIncluded == null) {
      this.attributesIncluded = new ArrayList<>();
    }
    this.attributesIncluded.add(attributesIncludedItem);
    return this;
  }

  /**
   * The attribute inclusion list of the connector.
   * @return attributesIncluded
   */
  @javax.annotation.Nullable
  public List<String> getAttributesIncluded() {
    return attributesIncluded;
  }

  public void setAttributesIncluded(List<String> attributesIncluded) {
    this.attributesIncluded = attributesIncluded;
  }


  public Connector classesIncluded(List<String> classesIncluded) {
    this.classesIncluded = classesIncluded;
    return this;
  }

  public Connector addClassesIncludedItem(String classesIncludedItem) {
    if (this.classesIncluded == null) {
      this.classesIncluded = new ArrayList<>();
    }
    this.classesIncluded.add(classesIncludedItem);
    return this;
  }

  /**
   * The class inclusion list of the connector.
   * @return classesIncluded
   */
  @javax.annotation.Nullable
  public List<String> getClassesIncluded() {
    return classesIncluded;
  }

  public void setClassesIncluded(List<String> classesIncluded) {
    this.classesIncluded = classesIncluded;
  }


  public Connector connectorId(String connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * The connector Id.
   * @return connectorId
   */
  @javax.annotation.Nullable
  public String getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }


  public Connector description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The connector description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Connector id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The connector Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Connector name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The connector name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Connector partitions(List<Partition> partitions) {
    this.partitions = partitions;
    return this;
  }

  public Connector addPartitionsItem(Partition partitionsItem) {
    if (this.partitions == null) {
      this.partitions = new ArrayList<>();
    }
    this.partitions.add(partitionsItem);
    return this;
  }

  /**
   * The partitions of the connector.
   * @return partitions
   */
  @javax.annotation.Nullable
  public List<Partition> getPartitions() {
    return partitions;
  }

  public void setPartitions(List<Partition> partitions) {
    this.partitions = partitions;
  }


  public Connector passwordHashSyncConfiguration(Object passwordHashSyncConfiguration) {
    this.passwordHashSyncConfiguration = passwordHashSyncConfiguration;
    return this;
  }

  /**
   * The password hash synchronization configuration of the connector.
   * @return passwordHashSyncConfiguration
   */
  @javax.annotation.Nullable
  public Object getPasswordHashSyncConfiguration() {
    return passwordHashSyncConfiguration;
  }

  public void setPasswordHashSyncConfiguration(Object passwordHashSyncConfiguration) {
    this.passwordHashSyncConfiguration = passwordHashSyncConfiguration;
  }


  public Connector passwordManagementSettings(Object passwordManagementSettings) {
    this.passwordManagementSettings = passwordManagementSettings;
    return this;
  }

  /**
   * The password management settings of the connector.
   * @return passwordManagementSettings
   */
  @javax.annotation.Nullable
  public Object getPasswordManagementSettings() {
    return passwordManagementSettings;
  }

  public void setPasswordManagementSettings(Object passwordManagementSettings) {
    this.passwordManagementSettings = passwordManagementSettings;
  }


  public Connector runProfiles(List<RunProfile> runProfiles) {
    this.runProfiles = runProfiles;
    return this;
  }

  public Connector addRunProfilesItem(RunProfile runProfilesItem) {
    if (this.runProfiles == null) {
      this.runProfiles = new ArrayList<>();
    }
    this.runProfiles.add(runProfilesItem);
    return this;
  }

  /**
   * The run profiles of the connector.
   * @return runProfiles
   */
  @javax.annotation.Nullable
  public List<RunProfile> getRunProfiles() {
    return runProfiles;
  }

  public void setRunProfiles(List<RunProfile> runProfiles) {
    this.runProfiles = runProfiles;
  }


  public Connector schemaXml(String schemaXml) {
    this.schemaXml = schemaXml;
    return this;
  }

  /**
   * The schema xml for the connector.
   * @return schemaXml
   */
  @javax.annotation.Nullable
  public String getSchemaXml() {
    return schemaXml;
  }

  public void setSchemaXml(String schemaXml) {
    this.schemaXml = schemaXml;
  }


  public Connector timeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
    return this;
  }

  /**
   * The date and time when this connector was created.
   * @return timeCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeCreated() {
    return timeCreated;
  }

  public void setTimeCreated(OffsetDateTime timeCreated) {
    this.timeCreated = timeCreated;
  }


  public Connector timeLastModified(OffsetDateTime timeLastModified) {
    this.timeLastModified = timeLastModified;
    return this;
  }

  /**
   * The date and time when this connector was last modified.
   * @return timeLastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeLastModified() {
    return timeLastModified;
  }

  public void setTimeLastModified(OffsetDateTime timeLastModified) {
    this.timeLastModified = timeLastModified;
  }


  public Connector type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The connector type.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Connector version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * The connector version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connector connector = (Connector) o;
    return Objects.equals(this.attributesIncluded, connector.attributesIncluded) &&
        Objects.equals(this.classesIncluded, connector.classesIncluded) &&
        Objects.equals(this.connectorId, connector.connectorId) &&
        Objects.equals(this.description, connector.description) &&
        Objects.equals(this.id, connector.id) &&
        Objects.equals(this.name, connector.name) &&
        Objects.equals(this.partitions, connector.partitions) &&
        Objects.equals(this.passwordHashSyncConfiguration, connector.passwordHashSyncConfiguration) &&
        Objects.equals(this.passwordManagementSettings, connector.passwordManagementSettings) &&
        Objects.equals(this.runProfiles, connector.runProfiles) &&
        Objects.equals(this.schemaXml, connector.schemaXml) &&
        Objects.equals(this.timeCreated, connector.timeCreated) &&
        Objects.equals(this.timeLastModified, connector.timeLastModified) &&
        Objects.equals(this.type, connector.type) &&
        Objects.equals(this.version, connector.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributesIncluded, classesIncluded, connectorId, description, id, name, partitions, passwordHashSyncConfiguration, passwordManagementSettings, runProfiles, schemaXml, timeCreated, timeLastModified, type, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connector {\n");
    sb.append("    attributesIncluded: ").append(toIndentedString(attributesIncluded)).append("\n");
    sb.append("    classesIncluded: ").append(toIndentedString(classesIncluded)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partitions: ").append(toIndentedString(partitions)).append("\n");
    sb.append("    passwordHashSyncConfiguration: ").append(toIndentedString(passwordHashSyncConfiguration)).append("\n");
    sb.append("    passwordManagementSettings: ").append(toIndentedString(passwordManagementSettings)).append("\n");
    sb.append("    runProfiles: ").append(toIndentedString(runProfiles)).append("\n");
    sb.append("    schemaXml: ").append(toIndentedString(schemaXml)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    timeLastModified: ").append(toIndentedString(timeLastModified)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributesIncluded");
    openapiFields.add("classesIncluded");
    openapiFields.add("connectorId");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("partitions");
    openapiFields.add("passwordHashSyncConfiguration");
    openapiFields.add("passwordManagementSettings");
    openapiFields.add("runProfiles");
    openapiFields.add("schemaXml");
    openapiFields.add("timeCreated");
    openapiFields.add("timeLastModified");
    openapiFields.add("type");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Connector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connector is not found in the empty JSON string", Connector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("attributesIncluded") != null && !jsonObj.get("attributesIncluded").isJsonNull() && !jsonObj.get("attributesIncluded").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributesIncluded` to be an array in the JSON string but got `%s`", jsonObj.get("attributesIncluded").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("classesIncluded") != null && !jsonObj.get("classesIncluded").isJsonNull() && !jsonObj.get("classesIncluded").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `classesIncluded` to be an array in the JSON string but got `%s`", jsonObj.get("classesIncluded").toString()));
      }
      if ((jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) && !jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("partitions") != null && !jsonObj.get("partitions").isJsonNull()) {
        JsonArray jsonArraypartitions = jsonObj.getAsJsonArray("partitions");
        if (jsonArraypartitions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partitions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partitions` to be an array in the JSON string but got `%s`", jsonObj.get("partitions").toString()));
          }

          // validate the optional field `partitions` (array)
          for (int i = 0; i < jsonArraypartitions.size(); i++) {
            Partition.validateJsonElement(jsonArraypartitions.get(i));
          };
        }
      }
      if (jsonObj.get("runProfiles") != null && !jsonObj.get("runProfiles").isJsonNull()) {
        JsonArray jsonArrayrunProfiles = jsonObj.getAsJsonArray("runProfiles");
        if (jsonArrayrunProfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("runProfiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `runProfiles` to be an array in the JSON string but got `%s`", jsonObj.get("runProfiles").toString()));
          }

          // validate the optional field `runProfiles` (array)
          for (int i = 0; i < jsonArrayrunProfiles.size(); i++) {
            RunProfile.validateJsonElement(jsonArrayrunProfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("schemaXml") != null && !jsonObj.get("schemaXml").isJsonNull()) && !jsonObj.get("schemaXml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaXml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaXml").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connector.class));

       return (TypeAdapter<T>) new TypeAdapter<Connector>() {
           @Override
           public void write(JsonWriter out, Connector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Connector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Connector
   * @throws IOException if the JSON string is invalid with respect to Connector
   */
  public static Connector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connector.class);
  }

  /**
   * Convert an instance of Connector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

