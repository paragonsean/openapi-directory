/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.AdditionalInformation;
import org.openapitools.client.model.HelpLink;
import org.openapitools.client.model.Item;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The alert details indicating an issue with service or server.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Alert {
  public static final String SERIALIZED_NAME_ACTIVE_ALERT_PROPERTIES = "activeAlertProperties";
  @SerializedName(SERIALIZED_NAME_ACTIVE_ALERT_PROPERTIES)
  private List<Item> activeAlertProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private List<AdditionalInformation> additionalInformation = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALERT_ID = "alertId";
  @SerializedName(SERIALIZED_NAME_ALERT_ID)
  private UUID alertId;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  /**
   * The alert level which indicates the severity of the alert.
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    WARNING("Warning"),
    
    ERROR("Error"),
    
    PRE_WARNING("PreWarning");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private LevelEnum level;

  public static final String SERIALIZED_NAME_MONITOR_ROLE_TYPE = "monitorRoleType";
  @SerializedName(SERIALIZED_NAME_MONITOR_ROLE_TYPE)
  private String monitorRoleType;

  public static final String SERIALIZED_NAME_RELATED_LINKS = "relatedLinks";
  @SerializedName(SERIALIZED_NAME_RELATED_LINKS)
  private List<HelpLink> relatedLinks = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMEDIATION = "remediation";
  @SerializedName(SERIALIZED_NAME_REMEDIATION)
  private String remediation;

  public static final String SERIALIZED_NAME_RESOLVED_ALERT_PROPERTIES = "resolvedAlertProperties";
  @SerializedName(SERIALIZED_NAME_RESOLVED_ALERT_PROPERTIES)
  private List<Item> resolvedAlertProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOLVED_DATE = "resolvedDate";
  @SerializedName(SERIALIZED_NAME_RESOLVED_DATE)
  private OffsetDateTime resolvedDate;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private UUID serviceId;

  public static final String SERIALIZED_NAME_SERVICE_MEMBER_ID = "serviceMemberId";
  @SerializedName(SERIALIZED_NAME_SERVICE_MEMBER_ID)
  private UUID serviceMemberId;

  public static final String SERIALIZED_NAME_SHORT_NAME = "shortName";
  @SerializedName(SERIALIZED_NAME_SHORT_NAME)
  private String shortName;

  /**
   * The alert state which can be either active or resolved with multiple resolution types.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("Active"),
    
    RESOLVED_BY_POSITIVE_RESULT("ResolvedByPositiveResult"),
    
    RESOLVED_MANUALLY("ResolvedManually"),
    
    RESOLVED_BY_TIMER("ResolvedByTimer"),
    
    RESOLVED_BY_STATE_CHANGE("ResolvedByStateChange");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private UUID tenantId;

  public Alert() {
  }

  public Alert activeAlertProperties(List<Item> activeAlertProperties) {
    this.activeAlertProperties = activeAlertProperties;
    return this;
  }

  public Alert addActiveAlertPropertiesItem(Item activeAlertPropertiesItem) {
    if (this.activeAlertProperties == null) {
      this.activeAlertProperties = new ArrayList<>();
    }
    this.activeAlertProperties.add(activeAlertPropertiesItem);
    return this;
  }

  /**
   * The active alert properties.
   * @return activeAlertProperties
   */
  @javax.annotation.Nullable
  public List<Item> getActiveAlertProperties() {
    return activeAlertProperties;
  }

  public void setActiveAlertProperties(List<Item> activeAlertProperties) {
    this.activeAlertProperties = activeAlertProperties;
  }


  public Alert additionalInformation(List<AdditionalInformation> additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  public Alert addAdditionalInformationItem(AdditionalInformation additionalInformationItem) {
    if (this.additionalInformation == null) {
      this.additionalInformation = new ArrayList<>();
    }
    this.additionalInformation.add(additionalInformationItem);
    return this;
  }

  /**
   * Additional information related to the alert.
   * @return additionalInformation
   */
  @javax.annotation.Nullable
  public List<AdditionalInformation> getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(List<AdditionalInformation> additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public Alert alertId(UUID alertId) {
    this.alertId = alertId;
    return this;
  }

  /**
   * The alert Id.
   * @return alertId
   */
  @javax.annotation.Nullable
  public UUID getAlertId() {
    return alertId;
  }

  public void setAlertId(UUID alertId) {
    this.alertId = alertId;
  }


  public Alert createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date and time,in UTC,when the alert was created.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public Alert description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The alert description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Alert displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name for the alert.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Alert lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The date and time, in UTC, when the alert was last updated.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public Alert level(LevelEnum level) {
    this.level = level;
    return this;
  }

  /**
   * The alert level which indicates the severity of the alert.
   * @return level
   */
  @javax.annotation.Nullable
  public LevelEnum getLevel() {
    return level;
  }

  public void setLevel(LevelEnum level) {
    this.level = level;
  }


  public Alert monitorRoleType(String monitorRoleType) {
    this.monitorRoleType = monitorRoleType;
    return this;
  }

  /**
   * The monitoring role type for which the alert was raised.
   * @return monitorRoleType
   */
  @javax.annotation.Nullable
  public String getMonitorRoleType() {
    return monitorRoleType;
  }

  public void setMonitorRoleType(String monitorRoleType) {
    this.monitorRoleType = monitorRoleType;
  }


  public Alert relatedLinks(List<HelpLink> relatedLinks) {
    this.relatedLinks = relatedLinks;
    return this;
  }

  public Alert addRelatedLinksItem(HelpLink relatedLinksItem) {
    if (this.relatedLinks == null) {
      this.relatedLinks = new ArrayList<>();
    }
    this.relatedLinks.add(relatedLinksItem);
    return this;
  }

  /**
   * The help links to get more information related to the alert.
   * @return relatedLinks
   */
  @javax.annotation.Nullable
  public List<HelpLink> getRelatedLinks() {
    return relatedLinks;
  }

  public void setRelatedLinks(List<HelpLink> relatedLinks) {
    this.relatedLinks = relatedLinks;
  }


  public Alert remediation(String remediation) {
    this.remediation = remediation;
    return this;
  }

  /**
   * The alert remediation.
   * @return remediation
   */
  @javax.annotation.Nullable
  public String getRemediation() {
    return remediation;
  }

  public void setRemediation(String remediation) {
    this.remediation = remediation;
  }


  public Alert resolvedAlertProperties(List<Item> resolvedAlertProperties) {
    this.resolvedAlertProperties = resolvedAlertProperties;
    return this;
  }

  public Alert addResolvedAlertPropertiesItem(Item resolvedAlertPropertiesItem) {
    if (this.resolvedAlertProperties == null) {
      this.resolvedAlertProperties = new ArrayList<>();
    }
    this.resolvedAlertProperties.add(resolvedAlertPropertiesItem);
    return this;
  }

  /**
   * The resolved alert properties.
   * @return resolvedAlertProperties
   */
  @javax.annotation.Nullable
  public List<Item> getResolvedAlertProperties() {
    return resolvedAlertProperties;
  }

  public void setResolvedAlertProperties(List<Item> resolvedAlertProperties) {
    this.resolvedAlertProperties = resolvedAlertProperties;
  }


  public Alert resolvedDate(OffsetDateTime resolvedDate) {
    this.resolvedDate = resolvedDate;
    return this;
  }

  /**
   * The date and time, in UTC, when the alert was resolved.
   * @return resolvedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getResolvedDate() {
    return resolvedDate;
  }

  public void setResolvedDate(OffsetDateTime resolvedDate) {
    this.resolvedDate = resolvedDate;
  }


  public Alert scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * The scope of the alert. Indicates if it is a service or a server related alert.
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public Alert serviceId(UUID serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * The service Id.
   * @return serviceId
   */
  @javax.annotation.Nullable
  public UUID getServiceId() {
    return serviceId;
  }

  public void setServiceId(UUID serviceId) {
    this.serviceId = serviceId;
  }


  public Alert serviceMemberId(UUID serviceMemberId) {
    this.serviceMemberId = serviceMemberId;
    return this;
  }

  /**
   * The server Id.
   * @return serviceMemberId
   */
  @javax.annotation.Nullable
  public UUID getServiceMemberId() {
    return serviceMemberId;
  }

  public void setServiceMemberId(UUID serviceMemberId) {
    this.serviceMemberId = serviceMemberId;
  }


  public Alert shortName(String shortName) {
    this.shortName = shortName;
    return this;
  }

  /**
   * The alert short name.
   * @return shortName
   */
  @javax.annotation.Nullable
  public String getShortName() {
    return shortName;
  }

  public void setShortName(String shortName) {
    this.shortName = shortName;
  }


  public Alert state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The alert state which can be either active or resolved with multiple resolution types.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Alert tenantId(UUID tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The tenant Id.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public UUID getTenantId() {
    return tenantId;
  }

  public void setTenantId(UUID tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alert alert = (Alert) o;
    return Objects.equals(this.activeAlertProperties, alert.activeAlertProperties) &&
        Objects.equals(this.additionalInformation, alert.additionalInformation) &&
        Objects.equals(this.alertId, alert.alertId) &&
        Objects.equals(this.createdDate, alert.createdDate) &&
        Objects.equals(this.description, alert.description) &&
        Objects.equals(this.displayName, alert.displayName) &&
        Objects.equals(this.lastUpdated, alert.lastUpdated) &&
        Objects.equals(this.level, alert.level) &&
        Objects.equals(this.monitorRoleType, alert.monitorRoleType) &&
        Objects.equals(this.relatedLinks, alert.relatedLinks) &&
        Objects.equals(this.remediation, alert.remediation) &&
        Objects.equals(this.resolvedAlertProperties, alert.resolvedAlertProperties) &&
        Objects.equals(this.resolvedDate, alert.resolvedDate) &&
        Objects.equals(this.scope, alert.scope) &&
        Objects.equals(this.serviceId, alert.serviceId) &&
        Objects.equals(this.serviceMemberId, alert.serviceMemberId) &&
        Objects.equals(this.shortName, alert.shortName) &&
        Objects.equals(this.state, alert.state) &&
        Objects.equals(this.tenantId, alert.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeAlertProperties, additionalInformation, alertId, createdDate, description, displayName, lastUpdated, level, monitorRoleType, relatedLinks, remediation, resolvedAlertProperties, resolvedDate, scope, serviceId, serviceMemberId, shortName, state, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alert {\n");
    sb.append("    activeAlertProperties: ").append(toIndentedString(activeAlertProperties)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    alertId: ").append(toIndentedString(alertId)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    monitorRoleType: ").append(toIndentedString(monitorRoleType)).append("\n");
    sb.append("    relatedLinks: ").append(toIndentedString(relatedLinks)).append("\n");
    sb.append("    remediation: ").append(toIndentedString(remediation)).append("\n");
    sb.append("    resolvedAlertProperties: ").append(toIndentedString(resolvedAlertProperties)).append("\n");
    sb.append("    resolvedDate: ").append(toIndentedString(resolvedDate)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceMemberId: ").append(toIndentedString(serviceMemberId)).append("\n");
    sb.append("    shortName: ").append(toIndentedString(shortName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeAlertProperties");
    openapiFields.add("additionalInformation");
    openapiFields.add("alertId");
    openapiFields.add("createdDate");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("lastUpdated");
    openapiFields.add("level");
    openapiFields.add("monitorRoleType");
    openapiFields.add("relatedLinks");
    openapiFields.add("remediation");
    openapiFields.add("resolvedAlertProperties");
    openapiFields.add("resolvedDate");
    openapiFields.add("scope");
    openapiFields.add("serviceId");
    openapiFields.add("serviceMemberId");
    openapiFields.add("shortName");
    openapiFields.add("state");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Alert
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Alert.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Alert is not found in the empty JSON string", Alert.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Alert.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Alert` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("activeAlertProperties") != null && !jsonObj.get("activeAlertProperties").isJsonNull()) {
        JsonArray jsonArrayactiveAlertProperties = jsonObj.getAsJsonArray("activeAlertProperties");
        if (jsonArrayactiveAlertProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activeAlertProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activeAlertProperties` to be an array in the JSON string but got `%s`", jsonObj.get("activeAlertProperties").toString()));
          }

          // validate the optional field `activeAlertProperties` (array)
          for (int i = 0; i < jsonArrayactiveAlertProperties.size(); i++) {
            Item.validateJsonElement(jsonArrayactiveAlertProperties.get(i));
          };
        }
      }
      if (jsonObj.get("additionalInformation") != null && !jsonObj.get("additionalInformation").isJsonNull()) {
        JsonArray jsonArrayadditionalInformation = jsonObj.getAsJsonArray("additionalInformation");
        if (jsonArrayadditionalInformation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("additionalInformation").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `additionalInformation` to be an array in the JSON string but got `%s`", jsonObj.get("additionalInformation").toString()));
          }

          // validate the optional field `additionalInformation` (array)
          for (int i = 0; i < jsonArrayadditionalInformation.size(); i++) {
            AdditionalInformation.validateJsonElement(jsonArrayadditionalInformation.get(i));
          };
        }
      }
      if ((jsonObj.get("alertId") != null && !jsonObj.get("alertId").isJsonNull()) && !jsonObj.get("alertId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      // validate the optional field `level`
      if (jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) {
        LevelEnum.validateJsonElement(jsonObj.get("level"));
      }
      if ((jsonObj.get("monitorRoleType") != null && !jsonObj.get("monitorRoleType").isJsonNull()) && !jsonObj.get("monitorRoleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitorRoleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitorRoleType").toString()));
      }
      if (jsonObj.get("relatedLinks") != null && !jsonObj.get("relatedLinks").isJsonNull()) {
        JsonArray jsonArrayrelatedLinks = jsonObj.getAsJsonArray("relatedLinks");
        if (jsonArrayrelatedLinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedLinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedLinks` to be an array in the JSON string but got `%s`", jsonObj.get("relatedLinks").toString()));
          }

          // validate the optional field `relatedLinks` (array)
          for (int i = 0; i < jsonArrayrelatedLinks.size(); i++) {
            HelpLink.validateJsonElement(jsonArrayrelatedLinks.get(i));
          };
        }
      }
      if ((jsonObj.get("remediation") != null && !jsonObj.get("remediation").isJsonNull()) && !jsonObj.get("remediation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remediation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remediation").toString()));
      }
      if (jsonObj.get("resolvedAlertProperties") != null && !jsonObj.get("resolvedAlertProperties").isJsonNull()) {
        JsonArray jsonArrayresolvedAlertProperties = jsonObj.getAsJsonArray("resolvedAlertProperties");
        if (jsonArrayresolvedAlertProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resolvedAlertProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resolvedAlertProperties` to be an array in the JSON string but got `%s`", jsonObj.get("resolvedAlertProperties").toString()));
          }

          // validate the optional field `resolvedAlertProperties` (array)
          for (int i = 0; i < jsonArrayresolvedAlertProperties.size(); i++) {
            Item.validateJsonElement(jsonArrayresolvedAlertProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) && !jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("serviceMemberId") != null && !jsonObj.get("serviceMemberId").isJsonNull()) && !jsonObj.get("serviceMemberId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceMemberId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceMemberId").toString()));
      }
      if ((jsonObj.get("shortName") != null && !jsonObj.get("shortName").isJsonNull()) && !jsonObj.get("shortName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shortName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shortName").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Alert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Alert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Alert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Alert.class));

       return (TypeAdapter<T>) new TypeAdapter<Alert>() {
           @Override
           public void write(JsonWriter out, Alert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Alert read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Alert given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Alert
   * @throws IOException if the JSON string is invalid with respect to Alert
   */
  public static Alert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Alert.class);
  }

  /**
   * Convert an instance of Alert to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

