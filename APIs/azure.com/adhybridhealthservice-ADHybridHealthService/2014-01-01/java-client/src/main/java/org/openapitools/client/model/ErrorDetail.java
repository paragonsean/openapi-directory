/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MergedExportError;
import org.openapitools.client.model.ObjectWithSyncError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The error details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErrorDetail {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_KB_URL = "kbUrl";
  @SerializedName(SERIALIZED_NAME_KB_URL)
  private String kbUrl;

  public static final String SERIALIZED_NAME_OBJECT_WITH_SYNC_ERROR = "objectWithSyncError";
  @SerializedName(SERIALIZED_NAME_OBJECT_WITH_SYNC_ERROR)
  private MergedExportError objectWithSyncError;

  public static final String SERIALIZED_NAME_OBJECTS_WITH_SYNC_ERROR = "objectsWithSyncError";
  @SerializedName(SERIALIZED_NAME_OBJECTS_WITH_SYNC_ERROR)
  private ObjectWithSyncError objectsWithSyncError;

  public ErrorDetail() {
  }

  public ErrorDetail description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The error description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ErrorDetail detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Additional details related to the error.
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public ErrorDetail kbUrl(String kbUrl) {
    this.kbUrl = kbUrl;
    return this;
  }

  /**
   * The knowledge base article url which contains more information about the error.
   * @return kbUrl
   */
  @javax.annotation.Nullable
  public String getKbUrl() {
    return kbUrl;
  }

  public void setKbUrl(String kbUrl) {
    this.kbUrl = kbUrl;
  }


  public ErrorDetail objectWithSyncError(MergedExportError objectWithSyncError) {
    this.objectWithSyncError = objectWithSyncError;
    return this;
  }

  /**
   * Get objectWithSyncError
   * @return objectWithSyncError
   */
  @javax.annotation.Nullable
  public MergedExportError getObjectWithSyncError() {
    return objectWithSyncError;
  }

  public void setObjectWithSyncError(MergedExportError objectWithSyncError) {
    this.objectWithSyncError = objectWithSyncError;
  }


  public ErrorDetail objectsWithSyncError(ObjectWithSyncError objectsWithSyncError) {
    this.objectsWithSyncError = objectsWithSyncError;
    return this;
  }

  /**
   * Get objectsWithSyncError
   * @return objectsWithSyncError
   */
  @javax.annotation.Nullable
  public ObjectWithSyncError getObjectsWithSyncError() {
    return objectsWithSyncError;
  }

  public void setObjectsWithSyncError(ObjectWithSyncError objectsWithSyncError) {
    this.objectsWithSyncError = objectsWithSyncError;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorDetail errorDetail = (ErrorDetail) o;
    return Objects.equals(this.description, errorDetail.description) &&
        Objects.equals(this.detail, errorDetail.detail) &&
        Objects.equals(this.kbUrl, errorDetail.kbUrl) &&
        Objects.equals(this.objectWithSyncError, errorDetail.objectWithSyncError) &&
        Objects.equals(this.objectsWithSyncError, errorDetail.objectsWithSyncError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, detail, kbUrl, objectWithSyncError, objectsWithSyncError);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorDetail {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    kbUrl: ").append(toIndentedString(kbUrl)).append("\n");
    sb.append("    objectWithSyncError: ").append(toIndentedString(objectWithSyncError)).append("\n");
    sb.append("    objectsWithSyncError: ").append(toIndentedString(objectsWithSyncError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("detail");
    openapiFields.add("kbUrl");
    openapiFields.add("objectWithSyncError");
    openapiFields.add("objectsWithSyncError");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErrorDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErrorDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorDetail is not found in the empty JSON string", ErrorDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErrorDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErrorDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if ((jsonObj.get("kbUrl") != null && !jsonObj.get("kbUrl").isJsonNull()) && !jsonObj.get("kbUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kbUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kbUrl").toString()));
      }
      // validate the optional field `objectWithSyncError`
      if (jsonObj.get("objectWithSyncError") != null && !jsonObj.get("objectWithSyncError").isJsonNull()) {
        MergedExportError.validateJsonElement(jsonObj.get("objectWithSyncError"));
      }
      // validate the optional field `objectsWithSyncError`
      if (jsonObj.get("objectsWithSyncError") != null && !jsonObj.get("objectsWithSyncError").isJsonNull()) {
        ObjectWithSyncError.validateJsonElement(jsonObj.get("objectsWithSyncError"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorDetail>() {
           @Override
           public void write(JsonWriter out, ErrorDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErrorDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErrorDetail
   * @throws IOException if the JSON string is invalid with respect to ErrorDetail
   */
  public static ErrorDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorDetail.class);
  }

  /**
   * Convert an instance of ErrorDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

