/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorCounts;
import org.openapitools.client.model.ExportStatuses;
import org.openapitools.client.model.Item;
import org.openapitools.client.model.Items;
import org.openapitools.client.model.MergedExportErrors;
import org.openapitools.client.model.Result;
import org.openapitools.client.model.ServiceProperties;
import org.openapitools.client.model.Services;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addsServicesDelete
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesDeleteCall(String serviceName, String apiVersion, Boolean confirm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confirm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("confirm", confirm));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesDeleteValidateBeforeCall(String serviceName, String apiVersion, Boolean confirm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesDelete(Async)");
        }

        return addsServicesDeleteCall(serviceName, apiVersion, confirm, _callback);

    }

    /**
     * 
     * Deletes an Active Directory Domain Service which is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the service. </td><td>  -  </td></tr>
     </table>
     */
    public void addsServicesDelete(String serviceName, String apiVersion, Boolean confirm) throws ApiException {
        addsServicesDeleteWithHttpInfo(serviceName, apiVersion, confirm);
    }

    /**
     * 
     * Deletes an Active Directory Domain Service which is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addsServicesDeleteWithHttpInfo(String serviceName, String apiVersion, Boolean confirm) throws ApiException {
        okhttp3.Call localVarCall = addsServicesDeleteValidateBeforeCall(serviceName, apiVersion, confirm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an Active Directory Domain Service which is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesDeleteAsync(String serviceName, String apiVersion, Boolean confirm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesDeleteValidateBeforeCall(serviceName, apiVersion, confirm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesGet
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Active Directory Domain Controller service as specified by the serviceName property.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesGetCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesGetValidateBeforeCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesGet(Async)");
        }

        return addsServicesGetCall(serviceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the details of an Active Directory Domain Service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ServiceProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Active Directory Domain Controller service as specified by the serviceName property.  </td><td>  -  </td></tr>
     </table>
     */
    public ServiceProperties addsServicesGet(String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ServiceProperties> localVarResp = addsServicesGetWithHttpInfo(serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of an Active Directory Domain Service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ServiceProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Active Directory Domain Controller service as specified by the serviceName property.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceProperties> addsServicesGetWithHttpInfo(String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = addsServicesGetValidateBeforeCall(serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of an Active Directory Domain Service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Active Directory Domain Controller service as specified by the serviceName property.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesGetAsync(String serviceName, String apiVersion, final ApiCallback<ServiceProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesGetValidateBeforeCall(serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesListPremiumServices
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of premium services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListPremiumServicesCall(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/premiumCheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (serviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceType", serviceType));
        }

        if (skipCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipCount", skipCount));
        }

        if (takeCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("takeCount", takeCount));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesListPremiumServicesValidateBeforeCall(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesListPremiumServices(Async)");
        }

        return addsServicesListPremiumServicesCall(apiVersion, $filter, serviceType, skipCount, takeCount, _callback);

    }

    /**
     * 
     * Gets the details of Active Directory Domain Services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return Services
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of premium services. </td><td>  -  </td></tr>
     </table>
     */
    public Services addsServicesListPremiumServices(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount) throws ApiException {
        ApiResponse<Services> localVarResp = addsServicesListPremiumServicesWithHttpInfo(apiVersion, $filter, serviceType, skipCount, takeCount);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of Active Directory Domain Services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return ApiResponse&lt;Services&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of premium services. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Services> addsServicesListPremiumServicesWithHttpInfo(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount) throws ApiException {
        okhttp3.Call localVarCall = addsServicesListPremiumServicesValidateBeforeCall(apiVersion, $filter, serviceType, skipCount, takeCount, null);
        Type localVarReturnType = new TypeToken<Services>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of Active Directory Domain Services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of premium services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesListPremiumServicesAsync(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback<Services> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesListPremiumServicesValidateBeforeCall(apiVersion, $filter, serviceType, skipCount, takeCount, _callback);
        Type localVarReturnType = new TypeToken<Services>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addsServicesUpdate
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesUpdateCall(String serviceName, String apiVersion, ServiceProperties service, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = service;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/addsservices/{serviceName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addsServicesUpdateValidateBeforeCall(String serviceName, String apiVersion, ServiceProperties service, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling addsServicesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling addsServicesUpdate(Async)");
        }

        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling addsServicesUpdate(Async)");
        }

        return addsServicesUpdateCall(serviceName, apiVersion, service, _callback);

    }

    /**
     * 
     * Updates an Active Directory Domain Service properties of an onboarded service.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @return ServiceProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated service. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceProperties addsServicesUpdate(String serviceName, String apiVersion, ServiceProperties service) throws ApiException {
        ApiResponse<ServiceProperties> localVarResp = addsServicesUpdateWithHttpInfo(serviceName, apiVersion, service);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an Active Directory Domain Service properties of an onboarded service.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @return ApiResponse&lt;ServiceProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceProperties> addsServicesUpdateWithHttpInfo(String serviceName, String apiVersion, ServiceProperties service) throws ApiException {
        okhttp3.Call localVarCall = addsServicesUpdateValidateBeforeCall(serviceName, apiVersion, service, null);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an Active Directory Domain Service properties of an onboarded service.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addsServicesUpdateAsync(String serviceName, String apiVersion, ServiceProperties service, final ApiCallback<ServiceProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = addsServicesUpdateValidateBeforeCall(serviceName, apiVersion, service, _callback);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesAdd
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAddCall(String apiVersion, ServiceProperties service, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = service;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesAddValidateBeforeCall(String apiVersion, ServiceProperties service, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesAdd(Async)");
        }

        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling servicesAdd(Async)");
        }

        return servicesAddCall(apiVersion, service, _callback);

    }

    /**
     * 
     * Onboards a service for a given tenant in Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @return ServiceProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceProperties servicesAdd(String apiVersion, ServiceProperties service) throws ApiException {
        ApiResponse<ServiceProperties> localVarResp = servicesAddWithHttpInfo(apiVersion, service);
        return localVarResp.getData();
    }

    /**
     * 
     * Onboards a service for a given tenant in Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @return ApiResponse&lt;ServiceProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceProperties> servicesAddWithHttpInfo(String apiVersion, ServiceProperties service) throws ApiException {
        okhttp3.Call localVarCall = servicesAddValidateBeforeCall(apiVersion, service, null);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Onboards a service for a given tenant in Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesAddAsync(String apiVersion, ServiceProperties service, final ApiCallback<ServiceProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesAddValidateBeforeCall(apiVersion, service, _callback);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesDelete
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDeleteCall(String serviceName, String apiVersion, Boolean confirm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (confirm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("confirm", confirm));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesDeleteValidateBeforeCall(String serviceName, String apiVersion, Boolean confirm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesDelete(Async)");
        }

        return servicesDeleteCall(serviceName, apiVersion, confirm, _callback);

    }

    /**
     * 
     * Deletes a service which is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the service. </td><td>  -  </td></tr>
     </table>
     */
    public void servicesDelete(String serviceName, String apiVersion, Boolean confirm) throws ApiException {
        servicesDeleteWithHttpInfo(serviceName, apiVersion, confirm);
    }

    /**
     * 
     * Deletes a service which is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesDeleteWithHttpInfo(String serviceName, String apiVersion, Boolean confirm) throws ApiException {
        okhttp3.Call localVarCall = servicesDeleteValidateBeforeCall(serviceName, apiVersion, confirm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a service which is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param confirm Indicates if the service will be permanently deleted or disabled. True indicates that the service will be permanently deleted and False indicates that the service will be marked disabled and then deleted after 30 days, if it is not re-registered. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDeleteAsync(String serviceName, String apiVersion, Boolean confirm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesDeleteValidateBeforeCall(serviceName, apiVersion, confirm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGet
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGetValidateBeforeCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesGet(Async)");
        }

        return servicesGetCall(serviceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the details of a service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ServiceProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of services. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceProperties servicesGet(String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ServiceProperties> localVarResp = servicesGetWithHttpInfo(serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of a service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ServiceProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of services. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceProperties> servicesGetWithHttpInfo(String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesGetValidateBeforeCall(serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of a service for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetAsync(String serviceName, String apiVersion, final ApiCallback<ServiceProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGetValidateBeforeCall(serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGetFeatureAvailibility
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates if the feature is available or not. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetFeatureAvailibilityCall(String serviceName, String featureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/checkServiceFeatureAvailibility/{featureName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "featureName" + "}", localVarApiClient.escapeString(featureName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGetFeatureAvailibilityValidateBeforeCall(String serviceName, String featureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesGetFeatureAvailibility(Async)");
        }

        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException("Missing the required parameter 'featureName' when calling servicesGetFeatureAvailibility(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesGetFeatureAvailibility(Async)");
        }

        return servicesGetFeatureAvailibilityCall(serviceName, featureName, apiVersion, _callback);

    }

    /**
     * 
     * Checks if the service has all the pre-requisites met to use a feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return Result
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates if the feature is available or not. </td><td>  -  </td></tr>
     </table>
     */
    public Result servicesGetFeatureAvailibility(String serviceName, String featureName, String apiVersion) throws ApiException {
        ApiResponse<Result> localVarResp = servicesGetFeatureAvailibilityWithHttpInfo(serviceName, featureName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks if the service has all the pre-requisites met to use a feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Result&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates if the feature is available or not. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Result> servicesGetFeatureAvailibilityWithHttpInfo(String serviceName, String featureName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesGetFeatureAvailibilityValidateBeforeCall(serviceName, featureName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks if the service has all the pre-requisites met to use a feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates if the feature is available or not. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetFeatureAvailibilityAsync(String serviceName, String featureName, String apiVersion, final ApiCallback<Result> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGetFeatureAvailibilityValidateBeforeCall(serviceName, featureName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGetTenantWhitelisting
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates if a tenant is whitelisted for a feature or not. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetTenantWhitelistingCall(String serviceName, String featureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/TenantWhitelisting/{featureName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "featureName" + "}", localVarApiClient.escapeString(featureName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGetTenantWhitelistingValidateBeforeCall(String serviceName, String featureName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesGetTenantWhitelisting(Async)");
        }

        // verify the required parameter 'featureName' is set
        if (featureName == null) {
            throw new ApiException("Missing the required parameter 'featureName' when calling servicesGetTenantWhitelisting(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesGetTenantWhitelisting(Async)");
        }

        return servicesGetTenantWhitelistingCall(serviceName, featureName, apiVersion, _callback);

    }

    /**
     * 
     * Checks if the tenant, to which a service is registered, is whitelisted to use a feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return Result
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates if a tenant is whitelisted for a feature or not. </td><td>  -  </td></tr>
     </table>
     */
    public Result servicesGetTenantWhitelisting(String serviceName, String featureName, String apiVersion) throws ApiException {
        ApiResponse<Result> localVarResp = servicesGetTenantWhitelistingWithHttpInfo(serviceName, featureName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks if the tenant, to which a service is registered, is whitelisted to use a feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Result&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates if a tenant is whitelisted for a feature or not. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Result> servicesGetTenantWhitelistingWithHttpInfo(String serviceName, String featureName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesGetTenantWhitelistingValidateBeforeCall(serviceName, featureName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks if the tenant, to which a service is registered, is whitelisted to use a feature.
     * @param serviceName The name of the service. (required)
     * @param featureName The name of the feature. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Indicates if a tenant is whitelisted for a feature or not. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetTenantWhitelistingAsync(String serviceName, String featureName, String apiVersion, final ApiCallback<Result> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGetTenantWhitelistingValidateBeforeCall(serviceName, featureName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Result>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesList
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListCall(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (serviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceType", serviceType));
        }

        if (skipCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipCount", skipCount));
        }

        if (takeCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("takeCount", takeCount));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListValidateBeforeCall(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesList(Async)");
        }

        return servicesListCall(apiVersion, $filter, serviceType, skipCount, takeCount, _callback);

    }

    /**
     * 
     * Gets the details of services, for a tenant, that are onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return Services
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of services. </td><td>  -  </td></tr>
     </table>
     */
    public Services servicesList(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount) throws ApiException {
        ApiResponse<Services> localVarResp = servicesListWithHttpInfo(apiVersion, $filter, serviceType, skipCount, takeCount);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of services, for a tenant, that are onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return ApiResponse&lt;Services&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of services. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Services> servicesListWithHttpInfo(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount) throws ApiException {
        okhttp3.Call localVarCall = servicesListValidateBeforeCall(apiVersion, $filter, serviceType, skipCount, takeCount, null);
        Type localVarReturnType = new TypeToken<Services>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of services, for a tenant, that are onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListAsync(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback<Services> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListValidateBeforeCall(apiVersion, $filter, serviceType, skipCount, takeCount, _callback);
        Type localVarReturnType = new TypeToken<Services>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListExportErrors
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListExportErrorsCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/exporterrors/counts"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListExportErrorsValidateBeforeCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesListExportErrors(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListExportErrors(Async)");
        }

        return servicesListExportErrorsCall(serviceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the count of latest AAD export errors.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ErrorCounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export errors. </td><td>  -  </td></tr>
     </table>
     */
    public ErrorCounts servicesListExportErrors(String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ErrorCounts> localVarResp = servicesListExportErrorsWithHttpInfo(serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the count of latest AAD export errors.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ErrorCounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ErrorCounts> servicesListExportErrorsWithHttpInfo(String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesListExportErrorsValidateBeforeCall(serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ErrorCounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the count of latest AAD export errors.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListExportErrorsAsync(String serviceName, String apiVersion, final ApiCallback<ErrorCounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListExportErrorsValidateBeforeCall(serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ErrorCounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListExportErrorsV2
     * @param serviceName The name of the service. (required)
     * @param errorBucket The error category to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of merged export errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListExportErrorsV2Call(String serviceName, String errorBucket, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/exporterrors/listV2"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (errorBucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("errorBucket", errorBucket));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListExportErrorsV2ValidateBeforeCall(String serviceName, String errorBucket, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesListExportErrorsV2(Async)");
        }

        // verify the required parameter 'errorBucket' is set
        if (errorBucket == null) {
            throw new ApiException("Missing the required parameter 'errorBucket' when calling servicesListExportErrorsV2(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListExportErrorsV2(Async)");
        }

        return servicesListExportErrorsV2Call(serviceName, errorBucket, apiVersion, _callback);

    }

    /**
     * 
     *  Gets the categorized export errors.
     * @param serviceName The name of the service. (required)
     * @param errorBucket The error category to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return MergedExportErrors
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of merged export errors. </td><td>  -  </td></tr>
     </table>
     */
    public MergedExportErrors servicesListExportErrorsV2(String serviceName, String errorBucket, String apiVersion) throws ApiException {
        ApiResponse<MergedExportErrors> localVarResp = servicesListExportErrorsV2WithHttpInfo(serviceName, errorBucket, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     *  Gets the categorized export errors.
     * @param serviceName The name of the service. (required)
     * @param errorBucket The error category to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;MergedExportErrors&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of merged export errors. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MergedExportErrors> servicesListExportErrorsV2WithHttpInfo(String serviceName, String errorBucket, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesListExportErrorsV2ValidateBeforeCall(serviceName, errorBucket, apiVersion, null);
        Type localVarReturnType = new TypeToken<MergedExportErrors>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Gets the categorized export errors.
     * @param serviceName The name of the service. (required)
     * @param errorBucket The error category to query for. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of merged export errors. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListExportErrorsV2Async(String serviceName, String errorBucket, String apiVersion, final ApiCallback<MergedExportErrors> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListExportErrorsV2ValidateBeforeCall(serviceName, errorBucket, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MergedExportErrors>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListExportStatus
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export statuses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListExportStatusCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/exportstatus"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListExportStatusValidateBeforeCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesListExportStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListExportStatus(Async)");
        }

        return servicesListExportStatusCall(serviceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the export status.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ExportStatuses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export statuses. </td><td>  -  </td></tr>
     </table>
     */
    public ExportStatuses servicesListExportStatus(String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ExportStatuses> localVarResp = servicesListExportStatusWithHttpInfo(serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the export status.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;ExportStatuses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export statuses. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportStatuses> servicesListExportStatusWithHttpInfo(String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesListExportStatusValidateBeforeCall(serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ExportStatuses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the export status.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of export statuses. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListExportStatusAsync(String serviceName, String apiVersion, final ApiCallback<ExportStatuses> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListExportStatusValidateBeforeCall(serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ExportStatuses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListMonitoringConfigurations
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of monitoring configurations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListMonitoringConfigurationsCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/monitoringconfigurations"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListMonitoringConfigurationsValidateBeforeCall(String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesListMonitoringConfigurations(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListMonitoringConfigurations(Async)");
        }

        return servicesListMonitoringConfigurationsCall(serviceName, apiVersion, _callback);

    }

    /**
     * 
     * Gets the service level monitoring configurations.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return Items
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of monitoring configurations. </td><td>  -  </td></tr>
     </table>
     */
    public Items servicesListMonitoringConfigurations(String serviceName, String apiVersion) throws ApiException {
        ApiResponse<Items> localVarResp = servicesListMonitoringConfigurationsWithHttpInfo(serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the service level monitoring configurations.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Items&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of monitoring configurations. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Items> servicesListMonitoringConfigurationsWithHttpInfo(String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesListMonitoringConfigurationsValidateBeforeCall(serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the service level monitoring configurations.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of monitoring configurations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListMonitoringConfigurationsAsync(String serviceName, String apiVersion, final ApiCallback<Items> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListMonitoringConfigurationsValidateBeforeCall(serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Items>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListPremium
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of premium services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListPremiumCall(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/premiumCheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (serviceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("serviceType", serviceType));
        }

        if (skipCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipCount", skipCount));
        }

        if (takeCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("takeCount", takeCount));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListPremiumValidateBeforeCall(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListPremium(Async)");
        }

        return servicesListPremiumCall(apiVersion, $filter, serviceType, skipCount, takeCount, _callback);

    }

    /**
     * 
     * Gets the details of services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return Services
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of premium services. </td><td>  -  </td></tr>
     </table>
     */
    public Services servicesListPremium(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount) throws ApiException {
        ApiResponse<Services> localVarResp = servicesListPremiumWithHttpInfo(apiVersion, $filter, serviceType, skipCount, takeCount);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the details of services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @return ApiResponse&lt;Services&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of premium services. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Services> servicesListPremiumWithHttpInfo(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount) throws ApiException {
        okhttp3.Call localVarCall = servicesListPremiumValidateBeforeCall(apiVersion, $filter, serviceType, skipCount, takeCount, null);
        Type localVarReturnType = new TypeToken<Services>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the details of services for a tenant having Azure AD Premium license and is onboarded to Azure Active Directory Connect Health.
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param $filter The service property filter to apply. (optional)
     * @param serviceType The service type for the services onboarded to Azure Active Directory Connect Health. Depending on whether the service is monitoring, ADFS, Sync or ADDS roles, the service type can either be AdFederationService or AadSyncService or AdDomainService. (optional)
     * @param skipCount The skip count, which specifies the number of elements that can be bypassed from a sequence and then return the remaining elements. (optional)
     * @param takeCount The take count , which specifies the number of elements that can be returned from a sequence. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of premium services. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListPremiumAsync(String apiVersion, String $filter, String serviceType, Integer skipCount, Integer takeCount, final ApiCallback<Services> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListPremiumValidateBeforeCall(apiVersion, $filter, serviceType, skipCount, takeCount, _callback);
        Type localVarReturnType = new TypeToken<Services>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesUpdate
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesUpdateCall(String serviceName, String apiVersion, ServiceProperties service, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = service;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesUpdateValidateBeforeCall(String serviceName, String apiVersion, ServiceProperties service, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesUpdate(Async)");
        }

        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling servicesUpdate(Async)");
        }

        return servicesUpdateCall(serviceName, apiVersion, service, _callback);

    }

    /**
     * 
     * Updates the service properties of an onboarded service.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @return ServiceProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the service. </td><td>  -  </td></tr>
     </table>
     */
    public ServiceProperties servicesUpdate(String serviceName, String apiVersion, ServiceProperties service) throws ApiException {
        ApiResponse<ServiceProperties> localVarResp = servicesUpdateWithHttpInfo(serviceName, apiVersion, service);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the service properties of an onboarded service.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @return ApiResponse&lt;ServiceProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceProperties> servicesUpdateWithHttpInfo(String serviceName, String apiVersion, ServiceProperties service) throws ApiException {
        okhttp3.Call localVarCall = servicesUpdateValidateBeforeCall(serviceName, apiVersion, service, null);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the service properties of an onboarded service.
     * @param serviceName The name of the service which needs to be deleted. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param service The service object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesUpdateAsync(String serviceName, String apiVersion, ServiceProperties service, final ApiCallback<ServiceProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesUpdateValidateBeforeCall(serviceName, apiVersion, service, _callback);
        Type localVarReturnType = new TypeToken<ServiceProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesUpdateMonitoringConfiguration
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param configurationSetting The monitoring configuration to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the monitoring configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesUpdateMonitoringConfigurationCall(String serviceName, String apiVersion, Item configurationSetting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configurationSetting;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ADHybridHealthService/services/{serviceName}/monitoringconfiguration"
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesUpdateMonitoringConfigurationValidateBeforeCall(String serviceName, String apiVersion, Item configurationSetting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesUpdateMonitoringConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesUpdateMonitoringConfiguration(Async)");
        }

        // verify the required parameter 'configurationSetting' is set
        if (configurationSetting == null) {
            throw new ApiException("Missing the required parameter 'configurationSetting' when calling servicesUpdateMonitoringConfiguration(Async)");
        }

        return servicesUpdateMonitoringConfigurationCall(serviceName, apiVersion, configurationSetting, _callback);

    }

    /**
     * 
     * Updates the service level monitoring configuration.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param configurationSetting The monitoring configuration to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the monitoring configuration. </td><td>  -  </td></tr>
     </table>
     */
    public void servicesUpdateMonitoringConfiguration(String serviceName, String apiVersion, Item configurationSetting) throws ApiException {
        servicesUpdateMonitoringConfigurationWithHttpInfo(serviceName, apiVersion, configurationSetting);
    }

    /**
     * 
     * Updates the service level monitoring configuration.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param configurationSetting The monitoring configuration to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the monitoring configuration. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesUpdateMonitoringConfigurationWithHttpInfo(String serviceName, String apiVersion, Item configurationSetting) throws ApiException {
        okhttp3.Call localVarCall = servicesUpdateMonitoringConfigurationValidateBeforeCall(serviceName, apiVersion, configurationSetting, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the service level monitoring configuration.
     * @param serviceName The name of the service. (required)
     * @param apiVersion The version of the API to be used with the client request. (required)
     * @param configurationSetting The monitoring configuration to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated the monitoring configuration. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesUpdateMonitoringConfigurationAsync(String serviceName, String apiVersion, Item configurationSetting, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesUpdateMonitoringConfigurationValidateBeforeCall(serviceName, apiVersion, configurationSetting, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
