/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The replication summary for the domain controller inbound neighbor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InboundReplicationNeighbor {
  public static final String SERIALIZED_NAME_ADDITIONAL_INFO = "additionalInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFO)
  private String additionalInfo;

  public static final String SERIALIZED_NAME_CONSECUTIVE_FAILURE_COUNT = "consecutiveFailureCount";
  @SerializedName(SERIALIZED_NAME_CONSECUTIVE_FAILURE_COUNT)
  private Integer consecutiveFailureCount;

  public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "errorDescription";
  @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
  private String errorDescription;

  public static final String SERIALIZED_NAME_ERROR_TITLE = "errorTitle";
  @SerializedName(SERIALIZED_NAME_ERROR_TITLE)
  private String errorTitle;

  public static final String SERIALIZED_NAME_FIX_DETAILS = "fixDetails";
  @SerializedName(SERIALIZED_NAME_FIX_DETAILS)
  private String fixDetails;

  public static final String SERIALIZED_NAME_FIX_LINK = "fixLink";
  @SerializedName(SERIALIZED_NAME_FIX_LINK)
  private String fixLink;

  public static final String SERIALIZED_NAME_LAST_ATTEMPTED_SYNC = "lastAttemptedSync";
  @SerializedName(SERIALIZED_NAME_LAST_ATTEMPTED_SYNC)
  private OffsetDateTime lastAttemptedSync;

  public static final String SERIALIZED_NAME_LAST_ERROR_CODE = "lastErrorCode";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR_CODE)
  private Integer lastErrorCode;

  public static final String SERIALIZED_NAME_LAST_ERROR_MESSAGE = "lastErrorMessage";
  @SerializedName(SERIALIZED_NAME_LAST_ERROR_MESSAGE)
  private String lastErrorMessage;

  public static final String SERIALIZED_NAME_LAST_SUCCESSFUL_SYNC = "lastSuccessfulSync";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESSFUL_SYNC)
  private OffsetDateTime lastSuccessfulSync;

  public static final String SERIALIZED_NAME_NAMING_CONTEXT = "namingContext";
  @SerializedName(SERIALIZED_NAME_NAMING_CONTEXT)
  private String namingContext;

  public static final String SERIALIZED_NAME_SOURCE_DOMAIN_CONTROLLER = "sourceDomainController";
  @SerializedName(SERIALIZED_NAME_SOURCE_DOMAIN_CONTROLLER)
  private String sourceDomainController;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public InboundReplicationNeighbor() {
  }

  public InboundReplicationNeighbor additionalInfo(String additionalInfo) {
    this.additionalInfo = additionalInfo;
    return this;
  }

  /**
   * The additional details.
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  public String getAdditionalInfo() {
    return additionalInfo;
  }

  public void setAdditionalInfo(String additionalInfo) {
    this.additionalInfo = additionalInfo;
  }


  public InboundReplicationNeighbor consecutiveFailureCount(Integer consecutiveFailureCount) {
    this.consecutiveFailureCount = consecutiveFailureCount;
    return this;
  }

  /**
   * The number of consecutive failure counts.
   * @return consecutiveFailureCount
   */
  @javax.annotation.Nullable
  public Integer getConsecutiveFailureCount() {
    return consecutiveFailureCount;
  }

  public void setConsecutiveFailureCount(Integer consecutiveFailureCount) {
    this.consecutiveFailureCount = consecutiveFailureCount;
  }


  public InboundReplicationNeighbor errorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
    return this;
  }

  /**
   * The error description.
   * @return errorDescription
   */
  @javax.annotation.Nullable
  public String getErrorDescription() {
    return errorDescription;
  }

  public void setErrorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
  }


  public InboundReplicationNeighbor errorTitle(String errorTitle) {
    this.errorTitle = errorTitle;
    return this;
  }

  /**
   * The error title.
   * @return errorTitle
   */
  @javax.annotation.Nullable
  public String getErrorTitle() {
    return errorTitle;
  }

  public void setErrorTitle(String errorTitle) {
    this.errorTitle = errorTitle;
  }


  public InboundReplicationNeighbor fixDetails(String fixDetails) {
    this.fixDetails = fixDetails;
    return this;
  }

  /**
   * The details of the fix.
   * @return fixDetails
   */
  @javax.annotation.Nullable
  public String getFixDetails() {
    return fixDetails;
  }

  public void setFixDetails(String fixDetails) {
    this.fixDetails = fixDetails;
  }


  public InboundReplicationNeighbor fixLink(String fixLink) {
    this.fixLink = fixLink;
    return this;
  }

  /**
   * The link for the fix of the error.
   * @return fixLink
   */
  @javax.annotation.Nullable
  public String getFixLink() {
    return fixLink;
  }

  public void setFixLink(String fixLink) {
    this.fixLink = fixLink;
  }


  public InboundReplicationNeighbor lastAttemptedSync(OffsetDateTime lastAttemptedSync) {
    this.lastAttemptedSync = lastAttemptedSync;
    return this;
  }

  /**
   * The last time a sync was attempted on the domain controller.
   * @return lastAttemptedSync
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAttemptedSync() {
    return lastAttemptedSync;
  }

  public void setLastAttemptedSync(OffsetDateTime lastAttemptedSync) {
    this.lastAttemptedSync = lastAttemptedSync;
  }


  public InboundReplicationNeighbor lastErrorCode(Integer lastErrorCode) {
    this.lastErrorCode = lastErrorCode;
    return this;
  }

  /**
   * The last error code.
   * @return lastErrorCode
   */
  @javax.annotation.Nullable
  public Integer getLastErrorCode() {
    return lastErrorCode;
  }

  public void setLastErrorCode(Integer lastErrorCode) {
    this.lastErrorCode = lastErrorCode;
  }


  public InboundReplicationNeighbor lastErrorMessage(String lastErrorMessage) {
    this.lastErrorMessage = lastErrorMessage;
    return this;
  }

  /**
   * The error message of the last error.
   * @return lastErrorMessage
   */
  @javax.annotation.Nullable
  public String getLastErrorMessage() {
    return lastErrorMessage;
  }

  public void setLastErrorMessage(String lastErrorMessage) {
    this.lastErrorMessage = lastErrorMessage;
  }


  public InboundReplicationNeighbor lastSuccessfulSync(OffsetDateTime lastSuccessfulSync) {
    this.lastSuccessfulSync = lastSuccessfulSync;
    return this;
  }

  /**
   * The last time when a successful sync happened.
   * @return lastSuccessfulSync
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccessfulSync() {
    return lastSuccessfulSync;
  }

  public void setLastSuccessfulSync(OffsetDateTime lastSuccessfulSync) {
    this.lastSuccessfulSync = lastSuccessfulSync;
  }


  public InboundReplicationNeighbor namingContext(String namingContext) {
    this.namingContext = namingContext;
    return this;
  }

  /**
   * The naming context.
   * @return namingContext
   */
  @javax.annotation.Nullable
  public String getNamingContext() {
    return namingContext;
  }

  public void setNamingContext(String namingContext) {
    this.namingContext = namingContext;
  }


  public InboundReplicationNeighbor sourceDomainController(String sourceDomainController) {
    this.sourceDomainController = sourceDomainController;
    return this;
  }

  /**
   * The name of the source domain controller.
   * @return sourceDomainController
   */
  @javax.annotation.Nullable
  public String getSourceDomainController() {
    return sourceDomainController;
  }

  public void setSourceDomainController(String sourceDomainController) {
    this.sourceDomainController = sourceDomainController;
  }


  public InboundReplicationNeighbor status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * The health status for the domain controller
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundReplicationNeighbor inboundReplicationNeighbor = (InboundReplicationNeighbor) o;
    return Objects.equals(this.additionalInfo, inboundReplicationNeighbor.additionalInfo) &&
        Objects.equals(this.consecutiveFailureCount, inboundReplicationNeighbor.consecutiveFailureCount) &&
        Objects.equals(this.errorDescription, inboundReplicationNeighbor.errorDescription) &&
        Objects.equals(this.errorTitle, inboundReplicationNeighbor.errorTitle) &&
        Objects.equals(this.fixDetails, inboundReplicationNeighbor.fixDetails) &&
        Objects.equals(this.fixLink, inboundReplicationNeighbor.fixLink) &&
        Objects.equals(this.lastAttemptedSync, inboundReplicationNeighbor.lastAttemptedSync) &&
        Objects.equals(this.lastErrorCode, inboundReplicationNeighbor.lastErrorCode) &&
        Objects.equals(this.lastErrorMessage, inboundReplicationNeighbor.lastErrorMessage) &&
        Objects.equals(this.lastSuccessfulSync, inboundReplicationNeighbor.lastSuccessfulSync) &&
        Objects.equals(this.namingContext, inboundReplicationNeighbor.namingContext) &&
        Objects.equals(this.sourceDomainController, inboundReplicationNeighbor.sourceDomainController) &&
        Objects.equals(this.status, inboundReplicationNeighbor.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInfo, consecutiveFailureCount, errorDescription, errorTitle, fixDetails, fixLink, lastAttemptedSync, lastErrorCode, lastErrorMessage, lastSuccessfulSync, namingContext, sourceDomainController, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundReplicationNeighbor {\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    consecutiveFailureCount: ").append(toIndentedString(consecutiveFailureCount)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("    errorTitle: ").append(toIndentedString(errorTitle)).append("\n");
    sb.append("    fixDetails: ").append(toIndentedString(fixDetails)).append("\n");
    sb.append("    fixLink: ").append(toIndentedString(fixLink)).append("\n");
    sb.append("    lastAttemptedSync: ").append(toIndentedString(lastAttemptedSync)).append("\n");
    sb.append("    lastErrorCode: ").append(toIndentedString(lastErrorCode)).append("\n");
    sb.append("    lastErrorMessage: ").append(toIndentedString(lastErrorMessage)).append("\n");
    sb.append("    lastSuccessfulSync: ").append(toIndentedString(lastSuccessfulSync)).append("\n");
    sb.append("    namingContext: ").append(toIndentedString(namingContext)).append("\n");
    sb.append("    sourceDomainController: ").append(toIndentedString(sourceDomainController)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalInfo");
    openapiFields.add("consecutiveFailureCount");
    openapiFields.add("errorDescription");
    openapiFields.add("errorTitle");
    openapiFields.add("fixDetails");
    openapiFields.add("fixLink");
    openapiFields.add("lastAttemptedSync");
    openapiFields.add("lastErrorCode");
    openapiFields.add("lastErrorMessage");
    openapiFields.add("lastSuccessfulSync");
    openapiFields.add("namingContext");
    openapiFields.add("sourceDomainController");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboundReplicationNeighbor
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundReplicationNeighbor.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundReplicationNeighbor is not found in the empty JSON string", InboundReplicationNeighbor.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundReplicationNeighbor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundReplicationNeighbor` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalInfo") != null && !jsonObj.get("additionalInfo").isJsonNull()) && !jsonObj.get("additionalInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInfo").toString()));
      }
      if ((jsonObj.get("errorDescription") != null && !jsonObj.get("errorDescription").isJsonNull()) && !jsonObj.get("errorDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorDescription").toString()));
      }
      if ((jsonObj.get("errorTitle") != null && !jsonObj.get("errorTitle").isJsonNull()) && !jsonObj.get("errorTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorTitle").toString()));
      }
      if ((jsonObj.get("fixDetails") != null && !jsonObj.get("fixDetails").isJsonNull()) && !jsonObj.get("fixDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixDetails").toString()));
      }
      if ((jsonObj.get("fixLink") != null && !jsonObj.get("fixLink").isJsonNull()) && !jsonObj.get("fixLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixLink").toString()));
      }
      if ((jsonObj.get("lastErrorMessage") != null && !jsonObj.get("lastErrorMessage").isJsonNull()) && !jsonObj.get("lastErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastErrorMessage").toString()));
      }
      if ((jsonObj.get("namingContext") != null && !jsonObj.get("namingContext").isJsonNull()) && !jsonObj.get("namingContext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namingContext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namingContext").toString()));
      }
      if ((jsonObj.get("sourceDomainController") != null && !jsonObj.get("sourceDomainController").isJsonNull()) && !jsonObj.get("sourceDomainController").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDomainController` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceDomainController").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundReplicationNeighbor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundReplicationNeighbor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundReplicationNeighbor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundReplicationNeighbor.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundReplicationNeighbor>() {
           @Override
           public void write(JsonWriter out, InboundReplicationNeighbor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundReplicationNeighbor read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboundReplicationNeighbor given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboundReplicationNeighbor
   * @throws IOException if the JSON string is invalid with respect to InboundReplicationNeighbor
   */
  public static InboundReplicationNeighbor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundReplicationNeighbor.class);
  }

  /**
   * Convert an instance of InboundReplicationNeighbor to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

