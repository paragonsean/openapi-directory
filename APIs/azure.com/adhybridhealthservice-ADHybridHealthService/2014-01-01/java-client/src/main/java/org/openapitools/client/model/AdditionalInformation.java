/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The additional information for a property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalInformation {
  public static final String SERIALIZED_NAME_HAS_PROPERTIES = "hasProperties";
  @SerializedName(SERIALIZED_NAME_HAS_PROPERTIES)
  private Boolean hasProperties;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Object properties;

  public static final String SERIALIZED_NAME_TITLE_NAME = "titleName";
  @SerializedName(SERIALIZED_NAME_TITLE_NAME)
  private String titleName;

  public static final String SERIALIZED_NAME_TITLE_VALUE = "titleValue";
  @SerializedName(SERIALIZED_NAME_TITLE_VALUE)
  private String titleValue;

  public AdditionalInformation() {
  }

  public AdditionalInformation hasProperties(Boolean hasProperties) {
    this.hasProperties = hasProperties;
    return this;
  }

  /**
   * Indicates if properties are present or not.
   * @return hasProperties
   */
  @javax.annotation.Nullable
  public Boolean getHasProperties() {
    return hasProperties;
  }

  public void setHasProperties(Boolean hasProperties) {
    this.hasProperties = hasProperties;
  }


  public AdditionalInformation properties(Object properties) {
    this.properties = properties;
    return this;
  }

  /**
   * The list of properties which are included in the additional information.
   * @return properties
   */
  @javax.annotation.Nullable
  public Object getProperties() {
    return properties;
  }

  public void setProperties(Object properties) {
    this.properties = properties;
  }


  public AdditionalInformation titleName(String titleName) {
    this.titleName = titleName;
    return this;
  }

  /**
   * The title name for the property.
   * @return titleName
   */
  @javax.annotation.Nullable
  public String getTitleName() {
    return titleName;
  }

  public void setTitleName(String titleName) {
    this.titleName = titleName;
  }


  public AdditionalInformation titleValue(String titleValue) {
    this.titleValue = titleValue;
    return this;
  }

  /**
   * The title value for the property.
   * @return titleValue
   */
  @javax.annotation.Nullable
  public String getTitleValue() {
    return titleValue;
  }

  public void setTitleValue(String titleValue) {
    this.titleValue = titleValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalInformation additionalInformation = (AdditionalInformation) o;
    return Objects.equals(this.hasProperties, additionalInformation.hasProperties) &&
        Objects.equals(this.properties, additionalInformation.properties) &&
        Objects.equals(this.titleName, additionalInformation.titleName) &&
        Objects.equals(this.titleValue, additionalInformation.titleValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasProperties, properties, titleName, titleValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalInformation {\n");
    sb.append("    hasProperties: ").append(toIndentedString(hasProperties)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    titleName: ").append(toIndentedString(titleName)).append("\n");
    sb.append("    titleValue: ").append(toIndentedString(titleValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hasProperties");
    openapiFields.add("properties");
    openapiFields.add("titleName");
    openapiFields.add("titleValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalInformation is not found in the empty JSON string", AdditionalInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("titleName") != null && !jsonObj.get("titleName").isJsonNull()) && !jsonObj.get("titleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleName").toString()));
      }
      if ((jsonObj.get("titleValue") != null && !jsonObj.get("titleValue").isJsonNull()) && !jsonObj.get("titleValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalInformation>() {
           @Override
           public void write(JsonWriter out, AdditionalInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalInformation
   * @throws IOException if the JSON string is invalid with respect to AdditionalInformation
   */
  public static AdditionalInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalInformation.class);
  }

  /**
   * Convert an instance of AdditionalInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

