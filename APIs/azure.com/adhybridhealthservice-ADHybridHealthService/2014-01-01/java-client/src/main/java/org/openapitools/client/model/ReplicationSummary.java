/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InboundReplicationNeighbor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The replication summary for a domain controller.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationSummary {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_INBOUND_NEIGHBOR_COLLECTION = "inboundNeighborCollection";
  @SerializedName(SERIALIZED_NAME_INBOUND_NEIGHBOR_COLLECTION)
  private List<InboundReplicationNeighbor> inboundNeighborCollection = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_ATTEMPTED_SYNC = "lastAttemptedSync";
  @SerializedName(SERIALIZED_NAME_LAST_ATTEMPTED_SYNC)
  private OffsetDateTime lastAttemptedSync;

  public static final String SERIALIZED_NAME_LAST_SUCCESSFUL_SYNC = "lastSuccessfulSync";
  @SerializedName(SERIALIZED_NAME_LAST_SUCCESSFUL_SYNC)
  private OffsetDateTime lastSuccessfulSync;

  public static final String SERIALIZED_NAME_SITE = "site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private String site;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_TARGET_SERVER = "targetServer";
  @SerializedName(SERIALIZED_NAME_TARGET_SERVER)
  private String targetServer;

  public ReplicationSummary() {
  }

  public ReplicationSummary domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * The domain name for a given domain controller.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public ReplicationSummary inboundNeighborCollection(List<InboundReplicationNeighbor> inboundNeighborCollection) {
    this.inboundNeighborCollection = inboundNeighborCollection;
    return this;
  }

  public ReplicationSummary addInboundNeighborCollectionItem(InboundReplicationNeighbor inboundNeighborCollectionItem) {
    if (this.inboundNeighborCollection == null) {
      this.inboundNeighborCollection = new ArrayList<>();
    }
    this.inboundNeighborCollection.add(inboundNeighborCollectionItem);
    return this;
  }

  /**
   * List of individual domain controller neighbor&#39;s inbound replication status.
   * @return inboundNeighborCollection
   */
  @javax.annotation.Nullable
  public List<InboundReplicationNeighbor> getInboundNeighborCollection() {
    return inboundNeighborCollection;
  }

  public void setInboundNeighborCollection(List<InboundReplicationNeighbor> inboundNeighborCollection) {
    this.inboundNeighborCollection = inboundNeighborCollection;
  }


  public ReplicationSummary lastAttemptedSync(OffsetDateTime lastAttemptedSync) {
    this.lastAttemptedSync = lastAttemptedSync;
    return this;
  }

  /**
   * The last time when a sync was attempted for a given domain controller.
   * @return lastAttemptedSync
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAttemptedSync() {
    return lastAttemptedSync;
  }

  public void setLastAttemptedSync(OffsetDateTime lastAttemptedSync) {
    this.lastAttemptedSync = lastAttemptedSync;
  }


  public ReplicationSummary lastSuccessfulSync(OffsetDateTime lastSuccessfulSync) {
    this.lastSuccessfulSync = lastSuccessfulSync;
    return this;
  }

  /**
   * The time when the last successful sync happened for a given domain controller.
   * @return lastSuccessfulSync
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastSuccessfulSync() {
    return lastSuccessfulSync;
  }

  public void setLastSuccessfulSync(OffsetDateTime lastSuccessfulSync) {
    this.lastSuccessfulSync = lastSuccessfulSync;
  }


  public ReplicationSummary site(String site) {
    this.site = site;
    return this;
  }

  /**
   * The site name for a given domain controller.
   * @return site
   */
  @javax.annotation.Nullable
  public String getSite() {
    return site;
  }

  public void setSite(String site) {
    this.site = site;
  }


  public ReplicationSummary status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * The health status for a domain controller.
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public ReplicationSummary targetServer(String targetServer) {
    this.targetServer = targetServer;
    return this;
  }

  /**
   * The domain controller name.
   * @return targetServer
   */
  @javax.annotation.Nullable
  public String getTargetServer() {
    return targetServer;
  }

  public void setTargetServer(String targetServer) {
    this.targetServer = targetServer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationSummary replicationSummary = (ReplicationSummary) o;
    return Objects.equals(this.domain, replicationSummary.domain) &&
        Objects.equals(this.inboundNeighborCollection, replicationSummary.inboundNeighborCollection) &&
        Objects.equals(this.lastAttemptedSync, replicationSummary.lastAttemptedSync) &&
        Objects.equals(this.lastSuccessfulSync, replicationSummary.lastSuccessfulSync) &&
        Objects.equals(this.site, replicationSummary.site) &&
        Objects.equals(this.status, replicationSummary.status) &&
        Objects.equals(this.targetServer, replicationSummary.targetServer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, inboundNeighborCollection, lastAttemptedSync, lastSuccessfulSync, site, status, targetServer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationSummary {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    inboundNeighborCollection: ").append(toIndentedString(inboundNeighborCollection)).append("\n");
    sb.append("    lastAttemptedSync: ").append(toIndentedString(lastAttemptedSync)).append("\n");
    sb.append("    lastSuccessfulSync: ").append(toIndentedString(lastSuccessfulSync)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetServer: ").append(toIndentedString(targetServer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("inboundNeighborCollection");
    openapiFields.add("lastAttemptedSync");
    openapiFields.add("lastSuccessfulSync");
    openapiFields.add("site");
    openapiFields.add("status");
    openapiFields.add("targetServer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationSummary is not found in the empty JSON string", ReplicationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (jsonObj.get("inboundNeighborCollection") != null && !jsonObj.get("inboundNeighborCollection").isJsonNull()) {
        JsonArray jsonArrayinboundNeighborCollection = jsonObj.getAsJsonArray("inboundNeighborCollection");
        if (jsonArrayinboundNeighborCollection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inboundNeighborCollection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inboundNeighborCollection` to be an array in the JSON string but got `%s`", jsonObj.get("inboundNeighborCollection").toString()));
          }

          // validate the optional field `inboundNeighborCollection` (array)
          for (int i = 0; i < jsonArrayinboundNeighborCollection.size(); i++) {
            InboundReplicationNeighbor.validateJsonElement(jsonArrayinboundNeighborCollection.get(i));
          };
        }
      }
      if ((jsonObj.get("site") != null && !jsonObj.get("site").isJsonNull()) && !jsonObj.get("site").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site").toString()));
      }
      if ((jsonObj.get("targetServer") != null && !jsonObj.get("targetServer").isJsonNull()) && !jsonObj.get("targetServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetServer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationSummary>() {
           @Override
           public void write(JsonWriter out, ReplicationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationSummary
   * @throws IOException if the JSON string is invalid with respect to ReplicationSummary
   */
  public static ReplicationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationSummary.class);
  }

  /**
   * Convert an instance of ReplicationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

