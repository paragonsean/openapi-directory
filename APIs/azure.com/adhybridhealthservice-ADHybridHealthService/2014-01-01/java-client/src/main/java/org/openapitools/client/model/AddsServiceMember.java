/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Hotfix;
import org.openapitools.client.model.Item;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The server details for ADDS service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddsServiceMember {
  public static final String SERIALIZED_NAME_ACTIVE_ALERTS = "activeAlerts";
  @SerializedName(SERIALIZED_NAME_ACTIVE_ALERTS)
  private Integer activeAlerts;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "additionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private String additionalInformation;

  public static final String SERIALIZED_NAME_ADDS_ROLES = "addsRoles";
  @SerializedName(SERIALIZED_NAME_ADDS_ROLES)
  private List<String> addsRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DC_TYPES = "dcTypes";
  @SerializedName(SERIALIZED_NAME_DC_TYPES)
  private List<String> dcTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<Item> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DISABLED_REASON = "disabledReason";
  @SerializedName(SERIALIZED_NAME_DISABLED_REASON)
  private Integer disabledReason;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_GC_REACHABLE = "gcReachable";
  @SerializedName(SERIALIZED_NAME_GC_REACHABLE)
  private Boolean gcReachable;

  public static final String SERIALIZED_NAME_INSTALLED_QFES = "installedQfes";
  @SerializedName(SERIALIZED_NAME_INSTALLED_QFES)
  private List<Hotfix> installedQfes = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_ADVERTISING = "isAdvertising";
  @SerializedName(SERIALIZED_NAME_IS_ADVERTISING)
  private Boolean isAdvertising;

  public static final String SERIALIZED_NAME_LAST_DISABLED = "lastDisabled";
  @SerializedName(SERIALIZED_NAME_LAST_DISABLED)
  private OffsetDateTime lastDisabled;

  public static final String SERIALIZED_NAME_LAST_REBOOT = "lastReboot";
  @SerializedName(SERIALIZED_NAME_LAST_REBOOT)
  private OffsetDateTime lastReboot;

  public static final String SERIALIZED_NAME_LAST_SERVER_REPORTED_MONITORING_LEVEL_CHANGE = "lastServerReportedMonitoringLevelChange";
  @SerializedName(SERIALIZED_NAME_LAST_SERVER_REPORTED_MONITORING_LEVEL_CHANGE)
  private OffsetDateTime lastServerReportedMonitoringLevelChange;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MACHINE_ID = "machineId";
  @SerializedName(SERIALIZED_NAME_MACHINE_ID)
  private String machineId;

  public static final String SERIALIZED_NAME_MACHINE_NAME = "machineName";
  @SerializedName(SERIALIZED_NAME_MACHINE_NAME)
  private String machineName;

  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATIONS_COMPUTED = "monitoringConfigurationsComputed";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATIONS_COMPUTED)
  private List<Item> monitoringConfigurationsComputed = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONITORING_CONFIGURATIONS_CUSTOMIZED = "monitoringConfigurationsCustomized";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIGURATIONS_CUSTOMIZED)
  private List<Item> monitoringConfigurationsCustomized = new ArrayList<>();

  public static final String SERIALIZED_NAME_OS_NAME = "osName";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private String osName;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_PDC_REACHABLE = "pdcReachable";
  @SerializedName(SERIALIZED_NAME_PDC_REACHABLE)
  private Boolean pdcReachable;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<Item> properties = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECOMMENDED_QFES = "recommendedQfes";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_QFES)
  private List<Hotfix> recommendedQfes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOLVED_ALERTS = "resolvedAlerts";
  @SerializedName(SERIALIZED_NAME_RESOLVED_ALERTS)
  private Integer resolvedAlerts;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  /**
   * The monitoring level reported by the server.
   */
  @JsonAdapter(ServerReportedMonitoringLevelEnum.Adapter.class)
  public enum ServerReportedMonitoringLevelEnum {
    PARTIAL("Partial"),
    
    FULL("Full"),
    
    OFF("Off");

    private String value;

    ServerReportedMonitoringLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServerReportedMonitoringLevelEnum fromValue(String value) {
      for (ServerReportedMonitoringLevelEnum b : ServerReportedMonitoringLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServerReportedMonitoringLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServerReportedMonitoringLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServerReportedMonitoringLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServerReportedMonitoringLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServerReportedMonitoringLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVER_REPORTED_MONITORING_LEVEL = "serverReportedMonitoringLevel";
  @SerializedName(SERIALIZED_NAME_SERVER_REPORTED_MONITORING_LEVEL)
  private ServerReportedMonitoringLevelEnum serverReportedMonitoringLevel;

  public static final String SERIALIZED_NAME_SERVICE_ID = "serviceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ID)
  private String serviceId;

  public static final String SERIALIZED_NAME_SERVICE_MEMBER_ID = "serviceMemberId";
  @SerializedName(SERIALIZED_NAME_SERVICE_MEMBER_ID)
  private String serviceMemberId;

  public static final String SERIALIZED_NAME_SITE_NAME = "siteName";
  @SerializedName(SERIALIZED_NAME_SITE_NAME)
  private String siteName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SYSVOL_STATE = "sysvolState";
  @SerializedName(SERIALIZED_NAME_SYSVOL_STATE)
  private Boolean sysvolState;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public AddsServiceMember() {
  }

  public AddsServiceMember activeAlerts(Integer activeAlerts) {
    this.activeAlerts = activeAlerts;
    return this;
  }

  /**
   * The total number of alerts that are currently active for the server.
   * @return activeAlerts
   */
  @javax.annotation.Nullable
  public Integer getActiveAlerts() {
    return activeAlerts;
  }

  public void setActiveAlerts(Integer activeAlerts) {
    this.activeAlerts = activeAlerts;
  }


  public AddsServiceMember additionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  /**
   * The additional information, if any, for the server.
   * @return additionalInformation
   */
  @javax.annotation.Nullable
  public String getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public AddsServiceMember addsRoles(List<String> addsRoles) {
    this.addsRoles = addsRoles;
    return this;
  }

  public AddsServiceMember addAddsRolesItem(String addsRolesItem) {
    if (this.addsRoles == null) {
      this.addsRoles = new ArrayList<>();
    }
    this.addsRoles.add(addsRolesItem);
    return this;
  }

  /**
   * The list of ADDS roles.
   * @return addsRoles
   */
  @javax.annotation.Nullable
  public List<String> getAddsRoles() {
    return addsRoles;
  }

  public void setAddsRoles(List<String> addsRoles) {
    this.addsRoles = addsRoles;
  }


  public AddsServiceMember createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * The date time , in UTC, when the server was onboarded to Azure Active Directory Connect Health.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public AddsServiceMember dcTypes(List<String> dcTypes) {
    this.dcTypes = dcTypes;
    return this;
  }

  public AddsServiceMember addDcTypesItem(String dcTypesItem) {
    if (this.dcTypes == null) {
      this.dcTypes = new ArrayList<>();
    }
    this.dcTypes.add(dcTypesItem);
    return this;
  }

  /**
   * The list of domain controller types.
   * @return dcTypes
   */
  @javax.annotation.Nullable
  public List<String> getDcTypes() {
    return dcTypes;
  }

  public void setDcTypes(List<String> dcTypes) {
    this.dcTypes = dcTypes;
  }


  public AddsServiceMember dimensions(List<Item> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public AddsServiceMember addDimensionsItem(Item dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * The server specific configuration related dimensions.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<Item> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<Item> dimensions) {
    this.dimensions = dimensions;
  }


  public AddsServiceMember disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Indicates if the server is disabled or not. 
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public AddsServiceMember disabledReason(Integer disabledReason) {
    this.disabledReason = disabledReason;
    return this;
  }

  /**
   * The reason for disabling the server.
   * @return disabledReason
   */
  @javax.annotation.Nullable
  public Integer getDisabledReason() {
    return disabledReason;
  }

  public void setDisabledReason(Integer disabledReason) {
    this.disabledReason = disabledReason;
  }


  public AddsServiceMember domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * The domain name.
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public AddsServiceMember gcReachable(Boolean gcReachable) {
    this.gcReachable = gcReachable;
    return this;
  }

  /**
   * Indicates if the global catalog for this domain is reachable or not.
   * @return gcReachable
   */
  @javax.annotation.Nullable
  public Boolean getGcReachable() {
    return gcReachable;
  }

  public void setGcReachable(Boolean gcReachable) {
    this.gcReachable = gcReachable;
  }


  public AddsServiceMember installedQfes(List<Hotfix> installedQfes) {
    this.installedQfes = installedQfes;
    return this;
  }

  public AddsServiceMember addInstalledQfesItem(Hotfix installedQfesItem) {
    if (this.installedQfes == null) {
      this.installedQfes = new ArrayList<>();
    }
    this.installedQfes.add(installedQfesItem);
    return this;
  }

  /**
   * The list of installed QFEs for the server.
   * @return installedQfes
   */
  @javax.annotation.Nullable
  public List<Hotfix> getInstalledQfes() {
    return installedQfes;
  }

  public void setInstalledQfes(List<Hotfix> installedQfes) {
    this.installedQfes = installedQfes;
  }


  public AddsServiceMember isAdvertising(Boolean isAdvertising) {
    this.isAdvertising = isAdvertising;
    return this;
  }

  /**
   * Indicates if the Dc is advertising or not.
   * @return isAdvertising
   */
  @javax.annotation.Nullable
  public Boolean getIsAdvertising() {
    return isAdvertising;
  }

  public void setIsAdvertising(Boolean isAdvertising) {
    this.isAdvertising = isAdvertising;
  }


  public AddsServiceMember lastDisabled(OffsetDateTime lastDisabled) {
    this.lastDisabled = lastDisabled;
    return this;
  }

  /**
   * The date and time , in UTC, when the server was last disabled.
   * @return lastDisabled
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastDisabled() {
    return lastDisabled;
  }

  public void setLastDisabled(OffsetDateTime lastDisabled) {
    this.lastDisabled = lastDisabled;
  }


  public AddsServiceMember lastReboot(OffsetDateTime lastReboot) {
    this.lastReboot = lastReboot;
    return this;
  }

  /**
   * The date and time, in UTC, when the server was last rebooted.
   * @return lastReboot
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastReboot() {
    return lastReboot;
  }

  public void setLastReboot(OffsetDateTime lastReboot) {
    this.lastReboot = lastReboot;
  }


  public AddsServiceMember lastServerReportedMonitoringLevelChange(OffsetDateTime lastServerReportedMonitoringLevelChange) {
    this.lastServerReportedMonitoringLevelChange = lastServerReportedMonitoringLevelChange;
    return this;
  }

  /**
   * The date and time, in UTC, when the server&#39;s data monitoring configuration was last changed.
   * @return lastServerReportedMonitoringLevelChange
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastServerReportedMonitoringLevelChange() {
    return lastServerReportedMonitoringLevelChange;
  }

  public void setLastServerReportedMonitoringLevelChange(OffsetDateTime lastServerReportedMonitoringLevelChange) {
    this.lastServerReportedMonitoringLevelChange = lastServerReportedMonitoringLevelChange;
  }


  public AddsServiceMember lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The date and time, in UTC, when the server properties were last updated.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public AddsServiceMember machineId(String machineId) {
    this.machineId = machineId;
    return this;
  }

  /**
   * The id of the machine.
   * @return machineId
   */
  @javax.annotation.Nullable
  public String getMachineId() {
    return machineId;
  }

  public void setMachineId(String machineId) {
    this.machineId = machineId;
  }


  public AddsServiceMember machineName(String machineName) {
    this.machineName = machineName;
    return this;
  }

  /**
   * The name of the server.
   * @return machineName
   */
  @javax.annotation.Nullable
  public String getMachineName() {
    return machineName;
  }

  public void setMachineName(String machineName) {
    this.machineName = machineName;
  }


  public AddsServiceMember monitoringConfigurationsComputed(List<Item> monitoringConfigurationsComputed) {
    this.monitoringConfigurationsComputed = monitoringConfigurationsComputed;
    return this;
  }

  public AddsServiceMember addMonitoringConfigurationsComputedItem(Item monitoringConfigurationsComputedItem) {
    if (this.monitoringConfigurationsComputed == null) {
      this.monitoringConfigurationsComputed = new ArrayList<>();
    }
    this.monitoringConfigurationsComputed.add(monitoringConfigurationsComputedItem);
    return this;
  }

  /**
   * The monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.
   * @return monitoringConfigurationsComputed
   */
  @javax.annotation.Nullable
  public List<Item> getMonitoringConfigurationsComputed() {
    return monitoringConfigurationsComputed;
  }

  public void setMonitoringConfigurationsComputed(List<Item> monitoringConfigurationsComputed) {
    this.monitoringConfigurationsComputed = monitoringConfigurationsComputed;
  }


  public AddsServiceMember monitoringConfigurationsCustomized(List<Item> monitoringConfigurationsCustomized) {
    this.monitoringConfigurationsCustomized = monitoringConfigurationsCustomized;
    return this;
  }

  public AddsServiceMember addMonitoringConfigurationsCustomizedItem(Item monitoringConfigurationsCustomizedItem) {
    if (this.monitoringConfigurationsCustomized == null) {
      this.monitoringConfigurationsCustomized = new ArrayList<>();
    }
    this.monitoringConfigurationsCustomized.add(monitoringConfigurationsCustomizedItem);
    return this;
  }

  /**
   * The customized monitoring configuration of the server which determines what activities are monitored by Azure Active Directory Connect Health.
   * @return monitoringConfigurationsCustomized
   */
  @javax.annotation.Nullable
  public List<Item> getMonitoringConfigurationsCustomized() {
    return monitoringConfigurationsCustomized;
  }

  public void setMonitoringConfigurationsCustomized(List<Item> monitoringConfigurationsCustomized) {
    this.monitoringConfigurationsCustomized = monitoringConfigurationsCustomized;
  }


  public AddsServiceMember osName(String osName) {
    this.osName = osName;
    return this;
  }

  /**
   * The name of the operating system installed in the machine.
   * @return osName
   */
  @javax.annotation.Nullable
  public String getOsName() {
    return osName;
  }

  public void setOsName(String osName) {
    this.osName = osName;
  }


  public AddsServiceMember osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * The version of the operating system installed in the machine.
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public AddsServiceMember pdcReachable(Boolean pdcReachable) {
    this.pdcReachable = pdcReachable;
    return this;
  }

  /**
   * Indicates if the primary domain controller is reachable or not.
   * @return pdcReachable
   */
  @javax.annotation.Nullable
  public Boolean getPdcReachable() {
    return pdcReachable;
  }

  public void setPdcReachable(Boolean pdcReachable) {
    this.pdcReachable = pdcReachable;
  }


  public AddsServiceMember properties(List<Item> properties) {
    this.properties = properties;
    return this;
  }

  public AddsServiceMember addPropertiesItem(Item propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

  /**
   * Server specific properties.
   * @return properties
   */
  @javax.annotation.Nullable
  public List<Item> getProperties() {
    return properties;
  }

  public void setProperties(List<Item> properties) {
    this.properties = properties;
  }


  public AddsServiceMember recommendedQfes(List<Hotfix> recommendedQfes) {
    this.recommendedQfes = recommendedQfes;
    return this;
  }

  public AddsServiceMember addRecommendedQfesItem(Hotfix recommendedQfesItem) {
    if (this.recommendedQfes == null) {
      this.recommendedQfes = new ArrayList<>();
    }
    this.recommendedQfes.add(recommendedQfesItem);
    return this;
  }

  /**
   * The list of recommended hotfixes for the server.
   * @return recommendedQfes
   */
  @javax.annotation.Nullable
  public List<Hotfix> getRecommendedQfes() {
    return recommendedQfes;
  }

  public void setRecommendedQfes(List<Hotfix> recommendedQfes) {
    this.recommendedQfes = recommendedQfes;
  }


  public AddsServiceMember resolvedAlerts(Integer resolvedAlerts) {
    this.resolvedAlerts = resolvedAlerts;
    return this;
  }

  /**
   * The total count of alerts that are resolved for this server.
   * @return resolvedAlerts
   */
  @javax.annotation.Nullable
  public Integer getResolvedAlerts() {
    return resolvedAlerts;
  }

  public void setResolvedAlerts(Integer resolvedAlerts) {
    this.resolvedAlerts = resolvedAlerts;
  }


  public AddsServiceMember role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The service role that is being monitored in the server.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public AddsServiceMember serverReportedMonitoringLevel(ServerReportedMonitoringLevelEnum serverReportedMonitoringLevel) {
    this.serverReportedMonitoringLevel = serverReportedMonitoringLevel;
    return this;
  }

  /**
   * The monitoring level reported by the server.
   * @return serverReportedMonitoringLevel
   */
  @javax.annotation.Nullable
  public ServerReportedMonitoringLevelEnum getServerReportedMonitoringLevel() {
    return serverReportedMonitoringLevel;
  }

  public void setServerReportedMonitoringLevel(ServerReportedMonitoringLevelEnum serverReportedMonitoringLevel) {
    this.serverReportedMonitoringLevel = serverReportedMonitoringLevel;
  }


  public AddsServiceMember serviceId(String serviceId) {
    this.serviceId = serviceId;
    return this;
  }

  /**
   * The service id to whom this server belongs.
   * @return serviceId
   */
  @javax.annotation.Nullable
  public String getServiceId() {
    return serviceId;
  }

  public void setServiceId(String serviceId) {
    this.serviceId = serviceId;
  }


  public AddsServiceMember serviceMemberId(String serviceMemberId) {
    this.serviceMemberId = serviceMemberId;
    return this;
  }

  /**
   * The id of the server.
   * @return serviceMemberId
   */
  @javax.annotation.Nullable
  public String getServiceMemberId() {
    return serviceMemberId;
  }

  public void setServiceMemberId(String serviceMemberId) {
    this.serviceMemberId = serviceMemberId;
  }


  public AddsServiceMember siteName(String siteName) {
    this.siteName = siteName;
    return this;
  }

  /**
   * The site name.
   * @return siteName
   */
  @javax.annotation.Nullable
  public String getSiteName() {
    return siteName;
  }

  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }


  public AddsServiceMember status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The health status of the server.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public AddsServiceMember sysvolState(Boolean sysvolState) {
    this.sysvolState = sysvolState;
    return this;
  }

  /**
   * Indicates if the SYSVOL state is healthy or not.
   * @return sysvolState
   */
  @javax.annotation.Nullable
  public Boolean getSysvolState() {
    return sysvolState;
  }

  public void setSysvolState(Boolean sysvolState) {
    this.sysvolState = sysvolState;
  }


  public AddsServiceMember tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The tenant id to whom this server belongs.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddsServiceMember addsServiceMember = (AddsServiceMember) o;
    return Objects.equals(this.activeAlerts, addsServiceMember.activeAlerts) &&
        Objects.equals(this.additionalInformation, addsServiceMember.additionalInformation) &&
        Objects.equals(this.addsRoles, addsServiceMember.addsRoles) &&
        Objects.equals(this.createdDate, addsServiceMember.createdDate) &&
        Objects.equals(this.dcTypes, addsServiceMember.dcTypes) &&
        Objects.equals(this.dimensions, addsServiceMember.dimensions) &&
        Objects.equals(this.disabled, addsServiceMember.disabled) &&
        Objects.equals(this.disabledReason, addsServiceMember.disabledReason) &&
        Objects.equals(this.domainName, addsServiceMember.domainName) &&
        Objects.equals(this.gcReachable, addsServiceMember.gcReachable) &&
        Objects.equals(this.installedQfes, addsServiceMember.installedQfes) &&
        Objects.equals(this.isAdvertising, addsServiceMember.isAdvertising) &&
        Objects.equals(this.lastDisabled, addsServiceMember.lastDisabled) &&
        Objects.equals(this.lastReboot, addsServiceMember.lastReboot) &&
        Objects.equals(this.lastServerReportedMonitoringLevelChange, addsServiceMember.lastServerReportedMonitoringLevelChange) &&
        Objects.equals(this.lastUpdated, addsServiceMember.lastUpdated) &&
        Objects.equals(this.machineId, addsServiceMember.machineId) &&
        Objects.equals(this.machineName, addsServiceMember.machineName) &&
        Objects.equals(this.monitoringConfigurationsComputed, addsServiceMember.monitoringConfigurationsComputed) &&
        Objects.equals(this.monitoringConfigurationsCustomized, addsServiceMember.monitoringConfigurationsCustomized) &&
        Objects.equals(this.osName, addsServiceMember.osName) &&
        Objects.equals(this.osVersion, addsServiceMember.osVersion) &&
        Objects.equals(this.pdcReachable, addsServiceMember.pdcReachable) &&
        Objects.equals(this.properties, addsServiceMember.properties) &&
        Objects.equals(this.recommendedQfes, addsServiceMember.recommendedQfes) &&
        Objects.equals(this.resolvedAlerts, addsServiceMember.resolvedAlerts) &&
        Objects.equals(this.role, addsServiceMember.role) &&
        Objects.equals(this.serverReportedMonitoringLevel, addsServiceMember.serverReportedMonitoringLevel) &&
        Objects.equals(this.serviceId, addsServiceMember.serviceId) &&
        Objects.equals(this.serviceMemberId, addsServiceMember.serviceMemberId) &&
        Objects.equals(this.siteName, addsServiceMember.siteName) &&
        Objects.equals(this.status, addsServiceMember.status) &&
        Objects.equals(this.sysvolState, addsServiceMember.sysvolState) &&
        Objects.equals(this.tenantId, addsServiceMember.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeAlerts, additionalInformation, addsRoles, createdDate, dcTypes, dimensions, disabled, disabledReason, domainName, gcReachable, installedQfes, isAdvertising, lastDisabled, lastReboot, lastServerReportedMonitoringLevelChange, lastUpdated, machineId, machineName, monitoringConfigurationsComputed, monitoringConfigurationsCustomized, osName, osVersion, pdcReachable, properties, recommendedQfes, resolvedAlerts, role, serverReportedMonitoringLevel, serviceId, serviceMemberId, siteName, status, sysvolState, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddsServiceMember {\n");
    sb.append("    activeAlerts: ").append(toIndentedString(activeAlerts)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    addsRoles: ").append(toIndentedString(addsRoles)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    dcTypes: ").append(toIndentedString(dcTypes)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    disabledReason: ").append(toIndentedString(disabledReason)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    gcReachable: ").append(toIndentedString(gcReachable)).append("\n");
    sb.append("    installedQfes: ").append(toIndentedString(installedQfes)).append("\n");
    sb.append("    isAdvertising: ").append(toIndentedString(isAdvertising)).append("\n");
    sb.append("    lastDisabled: ").append(toIndentedString(lastDisabled)).append("\n");
    sb.append("    lastReboot: ").append(toIndentedString(lastReboot)).append("\n");
    sb.append("    lastServerReportedMonitoringLevelChange: ").append(toIndentedString(lastServerReportedMonitoringLevelChange)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    machineId: ").append(toIndentedString(machineId)).append("\n");
    sb.append("    machineName: ").append(toIndentedString(machineName)).append("\n");
    sb.append("    monitoringConfigurationsComputed: ").append(toIndentedString(monitoringConfigurationsComputed)).append("\n");
    sb.append("    monitoringConfigurationsCustomized: ").append(toIndentedString(monitoringConfigurationsCustomized)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    pdcReachable: ").append(toIndentedString(pdcReachable)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    recommendedQfes: ").append(toIndentedString(recommendedQfes)).append("\n");
    sb.append("    resolvedAlerts: ").append(toIndentedString(resolvedAlerts)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    serverReportedMonitoringLevel: ").append(toIndentedString(serverReportedMonitoringLevel)).append("\n");
    sb.append("    serviceId: ").append(toIndentedString(serviceId)).append("\n");
    sb.append("    serviceMemberId: ").append(toIndentedString(serviceMemberId)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    sysvolState: ").append(toIndentedString(sysvolState)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeAlerts");
    openapiFields.add("additionalInformation");
    openapiFields.add("addsRoles");
    openapiFields.add("createdDate");
    openapiFields.add("dcTypes");
    openapiFields.add("dimensions");
    openapiFields.add("disabled");
    openapiFields.add("disabledReason");
    openapiFields.add("domainName");
    openapiFields.add("gcReachable");
    openapiFields.add("installedQfes");
    openapiFields.add("isAdvertising");
    openapiFields.add("lastDisabled");
    openapiFields.add("lastReboot");
    openapiFields.add("lastServerReportedMonitoringLevelChange");
    openapiFields.add("lastUpdated");
    openapiFields.add("machineId");
    openapiFields.add("machineName");
    openapiFields.add("monitoringConfigurationsComputed");
    openapiFields.add("monitoringConfigurationsCustomized");
    openapiFields.add("osName");
    openapiFields.add("osVersion");
    openapiFields.add("pdcReachable");
    openapiFields.add("properties");
    openapiFields.add("recommendedQfes");
    openapiFields.add("resolvedAlerts");
    openapiFields.add("role");
    openapiFields.add("serverReportedMonitoringLevel");
    openapiFields.add("serviceId");
    openapiFields.add("serviceMemberId");
    openapiFields.add("siteName");
    openapiFields.add("status");
    openapiFields.add("sysvolState");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddsServiceMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddsServiceMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddsServiceMember is not found in the empty JSON string", AddsServiceMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddsServiceMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddsServiceMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalInformation") != null && !jsonObj.get("additionalInformation").isJsonNull()) && !jsonObj.get("additionalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalInformation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("addsRoles") != null && !jsonObj.get("addsRoles").isJsonNull() && !jsonObj.get("addsRoles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addsRoles` to be an array in the JSON string but got `%s`", jsonObj.get("addsRoles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dcTypes") != null && !jsonObj.get("dcTypes").isJsonNull() && !jsonObj.get("dcTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dcTypes` to be an array in the JSON string but got `%s`", jsonObj.get("dcTypes").toString()));
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            Item.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("domainName") != null && !jsonObj.get("domainName").isJsonNull()) && !jsonObj.get("domainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      if (jsonObj.get("installedQfes") != null && !jsonObj.get("installedQfes").isJsonNull()) {
        JsonArray jsonArrayinstalledQfes = jsonObj.getAsJsonArray("installedQfes");
        if (jsonArrayinstalledQfes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("installedQfes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `installedQfes` to be an array in the JSON string but got `%s`", jsonObj.get("installedQfes").toString()));
          }

          // validate the optional field `installedQfes` (array)
          for (int i = 0; i < jsonArrayinstalledQfes.size(); i++) {
            Hotfix.validateJsonElement(jsonArrayinstalledQfes.get(i));
          };
        }
      }
      if ((jsonObj.get("machineId") != null && !jsonObj.get("machineId").isJsonNull()) && !jsonObj.get("machineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineId").toString()));
      }
      if ((jsonObj.get("machineName") != null && !jsonObj.get("machineName").isJsonNull()) && !jsonObj.get("machineName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineName").toString()));
      }
      if (jsonObj.get("monitoringConfigurationsComputed") != null && !jsonObj.get("monitoringConfigurationsComputed").isJsonNull()) {
        JsonArray jsonArraymonitoringConfigurationsComputed = jsonObj.getAsJsonArray("monitoringConfigurationsComputed");
        if (jsonArraymonitoringConfigurationsComputed != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monitoringConfigurationsComputed").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monitoringConfigurationsComputed` to be an array in the JSON string but got `%s`", jsonObj.get("monitoringConfigurationsComputed").toString()));
          }

          // validate the optional field `monitoringConfigurationsComputed` (array)
          for (int i = 0; i < jsonArraymonitoringConfigurationsComputed.size(); i++) {
            Item.validateJsonElement(jsonArraymonitoringConfigurationsComputed.get(i));
          };
        }
      }
      if (jsonObj.get("monitoringConfigurationsCustomized") != null && !jsonObj.get("monitoringConfigurationsCustomized").isJsonNull()) {
        JsonArray jsonArraymonitoringConfigurationsCustomized = jsonObj.getAsJsonArray("monitoringConfigurationsCustomized");
        if (jsonArraymonitoringConfigurationsCustomized != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monitoringConfigurationsCustomized").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monitoringConfigurationsCustomized` to be an array in the JSON string but got `%s`", jsonObj.get("monitoringConfigurationsCustomized").toString()));
          }

          // validate the optional field `monitoringConfigurationsCustomized` (array)
          for (int i = 0; i < jsonArraymonitoringConfigurationsCustomized.size(); i++) {
            Item.validateJsonElement(jsonArraymonitoringConfigurationsCustomized.get(i));
          };
        }
      }
      if ((jsonObj.get("osName") != null && !jsonObj.get("osName").isJsonNull()) && !jsonObj.get("osName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osName").toString()));
      }
      if ((jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) && !jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            Item.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
      if (jsonObj.get("recommendedQfes") != null && !jsonObj.get("recommendedQfes").isJsonNull()) {
        JsonArray jsonArrayrecommendedQfes = jsonObj.getAsJsonArray("recommendedQfes");
        if (jsonArrayrecommendedQfes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recommendedQfes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recommendedQfes` to be an array in the JSON string but got `%s`", jsonObj.get("recommendedQfes").toString()));
          }

          // validate the optional field `recommendedQfes` (array)
          for (int i = 0; i < jsonArrayrecommendedQfes.size(); i++) {
            Hotfix.validateJsonElement(jsonArrayrecommendedQfes.get(i));
          };
        }
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("serverReportedMonitoringLevel") != null && !jsonObj.get("serverReportedMonitoringLevel").isJsonNull()) && !jsonObj.get("serverReportedMonitoringLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverReportedMonitoringLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverReportedMonitoringLevel").toString()));
      }
      // validate the optional field `serverReportedMonitoringLevel`
      if (jsonObj.get("serverReportedMonitoringLevel") != null && !jsonObj.get("serverReportedMonitoringLevel").isJsonNull()) {
        ServerReportedMonitoringLevelEnum.validateJsonElement(jsonObj.get("serverReportedMonitoringLevel"));
      }
      if ((jsonObj.get("serviceId") != null && !jsonObj.get("serviceId").isJsonNull()) && !jsonObj.get("serviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceId").toString()));
      }
      if ((jsonObj.get("serviceMemberId") != null && !jsonObj.get("serviceMemberId").isJsonNull()) && !jsonObj.get("serviceMemberId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceMemberId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceMemberId").toString()));
      }
      if ((jsonObj.get("siteName") != null && !jsonObj.get("siteName").isJsonNull()) && !jsonObj.get("siteName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddsServiceMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddsServiceMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddsServiceMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddsServiceMember.class));

       return (TypeAdapter<T>) new TypeAdapter<AddsServiceMember>() {
           @Override
           public void write(JsonWriter out, AddsServiceMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddsServiceMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddsServiceMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddsServiceMember
   * @throws IOException if the JSON string is invalid with respect to AddsServiceMember
   */
  public static AddsServiceMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddsServiceMember.class);
  }

  /**
   * Convert an instance of AddsServiceMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

