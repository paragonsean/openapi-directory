/*
 * ADHybridHealthService
 * REST APIs for Azure Active Directory Connect Health
 *
 * The version of the OpenAPI document: 2014-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The objects with sync errors.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:56.328506-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjectWithSyncError {
  public static final String SERIALIZED_NAME_ATTRIBUTE_MULTI_VALUES = "attributeMultiValues";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_MULTI_VALUES)
  private Boolean attributeMultiValues;

  public static final String SERIALIZED_NAME_ATTRIBUTE_NAME = "attributeName";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAME)
  private String attributeName;

  public static final String SERIALIZED_NAME_ATTRIBUTE_VALUE = "attributeValue";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_VALUE)
  private String attributeValue;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DISTINGUISHED_NAME = "distinguishedName";
  @SerializedName(SERIALIZED_NAME_DISTINGUISHED_NAME)
  private String distinguishedName;

  public static final String SERIALIZED_NAME_ERROR_TYPE = "errorType";
  @SerializedName(SERIALIZED_NAME_ERROR_TYPE)
  private String errorType;

  public static final String SERIALIZED_NAME_MAIL = "mail";
  @SerializedName(SERIALIZED_NAME_MAIL)
  private String mail;

  public static final String SERIALIZED_NAME_MAX_LIMIT = "maxLimit";
  @SerializedName(SERIALIZED_NAME_MAX_LIMIT)
  private String maxLimit;

  public static final String SERIALIZED_NAME_MIN_LIMIT = "minLimit";
  @SerializedName(SERIALIZED_NAME_MIN_LIMIT)
  private String minLimit;

  public static final String SERIALIZED_NAME_MODIFIFED_VALUE = "modififedValue";
  @SerializedName(SERIALIZED_NAME_MODIFIFED_VALUE)
  private String modififedValue;

  public static final String SERIALIZED_NAME_OBJECT_GUID = "objectGuid";
  @SerializedName(SERIALIZED_NAME_OBJECT_GUID)
  private String objectGuid;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "objectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private String objectType;

  public static final String SERIALIZED_NAME_SOURCE_ANCHOR = "sourceAnchor";
  @SerializedName(SERIALIZED_NAME_SOURCE_ANCHOR)
  private String sourceAnchor;

  public static final String SERIALIZED_NAME_SOURCE_OF_AUTHORITY = "sourceOfAuthority";
  @SerializedName(SERIALIZED_NAME_SOURCE_OF_AUTHORITY)
  private String sourceOfAuthority;

  public static final String SERIALIZED_NAME_TIME_OCCURED = "timeOccured";
  @SerializedName(SERIALIZED_NAME_TIME_OCCURED)
  private OffsetDateTime timeOccured;

  public static final String SERIALIZED_NAME_USER_PRINCIPAL_NAME = "userPrincipalName";
  @SerializedName(SERIALIZED_NAME_USER_PRINCIPAL_NAME)
  private String userPrincipalName;

  public ObjectWithSyncError() {
  }

  public ObjectWithSyncError attributeMultiValues(Boolean attributeMultiValues) {
    this.attributeMultiValues = attributeMultiValues;
    return this;
  }

  /**
   * Indicates if the attribute is multi-valued or not.
   * @return attributeMultiValues
   */
  @javax.annotation.Nullable
  public Boolean getAttributeMultiValues() {
    return attributeMultiValues;
  }

  public void setAttributeMultiValues(Boolean attributeMultiValues) {
    this.attributeMultiValues = attributeMultiValues;
  }


  public ObjectWithSyncError attributeName(String attributeName) {
    this.attributeName = attributeName;
    return this;
  }

  /**
   * The attribute name.
   * @return attributeName
   */
  @javax.annotation.Nullable
  public String getAttributeName() {
    return attributeName;
  }

  public void setAttributeName(String attributeName) {
    this.attributeName = attributeName;
  }


  public ObjectWithSyncError attributeValue(String attributeValue) {
    this.attributeValue = attributeValue;
    return this;
  }

  /**
   * The attribute value.
   * @return attributeValue
   */
  @javax.annotation.Nullable
  public String getAttributeValue() {
    return attributeValue;
  }

  public void setAttributeValue(String attributeValue) {
    this.attributeValue = attributeValue;
  }


  public ObjectWithSyncError displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ObjectWithSyncError distinguishedName(String distinguishedName) {
    this.distinguishedName = distinguishedName;
    return this;
  }

  /**
   * The distinguished name.
   * @return distinguishedName
   */
  @javax.annotation.Nullable
  public String getDistinguishedName() {
    return distinguishedName;
  }

  public void setDistinguishedName(String distinguishedName) {
    this.distinguishedName = distinguishedName;
  }


  public ObjectWithSyncError errorType(String errorType) {
    this.errorType = errorType;
    return this;
  }

  /**
   * The error type.
   * @return errorType
   */
  @javax.annotation.Nullable
  public String getErrorType() {
    return errorType;
  }

  public void setErrorType(String errorType) {
    this.errorType = errorType;
  }


  public ObjectWithSyncError mail(String mail) {
    this.mail = mail;
    return this;
  }

  /**
   * The email.
   * @return mail
   */
  @javax.annotation.Nullable
  public String getMail() {
    return mail;
  }

  public void setMail(String mail) {
    this.mail = mail;
  }


  public ObjectWithSyncError maxLimit(String maxLimit) {
    this.maxLimit = maxLimit;
    return this;
  }

  /**
   * The maximum limit.
   * @return maxLimit
   */
  @javax.annotation.Nullable
  public String getMaxLimit() {
    return maxLimit;
  }

  public void setMaxLimit(String maxLimit) {
    this.maxLimit = maxLimit;
  }


  public ObjectWithSyncError minLimit(String minLimit) {
    this.minLimit = minLimit;
    return this;
  }

  /**
   * The minimum limit.
   * @return minLimit
   */
  @javax.annotation.Nullable
  public String getMinLimit() {
    return minLimit;
  }

  public void setMinLimit(String minLimit) {
    this.minLimit = minLimit;
  }


  public ObjectWithSyncError modififedValue(String modififedValue) {
    this.modififedValue = modififedValue;
    return this;
  }

  /**
   * The modified value.
   * @return modififedValue
   */
  @javax.annotation.Nullable
  public String getModififedValue() {
    return modififedValue;
  }

  public void setModififedValue(String modififedValue) {
    this.modififedValue = modififedValue;
  }


  public ObjectWithSyncError objectGuid(String objectGuid) {
    this.objectGuid = objectGuid;
    return this;
  }

  /**
   * The object guid.
   * @return objectGuid
   */
  @javax.annotation.Nullable
  public String getObjectGuid() {
    return objectGuid;
  }

  public void setObjectGuid(String objectGuid) {
    this.objectGuid = objectGuid;
  }


  public ObjectWithSyncError objectType(String objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * The object type.
   * @return objectType
   */
  @javax.annotation.Nullable
  public String getObjectType() {
    return objectType;
  }

  public void setObjectType(String objectType) {
    this.objectType = objectType;
  }


  public ObjectWithSyncError sourceAnchor(String sourceAnchor) {
    this.sourceAnchor = sourceAnchor;
    return this;
  }

  /**
   * The source anchor.
   * @return sourceAnchor
   */
  @javax.annotation.Nullable
  public String getSourceAnchor() {
    return sourceAnchor;
  }

  public void setSourceAnchor(String sourceAnchor) {
    this.sourceAnchor = sourceAnchor;
  }


  public ObjectWithSyncError sourceOfAuthority(String sourceOfAuthority) {
    this.sourceOfAuthority = sourceOfAuthority;
    return this;
  }

  /**
   * The source of authority.
   * @return sourceOfAuthority
   */
  @javax.annotation.Nullable
  public String getSourceOfAuthority() {
    return sourceOfAuthority;
  }

  public void setSourceOfAuthority(String sourceOfAuthority) {
    this.sourceOfAuthority = sourceOfAuthority;
  }


  public ObjectWithSyncError timeOccured(OffsetDateTime timeOccured) {
    this.timeOccured = timeOccured;
    return this;
  }

  /**
   * The date and time of occurrence.
   * @return timeOccured
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeOccured() {
    return timeOccured;
  }

  public void setTimeOccured(OffsetDateTime timeOccured) {
    this.timeOccured = timeOccured;
  }


  public ObjectWithSyncError userPrincipalName(String userPrincipalName) {
    this.userPrincipalName = userPrincipalName;
    return this;
  }

  /**
   * The user principal name.
   * @return userPrincipalName
   */
  @javax.annotation.Nullable
  public String getUserPrincipalName() {
    return userPrincipalName;
  }

  public void setUserPrincipalName(String userPrincipalName) {
    this.userPrincipalName = userPrincipalName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectWithSyncError objectWithSyncError = (ObjectWithSyncError) o;
    return Objects.equals(this.attributeMultiValues, objectWithSyncError.attributeMultiValues) &&
        Objects.equals(this.attributeName, objectWithSyncError.attributeName) &&
        Objects.equals(this.attributeValue, objectWithSyncError.attributeValue) &&
        Objects.equals(this.displayName, objectWithSyncError.displayName) &&
        Objects.equals(this.distinguishedName, objectWithSyncError.distinguishedName) &&
        Objects.equals(this.errorType, objectWithSyncError.errorType) &&
        Objects.equals(this.mail, objectWithSyncError.mail) &&
        Objects.equals(this.maxLimit, objectWithSyncError.maxLimit) &&
        Objects.equals(this.minLimit, objectWithSyncError.minLimit) &&
        Objects.equals(this.modififedValue, objectWithSyncError.modififedValue) &&
        Objects.equals(this.objectGuid, objectWithSyncError.objectGuid) &&
        Objects.equals(this.objectType, objectWithSyncError.objectType) &&
        Objects.equals(this.sourceAnchor, objectWithSyncError.sourceAnchor) &&
        Objects.equals(this.sourceOfAuthority, objectWithSyncError.sourceOfAuthority) &&
        Objects.equals(this.timeOccured, objectWithSyncError.timeOccured) &&
        Objects.equals(this.userPrincipalName, objectWithSyncError.userPrincipalName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeMultiValues, attributeName, attributeValue, displayName, distinguishedName, errorType, mail, maxLimit, minLimit, modififedValue, objectGuid, objectType, sourceAnchor, sourceOfAuthority, timeOccured, userPrincipalName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectWithSyncError {\n");
    sb.append("    attributeMultiValues: ").append(toIndentedString(attributeMultiValues)).append("\n");
    sb.append("    attributeName: ").append(toIndentedString(attributeName)).append("\n");
    sb.append("    attributeValue: ").append(toIndentedString(attributeValue)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    distinguishedName: ").append(toIndentedString(distinguishedName)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("    mail: ").append(toIndentedString(mail)).append("\n");
    sb.append("    maxLimit: ").append(toIndentedString(maxLimit)).append("\n");
    sb.append("    minLimit: ").append(toIndentedString(minLimit)).append("\n");
    sb.append("    modififedValue: ").append(toIndentedString(modififedValue)).append("\n");
    sb.append("    objectGuid: ").append(toIndentedString(objectGuid)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    sourceAnchor: ").append(toIndentedString(sourceAnchor)).append("\n");
    sb.append("    sourceOfAuthority: ").append(toIndentedString(sourceOfAuthority)).append("\n");
    sb.append("    timeOccured: ").append(toIndentedString(timeOccured)).append("\n");
    sb.append("    userPrincipalName: ").append(toIndentedString(userPrincipalName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributeMultiValues");
    openapiFields.add("attributeName");
    openapiFields.add("attributeValue");
    openapiFields.add("displayName");
    openapiFields.add("distinguishedName");
    openapiFields.add("errorType");
    openapiFields.add("mail");
    openapiFields.add("maxLimit");
    openapiFields.add("minLimit");
    openapiFields.add("modififedValue");
    openapiFields.add("objectGuid");
    openapiFields.add("objectType");
    openapiFields.add("sourceAnchor");
    openapiFields.add("sourceOfAuthority");
    openapiFields.add("timeOccured");
    openapiFields.add("userPrincipalName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjectWithSyncError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectWithSyncError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectWithSyncError is not found in the empty JSON string", ObjectWithSyncError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjectWithSyncError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjectWithSyncError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attributeName") != null && !jsonObj.get("attributeName").isJsonNull()) && !jsonObj.get("attributeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeName").toString()));
      }
      if ((jsonObj.get("attributeValue") != null && !jsonObj.get("attributeValue").isJsonNull()) && !jsonObj.get("attributeValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributeValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attributeValue").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("distinguishedName") != null && !jsonObj.get("distinguishedName").isJsonNull()) && !jsonObj.get("distinguishedName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distinguishedName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distinguishedName").toString()));
      }
      if ((jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) && !jsonObj.get("errorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorType").toString()));
      }
      if ((jsonObj.get("mail") != null && !jsonObj.get("mail").isJsonNull()) && !jsonObj.get("mail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mail").toString()));
      }
      if ((jsonObj.get("maxLimit") != null && !jsonObj.get("maxLimit").isJsonNull()) && !jsonObj.get("maxLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxLimit").toString()));
      }
      if ((jsonObj.get("minLimit") != null && !jsonObj.get("minLimit").isJsonNull()) && !jsonObj.get("minLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minLimit").toString()));
      }
      if ((jsonObj.get("modififedValue") != null && !jsonObj.get("modififedValue").isJsonNull()) && !jsonObj.get("modififedValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modififedValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modififedValue").toString()));
      }
      if ((jsonObj.get("objectGuid") != null && !jsonObj.get("objectGuid").isJsonNull()) && !jsonObj.get("objectGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectGuid").toString()));
      }
      if ((jsonObj.get("objectType") != null && !jsonObj.get("objectType").isJsonNull()) && !jsonObj.get("objectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectType").toString()));
      }
      if ((jsonObj.get("sourceAnchor") != null && !jsonObj.get("sourceAnchor").isJsonNull()) && !jsonObj.get("sourceAnchor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAnchor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAnchor").toString()));
      }
      if ((jsonObj.get("sourceOfAuthority") != null && !jsonObj.get("sourceOfAuthority").isJsonNull()) && !jsonObj.get("sourceOfAuthority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceOfAuthority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceOfAuthority").toString()));
      }
      if ((jsonObj.get("userPrincipalName") != null && !jsonObj.get("userPrincipalName").isJsonNull()) && !jsonObj.get("userPrincipalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userPrincipalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userPrincipalName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectWithSyncError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectWithSyncError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectWithSyncError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectWithSyncError.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectWithSyncError>() {
           @Override
           public void write(JsonWriter out, ObjectWithSyncError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectWithSyncError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjectWithSyncError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjectWithSyncError
   * @throws IOException if the JSON string is invalid with respect to ObjectWithSyncError
   */
  public static ObjectWithSyncError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectWithSyncError.class);
  }

  /**
   * Convert an instance of ObjectWithSyncError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

