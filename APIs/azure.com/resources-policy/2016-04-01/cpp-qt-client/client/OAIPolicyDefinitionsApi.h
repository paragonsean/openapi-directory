/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2016-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPolicyDefinitionsApi_H
#define OAI_OAIPolicyDefinitionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPolicyDefinition.h"
#include "OAIPolicyDefinitionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPolicyDefinitionsApi : public QObject {
    Q_OBJECT

public:
    OAIPolicyDefinitionsApi(const int timeOut = 0);
    ~OAIPolicyDefinitionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  policy_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPolicyDefinition [required]
    */
    virtual void policyDefinitionsCreateOrUpdate(const QString &policy_definition_name, const QString &api_version, const QString &subscription_id, const OAIPolicyDefinition &parameters);

    /**
    * @param[in]  policy_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void policyDefinitionsDelete(const QString &policy_definition_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  policy_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void policyDefinitionsGet(const QString &policy_definition_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void policyDefinitionsList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void policyDefinitionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void policyDefinitionsDeleteCallback(OAIHttpRequestWorker *worker);
    void policyDefinitionsGetCallback(OAIHttpRequestWorker *worker);
    void policyDefinitionsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void policyDefinitionsCreateOrUpdateSignal(OAIPolicyDefinition summary);
    void policyDefinitionsDeleteSignal();
    void policyDefinitionsGetSignal(OAIPolicyDefinition summary);
    void policyDefinitionsListSignal(OAIPolicyDefinitionListResult summary);


    void policyDefinitionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPolicyDefinition summary);
    void policyDefinitionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void policyDefinitionsGetSignalFull(OAIHttpRequestWorker *worker, OAIPolicyDefinition summary);
    void policyDefinitionsListSignalFull(OAIHttpRequestWorker *worker, OAIPolicyDefinitionListResult summary);

    Q_DECL_DEPRECATED_X("Use policyDefinitionsCreateOrUpdateSignalError() instead")
    void policyDefinitionsCreateOrUpdateSignalE(OAIPolicyDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyDefinitionsCreateOrUpdateSignalError(OAIPolicyDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyDefinitionsDeleteSignalError() instead")
    void policyDefinitionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void policyDefinitionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyDefinitionsGetSignalError() instead")
    void policyDefinitionsGetSignalE(OAIPolicyDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyDefinitionsGetSignalError(OAIPolicyDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyDefinitionsListSignalError() instead")
    void policyDefinitionsListSignalE(OAIPolicyDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyDefinitionsListSignalError(OAIPolicyDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use policyDefinitionsCreateOrUpdateSignalErrorFull() instead")
    void policyDefinitionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyDefinitionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyDefinitionsDeleteSignalErrorFull() instead")
    void policyDefinitionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyDefinitionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyDefinitionsGetSignalErrorFull() instead")
    void policyDefinitionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyDefinitionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyDefinitionsListSignalErrorFull() instead")
    void policyDefinitionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyDefinitionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
