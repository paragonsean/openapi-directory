/*
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2016-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PolicyDefinition;
import org.openapitools.client.model.PolicyDefinitionListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolicyDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for policyDefinitionsCreateOrUpdate
     * @param policyDefinitionName The name of the policy definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The policy definition properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyDefinitionsCreateOrUpdateCall(String policyDefinitionName, String apiVersion, String subscriptionId, PolicyDefinition parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policydefinitions/{policyDefinitionName}"
            .replace("{" + "policyDefinitionName" + "}", localVarApiClient.escapeString(policyDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyDefinitionsCreateOrUpdateValidateBeforeCall(String policyDefinitionName, String apiVersion, String subscriptionId, PolicyDefinition parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyDefinitionName' is set
        if (policyDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'policyDefinitionName' when calling policyDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policyDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling policyDefinitionsCreateOrUpdate(Async)");
        }

        return policyDefinitionsCreateOrUpdateCall(policyDefinitionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a policy definition.
     * @param policyDefinitionName The name of the policy definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The policy definition properties. (required)
     * @return PolicyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy definition. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyDefinition policyDefinitionsCreateOrUpdate(String policyDefinitionName, String apiVersion, String subscriptionId, PolicyDefinition parameters) throws ApiException {
        ApiResponse<PolicyDefinition> localVarResp = policyDefinitionsCreateOrUpdateWithHttpInfo(policyDefinitionName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a policy definition.
     * @param policyDefinitionName The name of the policy definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The policy definition properties. (required)
     * @return ApiResponse&lt;PolicyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyDefinition> policyDefinitionsCreateOrUpdateWithHttpInfo(String policyDefinitionName, String apiVersion, String subscriptionId, PolicyDefinition parameters) throws ApiException {
        okhttp3.Call localVarCall = policyDefinitionsCreateOrUpdateValidateBeforeCall(policyDefinitionName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<PolicyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a policy definition.
     * @param policyDefinitionName The name of the policy definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The policy definition properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyDefinitionsCreateOrUpdateAsync(String policyDefinitionName, String apiVersion, String subscriptionId, PolicyDefinition parameters, final ApiCallback<PolicyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyDefinitionsCreateOrUpdateValidateBeforeCall(policyDefinitionName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<PolicyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyDefinitionsDelete
     * @param policyDefinitionName The name of the policy definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyDefinitionsDeleteCall(String policyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policydefinitions/{policyDefinitionName}"
            .replace("{" + "policyDefinitionName" + "}", localVarApiClient.escapeString(policyDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyDefinitionsDeleteValidateBeforeCall(String policyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyDefinitionName' is set
        if (policyDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'policyDefinitionName' when calling policyDefinitionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyDefinitionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policyDefinitionsDelete(Async)");
        }

        return policyDefinitionsDeleteCall(policyDefinitionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a policy definition.
     * @param policyDefinitionName The name of the policy definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void policyDefinitionsDelete(String policyDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        policyDefinitionsDeleteWithHttpInfo(policyDefinitionName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a policy definition.
     * @param policyDefinitionName The name of the policy definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policyDefinitionsDeleteWithHttpInfo(String policyDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = policyDefinitionsDeleteValidateBeforeCall(policyDefinitionName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a policy definition.
     * @param policyDefinitionName The name of the policy definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyDefinitionsDeleteAsync(String policyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyDefinitionsDeleteValidateBeforeCall(policyDefinitionName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyDefinitionsGet
     * @param policyDefinitionName The name of the policy definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyDefinitionsGetCall(String policyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policydefinitions/{policyDefinitionName}"
            .replace("{" + "policyDefinitionName" + "}", localVarApiClient.escapeString(policyDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyDefinitionsGetValidateBeforeCall(String policyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyDefinitionName' is set
        if (policyDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'policyDefinitionName' when calling policyDefinitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyDefinitionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policyDefinitionsGet(Async)");
        }

        return policyDefinitionsGetCall(policyDefinitionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the policy definition.
     * @param policyDefinitionName The name of the policy definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return PolicyDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy definition. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyDefinition policyDefinitionsGet(String policyDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PolicyDefinition> localVarResp = policyDefinitionsGetWithHttpInfo(policyDefinitionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the policy definition.
     * @param policyDefinitionName The name of the policy definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;PolicyDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyDefinition> policyDefinitionsGetWithHttpInfo(String policyDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = policyDefinitionsGetValidateBeforeCall(policyDefinitionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PolicyDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the policy definition.
     * @param policyDefinitionName The name of the policy definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyDefinitionsGetAsync(String policyDefinitionName, String apiVersion, String subscriptionId, final ApiCallback<PolicyDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyDefinitionsGetValidateBeforeCall(policyDefinitionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PolicyDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyDefinitionsList
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns ana array of policy definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyDefinitionsListCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policydefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyDefinitionsListValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyDefinitionsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policyDefinitionsList(Async)");
        }

        return policyDefinitionsListCall(apiVersion, subscriptionId, $filter, _callback);

    }

    /**
     * 
     * Gets all the policy definitions for a subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return PolicyDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns ana array of policy definitions. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyDefinitionListResult policyDefinitionsList(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        ApiResponse<PolicyDefinitionListResult> localVarResp = policyDefinitionsListWithHttpInfo(apiVersion, subscriptionId, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the policy definitions for a subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;PolicyDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns ana array of policy definitions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyDefinitionListResult> policyDefinitionsListWithHttpInfo(String apiVersion, String subscriptionId, String $filter) throws ApiException {
        okhttp3.Call localVarCall = policyDefinitionsListValidateBeforeCall(apiVersion, subscriptionId, $filter, null);
        Type localVarReturnType = new TypeToken<PolicyDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the policy definitions for a subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns ana array of policy definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyDefinitionsListAsync(String apiVersion, String subscriptionId, String $filter, final ApiCallback<PolicyDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyDefinitionsListValidateBeforeCall(apiVersion, subscriptionId, $filter, _callback);
        Type localVarReturnType = new TypeToken<PolicyDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
