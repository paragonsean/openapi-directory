/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2016-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyDefinitionProperties model module.
 * @module model/PolicyDefinitionProperties
 * @version 2016-04-01
 */
class PolicyDefinitionProperties {
    /**
     * Constructs a new <code>PolicyDefinitionProperties</code>.
     * The policy definition properties.
     * @alias module:model/PolicyDefinitionProperties
     */
    constructor() { 
        
        PolicyDefinitionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyDefinitionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyDefinitionProperties} obj Optional instance to populate.
     * @return {module:model/PolicyDefinitionProperties} The populated <code>PolicyDefinitionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyDefinitionProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('policyRule')) {
                obj['policyRule'] = ApiClient.convertToType(data['policyRule'], Object);
            }
            if (data.hasOwnProperty('policyType')) {
                obj['policyType'] = ApiClient.convertToType(data['policyType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyDefinitionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyDefinitionProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['policyType'] && !(typeof data['policyType'] === 'string' || data['policyType'] instanceof String)) {
            throw new Error("Expected the field `policyType` to be a primitive type in the JSON string but got " + data['policyType']);
        }

        return true;
    }


}



/**
 * The policy definition description.
 * @member {String} description
 */
PolicyDefinitionProperties.prototype['description'] = undefined;

/**
 * The display name of the policy definition.
 * @member {String} displayName
 */
PolicyDefinitionProperties.prototype['displayName'] = undefined;

/**
 * The policy rule.
 * @member {Object} policyRule
 */
PolicyDefinitionProperties.prototype['policyRule'] = undefined;

/**
 * The type of policy definition. Possible values are NotSpecified, BuiltIn, and Custom.
 * @member {module:model/PolicyDefinitionProperties.PolicyTypeEnum} policyType
 */
PolicyDefinitionProperties.prototype['policyType'] = undefined;





/**
 * Allowed values for the <code>policyType</code> property.
 * @enum {String}
 * @readonly
 */
PolicyDefinitionProperties['PolicyTypeEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "BuiltIn"
     * @const
     */
    "BuiltIn": "BuiltIn",

    /**
     * value: "Custom"
     * @const
     */
    "Custom": "Custom"
};



export default PolicyDefinitionProperties;

