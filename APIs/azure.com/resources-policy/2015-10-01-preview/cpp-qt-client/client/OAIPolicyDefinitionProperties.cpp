/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2015-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyDefinitionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyDefinitionProperties::OAIPolicyDefinitionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyDefinitionProperties::OAIPolicyDefinitionProperties() {
    this->initializeModel();
}

OAIPolicyDefinitionProperties::~OAIPolicyDefinitionProperties() {}

void OAIPolicyDefinitionProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_policy_rule_isSet = false;
    m_policy_rule_isValid = false;

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;
}

void OAIPolicyDefinitionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyDefinitionProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_policy_rule_isValid = ::OpenAPI::fromJsonValue(m_policy_rule, json[QString("policyRule")]);
    m_policy_rule_isSet = !json[QString("policyRule")].isNull() && m_policy_rule_isValid;

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("policyType")]);
    m_policy_type_isSet = !json[QString("policyType")].isNull() && m_policy_type_isValid;
}

QString OAIPolicyDefinitionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyDefinitionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_policy_rule_isSet) {
        obj.insert(QString("policyRule"), ::OpenAPI::toJsonValue(m_policy_rule));
    }
    if (m_policy_type_isSet) {
        obj.insert(QString("policyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    return obj;
}

QString OAIPolicyDefinitionProperties::getDescription() const {
    return m_description;
}
void OAIPolicyDefinitionProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPolicyDefinitionProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPolicyDefinitionProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPolicyDefinitionProperties::getDisplayName() const {
    return m_display_name;
}
void OAIPolicyDefinitionProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPolicyDefinitionProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPolicyDefinitionProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIObject OAIPolicyDefinitionProperties::getPolicyRule() const {
    return m_policy_rule;
}
void OAIPolicyDefinitionProperties::setPolicyRule(const OAIObject &policy_rule) {
    m_policy_rule = policy_rule;
    m_policy_rule_isSet = true;
}

bool OAIPolicyDefinitionProperties::is_policy_rule_Set() const{
    return m_policy_rule_isSet;
}

bool OAIPolicyDefinitionProperties::is_policy_rule_Valid() const{
    return m_policy_rule_isValid;
}

QString OAIPolicyDefinitionProperties::getPolicyType() const {
    return m_policy_type;
}
void OAIPolicyDefinitionProperties::setPolicyType(const QString &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAIPolicyDefinitionProperties::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAIPolicyDefinitionProperties::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

bool OAIPolicyDefinitionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyDefinitionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
