# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyAssignmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, policy_definition_id: str=None, scope: str=None):
        """PolicyAssignmentProperties - a model defined in OpenAPI

        :param display_name: The display_name of this PolicyAssignmentProperties.
        :param policy_definition_id: The policy_definition_id of this PolicyAssignmentProperties.
        :param scope: The scope of this PolicyAssignmentProperties.
        """
        self.openapi_types = {
            'display_name': str,
            'policy_definition_id': str,
            'scope': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'policy_definition_id': 'policyDefinitionId',
            'scope': 'scope'
        }

        self._display_name = display_name
        self._policy_definition_id = policy_definition_id
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyAssignmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyAssignmentProperties of this PolicyAssignmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this PolicyAssignmentProperties.

        The display name of the policy assignment.

        :return: The display_name of this PolicyAssignmentProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PolicyAssignmentProperties.

        The display name of the policy assignment.

        :param display_name: The display_name of this PolicyAssignmentProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def policy_definition_id(self):
        """Gets the policy_definition_id of this PolicyAssignmentProperties.

        The ID of the policy definition.

        :return: The policy_definition_id of this PolicyAssignmentProperties.
        :rtype: str
        """
        return self._policy_definition_id

    @policy_definition_id.setter
    def policy_definition_id(self, policy_definition_id):
        """Sets the policy_definition_id of this PolicyAssignmentProperties.

        The ID of the policy definition.

        :param policy_definition_id: The policy_definition_id of this PolicyAssignmentProperties.
        :type policy_definition_id: str
        """

        self._policy_definition_id = policy_definition_id

    @property
    def scope(self):
        """Gets the scope of this PolicyAssignmentProperties.

        The scope for the policy assignment.

        :return: The scope of this PolicyAssignmentProperties.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this PolicyAssignmentProperties.

        The scope for the policy assignment.

        :param scope: The scope of this PolicyAssignmentProperties.
        :type scope: str
        """

        self._scope = scope
