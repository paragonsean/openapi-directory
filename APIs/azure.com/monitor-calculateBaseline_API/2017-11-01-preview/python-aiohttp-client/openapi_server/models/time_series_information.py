# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeSeriesInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sensitivities: List[str]=None, timestamps: List[datetime]=None, values: List[float]=None):
        """TimeSeriesInformation - a model defined in OpenAPI

        :param sensitivities: The sensitivities of this TimeSeriesInformation.
        :param timestamps: The timestamps of this TimeSeriesInformation.
        :param values: The values of this TimeSeriesInformation.
        """
        self.openapi_types = {
            'sensitivities': List[str],
            'timestamps': List[datetime],
            'values': List[float]
        }

        self.attribute_map = {
            'sensitivities': 'sensitivities',
            'timestamps': 'timestamps',
            'values': 'values'
        }

        self._sensitivities = sensitivities
        self._timestamps = timestamps
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesInformation of this TimeSeriesInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensitivities(self):
        """Gets the sensitivities of this TimeSeriesInformation.

        the list of sensitivities for calculating the baseline.

        :return: The sensitivities of this TimeSeriesInformation.
        :rtype: List[str]
        """
        return self._sensitivities

    @sensitivities.setter
    def sensitivities(self, sensitivities):
        """Sets the sensitivities of this TimeSeriesInformation.

        the list of sensitivities for calculating the baseline.

        :param sensitivities: The sensitivities of this TimeSeriesInformation.
        :type sensitivities: List[str]
        """
        if sensitivities is None:
            raise ValueError("Invalid value for `sensitivities`, must not be `None`")

        self._sensitivities = sensitivities

    @property
    def timestamps(self):
        """Gets the timestamps of this TimeSeriesInformation.

        the array of timestamps of the baselines.

        :return: The timestamps of this TimeSeriesInformation.
        :rtype: List[datetime]
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this TimeSeriesInformation.

        the array of timestamps of the baselines.

        :param timestamps: The timestamps of this TimeSeriesInformation.
        :type timestamps: List[datetime]
        """

        self._timestamps = timestamps

    @property
    def values(self):
        """Gets the values of this TimeSeriesInformation.

        The metric values to calculate the baseline.

        :return: The values of this TimeSeriesInformation.
        :rtype: List[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this TimeSeriesInformation.

        The metric values to calculate the baseline.

        :param values: The values of this TimeSeriesInformation.
        :type values: List[float]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
