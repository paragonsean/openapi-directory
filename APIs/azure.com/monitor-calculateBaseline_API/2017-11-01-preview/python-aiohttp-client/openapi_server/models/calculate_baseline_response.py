# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.baseline import Baseline
from openapi_server import util


class CalculateBaselineResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, baseline: List[Baseline]=None, timestamps: List[datetime]=None, type: str=None):
        """CalculateBaselineResponse - a model defined in OpenAPI

        :param baseline: The baseline of this CalculateBaselineResponse.
        :param timestamps: The timestamps of this CalculateBaselineResponse.
        :param type: The type of this CalculateBaselineResponse.
        """
        self.openapi_types = {
            'baseline': List[Baseline],
            'timestamps': List[datetime],
            'type': str
        }

        self.attribute_map = {
            'baseline': 'baseline',
            'timestamps': 'timestamps',
            'type': 'type'
        }

        self._baseline = baseline
        self._timestamps = timestamps
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateBaselineResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalculateBaselineResponse of this CalculateBaselineResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def baseline(self):
        """Gets the baseline of this CalculateBaselineResponse.

        the baseline values for each sensitivity.

        :return: The baseline of this CalculateBaselineResponse.
        :rtype: List[Baseline]
        """
        return self._baseline

    @baseline.setter
    def baseline(self, baseline):
        """Sets the baseline of this CalculateBaselineResponse.

        the baseline values for each sensitivity.

        :param baseline: The baseline of this CalculateBaselineResponse.
        :type baseline: List[Baseline]
        """
        if baseline is None:
            raise ValueError("Invalid value for `baseline`, must not be `None`")

        self._baseline = baseline

    @property
    def timestamps(self):
        """Gets the timestamps of this CalculateBaselineResponse.

        the array of timestamps of the baselines.

        :return: The timestamps of this CalculateBaselineResponse.
        :rtype: List[datetime]
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this CalculateBaselineResponse.

        the array of timestamps of the baselines.

        :param timestamps: The timestamps of this CalculateBaselineResponse.
        :type timestamps: List[datetime]
        """

        self._timestamps = timestamps

    @property
    def type(self):
        """Gets the type of this CalculateBaselineResponse.

        the resource type of the baseline resource.

        :return: The type of this CalculateBaselineResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CalculateBaselineResponse.

        the resource type of the baseline resource.

        :param type: The type of this CalculateBaselineResponse.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
