/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesInformation::OAITimeSeriesInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesInformation::OAITimeSeriesInformation() {
    this->initializeModel();
}

OAITimeSeriesInformation::~OAITimeSeriesInformation() {}

void OAITimeSeriesInformation::initializeModel() {

    m_sensitivities_isSet = false;
    m_sensitivities_isValid = false;

    m_timestamps_isSet = false;
    m_timestamps_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAITimeSeriesInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesInformation::fromJsonObject(QJsonObject json) {

    m_sensitivities_isValid = ::OpenAPI::fromJsonValue(m_sensitivities, json[QString("sensitivities")]);
    m_sensitivities_isSet = !json[QString("sensitivities")].isNull() && m_sensitivities_isValid;

    m_timestamps_isValid = ::OpenAPI::fromJsonValue(m_timestamps, json[QString("timestamps")]);
    m_timestamps_isSet = !json[QString("timestamps")].isNull() && m_timestamps_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAITimeSeriesInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_sensitivities.size() > 0) {
        obj.insert(QString("sensitivities"), ::OpenAPI::toJsonValue(m_sensitivities));
    }
    if (m_timestamps.size() > 0) {
        obj.insert(QString("timestamps"), ::OpenAPI::toJsonValue(m_timestamps));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QList<QString> OAITimeSeriesInformation::getSensitivities() const {
    return m_sensitivities;
}
void OAITimeSeriesInformation::setSensitivities(const QList<QString> &sensitivities) {
    m_sensitivities = sensitivities;
    m_sensitivities_isSet = true;
}

bool OAITimeSeriesInformation::is_sensitivities_Set() const{
    return m_sensitivities_isSet;
}

bool OAITimeSeriesInformation::is_sensitivities_Valid() const{
    return m_sensitivities_isValid;
}

QList<QDateTime> OAITimeSeriesInformation::getTimestamps() const {
    return m_timestamps;
}
void OAITimeSeriesInformation::setTimestamps(const QList<QDateTime> &timestamps) {
    m_timestamps = timestamps;
    m_timestamps_isSet = true;
}

bool OAITimeSeriesInformation::is_timestamps_Set() const{
    return m_timestamps_isSet;
}

bool OAITimeSeriesInformation::is_timestamps_Valid() const{
    return m_timestamps_isValid;
}

QList<double> OAITimeSeriesInformation::getValues() const {
    return m_values;
}
void OAITimeSeriesInformation::setValues(const QList<double> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAITimeSeriesInformation::is_values_Set() const{
    return m_values_isSet;
}

bool OAITimeSeriesInformation::is_values_Valid() const{
    return m_values_isValid;
}

bool OAITimeSeriesInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sensitivities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sensitivities_isValid && m_values_isValid && true;
}

} // namespace OpenAPI
