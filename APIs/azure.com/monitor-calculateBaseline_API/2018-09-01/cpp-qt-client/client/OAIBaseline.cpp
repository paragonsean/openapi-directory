/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseline::OAIBaseline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseline::OAIBaseline() {
    this->initializeModel();
}

OAIBaseline::~OAIBaseline() {}

void OAIBaseline::initializeModel() {

    m_high_thresholds_isSet = false;
    m_high_thresholds_isValid = false;

    m_low_thresholds_isSet = false;
    m_low_thresholds_isValid = false;

    m_sensitivity_isSet = false;
    m_sensitivity_isValid = false;
}

void OAIBaseline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseline::fromJsonObject(QJsonObject json) {

    m_high_thresholds_isValid = ::OpenAPI::fromJsonValue(m_high_thresholds, json[QString("highThresholds")]);
    m_high_thresholds_isSet = !json[QString("highThresholds")].isNull() && m_high_thresholds_isValid;

    m_low_thresholds_isValid = ::OpenAPI::fromJsonValue(m_low_thresholds, json[QString("lowThresholds")]);
    m_low_thresholds_isSet = !json[QString("lowThresholds")].isNull() && m_low_thresholds_isValid;

    m_sensitivity_isValid = ::OpenAPI::fromJsonValue(m_sensitivity, json[QString("sensitivity")]);
    m_sensitivity_isSet = !json[QString("sensitivity")].isNull() && m_sensitivity_isValid;
}

QString OAIBaseline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseline::asJsonObject() const {
    QJsonObject obj;
    if (m_high_thresholds.size() > 0) {
        obj.insert(QString("highThresholds"), ::OpenAPI::toJsonValue(m_high_thresholds));
    }
    if (m_low_thresholds.size() > 0) {
        obj.insert(QString("lowThresholds"), ::OpenAPI::toJsonValue(m_low_thresholds));
    }
    if (m_sensitivity_isSet) {
        obj.insert(QString("sensitivity"), ::OpenAPI::toJsonValue(m_sensitivity));
    }
    return obj;
}

QList<double> OAIBaseline::getHighThresholds() const {
    return m_high_thresholds;
}
void OAIBaseline::setHighThresholds(const QList<double> &high_thresholds) {
    m_high_thresholds = high_thresholds;
    m_high_thresholds_isSet = true;
}

bool OAIBaseline::is_high_thresholds_Set() const{
    return m_high_thresholds_isSet;
}

bool OAIBaseline::is_high_thresholds_Valid() const{
    return m_high_thresholds_isValid;
}

QList<double> OAIBaseline::getLowThresholds() const {
    return m_low_thresholds;
}
void OAIBaseline::setLowThresholds(const QList<double> &low_thresholds) {
    m_low_thresholds = low_thresholds;
    m_low_thresholds_isSet = true;
}

bool OAIBaseline::is_low_thresholds_Set() const{
    return m_low_thresholds_isSet;
}

bool OAIBaseline::is_low_thresholds_Valid() const{
    return m_low_thresholds_isValid;
}

QString OAIBaseline::getSensitivity() const {
    return m_sensitivity;
}
void OAIBaseline::setSensitivity(const QString &sensitivity) {
    m_sensitivity = sensitivity;
    m_sensitivity_isSet = true;
}

bool OAIBaseline::is_sensitivity_Set() const{
    return m_sensitivity_isSet;
}

bool OAIBaseline::is_sensitivity_Valid() const{
    return m_sensitivity_isValid;
}

bool OAIBaseline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_high_thresholds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_thresholds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitivity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseline::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_high_thresholds_isValid && m_low_thresholds_isValid && m_sensitivity_isValid && true;
}

} // namespace OpenAPI
