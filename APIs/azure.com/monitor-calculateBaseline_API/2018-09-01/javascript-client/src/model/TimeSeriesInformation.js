/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TimeSeriesInformation model module.
 * @module model/TimeSeriesInformation
 * @version 2018-09-01
 */
class TimeSeriesInformation {
    /**
     * Constructs a new <code>TimeSeriesInformation</code>.
     * The time series info needed for calculating the baseline.
     * @alias module:model/TimeSeriesInformation
     * @param sensitivities {Array.<String>} The list of sensitivities for calculating the baseline.
     * @param values {Array.<Number>} The metric values to calculate the baseline.
     */
    constructor(sensitivities, values) { 
        
        TimeSeriesInformation.initialize(this, sensitivities, values);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sensitivities, values) { 
        obj['sensitivities'] = sensitivities;
        obj['values'] = values;
    }

    /**
     * Constructs a <code>TimeSeriesInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesInformation} obj Optional instance to populate.
     * @return {module:model/TimeSeriesInformation} The populated <code>TimeSeriesInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesInformation();

            if (data.hasOwnProperty('sensitivities')) {
                obj['sensitivities'] = ApiClient.convertToType(data['sensitivities'], ['String']);
            }
            if (data.hasOwnProperty('timestamps')) {
                obj['timestamps'] = ApiClient.convertToType(data['timestamps'], ['Date']);
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TimeSeriesInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sensitivities'])) {
            throw new Error("Expected the field `sensitivities` to be an array in the JSON data but got " + data['sensitivities']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['timestamps'])) {
            throw new Error("Expected the field `timestamps` to be an array in the JSON data but got " + data['timestamps']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}

TimeSeriesInformation.RequiredProperties = ["sensitivities", "values"];

/**
 * The list of sensitivities for calculating the baseline.
 * @member {Array.<String>} sensitivities
 */
TimeSeriesInformation.prototype['sensitivities'] = undefined;

/**
 * The array of timestamps of the baselines.
 * @member {Array.<Date>} timestamps
 */
TimeSeriesInformation.prototype['timestamps'] = undefined;

/**
 * The metric values to calculate the baseline.
 * @member {Array.<Number>} values
 */
TimeSeriesInformation.prototype['values'] = undefined;






export default TimeSeriesInformation;

