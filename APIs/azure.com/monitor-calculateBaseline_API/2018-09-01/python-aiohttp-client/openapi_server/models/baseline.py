# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Baseline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, high_thresholds: List[float]=None, low_thresholds: List[float]=None, sensitivity: str=None):
        """Baseline - a model defined in OpenAPI

        :param high_thresholds: The high_thresholds of this Baseline.
        :param low_thresholds: The low_thresholds of this Baseline.
        :param sensitivity: The sensitivity of this Baseline.
        """
        self.openapi_types = {
            'high_thresholds': List[float],
            'low_thresholds': List[float],
            'sensitivity': str
        }

        self.attribute_map = {
            'high_thresholds': 'highThresholds',
            'low_thresholds': 'lowThresholds',
            'sensitivity': 'sensitivity'
        }

        self._high_thresholds = high_thresholds
        self._low_thresholds = low_thresholds
        self._sensitivity = sensitivity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Baseline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Baseline of this Baseline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def high_thresholds(self):
        """Gets the high_thresholds of this Baseline.

        The high thresholds of the baseline.

        :return: The high_thresholds of this Baseline.
        :rtype: List[float]
        """
        return self._high_thresholds

    @high_thresholds.setter
    def high_thresholds(self, high_thresholds):
        """Sets the high_thresholds of this Baseline.

        The high thresholds of the baseline.

        :param high_thresholds: The high_thresholds of this Baseline.
        :type high_thresholds: List[float]
        """
        if high_thresholds is None:
            raise ValueError("Invalid value for `high_thresholds`, must not be `None`")

        self._high_thresholds = high_thresholds

    @property
    def low_thresholds(self):
        """Gets the low_thresholds of this Baseline.

        The low thresholds of the baseline.

        :return: The low_thresholds of this Baseline.
        :rtype: List[float]
        """
        return self._low_thresholds

    @low_thresholds.setter
    def low_thresholds(self, low_thresholds):
        """Sets the low_thresholds of this Baseline.

        The low thresholds of the baseline.

        :param low_thresholds: The low_thresholds of this Baseline.
        :type low_thresholds: List[float]
        """
        if low_thresholds is None:
            raise ValueError("Invalid value for `low_thresholds`, must not be `None`")

        self._low_thresholds = low_thresholds

    @property
    def sensitivity(self):
        """Gets the sensitivity of this Baseline.

        The sensitivity of the baseline.

        :return: The sensitivity of this Baseline.
        :rtype: str
        """
        return self._sensitivity

    @sensitivity.setter
    def sensitivity(self, sensitivity):
        """Sets the sensitivity of this Baseline.

        The sensitivity of the baseline.

        :param sensitivity: The sensitivity of this Baseline.
        :type sensitivity: str
        """
        allowed_values = ["Low", "Medium", "High"]  # noqa: E501
        if sensitivity not in allowed_values:
            raise ValueError(
                "Invalid value for `sensitivity` ({0}), must be one of {1}"
                .format(sensitivity, allowed_values)
            )

        self._sensitivity = sensitivity
