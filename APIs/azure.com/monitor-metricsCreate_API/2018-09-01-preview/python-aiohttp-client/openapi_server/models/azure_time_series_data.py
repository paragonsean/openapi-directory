# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AzureTimeSeriesData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, dim_values: List[str]=None, max: float=None, min: float=None, sum: float=None):
        """AzureTimeSeriesData - a model defined in OpenAPI

        :param count: The count of this AzureTimeSeriesData.
        :param dim_values: The dim_values of this AzureTimeSeriesData.
        :param max: The max of this AzureTimeSeriesData.
        :param min: The min of this AzureTimeSeriesData.
        :param sum: The sum of this AzureTimeSeriesData.
        """
        self.openapi_types = {
            'count': int,
            'dim_values': List[str],
            'max': float,
            'min': float,
            'sum': float
        }

        self.attribute_map = {
            'count': 'count',
            'dim_values': 'dimValues',
            'max': 'max',
            'min': 'min',
            'sum': 'sum'
        }

        self._count = count
        self._dim_values = dim_values
        self._max = max
        self._min = min
        self._sum = sum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureTimeSeriesData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureTimeSeriesData of this AzureTimeSeriesData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this AzureTimeSeriesData.

        Gets or sets Count value

        :return: The count of this AzureTimeSeriesData.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AzureTimeSeriesData.

        Gets or sets Count value

        :param count: The count of this AzureTimeSeriesData.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def dim_values(self):
        """Gets the dim_values of this AzureTimeSeriesData.

        Gets or sets dimension values

        :return: The dim_values of this AzureTimeSeriesData.
        :rtype: List[str]
        """
        return self._dim_values

    @dim_values.setter
    def dim_values(self, dim_values):
        """Sets the dim_values of this AzureTimeSeriesData.

        Gets or sets dimension values

        :param dim_values: The dim_values of this AzureTimeSeriesData.
        :type dim_values: List[str]
        """

        self._dim_values = dim_values

    @property
    def max(self):
        """Gets the max of this AzureTimeSeriesData.

        Gets or sets Max value

        :return: The max of this AzureTimeSeriesData.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this AzureTimeSeriesData.

        Gets or sets Max value

        :param max: The max of this AzureTimeSeriesData.
        :type max: float
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")

        self._max = max

    @property
    def min(self):
        """Gets the min of this AzureTimeSeriesData.

        Gets or sets Min value

        :return: The min of this AzureTimeSeriesData.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this AzureTimeSeriesData.

        Gets or sets Min value

        :param min: The min of this AzureTimeSeriesData.
        :type min: float
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")

        self._min = min

    @property
    def sum(self):
        """Gets the sum of this AzureTimeSeriesData.

        Gets or sets Sum value

        :return: The sum of this AzureTimeSeriesData.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this AzureTimeSeriesData.

        Gets or sets Sum value

        :param sum: The sum of this AzureTimeSeriesData.
        :type sum: float
        """
        if sum is None:
            raise ValueError("Invalid value for `sum`, must not be `None`")

        self._sum = sum
