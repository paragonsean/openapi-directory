# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.azure_metrics_data import AzureMetricsData
from openapi_server import util


class AzureMetricsDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: AzureMetricsData=None, time: str=None):
        """AzureMetricsDocument - a model defined in OpenAPI

        :param data: The data of this AzureMetricsDocument.
        :param time: The time of this AzureMetricsDocument.
        """
        self.openapi_types = {
            'data': AzureMetricsData,
            'time': str
        }

        self.attribute_map = {
            'data': 'data',
            'time': 'time'
        }

        self._data = data
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureMetricsDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureMetricsDocument of this AzureMetricsDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this AzureMetricsDocument.


        :return: The data of this AzureMetricsDocument.
        :rtype: AzureMetricsData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AzureMetricsDocument.


        :param data: The data of this AzureMetricsDocument.
        :type data: AzureMetricsData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def time(self):
        """Gets the time of this AzureMetricsDocument.

        Gets or sets Time property (in ISO 8601 format)

        :return: The time of this AzureMetricsDocument.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AzureMetricsDocument.

        Gets or sets Time property (in ISO 8601 format)

        :param time: The time of this AzureMetricsDocument.
        :type time: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
