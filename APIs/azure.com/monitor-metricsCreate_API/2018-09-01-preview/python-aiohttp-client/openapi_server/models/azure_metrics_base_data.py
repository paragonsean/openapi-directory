# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.azure_time_series_data import AzureTimeSeriesData
from openapi_server import util


class AzureMetricsBaseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dim_names: List[str]=None, metric: str=None, namespace: str=None, series: List[AzureTimeSeriesData]=None):
        """AzureMetricsBaseData - a model defined in OpenAPI

        :param dim_names: The dim_names of this AzureMetricsBaseData.
        :param metric: The metric of this AzureMetricsBaseData.
        :param namespace: The namespace of this AzureMetricsBaseData.
        :param series: The series of this AzureMetricsBaseData.
        """
        self.openapi_types = {
            'dim_names': List[str],
            'metric': str,
            'namespace': str,
            'series': List[AzureTimeSeriesData]
        }

        self.attribute_map = {
            'dim_names': 'dimNames',
            'metric': 'metric',
            'namespace': 'namespace',
            'series': 'series'
        }

        self._dim_names = dim_names
        self._metric = metric
        self._namespace = namespace
        self._series = series

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureMetricsBaseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureMetricsBaseData of this AzureMetricsBaseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dim_names(self):
        """Gets the dim_names of this AzureMetricsBaseData.

        Gets or sets the list of dimension names (optional)

        :return: The dim_names of this AzureMetricsBaseData.
        :rtype: List[str]
        """
        return self._dim_names

    @dim_names.setter
    def dim_names(self, dim_names):
        """Sets the dim_names of this AzureMetricsBaseData.

        Gets or sets the list of dimension names (optional)

        :param dim_names: The dim_names of this AzureMetricsBaseData.
        :type dim_names: List[str]
        """

        self._dim_names = dim_names

    @property
    def metric(self):
        """Gets the metric of this AzureMetricsBaseData.

        Gets or sets the Metric name

        :return: The metric of this AzureMetricsBaseData.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this AzureMetricsBaseData.

        Gets or sets the Metric name

        :param metric: The metric of this AzureMetricsBaseData.
        :type metric: str
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")

        self._metric = metric

    @property
    def namespace(self):
        """Gets the namespace of this AzureMetricsBaseData.

        Gets or sets the Metric namespace

        :return: The namespace of this AzureMetricsBaseData.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this AzureMetricsBaseData.

        Gets or sets the Metric namespace

        :param namespace: The namespace of this AzureMetricsBaseData.
        :type namespace: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def series(self):
        """Gets the series of this AzureMetricsBaseData.

        Gets or sets the list of time series data for the metric (one per unique dimension combination)

        :return: The series of this AzureMetricsBaseData.
        :rtype: List[AzureTimeSeriesData]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this AzureMetricsBaseData.

        Gets or sets the list of time series data for the metric (one per unique dimension combination)

        :param series: The series of this AzureMetricsBaseData.
        :type series: List[AzureTimeSeriesData]
        """
        if series is None:
            raise ValueError("Invalid value for `series`, must not be `None`")

        self._series = series
