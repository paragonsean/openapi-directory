/**
 * Azure Metrics
 * A client for issuing REST requests to the Azure metrics service.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureMetricsBaseData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureMetricsBaseData::OAIAzureMetricsBaseData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureMetricsBaseData::OAIAzureMetricsBaseData() {
    this->initializeModel();
}

OAIAzureMetricsBaseData::~OAIAzureMetricsBaseData() {}

void OAIAzureMetricsBaseData::initializeModel() {

    m_dim_names_isSet = false;
    m_dim_names_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;
}

void OAIAzureMetricsBaseData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureMetricsBaseData::fromJsonObject(QJsonObject json) {

    m_dim_names_isValid = ::OpenAPI::fromJsonValue(m_dim_names, json[QString("dimNames")]);
    m_dim_names_isSet = !json[QString("dimNames")].isNull() && m_dim_names_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;
}

QString OAIAzureMetricsBaseData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureMetricsBaseData::asJsonObject() const {
    QJsonObject obj;
    if (m_dim_names.size() > 0) {
        obj.insert(QString("dimNames"), ::OpenAPI::toJsonValue(m_dim_names));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_series.size() > 0) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    return obj;
}

QList<QString> OAIAzureMetricsBaseData::getDimNames() const {
    return m_dim_names;
}
void OAIAzureMetricsBaseData::setDimNames(const QList<QString> &dim_names) {
    m_dim_names = dim_names;
    m_dim_names_isSet = true;
}

bool OAIAzureMetricsBaseData::is_dim_names_Set() const{
    return m_dim_names_isSet;
}

bool OAIAzureMetricsBaseData::is_dim_names_Valid() const{
    return m_dim_names_isValid;
}

QString OAIAzureMetricsBaseData::getMetric() const {
    return m_metric;
}
void OAIAzureMetricsBaseData::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIAzureMetricsBaseData::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIAzureMetricsBaseData::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIAzureMetricsBaseData::getRNamespace() const {
    return m_r_namespace;
}
void OAIAzureMetricsBaseData::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIAzureMetricsBaseData::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIAzureMetricsBaseData::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QList<OAIAzureTimeSeriesData> OAIAzureMetricsBaseData::getSeries() const {
    return m_series;
}
void OAIAzureMetricsBaseData::setSeries(const QList<OAIAzureTimeSeriesData> &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIAzureMetricsBaseData::is_series_Set() const{
    return m_series_isSet;
}

bool OAIAzureMetricsBaseData::is_series_Valid() const{
    return m_series_isValid;
}

bool OAIAzureMetricsBaseData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dim_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureMetricsBaseData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_isValid && m_r_namespace_isValid && m_series_isValid && true;
}

} // namespace OpenAPI
