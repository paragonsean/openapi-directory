/**
 * Azure Metrics
 * A client for issuing REST requests to the Azure metrics service.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureTimeSeriesData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureTimeSeriesData::OAIAzureTimeSeriesData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureTimeSeriesData::OAIAzureTimeSeriesData() {
    this->initializeModel();
}

OAIAzureTimeSeriesData::~OAIAzureTimeSeriesData() {}

void OAIAzureTimeSeriesData::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_dim_values_isSet = false;
    m_dim_values_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_min_isSet = false;
    m_min_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;
}

void OAIAzureTimeSeriesData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureTimeSeriesData::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_dim_values_isValid = ::OpenAPI::fromJsonValue(m_dim_values, json[QString("dimValues")]);
    m_dim_values_isSet = !json[QString("dimValues")].isNull() && m_dim_values_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_min_isValid = ::OpenAPI::fromJsonValue(m_min, json[QString("min")]);
    m_min_isSet = !json[QString("min")].isNull() && m_min_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;
}

QString OAIAzureTimeSeriesData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureTimeSeriesData::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_dim_values.size() > 0) {
        obj.insert(QString("dimValues"), ::OpenAPI::toJsonValue(m_dim_values));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_min_isSet) {
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(m_min));
    }
    if (m_sum_isSet) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    return obj;
}

qint32 OAIAzureTimeSeriesData::getCount() const {
    return m_count;
}
void OAIAzureTimeSeriesData::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIAzureTimeSeriesData::is_count_Set() const{
    return m_count_isSet;
}

bool OAIAzureTimeSeriesData::is_count_Valid() const{
    return m_count_isValid;
}

QList<QString> OAIAzureTimeSeriesData::getDimValues() const {
    return m_dim_values;
}
void OAIAzureTimeSeriesData::setDimValues(const QList<QString> &dim_values) {
    m_dim_values = dim_values;
    m_dim_values_isSet = true;
}

bool OAIAzureTimeSeriesData::is_dim_values_Set() const{
    return m_dim_values_isSet;
}

bool OAIAzureTimeSeriesData::is_dim_values_Valid() const{
    return m_dim_values_isValid;
}

double OAIAzureTimeSeriesData::getMax() const {
    return m_max;
}
void OAIAzureTimeSeriesData::setMax(const double &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIAzureTimeSeriesData::is_max_Set() const{
    return m_max_isSet;
}

bool OAIAzureTimeSeriesData::is_max_Valid() const{
    return m_max_isValid;
}

double OAIAzureTimeSeriesData::getMin() const {
    return m_min;
}
void OAIAzureTimeSeriesData::setMin(const double &min) {
    m_min = min;
    m_min_isSet = true;
}

bool OAIAzureTimeSeriesData::is_min_Set() const{
    return m_min_isSet;
}

bool OAIAzureTimeSeriesData::is_min_Valid() const{
    return m_min_isValid;
}

double OAIAzureTimeSeriesData::getSum() const {
    return m_sum;
}
void OAIAzureTimeSeriesData::setSum(const double &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIAzureTimeSeriesData::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIAzureTimeSeriesData::is_sum_Valid() const{
    return m_sum_isValid;
}

bool OAIAzureTimeSeriesData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dim_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureTimeSeriesData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_max_isValid && m_min_isValid && m_sum_isValid && true;
}

} // namespace OpenAPI
