/**
 * Azure Metrics
 * A client for issuing REST requests to the Azure metrics service.
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AzureTimeSeriesData from './AzureTimeSeriesData';

/**
 * The AzureMetricsBaseData model module.
 * @module model/AzureMetricsBaseData
 * @version 2018-09-01-preview
 */
class AzureMetricsBaseData {
    /**
     * Constructs a new <code>AzureMetricsBaseData</code>.
     * @alias module:model/AzureMetricsBaseData
     * @param metric {String} Gets or sets the Metric name
     * @param namespace {String} Gets or sets the Metric namespace
     * @param series {Array.<module:model/AzureTimeSeriesData>} Gets or sets the list of time series data for the metric (one per unique dimension combination)
     */
    constructor(metric, namespace, series) { 
        
        AzureMetricsBaseData.initialize(this, metric, namespace, series);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metric, namespace, series) { 
        obj['metric'] = metric;
        obj['namespace'] = namespace;
        obj['series'] = series;
    }

    /**
     * Constructs a <code>AzureMetricsBaseData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AzureMetricsBaseData} obj Optional instance to populate.
     * @return {module:model/AzureMetricsBaseData} The populated <code>AzureMetricsBaseData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AzureMetricsBaseData();

            if (data.hasOwnProperty('dimNames')) {
                obj['dimNames'] = ApiClient.convertToType(data['dimNames'], ['String']);
            }
            if (data.hasOwnProperty('metric')) {
                obj['metric'] = ApiClient.convertToType(data['metric'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ApiClient.convertToType(data['series'], [AzureTimeSeriesData]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AzureMetricsBaseData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AzureMetricsBaseData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AzureMetricsBaseData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dimNames'])) {
            throw new Error("Expected the field `dimNames` to be an array in the JSON data but got " + data['dimNames']);
        }
        // ensure the json data is a string
        if (data['metric'] && !(typeof data['metric'] === 'string' || data['metric'] instanceof String)) {
            throw new Error("Expected the field `metric` to be a primitive type in the JSON string but got " + data['metric']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        if (data['series']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['series'])) {
                throw new Error("Expected the field `series` to be an array in the JSON data but got " + data['series']);
            }
            // validate the optional field `series` (array)
            for (const item of data['series']) {
                AzureTimeSeriesData.validateJSON(item);
            };
        }

        return true;
    }


}

AzureMetricsBaseData.RequiredProperties = ["metric", "namespace", "series"];

/**
 * Gets or sets the list of dimension names (optional)
 * @member {Array.<String>} dimNames
 */
AzureMetricsBaseData.prototype['dimNames'] = undefined;

/**
 * Gets or sets the Metric name
 * @member {String} metric
 */
AzureMetricsBaseData.prototype['metric'] = undefined;

/**
 * Gets or sets the Metric namespace
 * @member {String} namespace
 */
AzureMetricsBaseData.prototype['namespace'] = undefined;

/**
 * Gets or sets the list of time series data for the metric (one per unique dimension combination)
 * @member {Array.<module:model/AzureTimeSeriesData>} series
 */
AzureMetricsBaseData.prototype['series'] = undefined;






export default AzureMetricsBaseData;

