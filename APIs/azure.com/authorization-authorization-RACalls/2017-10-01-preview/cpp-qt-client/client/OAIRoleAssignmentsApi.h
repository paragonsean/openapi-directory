/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoleAssignmentsApi_H
#define OAI_OAIRoleAssignmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRoleAssignment.h"
#include "OAIRoleAssignmentCreateParameters.h"
#include "OAIRoleAssignmentListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoleAssignmentsApi : public QObject {
    Q_OBJECT

public:
    OAIRoleAssignmentsApi(const int timeOut = 0);
    ~OAIRoleAssignmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  role_assignment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIRoleAssignmentCreateParameters [required]
    */
    virtual void roleAssignmentsCreate(const QString &scope, const QString &role_assignment_name, const QString &api_version, const OAIRoleAssignmentCreateParameters &parameters);

    /**
    * @param[in]  role_assignment_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIRoleAssignmentCreateParameters [required]
    */
    virtual void roleAssignmentsCreateById(const QString &role_assignment_id, const QString &api_version, const OAIRoleAssignmentCreateParameters &parameters);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  role_assignment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void roleAssignmentsDelete(const QString &scope, const QString &role_assignment_name, const QString &api_version);

    /**
    * @param[in]  role_assignment_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void roleAssignmentsDeleteById(const QString &role_assignment_id, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  role_assignment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void roleAssignmentsGet(const QString &scope, const QString &role_assignment_name, const QString &api_version);

    /**
    * @param[in]  role_assignment_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void roleAssignmentsGetById(const QString &role_assignment_id, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void roleAssignmentsList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_provider_namespace QString [required]
    * @param[in]  parent_resource_path QString [required]
    * @param[in]  resource_type QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void roleAssignmentsListForResource(const QString &resource_group_name, const QString &resource_provider_namespace, const QString &parent_resource_path, const QString &resource_type, const QString &resource_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void roleAssignmentsListForResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void roleAssignmentsListForScope(const QString &scope, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void roleAssignmentsCreateCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsCreateByIdCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsDeleteCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsGetCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsGetByIdCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsListCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsListForResourceCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsListForResourceGroupCallback(OAIHttpRequestWorker *worker);
    void roleAssignmentsListForScopeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void roleAssignmentsCreateSignal(OAIRoleAssignment summary);
    void roleAssignmentsCreateByIdSignal(OAIRoleAssignment summary);
    void roleAssignmentsDeleteSignal(OAIRoleAssignment summary);
    void roleAssignmentsDeleteByIdSignal(OAIRoleAssignment summary);
    void roleAssignmentsGetSignal(OAIRoleAssignment summary);
    void roleAssignmentsGetByIdSignal(OAIRoleAssignment summary);
    void roleAssignmentsListSignal(OAIRoleAssignmentListResult summary);
    void roleAssignmentsListForResourceSignal(OAIRoleAssignmentListResult summary);
    void roleAssignmentsListForResourceGroupSignal(OAIRoleAssignmentListResult summary);
    void roleAssignmentsListForScopeSignal(OAIRoleAssignmentListResult summary);


    void roleAssignmentsCreateSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignment summary);
    void roleAssignmentsCreateByIdSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignment summary);
    void roleAssignmentsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignment summary);
    void roleAssignmentsDeleteByIdSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignment summary);
    void roleAssignmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignment summary);
    void roleAssignmentsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignment summary);
    void roleAssignmentsListSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignmentListResult summary);
    void roleAssignmentsListForResourceSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignmentListResult summary);
    void roleAssignmentsListForResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignmentListResult summary);
    void roleAssignmentsListForScopeSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignmentListResult summary);

    Q_DECL_DEPRECATED_X("Use roleAssignmentsCreateSignalError() instead")
    void roleAssignmentsCreateSignalE(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsCreateSignalError(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsCreateByIdSignalError() instead")
    void roleAssignmentsCreateByIdSignalE(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsCreateByIdSignalError(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsDeleteSignalError() instead")
    void roleAssignmentsDeleteSignalE(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsDeleteSignalError(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsDeleteByIdSignalError() instead")
    void roleAssignmentsDeleteByIdSignalE(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsDeleteByIdSignalError(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsGetSignalError() instead")
    void roleAssignmentsGetSignalE(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsGetSignalError(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsGetByIdSignalError() instead")
    void roleAssignmentsGetByIdSignalE(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsGetByIdSignalError(OAIRoleAssignment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListSignalError() instead")
    void roleAssignmentsListSignalE(OAIRoleAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListSignalError(OAIRoleAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListForResourceSignalError() instead")
    void roleAssignmentsListForResourceSignalE(OAIRoleAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListForResourceSignalError(OAIRoleAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListForResourceGroupSignalError() instead")
    void roleAssignmentsListForResourceGroupSignalE(OAIRoleAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListForResourceGroupSignalError(OAIRoleAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListForScopeSignalError() instead")
    void roleAssignmentsListForScopeSignalE(OAIRoleAssignmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListForScopeSignalError(OAIRoleAssignmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use roleAssignmentsCreateSignalErrorFull() instead")
    void roleAssignmentsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsCreateByIdSignalErrorFull() instead")
    void roleAssignmentsCreateByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsCreateByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsDeleteSignalErrorFull() instead")
    void roleAssignmentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsDeleteByIdSignalErrorFull() instead")
    void roleAssignmentsDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsGetSignalErrorFull() instead")
    void roleAssignmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsGetByIdSignalErrorFull() instead")
    void roleAssignmentsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListSignalErrorFull() instead")
    void roleAssignmentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListForResourceSignalErrorFull() instead")
    void roleAssignmentsListForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListForResourceGroupSignalErrorFull() instead")
    void roleAssignmentsListForResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListForResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use roleAssignmentsListForScopeSignalErrorFull() instead")
    void roleAssignmentsListForScopeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void roleAssignmentsListForScopeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
