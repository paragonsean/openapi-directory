# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoleAssignmentFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_delegate: bool=None, principal_id: str=None):
        """RoleAssignmentFilter - a model defined in OpenAPI

        :param can_delegate: The can_delegate of this RoleAssignmentFilter.
        :param principal_id: The principal_id of this RoleAssignmentFilter.
        """
        self.openapi_types = {
            'can_delegate': bool,
            'principal_id': str
        }

        self.attribute_map = {
            'can_delegate': 'canDelegate',
            'principal_id': 'principalId'
        }

        self._can_delegate = can_delegate
        self._principal_id = principal_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleAssignmentFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleAssignmentFilter of this RoleAssignmentFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_delegate(self):
        """Gets the can_delegate of this RoleAssignmentFilter.

        The Delegation flag for the role assignment

        :return: The can_delegate of this RoleAssignmentFilter.
        :rtype: bool
        """
        return self._can_delegate

    @can_delegate.setter
    def can_delegate(self, can_delegate):
        """Sets the can_delegate of this RoleAssignmentFilter.

        The Delegation flag for the role assignment

        :param can_delegate: The can_delegate of this RoleAssignmentFilter.
        :type can_delegate: bool
        """

        self._can_delegate = can_delegate

    @property
    def principal_id(self):
        """Gets the principal_id of this RoleAssignmentFilter.

        Returns role assignment of the specific principal.

        :return: The principal_id of this RoleAssignmentFilter.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this RoleAssignmentFilter.

        Returns role assignment of the specific principal.

        :param principal_id: The principal_id of this RoleAssignmentFilter.
        :type principal_id: str
        """

        self._principal_id = principal_id
