/*
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RoleAssignment;
import org.openapitools.client.model.RoleAssignmentCreateParameters;
import org.openapitools.client.model.RoleAssignmentListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RoleAssignmentsApi
 */
@Disabled
public class RoleAssignmentsApiTest {

    private final RoleAssignmentsApi api = new RoleAssignmentsApi();

    /**
     * Creates a role assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAssignmentsCreateTest() throws ApiException {
        String scope = null;
        String roleAssignmentName = null;
        String apiVersion = null;
        RoleAssignmentCreateParameters parameters = null;
        RoleAssignment response = api.roleAssignmentsCreate(scope, roleAssignmentName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Creates a role assignment by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAssignmentsCreateByIdTest() throws ApiException {
        String roleAssignmentId = null;
        String apiVersion = null;
        RoleAssignmentCreateParameters parameters = null;
        RoleAssignment response = api.roleAssignmentsCreateById(roleAssignmentId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a role assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAssignmentsDeleteTest() throws ApiException {
        String scope = null;
        String roleAssignmentName = null;
        String apiVersion = null;
        RoleAssignment response = api.roleAssignmentsDelete(scope, roleAssignmentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a role assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAssignmentsDeleteByIdTest() throws ApiException {
        String roleAssignmentId = null;
        String apiVersion = null;
        RoleAssignment response = api.roleAssignmentsDeleteById(roleAssignmentId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the specified role assignment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAssignmentsGetTest() throws ApiException {
        String scope = null;
        String roleAssignmentName = null;
        String apiVersion = null;
        RoleAssignment response = api.roleAssignmentsGet(scope, roleAssignmentName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a role assignment by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAssignmentsGetByIdTest() throws ApiException {
        String roleAssignmentId = null;
        String apiVersion = null;
        RoleAssignment response = api.roleAssignmentsGetById(roleAssignmentId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all role assignments for the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAssignmentsListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        RoleAssignmentListResult response = api.roleAssignmentsList(apiVersion, subscriptionId, $filter);
        // TODO: test validations
    }

    /**
     * Gets role assignments for a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAssignmentsListForResourceTest() throws ApiException {
        String resourceGroupName = null;
        String resourceProviderNamespace = null;
        String parentResourcePath = null;
        String resourceType = null;
        String resourceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        RoleAssignmentListResult response = api.roleAssignmentsListForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, $filter);
        // TODO: test validations
    }

    /**
     * Gets role assignments for a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAssignmentsListForResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        RoleAssignmentListResult response = api.roleAssignmentsListForResourceGroup(resourceGroupName, apiVersion, subscriptionId, $filter);
        // TODO: test validations
    }

    /**
     * Gets role assignments for a scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void roleAssignmentsListForScopeTest() throws ApiException {
        String scope = null;
        String apiVersion = null;
        String $filter = null;
        RoleAssignmentListResult response = api.roleAssignmentsListForScope(scope, apiVersion, $filter);
        // TODO: test validations
    }

}
