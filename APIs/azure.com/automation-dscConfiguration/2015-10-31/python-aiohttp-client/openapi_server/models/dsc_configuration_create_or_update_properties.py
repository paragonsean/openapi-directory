# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_source import ContentSource
from openapi_server.models.dsc_configuration_parameter import DscConfigurationParameter
from openapi_server import util


class DscConfigurationCreateOrUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, log_progress: bool=None, log_verbose: bool=None, parameters: Dict[str, DscConfigurationParameter]=None, source: ContentSource=None):
        """DscConfigurationCreateOrUpdateProperties - a model defined in OpenAPI

        :param description: The description of this DscConfigurationCreateOrUpdateProperties.
        :param log_progress: The log_progress of this DscConfigurationCreateOrUpdateProperties.
        :param log_verbose: The log_verbose of this DscConfigurationCreateOrUpdateProperties.
        :param parameters: The parameters of this DscConfigurationCreateOrUpdateProperties.
        :param source: The source of this DscConfigurationCreateOrUpdateProperties.
        """
        self.openapi_types = {
            'description': str,
            'log_progress': bool,
            'log_verbose': bool,
            'parameters': Dict[str, DscConfigurationParameter],
            'source': ContentSource
        }

        self.attribute_map = {
            'description': 'description',
            'log_progress': 'logProgress',
            'log_verbose': 'logVerbose',
            'parameters': 'parameters',
            'source': 'source'
        }

        self._description = description
        self._log_progress = log_progress
        self._log_verbose = log_verbose
        self._parameters = parameters
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DscConfigurationCreateOrUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DscConfigurationCreateOrUpdateProperties of this DscConfigurationCreateOrUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DscConfigurationCreateOrUpdateProperties.

        Gets or sets the description of the configuration.

        :return: The description of this DscConfigurationCreateOrUpdateProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DscConfigurationCreateOrUpdateProperties.

        Gets or sets the description of the configuration.

        :param description: The description of this DscConfigurationCreateOrUpdateProperties.
        :type description: str
        """

        self._description = description

    @property
    def log_progress(self):
        """Gets the log_progress of this DscConfigurationCreateOrUpdateProperties.

        Gets or sets progress log option.

        :return: The log_progress of this DscConfigurationCreateOrUpdateProperties.
        :rtype: bool
        """
        return self._log_progress

    @log_progress.setter
    def log_progress(self, log_progress):
        """Sets the log_progress of this DscConfigurationCreateOrUpdateProperties.

        Gets or sets progress log option.

        :param log_progress: The log_progress of this DscConfigurationCreateOrUpdateProperties.
        :type log_progress: bool
        """

        self._log_progress = log_progress

    @property
    def log_verbose(self):
        """Gets the log_verbose of this DscConfigurationCreateOrUpdateProperties.

        Gets or sets verbose log option.

        :return: The log_verbose of this DscConfigurationCreateOrUpdateProperties.
        :rtype: bool
        """
        return self._log_verbose

    @log_verbose.setter
    def log_verbose(self, log_verbose):
        """Sets the log_verbose of this DscConfigurationCreateOrUpdateProperties.

        Gets or sets verbose log option.

        :param log_verbose: The log_verbose of this DscConfigurationCreateOrUpdateProperties.
        :type log_verbose: bool
        """

        self._log_verbose = log_verbose

    @property
    def parameters(self):
        """Gets the parameters of this DscConfigurationCreateOrUpdateProperties.

        Gets or sets the configuration parameters.

        :return: The parameters of this DscConfigurationCreateOrUpdateProperties.
        :rtype: Dict[str, DscConfigurationParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DscConfigurationCreateOrUpdateProperties.

        Gets or sets the configuration parameters.

        :param parameters: The parameters of this DscConfigurationCreateOrUpdateProperties.
        :type parameters: Dict[str, DscConfigurationParameter]
        """

        self._parameters = parameters

    @property
    def source(self):
        """Gets the source of this DscConfigurationCreateOrUpdateProperties.


        :return: The source of this DscConfigurationCreateOrUpdateProperties.
        :rtype: ContentSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DscConfigurationCreateOrUpdateProperties.


        :param source: The source of this DscConfigurationCreateOrUpdateProperties.
        :type source: ContentSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
