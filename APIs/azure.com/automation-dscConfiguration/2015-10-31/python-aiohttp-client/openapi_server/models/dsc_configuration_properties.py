# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_source import ContentSource
from openapi_server.models.dsc_configuration_parameter import DscConfigurationParameter
from openapi_server import util


class DscConfigurationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, description: str=None, job_count: int=None, last_modified_time: datetime=None, log_verbose: bool=None, node_configuration_count: int=None, parameters: Dict[str, DscConfigurationParameter]=None, provisioning_state: str=None, source: ContentSource=None, state: str=None):
        """DscConfigurationProperties - a model defined in OpenAPI

        :param creation_time: The creation_time of this DscConfigurationProperties.
        :param description: The description of this DscConfigurationProperties.
        :param job_count: The job_count of this DscConfigurationProperties.
        :param last_modified_time: The last_modified_time of this DscConfigurationProperties.
        :param log_verbose: The log_verbose of this DscConfigurationProperties.
        :param node_configuration_count: The node_configuration_count of this DscConfigurationProperties.
        :param parameters: The parameters of this DscConfigurationProperties.
        :param provisioning_state: The provisioning_state of this DscConfigurationProperties.
        :param source: The source of this DscConfigurationProperties.
        :param state: The state of this DscConfigurationProperties.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'description': str,
            'job_count': int,
            'last_modified_time': datetime,
            'log_verbose': bool,
            'node_configuration_count': int,
            'parameters': Dict[str, DscConfigurationParameter],
            'provisioning_state': str,
            'source': ContentSource,
            'state': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'description': 'description',
            'job_count': 'jobCount',
            'last_modified_time': 'lastModifiedTime',
            'log_verbose': 'logVerbose',
            'node_configuration_count': 'nodeConfigurationCount',
            'parameters': 'parameters',
            'provisioning_state': 'provisioningState',
            'source': 'source',
            'state': 'state'
        }

        self._creation_time = creation_time
        self._description = description
        self._job_count = job_count
        self._last_modified_time = last_modified_time
        self._log_verbose = log_verbose
        self._node_configuration_count = node_configuration_count
        self._parameters = parameters
        self._provisioning_state = provisioning_state
        self._source = source
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DscConfigurationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DscConfigurationProperties of this DscConfigurationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this DscConfigurationProperties.

        Gets or sets the creation time.

        :return: The creation_time of this DscConfigurationProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this DscConfigurationProperties.

        Gets or sets the creation time.

        :param creation_time: The creation_time of this DscConfigurationProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this DscConfigurationProperties.

        Gets or sets the description.

        :return: The description of this DscConfigurationProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DscConfigurationProperties.

        Gets or sets the description.

        :param description: The description of this DscConfigurationProperties.
        :type description: str
        """

        self._description = description

    @property
    def job_count(self):
        """Gets the job_count of this DscConfigurationProperties.

        Gets or sets the job count of the configuration.

        :return: The job_count of this DscConfigurationProperties.
        :rtype: int
        """
        return self._job_count

    @job_count.setter
    def job_count(self, job_count):
        """Sets the job_count of this DscConfigurationProperties.

        Gets or sets the job count of the configuration.

        :param job_count: The job_count of this DscConfigurationProperties.
        :type job_count: int
        """

        self._job_count = job_count

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DscConfigurationProperties.

        Gets or sets the last modified time.

        :return: The last_modified_time of this DscConfigurationProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DscConfigurationProperties.

        Gets or sets the last modified time.

        :param last_modified_time: The last_modified_time of this DscConfigurationProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def log_verbose(self):
        """Gets the log_verbose of this DscConfigurationProperties.

        Gets or sets verbose log option.

        :return: The log_verbose of this DscConfigurationProperties.
        :rtype: bool
        """
        return self._log_verbose

    @log_verbose.setter
    def log_verbose(self, log_verbose):
        """Sets the log_verbose of this DscConfigurationProperties.

        Gets or sets verbose log option.

        :param log_verbose: The log_verbose of this DscConfigurationProperties.
        :type log_verbose: bool
        """

        self._log_verbose = log_verbose

    @property
    def node_configuration_count(self):
        """Gets the node_configuration_count of this DscConfigurationProperties.

        Gets the number of compiled node configurations.

        :return: The node_configuration_count of this DscConfigurationProperties.
        :rtype: int
        """
        return self._node_configuration_count

    @node_configuration_count.setter
    def node_configuration_count(self, node_configuration_count):
        """Sets the node_configuration_count of this DscConfigurationProperties.

        Gets the number of compiled node configurations.

        :param node_configuration_count: The node_configuration_count of this DscConfigurationProperties.
        :type node_configuration_count: int
        """

        self._node_configuration_count = node_configuration_count

    @property
    def parameters(self):
        """Gets the parameters of this DscConfigurationProperties.

        Gets or sets the configuration parameters.

        :return: The parameters of this DscConfigurationProperties.
        :rtype: Dict[str, DscConfigurationParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DscConfigurationProperties.

        Gets or sets the configuration parameters.

        :param parameters: The parameters of this DscConfigurationProperties.
        :type parameters: Dict[str, DscConfigurationParameter]
        """

        self._parameters = parameters

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DscConfigurationProperties.

        Gets or sets the provisioning state of the configuration.

        :return: The provisioning_state of this DscConfigurationProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DscConfigurationProperties.

        Gets or sets the provisioning state of the configuration.

        :param provisioning_state: The provisioning_state of this DscConfigurationProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def source(self):
        """Gets the source of this DscConfigurationProperties.


        :return: The source of this DscConfigurationProperties.
        :rtype: ContentSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DscConfigurationProperties.


        :param source: The source of this DscConfigurationProperties.
        :type source: ContentSource
        """

        self._source = source

    @property
    def state(self):
        """Gets the state of this DscConfigurationProperties.

        Gets or sets the state of the configuration.

        :return: The state of this DscConfigurationProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DscConfigurationProperties.

        Gets or sets the state of the configuration.

        :param state: The state of this DscConfigurationProperties.
        :type state: str
        """
        allowed_values = ["New", "Edit", "Published"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
