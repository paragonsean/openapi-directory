/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDscConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDscConfigurationProperties::OAIDscConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDscConfigurationProperties::OAIDscConfigurationProperties() {
    this->initializeModel();
}

OAIDscConfigurationProperties::~OAIDscConfigurationProperties() {}

void OAIDscConfigurationProperties::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_job_count_isSet = false;
    m_job_count_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_log_verbose_isSet = false;
    m_log_verbose_isValid = false;

    m_node_configuration_count_isSet = false;
    m_node_configuration_count_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDscConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDscConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_job_count_isValid = ::OpenAPI::fromJsonValue(m_job_count, json[QString("jobCount")]);
    m_job_count_isSet = !json[QString("jobCount")].isNull() && m_job_count_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_log_verbose_isValid = ::OpenAPI::fromJsonValue(m_log_verbose, json[QString("logVerbose")]);
    m_log_verbose_isSet = !json[QString("logVerbose")].isNull() && m_log_verbose_isValid;

    m_node_configuration_count_isValid = ::OpenAPI::fromJsonValue(m_node_configuration_count, json[QString("nodeConfigurationCount")]);
    m_node_configuration_count_isSet = !json[QString("nodeConfigurationCount")].isNull() && m_node_configuration_count_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDscConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDscConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_job_count_isSet) {
        obj.insert(QString("jobCount"), ::OpenAPI::toJsonValue(m_job_count));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_log_verbose_isSet) {
        obj.insert(QString("logVerbose"), ::OpenAPI::toJsonValue(m_log_verbose));
    }
    if (m_node_configuration_count_isSet) {
        obj.insert(QString("nodeConfigurationCount"), ::OpenAPI::toJsonValue(m_node_configuration_count));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QDateTime OAIDscConfigurationProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIDscConfigurationProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDscConfigurationProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDscConfigurationProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIDscConfigurationProperties::getDescription() const {
    return m_description;
}
void OAIDscConfigurationProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDscConfigurationProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDscConfigurationProperties::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIDscConfigurationProperties::getJobCount() const {
    return m_job_count;
}
void OAIDscConfigurationProperties::setJobCount(const qint32 &job_count) {
    m_job_count = job_count;
    m_job_count_isSet = true;
}

bool OAIDscConfigurationProperties::is_job_count_Set() const{
    return m_job_count_isSet;
}

bool OAIDscConfigurationProperties::is_job_count_Valid() const{
    return m_job_count_isValid;
}

QDateTime OAIDscConfigurationProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIDscConfigurationProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIDscConfigurationProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIDscConfigurationProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

bool OAIDscConfigurationProperties::isLogVerbose() const {
    return m_log_verbose;
}
void OAIDscConfigurationProperties::setLogVerbose(const bool &log_verbose) {
    m_log_verbose = log_verbose;
    m_log_verbose_isSet = true;
}

bool OAIDscConfigurationProperties::is_log_verbose_Set() const{
    return m_log_verbose_isSet;
}

bool OAIDscConfigurationProperties::is_log_verbose_Valid() const{
    return m_log_verbose_isValid;
}

qint32 OAIDscConfigurationProperties::getNodeConfigurationCount() const {
    return m_node_configuration_count;
}
void OAIDscConfigurationProperties::setNodeConfigurationCount(const qint32 &node_configuration_count) {
    m_node_configuration_count = node_configuration_count;
    m_node_configuration_count_isSet = true;
}

bool OAIDscConfigurationProperties::is_node_configuration_count_Set() const{
    return m_node_configuration_count_isSet;
}

bool OAIDscConfigurationProperties::is_node_configuration_count_Valid() const{
    return m_node_configuration_count_isValid;
}

QMap<QString, OAIDscConfigurationParameter> OAIDscConfigurationProperties::getParameters() const {
    return m_parameters;
}
void OAIDscConfigurationProperties::setParameters(const QMap<QString, OAIDscConfigurationParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDscConfigurationProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDscConfigurationProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIDscConfigurationProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDscConfigurationProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDscConfigurationProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDscConfigurationProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIContentSource OAIDscConfigurationProperties::getSource() const {
    return m_source;
}
void OAIDscConfigurationProperties::setSource(const OAIContentSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDscConfigurationProperties::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDscConfigurationProperties::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIDscConfigurationProperties::getState() const {
    return m_state;
}
void OAIDscConfigurationProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDscConfigurationProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDscConfigurationProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDscConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_verbose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_configuration_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDscConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
