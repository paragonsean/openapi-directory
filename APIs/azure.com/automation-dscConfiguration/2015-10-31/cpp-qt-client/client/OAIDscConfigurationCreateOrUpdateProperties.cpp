/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDscConfigurationCreateOrUpdateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDscConfigurationCreateOrUpdateProperties::OAIDscConfigurationCreateOrUpdateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDscConfigurationCreateOrUpdateProperties::OAIDscConfigurationCreateOrUpdateProperties() {
    this->initializeModel();
}

OAIDscConfigurationCreateOrUpdateProperties::~OAIDscConfigurationCreateOrUpdateProperties() {}

void OAIDscConfigurationCreateOrUpdateProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_log_progress_isSet = false;
    m_log_progress_isValid = false;

    m_log_verbose_isSet = false;
    m_log_verbose_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIDscConfigurationCreateOrUpdateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDscConfigurationCreateOrUpdateProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_log_progress_isValid = ::OpenAPI::fromJsonValue(m_log_progress, json[QString("logProgress")]);
    m_log_progress_isSet = !json[QString("logProgress")].isNull() && m_log_progress_isValid;

    m_log_verbose_isValid = ::OpenAPI::fromJsonValue(m_log_verbose, json[QString("logVerbose")]);
    m_log_verbose_isSet = !json[QString("logVerbose")].isNull() && m_log_verbose_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIDscConfigurationCreateOrUpdateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDscConfigurationCreateOrUpdateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_log_progress_isSet) {
        obj.insert(QString("logProgress"), ::OpenAPI::toJsonValue(m_log_progress));
    }
    if (m_log_verbose_isSet) {
        obj.insert(QString("logVerbose"), ::OpenAPI::toJsonValue(m_log_verbose));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIDscConfigurationCreateOrUpdateProperties::getDescription() const {
    return m_description;
}
void OAIDscConfigurationCreateOrUpdateProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDscConfigurationCreateOrUpdateProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDscConfigurationCreateOrUpdateProperties::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIDscConfigurationCreateOrUpdateProperties::isLogProgress() const {
    return m_log_progress;
}
void OAIDscConfigurationCreateOrUpdateProperties::setLogProgress(const bool &log_progress) {
    m_log_progress = log_progress;
    m_log_progress_isSet = true;
}

bool OAIDscConfigurationCreateOrUpdateProperties::is_log_progress_Set() const{
    return m_log_progress_isSet;
}

bool OAIDscConfigurationCreateOrUpdateProperties::is_log_progress_Valid() const{
    return m_log_progress_isValid;
}

bool OAIDscConfigurationCreateOrUpdateProperties::isLogVerbose() const {
    return m_log_verbose;
}
void OAIDscConfigurationCreateOrUpdateProperties::setLogVerbose(const bool &log_verbose) {
    m_log_verbose = log_verbose;
    m_log_verbose_isSet = true;
}

bool OAIDscConfigurationCreateOrUpdateProperties::is_log_verbose_Set() const{
    return m_log_verbose_isSet;
}

bool OAIDscConfigurationCreateOrUpdateProperties::is_log_verbose_Valid() const{
    return m_log_verbose_isValid;
}

QMap<QString, OAIDscConfigurationParameter> OAIDscConfigurationCreateOrUpdateProperties::getParameters() const {
    return m_parameters;
}
void OAIDscConfigurationCreateOrUpdateProperties::setParameters(const QMap<QString, OAIDscConfigurationParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIDscConfigurationCreateOrUpdateProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIDscConfigurationCreateOrUpdateProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIContentSource OAIDscConfigurationCreateOrUpdateProperties::getSource() const {
    return m_source;
}
void OAIDscConfigurationCreateOrUpdateProperties::setSource(const OAIContentSource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDscConfigurationCreateOrUpdateProperties::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDscConfigurationCreateOrUpdateProperties::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIDscConfigurationCreateOrUpdateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_verbose_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDscConfigurationCreateOrUpdateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_isValid && true;
}

} // namespace OpenAPI
