/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentSource from './ContentSource';
import DscConfigurationParameter from './DscConfigurationParameter';

/**
 * The DscConfigurationProperties model module.
 * @module model/DscConfigurationProperties
 * @version 2015-10-31
 */
class DscConfigurationProperties {
    /**
     * Constructs a new <code>DscConfigurationProperties</code>.
     * Definition of the configuration property type.
     * @alias module:model/DscConfigurationProperties
     */
    constructor() { 
        
        DscConfigurationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DscConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DscConfigurationProperties} obj Optional instance to populate.
     * @return {module:model/DscConfigurationProperties} The populated <code>DscConfigurationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DscConfigurationProperties();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('jobCount')) {
                obj['jobCount'] = ApiClient.convertToType(data['jobCount'], 'Number');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('logVerbose')) {
                obj['logVerbose'] = ApiClient.convertToType(data['logVerbose'], 'Boolean');
            }
            if (data.hasOwnProperty('nodeConfigurationCount')) {
                obj['nodeConfigurationCount'] = ApiClient.convertToType(data['nodeConfigurationCount'], 'Number');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': DscConfigurationParameter});
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ContentSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DscConfigurationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DscConfigurationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ContentSource.validateJSON(data['source']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Gets or sets the creation time.
 * @member {Date} creationTime
 */
DscConfigurationProperties.prototype['creationTime'] = undefined;

/**
 * Gets or sets the description.
 * @member {String} description
 */
DscConfigurationProperties.prototype['description'] = undefined;

/**
 * Gets or sets the job count of the configuration.
 * @member {Number} jobCount
 */
DscConfigurationProperties.prototype['jobCount'] = undefined;

/**
 * Gets or sets the last modified time.
 * @member {Date} lastModifiedTime
 */
DscConfigurationProperties.prototype['lastModifiedTime'] = undefined;

/**
 * Gets or sets verbose log option.
 * @member {Boolean} logVerbose
 */
DscConfigurationProperties.prototype['logVerbose'] = undefined;

/**
 * Gets the number of compiled node configurations.
 * @member {Number} nodeConfigurationCount
 */
DscConfigurationProperties.prototype['nodeConfigurationCount'] = undefined;

/**
 * Gets or sets the configuration parameters.
 * @member {Object.<String, module:model/DscConfigurationParameter>} parameters
 */
DscConfigurationProperties.prototype['parameters'] = undefined;

/**
 * Gets or sets the provisioning state of the configuration.
 * @member {module:model/DscConfigurationProperties.ProvisioningStateEnum} provisioningState
 */
DscConfigurationProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ContentSource} source
 */
DscConfigurationProperties.prototype['source'] = undefined;

/**
 * Gets or sets the state of the configuration.
 * @member {module:model/DscConfigurationProperties.StateEnum} state
 */
DscConfigurationProperties.prototype['state'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
DscConfigurationProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DscConfigurationProperties['StateEnum'] = {

    /**
     * value: "New"
     * @const
     */
    "New": "New",

    /**
     * value: "Edit"
     * @const
     */
    "Edit": "Edit",

    /**
     * value: "Published"
     * @const
     */
    "Published": "Published"
};



export default DscConfigurationProperties;

