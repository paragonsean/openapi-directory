/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentHash from './ContentHash';

/**
 * The ContentSource model module.
 * @module model/ContentSource
 * @version 2015-10-31
 */
class ContentSource {
    /**
     * Constructs a new <code>ContentSource</code>.
     * Definition of the content source.
     * @alias module:model/ContentSource
     */
    constructor() { 
        
        ContentSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContentSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentSource} obj Optional instance to populate.
     * @return {module:model/ContentSource} The populated <code>ContentSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentSource();

            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ContentHash.constructFromObject(data['hash']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentSource</code>.
     */
    static validateJSON(data) {
        // validate the optional field `hash`
        if (data['hash']) { // data not null
          ContentHash.validateJSON(data['hash']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {module:model/ContentHash} hash
 */
ContentSource.prototype['hash'] = undefined;

/**
 * Gets or sets the content source type.
 * @member {module:model/ContentSource.TypeEnum} type
 */
ContentSource.prototype['type'] = undefined;

/**
 * Gets or sets the value of the content. This is based on the content source type.
 * @member {String} value
 */
ContentSource.prototype['value'] = undefined;

/**
 * Gets or sets the version of the content.
 * @member {String} version
 */
ContentSource.prototype['version'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ContentSource['TypeEnum'] = {

    /**
     * value: "embeddedContent"
     * @const
     */
    "embeddedContent": "embeddedContent",

    /**
     * value: "uri"
     * @const
     */
    "uri": "uri"
};



export default ContentSource;

