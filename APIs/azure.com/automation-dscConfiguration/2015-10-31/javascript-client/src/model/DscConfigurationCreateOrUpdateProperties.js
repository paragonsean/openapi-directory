/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentSource from './ContentSource';
import DscConfigurationParameter from './DscConfigurationParameter';

/**
 * The DscConfigurationCreateOrUpdateProperties model module.
 * @module model/DscConfigurationCreateOrUpdateProperties
 * @version 2015-10-31
 */
class DscConfigurationCreateOrUpdateProperties {
    /**
     * Constructs a new <code>DscConfigurationCreateOrUpdateProperties</code>.
     * The properties to create or update configuration.
     * @alias module:model/DscConfigurationCreateOrUpdateProperties
     * @param source {module:model/ContentSource} 
     */
    constructor(source) { 
        
        DscConfigurationCreateOrUpdateProperties.initialize(this, source);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, source) { 
        obj['source'] = source;
    }

    /**
     * Constructs a <code>DscConfigurationCreateOrUpdateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DscConfigurationCreateOrUpdateProperties} obj Optional instance to populate.
     * @return {module:model/DscConfigurationCreateOrUpdateProperties} The populated <code>DscConfigurationCreateOrUpdateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DscConfigurationCreateOrUpdateProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('logProgress')) {
                obj['logProgress'] = ApiClient.convertToType(data['logProgress'], 'Boolean');
            }
            if (data.hasOwnProperty('logVerbose')) {
                obj['logVerbose'] = ApiClient.convertToType(data['logVerbose'], 'Boolean');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': DscConfigurationParameter});
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ContentSource.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DscConfigurationCreateOrUpdateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DscConfigurationCreateOrUpdateProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DscConfigurationCreateOrUpdateProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          ContentSource.validateJSON(data['source']);
        }

        return true;
    }


}

DscConfigurationCreateOrUpdateProperties.RequiredProperties = ["source"];

/**
 * Gets or sets the description of the configuration.
 * @member {String} description
 */
DscConfigurationCreateOrUpdateProperties.prototype['description'] = undefined;

/**
 * Gets or sets progress log option.
 * @member {Boolean} logProgress
 */
DscConfigurationCreateOrUpdateProperties.prototype['logProgress'] = undefined;

/**
 * Gets or sets verbose log option.
 * @member {Boolean} logVerbose
 */
DscConfigurationCreateOrUpdateProperties.prototype['logVerbose'] = undefined;

/**
 * Gets or sets the configuration parameters.
 * @member {Object.<String, module:model/DscConfigurationParameter>} parameters
 */
DscConfigurationCreateOrUpdateProperties.prototype['parameters'] = undefined;

/**
 * @member {module:model/ContentSource} source
 */
DscConfigurationCreateOrUpdateProperties.prototype['source'] = undefined;






export default DscConfigurationCreateOrUpdateProperties;

