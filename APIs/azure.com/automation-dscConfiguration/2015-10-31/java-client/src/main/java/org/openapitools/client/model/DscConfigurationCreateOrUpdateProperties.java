/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ContentSource;
import org.openapitools.client.model.DscConfigurationParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties to create or update configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:15.822736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DscConfigurationCreateOrUpdateProperties {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOG_PROGRESS = "logProgress";
  @SerializedName(SERIALIZED_NAME_LOG_PROGRESS)
  private Boolean logProgress;

  public static final String SERIALIZED_NAME_LOG_VERBOSE = "logVerbose";
  @SerializedName(SERIALIZED_NAME_LOG_VERBOSE)
  private Boolean logVerbose;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, DscConfigurationParameter> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ContentSource source;

  public DscConfigurationCreateOrUpdateProperties() {
  }

  public DscConfigurationCreateOrUpdateProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets the description of the configuration.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DscConfigurationCreateOrUpdateProperties logProgress(Boolean logProgress) {
    this.logProgress = logProgress;
    return this;
  }

  /**
   * Gets or sets progress log option.
   * @return logProgress
   */
  @javax.annotation.Nullable
  public Boolean getLogProgress() {
    return logProgress;
  }

  public void setLogProgress(Boolean logProgress) {
    this.logProgress = logProgress;
  }


  public DscConfigurationCreateOrUpdateProperties logVerbose(Boolean logVerbose) {
    this.logVerbose = logVerbose;
    return this;
  }

  /**
   * Gets or sets verbose log option.
   * @return logVerbose
   */
  @javax.annotation.Nullable
  public Boolean getLogVerbose() {
    return logVerbose;
  }

  public void setLogVerbose(Boolean logVerbose) {
    this.logVerbose = logVerbose;
  }


  public DscConfigurationCreateOrUpdateProperties parameters(Map<String, DscConfigurationParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public DscConfigurationCreateOrUpdateProperties putParametersItem(String key, DscConfigurationParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Gets or sets the configuration parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, DscConfigurationParameter> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, DscConfigurationParameter> parameters) {
    this.parameters = parameters;
  }


  public DscConfigurationCreateOrUpdateProperties source(ContentSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public ContentSource getSource() {
    return source;
  }

  public void setSource(ContentSource source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DscConfigurationCreateOrUpdateProperties dscConfigurationCreateOrUpdateProperties = (DscConfigurationCreateOrUpdateProperties) o;
    return Objects.equals(this.description, dscConfigurationCreateOrUpdateProperties.description) &&
        Objects.equals(this.logProgress, dscConfigurationCreateOrUpdateProperties.logProgress) &&
        Objects.equals(this.logVerbose, dscConfigurationCreateOrUpdateProperties.logVerbose) &&
        Objects.equals(this.parameters, dscConfigurationCreateOrUpdateProperties.parameters) &&
        Objects.equals(this.source, dscConfigurationCreateOrUpdateProperties.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, logProgress, logVerbose, parameters, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DscConfigurationCreateOrUpdateProperties {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    logProgress: ").append(toIndentedString(logProgress)).append("\n");
    sb.append("    logVerbose: ").append(toIndentedString(logVerbose)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("logProgress");
    openapiFields.add("logVerbose");
    openapiFields.add("parameters");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("source");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DscConfigurationCreateOrUpdateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DscConfigurationCreateOrUpdateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DscConfigurationCreateOrUpdateProperties is not found in the empty JSON string", DscConfigurationCreateOrUpdateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DscConfigurationCreateOrUpdateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DscConfigurationCreateOrUpdateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DscConfigurationCreateOrUpdateProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `source`
      ContentSource.validateJsonElement(jsonObj.get("source"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DscConfigurationCreateOrUpdateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DscConfigurationCreateOrUpdateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DscConfigurationCreateOrUpdateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DscConfigurationCreateOrUpdateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DscConfigurationCreateOrUpdateProperties>() {
           @Override
           public void write(JsonWriter out, DscConfigurationCreateOrUpdateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DscConfigurationCreateOrUpdateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DscConfigurationCreateOrUpdateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DscConfigurationCreateOrUpdateProperties
   * @throws IOException if the JSON string is invalid with respect to DscConfigurationCreateOrUpdateProperties
   */
  public static DscConfigurationCreateOrUpdateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DscConfigurationCreateOrUpdateProperties.class);
  }

  /**
   * Convert an instance of DscConfigurationCreateOrUpdateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

