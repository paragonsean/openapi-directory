/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ContentSource;
import org.openapitools.client.model.DscConfigurationParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of the configuration property type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:15.822736-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DscConfigurationProperties {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_JOB_COUNT = "jobCount";
  @SerializedName(SERIALIZED_NAME_JOB_COUNT)
  private Integer jobCount;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_LOG_VERBOSE = "logVerbose";
  @SerializedName(SERIALIZED_NAME_LOG_VERBOSE)
  private Boolean logVerbose;

  public static final String SERIALIZED_NAME_NODE_CONFIGURATION_COUNT = "nodeConfigurationCount";
  @SerializedName(SERIALIZED_NAME_NODE_CONFIGURATION_COUNT)
  private Integer nodeConfigurationCount;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, DscConfigurationParameter> parameters = new HashMap<>();

  /**
   * Gets or sets the provisioning state of the configuration.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private ContentSource source;

  /**
   * Gets or sets the state of the configuration.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    NEW("New"),
    
    EDIT("Edit"),
    
    PUBLISHED("Published");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public DscConfigurationProperties() {
  }

  public DscConfigurationProperties creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Gets or sets the creation time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DscConfigurationProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets the description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DscConfigurationProperties jobCount(Integer jobCount) {
    this.jobCount = jobCount;
    return this;
  }

  /**
   * Gets or sets the job count of the configuration.
   * @return jobCount
   */
  @javax.annotation.Nullable
  public Integer getJobCount() {
    return jobCount;
  }

  public void setJobCount(Integer jobCount) {
    this.jobCount = jobCount;
  }


  public DscConfigurationProperties lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Gets or sets the last modified time.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public DscConfigurationProperties logVerbose(Boolean logVerbose) {
    this.logVerbose = logVerbose;
    return this;
  }

  /**
   * Gets or sets verbose log option.
   * @return logVerbose
   */
  @javax.annotation.Nullable
  public Boolean getLogVerbose() {
    return logVerbose;
  }

  public void setLogVerbose(Boolean logVerbose) {
    this.logVerbose = logVerbose;
  }


  public DscConfigurationProperties nodeConfigurationCount(Integer nodeConfigurationCount) {
    this.nodeConfigurationCount = nodeConfigurationCount;
    return this;
  }

  /**
   * Gets the number of compiled node configurations.
   * @return nodeConfigurationCount
   */
  @javax.annotation.Nullable
  public Integer getNodeConfigurationCount() {
    return nodeConfigurationCount;
  }

  public void setNodeConfigurationCount(Integer nodeConfigurationCount) {
    this.nodeConfigurationCount = nodeConfigurationCount;
  }


  public DscConfigurationProperties parameters(Map<String, DscConfigurationParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public DscConfigurationProperties putParametersItem(String key, DscConfigurationParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Gets or sets the configuration parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, DscConfigurationParameter> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, DscConfigurationParameter> parameters) {
    this.parameters = parameters;
  }


  public DscConfigurationProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets the provisioning state of the configuration.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  public DscConfigurationProperties source(ContentSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public ContentSource getSource() {
    return source;
  }

  public void setSource(ContentSource source) {
    this.source = source;
  }


  public DscConfigurationProperties state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Gets or sets the state of the configuration.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DscConfigurationProperties dscConfigurationProperties = (DscConfigurationProperties) o;
    return Objects.equals(this.creationTime, dscConfigurationProperties.creationTime) &&
        Objects.equals(this.description, dscConfigurationProperties.description) &&
        Objects.equals(this.jobCount, dscConfigurationProperties.jobCount) &&
        Objects.equals(this.lastModifiedTime, dscConfigurationProperties.lastModifiedTime) &&
        Objects.equals(this.logVerbose, dscConfigurationProperties.logVerbose) &&
        Objects.equals(this.nodeConfigurationCount, dscConfigurationProperties.nodeConfigurationCount) &&
        Objects.equals(this.parameters, dscConfigurationProperties.parameters) &&
        Objects.equals(this.provisioningState, dscConfigurationProperties.provisioningState) &&
        Objects.equals(this.source, dscConfigurationProperties.source) &&
        Objects.equals(this.state, dscConfigurationProperties.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, description, jobCount, lastModifiedTime, logVerbose, nodeConfigurationCount, parameters, provisioningState, source, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DscConfigurationProperties {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    jobCount: ").append(toIndentedString(jobCount)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    logVerbose: ").append(toIndentedString(logVerbose)).append("\n");
    sb.append("    nodeConfigurationCount: ").append(toIndentedString(nodeConfigurationCount)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("description");
    openapiFields.add("jobCount");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("logVerbose");
    openapiFields.add("nodeConfigurationCount");
    openapiFields.add("parameters");
    openapiFields.add("provisioningState");
    openapiFields.add("source");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DscConfigurationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DscConfigurationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DscConfigurationProperties is not found in the empty JSON string", DscConfigurationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DscConfigurationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DscConfigurationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        ContentSource.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DscConfigurationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DscConfigurationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DscConfigurationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DscConfigurationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DscConfigurationProperties>() {
           @Override
           public void write(JsonWriter out, DscConfigurationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DscConfigurationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DscConfigurationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DscConfigurationProperties
   * @throws IOException if the JSON string is invalid with respect to DscConfigurationProperties
   */
  public static DscConfigurationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DscConfigurationProperties.class);
  }

  /**
   * Convert an instance of DscConfigurationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

