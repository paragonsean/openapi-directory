# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PricingPlanProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cap: float=None, max_history_cap: float=None, plan_type: str=None, reset_hour: int=None, stop_send_notification_when_hit_cap: bool=None, stop_send_notification_when_hit_threshold: bool=None, warning_threshold: int=None):
        """PricingPlanProperties - a model defined in OpenAPI

        :param cap: The cap of this PricingPlanProperties.
        :param max_history_cap: The max_history_cap of this PricingPlanProperties.
        :param plan_type: The plan_type of this PricingPlanProperties.
        :param reset_hour: The reset_hour of this PricingPlanProperties.
        :param stop_send_notification_when_hit_cap: The stop_send_notification_when_hit_cap of this PricingPlanProperties.
        :param stop_send_notification_when_hit_threshold: The stop_send_notification_when_hit_threshold of this PricingPlanProperties.
        :param warning_threshold: The warning_threshold of this PricingPlanProperties.
        """
        self.openapi_types = {
            'cap': float,
            'max_history_cap': float,
            'plan_type': str,
            'reset_hour': int,
            'stop_send_notification_when_hit_cap': bool,
            'stop_send_notification_when_hit_threshold': bool,
            'warning_threshold': int
        }

        self.attribute_map = {
            'cap': 'cap',
            'max_history_cap': 'maxHistoryCap',
            'plan_type': 'planType',
            'reset_hour': 'resetHour',
            'stop_send_notification_when_hit_cap': 'stopSendNotificationWhenHitCap',
            'stop_send_notification_when_hit_threshold': 'stopSendNotificationWhenHitThreshold',
            'warning_threshold': 'warningThreshold'
        }

        self._cap = cap
        self._max_history_cap = max_history_cap
        self._plan_type = plan_type
        self._reset_hour = reset_hour
        self._stop_send_notification_when_hit_cap = stop_send_notification_when_hit_cap
        self._stop_send_notification_when_hit_threshold = stop_send_notification_when_hit_threshold
        self._warning_threshold = warning_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PricingPlanProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PricingPlanProperties of this PricingPlanProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cap(self):
        """Gets the cap of this PricingPlanProperties.

        Daily data volume cap in GB.

        :return: The cap of this PricingPlanProperties.
        :rtype: float
        """
        return self._cap

    @cap.setter
    def cap(self, cap):
        """Sets the cap of this PricingPlanProperties.

        Daily data volume cap in GB.

        :param cap: The cap of this PricingPlanProperties.
        :type cap: float
        """

        self._cap = cap

    @property
    def max_history_cap(self):
        """Gets the max_history_cap of this PricingPlanProperties.

        Maximum daily data volume cap that the user can set for this component.

        :return: The max_history_cap of this PricingPlanProperties.
        :rtype: float
        """
        return self._max_history_cap

    @max_history_cap.setter
    def max_history_cap(self, max_history_cap):
        """Sets the max_history_cap of this PricingPlanProperties.

        Maximum daily data volume cap that the user can set for this component.

        :param max_history_cap: The max_history_cap of this PricingPlanProperties.
        :type max_history_cap: float
        """

        self._max_history_cap = max_history_cap

    @property
    def plan_type(self):
        """Gets the plan_type of this PricingPlanProperties.

        Pricing Plan Type Name.

        :return: The plan_type of this PricingPlanProperties.
        :rtype: str
        """
        return self._plan_type

    @plan_type.setter
    def plan_type(self, plan_type):
        """Sets the plan_type of this PricingPlanProperties.

        Pricing Plan Type Name.

        :param plan_type: The plan_type of this PricingPlanProperties.
        :type plan_type: str
        """

        self._plan_type = plan_type

    @property
    def reset_hour(self):
        """Gets the reset_hour of this PricingPlanProperties.

        Daily data volume cap UTC reset hour.

        :return: The reset_hour of this PricingPlanProperties.
        :rtype: int
        """
        return self._reset_hour

    @reset_hour.setter
    def reset_hour(self, reset_hour):
        """Sets the reset_hour of this PricingPlanProperties.

        Daily data volume cap UTC reset hour.

        :param reset_hour: The reset_hour of this PricingPlanProperties.
        :type reset_hour: int
        """

        self._reset_hour = reset_hour

    @property
    def stop_send_notification_when_hit_cap(self):
        """Gets the stop_send_notification_when_hit_cap of this PricingPlanProperties.

        Do not send a notification email when the daily data volume cap is met.

        :return: The stop_send_notification_when_hit_cap of this PricingPlanProperties.
        :rtype: bool
        """
        return self._stop_send_notification_when_hit_cap

    @stop_send_notification_when_hit_cap.setter
    def stop_send_notification_when_hit_cap(self, stop_send_notification_when_hit_cap):
        """Sets the stop_send_notification_when_hit_cap of this PricingPlanProperties.

        Do not send a notification email when the daily data volume cap is met.

        :param stop_send_notification_when_hit_cap: The stop_send_notification_when_hit_cap of this PricingPlanProperties.
        :type stop_send_notification_when_hit_cap: bool
        """

        self._stop_send_notification_when_hit_cap = stop_send_notification_when_hit_cap

    @property
    def stop_send_notification_when_hit_threshold(self):
        """Gets the stop_send_notification_when_hit_threshold of this PricingPlanProperties.

        Reserved, not used for now.

        :return: The stop_send_notification_when_hit_threshold of this PricingPlanProperties.
        :rtype: bool
        """
        return self._stop_send_notification_when_hit_threshold

    @stop_send_notification_when_hit_threshold.setter
    def stop_send_notification_when_hit_threshold(self, stop_send_notification_when_hit_threshold):
        """Sets the stop_send_notification_when_hit_threshold of this PricingPlanProperties.

        Reserved, not used for now.

        :param stop_send_notification_when_hit_threshold: The stop_send_notification_when_hit_threshold of this PricingPlanProperties.
        :type stop_send_notification_when_hit_threshold: bool
        """

        self._stop_send_notification_when_hit_threshold = stop_send_notification_when_hit_threshold

    @property
    def warning_threshold(self):
        """Gets the warning_threshold of this PricingPlanProperties.

        Reserved, not used for now.

        :return: The warning_threshold of this PricingPlanProperties.
        :rtype: int
        """
        return self._warning_threshold

    @warning_threshold.setter
    def warning_threshold(self, warning_threshold):
        """Sets the warning_threshold of this PricingPlanProperties.

        Reserved, not used for now.

        :param warning_threshold: The warning_threshold of this PricingPlanProperties.
        :type warning_threshold: int
        """

        self._warning_threshold = warning_threshold
