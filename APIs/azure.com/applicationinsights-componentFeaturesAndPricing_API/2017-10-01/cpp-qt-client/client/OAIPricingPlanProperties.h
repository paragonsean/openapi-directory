/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for selecting pricing plans and options.
 *
 * The version of the OpenAPI document: 2017-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPricingPlanProperties.h
 *
 * An Application Insights component daily data volume cap
 */

#ifndef OAIPricingPlanProperties_H
#define OAIPricingPlanProperties_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPricingPlanProperties : public OAIObject {
public:
    OAIPricingPlanProperties();
    OAIPricingPlanProperties(QString json);
    ~OAIPricingPlanProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCap() const;
    void setCap(const double &cap);
    bool is_cap_Set() const;
    bool is_cap_Valid() const;

    double getMaxHistoryCap() const;
    void setMaxHistoryCap(const double &max_history_cap);
    bool is_max_history_cap_Set() const;
    bool is_max_history_cap_Valid() const;

    QString getPlanType() const;
    void setPlanType(const QString &plan_type);
    bool is_plan_type_Set() const;
    bool is_plan_type_Valid() const;

    qint32 getResetHour() const;
    void setResetHour(const qint32 &reset_hour);
    bool is_reset_hour_Set() const;
    bool is_reset_hour_Valid() const;

    bool isStopSendNotificationWhenHitCap() const;
    void setStopSendNotificationWhenHitCap(const bool &stop_send_notification_when_hit_cap);
    bool is_stop_send_notification_when_hit_cap_Set() const;
    bool is_stop_send_notification_when_hit_cap_Valid() const;

    bool isStopSendNotificationWhenHitThreshold() const;
    void setStopSendNotificationWhenHitThreshold(const bool &stop_send_notification_when_hit_threshold);
    bool is_stop_send_notification_when_hit_threshold_Set() const;
    bool is_stop_send_notification_when_hit_threshold_Valid() const;

    qint32 getWarningThreshold() const;
    void setWarningThreshold(const qint32 &warning_threshold);
    bool is_warning_threshold_Set() const;
    bool is_warning_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cap;
    bool m_cap_isSet;
    bool m_cap_isValid;

    double m_max_history_cap;
    bool m_max_history_cap_isSet;
    bool m_max_history_cap_isValid;

    QString m_plan_type;
    bool m_plan_type_isSet;
    bool m_plan_type_isValid;

    qint32 m_reset_hour;
    bool m_reset_hour_isSet;
    bool m_reset_hour_isValid;

    bool m_stop_send_notification_when_hit_cap;
    bool m_stop_send_notification_when_hit_cap_isSet;
    bool m_stop_send_notification_when_hit_cap_isValid;

    bool m_stop_send_notification_when_hit_threshold;
    bool m_stop_send_notification_when_hit_threshold_isSet;
    bool m_stop_send_notification_when_hit_threshold_isValid;

    qint32 m_warning_threshold;
    bool m_warning_threshold_isSet;
    bool m_warning_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPricingPlanProperties)

#endif // OAIPricingPlanProperties_H
