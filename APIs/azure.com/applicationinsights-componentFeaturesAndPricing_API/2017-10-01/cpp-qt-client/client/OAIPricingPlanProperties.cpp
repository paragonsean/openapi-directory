/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for selecting pricing plans and options.
 *
 * The version of the OpenAPI document: 2017-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPricingPlanProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPricingPlanProperties::OAIPricingPlanProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPricingPlanProperties::OAIPricingPlanProperties() {
    this->initializeModel();
}

OAIPricingPlanProperties::~OAIPricingPlanProperties() {}

void OAIPricingPlanProperties::initializeModel() {

    m_cap_isSet = false;
    m_cap_isValid = false;

    m_max_history_cap_isSet = false;
    m_max_history_cap_isValid = false;

    m_plan_type_isSet = false;
    m_plan_type_isValid = false;

    m_reset_hour_isSet = false;
    m_reset_hour_isValid = false;

    m_stop_send_notification_when_hit_cap_isSet = false;
    m_stop_send_notification_when_hit_cap_isValid = false;

    m_stop_send_notification_when_hit_threshold_isSet = false;
    m_stop_send_notification_when_hit_threshold_isValid = false;

    m_warning_threshold_isSet = false;
    m_warning_threshold_isValid = false;
}

void OAIPricingPlanProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPricingPlanProperties::fromJsonObject(QJsonObject json) {

    m_cap_isValid = ::OpenAPI::fromJsonValue(m_cap, json[QString("cap")]);
    m_cap_isSet = !json[QString("cap")].isNull() && m_cap_isValid;

    m_max_history_cap_isValid = ::OpenAPI::fromJsonValue(m_max_history_cap, json[QString("maxHistoryCap")]);
    m_max_history_cap_isSet = !json[QString("maxHistoryCap")].isNull() && m_max_history_cap_isValid;

    m_plan_type_isValid = ::OpenAPI::fromJsonValue(m_plan_type, json[QString("planType")]);
    m_plan_type_isSet = !json[QString("planType")].isNull() && m_plan_type_isValid;

    m_reset_hour_isValid = ::OpenAPI::fromJsonValue(m_reset_hour, json[QString("resetHour")]);
    m_reset_hour_isSet = !json[QString("resetHour")].isNull() && m_reset_hour_isValid;

    m_stop_send_notification_when_hit_cap_isValid = ::OpenAPI::fromJsonValue(m_stop_send_notification_when_hit_cap, json[QString("stopSendNotificationWhenHitCap")]);
    m_stop_send_notification_when_hit_cap_isSet = !json[QString("stopSendNotificationWhenHitCap")].isNull() && m_stop_send_notification_when_hit_cap_isValid;

    m_stop_send_notification_when_hit_threshold_isValid = ::OpenAPI::fromJsonValue(m_stop_send_notification_when_hit_threshold, json[QString("stopSendNotificationWhenHitThreshold")]);
    m_stop_send_notification_when_hit_threshold_isSet = !json[QString("stopSendNotificationWhenHitThreshold")].isNull() && m_stop_send_notification_when_hit_threshold_isValid;

    m_warning_threshold_isValid = ::OpenAPI::fromJsonValue(m_warning_threshold, json[QString("warningThreshold")]);
    m_warning_threshold_isSet = !json[QString("warningThreshold")].isNull() && m_warning_threshold_isValid;
}

QString OAIPricingPlanProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPricingPlanProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cap_isSet) {
        obj.insert(QString("cap"), ::OpenAPI::toJsonValue(m_cap));
    }
    if (m_max_history_cap_isSet) {
        obj.insert(QString("maxHistoryCap"), ::OpenAPI::toJsonValue(m_max_history_cap));
    }
    if (m_plan_type_isSet) {
        obj.insert(QString("planType"), ::OpenAPI::toJsonValue(m_plan_type));
    }
    if (m_reset_hour_isSet) {
        obj.insert(QString("resetHour"), ::OpenAPI::toJsonValue(m_reset_hour));
    }
    if (m_stop_send_notification_when_hit_cap_isSet) {
        obj.insert(QString("stopSendNotificationWhenHitCap"), ::OpenAPI::toJsonValue(m_stop_send_notification_when_hit_cap));
    }
    if (m_stop_send_notification_when_hit_threshold_isSet) {
        obj.insert(QString("stopSendNotificationWhenHitThreshold"), ::OpenAPI::toJsonValue(m_stop_send_notification_when_hit_threshold));
    }
    if (m_warning_threshold_isSet) {
        obj.insert(QString("warningThreshold"), ::OpenAPI::toJsonValue(m_warning_threshold));
    }
    return obj;
}

double OAIPricingPlanProperties::getCap() const {
    return m_cap;
}
void OAIPricingPlanProperties::setCap(const double &cap) {
    m_cap = cap;
    m_cap_isSet = true;
}

bool OAIPricingPlanProperties::is_cap_Set() const{
    return m_cap_isSet;
}

bool OAIPricingPlanProperties::is_cap_Valid() const{
    return m_cap_isValid;
}

double OAIPricingPlanProperties::getMaxHistoryCap() const {
    return m_max_history_cap;
}
void OAIPricingPlanProperties::setMaxHistoryCap(const double &max_history_cap) {
    m_max_history_cap = max_history_cap;
    m_max_history_cap_isSet = true;
}

bool OAIPricingPlanProperties::is_max_history_cap_Set() const{
    return m_max_history_cap_isSet;
}

bool OAIPricingPlanProperties::is_max_history_cap_Valid() const{
    return m_max_history_cap_isValid;
}

QString OAIPricingPlanProperties::getPlanType() const {
    return m_plan_type;
}
void OAIPricingPlanProperties::setPlanType(const QString &plan_type) {
    m_plan_type = plan_type;
    m_plan_type_isSet = true;
}

bool OAIPricingPlanProperties::is_plan_type_Set() const{
    return m_plan_type_isSet;
}

bool OAIPricingPlanProperties::is_plan_type_Valid() const{
    return m_plan_type_isValid;
}

qint32 OAIPricingPlanProperties::getResetHour() const {
    return m_reset_hour;
}
void OAIPricingPlanProperties::setResetHour(const qint32 &reset_hour) {
    m_reset_hour = reset_hour;
    m_reset_hour_isSet = true;
}

bool OAIPricingPlanProperties::is_reset_hour_Set() const{
    return m_reset_hour_isSet;
}

bool OAIPricingPlanProperties::is_reset_hour_Valid() const{
    return m_reset_hour_isValid;
}

bool OAIPricingPlanProperties::isStopSendNotificationWhenHitCap() const {
    return m_stop_send_notification_when_hit_cap;
}
void OAIPricingPlanProperties::setStopSendNotificationWhenHitCap(const bool &stop_send_notification_when_hit_cap) {
    m_stop_send_notification_when_hit_cap = stop_send_notification_when_hit_cap;
    m_stop_send_notification_when_hit_cap_isSet = true;
}

bool OAIPricingPlanProperties::is_stop_send_notification_when_hit_cap_Set() const{
    return m_stop_send_notification_when_hit_cap_isSet;
}

bool OAIPricingPlanProperties::is_stop_send_notification_when_hit_cap_Valid() const{
    return m_stop_send_notification_when_hit_cap_isValid;
}

bool OAIPricingPlanProperties::isStopSendNotificationWhenHitThreshold() const {
    return m_stop_send_notification_when_hit_threshold;
}
void OAIPricingPlanProperties::setStopSendNotificationWhenHitThreshold(const bool &stop_send_notification_when_hit_threshold) {
    m_stop_send_notification_when_hit_threshold = stop_send_notification_when_hit_threshold;
    m_stop_send_notification_when_hit_threshold_isSet = true;
}

bool OAIPricingPlanProperties::is_stop_send_notification_when_hit_threshold_Set() const{
    return m_stop_send_notification_when_hit_threshold_isSet;
}

bool OAIPricingPlanProperties::is_stop_send_notification_when_hit_threshold_Valid() const{
    return m_stop_send_notification_when_hit_threshold_isValid;
}

qint32 OAIPricingPlanProperties::getWarningThreshold() const {
    return m_warning_threshold;
}
void OAIPricingPlanProperties::setWarningThreshold(const qint32 &warning_threshold) {
    m_warning_threshold = warning_threshold;
    m_warning_threshold_isSet = true;
}

bool OAIPricingPlanProperties::is_warning_threshold_Set() const{
    return m_warning_threshold_isSet;
}

bool OAIPricingPlanProperties::is_warning_threshold_Valid() const{
    return m_warning_threshold_isValid;
}

bool OAIPricingPlanProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_history_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_send_notification_when_hit_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_send_notification_when_hit_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPricingPlanProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
