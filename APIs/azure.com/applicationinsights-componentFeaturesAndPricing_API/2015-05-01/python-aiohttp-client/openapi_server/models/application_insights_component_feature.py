# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_insights_component_feature_capability import ApplicationInsightsComponentFeatureCapability
from openapi_server import util


class ApplicationInsightsComponentFeature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[ApplicationInsightsComponentFeatureCapability]=None, feature_name: str=None, is_hidden: bool=None, is_main_feature: bool=None, meter_id: str=None, meter_rate_frequency: str=None, resouce_id: str=None, supported_addon_features: str=None, title: str=None):
        """ApplicationInsightsComponentFeature - a model defined in OpenAPI

        :param capabilities: The capabilities of this ApplicationInsightsComponentFeature.
        :param feature_name: The feature_name of this ApplicationInsightsComponentFeature.
        :param is_hidden: The is_hidden of this ApplicationInsightsComponentFeature.
        :param is_main_feature: The is_main_feature of this ApplicationInsightsComponentFeature.
        :param meter_id: The meter_id of this ApplicationInsightsComponentFeature.
        :param meter_rate_frequency: The meter_rate_frequency of this ApplicationInsightsComponentFeature.
        :param resouce_id: The resouce_id of this ApplicationInsightsComponentFeature.
        :param supported_addon_features: The supported_addon_features of this ApplicationInsightsComponentFeature.
        :param title: The title of this ApplicationInsightsComponentFeature.
        """
        self.openapi_types = {
            'capabilities': List[ApplicationInsightsComponentFeatureCapability],
            'feature_name': str,
            'is_hidden': bool,
            'is_main_feature': bool,
            'meter_id': str,
            'meter_rate_frequency': str,
            'resouce_id': str,
            'supported_addon_features': str,
            'title': str
        }

        self.attribute_map = {
            'capabilities': 'Capabilities',
            'feature_name': 'FeatureName',
            'is_hidden': 'IsHidden',
            'is_main_feature': 'IsMainFeature',
            'meter_id': 'MeterId',
            'meter_rate_frequency': 'MeterRateFrequency',
            'resouce_id': 'ResouceId',
            'supported_addon_features': 'SupportedAddonFeatures',
            'title': 'Title'
        }

        self._capabilities = capabilities
        self._feature_name = feature_name
        self._is_hidden = is_hidden
        self._is_main_feature = is_main_feature
        self._meter_id = meter_id
        self._meter_rate_frequency = meter_rate_frequency
        self._resouce_id = resouce_id
        self._supported_addon_features = supported_addon_features
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationInsightsComponentFeature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationInsightsComponentFeature of this ApplicationInsightsComponentFeature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this ApplicationInsightsComponentFeature.

        A list of Application Insights component feature capability.

        :return: The capabilities of this ApplicationInsightsComponentFeature.
        :rtype: List[ApplicationInsightsComponentFeatureCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this ApplicationInsightsComponentFeature.

        A list of Application Insights component feature capability.

        :param capabilities: The capabilities of this ApplicationInsightsComponentFeature.
        :type capabilities: List[ApplicationInsightsComponentFeatureCapability]
        """

        self._capabilities = capabilities

    @property
    def feature_name(self):
        """Gets the feature_name of this ApplicationInsightsComponentFeature.

        The pricing feature name.

        :return: The feature_name of this ApplicationInsightsComponentFeature.
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this ApplicationInsightsComponentFeature.

        The pricing feature name.

        :param feature_name: The feature_name of this ApplicationInsightsComponentFeature.
        :type feature_name: str
        """

        self._feature_name = feature_name

    @property
    def is_hidden(self):
        """Gets the is_hidden of this ApplicationInsightsComponentFeature.

        Reserved, not used now.

        :return: The is_hidden of this ApplicationInsightsComponentFeature.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this ApplicationInsightsComponentFeature.

        Reserved, not used now.

        :param is_hidden: The is_hidden of this ApplicationInsightsComponentFeature.
        :type is_hidden: bool
        """

        self._is_hidden = is_hidden

    @property
    def is_main_feature(self):
        """Gets the is_main_feature of this ApplicationInsightsComponentFeature.

        Whether can apply addon feature on to it.

        :return: The is_main_feature of this ApplicationInsightsComponentFeature.
        :rtype: bool
        """
        return self._is_main_feature

    @is_main_feature.setter
    def is_main_feature(self, is_main_feature):
        """Sets the is_main_feature of this ApplicationInsightsComponentFeature.

        Whether can apply addon feature on to it.

        :param is_main_feature: The is_main_feature of this ApplicationInsightsComponentFeature.
        :type is_main_feature: bool
        """

        self._is_main_feature = is_main_feature

    @property
    def meter_id(self):
        """Gets the meter_id of this ApplicationInsightsComponentFeature.

        The meter id used for the feature.

        :return: The meter_id of this ApplicationInsightsComponentFeature.
        :rtype: str
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this ApplicationInsightsComponentFeature.

        The meter id used for the feature.

        :param meter_id: The meter_id of this ApplicationInsightsComponentFeature.
        :type meter_id: str
        """

        self._meter_id = meter_id

    @property
    def meter_rate_frequency(self):
        """Gets the meter_rate_frequency of this ApplicationInsightsComponentFeature.

        The meter rate for the feature's meter.

        :return: The meter_rate_frequency of this ApplicationInsightsComponentFeature.
        :rtype: str
        """
        return self._meter_rate_frequency

    @meter_rate_frequency.setter
    def meter_rate_frequency(self, meter_rate_frequency):
        """Sets the meter_rate_frequency of this ApplicationInsightsComponentFeature.

        The meter rate for the feature's meter.

        :param meter_rate_frequency: The meter_rate_frequency of this ApplicationInsightsComponentFeature.
        :type meter_rate_frequency: str
        """

        self._meter_rate_frequency = meter_rate_frequency

    @property
    def resouce_id(self):
        """Gets the resouce_id of this ApplicationInsightsComponentFeature.

        Reserved, not used now.

        :return: The resouce_id of this ApplicationInsightsComponentFeature.
        :rtype: str
        """
        return self._resouce_id

    @resouce_id.setter
    def resouce_id(self, resouce_id):
        """Sets the resouce_id of this ApplicationInsightsComponentFeature.

        Reserved, not used now.

        :param resouce_id: The resouce_id of this ApplicationInsightsComponentFeature.
        :type resouce_id: str
        """

        self._resouce_id = resouce_id

    @property
    def supported_addon_features(self):
        """Gets the supported_addon_features of this ApplicationInsightsComponentFeature.

        The add on features on main feature.

        :return: The supported_addon_features of this ApplicationInsightsComponentFeature.
        :rtype: str
        """
        return self._supported_addon_features

    @supported_addon_features.setter
    def supported_addon_features(self, supported_addon_features):
        """Sets the supported_addon_features of this ApplicationInsightsComponentFeature.

        The add on features on main feature.

        :param supported_addon_features: The supported_addon_features of this ApplicationInsightsComponentFeature.
        :type supported_addon_features: str
        """

        self._supported_addon_features = supported_addon_features

    @property
    def title(self):
        """Gets the title of this ApplicationInsightsComponentFeature.

        Display name of the feature.

        :return: The title of this ApplicationInsightsComponentFeature.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ApplicationInsightsComponentFeature.

        Display name of the feature.

        :param title: The title of this ApplicationInsightsComponentFeature.
        :type title: str
        """

        self._title = title
