# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationInsightsComponentFeatureCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, meter_id: str=None, meter_rate_frequency: str=None, name: str=None, unit: str=None, value: str=None):
        """ApplicationInsightsComponentFeatureCapability - a model defined in OpenAPI

        :param description: The description of this ApplicationInsightsComponentFeatureCapability.
        :param meter_id: The meter_id of this ApplicationInsightsComponentFeatureCapability.
        :param meter_rate_frequency: The meter_rate_frequency of this ApplicationInsightsComponentFeatureCapability.
        :param name: The name of this ApplicationInsightsComponentFeatureCapability.
        :param unit: The unit of this ApplicationInsightsComponentFeatureCapability.
        :param value: The value of this ApplicationInsightsComponentFeatureCapability.
        """
        self.openapi_types = {
            'description': str,
            'meter_id': str,
            'meter_rate_frequency': str,
            'name': str,
            'unit': str,
            'value': str
        }

        self.attribute_map = {
            'description': 'Description',
            'meter_id': 'MeterId',
            'meter_rate_frequency': 'MeterRateFrequency',
            'name': 'Name',
            'unit': 'Unit',
            'value': 'Value'
        }

        self._description = description
        self._meter_id = meter_id
        self._meter_rate_frequency = meter_rate_frequency
        self._name = name
        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationInsightsComponentFeatureCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationInsightsComponentFeatureCapability of this ApplicationInsightsComponentFeatureCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ApplicationInsightsComponentFeatureCapability.

        The description of the capability.

        :return: The description of this ApplicationInsightsComponentFeatureCapability.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationInsightsComponentFeatureCapability.

        The description of the capability.

        :param description: The description of this ApplicationInsightsComponentFeatureCapability.
        :type description: str
        """

        self._description = description

    @property
    def meter_id(self):
        """Gets the meter_id of this ApplicationInsightsComponentFeatureCapability.

        The meter used for the capability.

        :return: The meter_id of this ApplicationInsightsComponentFeatureCapability.
        :rtype: str
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this ApplicationInsightsComponentFeatureCapability.

        The meter used for the capability.

        :param meter_id: The meter_id of this ApplicationInsightsComponentFeatureCapability.
        :type meter_id: str
        """

        self._meter_id = meter_id

    @property
    def meter_rate_frequency(self):
        """Gets the meter_rate_frequency of this ApplicationInsightsComponentFeatureCapability.

        The meter rate of the meter.

        :return: The meter_rate_frequency of this ApplicationInsightsComponentFeatureCapability.
        :rtype: str
        """
        return self._meter_rate_frequency

    @meter_rate_frequency.setter
    def meter_rate_frequency(self, meter_rate_frequency):
        """Sets the meter_rate_frequency of this ApplicationInsightsComponentFeatureCapability.

        The meter rate of the meter.

        :param meter_rate_frequency: The meter_rate_frequency of this ApplicationInsightsComponentFeatureCapability.
        :type meter_rate_frequency: str
        """

        self._meter_rate_frequency = meter_rate_frequency

    @property
    def name(self):
        """Gets the name of this ApplicationInsightsComponentFeatureCapability.

        The name of the capability.

        :return: The name of this ApplicationInsightsComponentFeatureCapability.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationInsightsComponentFeatureCapability.

        The name of the capability.

        :param name: The name of this ApplicationInsightsComponentFeatureCapability.
        :type name: str
        """

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this ApplicationInsightsComponentFeatureCapability.

        The unit of the capability.

        :return: The unit of this ApplicationInsightsComponentFeatureCapability.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ApplicationInsightsComponentFeatureCapability.

        The unit of the capability.

        :param unit: The unit of this ApplicationInsightsComponentFeatureCapability.
        :type unit: str
        """

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this ApplicationInsightsComponentFeatureCapability.

        The value of the capability.

        :return: The value of this ApplicationInsightsComponentFeatureCapability.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ApplicationInsightsComponentFeatureCapability.

        The value of the capability.

        :param value: The value of this ApplicationInsightsComponentFeatureCapability.
        :type value: str
        """

        self._value = value
