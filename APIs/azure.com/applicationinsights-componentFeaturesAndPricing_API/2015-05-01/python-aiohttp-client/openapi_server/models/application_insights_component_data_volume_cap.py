# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationInsightsComponentDataVolumeCap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cap: float=None, max_history_cap: float=None, reset_time: int=None, stop_send_notification_when_hit_cap: bool=None, stop_send_notification_when_hit_threshold: bool=None, warning_threshold: int=None):
        """ApplicationInsightsComponentDataVolumeCap - a model defined in OpenAPI

        :param cap: The cap of this ApplicationInsightsComponentDataVolumeCap.
        :param max_history_cap: The max_history_cap of this ApplicationInsightsComponentDataVolumeCap.
        :param reset_time: The reset_time of this ApplicationInsightsComponentDataVolumeCap.
        :param stop_send_notification_when_hit_cap: The stop_send_notification_when_hit_cap of this ApplicationInsightsComponentDataVolumeCap.
        :param stop_send_notification_when_hit_threshold: The stop_send_notification_when_hit_threshold of this ApplicationInsightsComponentDataVolumeCap.
        :param warning_threshold: The warning_threshold of this ApplicationInsightsComponentDataVolumeCap.
        """
        self.openapi_types = {
            'cap': float,
            'max_history_cap': float,
            'reset_time': int,
            'stop_send_notification_when_hit_cap': bool,
            'stop_send_notification_when_hit_threshold': bool,
            'warning_threshold': int
        }

        self.attribute_map = {
            'cap': 'Cap',
            'max_history_cap': 'MaxHistoryCap',
            'reset_time': 'ResetTime',
            'stop_send_notification_when_hit_cap': 'StopSendNotificationWhenHitCap',
            'stop_send_notification_when_hit_threshold': 'StopSendNotificationWhenHitThreshold',
            'warning_threshold': 'WarningThreshold'
        }

        self._cap = cap
        self._max_history_cap = max_history_cap
        self._reset_time = reset_time
        self._stop_send_notification_when_hit_cap = stop_send_notification_when_hit_cap
        self._stop_send_notification_when_hit_threshold = stop_send_notification_when_hit_threshold
        self._warning_threshold = warning_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationInsightsComponentDataVolumeCap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationInsightsComponentDataVolumeCap of this ApplicationInsightsComponentDataVolumeCap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cap(self):
        """Gets the cap of this ApplicationInsightsComponentDataVolumeCap.

        Daily data volume cap in GB.

        :return: The cap of this ApplicationInsightsComponentDataVolumeCap.
        :rtype: float
        """
        return self._cap

    @cap.setter
    def cap(self, cap):
        """Sets the cap of this ApplicationInsightsComponentDataVolumeCap.

        Daily data volume cap in GB.

        :param cap: The cap of this ApplicationInsightsComponentDataVolumeCap.
        :type cap: float
        """

        self._cap = cap

    @property
    def max_history_cap(self):
        """Gets the max_history_cap of this ApplicationInsightsComponentDataVolumeCap.

        Maximum daily data volume cap that the user can set for this component.

        :return: The max_history_cap of this ApplicationInsightsComponentDataVolumeCap.
        :rtype: float
        """
        return self._max_history_cap

    @max_history_cap.setter
    def max_history_cap(self, max_history_cap):
        """Sets the max_history_cap of this ApplicationInsightsComponentDataVolumeCap.

        Maximum daily data volume cap that the user can set for this component.

        :param max_history_cap: The max_history_cap of this ApplicationInsightsComponentDataVolumeCap.
        :type max_history_cap: float
        """

        self._max_history_cap = max_history_cap

    @property
    def reset_time(self):
        """Gets the reset_time of this ApplicationInsightsComponentDataVolumeCap.

        Daily data volume cap UTC reset hour.

        :return: The reset_time of this ApplicationInsightsComponentDataVolumeCap.
        :rtype: int
        """
        return self._reset_time

    @reset_time.setter
    def reset_time(self, reset_time):
        """Sets the reset_time of this ApplicationInsightsComponentDataVolumeCap.

        Daily data volume cap UTC reset hour.

        :param reset_time: The reset_time of this ApplicationInsightsComponentDataVolumeCap.
        :type reset_time: int
        """

        self._reset_time = reset_time

    @property
    def stop_send_notification_when_hit_cap(self):
        """Gets the stop_send_notification_when_hit_cap of this ApplicationInsightsComponentDataVolumeCap.

        Do not send a notification email when the daily data volume cap is met.

        :return: The stop_send_notification_when_hit_cap of this ApplicationInsightsComponentDataVolumeCap.
        :rtype: bool
        """
        return self._stop_send_notification_when_hit_cap

    @stop_send_notification_when_hit_cap.setter
    def stop_send_notification_when_hit_cap(self, stop_send_notification_when_hit_cap):
        """Sets the stop_send_notification_when_hit_cap of this ApplicationInsightsComponentDataVolumeCap.

        Do not send a notification email when the daily data volume cap is met.

        :param stop_send_notification_when_hit_cap: The stop_send_notification_when_hit_cap of this ApplicationInsightsComponentDataVolumeCap.
        :type stop_send_notification_when_hit_cap: bool
        """

        self._stop_send_notification_when_hit_cap = stop_send_notification_when_hit_cap

    @property
    def stop_send_notification_when_hit_threshold(self):
        """Gets the stop_send_notification_when_hit_threshold of this ApplicationInsightsComponentDataVolumeCap.

        Reserved, not used for now.

        :return: The stop_send_notification_when_hit_threshold of this ApplicationInsightsComponentDataVolumeCap.
        :rtype: bool
        """
        return self._stop_send_notification_when_hit_threshold

    @stop_send_notification_when_hit_threshold.setter
    def stop_send_notification_when_hit_threshold(self, stop_send_notification_when_hit_threshold):
        """Sets the stop_send_notification_when_hit_threshold of this ApplicationInsightsComponentDataVolumeCap.

        Reserved, not used for now.

        :param stop_send_notification_when_hit_threshold: The stop_send_notification_when_hit_threshold of this ApplicationInsightsComponentDataVolumeCap.
        :type stop_send_notification_when_hit_threshold: bool
        """

        self._stop_send_notification_when_hit_threshold = stop_send_notification_when_hit_threshold

    @property
    def warning_threshold(self):
        """Gets the warning_threshold of this ApplicationInsightsComponentDataVolumeCap.

        Reserved, not used for now.

        :return: The warning_threshold of this ApplicationInsightsComponentDataVolumeCap.
        :rtype: int
        """
        return self._warning_threshold

    @warning_threshold.setter
    def warning_threshold(self, warning_threshold):
        """Sets the warning_threshold of this ApplicationInsightsComponentDataVolumeCap.

        Reserved, not used for now.

        :param warning_threshold: The warning_threshold of this ApplicationInsightsComponentDataVolumeCap.
        :type warning_threshold: int
        """

        self._warning_threshold = warning_threshold
