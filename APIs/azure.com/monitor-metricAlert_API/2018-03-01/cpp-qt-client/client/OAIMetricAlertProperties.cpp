/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricAlertProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricAlertProperties::OAIMetricAlertProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricAlertProperties::OAIMetricAlertProperties() {
    this->initializeModel();
}

OAIMetricAlertProperties::~OAIMetricAlertProperties() {}

void OAIMetricAlertProperties::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_auto_mitigate_isSet = false;
    m_auto_mitigate_isValid = false;

    m_criteria_isSet = false;
    m_criteria_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_evaluation_frequency_isSet = false;
    m_evaluation_frequency_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_target_resource_region_isSet = false;
    m_target_resource_region_isValid = false;

    m_target_resource_type_isSet = false;
    m_target_resource_type_isValid = false;

    m_window_size_isSet = false;
    m_window_size_isValid = false;
}

void OAIMetricAlertProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricAlertProperties::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_auto_mitigate_isValid = ::OpenAPI::fromJsonValue(m_auto_mitigate, json[QString("autoMitigate")]);
    m_auto_mitigate_isSet = !json[QString("autoMitigate")].isNull() && m_auto_mitigate_isValid;

    m_criteria_isValid = ::OpenAPI::fromJsonValue(m_criteria, json[QString("criteria")]);
    m_criteria_isSet = !json[QString("criteria")].isNull() && m_criteria_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_evaluation_frequency_isValid = ::OpenAPI::fromJsonValue(m_evaluation_frequency, json[QString("evaluationFrequency")]);
    m_evaluation_frequency_isSet = !json[QString("evaluationFrequency")].isNull() && m_evaluation_frequency_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_target_resource_region_isValid = ::OpenAPI::fromJsonValue(m_target_resource_region, json[QString("targetResourceRegion")]);
    m_target_resource_region_isSet = !json[QString("targetResourceRegion")].isNull() && m_target_resource_region_isValid;

    m_target_resource_type_isValid = ::OpenAPI::fromJsonValue(m_target_resource_type, json[QString("targetResourceType")]);
    m_target_resource_type_isSet = !json[QString("targetResourceType")].isNull() && m_target_resource_type_isValid;

    m_window_size_isValid = ::OpenAPI::fromJsonValue(m_window_size, json[QString("windowSize")]);
    m_window_size_isSet = !json[QString("windowSize")].isNull() && m_window_size_isValid;
}

QString OAIMetricAlertProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricAlertProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_auto_mitigate_isSet) {
        obj.insert(QString("autoMitigate"), ::OpenAPI::toJsonValue(m_auto_mitigate));
    }
    if (m_criteria.isSet()) {
        obj.insert(QString("criteria"), ::OpenAPI::toJsonValue(m_criteria));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_evaluation_frequency_isSet) {
        obj.insert(QString("evaluationFrequency"), ::OpenAPI::toJsonValue(m_evaluation_frequency));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_target_resource_region_isSet) {
        obj.insert(QString("targetResourceRegion"), ::OpenAPI::toJsonValue(m_target_resource_region));
    }
    if (m_target_resource_type_isSet) {
        obj.insert(QString("targetResourceType"), ::OpenAPI::toJsonValue(m_target_resource_type));
    }
    if (m_window_size_isSet) {
        obj.insert(QString("windowSize"), ::OpenAPI::toJsonValue(m_window_size));
    }
    return obj;
}

QList<OAIMetricAlertAction> OAIMetricAlertProperties::getActions() const {
    return m_actions;
}
void OAIMetricAlertProperties::setActions(const QList<OAIMetricAlertAction> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIMetricAlertProperties::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIMetricAlertProperties::is_actions_Valid() const{
    return m_actions_isValid;
}

bool OAIMetricAlertProperties::isAutoMitigate() const {
    return m_auto_mitigate;
}
void OAIMetricAlertProperties::setAutoMitigate(const bool &auto_mitigate) {
    m_auto_mitigate = auto_mitigate;
    m_auto_mitigate_isSet = true;
}

bool OAIMetricAlertProperties::is_auto_mitigate_Set() const{
    return m_auto_mitigate_isSet;
}

bool OAIMetricAlertProperties::is_auto_mitigate_Valid() const{
    return m_auto_mitigate_isValid;
}

OAIMetricAlertCriteria OAIMetricAlertProperties::getCriteria() const {
    return m_criteria;
}
void OAIMetricAlertProperties::setCriteria(const OAIMetricAlertCriteria &criteria) {
    m_criteria = criteria;
    m_criteria_isSet = true;
}

bool OAIMetricAlertProperties::is_criteria_Set() const{
    return m_criteria_isSet;
}

bool OAIMetricAlertProperties::is_criteria_Valid() const{
    return m_criteria_isValid;
}

QString OAIMetricAlertProperties::getDescription() const {
    return m_description;
}
void OAIMetricAlertProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMetricAlertProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMetricAlertProperties::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIMetricAlertProperties::isEnabled() const {
    return m_enabled;
}
void OAIMetricAlertProperties::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIMetricAlertProperties::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIMetricAlertProperties::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIMetricAlertProperties::getEvaluationFrequency() const {
    return m_evaluation_frequency;
}
void OAIMetricAlertProperties::setEvaluationFrequency(const QString &evaluation_frequency) {
    m_evaluation_frequency = evaluation_frequency;
    m_evaluation_frequency_isSet = true;
}

bool OAIMetricAlertProperties::is_evaluation_frequency_Set() const{
    return m_evaluation_frequency_isSet;
}

bool OAIMetricAlertProperties::is_evaluation_frequency_Valid() const{
    return m_evaluation_frequency_isValid;
}

QDateTime OAIMetricAlertProperties::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIMetricAlertProperties::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIMetricAlertProperties::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIMetricAlertProperties::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QList<QString> OAIMetricAlertProperties::getScopes() const {
    return m_scopes;
}
void OAIMetricAlertProperties::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIMetricAlertProperties::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIMetricAlertProperties::is_scopes_Valid() const{
    return m_scopes_isValid;
}

qint32 OAIMetricAlertProperties::getSeverity() const {
    return m_severity;
}
void OAIMetricAlertProperties::setSeverity(const qint32 &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIMetricAlertProperties::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIMetricAlertProperties::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIMetricAlertProperties::getTargetResourceRegion() const {
    return m_target_resource_region;
}
void OAIMetricAlertProperties::setTargetResourceRegion(const QString &target_resource_region) {
    m_target_resource_region = target_resource_region;
    m_target_resource_region_isSet = true;
}

bool OAIMetricAlertProperties::is_target_resource_region_Set() const{
    return m_target_resource_region_isSet;
}

bool OAIMetricAlertProperties::is_target_resource_region_Valid() const{
    return m_target_resource_region_isValid;
}

QString OAIMetricAlertProperties::getTargetResourceType() const {
    return m_target_resource_type;
}
void OAIMetricAlertProperties::setTargetResourceType(const QString &target_resource_type) {
    m_target_resource_type = target_resource_type;
    m_target_resource_type_isSet = true;
}

bool OAIMetricAlertProperties::is_target_resource_type_Set() const{
    return m_target_resource_type_isSet;
}

bool OAIMetricAlertProperties::is_target_resource_type_Valid() const{
    return m_target_resource_type_isValid;
}

QString OAIMetricAlertProperties::getWindowSize() const {
    return m_window_size;
}
void OAIMetricAlertProperties::setWindowSize(const QString &window_size) {
    m_window_size = window_size;
    m_window_size_isSet = true;
}

bool OAIMetricAlertProperties::is_window_size_Set() const{
    return m_window_size_isSet;
}

bool OAIMetricAlertProperties::is_window_size_Valid() const{
    return m_window_size_isValid;
}

bool OAIMetricAlertProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_mitigate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricAlertProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_criteria_isValid && m_description_isValid && m_enabled_isValid && m_evaluation_frequency_isValid && m_severity_isValid && m_window_size_isValid && true;
}

} // namespace OpenAPI
