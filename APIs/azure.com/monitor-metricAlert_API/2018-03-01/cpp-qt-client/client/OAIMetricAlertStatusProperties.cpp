/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricAlertStatusProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricAlertStatusProperties::OAIMetricAlertStatusProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricAlertStatusProperties::OAIMetricAlertStatusProperties() {
    this->initializeModel();
}

OAIMetricAlertStatusProperties::~OAIMetricAlertStatusProperties() {}

void OAIMetricAlertStatusProperties::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIMetricAlertStatusProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricAlertStatusProperties::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIMetricAlertStatusProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricAlertStatusProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QMap<QString, QString> OAIMetricAlertStatusProperties::getDimensions() const {
    return m_dimensions;
}
void OAIMetricAlertStatusProperties::setDimensions(const QMap<QString, QString> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMetricAlertStatusProperties::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMetricAlertStatusProperties::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIMetricAlertStatusProperties::getStatus() const {
    return m_status;
}
void OAIMetricAlertStatusProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMetricAlertStatusProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMetricAlertStatusProperties::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIMetricAlertStatusProperties::getTimestamp() const {
    return m_timestamp;
}
void OAIMetricAlertStatusProperties::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMetricAlertStatusProperties::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMetricAlertStatusProperties::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIMetricAlertStatusProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricAlertStatusProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
