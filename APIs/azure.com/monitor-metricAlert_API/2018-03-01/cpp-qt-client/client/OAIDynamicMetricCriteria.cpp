/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDynamicMetricCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDynamicMetricCriteria::OAIDynamicMetricCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDynamicMetricCriteria::OAIDynamicMetricCriteria() {
    this->initializeModel();
}

OAIDynamicMetricCriteria::~OAIDynamicMetricCriteria() {}

void OAIDynamicMetricCriteria::initializeModel() {

    m_alert_sensitivity_isSet = false;
    m_alert_sensitivity_isValid = false;

    m_failing_periods_isSet = false;
    m_failing_periods_isValid = false;

    m_ignore_data_before_isSet = false;
    m_ignore_data_before_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_criterion_type_isSet = false;
    m_criterion_type_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_metric_namespace_isSet = false;
    m_metric_namespace_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_aggregation_isSet = false;
    m_time_aggregation_isValid = false;
}

void OAIDynamicMetricCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDynamicMetricCriteria::fromJsonObject(QJsonObject json) {

    m_alert_sensitivity_isValid = ::OpenAPI::fromJsonValue(m_alert_sensitivity, json[QString("alertSensitivity")]);
    m_alert_sensitivity_isSet = !json[QString("alertSensitivity")].isNull() && m_alert_sensitivity_isValid;

    m_failing_periods_isValid = ::OpenAPI::fromJsonValue(m_failing_periods, json[QString("failingPeriods")]);
    m_failing_periods_isSet = !json[QString("failingPeriods")].isNull() && m_failing_periods_isValid;

    m_ignore_data_before_isValid = ::OpenAPI::fromJsonValue(m_ignore_data_before, json[QString("ignoreDataBefore")]);
    m_ignore_data_before_isSet = !json[QString("ignoreDataBefore")].isNull() && m_ignore_data_before_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_criterion_type_isValid = ::OpenAPI::fromJsonValue(m_criterion_type, json[QString("criterionType")]);
    m_criterion_type_isSet = !json[QString("criterionType")].isNull() && m_criterion_type_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_metric_namespace_isValid = ::OpenAPI::fromJsonValue(m_metric_namespace, json[QString("metricNamespace")]);
    m_metric_namespace_isSet = !json[QString("metricNamespace")].isNull() && m_metric_namespace_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_time_aggregation_isValid = ::OpenAPI::fromJsonValue(m_time_aggregation, json[QString("timeAggregation")]);
    m_time_aggregation_isSet = !json[QString("timeAggregation")].isNull() && m_time_aggregation_isValid;
}

QString OAIDynamicMetricCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDynamicMetricCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_sensitivity_isSet) {
        obj.insert(QString("alertSensitivity"), ::OpenAPI::toJsonValue(m_alert_sensitivity));
    }
    if (m_failing_periods.isSet()) {
        obj.insert(QString("failingPeriods"), ::OpenAPI::toJsonValue(m_failing_periods));
    }
    if (m_ignore_data_before_isSet) {
        obj.insert(QString("ignoreDataBefore"), ::OpenAPI::toJsonValue(m_ignore_data_before));
    }
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_criterion_type_isSet) {
        obj.insert(QString("criterionType"), ::OpenAPI::toJsonValue(m_criterion_type));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_metric_namespace_isSet) {
        obj.insert(QString("metricNamespace"), ::OpenAPI::toJsonValue(m_metric_namespace));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time_aggregation_isSet) {
        obj.insert(QString("timeAggregation"), ::OpenAPI::toJsonValue(m_time_aggregation));
    }
    return obj;
}

QString OAIDynamicMetricCriteria::getAlertSensitivity() const {
    return m_alert_sensitivity;
}
void OAIDynamicMetricCriteria::setAlertSensitivity(const QString &alert_sensitivity) {
    m_alert_sensitivity = alert_sensitivity;
    m_alert_sensitivity_isSet = true;
}

bool OAIDynamicMetricCriteria::is_alert_sensitivity_Set() const{
    return m_alert_sensitivity_isSet;
}

bool OAIDynamicMetricCriteria::is_alert_sensitivity_Valid() const{
    return m_alert_sensitivity_isValid;
}

OAIDynamicThresholdFailingPeriods OAIDynamicMetricCriteria::getFailingPeriods() const {
    return m_failing_periods;
}
void OAIDynamicMetricCriteria::setFailingPeriods(const OAIDynamicThresholdFailingPeriods &failing_periods) {
    m_failing_periods = failing_periods;
    m_failing_periods_isSet = true;
}

bool OAIDynamicMetricCriteria::is_failing_periods_Set() const{
    return m_failing_periods_isSet;
}

bool OAIDynamicMetricCriteria::is_failing_periods_Valid() const{
    return m_failing_periods_isValid;
}

QDateTime OAIDynamicMetricCriteria::getIgnoreDataBefore() const {
    return m_ignore_data_before;
}
void OAIDynamicMetricCriteria::setIgnoreDataBefore(const QDateTime &ignore_data_before) {
    m_ignore_data_before = ignore_data_before;
    m_ignore_data_before_isSet = true;
}

bool OAIDynamicMetricCriteria::is_ignore_data_before_Set() const{
    return m_ignore_data_before_isSet;
}

bool OAIDynamicMetricCriteria::is_ignore_data_before_Valid() const{
    return m_ignore_data_before_isValid;
}

QString OAIDynamicMetricCriteria::getROperator() const {
    return m_r_operator;
}
void OAIDynamicMetricCriteria::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIDynamicMetricCriteria::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIDynamicMetricCriteria::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIDynamicMetricCriteria::getCriterionType() const {
    return m_criterion_type;
}
void OAIDynamicMetricCriteria::setCriterionType(const QString &criterion_type) {
    m_criterion_type = criterion_type;
    m_criterion_type_isSet = true;
}

bool OAIDynamicMetricCriteria::is_criterion_type_Set() const{
    return m_criterion_type_isSet;
}

bool OAIDynamicMetricCriteria::is_criterion_type_Valid() const{
    return m_criterion_type_isValid;
}

QList<OAIMetricDimension> OAIDynamicMetricCriteria::getDimensions() const {
    return m_dimensions;
}
void OAIDynamicMetricCriteria::setDimensions(const QList<OAIMetricDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIDynamicMetricCriteria::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIDynamicMetricCriteria::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIDynamicMetricCriteria::getMetricName() const {
    return m_metric_name;
}
void OAIDynamicMetricCriteria::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIDynamicMetricCriteria::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIDynamicMetricCriteria::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QString OAIDynamicMetricCriteria::getMetricNamespace() const {
    return m_metric_namespace;
}
void OAIDynamicMetricCriteria::setMetricNamespace(const QString &metric_namespace) {
    m_metric_namespace = metric_namespace;
    m_metric_namespace_isSet = true;
}

bool OAIDynamicMetricCriteria::is_metric_namespace_Set() const{
    return m_metric_namespace_isSet;
}

bool OAIDynamicMetricCriteria::is_metric_namespace_Valid() const{
    return m_metric_namespace_isValid;
}

QString OAIDynamicMetricCriteria::getName() const {
    return m_name;
}
void OAIDynamicMetricCriteria::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDynamicMetricCriteria::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDynamicMetricCriteria::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDynamicMetricCriteria::getTimeAggregation() const {
    return m_time_aggregation;
}
void OAIDynamicMetricCriteria::setTimeAggregation(const QString &time_aggregation) {
    m_time_aggregation = time_aggregation;
    m_time_aggregation_isSet = true;
}

bool OAIDynamicMetricCriteria::is_time_aggregation_Set() const{
    return m_time_aggregation_isSet;
}

bool OAIDynamicMetricCriteria::is_time_aggregation_Valid() const{
    return m_time_aggregation_isValid;
}

bool OAIDynamicMetricCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_sensitivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failing_periods.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_data_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_criterion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_aggregation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDynamicMetricCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alert_sensitivity_isValid && m_failing_periods_isValid && m_r_operator_isValid && m_criterion_type_isValid && m_metric_name_isValid && m_name_isValid && m_time_aggregation_isValid && true;
}

} // namespace OpenAPI
