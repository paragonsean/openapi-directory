/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricAlertProperties.h
 *
 * An alert rule.
 */

#ifndef OAIMetricAlertProperties_H
#define OAIMetricAlertProperties_H

#include <QJsonObject>

#include "OAIMetricAlertAction.h"
#include "OAIMetricAlertCriteria.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetricAlertAction;

class OAIMetricAlertProperties : public OAIObject {
public:
    OAIMetricAlertProperties();
    OAIMetricAlertProperties(QString json);
    ~OAIMetricAlertProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIMetricAlertAction> getActions() const;
    void setActions(const QList<OAIMetricAlertAction> &actions);
    bool is_actions_Set() const;
    bool is_actions_Valid() const;

    bool isAutoMitigate() const;
    void setAutoMitigate(const bool &auto_mitigate);
    bool is_auto_mitigate_Set() const;
    bool is_auto_mitigate_Valid() const;

    OAIMetricAlertCriteria getCriteria() const;
    void setCriteria(const OAIMetricAlertCriteria &criteria);
    bool is_criteria_Set() const;
    bool is_criteria_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getEvaluationFrequency() const;
    void setEvaluationFrequency(const QString &evaluation_frequency);
    bool is_evaluation_frequency_Set() const;
    bool is_evaluation_frequency_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    QList<QString> getScopes() const;
    void setScopes(const QList<QString> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    qint32 getSeverity() const;
    void setSeverity(const qint32 &severity);
    bool is_severity_Set() const;
    bool is_severity_Valid() const;

    QString getTargetResourceRegion() const;
    void setTargetResourceRegion(const QString &target_resource_region);
    bool is_target_resource_region_Set() const;
    bool is_target_resource_region_Valid() const;

    QString getTargetResourceType() const;
    void setTargetResourceType(const QString &target_resource_type);
    bool is_target_resource_type_Set() const;
    bool is_target_resource_type_Valid() const;

    QString getWindowSize() const;
    void setWindowSize(const QString &window_size);
    bool is_window_size_Set() const;
    bool is_window_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIMetricAlertAction> m_actions;
    bool m_actions_isSet;
    bool m_actions_isValid;

    bool m_auto_mitigate;
    bool m_auto_mitigate_isSet;
    bool m_auto_mitigate_isValid;

    OAIMetricAlertCriteria m_criteria;
    bool m_criteria_isSet;
    bool m_criteria_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_evaluation_frequency;
    bool m_evaluation_frequency_isSet;
    bool m_evaluation_frequency_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    QList<QString> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;

    qint32 m_severity;
    bool m_severity_isSet;
    bool m_severity_isValid;

    QString m_target_resource_region;
    bool m_target_resource_region_isSet;
    bool m_target_resource_region_isValid;

    QString m_target_resource_type;
    bool m_target_resource_type_isSet;
    bool m_target_resource_type_isValid;

    QString m_window_size;
    bool m_window_size_isSet;
    bool m_window_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricAlertProperties)

#endif // OAIMetricAlertProperties_H
