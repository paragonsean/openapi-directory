/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiMetricCriteria.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiMetricCriteria::OAIMultiMetricCriteria(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiMetricCriteria::OAIMultiMetricCriteria() {
    this->initializeModel();
}

OAIMultiMetricCriteria::~OAIMultiMetricCriteria() {}

void OAIMultiMetricCriteria::initializeModel() {

    m_criterion_type_isSet = false;
    m_criterion_type_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_metric_namespace_isSet = false;
    m_metric_namespace_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_aggregation_isSet = false;
    m_time_aggregation_isValid = false;
}

void OAIMultiMetricCriteria::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiMetricCriteria::fromJsonObject(QJsonObject json) {

    m_criterion_type_isValid = ::OpenAPI::fromJsonValue(m_criterion_type, json[QString("criterionType")]);
    m_criterion_type_isSet = !json[QString("criterionType")].isNull() && m_criterion_type_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_metric_namespace_isValid = ::OpenAPI::fromJsonValue(m_metric_namespace, json[QString("metricNamespace")]);
    m_metric_namespace_isSet = !json[QString("metricNamespace")].isNull() && m_metric_namespace_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_time_aggregation_isValid = ::OpenAPI::fromJsonValue(m_time_aggregation, json[QString("timeAggregation")]);
    m_time_aggregation_isSet = !json[QString("timeAggregation")].isNull() && m_time_aggregation_isValid;
}

QString OAIMultiMetricCriteria::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiMetricCriteria::asJsonObject() const {
    QJsonObject obj;
    if (m_criterion_type_isSet) {
        obj.insert(QString("criterionType"), ::OpenAPI::toJsonValue(m_criterion_type));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_metric_namespace_isSet) {
        obj.insert(QString("metricNamespace"), ::OpenAPI::toJsonValue(m_metric_namespace));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time_aggregation_isSet) {
        obj.insert(QString("timeAggregation"), ::OpenAPI::toJsonValue(m_time_aggregation));
    }
    return obj;
}

QString OAIMultiMetricCriteria::getCriterionType() const {
    return m_criterion_type;
}
void OAIMultiMetricCriteria::setCriterionType(const QString &criterion_type) {
    m_criterion_type = criterion_type;
    m_criterion_type_isSet = true;
}

bool OAIMultiMetricCriteria::is_criterion_type_Set() const{
    return m_criterion_type_isSet;
}

bool OAIMultiMetricCriteria::is_criterion_type_Valid() const{
    return m_criterion_type_isValid;
}

QList<OAIMetricDimension> OAIMultiMetricCriteria::getDimensions() const {
    return m_dimensions;
}
void OAIMultiMetricCriteria::setDimensions(const QList<OAIMetricDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMultiMetricCriteria::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMultiMetricCriteria::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIMultiMetricCriteria::getMetricName() const {
    return m_metric_name;
}
void OAIMultiMetricCriteria::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIMultiMetricCriteria::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIMultiMetricCriteria::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

QString OAIMultiMetricCriteria::getMetricNamespace() const {
    return m_metric_namespace;
}
void OAIMultiMetricCriteria::setMetricNamespace(const QString &metric_namespace) {
    m_metric_namespace = metric_namespace;
    m_metric_namespace_isSet = true;
}

bool OAIMultiMetricCriteria::is_metric_namespace_Set() const{
    return m_metric_namespace_isSet;
}

bool OAIMultiMetricCriteria::is_metric_namespace_Valid() const{
    return m_metric_namespace_isValid;
}

QString OAIMultiMetricCriteria::getName() const {
    return m_name;
}
void OAIMultiMetricCriteria::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMultiMetricCriteria::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMultiMetricCriteria::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMultiMetricCriteria::getTimeAggregation() const {
    return m_time_aggregation;
}
void OAIMultiMetricCriteria::setTimeAggregation(const QString &time_aggregation) {
    m_time_aggregation = time_aggregation;
    m_time_aggregation_isSet = true;
}

bool OAIMultiMetricCriteria::is_time_aggregation_Set() const{
    return m_time_aggregation_isSet;
}

bool OAIMultiMetricCriteria::is_time_aggregation_Valid() const{
    return m_time_aggregation_isValid;
}

bool OAIMultiMetricCriteria::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_criterion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_aggregation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiMetricCriteria::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_criterion_type_isValid && m_metric_name_isValid && m_name_isValid && m_time_aggregation_isValid && true;
}

} // namespace OpenAPI
