# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_dimension import MetricDimension
from openapi_server.models.multi_metric_criteria import MultiMetricCriteria
from openapi_server import util


class MetricCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operator: str=None, threshold: float=None, criterion_type: str=None, dimensions: List[MetricDimension]=None, metric_name: str=None, metric_namespace: str=None, name: str=None, time_aggregation: str=None):
        """MetricCriteria - a model defined in OpenAPI

        :param operator: The operator of this MetricCriteria.
        :param threshold: The threshold of this MetricCriteria.
        :param criterion_type: The criterion_type of this MetricCriteria.
        :param dimensions: The dimensions of this MetricCriteria.
        :param metric_name: The metric_name of this MetricCriteria.
        :param metric_namespace: The metric_namespace of this MetricCriteria.
        :param name: The name of this MetricCriteria.
        :param time_aggregation: The time_aggregation of this MetricCriteria.
        """
        self.openapi_types = {
            'operator': str,
            'threshold': float,
            'criterion_type': str,
            'dimensions': List[MetricDimension],
            'metric_name': str,
            'metric_namespace': str,
            'name': str,
            'time_aggregation': str
        }

        self.attribute_map = {
            'operator': 'operator',
            'threshold': 'threshold',
            'criterion_type': 'criterionType',
            'dimensions': 'dimensions',
            'metric_name': 'metricName',
            'metric_namespace': 'metricNamespace',
            'name': 'name',
            'time_aggregation': 'timeAggregation'
        }

        self._operator = operator
        self._threshold = threshold
        self._criterion_type = criterion_type
        self._dimensions = dimensions
        self._metric_name = metric_name
        self._metric_namespace = metric_namespace
        self._name = name
        self._time_aggregation = time_aggregation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricCriteria of this MetricCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator(self):
        """Gets the operator of this MetricCriteria.

        the criteria operator.

        :return: The operator of this MetricCriteria.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this MetricCriteria.

        the criteria operator.

        :param operator: The operator of this MetricCriteria.
        :type operator: str
        """
        allowed_values = ["Equals", "NotEquals", "GreaterThan", "GreaterThanOrEqual", "LessThan", "LessThanOrEqual"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def threshold(self):
        """Gets the threshold of this MetricCriteria.

        the criteria threshold value that activates the alert.

        :return: The threshold of this MetricCriteria.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this MetricCriteria.

        the criteria threshold value that activates the alert.

        :param threshold: The threshold of this MetricCriteria.
        :type threshold: float
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")

        self._threshold = threshold

    @property
    def criterion_type(self):
        """Gets the criterion_type of this MetricCriteria.

        Specifies the type of threshold criteria

        :return: The criterion_type of this MetricCriteria.
        :rtype: str
        """
        return self._criterion_type

    @criterion_type.setter
    def criterion_type(self, criterion_type):
        """Sets the criterion_type of this MetricCriteria.

        Specifies the type of threshold criteria

        :param criterion_type: The criterion_type of this MetricCriteria.
        :type criterion_type: str
        """
        allowed_values = ["StaticThresholdCriterion", "DynamicThresholdCriterion"]  # noqa: E501
        if criterion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `criterion_type` ({0}), must be one of {1}"
                .format(criterion_type, allowed_values)
            )

        self._criterion_type = criterion_type

    @property
    def dimensions(self):
        """Gets the dimensions of this MetricCriteria.

        List of dimension conditions.

        :return: The dimensions of this MetricCriteria.
        :rtype: List[MetricDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this MetricCriteria.

        List of dimension conditions.

        :param dimensions: The dimensions of this MetricCriteria.
        :type dimensions: List[MetricDimension]
        """

        self._dimensions = dimensions

    @property
    def metric_name(self):
        """Gets the metric_name of this MetricCriteria.

        Name of the metric.

        :return: The metric_name of this MetricCriteria.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this MetricCriteria.

        Name of the metric.

        :param metric_name: The metric_name of this MetricCriteria.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def metric_namespace(self):
        """Gets the metric_namespace of this MetricCriteria.

        Namespace of the metric.

        :return: The metric_namespace of this MetricCriteria.
        :rtype: str
        """
        return self._metric_namespace

    @metric_namespace.setter
    def metric_namespace(self, metric_namespace):
        """Sets the metric_namespace of this MetricCriteria.

        Namespace of the metric.

        :param metric_namespace: The metric_namespace of this MetricCriteria.
        :type metric_namespace: str
        """

        self._metric_namespace = metric_namespace

    @property
    def name(self):
        """Gets the name of this MetricCriteria.

        Name of the criteria.

        :return: The name of this MetricCriteria.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricCriteria.

        Name of the criteria.

        :param name: The name of this MetricCriteria.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def time_aggregation(self):
        """Gets the time_aggregation of this MetricCriteria.

        the criteria time aggregation types.

        :return: The time_aggregation of this MetricCriteria.
        :rtype: str
        """
        return self._time_aggregation

    @time_aggregation.setter
    def time_aggregation(self, time_aggregation):
        """Sets the time_aggregation of this MetricCriteria.

        the criteria time aggregation types.

        :param time_aggregation: The time_aggregation of this MetricCriteria.
        :type time_aggregation: str
        """
        allowed_values = ["Average", "Minimum", "Maximum", "Total"]  # noqa: E501
        if time_aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `time_aggregation` ({0}), must be one of {1}"
                .format(time_aggregation, allowed_values)
            )

        self._time_aggregation = time_aggregation
