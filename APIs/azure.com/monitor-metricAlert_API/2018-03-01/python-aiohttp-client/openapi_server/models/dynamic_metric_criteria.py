# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dynamic_threshold_failing_periods import DynamicThresholdFailingPeriods
from openapi_server.models.metric_dimension import MetricDimension
from openapi_server.models.multi_metric_criteria import MultiMetricCriteria
from openapi_server import util


class DynamicMetricCriteria(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_sensitivity: str=None, failing_periods: DynamicThresholdFailingPeriods=None, ignore_data_before: datetime=None, operator: str=None, criterion_type: str=None, dimensions: List[MetricDimension]=None, metric_name: str=None, metric_namespace: str=None, name: str=None, time_aggregation: str=None):
        """DynamicMetricCriteria - a model defined in OpenAPI

        :param alert_sensitivity: The alert_sensitivity of this DynamicMetricCriteria.
        :param failing_periods: The failing_periods of this DynamicMetricCriteria.
        :param ignore_data_before: The ignore_data_before of this DynamicMetricCriteria.
        :param operator: The operator of this DynamicMetricCriteria.
        :param criterion_type: The criterion_type of this DynamicMetricCriteria.
        :param dimensions: The dimensions of this DynamicMetricCriteria.
        :param metric_name: The metric_name of this DynamicMetricCriteria.
        :param metric_namespace: The metric_namespace of this DynamicMetricCriteria.
        :param name: The name of this DynamicMetricCriteria.
        :param time_aggregation: The time_aggregation of this DynamicMetricCriteria.
        """
        self.openapi_types = {
            'alert_sensitivity': str,
            'failing_periods': DynamicThresholdFailingPeriods,
            'ignore_data_before': datetime,
            'operator': str,
            'criterion_type': str,
            'dimensions': List[MetricDimension],
            'metric_name': str,
            'metric_namespace': str,
            'name': str,
            'time_aggregation': str
        }

        self.attribute_map = {
            'alert_sensitivity': 'alertSensitivity',
            'failing_periods': 'failingPeriods',
            'ignore_data_before': 'ignoreDataBefore',
            'operator': 'operator',
            'criterion_type': 'criterionType',
            'dimensions': 'dimensions',
            'metric_name': 'metricName',
            'metric_namespace': 'metricNamespace',
            'name': 'name',
            'time_aggregation': 'timeAggregation'
        }

        self._alert_sensitivity = alert_sensitivity
        self._failing_periods = failing_periods
        self._ignore_data_before = ignore_data_before
        self._operator = operator
        self._criterion_type = criterion_type
        self._dimensions = dimensions
        self._metric_name = metric_name
        self._metric_namespace = metric_namespace
        self._name = name
        self._time_aggregation = time_aggregation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DynamicMetricCriteria':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DynamicMetricCriteria of this DynamicMetricCriteria.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_sensitivity(self):
        """Gets the alert_sensitivity of this DynamicMetricCriteria.

        The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.

        :return: The alert_sensitivity of this DynamicMetricCriteria.
        :rtype: str
        """
        return self._alert_sensitivity

    @alert_sensitivity.setter
    def alert_sensitivity(self, alert_sensitivity):
        """Sets the alert_sensitivity of this DynamicMetricCriteria.

        The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.

        :param alert_sensitivity: The alert_sensitivity of this DynamicMetricCriteria.
        :type alert_sensitivity: str
        """
        allowed_values = ["Low", "Medium", "High"]  # noqa: E501
        if alert_sensitivity not in allowed_values:
            raise ValueError(
                "Invalid value for `alert_sensitivity` ({0}), must be one of {1}"
                .format(alert_sensitivity, allowed_values)
            )

        self._alert_sensitivity = alert_sensitivity

    @property
    def failing_periods(self):
        """Gets the failing_periods of this DynamicMetricCriteria.


        :return: The failing_periods of this DynamicMetricCriteria.
        :rtype: DynamicThresholdFailingPeriods
        """
        return self._failing_periods

    @failing_periods.setter
    def failing_periods(self, failing_periods):
        """Sets the failing_periods of this DynamicMetricCriteria.


        :param failing_periods: The failing_periods of this DynamicMetricCriteria.
        :type failing_periods: DynamicThresholdFailingPeriods
        """
        if failing_periods is None:
            raise ValueError("Invalid value for `failing_periods`, must not be `None`")

        self._failing_periods = failing_periods

    @property
    def ignore_data_before(self):
        """Gets the ignore_data_before of this DynamicMetricCriteria.

        Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)

        :return: The ignore_data_before of this DynamicMetricCriteria.
        :rtype: datetime
        """
        return self._ignore_data_before

    @ignore_data_before.setter
    def ignore_data_before(self, ignore_data_before):
        """Sets the ignore_data_before of this DynamicMetricCriteria.

        Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)

        :param ignore_data_before: The ignore_data_before of this DynamicMetricCriteria.
        :type ignore_data_before: datetime
        """

        self._ignore_data_before = ignore_data_before

    @property
    def operator(self):
        """Gets the operator of this DynamicMetricCriteria.

        The operator used to compare the metric value against the threshold.

        :return: The operator of this DynamicMetricCriteria.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this DynamicMetricCriteria.

        The operator used to compare the metric value against the threshold.

        :param operator: The operator of this DynamicMetricCriteria.
        :type operator: str
        """
        allowed_values = ["GreaterThan", "LessThan", "GreaterOrLessThan"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def criterion_type(self):
        """Gets the criterion_type of this DynamicMetricCriteria.

        Specifies the type of threshold criteria

        :return: The criterion_type of this DynamicMetricCriteria.
        :rtype: str
        """
        return self._criterion_type

    @criterion_type.setter
    def criterion_type(self, criterion_type):
        """Sets the criterion_type of this DynamicMetricCriteria.

        Specifies the type of threshold criteria

        :param criterion_type: The criterion_type of this DynamicMetricCriteria.
        :type criterion_type: str
        """
        allowed_values = ["StaticThresholdCriterion", "DynamicThresholdCriterion"]  # noqa: E501
        if criterion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `criterion_type` ({0}), must be one of {1}"
                .format(criterion_type, allowed_values)
            )

        self._criterion_type = criterion_type

    @property
    def dimensions(self):
        """Gets the dimensions of this DynamicMetricCriteria.

        List of dimension conditions.

        :return: The dimensions of this DynamicMetricCriteria.
        :rtype: List[MetricDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this DynamicMetricCriteria.

        List of dimension conditions.

        :param dimensions: The dimensions of this DynamicMetricCriteria.
        :type dimensions: List[MetricDimension]
        """

        self._dimensions = dimensions

    @property
    def metric_name(self):
        """Gets the metric_name of this DynamicMetricCriteria.

        Name of the metric.

        :return: The metric_name of this DynamicMetricCriteria.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this DynamicMetricCriteria.

        Name of the metric.

        :param metric_name: The metric_name of this DynamicMetricCriteria.
        :type metric_name: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def metric_namespace(self):
        """Gets the metric_namespace of this DynamicMetricCriteria.

        Namespace of the metric.

        :return: The metric_namespace of this DynamicMetricCriteria.
        :rtype: str
        """
        return self._metric_namespace

    @metric_namespace.setter
    def metric_namespace(self, metric_namespace):
        """Sets the metric_namespace of this DynamicMetricCriteria.

        Namespace of the metric.

        :param metric_namespace: The metric_namespace of this DynamicMetricCriteria.
        :type metric_namespace: str
        """

        self._metric_namespace = metric_namespace

    @property
    def name(self):
        """Gets the name of this DynamicMetricCriteria.

        Name of the criteria.

        :return: The name of this DynamicMetricCriteria.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DynamicMetricCriteria.

        Name of the criteria.

        :param name: The name of this DynamicMetricCriteria.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def time_aggregation(self):
        """Gets the time_aggregation of this DynamicMetricCriteria.

        the criteria time aggregation types.

        :return: The time_aggregation of this DynamicMetricCriteria.
        :rtype: str
        """
        return self._time_aggregation

    @time_aggregation.setter
    def time_aggregation(self, time_aggregation):
        """Sets the time_aggregation of this DynamicMetricCriteria.

        the criteria time aggregation types.

        :param time_aggregation: The time_aggregation of this DynamicMetricCriteria.
        :type time_aggregation: str
        """
        allowed_values = ["Average", "Minimum", "Maximum", "Total"]  # noqa: E501
        if time_aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `time_aggregation` ({0}), must be one of {1}"
                .format(time_aggregation, allowed_values)
            )

        self._time_aggregation = time_aggregation
