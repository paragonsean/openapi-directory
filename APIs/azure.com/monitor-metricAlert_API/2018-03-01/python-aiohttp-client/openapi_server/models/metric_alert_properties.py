# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_alert_action import MetricAlertAction
from openapi_server.models.metric_alert_criteria import MetricAlertCriteria
from openapi_server import util


class MetricAlertProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[MetricAlertAction]=None, auto_mitigate: bool=None, criteria: MetricAlertCriteria=None, description: str=None, enabled: bool=None, evaluation_frequency: str=None, last_updated_time: datetime=None, scopes: List[str]=None, severity: int=None, target_resource_region: str=None, target_resource_type: str=None, window_size: str=None):
        """MetricAlertProperties - a model defined in OpenAPI

        :param actions: The actions of this MetricAlertProperties.
        :param auto_mitigate: The auto_mitigate of this MetricAlertProperties.
        :param criteria: The criteria of this MetricAlertProperties.
        :param description: The description of this MetricAlertProperties.
        :param enabled: The enabled of this MetricAlertProperties.
        :param evaluation_frequency: The evaluation_frequency of this MetricAlertProperties.
        :param last_updated_time: The last_updated_time of this MetricAlertProperties.
        :param scopes: The scopes of this MetricAlertProperties.
        :param severity: The severity of this MetricAlertProperties.
        :param target_resource_region: The target_resource_region of this MetricAlertProperties.
        :param target_resource_type: The target_resource_type of this MetricAlertProperties.
        :param window_size: The window_size of this MetricAlertProperties.
        """
        self.openapi_types = {
            'actions': List[MetricAlertAction],
            'auto_mitigate': bool,
            'criteria': MetricAlertCriteria,
            'description': str,
            'enabled': bool,
            'evaluation_frequency': str,
            'last_updated_time': datetime,
            'scopes': List[str],
            'severity': int,
            'target_resource_region': str,
            'target_resource_type': str,
            'window_size': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'auto_mitigate': 'autoMitigate',
            'criteria': 'criteria',
            'description': 'description',
            'enabled': 'enabled',
            'evaluation_frequency': 'evaluationFrequency',
            'last_updated_time': 'lastUpdatedTime',
            'scopes': 'scopes',
            'severity': 'severity',
            'target_resource_region': 'targetResourceRegion',
            'target_resource_type': 'targetResourceType',
            'window_size': 'windowSize'
        }

        self._actions = actions
        self._auto_mitigate = auto_mitigate
        self._criteria = criteria
        self._description = description
        self._enabled = enabled
        self._evaluation_frequency = evaluation_frequency
        self._last_updated_time = last_updated_time
        self._scopes = scopes
        self._severity = severity
        self._target_resource_region = target_resource_region
        self._target_resource_type = target_resource_type
        self._window_size = window_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricAlertProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricAlertProperties of this MetricAlertProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this MetricAlertProperties.

        the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.

        :return: The actions of this MetricAlertProperties.
        :rtype: List[MetricAlertAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this MetricAlertProperties.

        the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.

        :param actions: The actions of this MetricAlertProperties.
        :type actions: List[MetricAlertAction]
        """

        self._actions = actions

    @property
    def auto_mitigate(self):
        """Gets the auto_mitigate of this MetricAlertProperties.

        the flag that indicates whether the alert should be auto resolved or not.

        :return: The auto_mitigate of this MetricAlertProperties.
        :rtype: bool
        """
        return self._auto_mitigate

    @auto_mitigate.setter
    def auto_mitigate(self, auto_mitigate):
        """Sets the auto_mitigate of this MetricAlertProperties.

        the flag that indicates whether the alert should be auto resolved or not.

        :param auto_mitigate: The auto_mitigate of this MetricAlertProperties.
        :type auto_mitigate: bool
        """

        self._auto_mitigate = auto_mitigate

    @property
    def criteria(self):
        """Gets the criteria of this MetricAlertProperties.


        :return: The criteria of this MetricAlertProperties.
        :rtype: MetricAlertCriteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this MetricAlertProperties.


        :param criteria: The criteria of this MetricAlertProperties.
        :type criteria: MetricAlertCriteria
        """
        if criteria is None:
            raise ValueError("Invalid value for `criteria`, must not be `None`")

        self._criteria = criteria

    @property
    def description(self):
        """Gets the description of this MetricAlertProperties.

        the description of the metric alert that will be included in the alert email.

        :return: The description of this MetricAlertProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MetricAlertProperties.

        the description of the metric alert that will be included in the alert email.

        :param description: The description of this MetricAlertProperties.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this MetricAlertProperties.

        the flag that indicates whether the metric alert is enabled.

        :return: The enabled of this MetricAlertProperties.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MetricAlertProperties.

        the flag that indicates whether the metric alert is enabled.

        :param enabled: The enabled of this MetricAlertProperties.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def evaluation_frequency(self):
        """Gets the evaluation_frequency of this MetricAlertProperties.

        how often the metric alert is evaluated represented in ISO 8601 duration format.

        :return: The evaluation_frequency of this MetricAlertProperties.
        :rtype: str
        """
        return self._evaluation_frequency

    @evaluation_frequency.setter
    def evaluation_frequency(self, evaluation_frequency):
        """Sets the evaluation_frequency of this MetricAlertProperties.

        how often the metric alert is evaluated represented in ISO 8601 duration format.

        :param evaluation_frequency: The evaluation_frequency of this MetricAlertProperties.
        :type evaluation_frequency: str
        """
        if evaluation_frequency is None:
            raise ValueError("Invalid value for `evaluation_frequency`, must not be `None`")

        self._evaluation_frequency = evaluation_frequency

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this MetricAlertProperties.

        Last time the rule was updated in ISO8601 format.

        :return: The last_updated_time of this MetricAlertProperties.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this MetricAlertProperties.

        Last time the rule was updated in ISO8601 format.

        :param last_updated_time: The last_updated_time of this MetricAlertProperties.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def scopes(self):
        """Gets the scopes of this MetricAlertProperties.

        the list of resource id's that this metric alert is scoped to.

        :return: The scopes of this MetricAlertProperties.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this MetricAlertProperties.

        the list of resource id's that this metric alert is scoped to.

        :param scopes: The scopes of this MetricAlertProperties.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def severity(self):
        """Gets the severity of this MetricAlertProperties.

        Alert severity {0, 1, 2, 3, 4}

        :return: The severity of this MetricAlertProperties.
        :rtype: int
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this MetricAlertProperties.

        Alert severity {0, 1, 2, 3, 4}

        :param severity: The severity of this MetricAlertProperties.
        :type severity: int
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")

        self._severity = severity

    @property
    def target_resource_region(self):
        """Gets the target_resource_region of this MetricAlertProperties.

        the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.

        :return: The target_resource_region of this MetricAlertProperties.
        :rtype: str
        """
        return self._target_resource_region

    @target_resource_region.setter
    def target_resource_region(self, target_resource_region):
        """Sets the target_resource_region of this MetricAlertProperties.

        the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.

        :param target_resource_region: The target_resource_region of this MetricAlertProperties.
        :type target_resource_region: str
        """

        self._target_resource_region = target_resource_region

    @property
    def target_resource_type(self):
        """Gets the target_resource_type of this MetricAlertProperties.

        the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.

        :return: The target_resource_type of this MetricAlertProperties.
        :rtype: str
        """
        return self._target_resource_type

    @target_resource_type.setter
    def target_resource_type(self, target_resource_type):
        """Sets the target_resource_type of this MetricAlertProperties.

        the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.

        :param target_resource_type: The target_resource_type of this MetricAlertProperties.
        :type target_resource_type: str
        """

        self._target_resource_type = target_resource_type

    @property
    def window_size(self):
        """Gets the window_size of this MetricAlertProperties.

        the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.

        :return: The window_size of this MetricAlertProperties.
        :rtype: str
        """
        return self._window_size

    @window_size.setter
    def window_size(self, window_size):
        """Sets the window_size of this MetricAlertProperties.

        the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.

        :param window_size: The window_size of this MetricAlertProperties.
        :type window_size: str
        """
        if window_size is None:
            raise ValueError("Invalid value for `window_size`, must not be `None`")

        self._window_size = window_size
