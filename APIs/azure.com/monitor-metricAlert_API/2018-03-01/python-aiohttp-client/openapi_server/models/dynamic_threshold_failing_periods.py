# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DynamicThresholdFailingPeriods(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_failing_periods_to_alert: float=None, number_of_evaluation_periods: float=None):
        """DynamicThresholdFailingPeriods - a model defined in OpenAPI

        :param min_failing_periods_to_alert: The min_failing_periods_to_alert of this DynamicThresholdFailingPeriods.
        :param number_of_evaluation_periods: The number_of_evaluation_periods of this DynamicThresholdFailingPeriods.
        """
        self.openapi_types = {
            'min_failing_periods_to_alert': float,
            'number_of_evaluation_periods': float
        }

        self.attribute_map = {
            'min_failing_periods_to_alert': 'minFailingPeriodsToAlert',
            'number_of_evaluation_periods': 'numberOfEvaluationPeriods'
        }

        self._min_failing_periods_to_alert = min_failing_periods_to_alert
        self._number_of_evaluation_periods = number_of_evaluation_periods

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DynamicThresholdFailingPeriods':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DynamicThresholdFailingPeriods of this DynamicThresholdFailingPeriods.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_failing_periods_to_alert(self):
        """Gets the min_failing_periods_to_alert of this DynamicThresholdFailingPeriods.

        The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.

        :return: The min_failing_periods_to_alert of this DynamicThresholdFailingPeriods.
        :rtype: float
        """
        return self._min_failing_periods_to_alert

    @min_failing_periods_to_alert.setter
    def min_failing_periods_to_alert(self, min_failing_periods_to_alert):
        """Sets the min_failing_periods_to_alert of this DynamicThresholdFailingPeriods.

        The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.

        :param min_failing_periods_to_alert: The min_failing_periods_to_alert of this DynamicThresholdFailingPeriods.
        :type min_failing_periods_to_alert: float
        """
        if min_failing_periods_to_alert is None:
            raise ValueError("Invalid value for `min_failing_periods_to_alert`, must not be `None`")

        self._min_failing_periods_to_alert = min_failing_periods_to_alert

    @property
    def number_of_evaluation_periods(self):
        """Gets the number_of_evaluation_periods of this DynamicThresholdFailingPeriods.

        The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.

        :return: The number_of_evaluation_periods of this DynamicThresholdFailingPeriods.
        :rtype: float
        """
        return self._number_of_evaluation_periods

    @number_of_evaluation_periods.setter
    def number_of_evaluation_periods(self, number_of_evaluation_periods):
        """Sets the number_of_evaluation_periods of this DynamicThresholdFailingPeriods.

        The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.

        :param number_of_evaluation_periods: The number_of_evaluation_periods of this DynamicThresholdFailingPeriods.
        :type number_of_evaluation_periods: float
        """
        if number_of_evaluation_periods is None:
            raise ValueError("Invalid value for `number_of_evaluation_periods`, must not be `None`")

        self._number_of_evaluation_periods = number_of_evaluation_periods
