/*
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MetricAlertResource;
import org.openapitools.client.model.MetricAlertResourceCollection;
import org.openapitools.client.model.MetricAlertResourcePatch;
import org.openapitools.client.model.MetricAlertsListBySubscriptionDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricAlertsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetricAlertsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricAlertsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for metricAlertsCreateOrUpdate
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, MetricAlertResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metricAlertsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, MetricAlertResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling metricAlertsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling metricAlertsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling metricAlertsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling metricAlertsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling metricAlertsCreateOrUpdate(Async)");
        }

        return metricAlertsCreateOrUpdateCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Create or update an metric alert definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @return MetricAlertResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public MetricAlertResource metricAlertsCreateOrUpdate(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, MetricAlertResource parameters) throws ApiException {
        ApiResponse<MetricAlertResource> localVarResp = metricAlertsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update an metric alert definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @return ApiResponse&lt;MetricAlertResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricAlertResource> metricAlertsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, MetricAlertResource parameters) throws ApiException {
        okhttp3.Call localVarCall = metricAlertsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<MetricAlertResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update an metric alert definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to create or update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, MetricAlertResource parameters, final ApiCallback<MetricAlertResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = metricAlertsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<MetricAlertResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metricAlertsDelete
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete an metric alert rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content: the request was successful, but the response is empty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsDeleteCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metricAlertsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling metricAlertsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling metricAlertsDelete(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling metricAlertsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling metricAlertsDelete(Async)");
        }

        return metricAlertsDeleteCall(subscriptionId, resourceGroupName, ruleName, apiVersion, _callback);

    }

    /**
     * 
     * Delete an alert rule definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete an metric alert rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content: the request was successful, but the response is empty </td><td>  -  </td></tr>
     </table>
     */
    public void metricAlertsDelete(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion) throws ApiException {
        metricAlertsDeleteWithHttpInfo(subscriptionId, resourceGroupName, ruleName, apiVersion);
    }

    /**
     * 
     * Delete an alert rule definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete an metric alert rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content: the request was successful, but the response is empty </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metricAlertsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = metricAlertsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete an alert rule definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request to delete an metric alert rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No content: the request was successful, but the response is empty </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsDeleteAsync(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metricAlertsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metricAlertsGet
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsGetCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metricAlertsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling metricAlertsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling metricAlertsGet(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling metricAlertsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling metricAlertsGet(Async)");
        }

        return metricAlertsGetCall(subscriptionId, resourceGroupName, ruleName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieve an alert rule definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @return MetricAlertResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public MetricAlertResource metricAlertsGet(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion) throws ApiException {
        ApiResponse<MetricAlertResource> localVarResp = metricAlertsGetWithHttpInfo(subscriptionId, resourceGroupName, ruleName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve an alert rule definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;MetricAlertResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricAlertResource> metricAlertsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = metricAlertsGetValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricAlertResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve an alert rule definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsGetAsync(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, final ApiCallback<MetricAlertResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = metricAlertsGetValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricAlertResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metricAlertsListByResourceGroup
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metricAlertsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling metricAlertsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling metricAlertsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling metricAlertsListByResourceGroup(Async)");
        }

        return metricAlertsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieve alert rule definitions in a resource group.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @return MetricAlertResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public MetricAlertResourceCollection metricAlertsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<MetricAlertResourceCollection> localVarResp = metricAlertsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve alert rule definitions in a resource group.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;MetricAlertResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricAlertResourceCollection> metricAlertsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = metricAlertsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricAlertResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve alert rule definitions in a resource group.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<MetricAlertResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = metricAlertsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricAlertResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metricAlertsListBySubscription
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/metricAlerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metricAlertsListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling metricAlertsListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling metricAlertsListBySubscription(Async)");
        }

        return metricAlertsListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Retrieve alert rule definitions in a subscription.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return MetricAlertResourceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public MetricAlertResourceCollection metricAlertsListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MetricAlertResourceCollection> localVarResp = metricAlertsListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve alert rule definitions in a subscription.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;MetricAlertResourceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricAlertResourceCollection> metricAlertsListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = metricAlertsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricAlertResourceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve alert rule definitions in a subscription.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful request for a list of metric alerts </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<MetricAlertResourceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = metricAlertsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricAlertResourceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metricAlertsUpdate
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsUpdateCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, MetricAlertResourcePatch parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metricAlertsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, MetricAlertResourcePatch parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling metricAlertsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling metricAlertsUpdate(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling metricAlertsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling metricAlertsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling metricAlertsUpdate(Async)");
        }

        return metricAlertsUpdateCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Update an metric alert definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to update. (required)
     * @return MetricAlertResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public MetricAlertResource metricAlertsUpdate(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, MetricAlertResourcePatch parameters) throws ApiException {
        ApiResponse<MetricAlertResource> localVarResp = metricAlertsUpdateWithHttpInfo(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an metric alert definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to update. (required)
     * @return ApiResponse&lt;MetricAlertResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricAlertResource> metricAlertsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, MetricAlertResourcePatch parameters) throws ApiException {
        okhttp3.Call localVarCall = metricAlertsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<MetricAlertResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an metric alert definition.
     * @param subscriptionId The Azure subscription Id. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param ruleName The name of the rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param parameters The parameters of the rule to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> BadRequest </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricAlertsUpdateAsync(String subscriptionId, String resourceGroupName, String ruleName, String apiVersion, MetricAlertResourcePatch parameters, final ApiCallback<MetricAlertResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = metricAlertsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<MetricAlertResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
