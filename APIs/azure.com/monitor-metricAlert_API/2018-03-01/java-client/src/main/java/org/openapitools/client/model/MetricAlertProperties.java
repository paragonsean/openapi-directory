/*
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricAlertAction;
import org.openapitools.client.model.MetricAlertCriteria;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An alert rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:07.326031-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricAlertProperties {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<MetricAlertAction> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTO_MITIGATE = "autoMitigate";
  @SerializedName(SERIALIZED_NAME_AUTO_MITIGATE)
  private Boolean autoMitigate;

  public static final String SERIALIZED_NAME_CRITERIA = "criteria";
  @SerializedName(SERIALIZED_NAME_CRITERIA)
  private MetricAlertCriteria criteria;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EVALUATION_FREQUENCY = "evaluationFrequency";
  @SerializedName(SERIALIZED_NAME_EVALUATION_FREQUENCY)
  private String evaluationFrequency;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Integer severity;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_REGION = "targetResourceRegion";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_REGION)
  private String targetResourceRegion;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_TYPE = "targetResourceType";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_TYPE)
  private String targetResourceType;

  public static final String SERIALIZED_NAME_WINDOW_SIZE = "windowSize";
  @SerializedName(SERIALIZED_NAME_WINDOW_SIZE)
  private String windowSize;

  public MetricAlertProperties() {
  }

  public MetricAlertProperties(
     OffsetDateTime lastUpdatedTime
  ) {
    this();
    this.lastUpdatedTime = lastUpdatedTime;
  }

  public MetricAlertProperties actions(List<MetricAlertAction> actions) {
    this.actions = actions;
    return this;
  }

  public MetricAlertProperties addActionsItem(MetricAlertAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
   * @return actions
   */
  @javax.annotation.Nullable
  public List<MetricAlertAction> getActions() {
    return actions;
  }

  public void setActions(List<MetricAlertAction> actions) {
    this.actions = actions;
  }


  public MetricAlertProperties autoMitigate(Boolean autoMitigate) {
    this.autoMitigate = autoMitigate;
    return this;
  }

  /**
   * the flag that indicates whether the alert should be auto resolved or not.
   * @return autoMitigate
   */
  @javax.annotation.Nullable
  public Boolean getAutoMitigate() {
    return autoMitigate;
  }

  public void setAutoMitigate(Boolean autoMitigate) {
    this.autoMitigate = autoMitigate;
  }


  public MetricAlertProperties criteria(MetricAlertCriteria criteria) {
    this.criteria = criteria;
    return this;
  }

  /**
   * Get criteria
   * @return criteria
   */
  @javax.annotation.Nonnull
  public MetricAlertCriteria getCriteria() {
    return criteria;
  }

  public void setCriteria(MetricAlertCriteria criteria) {
    this.criteria = criteria;
  }


  public MetricAlertProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * the description of the metric alert that will be included in the alert email.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public MetricAlertProperties enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * the flag that indicates whether the metric alert is enabled.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public MetricAlertProperties evaluationFrequency(String evaluationFrequency) {
    this.evaluationFrequency = evaluationFrequency;
    return this;
  }

  /**
   * how often the metric alert is evaluated represented in ISO 8601 duration format.
   * @return evaluationFrequency
   */
  @javax.annotation.Nonnull
  public String getEvaluationFrequency() {
    return evaluationFrequency;
  }

  public void setEvaluationFrequency(String evaluationFrequency) {
    this.evaluationFrequency = evaluationFrequency;
  }


  /**
   * Last time the rule was updated in ISO8601 format.
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }



  public MetricAlertProperties scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public MetricAlertProperties addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * the list of resource id&#39;s that this metric alert is scoped to.
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public MetricAlertProperties severity(Integer severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Alert severity {0, 1, 2, 3, 4}
   * @return severity
   */
  @javax.annotation.Nonnull
  public Integer getSeverity() {
    return severity;
  }

  public void setSeverity(Integer severity) {
    this.severity = severity;
  }


  public MetricAlertProperties targetResourceRegion(String targetResourceRegion) {
    this.targetResourceRegion = targetResourceRegion;
    return this;
  }

  /**
   * the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
   * @return targetResourceRegion
   */
  @javax.annotation.Nullable
  public String getTargetResourceRegion() {
    return targetResourceRegion;
  }

  public void setTargetResourceRegion(String targetResourceRegion) {
    this.targetResourceRegion = targetResourceRegion;
  }


  public MetricAlertProperties targetResourceType(String targetResourceType) {
    this.targetResourceType = targetResourceType;
    return this;
  }

  /**
   * the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
   * @return targetResourceType
   */
  @javax.annotation.Nullable
  public String getTargetResourceType() {
    return targetResourceType;
  }

  public void setTargetResourceType(String targetResourceType) {
    this.targetResourceType = targetResourceType;
  }


  public MetricAlertProperties windowSize(String windowSize) {
    this.windowSize = windowSize;
    return this;
  }

  /**
   * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
   * @return windowSize
   */
  @javax.annotation.Nonnull
  public String getWindowSize() {
    return windowSize;
  }

  public void setWindowSize(String windowSize) {
    this.windowSize = windowSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricAlertProperties metricAlertProperties = (MetricAlertProperties) o;
    return Objects.equals(this.actions, metricAlertProperties.actions) &&
        Objects.equals(this.autoMitigate, metricAlertProperties.autoMitigate) &&
        Objects.equals(this.criteria, metricAlertProperties.criteria) &&
        Objects.equals(this.description, metricAlertProperties.description) &&
        Objects.equals(this.enabled, metricAlertProperties.enabled) &&
        Objects.equals(this.evaluationFrequency, metricAlertProperties.evaluationFrequency) &&
        Objects.equals(this.lastUpdatedTime, metricAlertProperties.lastUpdatedTime) &&
        Objects.equals(this.scopes, metricAlertProperties.scopes) &&
        Objects.equals(this.severity, metricAlertProperties.severity) &&
        Objects.equals(this.targetResourceRegion, metricAlertProperties.targetResourceRegion) &&
        Objects.equals(this.targetResourceType, metricAlertProperties.targetResourceType) &&
        Objects.equals(this.windowSize, metricAlertProperties.windowSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, autoMitigate, criteria, description, enabled, evaluationFrequency, lastUpdatedTime, scopes, severity, targetResourceRegion, targetResourceType, windowSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricAlertProperties {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    autoMitigate: ").append(toIndentedString(autoMitigate)).append("\n");
    sb.append("    criteria: ").append(toIndentedString(criteria)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    evaluationFrequency: ").append(toIndentedString(evaluationFrequency)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    targetResourceRegion: ").append(toIndentedString(targetResourceRegion)).append("\n");
    sb.append("    targetResourceType: ").append(toIndentedString(targetResourceType)).append("\n");
    sb.append("    windowSize: ").append(toIndentedString(windowSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("autoMitigate");
    openapiFields.add("criteria");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("evaluationFrequency");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("scopes");
    openapiFields.add("severity");
    openapiFields.add("targetResourceRegion");
    openapiFields.add("targetResourceType");
    openapiFields.add("windowSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("criteria");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("evaluationFrequency");
    openapiRequiredFields.add("severity");
    openapiRequiredFields.add("windowSize");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricAlertProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricAlertProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricAlertProperties is not found in the empty JSON string", MetricAlertProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricAlertProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricAlertProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricAlertProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            MetricAlertAction.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("evaluationFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationFrequency").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if ((jsonObj.get("targetResourceRegion") != null && !jsonObj.get("targetResourceRegion").isJsonNull()) && !jsonObj.get("targetResourceRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceRegion").toString()));
      }
      if ((jsonObj.get("targetResourceType") != null && !jsonObj.get("targetResourceType").isJsonNull()) && !jsonObj.get("targetResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceType").toString()));
      }
      if (!jsonObj.get("windowSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windowSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windowSize").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricAlertProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricAlertProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricAlertProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricAlertProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricAlertProperties>() {
           @Override
           public void write(JsonWriter out, MetricAlertProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricAlertProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricAlertProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricAlertProperties
   * @throws IOException if the JSON string is invalid with respect to MetricAlertProperties
   */
  public static MetricAlertProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricAlertProperties.class);
  }

  /**
   * Convert an instance of MetricAlertProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

