/*
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The types of conditions for a multi resource alert.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:41:07.326031-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MultiMetricCriteria {
  /**
   * Specifies the type of threshold criteria
   */
  @JsonAdapter(CriterionTypeEnum.Adapter.class)
  public enum CriterionTypeEnum {
    STATIC_THRESHOLD_CRITERION("StaticThresholdCriterion"),
    
    DYNAMIC_THRESHOLD_CRITERION("DynamicThresholdCriterion");

    private String value;

    CriterionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CriterionTypeEnum fromValue(String value) {
      for (CriterionTypeEnum b : CriterionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CriterionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CriterionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CriterionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CriterionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CriterionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CRITERION_TYPE = "criterionType";
  @SerializedName(SERIALIZED_NAME_CRITERION_TYPE)
  protected CriterionTypeEnum criterionType;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<MetricDimension> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_NAME = "metricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private String metricName;

  public static final String SERIALIZED_NAME_METRIC_NAMESPACE = "metricNamespace";
  @SerializedName(SERIALIZED_NAME_METRIC_NAMESPACE)
  private String metricNamespace;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * the criteria time aggregation types.
   */
  @JsonAdapter(TimeAggregationEnum.Adapter.class)
  public enum TimeAggregationEnum {
    AVERAGE("Average"),
    
    MINIMUM("Minimum"),
    
    MAXIMUM("Maximum"),
    
    TOTAL("Total");

    private String value;

    TimeAggregationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeAggregationEnum fromValue(String value) {
      for (TimeAggregationEnum b : TimeAggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeAggregationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeAggregationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeAggregationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeAggregationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeAggregationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_AGGREGATION = "timeAggregation";
  @SerializedName(SERIALIZED_NAME_TIME_AGGREGATION)
  private TimeAggregationEnum timeAggregation;

  public MultiMetricCriteria() {
  }

  public MultiMetricCriteria criterionType(CriterionTypeEnum criterionType) {
    this.criterionType = criterionType;
    return this;
  }

  /**
   * Specifies the type of threshold criteria
   * @return criterionType
   */
  @javax.annotation.Nonnull
  public CriterionTypeEnum getCriterionType() {
    return criterionType;
  }

  public void setCriterionType(CriterionTypeEnum criterionType) {
    this.criterionType = criterionType;
  }


  public MultiMetricCriteria dimensions(List<MetricDimension> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public MultiMetricCriteria addDimensionsItem(MetricDimension dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * List of dimension conditions.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<MetricDimension> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<MetricDimension> dimensions) {
    this.dimensions = dimensions;
  }


  public MultiMetricCriteria metricName(String metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Name of the metric.
   * @return metricName
   */
  @javax.annotation.Nonnull
  public String getMetricName() {
    return metricName;
  }

  public void setMetricName(String metricName) {
    this.metricName = metricName;
  }


  public MultiMetricCriteria metricNamespace(String metricNamespace) {
    this.metricNamespace = metricNamespace;
    return this;
  }

  /**
   * Namespace of the metric.
   * @return metricNamespace
   */
  @javax.annotation.Nullable
  public String getMetricNamespace() {
    return metricNamespace;
  }

  public void setMetricNamespace(String metricNamespace) {
    this.metricNamespace = metricNamespace;
  }


  public MultiMetricCriteria name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the criteria.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MultiMetricCriteria timeAggregation(TimeAggregationEnum timeAggregation) {
    this.timeAggregation = timeAggregation;
    return this;
  }

  /**
   * the criteria time aggregation types.
   * @return timeAggregation
   */
  @javax.annotation.Nonnull
  public TimeAggregationEnum getTimeAggregation() {
    return timeAggregation;
  }

  public void setTimeAggregation(TimeAggregationEnum timeAggregation) {
    this.timeAggregation = timeAggregation;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MultiMetricCriteria instance itself
   */
  public MultiMetricCriteria putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiMetricCriteria multiMetricCriteria = (MultiMetricCriteria) o;
    return Objects.equals(this.criterionType, multiMetricCriteria.criterionType) &&
        Objects.equals(this.dimensions, multiMetricCriteria.dimensions) &&
        Objects.equals(this.metricName, multiMetricCriteria.metricName) &&
        Objects.equals(this.metricNamespace, multiMetricCriteria.metricNamespace) &&
        Objects.equals(this.name, multiMetricCriteria.name) &&
        Objects.equals(this.timeAggregation, multiMetricCriteria.timeAggregation)&&
        Objects.equals(this.additionalProperties, multiMetricCriteria.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(criterionType, dimensions, metricName, metricNamespace, name, timeAggregation, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiMetricCriteria {\n");
    sb.append("    criterionType: ").append(toIndentedString(criterionType)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    metricNamespace: ").append(toIndentedString(metricNamespace)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timeAggregation: ").append(toIndentedString(timeAggregation)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("criterionType");
    openapiFields.add("dimensions");
    openapiFields.add("metricName");
    openapiFields.add("metricNamespace");
    openapiFields.add("name");
    openapiFields.add("timeAggregation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("criterionType");
    openapiRequiredFields.add("metricName");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("timeAggregation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiMetricCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiMetricCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiMetricCriteria is not found in the empty JSON string", MultiMetricCriteria.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("criterionType").getAsString();
      switch (discriminatorValue) {
        case "DynamicMetricCriteria":
          DynamicMetricCriteria.validateJsonElement(jsonElement);
          break;
        case "MetricCriteria":
          MetricCriteria.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `criterionType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of MultiMetricCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiMetricCriteria
   * @throws IOException if the JSON string is invalid with respect to MultiMetricCriteria
   */
  public static MultiMetricCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiMetricCriteria.class);
  }

  /**
   * Convert an instance of MultiMetricCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

