/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DynamicThresholdFailingPeriods model module.
 * @module model/DynamicThresholdFailingPeriods
 * @version 2018-03-01
 */
class DynamicThresholdFailingPeriods {
    /**
     * Constructs a new <code>DynamicThresholdFailingPeriods</code>.
     * The minimum number of violations required within the selected lookback time window required to raise an alert.
     * @alias module:model/DynamicThresholdFailingPeriods
     * @param minFailingPeriodsToAlert {Number} The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
     * @param numberOfEvaluationPeriods {Number} The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
     */
    constructor(minFailingPeriodsToAlert, numberOfEvaluationPeriods) { 
        
        DynamicThresholdFailingPeriods.initialize(this, minFailingPeriodsToAlert, numberOfEvaluationPeriods);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, minFailingPeriodsToAlert, numberOfEvaluationPeriods) { 
        obj['minFailingPeriodsToAlert'] = minFailingPeriodsToAlert;
        obj['numberOfEvaluationPeriods'] = numberOfEvaluationPeriods;
    }

    /**
     * Constructs a <code>DynamicThresholdFailingPeriods</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DynamicThresholdFailingPeriods} obj Optional instance to populate.
     * @return {module:model/DynamicThresholdFailingPeriods} The populated <code>DynamicThresholdFailingPeriods</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DynamicThresholdFailingPeriods();

            if (data.hasOwnProperty('minFailingPeriodsToAlert')) {
                obj['minFailingPeriodsToAlert'] = ApiClient.convertToType(data['minFailingPeriodsToAlert'], 'Number');
            }
            if (data.hasOwnProperty('numberOfEvaluationPeriods')) {
                obj['numberOfEvaluationPeriods'] = ApiClient.convertToType(data['numberOfEvaluationPeriods'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DynamicThresholdFailingPeriods</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DynamicThresholdFailingPeriods</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DynamicThresholdFailingPeriods.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

DynamicThresholdFailingPeriods.RequiredProperties = ["minFailingPeriodsToAlert", "numberOfEvaluationPeriods"];

/**
 * The number of violations to trigger an alert. Should be smaller or equal to numberOfEvaluationPeriods.
 * @member {Number} minFailingPeriodsToAlert
 */
DynamicThresholdFailingPeriods.prototype['minFailingPeriodsToAlert'] = undefined;

/**
 * The number of aggregated lookback points. The lookback time window is calculated based on the aggregation granularity (windowSize) and the selected number of aggregated points.
 * @member {Number} numberOfEvaluationPeriods
 */
DynamicThresholdFailingPeriods.prototype['numberOfEvaluationPeriods'] = undefined;






export default DynamicThresholdFailingPeriods;

