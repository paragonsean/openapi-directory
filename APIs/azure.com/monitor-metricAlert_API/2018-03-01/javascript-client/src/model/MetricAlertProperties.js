/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricAlertAction from './MetricAlertAction';
import MetricAlertCriteria from './MetricAlertCriteria';

/**
 * The MetricAlertProperties model module.
 * @module model/MetricAlertProperties
 * @version 2018-03-01
 */
class MetricAlertProperties {
    /**
     * Constructs a new <code>MetricAlertProperties</code>.
     * An alert rule.
     * @alias module:model/MetricAlertProperties
     * @param criteria {module:model/MetricAlertCriteria} 
     * @param description {String} the description of the metric alert that will be included in the alert email.
     * @param enabled {Boolean} the flag that indicates whether the metric alert is enabled.
     * @param evaluationFrequency {String} how often the metric alert is evaluated represented in ISO 8601 duration format.
     * @param severity {Number} Alert severity {0, 1, 2, 3, 4}
     * @param windowSize {String} the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
     */
    constructor(criteria, description, enabled, evaluationFrequency, severity, windowSize) { 
        
        MetricAlertProperties.initialize(this, criteria, description, enabled, evaluationFrequency, severity, windowSize);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, criteria, description, enabled, evaluationFrequency, severity, windowSize) { 
        obj['criteria'] = criteria;
        obj['description'] = description;
        obj['enabled'] = enabled;
        obj['evaluationFrequency'] = evaluationFrequency;
        obj['severity'] = severity;
        obj['windowSize'] = windowSize;
    }

    /**
     * Constructs a <code>MetricAlertProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricAlertProperties} obj Optional instance to populate.
     * @return {module:model/MetricAlertProperties} The populated <code>MetricAlertProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricAlertProperties();

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [MetricAlertAction]);
            }
            if (data.hasOwnProperty('autoMitigate')) {
                obj['autoMitigate'] = ApiClient.convertToType(data['autoMitigate'], 'Boolean');
            }
            if (data.hasOwnProperty('criteria')) {
                obj['criteria'] = MetricAlertCriteria.constructFromObject(data['criteria']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('evaluationFrequency')) {
                obj['evaluationFrequency'] = ApiClient.convertToType(data['evaluationFrequency'], 'String');
            }
            if (data.hasOwnProperty('lastUpdatedTime')) {
                obj['lastUpdatedTime'] = ApiClient.convertToType(data['lastUpdatedTime'], 'Date');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'Number');
            }
            if (data.hasOwnProperty('targetResourceRegion')) {
                obj['targetResourceRegion'] = ApiClient.convertToType(data['targetResourceRegion'], 'String');
            }
            if (data.hasOwnProperty('targetResourceType')) {
                obj['targetResourceType'] = ApiClient.convertToType(data['targetResourceType'], 'String');
            }
            if (data.hasOwnProperty('windowSize')) {
                obj['windowSize'] = ApiClient.convertToType(data['windowSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricAlertProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricAlertProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricAlertProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                MetricAlertAction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['evaluationFrequency'] && !(typeof data['evaluationFrequency'] === 'string' || data['evaluationFrequency'] instanceof String)) {
            throw new Error("Expected the field `evaluationFrequency` to be a primitive type in the JSON string but got " + data['evaluationFrequency']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['targetResourceRegion'] && !(typeof data['targetResourceRegion'] === 'string' || data['targetResourceRegion'] instanceof String)) {
            throw new Error("Expected the field `targetResourceRegion` to be a primitive type in the JSON string but got " + data['targetResourceRegion']);
        }
        // ensure the json data is a string
        if (data['targetResourceType'] && !(typeof data['targetResourceType'] === 'string' || data['targetResourceType'] instanceof String)) {
            throw new Error("Expected the field `targetResourceType` to be a primitive type in the JSON string but got " + data['targetResourceType']);
        }
        // ensure the json data is a string
        if (data['windowSize'] && !(typeof data['windowSize'] === 'string' || data['windowSize'] instanceof String)) {
            throw new Error("Expected the field `windowSize` to be a primitive type in the JSON string but got " + data['windowSize']);
        }

        return true;
    }


}

MetricAlertProperties.RequiredProperties = ["criteria", "description", "enabled", "evaluationFrequency", "severity", "windowSize"];

/**
 * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
 * @member {Array.<module:model/MetricAlertAction>} actions
 */
MetricAlertProperties.prototype['actions'] = undefined;

/**
 * the flag that indicates whether the alert should be auto resolved or not.
 * @member {Boolean} autoMitigate
 */
MetricAlertProperties.prototype['autoMitigate'] = undefined;

/**
 * @member {module:model/MetricAlertCriteria} criteria
 */
MetricAlertProperties.prototype['criteria'] = undefined;

/**
 * the description of the metric alert that will be included in the alert email.
 * @member {String} description
 */
MetricAlertProperties.prototype['description'] = undefined;

/**
 * the flag that indicates whether the metric alert is enabled.
 * @member {Boolean} enabled
 */
MetricAlertProperties.prototype['enabled'] = undefined;

/**
 * how often the metric alert is evaluated represented in ISO 8601 duration format.
 * @member {String} evaluationFrequency
 */
MetricAlertProperties.prototype['evaluationFrequency'] = undefined;

/**
 * Last time the rule was updated in ISO8601 format.
 * @member {Date} lastUpdatedTime
 */
MetricAlertProperties.prototype['lastUpdatedTime'] = undefined;

/**
 * the list of resource id's that this metric alert is scoped to.
 * @member {Array.<String>} scopes
 */
MetricAlertProperties.prototype['scopes'] = undefined;

/**
 * Alert severity {0, 1, 2, 3, 4}
 * @member {Number} severity
 */
MetricAlertProperties.prototype['severity'] = undefined;

/**
 * the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
 * @member {String} targetResourceRegion
 */
MetricAlertProperties.prototype['targetResourceRegion'] = undefined;

/**
 * the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
 * @member {String} targetResourceType
 */
MetricAlertProperties.prototype['targetResourceType'] = undefined;

/**
 * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
 * @member {String} windowSize
 */
MetricAlertProperties.prototype['windowSize'] = undefined;






export default MetricAlertProperties;

