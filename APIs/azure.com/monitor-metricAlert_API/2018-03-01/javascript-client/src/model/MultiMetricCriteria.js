/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricDimension from './MetricDimension';

/**
 * The MultiMetricCriteria model module.
 * @module model/MultiMetricCriteria
 * @version 2018-03-01
 */
class MultiMetricCriteria {
    /**
     * Constructs a new <code>MultiMetricCriteria</code>.
     * The types of conditions for a multi resource alert.
     * @alias module:model/MultiMetricCriteria
     * @extends Object
     * @param criterionType {module:model/MultiMetricCriteria.CriterionTypeEnum} Specifies the type of threshold criteria
     * @param metricName {String} Name of the metric.
     * @param name {String} Name of the criteria.
     * @param timeAggregation {module:model/MultiMetricCriteria.TimeAggregationEnum} the criteria time aggregation types.
     */
    constructor(criterionType, metricName, name, timeAggregation) { 
        
        MultiMetricCriteria.initialize(this, criterionType, metricName, name, timeAggregation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, criterionType, metricName, name, timeAggregation) { 
        obj['criterionType'] = criterionType;
        obj['metricName'] = metricName;
        obj['name'] = name;
        obj['timeAggregation'] = timeAggregation;
    }

    /**
     * Constructs a <code>MultiMetricCriteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MultiMetricCriteria} obj Optional instance to populate.
     * @return {module:model/MultiMetricCriteria} The populated <code>MultiMetricCriteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MultiMetricCriteria();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('criterionType')) {
                obj['criterionType'] = ApiClient.convertToType(data['criterionType'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [MetricDimension]);
            }
            if (data.hasOwnProperty('metricName')) {
                obj['metricName'] = ApiClient.convertToType(data['metricName'], 'String');
            }
            if (data.hasOwnProperty('metricNamespace')) {
                obj['metricNamespace'] = ApiClient.convertToType(data['metricNamespace'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('timeAggregation')) {
                obj['timeAggregation'] = ApiClient.convertToType(data['timeAggregation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MultiMetricCriteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MultiMetricCriteria</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MultiMetricCriteria.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['criterionType'] && !(typeof data['criterionType'] === 'string' || data['criterionType'] instanceof String)) {
            throw new Error("Expected the field `criterionType` to be a primitive type in the JSON string but got " + data['criterionType']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                MetricDimension.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['metricName'] && !(typeof data['metricName'] === 'string' || data['metricName'] instanceof String)) {
            throw new Error("Expected the field `metricName` to be a primitive type in the JSON string but got " + data['metricName']);
        }
        // ensure the json data is a string
        if (data['metricNamespace'] && !(typeof data['metricNamespace'] === 'string' || data['metricNamespace'] instanceof String)) {
            throw new Error("Expected the field `metricNamespace` to be a primitive type in the JSON string but got " + data['metricNamespace']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['timeAggregation'] && !(typeof data['timeAggregation'] === 'string' || data['timeAggregation'] instanceof String)) {
            throw new Error("Expected the field `timeAggregation` to be a primitive type in the JSON string but got " + data['timeAggregation']);
        }

        return true;
    }


}

MultiMetricCriteria.RequiredProperties = ["criterionType", "metricName", "name", "timeAggregation"];

/**
 * Specifies the type of threshold criteria
 * @member {module:model/MultiMetricCriteria.CriterionTypeEnum} criterionType
 */
MultiMetricCriteria.prototype['criterionType'] = undefined;

/**
 * List of dimension conditions.
 * @member {Array.<module:model/MetricDimension>} dimensions
 */
MultiMetricCriteria.prototype['dimensions'] = undefined;

/**
 * Name of the metric.
 * @member {String} metricName
 */
MultiMetricCriteria.prototype['metricName'] = undefined;

/**
 * Namespace of the metric.
 * @member {String} metricNamespace
 */
MultiMetricCriteria.prototype['metricNamespace'] = undefined;

/**
 * Name of the criteria.
 * @member {String} name
 */
MultiMetricCriteria.prototype['name'] = undefined;

/**
 * the criteria time aggregation types.
 * @member {module:model/MultiMetricCriteria.TimeAggregationEnum} timeAggregation
 */
MultiMetricCriteria.prototype['timeAggregation'] = undefined;





/**
 * Allowed values for the <code>criterionType</code> property.
 * @enum {String}
 * @readonly
 */
MultiMetricCriteria['CriterionTypeEnum'] = {

    /**
     * value: "StaticThresholdCriterion"
     * @const
     */
    "StaticThresholdCriterion": "StaticThresholdCriterion",

    /**
     * value: "DynamicThresholdCriterion"
     * @const
     */
    "DynamicThresholdCriterion": "DynamicThresholdCriterion"
};


/**
 * Allowed values for the <code>timeAggregation</code> property.
 * @enum {String}
 * @readonly
 */
MultiMetricCriteria['TimeAggregationEnum'] = {

    /**
     * value: "Average"
     * @const
     */
    "Average": "Average",

    /**
     * value: "Minimum"
     * @const
     */
    "Minimum": "Minimum",

    /**
     * value: "Maximum"
     * @const
     */
    "Maximum": "Maximum",

    /**
     * value: "Total"
     * @const
     */
    "Total": "Total"
};



export default MultiMetricCriteria;

