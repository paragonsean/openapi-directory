/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DynamicThresholdFailingPeriods from './DynamicThresholdFailingPeriods';
import MetricDimension from './MetricDimension';
import MultiMetricCriteria from './MultiMetricCriteria';

/**
 * The DynamicMetricCriteria model module.
 * @module model/DynamicMetricCriteria
 * @version 2018-03-01
 */
class DynamicMetricCriteria {
    /**
     * Constructs a new <code>DynamicMetricCriteria</code>.
     * Criterion for dynamic threshold.
     * @alias module:model/DynamicMetricCriteria
     * @extends module:model/MultiMetricCriteria
     * @implements module:model/MultiMetricCriteria
     * @param criterionType {module:model/DynamicMetricCriteria.CriterionTypeEnum} Specifies the type of threshold criteria
     * @param metricName {String} Name of the metric.
     * @param name {String} Name of the criteria.
     * @param timeAggregation {module:model/DynamicMetricCriteria.TimeAggregationEnum} the criteria time aggregation types.
     */
    constructor(criterionType, metricName, name, timeAggregation) { 
        MultiMetricCriteria.initialize(this, criterionType, metricName, name, timeAggregation);
        DynamicMetricCriteria.initialize(this, criterionType, metricName, name, timeAggregation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, criterionType, metricName, name, timeAggregation) { 
        obj['alertSensitivity'] = alertSensitivity;
        obj['failingPeriods'] = failingPeriods;
        obj['operator'] = operator;
    }

    /**
     * Constructs a <code>DynamicMetricCriteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DynamicMetricCriteria} obj Optional instance to populate.
     * @return {module:model/DynamicMetricCriteria} The populated <code>DynamicMetricCriteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DynamicMetricCriteria();
            MultiMetricCriteria.constructFromObject(data, obj);
            MultiMetricCriteria.constructFromObject(data, obj);

            if (data.hasOwnProperty('alertSensitivity')) {
                obj['alertSensitivity'] = ApiClient.convertToType(data['alertSensitivity'], 'String');
            }
            if (data.hasOwnProperty('failingPeriods')) {
                obj['failingPeriods'] = DynamicThresholdFailingPeriods.constructFromObject(data['failingPeriods']);
            }
            if (data.hasOwnProperty('ignoreDataBefore')) {
                obj['ignoreDataBefore'] = ApiClient.convertToType(data['ignoreDataBefore'], 'Date');
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DynamicMetricCriteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DynamicMetricCriteria</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DynamicMetricCriteria.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alertSensitivity'] && !(typeof data['alertSensitivity'] === 'string' || data['alertSensitivity'] instanceof String)) {
            throw new Error("Expected the field `alertSensitivity` to be a primitive type in the JSON string but got " + data['alertSensitivity']);
        }
        // validate the optional field `failingPeriods`
        if (data['failingPeriods']) { // data not null
          DynamicThresholdFailingPeriods.validateJSON(data['failingPeriods']);
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }

        return true;
    }


}

DynamicMetricCriteria.RequiredProperties = ["alertSensitivity", "failingPeriods", "operator", "criterionType", "metricName", "name", "timeAggregation"];

/**
 * The extent of deviation required to trigger an alert. This will affect how tight the threshold is to the metric series pattern.
 * @member {module:model/DynamicMetricCriteria.AlertSensitivityEnum} alertSensitivity
 */
DynamicMetricCriteria.prototype['alertSensitivity'] = undefined;

/**
 * @member {module:model/DynamicThresholdFailingPeriods} failingPeriods
 */
DynamicMetricCriteria.prototype['failingPeriods'] = undefined;

/**
 * Use this option to set the date from which to start learning the metric historical data and calculate the dynamic thresholds (in ISO8601 format)
 * @member {Date} ignoreDataBefore
 */
DynamicMetricCriteria.prototype['ignoreDataBefore'] = undefined;

/**
 * The operator used to compare the metric value against the threshold.
 * @member {module:model/DynamicMetricCriteria.OperatorEnum} operator
 */
DynamicMetricCriteria.prototype['operator'] = undefined;


// Implement MultiMetricCriteria interface:
/**
 * Specifies the type of threshold criteria
 * @member {module:model/MultiMetricCriteria.CriterionTypeEnum} criterionType
 */
MultiMetricCriteria.prototype['criterionType'] = undefined;
/**
 * List of dimension conditions.
 * @member {Array.<module:model/MetricDimension>} dimensions
 */
MultiMetricCriteria.prototype['dimensions'] = undefined;
/**
 * Name of the metric.
 * @member {String} metricName
 */
MultiMetricCriteria.prototype['metricName'] = undefined;
/**
 * Namespace of the metric.
 * @member {String} metricNamespace
 */
MultiMetricCriteria.prototype['metricNamespace'] = undefined;
/**
 * Name of the criteria.
 * @member {String} name
 */
MultiMetricCriteria.prototype['name'] = undefined;
/**
 * the criteria time aggregation types.
 * @member {module:model/MultiMetricCriteria.TimeAggregationEnum} timeAggregation
 */
MultiMetricCriteria.prototype['timeAggregation'] = undefined;



/**
 * Allowed values for the <code>alertSensitivity</code> property.
 * @enum {String}
 * @readonly
 */
DynamicMetricCriteria['AlertSensitivityEnum'] = {

    /**
     * value: "Low"
     * @const
     */
    "Low": "Low",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "High"
     * @const
     */
    "High": "High"
};


/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
DynamicMetricCriteria['OperatorEnum'] = {

    /**
     * value: "GreaterThan"
     * @const
     */
    "GreaterThan": "GreaterThan",

    /**
     * value: "LessThan"
     * @const
     */
    "LessThan": "LessThan",

    /**
     * value: "GreaterOrLessThan"
     * @const
     */
    "GreaterOrLessThan": "GreaterOrLessThan"
};



export default DynamicMetricCriteria;

