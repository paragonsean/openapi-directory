/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricDimension from './MetricDimension';
import MultiMetricCriteria from './MultiMetricCriteria';

/**
 * The MetricCriteria model module.
 * @module model/MetricCriteria
 * @version 2018-03-01
 */
class MetricCriteria {
    /**
     * Constructs a new <code>MetricCriteria</code>.
     * Criterion to filter metrics.
     * @alias module:model/MetricCriteria
     * @extends module:model/MultiMetricCriteria
     * @implements module:model/MultiMetricCriteria
     * @param criterionType {module:model/MetricCriteria.CriterionTypeEnum} Specifies the type of threshold criteria
     * @param metricName {String} Name of the metric.
     * @param name {String} Name of the criteria.
     * @param timeAggregation {module:model/MetricCriteria.TimeAggregationEnum} the criteria time aggregation types.
     */
    constructor(criterionType, metricName, name, timeAggregation) { 
        MultiMetricCriteria.initialize(this, criterionType, metricName, name, timeAggregation);
        MetricCriteria.initialize(this, criterionType, metricName, name, timeAggregation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, criterionType, metricName, name, timeAggregation) { 
        obj['operator'] = operator;
        obj['threshold'] = threshold;
    }

    /**
     * Constructs a <code>MetricCriteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricCriteria} obj Optional instance to populate.
     * @return {module:model/MetricCriteria} The populated <code>MetricCriteria</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricCriteria();
            MultiMetricCriteria.constructFromObject(data, obj);
            MultiMetricCriteria.constructFromObject(data, obj);

            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricCriteria</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricCriteria</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricCriteria.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }

        return true;
    }


}

MetricCriteria.RequiredProperties = ["operator", "threshold", "criterionType", "metricName", "name", "timeAggregation"];

/**
 * the criteria operator.
 * @member {module:model/MetricCriteria.OperatorEnum} operator
 */
MetricCriteria.prototype['operator'] = undefined;

/**
 * the criteria threshold value that activates the alert.
 * @member {Number} threshold
 */
MetricCriteria.prototype['threshold'] = undefined;


// Implement MultiMetricCriteria interface:
/**
 * Specifies the type of threshold criteria
 * @member {module:model/MultiMetricCriteria.CriterionTypeEnum} criterionType
 */
MultiMetricCriteria.prototype['criterionType'] = undefined;
/**
 * List of dimension conditions.
 * @member {Array.<module:model/MetricDimension>} dimensions
 */
MultiMetricCriteria.prototype['dimensions'] = undefined;
/**
 * Name of the metric.
 * @member {String} metricName
 */
MultiMetricCriteria.prototype['metricName'] = undefined;
/**
 * Namespace of the metric.
 * @member {String} metricNamespace
 */
MultiMetricCriteria.prototype['metricNamespace'] = undefined;
/**
 * Name of the criteria.
 * @member {String} name
 */
MultiMetricCriteria.prototype['name'] = undefined;
/**
 * the criteria time aggregation types.
 * @member {module:model/MultiMetricCriteria.TimeAggregationEnum} timeAggregation
 */
MultiMetricCriteria.prototype['timeAggregation'] = undefined;



/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
MetricCriteria['OperatorEnum'] = {

    /**
     * value: "Equals"
     * @const
     */
    "Equals": "Equals",

    /**
     * value: "NotEquals"
     * @const
     */
    "NotEquals": "NotEquals",

    /**
     * value: "GreaterThan"
     * @const
     */
    "GreaterThan": "GreaterThan",

    /**
     * value: "GreaterThanOrEqual"
     * @const
     */
    "GreaterThanOrEqual": "GreaterThanOrEqual",

    /**
     * value: "LessThan"
     * @const
     */
    "LessThan": "LessThan",

    /**
     * value: "LessThanOrEqual"
     * @const
     */
    "LessThanOrEqual": "LessThanOrEqual"
};



export default MetricCriteria;

