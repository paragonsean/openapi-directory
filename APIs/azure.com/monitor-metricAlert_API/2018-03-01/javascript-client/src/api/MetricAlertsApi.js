/**
 * MonitorManagementClient
 * Azure Monitor client to create/update/delete metric based alerts.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MetricAlertResource from '../model/MetricAlertResource';
import MetricAlertResourceCollection from '../model/MetricAlertResourceCollection';
import MetricAlertResourcePatch from '../model/MetricAlertResourcePatch';
import MetricAlertsListBySubscriptionDefaultResponse from '../model/MetricAlertsListBySubscriptionDefaultResponse';

/**
* MetricAlerts service.
* @module api/MetricAlertsApi
* @version 2018-03-01
*/
export default class MetricAlertsApi {

    /**
    * Constructs a new MetricAlertsApi. 
    * @alias module:api/MetricAlertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the metricAlertsCreateOrUpdate operation.
     * @callback module:api/MetricAlertsApi~metricAlertsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricAlertResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an metric alert definition.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} ruleName The name of the rule.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/MetricAlertResource} parameters The parameters of the rule to create or update.
     * @param {module:api/MetricAlertsApi~metricAlertsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricAlertResource}
     */
    metricAlertsCreateOrUpdate(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling metricAlertsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling metricAlertsCreateOrUpdate");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling metricAlertsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling metricAlertsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling metricAlertsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ruleName': ruleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MetricAlertResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricAlertsDelete operation.
     * @callback module:api/MetricAlertsApi~metricAlertsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an alert rule definition.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} ruleName The name of the rule.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/MetricAlertsApi~metricAlertsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    metricAlertsDelete(subscriptionId, resourceGroupName, ruleName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling metricAlertsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling metricAlertsDelete");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling metricAlertsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling metricAlertsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ruleName': ruleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricAlertsGet operation.
     * @callback module:api/MetricAlertsApi~metricAlertsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricAlertResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an alert rule definition.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} ruleName The name of the rule.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/MetricAlertsApi~metricAlertsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricAlertResource}
     */
    metricAlertsGet(subscriptionId, resourceGroupName, ruleName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling metricAlertsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling metricAlertsGet");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling metricAlertsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling metricAlertsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ruleName': ruleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricAlertResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricAlertsListByResourceGroup operation.
     * @callback module:api/MetricAlertsApi~metricAlertsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricAlertResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve alert rule definitions in a resource group.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/MetricAlertsApi~metricAlertsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricAlertResourceCollection}
     */
    metricAlertsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling metricAlertsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling metricAlertsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling metricAlertsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricAlertResourceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricAlertsListBySubscription operation.
     * @callback module:api/MetricAlertsApi~metricAlertsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricAlertResourceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve alert rule definitions in a subscription.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/MetricAlertsApi~metricAlertsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricAlertResourceCollection}
     */
    metricAlertsListBySubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling metricAlertsListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling metricAlertsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MetricAlertResourceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Insights/metricAlerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the metricAlertsUpdate operation.
     * @callback module:api/MetricAlertsApi~metricAlertsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricAlertResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an metric alert definition.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} ruleName The name of the rule.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/MetricAlertResourcePatch} parameters The parameters of the rule to update.
     * @param {module:api/MetricAlertsApi~metricAlertsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricAlertResource}
     */
    metricAlertsUpdate(subscriptionId, resourceGroupName, ruleName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling metricAlertsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling metricAlertsUpdate");
      }
      // verify the required parameter 'ruleName' is set
      if (ruleName === undefined || ruleName === null) {
        throw new Error("Missing the required parameter 'ruleName' when calling metricAlertsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling metricAlertsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling metricAlertsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'ruleName': ruleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MetricAlertResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
