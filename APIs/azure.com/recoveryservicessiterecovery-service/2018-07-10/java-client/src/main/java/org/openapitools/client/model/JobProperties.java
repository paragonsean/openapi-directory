/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ASRTask;
import org.openapitools.client.model.JobDetails;
import org.openapitools.client.model.JobErrorDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job custom data details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobProperties {
  public static final String SERIALIZED_NAME_ACTIVITY_ID = "activityId";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_ID)
  private String activityId;

  public static final String SERIALIZED_NAME_ALLOWED_ACTIONS = "allowedActions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ACTIONS)
  private List<String> allowedActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_DETAILS = "customDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DETAILS)
  private JobDetails customDetails;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<JobErrorDetails> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_SCENARIO_NAME = "scenarioName";
  @SerializedName(SERIALIZED_NAME_SCENARIO_NAME)
  private String scenarioName;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATE_DESCRIPTION = "stateDescription";
  @SerializedName(SERIALIZED_NAME_STATE_DESCRIPTION)
  private String stateDescription;

  public static final String SERIALIZED_NAME_TARGET_INSTANCE_TYPE = "targetInstanceType";
  @SerializedName(SERIALIZED_NAME_TARGET_INSTANCE_TYPE)
  private String targetInstanceType;

  public static final String SERIALIZED_NAME_TARGET_OBJECT_ID = "targetObjectId";
  @SerializedName(SERIALIZED_NAME_TARGET_OBJECT_ID)
  private String targetObjectId;

  public static final String SERIALIZED_NAME_TARGET_OBJECT_NAME = "targetObjectName";
  @SerializedName(SERIALIZED_NAME_TARGET_OBJECT_NAME)
  private String targetObjectName;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<ASRTask> tasks = new ArrayList<>();

  public JobProperties() {
  }

  public JobProperties activityId(String activityId) {
    this.activityId = activityId;
    return this;
  }

  /**
   * The activity id.
   * @return activityId
   */
  @javax.annotation.Nullable
  public String getActivityId() {
    return activityId;
  }

  public void setActivityId(String activityId) {
    this.activityId = activityId;
  }


  public JobProperties allowedActions(List<String> allowedActions) {
    this.allowedActions = allowedActions;
    return this;
  }

  public JobProperties addAllowedActionsItem(String allowedActionsItem) {
    if (this.allowedActions == null) {
      this.allowedActions = new ArrayList<>();
    }
    this.allowedActions.add(allowedActionsItem);
    return this;
  }

  /**
   * The Allowed action the job.
   * @return allowedActions
   */
  @javax.annotation.Nullable
  public List<String> getAllowedActions() {
    return allowedActions;
  }

  public void setAllowedActions(List<String> allowedActions) {
    this.allowedActions = allowedActions;
  }


  public JobProperties customDetails(JobDetails customDetails) {
    this.customDetails = customDetails;
    return this;
  }

  /**
   * Get customDetails
   * @return customDetails
   */
  @javax.annotation.Nullable
  public JobDetails getCustomDetails() {
    return customDetails;
  }

  public void setCustomDetails(JobDetails customDetails) {
    this.customDetails = customDetails;
  }


  public JobProperties endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public JobProperties errors(List<JobErrorDetails> errors) {
    this.errors = errors;
    return this;
  }

  public JobProperties addErrorsItem(JobErrorDetails errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * The errors.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<JobErrorDetails> getErrors() {
    return errors;
  }

  public void setErrors(List<JobErrorDetails> errors) {
    this.errors = errors;
  }


  public JobProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The DisplayName.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public JobProperties scenarioName(String scenarioName) {
    this.scenarioName = scenarioName;
    return this;
  }

  /**
   * The ScenarioName.
   * @return scenarioName
   */
  @javax.annotation.Nullable
  public String getScenarioName() {
    return scenarioName;
  }

  public void setScenarioName(String scenarioName) {
    this.scenarioName = scenarioName;
  }


  public JobProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public JobProperties state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The status of the Job. It is one of these values - NotStarted, InProgress, Succeeded, Failed, Cancelled, Suspended or Other.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public JobProperties stateDescription(String stateDescription) {
    this.stateDescription = stateDescription;
    return this;
  }

  /**
   * The description of the state of the Job. For e.g. - For Succeeded state, description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped.
   * @return stateDescription
   */
  @javax.annotation.Nullable
  public String getStateDescription() {
    return stateDescription;
  }

  public void setStateDescription(String stateDescription) {
    this.stateDescription = stateDescription;
  }


  public JobProperties targetInstanceType(String targetInstanceType) {
    this.targetInstanceType = targetInstanceType;
    return this;
  }

  /**
   * The type of the affected object which is of {Microsoft.Azure.SiteRecovery.V2015_11_10.AffectedObjectType} class.
   * @return targetInstanceType
   */
  @javax.annotation.Nullable
  public String getTargetInstanceType() {
    return targetInstanceType;
  }

  public void setTargetInstanceType(String targetInstanceType) {
    this.targetInstanceType = targetInstanceType;
  }


  public JobProperties targetObjectId(String targetObjectId) {
    this.targetObjectId = targetObjectId;
    return this;
  }

  /**
   * The affected Object Id.
   * @return targetObjectId
   */
  @javax.annotation.Nullable
  public String getTargetObjectId() {
    return targetObjectId;
  }

  public void setTargetObjectId(String targetObjectId) {
    this.targetObjectId = targetObjectId;
  }


  public JobProperties targetObjectName(String targetObjectName) {
    this.targetObjectName = targetObjectName;
    return this;
  }

  /**
   * The name of the affected object.
   * @return targetObjectName
   */
  @javax.annotation.Nullable
  public String getTargetObjectName() {
    return targetObjectName;
  }

  public void setTargetObjectName(String targetObjectName) {
    this.targetObjectName = targetObjectName;
  }


  public JobProperties tasks(List<ASRTask> tasks) {
    this.tasks = tasks;
    return this;
  }

  public JobProperties addTasksItem(ASRTask tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

  /**
   * The tasks.
   * @return tasks
   */
  @javax.annotation.Nullable
  public List<ASRTask> getTasks() {
    return tasks;
  }

  public void setTasks(List<ASRTask> tasks) {
    this.tasks = tasks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobProperties jobProperties = (JobProperties) o;
    return Objects.equals(this.activityId, jobProperties.activityId) &&
        Objects.equals(this.allowedActions, jobProperties.allowedActions) &&
        Objects.equals(this.customDetails, jobProperties.customDetails) &&
        Objects.equals(this.endTime, jobProperties.endTime) &&
        Objects.equals(this.errors, jobProperties.errors) &&
        Objects.equals(this.friendlyName, jobProperties.friendlyName) &&
        Objects.equals(this.scenarioName, jobProperties.scenarioName) &&
        Objects.equals(this.startTime, jobProperties.startTime) &&
        Objects.equals(this.state, jobProperties.state) &&
        Objects.equals(this.stateDescription, jobProperties.stateDescription) &&
        Objects.equals(this.targetInstanceType, jobProperties.targetInstanceType) &&
        Objects.equals(this.targetObjectId, jobProperties.targetObjectId) &&
        Objects.equals(this.targetObjectName, jobProperties.targetObjectName) &&
        Objects.equals(this.tasks, jobProperties.tasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityId, allowedActions, customDetails, endTime, errors, friendlyName, scenarioName, startTime, state, stateDescription, targetInstanceType, targetObjectId, targetObjectName, tasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobProperties {\n");
    sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
    sb.append("    allowedActions: ").append(toIndentedString(allowedActions)).append("\n");
    sb.append("    customDetails: ").append(toIndentedString(customDetails)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    scenarioName: ").append(toIndentedString(scenarioName)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateDescription: ").append(toIndentedString(stateDescription)).append("\n");
    sb.append("    targetInstanceType: ").append(toIndentedString(targetInstanceType)).append("\n");
    sb.append("    targetObjectId: ").append(toIndentedString(targetObjectId)).append("\n");
    sb.append("    targetObjectName: ").append(toIndentedString(targetObjectName)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityId");
    openapiFields.add("allowedActions");
    openapiFields.add("customDetails");
    openapiFields.add("endTime");
    openapiFields.add("errors");
    openapiFields.add("friendlyName");
    openapiFields.add("scenarioName");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("stateDescription");
    openapiFields.add("targetInstanceType");
    openapiFields.add("targetObjectId");
    openapiFields.add("targetObjectName");
    openapiFields.add("tasks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobProperties is not found in the empty JSON string", JobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activityId") != null && !jsonObj.get("activityId").isJsonNull()) && !jsonObj.get("activityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activityId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedActions") != null && !jsonObj.get("allowedActions").isJsonNull() && !jsonObj.get("allowedActions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedActions` to be an array in the JSON string but got `%s`", jsonObj.get("allowedActions").toString()));
      }
      // validate the optional field `customDetails`
      if (jsonObj.get("customDetails") != null && !jsonObj.get("customDetails").isJsonNull()) {
        JobDetails.validateJsonElement(jsonObj.get("customDetails"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            JobErrorDetails.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("scenarioName") != null && !jsonObj.get("scenarioName").isJsonNull()) && !jsonObj.get("scenarioName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenarioName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenarioName").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("stateDescription") != null && !jsonObj.get("stateDescription").isJsonNull()) && !jsonObj.get("stateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateDescription").toString()));
      }
      if ((jsonObj.get("targetInstanceType") != null && !jsonObj.get("targetInstanceType").isJsonNull()) && !jsonObj.get("targetInstanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetInstanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetInstanceType").toString()));
      }
      if ((jsonObj.get("targetObjectId") != null && !jsonObj.get("targetObjectId").isJsonNull()) && !jsonObj.get("targetObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetObjectId").toString()));
      }
      if ((jsonObj.get("targetObjectName") != null && !jsonObj.get("targetObjectName").isJsonNull()) && !jsonObj.get("targetObjectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetObjectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetObjectName").toString()));
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            ASRTask.validateJsonElement(jsonArraytasks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobProperties>() {
           @Override
           public void write(JsonWriter out, JobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobProperties
   * @throws IOException if the JSON string is invalid with respect to JobProperties
   */
  public static JobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobProperties.class);
  }

  /**
   * Convert an instance of JobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

