/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HealthError;
import org.openapitools.client.model.ProtectionContainerMappingProviderSpecificDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Protection container mapping properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProtectionContainerMappingProperties {
  public static final String SERIALIZED_NAME_HEALTH = "health";
  @SerializedName(SERIALIZED_NAME_HEALTH)
  private String health;

  public static final String SERIALIZED_NAME_HEALTH_ERROR_DETAILS = "healthErrorDetails";
  @SerializedName(SERIALIZED_NAME_HEALTH_ERROR_DETAILS)
  private List<HealthError> healthErrorDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICY_FRIENDLY_NAME = "policyFriendlyName";
  @SerializedName(SERIALIZED_NAME_POLICY_FRIENDLY_NAME)
  private String policyFriendlyName;

  public static final String SERIALIZED_NAME_POLICY_ID = "policyId";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  private String policyId;

  public static final String SERIALIZED_NAME_PROVIDER_SPECIFIC_DETAILS = "providerSpecificDetails";
  @SerializedName(SERIALIZED_NAME_PROVIDER_SPECIFIC_DETAILS)
  private ProtectionContainerMappingProviderSpecificDetails providerSpecificDetails;

  public static final String SERIALIZED_NAME_SOURCE_FABRIC_FRIENDLY_NAME = "sourceFabricFriendlyName";
  @SerializedName(SERIALIZED_NAME_SOURCE_FABRIC_FRIENDLY_NAME)
  private String sourceFabricFriendlyName;

  public static final String SERIALIZED_NAME_SOURCE_PROTECTION_CONTAINER_FRIENDLY_NAME = "sourceProtectionContainerFriendlyName";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROTECTION_CONTAINER_FRIENDLY_NAME)
  private String sourceProtectionContainerFriendlyName;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TARGET_FABRIC_FRIENDLY_NAME = "targetFabricFriendlyName";
  @SerializedName(SERIALIZED_NAME_TARGET_FABRIC_FRIENDLY_NAME)
  private String targetFabricFriendlyName;

  public static final String SERIALIZED_NAME_TARGET_PROTECTION_CONTAINER_FRIENDLY_NAME = "targetProtectionContainerFriendlyName";
  @SerializedName(SERIALIZED_NAME_TARGET_PROTECTION_CONTAINER_FRIENDLY_NAME)
  private String targetProtectionContainerFriendlyName;

  public static final String SERIALIZED_NAME_TARGET_PROTECTION_CONTAINER_ID = "targetProtectionContainerId";
  @SerializedName(SERIALIZED_NAME_TARGET_PROTECTION_CONTAINER_ID)
  private String targetProtectionContainerId;

  public ProtectionContainerMappingProperties() {
  }

  public ProtectionContainerMappingProperties health(String health) {
    this.health = health;
    return this;
  }

  /**
   * Health of pairing.
   * @return health
   */
  @javax.annotation.Nullable
  public String getHealth() {
    return health;
  }

  public void setHealth(String health) {
    this.health = health;
  }


  public ProtectionContainerMappingProperties healthErrorDetails(List<HealthError> healthErrorDetails) {
    this.healthErrorDetails = healthErrorDetails;
    return this;
  }

  public ProtectionContainerMappingProperties addHealthErrorDetailsItem(HealthError healthErrorDetailsItem) {
    if (this.healthErrorDetails == null) {
      this.healthErrorDetails = new ArrayList<>();
    }
    this.healthErrorDetails.add(healthErrorDetailsItem);
    return this;
  }

  /**
   * Health error.
   * @return healthErrorDetails
   */
  @javax.annotation.Nullable
  public List<HealthError> getHealthErrorDetails() {
    return healthErrorDetails;
  }

  public void setHealthErrorDetails(List<HealthError> healthErrorDetails) {
    this.healthErrorDetails = healthErrorDetails;
  }


  public ProtectionContainerMappingProperties policyFriendlyName(String policyFriendlyName) {
    this.policyFriendlyName = policyFriendlyName;
    return this;
  }

  /**
   * Friendly name of replication policy.
   * @return policyFriendlyName
   */
  @javax.annotation.Nullable
  public String getPolicyFriendlyName() {
    return policyFriendlyName;
  }

  public void setPolicyFriendlyName(String policyFriendlyName) {
    this.policyFriendlyName = policyFriendlyName;
  }


  public ProtectionContainerMappingProperties policyId(String policyId) {
    this.policyId = policyId;
    return this;
  }

  /**
   * Policy ARM Id.
   * @return policyId
   */
  @javax.annotation.Nullable
  public String getPolicyId() {
    return policyId;
  }

  public void setPolicyId(String policyId) {
    this.policyId = policyId;
  }


  public ProtectionContainerMappingProperties providerSpecificDetails(ProtectionContainerMappingProviderSpecificDetails providerSpecificDetails) {
    this.providerSpecificDetails = providerSpecificDetails;
    return this;
  }

  /**
   * Get providerSpecificDetails
   * @return providerSpecificDetails
   */
  @javax.annotation.Nullable
  public ProtectionContainerMappingProviderSpecificDetails getProviderSpecificDetails() {
    return providerSpecificDetails;
  }

  public void setProviderSpecificDetails(ProtectionContainerMappingProviderSpecificDetails providerSpecificDetails) {
    this.providerSpecificDetails = providerSpecificDetails;
  }


  public ProtectionContainerMappingProperties sourceFabricFriendlyName(String sourceFabricFriendlyName) {
    this.sourceFabricFriendlyName = sourceFabricFriendlyName;
    return this;
  }

  /**
   * Friendly name of source fabric.
   * @return sourceFabricFriendlyName
   */
  @javax.annotation.Nullable
  public String getSourceFabricFriendlyName() {
    return sourceFabricFriendlyName;
  }

  public void setSourceFabricFriendlyName(String sourceFabricFriendlyName) {
    this.sourceFabricFriendlyName = sourceFabricFriendlyName;
  }


  public ProtectionContainerMappingProperties sourceProtectionContainerFriendlyName(String sourceProtectionContainerFriendlyName) {
    this.sourceProtectionContainerFriendlyName = sourceProtectionContainerFriendlyName;
    return this;
  }

  /**
   * Friendly name of source protection container.
   * @return sourceProtectionContainerFriendlyName
   */
  @javax.annotation.Nullable
  public String getSourceProtectionContainerFriendlyName() {
    return sourceProtectionContainerFriendlyName;
  }

  public void setSourceProtectionContainerFriendlyName(String sourceProtectionContainerFriendlyName) {
    this.sourceProtectionContainerFriendlyName = sourceProtectionContainerFriendlyName;
  }


  public ProtectionContainerMappingProperties state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Association Status
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public ProtectionContainerMappingProperties targetFabricFriendlyName(String targetFabricFriendlyName) {
    this.targetFabricFriendlyName = targetFabricFriendlyName;
    return this;
  }

  /**
   * Friendly name of target fabric.
   * @return targetFabricFriendlyName
   */
  @javax.annotation.Nullable
  public String getTargetFabricFriendlyName() {
    return targetFabricFriendlyName;
  }

  public void setTargetFabricFriendlyName(String targetFabricFriendlyName) {
    this.targetFabricFriendlyName = targetFabricFriendlyName;
  }


  public ProtectionContainerMappingProperties targetProtectionContainerFriendlyName(String targetProtectionContainerFriendlyName) {
    this.targetProtectionContainerFriendlyName = targetProtectionContainerFriendlyName;
    return this;
  }

  /**
   * Friendly name of paired container.
   * @return targetProtectionContainerFriendlyName
   */
  @javax.annotation.Nullable
  public String getTargetProtectionContainerFriendlyName() {
    return targetProtectionContainerFriendlyName;
  }

  public void setTargetProtectionContainerFriendlyName(String targetProtectionContainerFriendlyName) {
    this.targetProtectionContainerFriendlyName = targetProtectionContainerFriendlyName;
  }


  public ProtectionContainerMappingProperties targetProtectionContainerId(String targetProtectionContainerId) {
    this.targetProtectionContainerId = targetProtectionContainerId;
    return this;
  }

  /**
   * Paired protection container ARM ID.
   * @return targetProtectionContainerId
   */
  @javax.annotation.Nullable
  public String getTargetProtectionContainerId() {
    return targetProtectionContainerId;
  }

  public void setTargetProtectionContainerId(String targetProtectionContainerId) {
    this.targetProtectionContainerId = targetProtectionContainerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProtectionContainerMappingProperties protectionContainerMappingProperties = (ProtectionContainerMappingProperties) o;
    return Objects.equals(this.health, protectionContainerMappingProperties.health) &&
        Objects.equals(this.healthErrorDetails, protectionContainerMappingProperties.healthErrorDetails) &&
        Objects.equals(this.policyFriendlyName, protectionContainerMappingProperties.policyFriendlyName) &&
        Objects.equals(this.policyId, protectionContainerMappingProperties.policyId) &&
        Objects.equals(this.providerSpecificDetails, protectionContainerMappingProperties.providerSpecificDetails) &&
        Objects.equals(this.sourceFabricFriendlyName, protectionContainerMappingProperties.sourceFabricFriendlyName) &&
        Objects.equals(this.sourceProtectionContainerFriendlyName, protectionContainerMappingProperties.sourceProtectionContainerFriendlyName) &&
        Objects.equals(this.state, protectionContainerMappingProperties.state) &&
        Objects.equals(this.targetFabricFriendlyName, protectionContainerMappingProperties.targetFabricFriendlyName) &&
        Objects.equals(this.targetProtectionContainerFriendlyName, protectionContainerMappingProperties.targetProtectionContainerFriendlyName) &&
        Objects.equals(this.targetProtectionContainerId, protectionContainerMappingProperties.targetProtectionContainerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(health, healthErrorDetails, policyFriendlyName, policyId, providerSpecificDetails, sourceFabricFriendlyName, sourceProtectionContainerFriendlyName, state, targetFabricFriendlyName, targetProtectionContainerFriendlyName, targetProtectionContainerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProtectionContainerMappingProperties {\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    healthErrorDetails: ").append(toIndentedString(healthErrorDetails)).append("\n");
    sb.append("    policyFriendlyName: ").append(toIndentedString(policyFriendlyName)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    providerSpecificDetails: ").append(toIndentedString(providerSpecificDetails)).append("\n");
    sb.append("    sourceFabricFriendlyName: ").append(toIndentedString(sourceFabricFriendlyName)).append("\n");
    sb.append("    sourceProtectionContainerFriendlyName: ").append(toIndentedString(sourceProtectionContainerFriendlyName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    targetFabricFriendlyName: ").append(toIndentedString(targetFabricFriendlyName)).append("\n");
    sb.append("    targetProtectionContainerFriendlyName: ").append(toIndentedString(targetProtectionContainerFriendlyName)).append("\n");
    sb.append("    targetProtectionContainerId: ").append(toIndentedString(targetProtectionContainerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("health");
    openapiFields.add("healthErrorDetails");
    openapiFields.add("policyFriendlyName");
    openapiFields.add("policyId");
    openapiFields.add("providerSpecificDetails");
    openapiFields.add("sourceFabricFriendlyName");
    openapiFields.add("sourceProtectionContainerFriendlyName");
    openapiFields.add("state");
    openapiFields.add("targetFabricFriendlyName");
    openapiFields.add("targetProtectionContainerFriendlyName");
    openapiFields.add("targetProtectionContainerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProtectionContainerMappingProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProtectionContainerMappingProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProtectionContainerMappingProperties is not found in the empty JSON string", ProtectionContainerMappingProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProtectionContainerMappingProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProtectionContainerMappingProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) && !jsonObj.get("health").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health").toString()));
      }
      if (jsonObj.get("healthErrorDetails") != null && !jsonObj.get("healthErrorDetails").isJsonNull()) {
        JsonArray jsonArrayhealthErrorDetails = jsonObj.getAsJsonArray("healthErrorDetails");
        if (jsonArrayhealthErrorDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthErrorDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthErrorDetails` to be an array in the JSON string but got `%s`", jsonObj.get("healthErrorDetails").toString()));
          }

          // validate the optional field `healthErrorDetails` (array)
          for (int i = 0; i < jsonArrayhealthErrorDetails.size(); i++) {
            HealthError.validateJsonElement(jsonArrayhealthErrorDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("policyFriendlyName") != null && !jsonObj.get("policyFriendlyName").isJsonNull()) && !jsonObj.get("policyFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyFriendlyName").toString()));
      }
      if ((jsonObj.get("policyId") != null && !jsonObj.get("policyId").isJsonNull()) && !jsonObj.get("policyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyId").toString()));
      }
      // validate the optional field `providerSpecificDetails`
      if (jsonObj.get("providerSpecificDetails") != null && !jsonObj.get("providerSpecificDetails").isJsonNull()) {
        ProtectionContainerMappingProviderSpecificDetails.validateJsonElement(jsonObj.get("providerSpecificDetails"));
      }
      if ((jsonObj.get("sourceFabricFriendlyName") != null && !jsonObj.get("sourceFabricFriendlyName").isJsonNull()) && !jsonObj.get("sourceFabricFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceFabricFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceFabricFriendlyName").toString()));
      }
      if ((jsonObj.get("sourceProtectionContainerFriendlyName") != null && !jsonObj.get("sourceProtectionContainerFriendlyName").isJsonNull()) && !jsonObj.get("sourceProtectionContainerFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceProtectionContainerFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceProtectionContainerFriendlyName").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("targetFabricFriendlyName") != null && !jsonObj.get("targetFabricFriendlyName").isJsonNull()) && !jsonObj.get("targetFabricFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetFabricFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetFabricFriendlyName").toString()));
      }
      if ((jsonObj.get("targetProtectionContainerFriendlyName") != null && !jsonObj.get("targetProtectionContainerFriendlyName").isJsonNull()) && !jsonObj.get("targetProtectionContainerFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetProtectionContainerFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetProtectionContainerFriendlyName").toString()));
      }
      if ((jsonObj.get("targetProtectionContainerId") != null && !jsonObj.get("targetProtectionContainerId").isJsonNull()) && !jsonObj.get("targetProtectionContainerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetProtectionContainerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetProtectionContainerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProtectionContainerMappingProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProtectionContainerMappingProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProtectionContainerMappingProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProtectionContainerMappingProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProtectionContainerMappingProperties>() {
           @Override
           public void write(JsonWriter out, ProtectionContainerMappingProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProtectionContainerMappingProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProtectionContainerMappingProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProtectionContainerMappingProperties
   * @throws IOException if the JSON string is invalid with respect to ProtectionContainerMappingProperties
   */
  public static ProtectionContainerMappingProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProtectionContainerMappingProperties.class);
  }

  /**
   * Convert an instance of ProtectionContainerMappingProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

