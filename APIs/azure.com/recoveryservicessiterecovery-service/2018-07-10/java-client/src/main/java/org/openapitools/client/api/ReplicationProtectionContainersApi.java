/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateProtectionContainerInput;
import org.openapitools.client.model.DiscoverProtectableItemRequest;
import org.openapitools.client.model.ProtectionContainer;
import org.openapitools.client.model.ProtectionContainerCollection;
import org.openapitools.client.model.SwitchProtectionInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplicationProtectionContainersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplicationProtectionContainersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplicationProtectionContainersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for replicationProtectionContainersCreate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric ARM name. (required)
     * @param protectionContainerName Unique protection container ARM name. (required)
     * @param creationInput Creation input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersCreateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, CreateProtectionContainerInput creationInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creationInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainersCreateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, CreateProtectionContainerInput creationInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainersCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersCreate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainersCreate(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainersCreate(Async)");
        }

        // verify the required parameter 'creationInput' is set
        if (creationInput == null) {
            throw new ApiException("Missing the required parameter 'creationInput' when calling replicationProtectionContainersCreate(Async)");
        }

        return replicationProtectionContainersCreateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, creationInput, _callback);

    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric ARM name. (required)
     * @param protectionContainerName Unique protection container ARM name. (required)
     * @param creationInput Creation input. (required)
     * @return ProtectionContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionContainer replicationProtectionContainersCreate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, CreateProtectionContainerInput creationInput) throws ApiException {
        ApiResponse<ProtectionContainer> localVarResp = replicationProtectionContainersCreateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, creationInput);
        return localVarResp.getData();
    }

    /**
     * Create a protection container.
     * Operation to create a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric ARM name. (required)
     * @param protectionContainerName Unique protection container ARM name. (required)
     * @param creationInput Creation input. (required)
     * @return ApiResponse&lt;ProtectionContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionContainer> replicationProtectionContainersCreateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, CreateProtectionContainerInput creationInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainersCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, creationInput, null);
        Type localVarReturnType = new TypeToken<ProtectionContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a protection container. (asynchronously)
     * Operation to create a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric ARM name. (required)
     * @param protectionContainerName Unique protection container ARM name. (required)
     * @param creationInput Creation input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersCreateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, CreateProtectionContainerInput creationInput, final ApiCallback<ProtectionContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainersCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, creationInput, _callback);
        Type localVarReturnType = new TypeToken<ProtectionContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainersDelete
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric ARM name. (required)
     * @param protectionContainerName Unique protection container ARM name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersDeleteCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/remove"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainersDeleteValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainersDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersDelete(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainersDelete(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainersDelete(Async)");
        }

        return replicationProtectionContainersDeleteCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, _callback);

    }

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric ARM name. (required)
     * @param protectionContainerName Unique protection container ARM name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void replicationProtectionContainersDelete(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName) throws ApiException {
        replicationProtectionContainersDeleteWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName);
    }

    /**
     * Removes a protection container.
     * Operation to remove a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric ARM name. (required)
     * @param protectionContainerName Unique protection container ARM name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicationProtectionContainersDeleteWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainersDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a protection container. (asynchronously)
     * Operation to remove a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric ARM name. (required)
     * @param protectionContainerName Unique protection container ARM name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersDeleteAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainersDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainersDiscoverProtectableItem
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric. (required)
     * @param protectionContainerName The name of the protection container. (required)
     * @param discoverProtectableItemRequest The request object to add a protectable item. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersDiscoverProtectableItemCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, DiscoverProtectableItemRequest discoverProtectableItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = discoverProtectableItemRequest;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/discoverProtectableItem"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainersDiscoverProtectableItemValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, DiscoverProtectableItemRequest discoverProtectableItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersDiscoverProtectableItem(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainersDiscoverProtectableItem(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersDiscoverProtectableItem(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersDiscoverProtectableItem(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainersDiscoverProtectableItem(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainersDiscoverProtectableItem(Async)");
        }

        // verify the required parameter 'discoverProtectableItemRequest' is set
        if (discoverProtectableItemRequest == null) {
            throw new ApiException("Missing the required parameter 'discoverProtectableItemRequest' when calling replicationProtectionContainersDiscoverProtectableItem(Async)");
        }

        return replicationProtectionContainersDiscoverProtectableItemCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, discoverProtectableItemRequest, _callback);

    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.)
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric. (required)
     * @param protectionContainerName The name of the protection container. (required)
     * @param discoverProtectableItemRequest The request object to add a protectable item. (required)
     * @return ProtectionContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionContainer replicationProtectionContainersDiscoverProtectableItem(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, DiscoverProtectableItemRequest discoverProtectableItemRequest) throws ApiException {
        ApiResponse<ProtectionContainer> localVarResp = replicationProtectionContainersDiscoverProtectableItemWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, discoverProtectableItemRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a protectable item to the replication protection container.
     * The operation to a add a protectable item to a protection container(Add physical server.)
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric. (required)
     * @param protectionContainerName The name of the protection container. (required)
     * @param discoverProtectableItemRequest The request object to add a protectable item. (required)
     * @return ApiResponse&lt;ProtectionContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionContainer> replicationProtectionContainersDiscoverProtectableItemWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, DiscoverProtectableItemRequest discoverProtectableItemRequest) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainersDiscoverProtectableItemValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, discoverProtectableItemRequest, null);
        Type localVarReturnType = new TypeToken<ProtectionContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a protectable item to the replication protection container. (asynchronously)
     * The operation to a add a protectable item to a protection container(Add physical server.)
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName The name of the fabric. (required)
     * @param protectionContainerName The name of the protection container. (required)
     * @param discoverProtectableItemRequest The request object to add a protectable item. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersDiscoverProtectableItemAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, DiscoverProtectableItemRequest discoverProtectableItemRequest, final ApiCallback<ProtectionContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainersDiscoverProtectableItemValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, discoverProtectableItemRequest, _callback);
        Type localVarReturnType = new TypeToken<ProtectionContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainersGet
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersGetCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainersGetValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainersGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersGet(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainersGet(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainersGet(Async)");
        }

        return replicationProtectionContainersGetCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, _callback);

    }

    /**
     * Gets the protection container details.
     * Gets the details of a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @return ProtectionContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionContainer replicationProtectionContainersGet(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName) throws ApiException {
        ApiResponse<ProtectionContainer> localVarResp = replicationProtectionContainersGetWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName);
        return localVarResp.getData();
    }

    /**
     * Gets the protection container details.
     * Gets the details of a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @return ApiResponse&lt;ProtectionContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionContainer> replicationProtectionContainersGetWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainersGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, null);
        Type localVarReturnType = new TypeToken<ProtectionContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the protection container details. (asynchronously)
     * Gets the details of a protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersGetAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback<ProtectionContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainersGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, _callback);
        Type localVarReturnType = new TypeToken<ProtectionContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainersList
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersListCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainers"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainersListValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersList(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainersList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersList(Async)");
        }

        return replicationProtectionContainersListCall(apiVersion, resourceName, resourceGroupName, subscriptionId, _callback);

    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @return ProtectionContainerCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionContainerCollection replicationProtectionContainersList(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId) throws ApiException {
        ApiResponse<ProtectionContainerCollection> localVarResp = replicationProtectionContainersListWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Gets the list of all protection containers in a vault.
     * Lists the protection containers in a vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @return ApiResponse&lt;ProtectionContainerCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionContainerCollection> replicationProtectionContainersListWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainersListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ProtectionContainerCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of all protection containers in a vault. (asynchronously)
     * Lists the protection containers in a vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersListAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback<ProtectionContainerCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainersListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ProtectionContainerCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainersListByReplicationFabrics
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersListByReplicationFabricsCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainersListByReplicationFabricsValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersListByReplicationFabrics(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainersListByReplicationFabrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersListByReplicationFabrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersListByReplicationFabrics(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainersListByReplicationFabrics(Async)");
        }

        return replicationProtectionContainersListByReplicationFabricsCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, _callback);

    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @return ProtectionContainerCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionContainerCollection replicationProtectionContainersListByReplicationFabrics(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName) throws ApiException {
        ApiResponse<ProtectionContainerCollection> localVarResp = replicationProtectionContainersListByReplicationFabricsWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName);
        return localVarResp.getData();
    }

    /**
     * Gets the list of protection container for a fabric.
     * Lists the protection containers in the specified fabric.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @return ApiResponse&lt;ProtectionContainerCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionContainerCollection> replicationProtectionContainersListByReplicationFabricsWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainersListByReplicationFabricsValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, null);
        Type localVarReturnType = new TypeToken<ProtectionContainerCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of protection container for a fabric. (asynchronously)
     * Lists the protection containers in the specified fabric.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersListByReplicationFabricsAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, final ApiCallback<ProtectionContainerCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainersListByReplicationFabricsValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, _callback);
        Type localVarReturnType = new TypeToken<ProtectionContainerCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationProtectionContainersSwitchProtection
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param switchInput Switch protection input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersSwitchProtectionCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, SwitchProtectionInput switchInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = switchInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/switchprotection"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationProtectionContainersSwitchProtectionValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, SwitchProtectionInput switchInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationProtectionContainersSwitchProtection(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationProtectionContainersSwitchProtection(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationProtectionContainersSwitchProtection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationProtectionContainersSwitchProtection(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationProtectionContainersSwitchProtection(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationProtectionContainersSwitchProtection(Async)");
        }

        // verify the required parameter 'switchInput' is set
        if (switchInput == null) {
            throw new ApiException("Missing the required parameter 'switchInput' when calling replicationProtectionContainersSwitchProtection(Async)");
        }

        return replicationProtectionContainersSwitchProtectionCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, switchInput, _callback);

    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param switchInput Switch protection input. (required)
     * @return ProtectionContainer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ProtectionContainer replicationProtectionContainersSwitchProtection(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, SwitchProtectionInput switchInput) throws ApiException {
        ApiResponse<ProtectionContainer> localVarResp = replicationProtectionContainersSwitchProtectionWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, switchInput);
        return localVarResp.getData();
    }

    /**
     * Switches protection from one container to another or one replication provider to another.
     * Operation to switch protection from one container to another or one replication provider to another.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param switchInput Switch protection input. (required)
     * @return ApiResponse&lt;ProtectionContainer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProtectionContainer> replicationProtectionContainersSwitchProtectionWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, SwitchProtectionInput switchInput) throws ApiException {
        okhttp3.Call localVarCall = replicationProtectionContainersSwitchProtectionValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, switchInput, null);
        Type localVarReturnType = new TypeToken<ProtectionContainer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Switches protection from one container to another or one replication provider to another. (asynchronously)
     * Operation to switch protection from one container to another or one replication provider to another.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Unique fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param switchInput Switch protection input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationProtectionContainersSwitchProtectionAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, SwitchProtectionInput switchInput, final ApiCallback<ProtectionContainer> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationProtectionContainersSwitchProtectionValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, switchInput, _callback);
        Type localVarReturnType = new TypeToken<ProtectionContainer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
