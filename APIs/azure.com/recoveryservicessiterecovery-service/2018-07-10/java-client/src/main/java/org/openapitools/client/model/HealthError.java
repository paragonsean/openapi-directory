/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InnerHealthError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Health Error
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HealthError {
  public static final String SERIALIZED_NAME_CREATION_TIME_UTC = "creationTimeUtc";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME_UTC)
  private OffsetDateTime creationTimeUtc;

  /**
   * Value indicating whether the health error is customer resolvable.
   */
  @JsonAdapter(CustomerResolvabilityEnum.Adapter.class)
  public enum CustomerResolvabilityEnum {
    ALLOWED("Allowed"),
    
    NOT_ALLOWED("NotAllowed");

    private String value;

    CustomerResolvabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerResolvabilityEnum fromValue(String value) {
      for (CustomerResolvabilityEnum b : CustomerResolvabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerResolvabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerResolvabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerResolvabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerResolvabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomerResolvabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_RESOLVABILITY = "customerResolvability";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_RESOLVABILITY)
  private CustomerResolvabilityEnum customerResolvability;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_ERROR_CATEGORY = "errorCategory";
  @SerializedName(SERIALIZED_NAME_ERROR_CATEGORY)
  private String errorCategory;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_ID = "errorId";
  @SerializedName(SERIALIZED_NAME_ERROR_ID)
  private String errorId;

  public static final String SERIALIZED_NAME_ERROR_LEVEL = "errorLevel";
  @SerializedName(SERIALIZED_NAME_ERROR_LEVEL)
  private String errorLevel;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_ERROR_SOURCE = "errorSource";
  @SerializedName(SERIALIZED_NAME_ERROR_SOURCE)
  private String errorSource;

  public static final String SERIALIZED_NAME_ERROR_TYPE = "errorType";
  @SerializedName(SERIALIZED_NAME_ERROR_TYPE)
  private String errorType;

  public static final String SERIALIZED_NAME_INNER_HEALTH_ERRORS = "innerHealthErrors";
  @SerializedName(SERIALIZED_NAME_INNER_HEALTH_ERRORS)
  private List<InnerHealthError> innerHealthErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_POSSIBLE_CAUSES = "possibleCauses";
  @SerializedName(SERIALIZED_NAME_POSSIBLE_CAUSES)
  private String possibleCauses;

  public static final String SERIALIZED_NAME_RECOMMENDED_ACTION = "recommendedAction";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_ACTION)
  private String recommendedAction;

  public static final String SERIALIZED_NAME_RECOVERY_PROVIDER_ERROR_MESSAGE = "recoveryProviderErrorMessage";
  @SerializedName(SERIALIZED_NAME_RECOVERY_PROVIDER_ERROR_MESSAGE)
  private String recoveryProviderErrorMessage;

  public static final String SERIALIZED_NAME_SUMMARY_MESSAGE = "summaryMessage";
  @SerializedName(SERIALIZED_NAME_SUMMARY_MESSAGE)
  private String summaryMessage;

  public HealthError() {
  }

  public HealthError creationTimeUtc(OffsetDateTime creationTimeUtc) {
    this.creationTimeUtc = creationTimeUtc;
    return this;
  }

  /**
   * Error creation time (UTC)
   * @return creationTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTimeUtc() {
    return creationTimeUtc;
  }

  public void setCreationTimeUtc(OffsetDateTime creationTimeUtc) {
    this.creationTimeUtc = creationTimeUtc;
  }


  public HealthError customerResolvability(CustomerResolvabilityEnum customerResolvability) {
    this.customerResolvability = customerResolvability;
    return this;
  }

  /**
   * Value indicating whether the health error is customer resolvable.
   * @return customerResolvability
   */
  @javax.annotation.Nullable
  public CustomerResolvabilityEnum getCustomerResolvability() {
    return customerResolvability;
  }

  public void setCustomerResolvability(CustomerResolvabilityEnum customerResolvability) {
    this.customerResolvability = customerResolvability;
  }


  public HealthError entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * ID of the entity.
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public HealthError errorCategory(String errorCategory) {
    this.errorCategory = errorCategory;
    return this;
  }

  /**
   * Category of error.
   * @return errorCategory
   */
  @javax.annotation.Nullable
  public String getErrorCategory() {
    return errorCategory;
  }

  public void setErrorCategory(String errorCategory) {
    this.errorCategory = errorCategory;
  }


  public HealthError errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Error code.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public HealthError errorId(String errorId) {
    this.errorId = errorId;
    return this;
  }

  /**
   * The health error unique id.
   * @return errorId
   */
  @javax.annotation.Nullable
  public String getErrorId() {
    return errorId;
  }

  public void setErrorId(String errorId) {
    this.errorId = errorId;
  }


  public HealthError errorLevel(String errorLevel) {
    this.errorLevel = errorLevel;
    return this;
  }

  /**
   * Level of error.
   * @return errorLevel
   */
  @javax.annotation.Nullable
  public String getErrorLevel() {
    return errorLevel;
  }

  public void setErrorLevel(String errorLevel) {
    this.errorLevel = errorLevel;
  }


  public HealthError errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Error message.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public HealthError errorSource(String errorSource) {
    this.errorSource = errorSource;
    return this;
  }

  /**
   * Source of error.
   * @return errorSource
   */
  @javax.annotation.Nullable
  public String getErrorSource() {
    return errorSource;
  }

  public void setErrorSource(String errorSource) {
    this.errorSource = errorSource;
  }


  public HealthError errorType(String errorType) {
    this.errorType = errorType;
    return this;
  }

  /**
   * Type of error.
   * @return errorType
   */
  @javax.annotation.Nullable
  public String getErrorType() {
    return errorType;
  }

  public void setErrorType(String errorType) {
    this.errorType = errorType;
  }


  public HealthError innerHealthErrors(List<InnerHealthError> innerHealthErrors) {
    this.innerHealthErrors = innerHealthErrors;
    return this;
  }

  public HealthError addInnerHealthErrorsItem(InnerHealthError innerHealthErrorsItem) {
    if (this.innerHealthErrors == null) {
      this.innerHealthErrors = new ArrayList<>();
    }
    this.innerHealthErrors.add(innerHealthErrorsItem);
    return this;
  }

  /**
   * The inner health errors. HealthError having a list of HealthError as child errors is problematic. InnerHealthError is used because this will prevent an infinite loop of structures when Hydra tries to auto-generate the contract. We are exposing the related health errors as inner health errors and all API consumers can utilize this in the same fashion as Exception -&amp;gt; InnerException.
   * @return innerHealthErrors
   */
  @javax.annotation.Nullable
  public List<InnerHealthError> getInnerHealthErrors() {
    return innerHealthErrors;
  }

  public void setInnerHealthErrors(List<InnerHealthError> innerHealthErrors) {
    this.innerHealthErrors = innerHealthErrors;
  }


  public HealthError possibleCauses(String possibleCauses) {
    this.possibleCauses = possibleCauses;
    return this;
  }

  /**
   * Possible causes of error.
   * @return possibleCauses
   */
  @javax.annotation.Nullable
  public String getPossibleCauses() {
    return possibleCauses;
  }

  public void setPossibleCauses(String possibleCauses) {
    this.possibleCauses = possibleCauses;
  }


  public HealthError recommendedAction(String recommendedAction) {
    this.recommendedAction = recommendedAction;
    return this;
  }

  /**
   * Recommended action to resolve error.
   * @return recommendedAction
   */
  @javax.annotation.Nullable
  public String getRecommendedAction() {
    return recommendedAction;
  }

  public void setRecommendedAction(String recommendedAction) {
    this.recommendedAction = recommendedAction;
  }


  public HealthError recoveryProviderErrorMessage(String recoveryProviderErrorMessage) {
    this.recoveryProviderErrorMessage = recoveryProviderErrorMessage;
    return this;
  }

  /**
   * DRA error message.
   * @return recoveryProviderErrorMessage
   */
  @javax.annotation.Nullable
  public String getRecoveryProviderErrorMessage() {
    return recoveryProviderErrorMessage;
  }

  public void setRecoveryProviderErrorMessage(String recoveryProviderErrorMessage) {
    this.recoveryProviderErrorMessage = recoveryProviderErrorMessage;
  }


  public HealthError summaryMessage(String summaryMessage) {
    this.summaryMessage = summaryMessage;
    return this;
  }

  /**
   * Summary message of the entity.
   * @return summaryMessage
   */
  @javax.annotation.Nullable
  public String getSummaryMessage() {
    return summaryMessage;
  }

  public void setSummaryMessage(String summaryMessage) {
    this.summaryMessage = summaryMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthError healthError = (HealthError) o;
    return Objects.equals(this.creationTimeUtc, healthError.creationTimeUtc) &&
        Objects.equals(this.customerResolvability, healthError.customerResolvability) &&
        Objects.equals(this.entityId, healthError.entityId) &&
        Objects.equals(this.errorCategory, healthError.errorCategory) &&
        Objects.equals(this.errorCode, healthError.errorCode) &&
        Objects.equals(this.errorId, healthError.errorId) &&
        Objects.equals(this.errorLevel, healthError.errorLevel) &&
        Objects.equals(this.errorMessage, healthError.errorMessage) &&
        Objects.equals(this.errorSource, healthError.errorSource) &&
        Objects.equals(this.errorType, healthError.errorType) &&
        Objects.equals(this.innerHealthErrors, healthError.innerHealthErrors) &&
        Objects.equals(this.possibleCauses, healthError.possibleCauses) &&
        Objects.equals(this.recommendedAction, healthError.recommendedAction) &&
        Objects.equals(this.recoveryProviderErrorMessage, healthError.recoveryProviderErrorMessage) &&
        Objects.equals(this.summaryMessage, healthError.summaryMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTimeUtc, customerResolvability, entityId, errorCategory, errorCode, errorId, errorLevel, errorMessage, errorSource, errorType, innerHealthErrors, possibleCauses, recommendedAction, recoveryProviderErrorMessage, summaryMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthError {\n");
    sb.append("    creationTimeUtc: ").append(toIndentedString(creationTimeUtc)).append("\n");
    sb.append("    customerResolvability: ").append(toIndentedString(customerResolvability)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    errorCategory: ").append(toIndentedString(errorCategory)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorId: ").append(toIndentedString(errorId)).append("\n");
    sb.append("    errorLevel: ").append(toIndentedString(errorLevel)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    errorSource: ").append(toIndentedString(errorSource)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("    innerHealthErrors: ").append(toIndentedString(innerHealthErrors)).append("\n");
    sb.append("    possibleCauses: ").append(toIndentedString(possibleCauses)).append("\n");
    sb.append("    recommendedAction: ").append(toIndentedString(recommendedAction)).append("\n");
    sb.append("    recoveryProviderErrorMessage: ").append(toIndentedString(recoveryProviderErrorMessage)).append("\n");
    sb.append("    summaryMessage: ").append(toIndentedString(summaryMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTimeUtc");
    openapiFields.add("customerResolvability");
    openapiFields.add("entityId");
    openapiFields.add("errorCategory");
    openapiFields.add("errorCode");
    openapiFields.add("errorId");
    openapiFields.add("errorLevel");
    openapiFields.add("errorMessage");
    openapiFields.add("errorSource");
    openapiFields.add("errorType");
    openapiFields.add("innerHealthErrors");
    openapiFields.add("possibleCauses");
    openapiFields.add("recommendedAction");
    openapiFields.add("recoveryProviderErrorMessage");
    openapiFields.add("summaryMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthError is not found in the empty JSON string", HealthError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customerResolvability") != null && !jsonObj.get("customerResolvability").isJsonNull()) && !jsonObj.get("customerResolvability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerResolvability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerResolvability").toString()));
      }
      // validate the optional field `customerResolvability`
      if (jsonObj.get("customerResolvability") != null && !jsonObj.get("customerResolvability").isJsonNull()) {
        CustomerResolvabilityEnum.validateJsonElement(jsonObj.get("customerResolvability"));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("errorCategory") != null && !jsonObj.get("errorCategory").isJsonNull()) && !jsonObj.get("errorCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCategory").toString()));
      }
      if ((jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) && !jsonObj.get("errorCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorCode").toString()));
      }
      if ((jsonObj.get("errorId") != null && !jsonObj.get("errorId").isJsonNull()) && !jsonObj.get("errorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorId").toString()));
      }
      if ((jsonObj.get("errorLevel") != null && !jsonObj.get("errorLevel").isJsonNull()) && !jsonObj.get("errorLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorLevel").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("errorSource") != null && !jsonObj.get("errorSource").isJsonNull()) && !jsonObj.get("errorSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorSource").toString()));
      }
      if ((jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) && !jsonObj.get("errorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorType").toString()));
      }
      if (jsonObj.get("innerHealthErrors") != null && !jsonObj.get("innerHealthErrors").isJsonNull()) {
        JsonArray jsonArrayinnerHealthErrors = jsonObj.getAsJsonArray("innerHealthErrors");
        if (jsonArrayinnerHealthErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("innerHealthErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `innerHealthErrors` to be an array in the JSON string but got `%s`", jsonObj.get("innerHealthErrors").toString()));
          }

          // validate the optional field `innerHealthErrors` (array)
          for (int i = 0; i < jsonArrayinnerHealthErrors.size(); i++) {
            InnerHealthError.validateJsonElement(jsonArrayinnerHealthErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("possibleCauses") != null && !jsonObj.get("possibleCauses").isJsonNull()) && !jsonObj.get("possibleCauses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `possibleCauses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("possibleCauses").toString()));
      }
      if ((jsonObj.get("recommendedAction") != null && !jsonObj.get("recommendedAction").isJsonNull()) && !jsonObj.get("recommendedAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedAction").toString()));
      }
      if ((jsonObj.get("recoveryProviderErrorMessage") != null && !jsonObj.get("recoveryProviderErrorMessage").isJsonNull()) && !jsonObj.get("recoveryProviderErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryProviderErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryProviderErrorMessage").toString()));
      }
      if ((jsonObj.get("summaryMessage") != null && !jsonObj.get("summaryMessage").isJsonNull()) && !jsonObj.get("summaryMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summaryMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summaryMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthError.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthError>() {
           @Override
           public void write(JsonWriter out, HealthError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthError
   * @throws IOException if the JSON string is invalid with respect to HealthError
   */
  public static HealthError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthError.class);
  }

  /**
   * Convert an instance of HealthError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

