/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateRecoveryPlanInput;
import org.openapitools.client.model.RecoveryPlan;
import org.openapitools.client.model.RecoveryPlanCollection;
import org.openapitools.client.model.RecoveryPlanPlannedFailoverInput;
import org.openapitools.client.model.RecoveryPlanTestFailoverCleanupInput;
import org.openapitools.client.model.RecoveryPlanTestFailoverInput;
import org.openapitools.client.model.RecoveryPlanUnplannedFailoverInput;
import org.openapitools.client.model.UpdateRecoveryPlanInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplicationRecoveryPlansApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplicationRecoveryPlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplicationRecoveryPlansApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for replicationRecoveryPlansCreate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Recovery Plan creation input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansCreateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, CreateRecoveryPlanInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "recoveryPlanName" + "}", localVarApiClient.escapeString(recoveryPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansCreateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, CreateRecoveryPlanInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansCreate(Async)");
        }

        // verify the required parameter 'recoveryPlanName' is set
        if (recoveryPlanName == null) {
            throw new ApiException("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansCreate(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling replicationRecoveryPlansCreate(Async)");
        }

        return replicationRecoveryPlansCreateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);

    }

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Recovery Plan creation input. (required)
     * @return RecoveryPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryPlan replicationRecoveryPlansCreate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, CreateRecoveryPlanInput input) throws ApiException {
        ApiResponse<RecoveryPlan> localVarResp = replicationRecoveryPlansCreateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        return localVarResp.getData();
    }

    /**
     * Creates a recovery plan with the given details.
     * The operation to create a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Recovery Plan creation input. (required)
     * @return ApiResponse&lt;RecoveryPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryPlan> replicationRecoveryPlansCreateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, CreateRecoveryPlanInput input) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, null);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a recovery plan with the given details. (asynchronously)
     * The operation to create a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Recovery Plan creation input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansCreateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, CreateRecoveryPlanInput input, final ApiCallback<RecoveryPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationRecoveryPlansDelete
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansDeleteCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "recoveryPlanName" + "}", localVarApiClient.escapeString(recoveryPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansDeleteValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansDelete(Async)");
        }

        // verify the required parameter 'recoveryPlanName' is set
        if (recoveryPlanName == null) {
            throw new ApiException("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansDelete(Async)");
        }

        return replicationRecoveryPlansDeleteCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, _callback);

    }

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void replicationRecoveryPlansDelete(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName) throws ApiException {
        replicationRecoveryPlansDeleteWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName);
    }

    /**
     * Deletes the specified recovery plan.
     * Delete a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicationRecoveryPlansDeleteWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the specified recovery plan. (asynchronously)
     * Delete a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansDeleteAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationRecoveryPlansFailoverCommit
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansFailoverCommitCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCommit"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "recoveryPlanName" + "}", localVarApiClient.escapeString(recoveryPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansFailoverCommitValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansFailoverCommit(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansFailoverCommit(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansFailoverCommit(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansFailoverCommit(Async)");
        }

        // verify the required parameter 'recoveryPlanName' is set
        if (recoveryPlanName == null) {
            throw new ApiException("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansFailoverCommit(Async)");
        }

        return replicationRecoveryPlansFailoverCommitCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, _callback);

    }

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @return RecoveryPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryPlan replicationRecoveryPlansFailoverCommit(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName) throws ApiException {
        ApiResponse<RecoveryPlan> localVarResp = replicationRecoveryPlansFailoverCommitWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName);
        return localVarResp.getData();
    }

    /**
     * Execute commit failover of the recovery plan.
     * The operation to commit the fail over of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @return ApiResponse&lt;RecoveryPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryPlan> replicationRecoveryPlansFailoverCommitWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansFailoverCommitValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, null);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute commit failover of the recovery plan. (asynchronously)
     * The operation to commit the fail over of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansFailoverCommitAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback<RecoveryPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansFailoverCommitValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, _callback);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationRecoveryPlansGet
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Name of the recovery plan. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansGetCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "recoveryPlanName" + "}", localVarApiClient.escapeString(recoveryPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansGetValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansGet(Async)");
        }

        // verify the required parameter 'recoveryPlanName' is set
        if (recoveryPlanName == null) {
            throw new ApiException("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansGet(Async)");
        }

        return replicationRecoveryPlansGetCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, _callback);

    }

    /**
     * Gets the requested recovery plan.
     * Gets the details of the recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Name of the recovery plan. (required)
     * @return RecoveryPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryPlan replicationRecoveryPlansGet(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName) throws ApiException {
        ApiResponse<RecoveryPlan> localVarResp = replicationRecoveryPlansGetWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName);
        return localVarResp.getData();
    }

    /**
     * Gets the requested recovery plan.
     * Gets the details of the recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Name of the recovery plan. (required)
     * @return ApiResponse&lt;RecoveryPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryPlan> replicationRecoveryPlansGetWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, null);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the requested recovery plan. (asynchronously)
     * Gets the details of the recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Name of the recovery plan. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansGetAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback<RecoveryPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, _callback);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationRecoveryPlansList
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansListCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansListValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansList(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansList(Async)");
        }

        return replicationRecoveryPlansListCall(apiVersion, resourceName, resourceGroupName, subscriptionId, _callback);

    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @return RecoveryPlanCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryPlanCollection replicationRecoveryPlansList(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId) throws ApiException {
        ApiResponse<RecoveryPlanCollection> localVarResp = replicationRecoveryPlansListWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Gets the list of recovery plans.
     * Lists the recovery plans in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @return ApiResponse&lt;RecoveryPlanCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryPlanCollection> replicationRecoveryPlansListWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, null);
        Type localVarReturnType = new TypeToken<RecoveryPlanCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of recovery plans. (asynchronously)
     * Lists the recovery plans in the vault.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansListAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, final ApiCallback<RecoveryPlanCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<RecoveryPlanCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationRecoveryPlansPlannedFailover
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansPlannedFailoverCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanPlannedFailoverInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/plannedFailover"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "recoveryPlanName" + "}", localVarApiClient.escapeString(recoveryPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansPlannedFailoverValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanPlannedFailoverInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansPlannedFailover(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansPlannedFailover(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansPlannedFailover(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansPlannedFailover(Async)");
        }

        // verify the required parameter 'recoveryPlanName' is set
        if (recoveryPlanName == null) {
            throw new ApiException("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansPlannedFailover(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling replicationRecoveryPlansPlannedFailover(Async)");
        }

        return replicationRecoveryPlansPlannedFailoverCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);

    }

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @return RecoveryPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryPlan replicationRecoveryPlansPlannedFailover(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanPlannedFailoverInput input) throws ApiException {
        ApiResponse<RecoveryPlan> localVarResp = replicationRecoveryPlansPlannedFailoverWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        return localVarResp.getData();
    }

    /**
     * Execute planned failover of the recovery plan.
     * The operation to start the planned failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @return ApiResponse&lt;RecoveryPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryPlan> replicationRecoveryPlansPlannedFailoverWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanPlannedFailoverInput input) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansPlannedFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, null);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute planned failover of the recovery plan. (asynchronously)
     * The operation to start the planned failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansPlannedFailoverAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanPlannedFailoverInput input, final ApiCallback<RecoveryPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansPlannedFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationRecoveryPlansReprotect
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansReprotectCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/reProtect"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "recoveryPlanName" + "}", localVarApiClient.escapeString(recoveryPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansReprotectValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansReprotect(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansReprotect(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansReprotect(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansReprotect(Async)");
        }

        // verify the required parameter 'recoveryPlanName' is set
        if (recoveryPlanName == null) {
            throw new ApiException("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansReprotect(Async)");
        }

        return replicationRecoveryPlansReprotectCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, _callback);

    }

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @return RecoveryPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryPlan replicationRecoveryPlansReprotect(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName) throws ApiException {
        ApiResponse<RecoveryPlan> localVarResp = replicationRecoveryPlansReprotectWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName);
        return localVarResp.getData();
    }

    /**
     * Execute reprotect of the recovery plan.
     * The operation to reprotect(reverse replicate) a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @return ApiResponse&lt;RecoveryPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryPlan> replicationRecoveryPlansReprotectWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansReprotectValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, null);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute reprotect of the recovery plan. (asynchronously)
     * The operation to reprotect(reverse replicate) a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansReprotectAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, final ApiCallback<RecoveryPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansReprotectValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, _callback);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationRecoveryPlansTestFailover
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansTestFailoverCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanTestFailoverInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "recoveryPlanName" + "}", localVarApiClient.escapeString(recoveryPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansTestFailoverValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanTestFailoverInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansTestFailover(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansTestFailover(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansTestFailover(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansTestFailover(Async)");
        }

        // verify the required parameter 'recoveryPlanName' is set
        if (recoveryPlanName == null) {
            throw new ApiException("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansTestFailover(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling replicationRecoveryPlansTestFailover(Async)");
        }

        return replicationRecoveryPlansTestFailoverCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);

    }

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @return RecoveryPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryPlan replicationRecoveryPlansTestFailover(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanTestFailoverInput input) throws ApiException {
        ApiResponse<RecoveryPlan> localVarResp = replicationRecoveryPlansTestFailoverWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        return localVarResp.getData();
    }

    /**
     * Execute test failover of the recovery plan.
     * The operation to start the test failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @return ApiResponse&lt;RecoveryPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryPlan> replicationRecoveryPlansTestFailoverWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanTestFailoverInput input) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansTestFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, null);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute test failover of the recovery plan. (asynchronously)
     * The operation to start the test failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansTestFailoverAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanTestFailoverInput input, final ApiCallback<RecoveryPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansTestFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationRecoveryPlansTestFailoverCleanup
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Test failover cleanup input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansTestFailoverCleanupCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailoverCleanup"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "recoveryPlanName" + "}", localVarApiClient.escapeString(recoveryPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansTestFailoverCleanupValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'recoveryPlanName' is set
        if (recoveryPlanName == null) {
            throw new ApiException("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansTestFailoverCleanup(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling replicationRecoveryPlansTestFailoverCleanup(Async)");
        }

        return replicationRecoveryPlansTestFailoverCleanupCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);

    }

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Test failover cleanup input. (required)
     * @return RecoveryPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryPlan replicationRecoveryPlansTestFailoverCleanup(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input) throws ApiException {
        ApiResponse<RecoveryPlan> localVarResp = replicationRecoveryPlansTestFailoverCleanupWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        return localVarResp.getData();
    }

    /**
     * Execute test failover cleanup of the recovery plan.
     * The operation to cleanup test failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Test failover cleanup input. (required)
     * @return ApiResponse&lt;RecoveryPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryPlan> replicationRecoveryPlansTestFailoverCleanupWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansTestFailoverCleanupValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, null);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute test failover cleanup of the recovery plan. (asynchronously)
     * The operation to cleanup test failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Test failover cleanup input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansTestFailoverCleanupAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input, final ApiCallback<RecoveryPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansTestFailoverCleanupValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationRecoveryPlansUnplannedFailover
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansUnplannedFailoverCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/unplannedFailover"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "recoveryPlanName" + "}", localVarApiClient.escapeString(recoveryPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansUnplannedFailoverValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansUnplannedFailover(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansUnplannedFailover(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansUnplannedFailover(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansUnplannedFailover(Async)");
        }

        // verify the required parameter 'recoveryPlanName' is set
        if (recoveryPlanName == null) {
            throw new ApiException("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansUnplannedFailover(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling replicationRecoveryPlansUnplannedFailover(Async)");
        }

        return replicationRecoveryPlansUnplannedFailoverCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);

    }

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @return RecoveryPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryPlan replicationRecoveryPlansUnplannedFailover(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input) throws ApiException {
        ApiResponse<RecoveryPlan> localVarResp = replicationRecoveryPlansUnplannedFailoverWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        return localVarResp.getData();
    }

    /**
     * Execute unplanned failover of the recovery plan.
     * The operation to start the failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @return ApiResponse&lt;RecoveryPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryPlan> replicationRecoveryPlansUnplannedFailoverWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansUnplannedFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, null);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute unplanned failover of the recovery plan. (asynchronously)
     * The operation to start the failover of a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Failover input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansUnplannedFailoverAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, final ApiCallback<RecoveryPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansUnplannedFailoverValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationRecoveryPlansUpdate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Update recovery plan input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansUpdateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, UpdateRecoveryPlanInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "recoveryPlanName" + "}", localVarApiClient.escapeString(recoveryPlanName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationRecoveryPlansUpdateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, UpdateRecoveryPlanInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationRecoveryPlansUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationRecoveryPlansUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryPlansUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationRecoveryPlansUpdate(Async)");
        }

        // verify the required parameter 'recoveryPlanName' is set
        if (recoveryPlanName == null) {
            throw new ApiException("Missing the required parameter 'recoveryPlanName' when calling replicationRecoveryPlansUpdate(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling replicationRecoveryPlansUpdate(Async)");
        }

        return replicationRecoveryPlansUpdateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);

    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Update recovery plan input (required)
     * @return RecoveryPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public RecoveryPlan replicationRecoveryPlansUpdate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, UpdateRecoveryPlanInput input) throws ApiException {
        ApiResponse<RecoveryPlan> localVarResp = replicationRecoveryPlansUpdateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input);
        return localVarResp.getData();
    }

    /**
     * Updates the given recovery plan.
     * The operation to update a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Update recovery plan input (required)
     * @return ApiResponse&lt;RecoveryPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoveryPlan> replicationRecoveryPlansUpdateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, UpdateRecoveryPlanInput input) throws ApiException {
        okhttp3.Call localVarCall = replicationRecoveryPlansUpdateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, null);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the given recovery plan. (asynchronously)
     * The operation to update a recovery plan.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param recoveryPlanName Recovery plan name. (required)
     * @param input Update recovery plan input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationRecoveryPlansUpdateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String recoveryPlanName, UpdateRecoveryPlanInput input, final ApiCallback<RecoveryPlan> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationRecoveryPlansUpdateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, recoveryPlanName, input, _callback);
        Type localVarReturnType = new TypeToken<RecoveryPlan>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
