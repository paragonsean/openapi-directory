/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EnableMigrationInput;
import org.openapitools.client.model.MigrateInput;
import org.openapitools.client.model.MigrationItem;
import org.openapitools.client.model.MigrationItemCollection;
import org.openapitools.client.model.TestMigrateCleanupInput;
import org.openapitools.client.model.TestMigrateInput;
import org.openapitools.client.model.UpdateMigrationItemInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReplicationMigrationItemsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReplicationMigrationItemsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReplicationMigrationItemsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for replicationMigrationItemsCreate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param input Enable migration input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsCreateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "migrationItemName" + "}", localVarApiClient.escapeString(migrationItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationMigrationItemsCreateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationMigrationItemsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsCreate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationMigrationItemsCreate(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsCreate(Async)");
        }

        // verify the required parameter 'migrationItemName' is set
        if (migrationItemName == null) {
            throw new ApiException("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsCreate(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling replicationMigrationItemsCreate(Async)");
        }

        return replicationMigrationItemsCreateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, input, _callback);

    }

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param input Enable migration input. (required)
     * @return MigrationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public MigrationItem replicationMigrationItemsCreate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInput input) throws ApiException {
        ApiResponse<MigrationItem> localVarResp = replicationMigrationItemsCreateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, input);
        return localVarResp.getData();
    }

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param input Enable migration input. (required)
     * @return ApiResponse&lt;MigrationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationItem> replicationMigrationItemsCreateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInput input) throws ApiException {
        okhttp3.Call localVarCall = replicationMigrationItemsCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, input, null);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Enables migration. (asynchronously)
     * The operation to create an ASR migration item (enable migration).
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param input Enable migration input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsCreateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, EnableMigrationInput input, final ApiCallback<MigrationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationMigrationItemsCreateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, input, _callback);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationMigrationItemsDelete
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param deleteOption The delete option. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsDeleteCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, String deleteOption, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "migrationItemName" + "}", localVarApiClient.escapeString(migrationItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (deleteOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteOption", deleteOption));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationMigrationItemsDeleteValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, String deleteOption, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationMigrationItemsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsDelete(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationMigrationItemsDelete(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsDelete(Async)");
        }

        // verify the required parameter 'migrationItemName' is set
        if (migrationItemName == null) {
            throw new ApiException("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsDelete(Async)");
        }

        return replicationMigrationItemsDeleteCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, deleteOption, _callback);

    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param deleteOption The delete option. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public void replicationMigrationItemsDelete(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, String deleteOption) throws ApiException {
        replicationMigrationItemsDeleteWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, deleteOption);
    }

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param deleteOption The delete option. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> replicationMigrationItemsDeleteWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, String deleteOption) throws ApiException {
        okhttp3.Call localVarCall = replicationMigrationItemsDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, deleteOption, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the migration item. (asynchronously)
     * The operation to delete an ASR migration item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param deleteOption The delete option. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsDeleteAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, String deleteOption, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationMigrationItemsDeleteValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, deleteOption, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationMigrationItemsGet
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric unique name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsGetCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "migrationItemName" + "}", localVarApiClient.escapeString(migrationItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationMigrationItemsGetValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationMigrationItemsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsGet(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationMigrationItemsGet(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsGet(Async)");
        }

        // verify the required parameter 'migrationItemName' is set
        if (migrationItemName == null) {
            throw new ApiException("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsGet(Async)");
        }

        return replicationMigrationItemsGetCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, _callback);

    }

    /**
     * Gets the details of a migration item.
     * 
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric unique name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @return MigrationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MigrationItem replicationMigrationItemsGet(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName) throws ApiException {
        ApiResponse<MigrationItem> localVarResp = replicationMigrationItemsGetWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName);
        return localVarResp.getData();
    }

    /**
     * Gets the details of a migration item.
     * 
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric unique name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @return ApiResponse&lt;MigrationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationItem> replicationMigrationItemsGetWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName) throws ApiException {
        okhttp3.Call localVarCall = replicationMigrationItemsGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, null);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the details of a migration item. (asynchronously)
     * 
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric unique name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsGetAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, final ApiCallback<MigrationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationMigrationItemsGetValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, _callback);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationMigrationItemsList
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param skipToken The pagination token. (optional)
     * @param $filter OData filter options. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsListCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String skipToken, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationMigrationItems"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipToken", skipToken));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationMigrationItemsListValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String skipToken, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsList(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationMigrationItemsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsList(Async)");
        }

        return replicationMigrationItemsListCall(apiVersion, resourceName, resourceGroupName, subscriptionId, skipToken, $filter, _callback);

    }

    /**
     * Gets the list of migration items in the vault.
     * 
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param skipToken The pagination token. (optional)
     * @param $filter OData filter options. (optional)
     * @return MigrationItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MigrationItemCollection replicationMigrationItemsList(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String skipToken, String $filter) throws ApiException {
        ApiResponse<MigrationItemCollection> localVarResp = replicationMigrationItemsListWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, skipToken, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets the list of migration items in the vault.
     * 
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param skipToken The pagination token. (optional)
     * @param $filter OData filter options. (optional)
     * @return ApiResponse&lt;MigrationItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationItemCollection> replicationMigrationItemsListWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String skipToken, String $filter) throws ApiException {
        okhttp3.Call localVarCall = replicationMigrationItemsListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, skipToken, $filter, null);
        Type localVarReturnType = new TypeToken<MigrationItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of migration items in the vault. (asynchronously)
     * 
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param skipToken The pagination token. (optional)
     * @param $filter OData filter options. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsListAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String skipToken, String $filter, final ApiCallback<MigrationItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationMigrationItemsListValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, skipToken, $filter, _callback);
        Type localVarReturnType = new TypeToken<MigrationItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationMigrationItemsListByReplicationProtectionContainers
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsListByReplicationProtectionContainersCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationMigrationItemsListByReplicationProtectionContainersValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationMigrationItemsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationMigrationItemsListByReplicationProtectionContainers(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsListByReplicationProtectionContainers(Async)");
        }

        return replicationMigrationItemsListByReplicationProtectionContainersCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, _callback);

    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @return MigrationItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MigrationItemCollection replicationMigrationItemsListByReplicationProtectionContainers(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName) throws ApiException {
        ApiResponse<MigrationItemCollection> localVarResp = replicationMigrationItemsListByReplicationProtectionContainersWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName);
        return localVarResp.getData();
    }

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @return ApiResponse&lt;MigrationItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationItemCollection> replicationMigrationItemsListByReplicationProtectionContainersWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName) throws ApiException {
        okhttp3.Call localVarCall = replicationMigrationItemsListByReplicationProtectionContainersValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, null);
        Type localVarReturnType = new TypeToken<MigrationItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of migration items in the protection container. (asynchronously)
     * Gets the list of ASR migration items in the protection container.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsListByReplicationProtectionContainersAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, final ApiCallback<MigrationItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationMigrationItemsListByReplicationProtectionContainersValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, _callback);
        Type localVarReturnType = new TypeToken<MigrationItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationMigrationItemsMigrate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param migrateInput Migrate input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsMigrateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, MigrateInput migrateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = migrateInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrate"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "migrationItemName" + "}", localVarApiClient.escapeString(migrationItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationMigrationItemsMigrateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, MigrateInput migrateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsMigrate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationMigrationItemsMigrate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsMigrate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsMigrate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationMigrationItemsMigrate(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsMigrate(Async)");
        }

        // verify the required parameter 'migrationItemName' is set
        if (migrationItemName == null) {
            throw new ApiException("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsMigrate(Async)");
        }

        // verify the required parameter 'migrateInput' is set
        if (migrateInput == null) {
            throw new ApiException("Missing the required parameter 'migrateInput' when calling replicationMigrationItemsMigrate(Async)");
        }

        return replicationMigrationItemsMigrateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, migrateInput, _callback);

    }

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param migrateInput Migrate input. (required)
     * @return MigrationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public MigrationItem replicationMigrationItemsMigrate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, MigrateInput migrateInput) throws ApiException {
        ApiResponse<MigrationItem> localVarResp = replicationMigrationItemsMigrateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, migrateInput);
        return localVarResp.getData();
    }

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param migrateInput Migrate input. (required)
     * @return ApiResponse&lt;MigrationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationItem> replicationMigrationItemsMigrateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, MigrateInput migrateInput) throws ApiException {
        okhttp3.Call localVarCall = replicationMigrationItemsMigrateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, migrateInput, null);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Migrate item. (asynchronously)
     * The operation to initiate migration of the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param migrateInput Migrate input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsMigrateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, MigrateInput migrateInput, final ApiCallback<MigrationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationMigrationItemsMigrateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, migrateInput, _callback);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationMigrationItemsTestMigrate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param testMigrateInput Test migrate input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsTestMigrateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInput testMigrateInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testMigrateInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrate"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "migrationItemName" + "}", localVarApiClient.escapeString(migrationItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationMigrationItemsTestMigrateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInput testMigrateInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsTestMigrate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationMigrationItemsTestMigrate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsTestMigrate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsTestMigrate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationMigrationItemsTestMigrate(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsTestMigrate(Async)");
        }

        // verify the required parameter 'migrationItemName' is set
        if (migrationItemName == null) {
            throw new ApiException("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsTestMigrate(Async)");
        }

        // verify the required parameter 'testMigrateInput' is set
        if (testMigrateInput == null) {
            throw new ApiException("Missing the required parameter 'testMigrateInput' when calling replicationMigrationItemsTestMigrate(Async)");
        }

        return replicationMigrationItemsTestMigrateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, testMigrateInput, _callback);

    }

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param testMigrateInput Test migrate input. (required)
     * @return MigrationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public MigrationItem replicationMigrationItemsTestMigrate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInput testMigrateInput) throws ApiException {
        ApiResponse<MigrationItem> localVarResp = replicationMigrationItemsTestMigrateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, testMigrateInput);
        return localVarResp.getData();
    }

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param testMigrateInput Test migrate input. (required)
     * @return ApiResponse&lt;MigrationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationItem> replicationMigrationItemsTestMigrateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInput testMigrateInput) throws ApiException {
        okhttp3.Call localVarCall = replicationMigrationItemsTestMigrateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, testMigrateInput, null);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test migrate item. (asynchronously)
     * The operation to initiate test migration of the item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param testMigrateInput Test migrate input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsTestMigrateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, TestMigrateInput testMigrateInput, final ApiCallback<MigrationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationMigrationItemsTestMigrateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, testMigrateInput, _callback);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationMigrationItemsTestMigrateCleanup
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param testMigrateCleanupInput Test migrate cleanup input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsTestMigrateCleanupCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testMigrateCleanupInput;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrateCleanup"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "migrationItemName" + "}", localVarApiClient.escapeString(migrationItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationMigrationItemsTestMigrateCleanupValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsTestMigrateCleanup(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationMigrationItemsTestMigrateCleanup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsTestMigrateCleanup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsTestMigrateCleanup(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationMigrationItemsTestMigrateCleanup(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsTestMigrateCleanup(Async)");
        }

        // verify the required parameter 'migrationItemName' is set
        if (migrationItemName == null) {
            throw new ApiException("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsTestMigrateCleanup(Async)");
        }

        // verify the required parameter 'testMigrateCleanupInput' is set
        if (testMigrateCleanupInput == null) {
            throw new ApiException("Missing the required parameter 'testMigrateCleanupInput' when calling replicationMigrationItemsTestMigrateCleanup(Async)");
        }

        return replicationMigrationItemsTestMigrateCleanupCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput, _callback);

    }

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param testMigrateCleanupInput Test migrate cleanup input. (required)
     * @return MigrationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public MigrationItem replicationMigrationItemsTestMigrateCleanup(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput) throws ApiException {
        ApiResponse<MigrationItem> localVarResp = replicationMigrationItemsTestMigrateCleanupWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput);
        return localVarResp.getData();
    }

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param testMigrateCleanupInput Test migrate cleanup input. (required)
     * @return ApiResponse&lt;MigrationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationItem> replicationMigrationItemsTestMigrateCleanupWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput) throws ApiException {
        okhttp3.Call localVarCall = replicationMigrationItemsTestMigrateCleanupValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput, null);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test migrate cleanup. (asynchronously)
     * The operation to initiate test migrate cleanup.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param testMigrateCleanupInput Test migrate cleanup input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsTestMigrateCleanupAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, TestMigrateCleanupInput testMigrateCleanupInput, final ApiCallback<MigrationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationMigrationItemsTestMigrateCleanupValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput, _callback);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replicationMigrationItemsUpdate
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param input Update migration item input. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsUpdateCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}"
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "fabricName" + "}", localVarApiClient.escapeString(fabricName.toString()))
            .replace("{" + "protectionContainerName" + "}", localVarApiClient.escapeString(protectionContainerName.toString()))
            .replace("{" + "migrationItemName" + "}", localVarApiClient.escapeString(migrationItemName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replicationMigrationItemsUpdateValidateBeforeCall(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling replicationMigrationItemsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsUpdate(Async)");
        }

        // verify the required parameter 'fabricName' is set
        if (fabricName == null) {
            throw new ApiException("Missing the required parameter 'fabricName' when calling replicationMigrationItemsUpdate(Async)");
        }

        // verify the required parameter 'protectionContainerName' is set
        if (protectionContainerName == null) {
            throw new ApiException("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsUpdate(Async)");
        }

        // verify the required parameter 'migrationItemName' is set
        if (migrationItemName == null) {
            throw new ApiException("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsUpdate(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling replicationMigrationItemsUpdate(Async)");
        }

        return replicationMigrationItemsUpdateCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, input, _callback);

    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param input Update migration item input. (required)
     * @return MigrationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public MigrationItem replicationMigrationItemsUpdate(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input) throws ApiException {
        ApiResponse<MigrationItem> localVarResp = replicationMigrationItemsUpdateWithHttpInfo(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, input);
        return localVarResp.getData();
    }

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param input Update migration item input. (required)
     * @return ApiResponse&lt;MigrationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MigrationItem> replicationMigrationItemsUpdateWithHttpInfo(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input) throws ApiException {
        okhttp3.Call localVarCall = replicationMigrationItemsUpdateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, input, null);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates migration item. (asynchronously)
     * The operation to update the recovery settings of an ASR migration item.
     * @param apiVersion Client Api Version. (required)
     * @param resourceName The name of the recovery services vault. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param subscriptionId The subscription Id. (required)
     * @param fabricName Fabric name. (required)
     * @param protectionContainerName Protection container name. (required)
     * @param migrationItemName Migration item name. (required)
     * @param input Update migration item input. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replicationMigrationItemsUpdateAsync(String apiVersion, String resourceName, String resourceGroupName, String subscriptionId, String fabricName, String protectionContainerName, String migrationItemName, UpdateMigrationItemInput input, final ApiCallback<MigrationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = replicationMigrationItemsUpdateValidateBeforeCall(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, input, _callback);
        Type localVarReturnType = new TypeToken<MigrationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
