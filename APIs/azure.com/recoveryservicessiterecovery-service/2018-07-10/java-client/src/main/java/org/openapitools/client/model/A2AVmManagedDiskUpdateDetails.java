/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DiskEncryptionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Azure VM managed disk update input details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class A2AVmManagedDiskUpdateDetails {
  public static final String SERIALIZED_NAME_DISK_ENCRYPTION_INFO = "diskEncryptionInfo";
  @SerializedName(SERIALIZED_NAME_DISK_ENCRYPTION_INFO)
  private DiskEncryptionInfo diskEncryptionInfo;

  public static final String SERIALIZED_NAME_DISK_ID = "diskId";
  @SerializedName(SERIALIZED_NAME_DISK_ID)
  private String diskId;

  public static final String SERIALIZED_NAME_FAILOVER_DISK_NAME = "failoverDiskName";
  @SerializedName(SERIALIZED_NAME_FAILOVER_DISK_NAME)
  private String failoverDiskName;

  public static final String SERIALIZED_NAME_RECOVERY_REPLICA_DISK_ACCOUNT_TYPE = "recoveryReplicaDiskAccountType";
  @SerializedName(SERIALIZED_NAME_RECOVERY_REPLICA_DISK_ACCOUNT_TYPE)
  private String recoveryReplicaDiskAccountType;

  public static final String SERIALIZED_NAME_RECOVERY_TARGET_DISK_ACCOUNT_TYPE = "recoveryTargetDiskAccountType";
  @SerializedName(SERIALIZED_NAME_RECOVERY_TARGET_DISK_ACCOUNT_TYPE)
  private String recoveryTargetDiskAccountType;

  public static final String SERIALIZED_NAME_TFO_DISK_NAME = "tfoDiskName";
  @SerializedName(SERIALIZED_NAME_TFO_DISK_NAME)
  private String tfoDiskName;

  public A2AVmManagedDiskUpdateDetails() {
  }

  public A2AVmManagedDiskUpdateDetails diskEncryptionInfo(DiskEncryptionInfo diskEncryptionInfo) {
    this.diskEncryptionInfo = diskEncryptionInfo;
    return this;
  }

  /**
   * Get diskEncryptionInfo
   * @return diskEncryptionInfo
   */
  @javax.annotation.Nullable
  public DiskEncryptionInfo getDiskEncryptionInfo() {
    return diskEncryptionInfo;
  }

  public void setDiskEncryptionInfo(DiskEncryptionInfo diskEncryptionInfo) {
    this.diskEncryptionInfo = diskEncryptionInfo;
  }


  public A2AVmManagedDiskUpdateDetails diskId(String diskId) {
    this.diskId = diskId;
    return this;
  }

  /**
   * The disk Id.
   * @return diskId
   */
  @javax.annotation.Nullable
  public String getDiskId() {
    return diskId;
  }

  public void setDiskId(String diskId) {
    this.diskId = diskId;
  }


  public A2AVmManagedDiskUpdateDetails failoverDiskName(String failoverDiskName) {
    this.failoverDiskName = failoverDiskName;
    return this;
  }

  /**
   * The target disk name for unplanned failover operation.
   * @return failoverDiskName
   */
  @javax.annotation.Nullable
  public String getFailoverDiskName() {
    return failoverDiskName;
  }

  public void setFailoverDiskName(String failoverDiskName) {
    this.failoverDiskName = failoverDiskName;
  }


  public A2AVmManagedDiskUpdateDetails recoveryReplicaDiskAccountType(String recoveryReplicaDiskAccountType) {
    this.recoveryReplicaDiskAccountType = recoveryReplicaDiskAccountType;
    return this;
  }

  /**
   * The replica disk type before failover.
   * @return recoveryReplicaDiskAccountType
   */
  @javax.annotation.Nullable
  public String getRecoveryReplicaDiskAccountType() {
    return recoveryReplicaDiskAccountType;
  }

  public void setRecoveryReplicaDiskAccountType(String recoveryReplicaDiskAccountType) {
    this.recoveryReplicaDiskAccountType = recoveryReplicaDiskAccountType;
  }


  public A2AVmManagedDiskUpdateDetails recoveryTargetDiskAccountType(String recoveryTargetDiskAccountType) {
    this.recoveryTargetDiskAccountType = recoveryTargetDiskAccountType;
    return this;
  }

  /**
   * The target disk type before failover.
   * @return recoveryTargetDiskAccountType
   */
  @javax.annotation.Nullable
  public String getRecoveryTargetDiskAccountType() {
    return recoveryTargetDiskAccountType;
  }

  public void setRecoveryTargetDiskAccountType(String recoveryTargetDiskAccountType) {
    this.recoveryTargetDiskAccountType = recoveryTargetDiskAccountType;
  }


  public A2AVmManagedDiskUpdateDetails tfoDiskName(String tfoDiskName) {
    this.tfoDiskName = tfoDiskName;
    return this;
  }

  /**
   * The target disk name for test failover operation.
   * @return tfoDiskName
   */
  @javax.annotation.Nullable
  public String getTfoDiskName() {
    return tfoDiskName;
  }

  public void setTfoDiskName(String tfoDiskName) {
    this.tfoDiskName = tfoDiskName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    A2AVmManagedDiskUpdateDetails a2AVmManagedDiskUpdateDetails = (A2AVmManagedDiskUpdateDetails) o;
    return Objects.equals(this.diskEncryptionInfo, a2AVmManagedDiskUpdateDetails.diskEncryptionInfo) &&
        Objects.equals(this.diskId, a2AVmManagedDiskUpdateDetails.diskId) &&
        Objects.equals(this.failoverDiskName, a2AVmManagedDiskUpdateDetails.failoverDiskName) &&
        Objects.equals(this.recoveryReplicaDiskAccountType, a2AVmManagedDiskUpdateDetails.recoveryReplicaDiskAccountType) &&
        Objects.equals(this.recoveryTargetDiskAccountType, a2AVmManagedDiskUpdateDetails.recoveryTargetDiskAccountType) &&
        Objects.equals(this.tfoDiskName, a2AVmManagedDiskUpdateDetails.tfoDiskName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskEncryptionInfo, diskId, failoverDiskName, recoveryReplicaDiskAccountType, recoveryTargetDiskAccountType, tfoDiskName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class A2AVmManagedDiskUpdateDetails {\n");
    sb.append("    diskEncryptionInfo: ").append(toIndentedString(diskEncryptionInfo)).append("\n");
    sb.append("    diskId: ").append(toIndentedString(diskId)).append("\n");
    sb.append("    failoverDiskName: ").append(toIndentedString(failoverDiskName)).append("\n");
    sb.append("    recoveryReplicaDiskAccountType: ").append(toIndentedString(recoveryReplicaDiskAccountType)).append("\n");
    sb.append("    recoveryTargetDiskAccountType: ").append(toIndentedString(recoveryTargetDiskAccountType)).append("\n");
    sb.append("    tfoDiskName: ").append(toIndentedString(tfoDiskName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskEncryptionInfo");
    openapiFields.add("diskId");
    openapiFields.add("failoverDiskName");
    openapiFields.add("recoveryReplicaDiskAccountType");
    openapiFields.add("recoveryTargetDiskAccountType");
    openapiFields.add("tfoDiskName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to A2AVmManagedDiskUpdateDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!A2AVmManagedDiskUpdateDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in A2AVmManagedDiskUpdateDetails is not found in the empty JSON string", A2AVmManagedDiskUpdateDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!A2AVmManagedDiskUpdateDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `A2AVmManagedDiskUpdateDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `diskEncryptionInfo`
      if (jsonObj.get("diskEncryptionInfo") != null && !jsonObj.get("diskEncryptionInfo").isJsonNull()) {
        DiskEncryptionInfo.validateJsonElement(jsonObj.get("diskEncryptionInfo"));
      }
      if ((jsonObj.get("diskId") != null && !jsonObj.get("diskId").isJsonNull()) && !jsonObj.get("diskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskId").toString()));
      }
      if ((jsonObj.get("failoverDiskName") != null && !jsonObj.get("failoverDiskName").isJsonNull()) && !jsonObj.get("failoverDiskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverDiskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failoverDiskName").toString()));
      }
      if ((jsonObj.get("recoveryReplicaDiskAccountType") != null && !jsonObj.get("recoveryReplicaDiskAccountType").isJsonNull()) && !jsonObj.get("recoveryReplicaDiskAccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryReplicaDiskAccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryReplicaDiskAccountType").toString()));
      }
      if ((jsonObj.get("recoveryTargetDiskAccountType") != null && !jsonObj.get("recoveryTargetDiskAccountType").isJsonNull()) && !jsonObj.get("recoveryTargetDiskAccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recoveryTargetDiskAccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recoveryTargetDiskAccountType").toString()));
      }
      if ((jsonObj.get("tfoDiskName") != null && !jsonObj.get("tfoDiskName").isJsonNull()) && !jsonObj.get("tfoDiskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tfoDiskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tfoDiskName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!A2AVmManagedDiskUpdateDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'A2AVmManagedDiskUpdateDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<A2AVmManagedDiskUpdateDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(A2AVmManagedDiskUpdateDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<A2AVmManagedDiskUpdateDetails>() {
           @Override
           public void write(JsonWriter out, A2AVmManagedDiskUpdateDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public A2AVmManagedDiskUpdateDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of A2AVmManagedDiskUpdateDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of A2AVmManagedDiskUpdateDetails
   * @throws IOException if the JSON string is invalid with respect to A2AVmManagedDiskUpdateDetails
   */
  public static A2AVmManagedDiskUpdateDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, A2AVmManagedDiskUpdateDetails.class);
  }

  /**
   * Convert an instance of A2AVmManagedDiskUpdateDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

