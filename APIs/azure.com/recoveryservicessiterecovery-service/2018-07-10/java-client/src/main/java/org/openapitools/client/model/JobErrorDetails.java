/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ProviderError;
import org.openapitools.client.model.ServiceError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This class contains the error details per object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobErrorDetails {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_ERROR_LEVEL = "errorLevel";
  @SerializedName(SERIALIZED_NAME_ERROR_LEVEL)
  private String errorLevel;

  public static final String SERIALIZED_NAME_PROVIDER_ERROR_DETAILS = "providerErrorDetails";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ERROR_DETAILS)
  private ProviderError providerErrorDetails;

  public static final String SERIALIZED_NAME_SERVICE_ERROR_DETAILS = "serviceErrorDetails";
  @SerializedName(SERIALIZED_NAME_SERVICE_ERROR_DETAILS)
  private ServiceError serviceErrorDetails;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public JobErrorDetails() {
  }

  public JobErrorDetails creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The creation time of job error.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public JobErrorDetails errorLevel(String errorLevel) {
    this.errorLevel = errorLevel;
    return this;
  }

  /**
   * Error level of error.
   * @return errorLevel
   */
  @javax.annotation.Nullable
  public String getErrorLevel() {
    return errorLevel;
  }

  public void setErrorLevel(String errorLevel) {
    this.errorLevel = errorLevel;
  }


  public JobErrorDetails providerErrorDetails(ProviderError providerErrorDetails) {
    this.providerErrorDetails = providerErrorDetails;
    return this;
  }

  /**
   * Get providerErrorDetails
   * @return providerErrorDetails
   */
  @javax.annotation.Nullable
  public ProviderError getProviderErrorDetails() {
    return providerErrorDetails;
  }

  public void setProviderErrorDetails(ProviderError providerErrorDetails) {
    this.providerErrorDetails = providerErrorDetails;
  }


  public JobErrorDetails serviceErrorDetails(ServiceError serviceErrorDetails) {
    this.serviceErrorDetails = serviceErrorDetails;
    return this;
  }

  /**
   * Get serviceErrorDetails
   * @return serviceErrorDetails
   */
  @javax.annotation.Nullable
  public ServiceError getServiceErrorDetails() {
    return serviceErrorDetails;
  }

  public void setServiceErrorDetails(ServiceError serviceErrorDetails) {
    this.serviceErrorDetails = serviceErrorDetails;
  }


  public JobErrorDetails taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * The Id of the task.
   * @return taskId
   */
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobErrorDetails jobErrorDetails = (JobErrorDetails) o;
    return Objects.equals(this.creationTime, jobErrorDetails.creationTime) &&
        Objects.equals(this.errorLevel, jobErrorDetails.errorLevel) &&
        Objects.equals(this.providerErrorDetails, jobErrorDetails.providerErrorDetails) &&
        Objects.equals(this.serviceErrorDetails, jobErrorDetails.serviceErrorDetails) &&
        Objects.equals(this.taskId, jobErrorDetails.taskId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, errorLevel, providerErrorDetails, serviceErrorDetails, taskId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobErrorDetails {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    errorLevel: ").append(toIndentedString(errorLevel)).append("\n");
    sb.append("    providerErrorDetails: ").append(toIndentedString(providerErrorDetails)).append("\n");
    sb.append("    serviceErrorDetails: ").append(toIndentedString(serviceErrorDetails)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("errorLevel");
    openapiFields.add("providerErrorDetails");
    openapiFields.add("serviceErrorDetails");
    openapiFields.add("taskId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobErrorDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobErrorDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobErrorDetails is not found in the empty JSON string", JobErrorDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobErrorDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobErrorDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorLevel") != null && !jsonObj.get("errorLevel").isJsonNull()) && !jsonObj.get("errorLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorLevel").toString()));
      }
      // validate the optional field `providerErrorDetails`
      if (jsonObj.get("providerErrorDetails") != null && !jsonObj.get("providerErrorDetails").isJsonNull()) {
        ProviderError.validateJsonElement(jsonObj.get("providerErrorDetails"));
      }
      // validate the optional field `serviceErrorDetails`
      if (jsonObj.get("serviceErrorDetails") != null && !jsonObj.get("serviceErrorDetails").isJsonNull()) {
        ServiceError.validateJsonElement(jsonObj.get("serviceErrorDetails"));
      }
      if ((jsonObj.get("taskId") != null && !jsonObj.get("taskId").isJsonNull()) && !jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobErrorDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobErrorDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobErrorDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobErrorDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<JobErrorDetails>() {
           @Override
           public void write(JsonWriter out, JobErrorDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobErrorDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobErrorDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobErrorDetails
   * @throws IOException if the JSON string is invalid with respect to JobErrorDetails
   */
  public static JobErrorDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobErrorDetails.class);
  }

  /**
   * Convert an instance of JobErrorDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

