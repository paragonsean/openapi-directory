/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DiskVolumeDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VMware/Physical specific Disk Details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InMageDiskDetails {
  public static final String SERIALIZED_NAME_DISK_CONFIGURATION = "diskConfiguration";
  @SerializedName(SERIALIZED_NAME_DISK_CONFIGURATION)
  private String diskConfiguration;

  public static final String SERIALIZED_NAME_DISK_ID = "diskId";
  @SerializedName(SERIALIZED_NAME_DISK_ID)
  private String diskId;

  public static final String SERIALIZED_NAME_DISK_NAME = "diskName";
  @SerializedName(SERIALIZED_NAME_DISK_NAME)
  private String diskName;

  public static final String SERIALIZED_NAME_DISK_SIZE_IN_M_B = "diskSizeInMB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_IN_M_B)
  private String diskSizeInMB;

  public static final String SERIALIZED_NAME_DISK_TYPE = "diskType";
  @SerializedName(SERIALIZED_NAME_DISK_TYPE)
  private String diskType;

  public static final String SERIALIZED_NAME_VOLUME_LIST = "volumeList";
  @SerializedName(SERIALIZED_NAME_VOLUME_LIST)
  private List<DiskVolumeDetails> volumeList = new ArrayList<>();

  public InMageDiskDetails() {
  }

  public InMageDiskDetails diskConfiguration(String diskConfiguration) {
    this.diskConfiguration = diskConfiguration;
    return this;
  }

  /**
   * Whether disk is dynamic disk or basic disk.
   * @return diskConfiguration
   */
  @javax.annotation.Nullable
  public String getDiskConfiguration() {
    return diskConfiguration;
  }

  public void setDiskConfiguration(String diskConfiguration) {
    this.diskConfiguration = diskConfiguration;
  }


  public InMageDiskDetails diskId(String diskId) {
    this.diskId = diskId;
    return this;
  }

  /**
   * The disk Id.
   * @return diskId
   */
  @javax.annotation.Nullable
  public String getDiskId() {
    return diskId;
  }

  public void setDiskId(String diskId) {
    this.diskId = diskId;
  }


  public InMageDiskDetails diskName(String diskName) {
    this.diskName = diskName;
    return this;
  }

  /**
   * The disk name.
   * @return diskName
   */
  @javax.annotation.Nullable
  public String getDiskName() {
    return diskName;
  }

  public void setDiskName(String diskName) {
    this.diskName = diskName;
  }


  public InMageDiskDetails diskSizeInMB(String diskSizeInMB) {
    this.diskSizeInMB = diskSizeInMB;
    return this;
  }

  /**
   * The disk size in MB.
   * @return diskSizeInMB
   */
  @javax.annotation.Nullable
  public String getDiskSizeInMB() {
    return diskSizeInMB;
  }

  public void setDiskSizeInMB(String diskSizeInMB) {
    this.diskSizeInMB = diskSizeInMB;
  }


  public InMageDiskDetails diskType(String diskType) {
    this.diskType = diskType;
    return this;
  }

  /**
   * Whether disk is system disk or data disk.
   * @return diskType
   */
  @javax.annotation.Nullable
  public String getDiskType() {
    return diskType;
  }

  public void setDiskType(String diskType) {
    this.diskType = diskType;
  }


  public InMageDiskDetails volumeList(List<DiskVolumeDetails> volumeList) {
    this.volumeList = volumeList;
    return this;
  }

  public InMageDiskDetails addVolumeListItem(DiskVolumeDetails volumeListItem) {
    if (this.volumeList == null) {
      this.volumeList = new ArrayList<>();
    }
    this.volumeList.add(volumeListItem);
    return this;
  }

  /**
   * Volumes of the disk.
   * @return volumeList
   */
  @javax.annotation.Nullable
  public List<DiskVolumeDetails> getVolumeList() {
    return volumeList;
  }

  public void setVolumeList(List<DiskVolumeDetails> volumeList) {
    this.volumeList = volumeList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InMageDiskDetails inMageDiskDetails = (InMageDiskDetails) o;
    return Objects.equals(this.diskConfiguration, inMageDiskDetails.diskConfiguration) &&
        Objects.equals(this.diskId, inMageDiskDetails.diskId) &&
        Objects.equals(this.diskName, inMageDiskDetails.diskName) &&
        Objects.equals(this.diskSizeInMB, inMageDiskDetails.diskSizeInMB) &&
        Objects.equals(this.diskType, inMageDiskDetails.diskType) &&
        Objects.equals(this.volumeList, inMageDiskDetails.volumeList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskConfiguration, diskId, diskName, diskSizeInMB, diskType, volumeList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InMageDiskDetails {\n");
    sb.append("    diskConfiguration: ").append(toIndentedString(diskConfiguration)).append("\n");
    sb.append("    diskId: ").append(toIndentedString(diskId)).append("\n");
    sb.append("    diskName: ").append(toIndentedString(diskName)).append("\n");
    sb.append("    diskSizeInMB: ").append(toIndentedString(diskSizeInMB)).append("\n");
    sb.append("    diskType: ").append(toIndentedString(diskType)).append("\n");
    sb.append("    volumeList: ").append(toIndentedString(volumeList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskConfiguration");
    openapiFields.add("diskId");
    openapiFields.add("diskName");
    openapiFields.add("diskSizeInMB");
    openapiFields.add("diskType");
    openapiFields.add("volumeList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InMageDiskDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InMageDiskDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InMageDiskDetails is not found in the empty JSON string", InMageDiskDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InMageDiskDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InMageDiskDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("diskConfiguration") != null && !jsonObj.get("diskConfiguration").isJsonNull()) && !jsonObj.get("diskConfiguration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskConfiguration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskConfiguration").toString()));
      }
      if ((jsonObj.get("diskId") != null && !jsonObj.get("diskId").isJsonNull()) && !jsonObj.get("diskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskId").toString()));
      }
      if ((jsonObj.get("diskName") != null && !jsonObj.get("diskName").isJsonNull()) && !jsonObj.get("diskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskName").toString()));
      }
      if ((jsonObj.get("diskSizeInMB") != null && !jsonObj.get("diskSizeInMB").isJsonNull()) && !jsonObj.get("diskSizeInMB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskSizeInMB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskSizeInMB").toString()));
      }
      if ((jsonObj.get("diskType") != null && !jsonObj.get("diskType").isJsonNull()) && !jsonObj.get("diskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskType").toString()));
      }
      if (jsonObj.get("volumeList") != null && !jsonObj.get("volumeList").isJsonNull()) {
        JsonArray jsonArrayvolumeList = jsonObj.getAsJsonArray("volumeList");
        if (jsonArrayvolumeList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumeList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumeList` to be an array in the JSON string but got `%s`", jsonObj.get("volumeList").toString()));
          }

          // validate the optional field `volumeList` (array)
          for (int i = 0; i < jsonArrayvolumeList.size(); i++) {
            DiskVolumeDetails.validateJsonElement(jsonArrayvolumeList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InMageDiskDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InMageDiskDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InMageDiskDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InMageDiskDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<InMageDiskDetails>() {
           @Override
           public void write(JsonWriter out, InMageDiskDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InMageDiskDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InMageDiskDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InMageDiskDetails
   * @throws IOException if the JSON string is invalid with respect to InMageDiskDetails
   */
  public static InMageDiskDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InMageDiskDetails.class);
  }

  /**
   * Convert an instance of InMageDiskDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

