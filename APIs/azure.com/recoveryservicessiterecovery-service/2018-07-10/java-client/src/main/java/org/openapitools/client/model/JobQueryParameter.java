/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Query parameter to enumerate jobs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobQueryParameter {
  public static final String SERIALIZED_NAME_AFFECTED_OBJECT_TYPES = "affectedObjectTypes";
  @SerializedName(SERIALIZED_NAME_AFFECTED_OBJECT_TYPES)
  private String affectedObjectTypes;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_FABRIC_ID = "fabricId";
  @SerializedName(SERIALIZED_NAME_FABRIC_ID)
  private String fabricId;

  public static final String SERIALIZED_NAME_JOB_STATUS = "jobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private String jobStatus;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public JobQueryParameter() {
  }

  public JobQueryParameter affectedObjectTypes(String affectedObjectTypes) {
    this.affectedObjectTypes = affectedObjectTypes;
    return this;
  }

  /**
   * The type of objects.
   * @return affectedObjectTypes
   */
  @javax.annotation.Nullable
  public String getAffectedObjectTypes() {
    return affectedObjectTypes;
  }

  public void setAffectedObjectTypes(String affectedObjectTypes) {
    this.affectedObjectTypes = affectedObjectTypes;
  }


  public JobQueryParameter endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Date time to get jobs up to.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public JobQueryParameter fabricId(String fabricId) {
    this.fabricId = fabricId;
    return this;
  }

  /**
   * The Id of the fabric to search jobs under.
   * @return fabricId
   */
  @javax.annotation.Nullable
  public String getFabricId() {
    return fabricId;
  }

  public void setFabricId(String fabricId) {
    this.fabricId = fabricId;
  }


  public JobQueryParameter jobStatus(String jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * The states of the job to be filtered can be in.
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public String getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(String jobStatus) {
    this.jobStatus = jobStatus;
  }


  public JobQueryParameter startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Date time to get jobs from.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobQueryParameter jobQueryParameter = (JobQueryParameter) o;
    return Objects.equals(this.affectedObjectTypes, jobQueryParameter.affectedObjectTypes) &&
        Objects.equals(this.endTime, jobQueryParameter.endTime) &&
        Objects.equals(this.fabricId, jobQueryParameter.fabricId) &&
        Objects.equals(this.jobStatus, jobQueryParameter.jobStatus) &&
        Objects.equals(this.startTime, jobQueryParameter.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(affectedObjectTypes, endTime, fabricId, jobStatus, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobQueryParameter {\n");
    sb.append("    affectedObjectTypes: ").append(toIndentedString(affectedObjectTypes)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    fabricId: ").append(toIndentedString(fabricId)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("affectedObjectTypes");
    openapiFields.add("endTime");
    openapiFields.add("fabricId");
    openapiFields.add("jobStatus");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobQueryParameter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobQueryParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobQueryParameter is not found in the empty JSON string", JobQueryParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobQueryParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobQueryParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affectedObjectTypes") != null && !jsonObj.get("affectedObjectTypes").isJsonNull()) && !jsonObj.get("affectedObjectTypes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affectedObjectTypes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affectedObjectTypes").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("fabricId") != null && !jsonObj.get("fabricId").isJsonNull()) && !jsonObj.get("fabricId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fabricId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fabricId").toString()));
      }
      if ((jsonObj.get("jobStatus") != null && !jsonObj.get("jobStatus").isJsonNull()) && !jsonObj.get("jobStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobStatus").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobQueryParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobQueryParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobQueryParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobQueryParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<JobQueryParameter>() {
           @Override
           public void write(JsonWriter out, JobQueryParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobQueryParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobQueryParameter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobQueryParameter
   * @throws IOException if the JSON string is invalid with respect to JobQueryParameter
   */
  public static JobQueryParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobQueryParameter.class);
  }

  /**
   * Convert an instance of JobQueryParameter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

