/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IP configuration details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPConfig {
  public static final String SERIALIZED_NAME_L_B_BACKEND_ADDRESS_POOL_IDS = "lBBackendAddressPoolIds";
  @SerializedName(SERIALIZED_NAME_L_B_BACKEND_ADDRESS_POOL_IDS)
  private List<String> lBBackendAddressPoolIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_IP_ADDRESS_ID = "publicIpAddressId";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_ADDRESS_ID)
  private String publicIpAddressId;

  public static final String SERIALIZED_NAME_STATIC_I_P_ADDRESS = "staticIPAddress";
  @SerializedName(SERIALIZED_NAME_STATIC_I_P_ADDRESS)
  private String staticIPAddress;

  public IPConfig() {
  }

  public IPConfig lBBackendAddressPoolIds(List<String> lBBackendAddressPoolIds) {
    this.lBBackendAddressPoolIds = lBBackendAddressPoolIds;
    return this;
  }

  public IPConfig addLBBackendAddressPoolIdsItem(String lBBackendAddressPoolIdsItem) {
    if (this.lBBackendAddressPoolIds == null) {
      this.lBBackendAddressPoolIds = new ArrayList<>();
    }
    this.lBBackendAddressPoolIds.add(lBBackendAddressPoolIdsItem);
    return this;
  }

  /**
   * The backend address pools associated with the IP configuration.
   * @return lBBackendAddressPoolIds
   */
  @javax.annotation.Nullable
  public List<String> getlBBackendAddressPoolIds() {
    return lBBackendAddressPoolIds;
  }

  public void setlBBackendAddressPoolIds(List<String> lBBackendAddressPoolIds) {
    this.lBBackendAddressPoolIds = lBBackendAddressPoolIds;
  }


  public IPConfig publicIpAddressId(String publicIpAddressId) {
    this.publicIpAddressId = publicIpAddressId;
    return this;
  }

  /**
   * The Id of the public IP address associated with the IP configuration.
   * @return publicIpAddressId
   */
  @javax.annotation.Nullable
  public String getPublicIpAddressId() {
    return publicIpAddressId;
  }

  public void setPublicIpAddressId(String publicIpAddressId) {
    this.publicIpAddressId = publicIpAddressId;
  }


  public IPConfig staticIPAddress(String staticIPAddress) {
    this.staticIPAddress = staticIPAddress;
    return this;
  }

  /**
   * The static IP address of the IP configuration.
   * @return staticIPAddress
   */
  @javax.annotation.Nullable
  public String getStaticIPAddress() {
    return staticIPAddress;
  }

  public void setStaticIPAddress(String staticIPAddress) {
    this.staticIPAddress = staticIPAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPConfig ipConfig = (IPConfig) o;
    return Objects.equals(this.lBBackendAddressPoolIds, ipConfig.lBBackendAddressPoolIds) &&
        Objects.equals(this.publicIpAddressId, ipConfig.publicIpAddressId) &&
        Objects.equals(this.staticIPAddress, ipConfig.staticIPAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lBBackendAddressPoolIds, publicIpAddressId, staticIPAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPConfig {\n");
    sb.append("    lBBackendAddressPoolIds: ").append(toIndentedString(lBBackendAddressPoolIds)).append("\n");
    sb.append("    publicIpAddressId: ").append(toIndentedString(publicIpAddressId)).append("\n");
    sb.append("    staticIPAddress: ").append(toIndentedString(staticIPAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lBBackendAddressPoolIds");
    openapiFields.add("publicIpAddressId");
    openapiFields.add("staticIPAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPConfig is not found in the empty JSON string", IPConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("lBBackendAddressPoolIds") != null && !jsonObj.get("lBBackendAddressPoolIds").isJsonNull() && !jsonObj.get("lBBackendAddressPoolIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `lBBackendAddressPoolIds` to be an array in the JSON string but got `%s`", jsonObj.get("lBBackendAddressPoolIds").toString()));
      }
      if ((jsonObj.get("publicIpAddressId") != null && !jsonObj.get("publicIpAddressId").isJsonNull()) && !jsonObj.get("publicIpAddressId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIpAddressId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIpAddressId").toString()));
      }
      if ((jsonObj.get("staticIPAddress") != null && !jsonObj.get("staticIPAddress").isJsonNull()) && !jsonObj.get("staticIPAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `staticIPAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("staticIPAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<IPConfig>() {
           @Override
           public void write(JsonWriter out, IPConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPConfig
   * @throws IOException if the JSON string is invalid with respect to IPConfig
   */
  public static IPConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPConfig.class);
  }

  /**
   * Convert an instance of IPConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

