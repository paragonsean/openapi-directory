/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EnableMigrationProviderSpecificInput;
import org.openapitools.client.model.VMwareCbtDiskInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VMwareCbt specific enable migration input.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VMwareCbtEnableMigrationInput extends EnableMigrationProviderSpecificInput {
  public static final String SERIALIZED_NAME_DATA_MOVER_RUN_AS_ACCOUNT_ID = "dataMoverRunAsAccountId";
  @SerializedName(SERIALIZED_NAME_DATA_MOVER_RUN_AS_ACCOUNT_ID)
  private String dataMoverRunAsAccountId;

  public static final String SERIALIZED_NAME_DISKS_TO_INCLUDE = "disksToInclude";
  @SerializedName(SERIALIZED_NAME_DISKS_TO_INCLUDE)
  private List<VMwareCbtDiskInput> disksToInclude = new ArrayList<>();

  /**
   * License type.
   */
  @JsonAdapter(LicenseTypeEnum.Adapter.class)
  public enum LicenseTypeEnum {
    NOT_SPECIFIED("NotSpecified"),
    
    NO_LICENSE_TYPE("NoLicenseType"),
    
    WINDOWS_SERVER("WindowsServer");

    private String value;

    LicenseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LicenseTypeEnum fromValue(String value) {
      for (LicenseTypeEnum b : LicenseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LicenseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LicenseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LicenseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LicenseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LicenseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private LicenseTypeEnum licenseType;

  public static final String SERIALIZED_NAME_SNAPSHOT_RUN_AS_ACCOUNT_ID = "snapshotRunAsAccountId";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_RUN_AS_ACCOUNT_ID)
  private String snapshotRunAsAccountId;

  public static final String SERIALIZED_NAME_TARGET_AVAILABILITY_SET_ID = "targetAvailabilitySetId";
  @SerializedName(SERIALIZED_NAME_TARGET_AVAILABILITY_SET_ID)
  private String targetAvailabilitySetId;

  public static final String SERIALIZED_NAME_TARGET_BOOT_DIAGNOSTICS_STORAGE_ACCOUNT_ID = "targetBootDiagnosticsStorageAccountId";
  @SerializedName(SERIALIZED_NAME_TARGET_BOOT_DIAGNOSTICS_STORAGE_ACCOUNT_ID)
  private String targetBootDiagnosticsStorageAccountId;

  public static final String SERIALIZED_NAME_TARGET_NETWORK_ID = "targetNetworkId";
  @SerializedName(SERIALIZED_NAME_TARGET_NETWORK_ID)
  private String targetNetworkId;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_GROUP_ID = "targetResourceGroupId";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_GROUP_ID)
  private String targetResourceGroupId;

  public static final String SERIALIZED_NAME_TARGET_SUBNET_NAME = "targetSubnetName";
  @SerializedName(SERIALIZED_NAME_TARGET_SUBNET_NAME)
  private String targetSubnetName;

  public static final String SERIALIZED_NAME_TARGET_VM_NAME = "targetVmName";
  @SerializedName(SERIALIZED_NAME_TARGET_VM_NAME)
  private String targetVmName;

  public static final String SERIALIZED_NAME_TARGET_VM_SIZE = "targetVmSize";
  @SerializedName(SERIALIZED_NAME_TARGET_VM_SIZE)
  private String targetVmSize;

  public static final String SERIALIZED_NAME_VMWARE_MACHINE_ID = "vmwareMachineId";
  @SerializedName(SERIALIZED_NAME_VMWARE_MACHINE_ID)
  private String vmwareMachineId;

  public VMwareCbtEnableMigrationInput() {
    this.instanceType = this.getClass().getSimpleName();
  }

  public VMwareCbtEnableMigrationInput dataMoverRunAsAccountId(String dataMoverRunAsAccountId) {
    this.dataMoverRunAsAccountId = dataMoverRunAsAccountId;
    return this;
  }

  /**
   * The data mover RunAs account Id.
   * @return dataMoverRunAsAccountId
   */
  @javax.annotation.Nonnull
  public String getDataMoverRunAsAccountId() {
    return dataMoverRunAsAccountId;
  }

  public void setDataMoverRunAsAccountId(String dataMoverRunAsAccountId) {
    this.dataMoverRunAsAccountId = dataMoverRunAsAccountId;
  }


  public VMwareCbtEnableMigrationInput disksToInclude(List<VMwareCbtDiskInput> disksToInclude) {
    this.disksToInclude = disksToInclude;
    return this;
  }

  public VMwareCbtEnableMigrationInput addDisksToIncludeItem(VMwareCbtDiskInput disksToIncludeItem) {
    if (this.disksToInclude == null) {
      this.disksToInclude = new ArrayList<>();
    }
    this.disksToInclude.add(disksToIncludeItem);
    return this;
  }

  /**
   * The disks to include list.
   * @return disksToInclude
   */
  @javax.annotation.Nonnull
  public List<VMwareCbtDiskInput> getDisksToInclude() {
    return disksToInclude;
  }

  public void setDisksToInclude(List<VMwareCbtDiskInput> disksToInclude) {
    this.disksToInclude = disksToInclude;
  }


  public VMwareCbtEnableMigrationInput licenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * License type.
   * @return licenseType
   */
  @javax.annotation.Nullable
  public LicenseTypeEnum getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(LicenseTypeEnum licenseType) {
    this.licenseType = licenseType;
  }


  public VMwareCbtEnableMigrationInput snapshotRunAsAccountId(String snapshotRunAsAccountId) {
    this.snapshotRunAsAccountId = snapshotRunAsAccountId;
    return this;
  }

  /**
   * The snapshot RunAs account Id.
   * @return snapshotRunAsAccountId
   */
  @javax.annotation.Nonnull
  public String getSnapshotRunAsAccountId() {
    return snapshotRunAsAccountId;
  }

  public void setSnapshotRunAsAccountId(String snapshotRunAsAccountId) {
    this.snapshotRunAsAccountId = snapshotRunAsAccountId;
  }


  public VMwareCbtEnableMigrationInput targetAvailabilitySetId(String targetAvailabilitySetId) {
    this.targetAvailabilitySetId = targetAvailabilitySetId;
    return this;
  }

  /**
   * The target availability set ARM Id.
   * @return targetAvailabilitySetId
   */
  @javax.annotation.Nullable
  public String getTargetAvailabilitySetId() {
    return targetAvailabilitySetId;
  }

  public void setTargetAvailabilitySetId(String targetAvailabilitySetId) {
    this.targetAvailabilitySetId = targetAvailabilitySetId;
  }


  public VMwareCbtEnableMigrationInput targetBootDiagnosticsStorageAccountId(String targetBootDiagnosticsStorageAccountId) {
    this.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
    return this;
  }

  /**
   * The target boot diagnostics storage account ARM Id.
   * @return targetBootDiagnosticsStorageAccountId
   */
  @javax.annotation.Nullable
  public String getTargetBootDiagnosticsStorageAccountId() {
    return targetBootDiagnosticsStorageAccountId;
  }

  public void setTargetBootDiagnosticsStorageAccountId(String targetBootDiagnosticsStorageAccountId) {
    this.targetBootDiagnosticsStorageAccountId = targetBootDiagnosticsStorageAccountId;
  }


  public VMwareCbtEnableMigrationInput targetNetworkId(String targetNetworkId) {
    this.targetNetworkId = targetNetworkId;
    return this;
  }

  /**
   * The target network ARM Id.
   * @return targetNetworkId
   */
  @javax.annotation.Nonnull
  public String getTargetNetworkId() {
    return targetNetworkId;
  }

  public void setTargetNetworkId(String targetNetworkId) {
    this.targetNetworkId = targetNetworkId;
  }


  public VMwareCbtEnableMigrationInput targetResourceGroupId(String targetResourceGroupId) {
    this.targetResourceGroupId = targetResourceGroupId;
    return this;
  }

  /**
   * The target resource group ARM Id.
   * @return targetResourceGroupId
   */
  @javax.annotation.Nonnull
  public String getTargetResourceGroupId() {
    return targetResourceGroupId;
  }

  public void setTargetResourceGroupId(String targetResourceGroupId) {
    this.targetResourceGroupId = targetResourceGroupId;
  }


  public VMwareCbtEnableMigrationInput targetSubnetName(String targetSubnetName) {
    this.targetSubnetName = targetSubnetName;
    return this;
  }

  /**
   * The target subnet name.
   * @return targetSubnetName
   */
  @javax.annotation.Nullable
  public String getTargetSubnetName() {
    return targetSubnetName;
  }

  public void setTargetSubnetName(String targetSubnetName) {
    this.targetSubnetName = targetSubnetName;
  }


  public VMwareCbtEnableMigrationInput targetVmName(String targetVmName) {
    this.targetVmName = targetVmName;
    return this;
  }

  /**
   * The target VM name.
   * @return targetVmName
   */
  @javax.annotation.Nullable
  public String getTargetVmName() {
    return targetVmName;
  }

  public void setTargetVmName(String targetVmName) {
    this.targetVmName = targetVmName;
  }


  public VMwareCbtEnableMigrationInput targetVmSize(String targetVmSize) {
    this.targetVmSize = targetVmSize;
    return this;
  }

  /**
   * The target VM size.
   * @return targetVmSize
   */
  @javax.annotation.Nullable
  public String getTargetVmSize() {
    return targetVmSize;
  }

  public void setTargetVmSize(String targetVmSize) {
    this.targetVmSize = targetVmSize;
  }


  public VMwareCbtEnableMigrationInput vmwareMachineId(String vmwareMachineId) {
    this.vmwareMachineId = vmwareMachineId;
    return this;
  }

  /**
   * The ARM Id of the VM discovered in VMware.
   * @return vmwareMachineId
   */
  @javax.annotation.Nonnull
  public String getVmwareMachineId() {
    return vmwareMachineId;
  }

  public void setVmwareMachineId(String vmwareMachineId) {
    this.vmwareMachineId = vmwareMachineId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VMwareCbtEnableMigrationInput vmwareCbtEnableMigrationInput = (VMwareCbtEnableMigrationInput) o;
    return Objects.equals(this.dataMoverRunAsAccountId, vmwareCbtEnableMigrationInput.dataMoverRunAsAccountId) &&
        Objects.equals(this.disksToInclude, vmwareCbtEnableMigrationInput.disksToInclude) &&
        Objects.equals(this.licenseType, vmwareCbtEnableMigrationInput.licenseType) &&
        Objects.equals(this.snapshotRunAsAccountId, vmwareCbtEnableMigrationInput.snapshotRunAsAccountId) &&
        Objects.equals(this.targetAvailabilitySetId, vmwareCbtEnableMigrationInput.targetAvailabilitySetId) &&
        Objects.equals(this.targetBootDiagnosticsStorageAccountId, vmwareCbtEnableMigrationInput.targetBootDiagnosticsStorageAccountId) &&
        Objects.equals(this.targetNetworkId, vmwareCbtEnableMigrationInput.targetNetworkId) &&
        Objects.equals(this.targetResourceGroupId, vmwareCbtEnableMigrationInput.targetResourceGroupId) &&
        Objects.equals(this.targetSubnetName, vmwareCbtEnableMigrationInput.targetSubnetName) &&
        Objects.equals(this.targetVmName, vmwareCbtEnableMigrationInput.targetVmName) &&
        Objects.equals(this.targetVmSize, vmwareCbtEnableMigrationInput.targetVmSize) &&
        Objects.equals(this.vmwareMachineId, vmwareCbtEnableMigrationInput.vmwareMachineId) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataMoverRunAsAccountId, disksToInclude, licenseType, snapshotRunAsAccountId, targetAvailabilitySetId, targetBootDiagnosticsStorageAccountId, targetNetworkId, targetResourceGroupId, targetSubnetName, targetVmName, targetVmSize, vmwareMachineId, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VMwareCbtEnableMigrationInput {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    dataMoverRunAsAccountId: ").append(toIndentedString(dataMoverRunAsAccountId)).append("\n");
    sb.append("    disksToInclude: ").append(toIndentedString(disksToInclude)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    snapshotRunAsAccountId: ").append(toIndentedString(snapshotRunAsAccountId)).append("\n");
    sb.append("    targetAvailabilitySetId: ").append(toIndentedString(targetAvailabilitySetId)).append("\n");
    sb.append("    targetBootDiagnosticsStorageAccountId: ").append(toIndentedString(targetBootDiagnosticsStorageAccountId)).append("\n");
    sb.append("    targetNetworkId: ").append(toIndentedString(targetNetworkId)).append("\n");
    sb.append("    targetResourceGroupId: ").append(toIndentedString(targetResourceGroupId)).append("\n");
    sb.append("    targetSubnetName: ").append(toIndentedString(targetSubnetName)).append("\n");
    sb.append("    targetVmName: ").append(toIndentedString(targetVmName)).append("\n");
    sb.append("    targetVmSize: ").append(toIndentedString(targetVmSize)).append("\n");
    sb.append("    vmwareMachineId: ").append(toIndentedString(vmwareMachineId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataMoverRunAsAccountId");
    openapiRequiredFields.add("disksToInclude");
    openapiRequiredFields.add("snapshotRunAsAccountId");
    openapiRequiredFields.add("targetNetworkId");
    openapiRequiredFields.add("targetResourceGroupId");
    openapiRequiredFields.add("vmwareMachineId");
    openapiRequiredFields.add("instanceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VMwareCbtEnableMigrationInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VMwareCbtEnableMigrationInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VMwareCbtEnableMigrationInput is not found in the empty JSON string", VMwareCbtEnableMigrationInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VMwareCbtEnableMigrationInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VMwareCbtEnableMigrationInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VMwareCbtEnableMigrationInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VMwareCbtEnableMigrationInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VMwareCbtEnableMigrationInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VMwareCbtEnableMigrationInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VMwareCbtEnableMigrationInput.class));

       return (TypeAdapter<T>) new TypeAdapter<VMwareCbtEnableMigrationInput>() {
           @Override
           public void write(JsonWriter out, VMwareCbtEnableMigrationInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VMwareCbtEnableMigrationInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VMwareCbtEnableMigrationInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VMwareCbtEnableMigrationInput
   * @throws IOException if the JSON string is invalid with respect to VMwareCbtEnableMigrationInput
   */
  public static VMwareCbtEnableMigrationInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VMwareCbtEnableMigrationInput.class);
  }

  /**
   * Convert an instance of VMwareCbtEnableMigrationInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

