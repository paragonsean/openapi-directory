/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EncryptionDetails;
import org.openapitools.client.model.FabricSpecificDetails;
import org.openapitools.client.model.HealthError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fabric properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FabricProperties {
  public static final String SERIALIZED_NAME_BCDR_STATE = "bcdrState";
  @SerializedName(SERIALIZED_NAME_BCDR_STATE)
  private String bcdrState;

  public static final String SERIALIZED_NAME_CUSTOM_DETAILS = "customDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DETAILS)
  private FabricSpecificDetails customDetails;

  public static final String SERIALIZED_NAME_ENCRYPTION_DETAILS = "encryptionDetails";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_DETAILS)
  private EncryptionDetails encryptionDetails;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_HEALTH = "health";
  @SerializedName(SERIALIZED_NAME_HEALTH)
  private String health;

  public static final String SERIALIZED_NAME_HEALTH_ERROR_DETAILS = "healthErrorDetails";
  @SerializedName(SERIALIZED_NAME_HEALTH_ERROR_DETAILS)
  private List<HealthError> healthErrorDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERNAL_IDENTIFIER = "internalIdentifier";
  @SerializedName(SERIALIZED_NAME_INTERNAL_IDENTIFIER)
  private String internalIdentifier;

  public static final String SERIALIZED_NAME_ROLLOVER_ENCRYPTION_DETAILS = "rolloverEncryptionDetails";
  @SerializedName(SERIALIZED_NAME_ROLLOVER_ENCRYPTION_DETAILS)
  private EncryptionDetails rolloverEncryptionDetails;

  public FabricProperties() {
  }

  public FabricProperties bcdrState(String bcdrState) {
    this.bcdrState = bcdrState;
    return this;
  }

  /**
   * BCDR state of the fabric.
   * @return bcdrState
   */
  @javax.annotation.Nullable
  public String getBcdrState() {
    return bcdrState;
  }

  public void setBcdrState(String bcdrState) {
    this.bcdrState = bcdrState;
  }


  public FabricProperties customDetails(FabricSpecificDetails customDetails) {
    this.customDetails = customDetails;
    return this;
  }

  /**
   * Get customDetails
   * @return customDetails
   */
  @javax.annotation.Nullable
  public FabricSpecificDetails getCustomDetails() {
    return customDetails;
  }

  public void setCustomDetails(FabricSpecificDetails customDetails) {
    this.customDetails = customDetails;
  }


  public FabricProperties encryptionDetails(EncryptionDetails encryptionDetails) {
    this.encryptionDetails = encryptionDetails;
    return this;
  }

  /**
   * Get encryptionDetails
   * @return encryptionDetails
   */
  @javax.annotation.Nullable
  public EncryptionDetails getEncryptionDetails() {
    return encryptionDetails;
  }

  public void setEncryptionDetails(EncryptionDetails encryptionDetails) {
    this.encryptionDetails = encryptionDetails;
  }


  public FabricProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * Friendly name of the fabric.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public FabricProperties health(String health) {
    this.health = health;
    return this;
  }

  /**
   * Health of fabric.
   * @return health
   */
  @javax.annotation.Nullable
  public String getHealth() {
    return health;
  }

  public void setHealth(String health) {
    this.health = health;
  }


  public FabricProperties healthErrorDetails(List<HealthError> healthErrorDetails) {
    this.healthErrorDetails = healthErrorDetails;
    return this;
  }

  public FabricProperties addHealthErrorDetailsItem(HealthError healthErrorDetailsItem) {
    if (this.healthErrorDetails == null) {
      this.healthErrorDetails = new ArrayList<>();
    }
    this.healthErrorDetails.add(healthErrorDetailsItem);
    return this;
  }

  /**
   * Fabric health error details.
   * @return healthErrorDetails
   */
  @javax.annotation.Nullable
  public List<HealthError> getHealthErrorDetails() {
    return healthErrorDetails;
  }

  public void setHealthErrorDetails(List<HealthError> healthErrorDetails) {
    this.healthErrorDetails = healthErrorDetails;
  }


  public FabricProperties internalIdentifier(String internalIdentifier) {
    this.internalIdentifier = internalIdentifier;
    return this;
  }

  /**
   * Dra Registration Id.
   * @return internalIdentifier
   */
  @javax.annotation.Nullable
  public String getInternalIdentifier() {
    return internalIdentifier;
  }

  public void setInternalIdentifier(String internalIdentifier) {
    this.internalIdentifier = internalIdentifier;
  }


  public FabricProperties rolloverEncryptionDetails(EncryptionDetails rolloverEncryptionDetails) {
    this.rolloverEncryptionDetails = rolloverEncryptionDetails;
    return this;
  }

  /**
   * Get rolloverEncryptionDetails
   * @return rolloverEncryptionDetails
   */
  @javax.annotation.Nullable
  public EncryptionDetails getRolloverEncryptionDetails() {
    return rolloverEncryptionDetails;
  }

  public void setRolloverEncryptionDetails(EncryptionDetails rolloverEncryptionDetails) {
    this.rolloverEncryptionDetails = rolloverEncryptionDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FabricProperties fabricProperties = (FabricProperties) o;
    return Objects.equals(this.bcdrState, fabricProperties.bcdrState) &&
        Objects.equals(this.customDetails, fabricProperties.customDetails) &&
        Objects.equals(this.encryptionDetails, fabricProperties.encryptionDetails) &&
        Objects.equals(this.friendlyName, fabricProperties.friendlyName) &&
        Objects.equals(this.health, fabricProperties.health) &&
        Objects.equals(this.healthErrorDetails, fabricProperties.healthErrorDetails) &&
        Objects.equals(this.internalIdentifier, fabricProperties.internalIdentifier) &&
        Objects.equals(this.rolloverEncryptionDetails, fabricProperties.rolloverEncryptionDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bcdrState, customDetails, encryptionDetails, friendlyName, health, healthErrorDetails, internalIdentifier, rolloverEncryptionDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FabricProperties {\n");
    sb.append("    bcdrState: ").append(toIndentedString(bcdrState)).append("\n");
    sb.append("    customDetails: ").append(toIndentedString(customDetails)).append("\n");
    sb.append("    encryptionDetails: ").append(toIndentedString(encryptionDetails)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    health: ").append(toIndentedString(health)).append("\n");
    sb.append("    healthErrorDetails: ").append(toIndentedString(healthErrorDetails)).append("\n");
    sb.append("    internalIdentifier: ").append(toIndentedString(internalIdentifier)).append("\n");
    sb.append("    rolloverEncryptionDetails: ").append(toIndentedString(rolloverEncryptionDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bcdrState");
    openapiFields.add("customDetails");
    openapiFields.add("encryptionDetails");
    openapiFields.add("friendlyName");
    openapiFields.add("health");
    openapiFields.add("healthErrorDetails");
    openapiFields.add("internalIdentifier");
    openapiFields.add("rolloverEncryptionDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FabricProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FabricProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FabricProperties is not found in the empty JSON string", FabricProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FabricProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FabricProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bcdrState") != null && !jsonObj.get("bcdrState").isJsonNull()) && !jsonObj.get("bcdrState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bcdrState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bcdrState").toString()));
      }
      // validate the optional field `customDetails`
      if (jsonObj.get("customDetails") != null && !jsonObj.get("customDetails").isJsonNull()) {
        FabricSpecificDetails.validateJsonElement(jsonObj.get("customDetails"));
      }
      // validate the optional field `encryptionDetails`
      if (jsonObj.get("encryptionDetails") != null && !jsonObj.get("encryptionDetails").isJsonNull()) {
        EncryptionDetails.validateJsonElement(jsonObj.get("encryptionDetails"));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("health") != null && !jsonObj.get("health").isJsonNull()) && !jsonObj.get("health").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `health` to be a primitive type in the JSON string but got `%s`", jsonObj.get("health").toString()));
      }
      if (jsonObj.get("healthErrorDetails") != null && !jsonObj.get("healthErrorDetails").isJsonNull()) {
        JsonArray jsonArrayhealthErrorDetails = jsonObj.getAsJsonArray("healthErrorDetails");
        if (jsonArrayhealthErrorDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthErrorDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthErrorDetails` to be an array in the JSON string but got `%s`", jsonObj.get("healthErrorDetails").toString()));
          }

          // validate the optional field `healthErrorDetails` (array)
          for (int i = 0; i < jsonArrayhealthErrorDetails.size(); i++) {
            HealthError.validateJsonElement(jsonArrayhealthErrorDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("internalIdentifier") != null && !jsonObj.get("internalIdentifier").isJsonNull()) && !jsonObj.get("internalIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalIdentifier").toString()));
      }
      // validate the optional field `rolloverEncryptionDetails`
      if (jsonObj.get("rolloverEncryptionDetails") != null && !jsonObj.get("rolloverEncryptionDetails").isJsonNull()) {
        EncryptionDetails.validateJsonElement(jsonObj.get("rolloverEncryptionDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FabricProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FabricProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FabricProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FabricProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<FabricProperties>() {
           @Override
           public void write(JsonWriter out, FabricProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FabricProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FabricProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FabricProperties
   * @throws IOException if the JSON string is invalid with respect to FabricProperties
   */
  public static FabricProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FabricProperties.class);
  }

  /**
   * Convert an instance of FabricProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

