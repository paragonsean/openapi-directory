/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReplicationProviderSpecificContainerMappingInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configure pairing input properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateProtectionContainerMappingInputProperties {
  public static final String SERIALIZED_NAME_POLICY_ID = "policyId";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  private String policyId;

  public static final String SERIALIZED_NAME_PROVIDER_SPECIFIC_INPUT = "providerSpecificInput";
  @SerializedName(SERIALIZED_NAME_PROVIDER_SPECIFIC_INPUT)
  private ReplicationProviderSpecificContainerMappingInput providerSpecificInput;

  public static final String SERIALIZED_NAME_TARGET_PROTECTION_CONTAINER_ID = "targetProtectionContainerId";
  @SerializedName(SERIALIZED_NAME_TARGET_PROTECTION_CONTAINER_ID)
  private String targetProtectionContainerId;

  public CreateProtectionContainerMappingInputProperties() {
  }

  public CreateProtectionContainerMappingInputProperties policyId(String policyId) {
    this.policyId = policyId;
    return this;
  }

  /**
   * Applicable policy.
   * @return policyId
   */
  @javax.annotation.Nullable
  public String getPolicyId() {
    return policyId;
  }

  public void setPolicyId(String policyId) {
    this.policyId = policyId;
  }


  public CreateProtectionContainerMappingInputProperties providerSpecificInput(ReplicationProviderSpecificContainerMappingInput providerSpecificInput) {
    this.providerSpecificInput = providerSpecificInput;
    return this;
  }

  /**
   * Get providerSpecificInput
   * @return providerSpecificInput
   */
  @javax.annotation.Nullable
  public ReplicationProviderSpecificContainerMappingInput getProviderSpecificInput() {
    return providerSpecificInput;
  }

  public void setProviderSpecificInput(ReplicationProviderSpecificContainerMappingInput providerSpecificInput) {
    this.providerSpecificInput = providerSpecificInput;
  }


  public CreateProtectionContainerMappingInputProperties targetProtectionContainerId(String targetProtectionContainerId) {
    this.targetProtectionContainerId = targetProtectionContainerId;
    return this;
  }

  /**
   * The target unique protection container name.
   * @return targetProtectionContainerId
   */
  @javax.annotation.Nullable
  public String getTargetProtectionContainerId() {
    return targetProtectionContainerId;
  }

  public void setTargetProtectionContainerId(String targetProtectionContainerId) {
    this.targetProtectionContainerId = targetProtectionContainerId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProtectionContainerMappingInputProperties createProtectionContainerMappingInputProperties = (CreateProtectionContainerMappingInputProperties) o;
    return Objects.equals(this.policyId, createProtectionContainerMappingInputProperties.policyId) &&
        Objects.equals(this.providerSpecificInput, createProtectionContainerMappingInputProperties.providerSpecificInput) &&
        Objects.equals(this.targetProtectionContainerId, createProtectionContainerMappingInputProperties.targetProtectionContainerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(policyId, providerSpecificInput, targetProtectionContainerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProtectionContainerMappingInputProperties {\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    providerSpecificInput: ").append(toIndentedString(providerSpecificInput)).append("\n");
    sb.append("    targetProtectionContainerId: ").append(toIndentedString(targetProtectionContainerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("policyId");
    openapiFields.add("providerSpecificInput");
    openapiFields.add("targetProtectionContainerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateProtectionContainerMappingInputProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateProtectionContainerMappingInputProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateProtectionContainerMappingInputProperties is not found in the empty JSON string", CreateProtectionContainerMappingInputProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateProtectionContainerMappingInputProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateProtectionContainerMappingInputProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("policyId") != null && !jsonObj.get("policyId").isJsonNull()) && !jsonObj.get("policyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyId").toString()));
      }
      // validate the optional field `providerSpecificInput`
      if (jsonObj.get("providerSpecificInput") != null && !jsonObj.get("providerSpecificInput").isJsonNull()) {
        ReplicationProviderSpecificContainerMappingInput.validateJsonElement(jsonObj.get("providerSpecificInput"));
      }
      if ((jsonObj.get("targetProtectionContainerId") != null && !jsonObj.get("targetProtectionContainerId").isJsonNull()) && !jsonObj.get("targetProtectionContainerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetProtectionContainerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetProtectionContainerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateProtectionContainerMappingInputProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateProtectionContainerMappingInputProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateProtectionContainerMappingInputProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateProtectionContainerMappingInputProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateProtectionContainerMappingInputProperties>() {
           @Override
           public void write(JsonWriter out, CreateProtectionContainerMappingInputProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateProtectionContainerMappingInputProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateProtectionContainerMappingInputProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateProtectionContainerMappingInputProperties
   * @throws IOException if the JSON string is invalid with respect to CreateProtectionContainerMappingInputProperties
   */
  public static CreateProtectionContainerMappingInputProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateProtectionContainerMappingInputProperties.class);
  }

  /**
   * Convert an instance of CreateProtectionContainerMappingInputProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

