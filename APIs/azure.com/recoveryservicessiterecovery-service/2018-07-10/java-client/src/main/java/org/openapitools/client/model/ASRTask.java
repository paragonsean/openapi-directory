/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GroupTaskDetails;
import org.openapitools.client.model.JobErrorDetails;
import org.openapitools.client.model.TaskTypeDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Task of the Job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ASRTask {
  public static final String SERIALIZED_NAME_ALLOWED_ACTIONS = "allowedActions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ACTIONS)
  private List<String> allowedActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_DETAILS = "customDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DETAILS)
  private TaskTypeDetails customDetails;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<JobErrorDetails> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_GROUP_TASK_CUSTOM_DETAILS = "groupTaskCustomDetails";
  @SerializedName(SERIALIZED_NAME_GROUP_TASK_CUSTOM_DETAILS)
  private GroupTaskDetails groupTaskCustomDetails;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATE_DESCRIPTION = "stateDescription";
  @SerializedName(SERIALIZED_NAME_STATE_DESCRIPTION)
  private String stateDescription;

  public static final String SERIALIZED_NAME_TASK_ID = "taskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_TASK_TYPE = "taskType";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private String taskType;

  public ASRTask() {
  }

  public ASRTask allowedActions(List<String> allowedActions) {
    this.allowedActions = allowedActions;
    return this;
  }

  public ASRTask addAllowedActionsItem(String allowedActionsItem) {
    if (this.allowedActions == null) {
      this.allowedActions = new ArrayList<>();
    }
    this.allowedActions.add(allowedActionsItem);
    return this;
  }

  /**
   * The state/actions applicable on this task.
   * @return allowedActions
   */
  @javax.annotation.Nullable
  public List<String> getAllowedActions() {
    return allowedActions;
  }

  public void setAllowedActions(List<String> allowedActions) {
    this.allowedActions = allowedActions;
  }


  public ASRTask customDetails(TaskTypeDetails customDetails) {
    this.customDetails = customDetails;
    return this;
  }

  /**
   * Get customDetails
   * @return customDetails
   */
  @javax.annotation.Nullable
  public TaskTypeDetails getCustomDetails() {
    return customDetails;
  }

  public void setCustomDetails(TaskTypeDetails customDetails) {
    this.customDetails = customDetails;
  }


  public ASRTask endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ASRTask errors(List<JobErrorDetails> errors) {
    this.errors = errors;
    return this;
  }

  public ASRTask addErrorsItem(JobErrorDetails errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * The task error details.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<JobErrorDetails> getErrors() {
    return errors;
  }

  public void setErrors(List<JobErrorDetails> errors) {
    this.errors = errors;
  }


  public ASRTask friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The name.
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public ASRTask groupTaskCustomDetails(GroupTaskDetails groupTaskCustomDetails) {
    this.groupTaskCustomDetails = groupTaskCustomDetails;
    return this;
  }

  /**
   * Get groupTaskCustomDetails
   * @return groupTaskCustomDetails
   */
  @javax.annotation.Nullable
  public GroupTaskDetails getGroupTaskCustomDetails() {
    return groupTaskCustomDetails;
  }

  public void setGroupTaskCustomDetails(GroupTaskDetails groupTaskCustomDetails) {
    this.groupTaskCustomDetails = groupTaskCustomDetails;
  }


  public ASRTask name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique Task name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ASRTask startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ASRTask state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The State. It is one of these values - NotStarted, InProgress, Succeeded, Failed, Cancelled, Suspended or Other.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public ASRTask stateDescription(String stateDescription) {
    this.stateDescription = stateDescription;
    return this;
  }

  /**
   * The description of the task state. For example - For Succeeded state, description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped.
   * @return stateDescription
   */
  @javax.annotation.Nullable
  public String getStateDescription() {
    return stateDescription;
  }

  public void setStateDescription(String stateDescription) {
    this.stateDescription = stateDescription;
  }


  public ASRTask taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * The Id.
   * @return taskId
   */
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public ASRTask taskType(String taskType) {
    this.taskType = taskType;
    return this;
  }

  /**
   * The type of task. Details in CustomDetails property depend on this type.
   * @return taskType
   */
  @javax.annotation.Nullable
  public String getTaskType() {
    return taskType;
  }

  public void setTaskType(String taskType) {
    this.taskType = taskType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ASRTask asRTask = (ASRTask) o;
    return Objects.equals(this.allowedActions, asRTask.allowedActions) &&
        Objects.equals(this.customDetails, asRTask.customDetails) &&
        Objects.equals(this.endTime, asRTask.endTime) &&
        Objects.equals(this.errors, asRTask.errors) &&
        Objects.equals(this.friendlyName, asRTask.friendlyName) &&
        Objects.equals(this.groupTaskCustomDetails, asRTask.groupTaskCustomDetails) &&
        Objects.equals(this.name, asRTask.name) &&
        Objects.equals(this.startTime, asRTask.startTime) &&
        Objects.equals(this.state, asRTask.state) &&
        Objects.equals(this.stateDescription, asRTask.stateDescription) &&
        Objects.equals(this.taskId, asRTask.taskId) &&
        Objects.equals(this.taskType, asRTask.taskType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedActions, customDetails, endTime, errors, friendlyName, groupTaskCustomDetails, name, startTime, state, stateDescription, taskId, taskType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ASRTask {\n");
    sb.append("    allowedActions: ").append(toIndentedString(allowedActions)).append("\n");
    sb.append("    customDetails: ").append(toIndentedString(customDetails)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    groupTaskCustomDetails: ").append(toIndentedString(groupTaskCustomDetails)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateDescription: ").append(toIndentedString(stateDescription)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedActions");
    openapiFields.add("customDetails");
    openapiFields.add("endTime");
    openapiFields.add("errors");
    openapiFields.add("friendlyName");
    openapiFields.add("groupTaskCustomDetails");
    openapiFields.add("name");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("stateDescription");
    openapiFields.add("taskId");
    openapiFields.add("taskType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ASRTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ASRTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ASRTask is not found in the empty JSON string", ASRTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ASRTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ASRTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedActions") != null && !jsonObj.get("allowedActions").isJsonNull() && !jsonObj.get("allowedActions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedActions` to be an array in the JSON string but got `%s`", jsonObj.get("allowedActions").toString()));
      }
      // validate the optional field `customDetails`
      if (jsonObj.get("customDetails") != null && !jsonObj.get("customDetails").isJsonNull()) {
        TaskTypeDetails.validateJsonElement(jsonObj.get("customDetails"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            JobErrorDetails.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      // validate the optional field `groupTaskCustomDetails`
      if (jsonObj.get("groupTaskCustomDetails") != null && !jsonObj.get("groupTaskCustomDetails").isJsonNull()) {
        GroupTaskDetails.validateJsonElement(jsonObj.get("groupTaskCustomDetails"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("stateDescription") != null && !jsonObj.get("stateDescription").isJsonNull()) && !jsonObj.get("stateDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateDescription").toString()));
      }
      if ((jsonObj.get("taskId") != null && !jsonObj.get("taskId").isJsonNull()) && !jsonObj.get("taskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskId").toString()));
      }
      if ((jsonObj.get("taskType") != null && !jsonObj.get("taskType").isJsonNull()) && !jsonObj.get("taskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taskType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ASRTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ASRTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ASRTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ASRTask.class));

       return (TypeAdapter<T>) new TypeAdapter<ASRTask>() {
           @Override
           public void write(JsonWriter out, ASRTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ASRTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ASRTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ASRTask
   * @throws IOException if the JSON string is invalid with respect to ASRTask
   */
  public static ASRTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ASRTask.class);
  }

  /**
   * Convert an instance of ASRTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

