/*
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the Failover Process Server request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:14:43.351731-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FailoverProcessServerRequestProperties {
  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_SOURCE_PROCESS_SERVER_ID = "sourceProcessServerId";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROCESS_SERVER_ID)
  private String sourceProcessServerId;

  public static final String SERIALIZED_NAME_TARGET_PROCESS_SERVER_ID = "targetProcessServerId";
  @SerializedName(SERIALIZED_NAME_TARGET_PROCESS_SERVER_ID)
  private String targetProcessServerId;

  public static final String SERIALIZED_NAME_UPDATE_TYPE = "updateType";
  @SerializedName(SERIALIZED_NAME_UPDATE_TYPE)
  private String updateType;

  public static final String SERIALIZED_NAME_VMS_TO_MIGRATE = "vmsToMigrate";
  @SerializedName(SERIALIZED_NAME_VMS_TO_MIGRATE)
  private List<String> vmsToMigrate = new ArrayList<>();

  public FailoverProcessServerRequestProperties() {
  }

  public FailoverProcessServerRequestProperties containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * The container identifier.
   * @return containerName
   */
  @javax.annotation.Nullable
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public FailoverProcessServerRequestProperties sourceProcessServerId(String sourceProcessServerId) {
    this.sourceProcessServerId = sourceProcessServerId;
    return this;
  }

  /**
   * The source process server.
   * @return sourceProcessServerId
   */
  @javax.annotation.Nullable
  public String getSourceProcessServerId() {
    return sourceProcessServerId;
  }

  public void setSourceProcessServerId(String sourceProcessServerId) {
    this.sourceProcessServerId = sourceProcessServerId;
  }


  public FailoverProcessServerRequestProperties targetProcessServerId(String targetProcessServerId) {
    this.targetProcessServerId = targetProcessServerId;
    return this;
  }

  /**
   * The new process server.
   * @return targetProcessServerId
   */
  @javax.annotation.Nullable
  public String getTargetProcessServerId() {
    return targetProcessServerId;
  }

  public void setTargetProcessServerId(String targetProcessServerId) {
    this.targetProcessServerId = targetProcessServerId;
  }


  public FailoverProcessServerRequestProperties updateType(String updateType) {
    this.updateType = updateType;
    return this;
  }

  /**
   * A value for failover type. It can be systemlevel/serverlevel
   * @return updateType
   */
  @javax.annotation.Nullable
  public String getUpdateType() {
    return updateType;
  }

  public void setUpdateType(String updateType) {
    this.updateType = updateType;
  }


  public FailoverProcessServerRequestProperties vmsToMigrate(List<String> vmsToMigrate) {
    this.vmsToMigrate = vmsToMigrate;
    return this;
  }

  public FailoverProcessServerRequestProperties addVmsToMigrateItem(String vmsToMigrateItem) {
    if (this.vmsToMigrate == null) {
      this.vmsToMigrate = new ArrayList<>();
    }
    this.vmsToMigrate.add(vmsToMigrateItem);
    return this;
  }

  /**
   * The VMS to migrate.
   * @return vmsToMigrate
   */
  @javax.annotation.Nullable
  public List<String> getVmsToMigrate() {
    return vmsToMigrate;
  }

  public void setVmsToMigrate(List<String> vmsToMigrate) {
    this.vmsToMigrate = vmsToMigrate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailoverProcessServerRequestProperties failoverProcessServerRequestProperties = (FailoverProcessServerRequestProperties) o;
    return Objects.equals(this.containerName, failoverProcessServerRequestProperties.containerName) &&
        Objects.equals(this.sourceProcessServerId, failoverProcessServerRequestProperties.sourceProcessServerId) &&
        Objects.equals(this.targetProcessServerId, failoverProcessServerRequestProperties.targetProcessServerId) &&
        Objects.equals(this.updateType, failoverProcessServerRequestProperties.updateType) &&
        Objects.equals(this.vmsToMigrate, failoverProcessServerRequestProperties.vmsToMigrate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerName, sourceProcessServerId, targetProcessServerId, updateType, vmsToMigrate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailoverProcessServerRequestProperties {\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    sourceProcessServerId: ").append(toIndentedString(sourceProcessServerId)).append("\n");
    sb.append("    targetProcessServerId: ").append(toIndentedString(targetProcessServerId)).append("\n");
    sb.append("    updateType: ").append(toIndentedString(updateType)).append("\n");
    sb.append("    vmsToMigrate: ").append(toIndentedString(vmsToMigrate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerName");
    openapiFields.add("sourceProcessServerId");
    openapiFields.add("targetProcessServerId");
    openapiFields.add("updateType");
    openapiFields.add("vmsToMigrate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FailoverProcessServerRequestProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FailoverProcessServerRequestProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FailoverProcessServerRequestProperties is not found in the empty JSON string", FailoverProcessServerRequestProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FailoverProcessServerRequestProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FailoverProcessServerRequestProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("containerName") != null && !jsonObj.get("containerName").isJsonNull()) && !jsonObj.get("containerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerName").toString()));
      }
      if ((jsonObj.get("sourceProcessServerId") != null && !jsonObj.get("sourceProcessServerId").isJsonNull()) && !jsonObj.get("sourceProcessServerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceProcessServerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceProcessServerId").toString()));
      }
      if ((jsonObj.get("targetProcessServerId") != null && !jsonObj.get("targetProcessServerId").isJsonNull()) && !jsonObj.get("targetProcessServerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetProcessServerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetProcessServerId").toString()));
      }
      if ((jsonObj.get("updateType") != null && !jsonObj.get("updateType").isJsonNull()) && !jsonObj.get("updateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vmsToMigrate") != null && !jsonObj.get("vmsToMigrate").isJsonNull() && !jsonObj.get("vmsToMigrate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmsToMigrate` to be an array in the JSON string but got `%s`", jsonObj.get("vmsToMigrate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FailoverProcessServerRequestProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FailoverProcessServerRequestProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FailoverProcessServerRequestProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FailoverProcessServerRequestProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<FailoverProcessServerRequestProperties>() {
           @Override
           public void write(JsonWriter out, FailoverProcessServerRequestProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FailoverProcessServerRequestProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FailoverProcessServerRequestProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FailoverProcessServerRequestProperties
   * @throws IOException if the JSON string is invalid with respect to FailoverProcessServerRequestProperties
   */
  public static FailoverProcessServerRequestProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FailoverProcessServerRequestProperties.class);
  }

  /**
   * Convert an instance of FailoverProcessServerRequestProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

