/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVaultHealthProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVaultHealthProperties::OAIVaultHealthProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVaultHealthProperties::OAIVaultHealthProperties() {
    this->initializeModel();
}

OAIVaultHealthProperties::~OAIVaultHealthProperties() {}

void OAIVaultHealthProperties::initializeModel() {

    m_containers_health_isSet = false;
    m_containers_health_isValid = false;

    m_fabrics_health_isSet = false;
    m_fabrics_health_isValid = false;

    m_protected_items_health_isSet = false;
    m_protected_items_health_isValid = false;

    m_vault_errors_isSet = false;
    m_vault_errors_isValid = false;
}

void OAIVaultHealthProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVaultHealthProperties::fromJsonObject(QJsonObject json) {

    m_containers_health_isValid = ::OpenAPI::fromJsonValue(m_containers_health, json[QString("containersHealth")]);
    m_containers_health_isSet = !json[QString("containersHealth")].isNull() && m_containers_health_isValid;

    m_fabrics_health_isValid = ::OpenAPI::fromJsonValue(m_fabrics_health, json[QString("fabricsHealth")]);
    m_fabrics_health_isSet = !json[QString("fabricsHealth")].isNull() && m_fabrics_health_isValid;

    m_protected_items_health_isValid = ::OpenAPI::fromJsonValue(m_protected_items_health, json[QString("protectedItemsHealth")]);
    m_protected_items_health_isSet = !json[QString("protectedItemsHealth")].isNull() && m_protected_items_health_isValid;

    m_vault_errors_isValid = ::OpenAPI::fromJsonValue(m_vault_errors, json[QString("vaultErrors")]);
    m_vault_errors_isSet = !json[QString("vaultErrors")].isNull() && m_vault_errors_isValid;
}

QString OAIVaultHealthProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVaultHealthProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_containers_health.isSet()) {
        obj.insert(QString("containersHealth"), ::OpenAPI::toJsonValue(m_containers_health));
    }
    if (m_fabrics_health.isSet()) {
        obj.insert(QString("fabricsHealth"), ::OpenAPI::toJsonValue(m_fabrics_health));
    }
    if (m_protected_items_health.isSet()) {
        obj.insert(QString("protectedItemsHealth"), ::OpenAPI::toJsonValue(m_protected_items_health));
    }
    if (m_vault_errors.size() > 0) {
        obj.insert(QString("vaultErrors"), ::OpenAPI::toJsonValue(m_vault_errors));
    }
    return obj;
}

OAIResourceHealthSummary OAIVaultHealthProperties::getContainersHealth() const {
    return m_containers_health;
}
void OAIVaultHealthProperties::setContainersHealth(const OAIResourceHealthSummary &containers_health) {
    m_containers_health = containers_health;
    m_containers_health_isSet = true;
}

bool OAIVaultHealthProperties::is_containers_health_Set() const{
    return m_containers_health_isSet;
}

bool OAIVaultHealthProperties::is_containers_health_Valid() const{
    return m_containers_health_isValid;
}

OAIResourceHealthSummary OAIVaultHealthProperties::getFabricsHealth() const {
    return m_fabrics_health;
}
void OAIVaultHealthProperties::setFabricsHealth(const OAIResourceHealthSummary &fabrics_health) {
    m_fabrics_health = fabrics_health;
    m_fabrics_health_isSet = true;
}

bool OAIVaultHealthProperties::is_fabrics_health_Set() const{
    return m_fabrics_health_isSet;
}

bool OAIVaultHealthProperties::is_fabrics_health_Valid() const{
    return m_fabrics_health_isValid;
}

OAIResourceHealthSummary OAIVaultHealthProperties::getProtectedItemsHealth() const {
    return m_protected_items_health;
}
void OAIVaultHealthProperties::setProtectedItemsHealth(const OAIResourceHealthSummary &protected_items_health) {
    m_protected_items_health = protected_items_health;
    m_protected_items_health_isSet = true;
}

bool OAIVaultHealthProperties::is_protected_items_health_Set() const{
    return m_protected_items_health_isSet;
}

bool OAIVaultHealthProperties::is_protected_items_health_Valid() const{
    return m_protected_items_health_isValid;
}

QList<OAIHealthError> OAIVaultHealthProperties::getVaultErrors() const {
    return m_vault_errors;
}
void OAIVaultHealthProperties::setVaultErrors(const QList<OAIHealthError> &vault_errors) {
    m_vault_errors = vault_errors;
    m_vault_errors_isSet = true;
}

bool OAIVaultHealthProperties::is_vault_errors_Set() const{
    return m_vault_errors_isSet;
}

bool OAIVaultHealthProperties::is_vault_errors_Valid() const{
    return m_vault_errors_isValid;
}

bool OAIVaultHealthProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_containers_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabrics_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_items_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVaultHealthProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
