/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateReplicationProtectedItemInputProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateReplicationProtectedItemInputProperties::OAIUpdateReplicationProtectedItemInputProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateReplicationProtectedItemInputProperties::OAIUpdateReplicationProtectedItemInputProperties() {
    this->initializeModel();
}

OAIUpdateReplicationProtectedItemInputProperties::~OAIUpdateReplicationProtectedItemInputProperties() {}

void OAIUpdateReplicationProtectedItemInputProperties::initializeModel() {

    m_enable_rdp_on_target_option_isSet = false;
    m_enable_rdp_on_target_option_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_provider_specific_details_isSet = false;
    m_provider_specific_details_isValid = false;

    m_recovery_availability_set_id_isSet = false;
    m_recovery_availability_set_id_isValid = false;

    m_recovery_azure_vm_name_isSet = false;
    m_recovery_azure_vm_name_isValid = false;

    m_recovery_azure_vm_size_isSet = false;
    m_recovery_azure_vm_size_isValid = false;

    m_selected_recovery_azure_network_id_isSet = false;
    m_selected_recovery_azure_network_id_isValid = false;

    m_selected_source_nic_id_isSet = false;
    m_selected_source_nic_id_isValid = false;

    m_selected_tfo_azure_network_id_isSet = false;
    m_selected_tfo_azure_network_id_isValid = false;

    m_vm_nics_isSet = false;
    m_vm_nics_isValid = false;
}

void OAIUpdateReplicationProtectedItemInputProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateReplicationProtectedItemInputProperties::fromJsonObject(QJsonObject json) {

    m_enable_rdp_on_target_option_isValid = ::OpenAPI::fromJsonValue(m_enable_rdp_on_target_option, json[QString("enableRdpOnTargetOption")]);
    m_enable_rdp_on_target_option_isSet = !json[QString("enableRdpOnTargetOption")].isNull() && m_enable_rdp_on_target_option_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_provider_specific_details_isValid = ::OpenAPI::fromJsonValue(m_provider_specific_details, json[QString("providerSpecificDetails")]);
    m_provider_specific_details_isSet = !json[QString("providerSpecificDetails")].isNull() && m_provider_specific_details_isValid;

    m_recovery_availability_set_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_availability_set_id, json[QString("recoveryAvailabilitySetId")]);
    m_recovery_availability_set_id_isSet = !json[QString("recoveryAvailabilitySetId")].isNull() && m_recovery_availability_set_id_isValid;

    m_recovery_azure_vm_name_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_vm_name, json[QString("recoveryAzureVMName")]);
    m_recovery_azure_vm_name_isSet = !json[QString("recoveryAzureVMName")].isNull() && m_recovery_azure_vm_name_isValid;

    m_recovery_azure_vm_size_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_vm_size, json[QString("recoveryAzureVMSize")]);
    m_recovery_azure_vm_size_isSet = !json[QString("recoveryAzureVMSize")].isNull() && m_recovery_azure_vm_size_isValid;

    m_selected_recovery_azure_network_id_isValid = ::OpenAPI::fromJsonValue(m_selected_recovery_azure_network_id, json[QString("selectedRecoveryAzureNetworkId")]);
    m_selected_recovery_azure_network_id_isSet = !json[QString("selectedRecoveryAzureNetworkId")].isNull() && m_selected_recovery_azure_network_id_isValid;

    m_selected_source_nic_id_isValid = ::OpenAPI::fromJsonValue(m_selected_source_nic_id, json[QString("selectedSourceNicId")]);
    m_selected_source_nic_id_isSet = !json[QString("selectedSourceNicId")].isNull() && m_selected_source_nic_id_isValid;

    m_selected_tfo_azure_network_id_isValid = ::OpenAPI::fromJsonValue(m_selected_tfo_azure_network_id, json[QString("selectedTfoAzureNetworkId")]);
    m_selected_tfo_azure_network_id_isSet = !json[QString("selectedTfoAzureNetworkId")].isNull() && m_selected_tfo_azure_network_id_isValid;

    m_vm_nics_isValid = ::OpenAPI::fromJsonValue(m_vm_nics, json[QString("vmNics")]);
    m_vm_nics_isSet = !json[QString("vmNics")].isNull() && m_vm_nics_isValid;
}

QString OAIUpdateReplicationProtectedItemInputProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateReplicationProtectedItemInputProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_rdp_on_target_option_isSet) {
        obj.insert(QString("enableRdpOnTargetOption"), ::OpenAPI::toJsonValue(m_enable_rdp_on_target_option));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_provider_specific_details.isSet()) {
        obj.insert(QString("providerSpecificDetails"), ::OpenAPI::toJsonValue(m_provider_specific_details));
    }
    if (m_recovery_availability_set_id_isSet) {
        obj.insert(QString("recoveryAvailabilitySetId"), ::OpenAPI::toJsonValue(m_recovery_availability_set_id));
    }
    if (m_recovery_azure_vm_name_isSet) {
        obj.insert(QString("recoveryAzureVMName"), ::OpenAPI::toJsonValue(m_recovery_azure_vm_name));
    }
    if (m_recovery_azure_vm_size_isSet) {
        obj.insert(QString("recoveryAzureVMSize"), ::OpenAPI::toJsonValue(m_recovery_azure_vm_size));
    }
    if (m_selected_recovery_azure_network_id_isSet) {
        obj.insert(QString("selectedRecoveryAzureNetworkId"), ::OpenAPI::toJsonValue(m_selected_recovery_azure_network_id));
    }
    if (m_selected_source_nic_id_isSet) {
        obj.insert(QString("selectedSourceNicId"), ::OpenAPI::toJsonValue(m_selected_source_nic_id));
    }
    if (m_selected_tfo_azure_network_id_isSet) {
        obj.insert(QString("selectedTfoAzureNetworkId"), ::OpenAPI::toJsonValue(m_selected_tfo_azure_network_id));
    }
    if (m_vm_nics.size() > 0) {
        obj.insert(QString("vmNics"), ::OpenAPI::toJsonValue(m_vm_nics));
    }
    return obj;
}

QString OAIUpdateReplicationProtectedItemInputProperties::getEnableRdpOnTargetOption() const {
    return m_enable_rdp_on_target_option;
}
void OAIUpdateReplicationProtectedItemInputProperties::setEnableRdpOnTargetOption(const QString &enable_rdp_on_target_option) {
    m_enable_rdp_on_target_option = enable_rdp_on_target_option;
    m_enable_rdp_on_target_option_isSet = true;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_enable_rdp_on_target_option_Set() const{
    return m_enable_rdp_on_target_option_isSet;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_enable_rdp_on_target_option_Valid() const{
    return m_enable_rdp_on_target_option_isValid;
}

QString OAIUpdateReplicationProtectedItemInputProperties::getLicenseType() const {
    return m_license_type;
}
void OAIUpdateReplicationProtectedItemInputProperties::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_license_type_Valid() const{
    return m_license_type_isValid;
}

OAIUpdateReplicationProtectedItemProviderInput OAIUpdateReplicationProtectedItemInputProperties::getProviderSpecificDetails() const {
    return m_provider_specific_details;
}
void OAIUpdateReplicationProtectedItemInputProperties::setProviderSpecificDetails(const OAIUpdateReplicationProtectedItemProviderInput &provider_specific_details) {
    m_provider_specific_details = provider_specific_details;
    m_provider_specific_details_isSet = true;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_provider_specific_details_Set() const{
    return m_provider_specific_details_isSet;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_provider_specific_details_Valid() const{
    return m_provider_specific_details_isValid;
}

QString OAIUpdateReplicationProtectedItemInputProperties::getRecoveryAvailabilitySetId() const {
    return m_recovery_availability_set_id;
}
void OAIUpdateReplicationProtectedItemInputProperties::setRecoveryAvailabilitySetId(const QString &recovery_availability_set_id) {
    m_recovery_availability_set_id = recovery_availability_set_id;
    m_recovery_availability_set_id_isSet = true;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_recovery_availability_set_id_Set() const{
    return m_recovery_availability_set_id_isSet;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_recovery_availability_set_id_Valid() const{
    return m_recovery_availability_set_id_isValid;
}

QString OAIUpdateReplicationProtectedItemInputProperties::getRecoveryAzureVmName() const {
    return m_recovery_azure_vm_name;
}
void OAIUpdateReplicationProtectedItemInputProperties::setRecoveryAzureVmName(const QString &recovery_azure_vm_name) {
    m_recovery_azure_vm_name = recovery_azure_vm_name;
    m_recovery_azure_vm_name_isSet = true;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_recovery_azure_vm_name_Set() const{
    return m_recovery_azure_vm_name_isSet;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_recovery_azure_vm_name_Valid() const{
    return m_recovery_azure_vm_name_isValid;
}

QString OAIUpdateReplicationProtectedItemInputProperties::getRecoveryAzureVmSize() const {
    return m_recovery_azure_vm_size;
}
void OAIUpdateReplicationProtectedItemInputProperties::setRecoveryAzureVmSize(const QString &recovery_azure_vm_size) {
    m_recovery_azure_vm_size = recovery_azure_vm_size;
    m_recovery_azure_vm_size_isSet = true;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_recovery_azure_vm_size_Set() const{
    return m_recovery_azure_vm_size_isSet;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_recovery_azure_vm_size_Valid() const{
    return m_recovery_azure_vm_size_isValid;
}

QString OAIUpdateReplicationProtectedItemInputProperties::getSelectedRecoveryAzureNetworkId() const {
    return m_selected_recovery_azure_network_id;
}
void OAIUpdateReplicationProtectedItemInputProperties::setSelectedRecoveryAzureNetworkId(const QString &selected_recovery_azure_network_id) {
    m_selected_recovery_azure_network_id = selected_recovery_azure_network_id;
    m_selected_recovery_azure_network_id_isSet = true;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_selected_recovery_azure_network_id_Set() const{
    return m_selected_recovery_azure_network_id_isSet;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_selected_recovery_azure_network_id_Valid() const{
    return m_selected_recovery_azure_network_id_isValid;
}

QString OAIUpdateReplicationProtectedItemInputProperties::getSelectedSourceNicId() const {
    return m_selected_source_nic_id;
}
void OAIUpdateReplicationProtectedItemInputProperties::setSelectedSourceNicId(const QString &selected_source_nic_id) {
    m_selected_source_nic_id = selected_source_nic_id;
    m_selected_source_nic_id_isSet = true;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_selected_source_nic_id_Set() const{
    return m_selected_source_nic_id_isSet;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_selected_source_nic_id_Valid() const{
    return m_selected_source_nic_id_isValid;
}

QString OAIUpdateReplicationProtectedItemInputProperties::getSelectedTfoAzureNetworkId() const {
    return m_selected_tfo_azure_network_id;
}
void OAIUpdateReplicationProtectedItemInputProperties::setSelectedTfoAzureNetworkId(const QString &selected_tfo_azure_network_id) {
    m_selected_tfo_azure_network_id = selected_tfo_azure_network_id;
    m_selected_tfo_azure_network_id_isSet = true;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_selected_tfo_azure_network_id_Set() const{
    return m_selected_tfo_azure_network_id_isSet;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_selected_tfo_azure_network_id_Valid() const{
    return m_selected_tfo_azure_network_id_isValid;
}

QList<OAIVMNicInputDetails> OAIUpdateReplicationProtectedItemInputProperties::getVmNics() const {
    return m_vm_nics;
}
void OAIUpdateReplicationProtectedItemInputProperties::setVmNics(const QList<OAIVMNicInputDetails> &vm_nics) {
    m_vm_nics = vm_nics;
    m_vm_nics_isSet = true;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_vm_nics_Set() const{
    return m_vm_nics_isSet;
}

bool OAIUpdateReplicationProtectedItemInputProperties::is_vm_nics_Valid() const{
    return m_vm_nics_isValid;
}

bool OAIUpdateReplicationProtectedItemInputProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_rdp_on_target_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_specific_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_availability_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_recovery_azure_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_source_nic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_tfo_azure_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_nics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateReplicationProtectedItemInputProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
