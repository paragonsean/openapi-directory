/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryPlanScriptActionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryPlanScriptActionDetails::OAIRecoveryPlanScriptActionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryPlanScriptActionDetails::OAIRecoveryPlanScriptActionDetails() {
    this->initializeModel();
}

OAIRecoveryPlanScriptActionDetails::~OAIRecoveryPlanScriptActionDetails() {}

void OAIRecoveryPlanScriptActionDetails::initializeModel() {

    m_fabric_location_isSet = false;
    m_fabric_location_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIRecoveryPlanScriptActionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryPlanScriptActionDetails::fromJsonObject(QJsonObject json) {

    m_fabric_location_isValid = ::OpenAPI::fromJsonValue(m_fabric_location, json[QString("fabricLocation")]);
    m_fabric_location_isSet = !json[QString("fabricLocation")].isNull() && m_fabric_location_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIRecoveryPlanScriptActionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryPlanScriptActionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_fabric_location_isSet) {
        obj.insert(QString("fabricLocation"), ::OpenAPI::toJsonValue(m_fabric_location));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIRecoveryPlanScriptActionDetails::getFabricLocation() const {
    return m_fabric_location;
}
void OAIRecoveryPlanScriptActionDetails::setFabricLocation(const QString &fabric_location) {
    m_fabric_location = fabric_location;
    m_fabric_location_isSet = true;
}

bool OAIRecoveryPlanScriptActionDetails::is_fabric_location_Set() const{
    return m_fabric_location_isSet;
}

bool OAIRecoveryPlanScriptActionDetails::is_fabric_location_Valid() const{
    return m_fabric_location_isValid;
}

QString OAIRecoveryPlanScriptActionDetails::getPath() const {
    return m_path;
}
void OAIRecoveryPlanScriptActionDetails::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIRecoveryPlanScriptActionDetails::is_path_Set() const{
    return m_path_isSet;
}

bool OAIRecoveryPlanScriptActionDetails::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIRecoveryPlanScriptActionDetails::getTimeout() const {
    return m_timeout;
}
void OAIRecoveryPlanScriptActionDetails::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIRecoveryPlanScriptActionDetails::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIRecoveryPlanScriptActionDetails::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAIRecoveryPlanScriptActionDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIRecoveryPlanScriptActionDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIRecoveryPlanScriptActionDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIRecoveryPlanScriptActionDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIRecoveryPlanScriptActionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fabric_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryPlanScriptActionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fabric_location_isValid && m_path_isValid && true;
}

} // namespace OpenAPI
