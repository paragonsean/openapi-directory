/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleAssignment::OAIRoleAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleAssignment::OAIRoleAssignment() {
    this->initializeModel();
}

OAIRoleAssignment::~OAIRoleAssignment() {}

void OAIRoleAssignment::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_role_definition_id_isSet = false;
    m_role_definition_id_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIRoleAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleAssignment::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principalId")]);
    m_principal_id_isSet = !json[QString("principalId")].isNull() && m_principal_id_isValid;

    m_role_definition_id_isValid = ::OpenAPI::fromJsonValue(m_role_definition_id, json[QString("roleDefinitionId")]);
    m_role_definition_id_isSet = !json[QString("roleDefinitionId")].isNull() && m_role_definition_id_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIRoleAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_principal_id_isSet) {
        obj.insert(QString("principalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_role_definition_id_isSet) {
        obj.insert(QString("roleDefinitionId"), ::OpenAPI::toJsonValue(m_role_definition_id));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QString OAIRoleAssignment::getId() const {
    return m_id;
}
void OAIRoleAssignment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRoleAssignment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRoleAssignment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRoleAssignment::getName() const {
    return m_name;
}
void OAIRoleAssignment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoleAssignment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoleAssignment::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRoleAssignment::getPrincipalId() const {
    return m_principal_id;
}
void OAIRoleAssignment::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIRoleAssignment::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIRoleAssignment::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QString OAIRoleAssignment::getRoleDefinitionId() const {
    return m_role_definition_id;
}
void OAIRoleAssignment::setRoleDefinitionId(const QString &role_definition_id) {
    m_role_definition_id = role_definition_id;
    m_role_definition_id_isSet = true;
}

bool OAIRoleAssignment::is_role_definition_id_Set() const{
    return m_role_definition_id_isSet;
}

bool OAIRoleAssignment::is_role_definition_id_Valid() const{
    return m_role_definition_id_isValid;
}

QString OAIRoleAssignment::getScope() const {
    return m_scope;
}
void OAIRoleAssignment::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIRoleAssignment::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIRoleAssignment::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIRoleAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
