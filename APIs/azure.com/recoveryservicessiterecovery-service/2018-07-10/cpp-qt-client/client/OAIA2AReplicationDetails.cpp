/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIA2AReplicationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIA2AReplicationDetails::OAIA2AReplicationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIA2AReplicationDetails::OAIA2AReplicationDetails() {
    this->initializeModel();
}

OAIA2AReplicationDetails::~OAIA2AReplicationDetails() {}

void OAIA2AReplicationDetails::initializeModel() {

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_fabric_object_id_isSet = false;
    m_fabric_object_id_isValid = false;

    m_initial_primary_fabric_location_isSet = false;
    m_initial_primary_fabric_location_isValid = false;

    m_initial_recovery_fabric_location_isSet = false;
    m_initial_recovery_fabric_location_isValid = false;

    m_is_replication_agent_update_required_isSet = false;
    m_is_replication_agent_update_required_isValid = false;

    m_last_heartbeat_isSet = false;
    m_last_heartbeat_isValid = false;

    m_last_rpo_calculated_time_isSet = false;
    m_last_rpo_calculated_time_isValid = false;

    m_lifecycle_id_isSet = false;
    m_lifecycle_id_isValid = false;

    m_management_id_isSet = false;
    m_management_id_isValid = false;

    m_monitoring_job_type_isSet = false;
    m_monitoring_job_type_isValid = false;

    m_monitoring_percentage_completion_isSet = false;
    m_monitoring_percentage_completion_isValid = false;

    m_multi_vm_group_create_option_isSet = false;
    m_multi_vm_group_create_option_isValid = false;

    m_multi_vm_group_id_isSet = false;
    m_multi_vm_group_id_isValid = false;

    m_multi_vm_group_name_isSet = false;
    m_multi_vm_group_name_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_primary_fabric_location_isSet = false;
    m_primary_fabric_location_isValid = false;

    m_protected_disks_isSet = false;
    m_protected_disks_isValid = false;

    m_protected_managed_disks_isSet = false;
    m_protected_managed_disks_isValid = false;

    m_recovery_availability_set_isSet = false;
    m_recovery_availability_set_isValid = false;

    m_recovery_availability_zone_isSet = false;
    m_recovery_availability_zone_isValid = false;

    m_recovery_azure_resource_group_id_isSet = false;
    m_recovery_azure_resource_group_id_isValid = false;

    m_recovery_azure_vm_name_isSet = false;
    m_recovery_azure_vm_name_isValid = false;

    m_recovery_azure_vm_size_isSet = false;
    m_recovery_azure_vm_size_isValid = false;

    m_recovery_boot_diag_storage_account_id_isSet = false;
    m_recovery_boot_diag_storage_account_id_isValid = false;

    m_recovery_cloud_service_isSet = false;
    m_recovery_cloud_service_isValid = false;

    m_recovery_fabric_location_isSet = false;
    m_recovery_fabric_location_isValid = false;

    m_recovery_fabric_object_id_isSet = false;
    m_recovery_fabric_object_id_isValid = false;

    m_rpo_in_seconds_isSet = false;
    m_rpo_in_seconds_isValid = false;

    m_selected_recovery_azure_network_id_isSet = false;
    m_selected_recovery_azure_network_id_isValid = false;

    m_selected_tfo_azure_network_id_isSet = false;
    m_selected_tfo_azure_network_id_isValid = false;

    m_test_failover_recovery_fabric_object_id_isSet = false;
    m_test_failover_recovery_fabric_object_id_isValid = false;

    m_tfo_azure_vm_name_isSet = false;
    m_tfo_azure_vm_name_isValid = false;

    m_unprotected_disks_isSet = false;
    m_unprotected_disks_isValid = false;

    m_vm_encryption_type_isSet = false;
    m_vm_encryption_type_isValid = false;

    m_vm_nics_isSet = false;
    m_vm_nics_isValid = false;

    m_vm_protection_state_isSet = false;
    m_vm_protection_state_isValid = false;

    m_vm_protection_state_description_isSet = false;
    m_vm_protection_state_description_isValid = false;

    m_vm_synced_config_details_isSet = false;
    m_vm_synced_config_details_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIA2AReplicationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIA2AReplicationDetails::fromJsonObject(QJsonObject json) {

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_fabric_object_id_isValid = ::OpenAPI::fromJsonValue(m_fabric_object_id, json[QString("fabricObjectId")]);
    m_fabric_object_id_isSet = !json[QString("fabricObjectId")].isNull() && m_fabric_object_id_isValid;

    m_initial_primary_fabric_location_isValid = ::OpenAPI::fromJsonValue(m_initial_primary_fabric_location, json[QString("initialPrimaryFabricLocation")]);
    m_initial_primary_fabric_location_isSet = !json[QString("initialPrimaryFabricLocation")].isNull() && m_initial_primary_fabric_location_isValid;

    m_initial_recovery_fabric_location_isValid = ::OpenAPI::fromJsonValue(m_initial_recovery_fabric_location, json[QString("initialRecoveryFabricLocation")]);
    m_initial_recovery_fabric_location_isSet = !json[QString("initialRecoveryFabricLocation")].isNull() && m_initial_recovery_fabric_location_isValid;

    m_is_replication_agent_update_required_isValid = ::OpenAPI::fromJsonValue(m_is_replication_agent_update_required, json[QString("isReplicationAgentUpdateRequired")]);
    m_is_replication_agent_update_required_isSet = !json[QString("isReplicationAgentUpdateRequired")].isNull() && m_is_replication_agent_update_required_isValid;

    m_last_heartbeat_isValid = ::OpenAPI::fromJsonValue(m_last_heartbeat, json[QString("lastHeartbeat")]);
    m_last_heartbeat_isSet = !json[QString("lastHeartbeat")].isNull() && m_last_heartbeat_isValid;

    m_last_rpo_calculated_time_isValid = ::OpenAPI::fromJsonValue(m_last_rpo_calculated_time, json[QString("lastRpoCalculatedTime")]);
    m_last_rpo_calculated_time_isSet = !json[QString("lastRpoCalculatedTime")].isNull() && m_last_rpo_calculated_time_isValid;

    m_lifecycle_id_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_id, json[QString("lifecycleId")]);
    m_lifecycle_id_isSet = !json[QString("lifecycleId")].isNull() && m_lifecycle_id_isValid;

    m_management_id_isValid = ::OpenAPI::fromJsonValue(m_management_id, json[QString("managementId")]);
    m_management_id_isSet = !json[QString("managementId")].isNull() && m_management_id_isValid;

    m_monitoring_job_type_isValid = ::OpenAPI::fromJsonValue(m_monitoring_job_type, json[QString("monitoringJobType")]);
    m_monitoring_job_type_isSet = !json[QString("monitoringJobType")].isNull() && m_monitoring_job_type_isValid;

    m_monitoring_percentage_completion_isValid = ::OpenAPI::fromJsonValue(m_monitoring_percentage_completion, json[QString("monitoringPercentageCompletion")]);
    m_monitoring_percentage_completion_isSet = !json[QString("monitoringPercentageCompletion")].isNull() && m_monitoring_percentage_completion_isValid;

    m_multi_vm_group_create_option_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_create_option, json[QString("multiVmGroupCreateOption")]);
    m_multi_vm_group_create_option_isSet = !json[QString("multiVmGroupCreateOption")].isNull() && m_multi_vm_group_create_option_isValid;

    m_multi_vm_group_id_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_id, json[QString("multiVmGroupId")]);
    m_multi_vm_group_id_isSet = !json[QString("multiVmGroupId")].isNull() && m_multi_vm_group_id_isValid;

    m_multi_vm_group_name_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_name, json[QString("multiVmGroupName")]);
    m_multi_vm_group_name_isSet = !json[QString("multiVmGroupName")].isNull() && m_multi_vm_group_name_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_primary_fabric_location_isValid = ::OpenAPI::fromJsonValue(m_primary_fabric_location, json[QString("primaryFabricLocation")]);
    m_primary_fabric_location_isSet = !json[QString("primaryFabricLocation")].isNull() && m_primary_fabric_location_isValid;

    m_protected_disks_isValid = ::OpenAPI::fromJsonValue(m_protected_disks, json[QString("protectedDisks")]);
    m_protected_disks_isSet = !json[QString("protectedDisks")].isNull() && m_protected_disks_isValid;

    m_protected_managed_disks_isValid = ::OpenAPI::fromJsonValue(m_protected_managed_disks, json[QString("protectedManagedDisks")]);
    m_protected_managed_disks_isSet = !json[QString("protectedManagedDisks")].isNull() && m_protected_managed_disks_isValid;

    m_recovery_availability_set_isValid = ::OpenAPI::fromJsonValue(m_recovery_availability_set, json[QString("recoveryAvailabilitySet")]);
    m_recovery_availability_set_isSet = !json[QString("recoveryAvailabilitySet")].isNull() && m_recovery_availability_set_isValid;

    m_recovery_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_recovery_availability_zone, json[QString("recoveryAvailabilityZone")]);
    m_recovery_availability_zone_isSet = !json[QString("recoveryAvailabilityZone")].isNull() && m_recovery_availability_zone_isValid;

    m_recovery_azure_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_resource_group_id, json[QString("recoveryAzureResourceGroupId")]);
    m_recovery_azure_resource_group_id_isSet = !json[QString("recoveryAzureResourceGroupId")].isNull() && m_recovery_azure_resource_group_id_isValid;

    m_recovery_azure_vm_name_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_vm_name, json[QString("recoveryAzureVMName")]);
    m_recovery_azure_vm_name_isSet = !json[QString("recoveryAzureVMName")].isNull() && m_recovery_azure_vm_name_isValid;

    m_recovery_azure_vm_size_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_vm_size, json[QString("recoveryAzureVMSize")]);
    m_recovery_azure_vm_size_isSet = !json[QString("recoveryAzureVMSize")].isNull() && m_recovery_azure_vm_size_isValid;

    m_recovery_boot_diag_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_boot_diag_storage_account_id, json[QString("recoveryBootDiagStorageAccountId")]);
    m_recovery_boot_diag_storage_account_id_isSet = !json[QString("recoveryBootDiagStorageAccountId")].isNull() && m_recovery_boot_diag_storage_account_id_isValid;

    m_recovery_cloud_service_isValid = ::OpenAPI::fromJsonValue(m_recovery_cloud_service, json[QString("recoveryCloudService")]);
    m_recovery_cloud_service_isSet = !json[QString("recoveryCloudService")].isNull() && m_recovery_cloud_service_isValid;

    m_recovery_fabric_location_isValid = ::OpenAPI::fromJsonValue(m_recovery_fabric_location, json[QString("recoveryFabricLocation")]);
    m_recovery_fabric_location_isSet = !json[QString("recoveryFabricLocation")].isNull() && m_recovery_fabric_location_isValid;

    m_recovery_fabric_object_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_fabric_object_id, json[QString("recoveryFabricObjectId")]);
    m_recovery_fabric_object_id_isSet = !json[QString("recoveryFabricObjectId")].isNull() && m_recovery_fabric_object_id_isValid;

    m_rpo_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_rpo_in_seconds, json[QString("rpoInSeconds")]);
    m_rpo_in_seconds_isSet = !json[QString("rpoInSeconds")].isNull() && m_rpo_in_seconds_isValid;

    m_selected_recovery_azure_network_id_isValid = ::OpenAPI::fromJsonValue(m_selected_recovery_azure_network_id, json[QString("selectedRecoveryAzureNetworkId")]);
    m_selected_recovery_azure_network_id_isSet = !json[QString("selectedRecoveryAzureNetworkId")].isNull() && m_selected_recovery_azure_network_id_isValid;

    m_selected_tfo_azure_network_id_isValid = ::OpenAPI::fromJsonValue(m_selected_tfo_azure_network_id, json[QString("selectedTfoAzureNetworkId")]);
    m_selected_tfo_azure_network_id_isSet = !json[QString("selectedTfoAzureNetworkId")].isNull() && m_selected_tfo_azure_network_id_isValid;

    m_test_failover_recovery_fabric_object_id_isValid = ::OpenAPI::fromJsonValue(m_test_failover_recovery_fabric_object_id, json[QString("testFailoverRecoveryFabricObjectId")]);
    m_test_failover_recovery_fabric_object_id_isSet = !json[QString("testFailoverRecoveryFabricObjectId")].isNull() && m_test_failover_recovery_fabric_object_id_isValid;

    m_tfo_azure_vm_name_isValid = ::OpenAPI::fromJsonValue(m_tfo_azure_vm_name, json[QString("tfoAzureVMName")]);
    m_tfo_azure_vm_name_isSet = !json[QString("tfoAzureVMName")].isNull() && m_tfo_azure_vm_name_isValid;

    m_unprotected_disks_isValid = ::OpenAPI::fromJsonValue(m_unprotected_disks, json[QString("unprotectedDisks")]);
    m_unprotected_disks_isSet = !json[QString("unprotectedDisks")].isNull() && m_unprotected_disks_isValid;

    m_vm_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_vm_encryption_type, json[QString("vmEncryptionType")]);
    m_vm_encryption_type_isSet = !json[QString("vmEncryptionType")].isNull() && m_vm_encryption_type_isValid;

    m_vm_nics_isValid = ::OpenAPI::fromJsonValue(m_vm_nics, json[QString("vmNics")]);
    m_vm_nics_isSet = !json[QString("vmNics")].isNull() && m_vm_nics_isValid;

    m_vm_protection_state_isValid = ::OpenAPI::fromJsonValue(m_vm_protection_state, json[QString("vmProtectionState")]);
    m_vm_protection_state_isSet = !json[QString("vmProtectionState")].isNull() && m_vm_protection_state_isValid;

    m_vm_protection_state_description_isValid = ::OpenAPI::fromJsonValue(m_vm_protection_state_description, json[QString("vmProtectionStateDescription")]);
    m_vm_protection_state_description_isSet = !json[QString("vmProtectionStateDescription")].isNull() && m_vm_protection_state_description_isValid;

    m_vm_synced_config_details_isValid = ::OpenAPI::fromJsonValue(m_vm_synced_config_details, json[QString("vmSyncedConfigDetails")]);
    m_vm_synced_config_details_isSet = !json[QString("vmSyncedConfigDetails")].isNull() && m_vm_synced_config_details_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIA2AReplicationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIA2AReplicationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_fabric_object_id_isSet) {
        obj.insert(QString("fabricObjectId"), ::OpenAPI::toJsonValue(m_fabric_object_id));
    }
    if (m_initial_primary_fabric_location_isSet) {
        obj.insert(QString("initialPrimaryFabricLocation"), ::OpenAPI::toJsonValue(m_initial_primary_fabric_location));
    }
    if (m_initial_recovery_fabric_location_isSet) {
        obj.insert(QString("initialRecoveryFabricLocation"), ::OpenAPI::toJsonValue(m_initial_recovery_fabric_location));
    }
    if (m_is_replication_agent_update_required_isSet) {
        obj.insert(QString("isReplicationAgentUpdateRequired"), ::OpenAPI::toJsonValue(m_is_replication_agent_update_required));
    }
    if (m_last_heartbeat_isSet) {
        obj.insert(QString("lastHeartbeat"), ::OpenAPI::toJsonValue(m_last_heartbeat));
    }
    if (m_last_rpo_calculated_time_isSet) {
        obj.insert(QString("lastRpoCalculatedTime"), ::OpenAPI::toJsonValue(m_last_rpo_calculated_time));
    }
    if (m_lifecycle_id_isSet) {
        obj.insert(QString("lifecycleId"), ::OpenAPI::toJsonValue(m_lifecycle_id));
    }
    if (m_management_id_isSet) {
        obj.insert(QString("managementId"), ::OpenAPI::toJsonValue(m_management_id));
    }
    if (m_monitoring_job_type_isSet) {
        obj.insert(QString("monitoringJobType"), ::OpenAPI::toJsonValue(m_monitoring_job_type));
    }
    if (m_monitoring_percentage_completion_isSet) {
        obj.insert(QString("monitoringPercentageCompletion"), ::OpenAPI::toJsonValue(m_monitoring_percentage_completion));
    }
    if (m_multi_vm_group_create_option_isSet) {
        obj.insert(QString("multiVmGroupCreateOption"), ::OpenAPI::toJsonValue(m_multi_vm_group_create_option));
    }
    if (m_multi_vm_group_id_isSet) {
        obj.insert(QString("multiVmGroupId"), ::OpenAPI::toJsonValue(m_multi_vm_group_id));
    }
    if (m_multi_vm_group_name_isSet) {
        obj.insert(QString("multiVmGroupName"), ::OpenAPI::toJsonValue(m_multi_vm_group_name));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_primary_fabric_location_isSet) {
        obj.insert(QString("primaryFabricLocation"), ::OpenAPI::toJsonValue(m_primary_fabric_location));
    }
    if (m_protected_disks.size() > 0) {
        obj.insert(QString("protectedDisks"), ::OpenAPI::toJsonValue(m_protected_disks));
    }
    if (m_protected_managed_disks.size() > 0) {
        obj.insert(QString("protectedManagedDisks"), ::OpenAPI::toJsonValue(m_protected_managed_disks));
    }
    if (m_recovery_availability_set_isSet) {
        obj.insert(QString("recoveryAvailabilitySet"), ::OpenAPI::toJsonValue(m_recovery_availability_set));
    }
    if (m_recovery_availability_zone_isSet) {
        obj.insert(QString("recoveryAvailabilityZone"), ::OpenAPI::toJsonValue(m_recovery_availability_zone));
    }
    if (m_recovery_azure_resource_group_id_isSet) {
        obj.insert(QString("recoveryAzureResourceGroupId"), ::OpenAPI::toJsonValue(m_recovery_azure_resource_group_id));
    }
    if (m_recovery_azure_vm_name_isSet) {
        obj.insert(QString("recoveryAzureVMName"), ::OpenAPI::toJsonValue(m_recovery_azure_vm_name));
    }
    if (m_recovery_azure_vm_size_isSet) {
        obj.insert(QString("recoveryAzureVMSize"), ::OpenAPI::toJsonValue(m_recovery_azure_vm_size));
    }
    if (m_recovery_boot_diag_storage_account_id_isSet) {
        obj.insert(QString("recoveryBootDiagStorageAccountId"), ::OpenAPI::toJsonValue(m_recovery_boot_diag_storage_account_id));
    }
    if (m_recovery_cloud_service_isSet) {
        obj.insert(QString("recoveryCloudService"), ::OpenAPI::toJsonValue(m_recovery_cloud_service));
    }
    if (m_recovery_fabric_location_isSet) {
        obj.insert(QString("recoveryFabricLocation"), ::OpenAPI::toJsonValue(m_recovery_fabric_location));
    }
    if (m_recovery_fabric_object_id_isSet) {
        obj.insert(QString("recoveryFabricObjectId"), ::OpenAPI::toJsonValue(m_recovery_fabric_object_id));
    }
    if (m_rpo_in_seconds_isSet) {
        obj.insert(QString("rpoInSeconds"), ::OpenAPI::toJsonValue(m_rpo_in_seconds));
    }
    if (m_selected_recovery_azure_network_id_isSet) {
        obj.insert(QString("selectedRecoveryAzureNetworkId"), ::OpenAPI::toJsonValue(m_selected_recovery_azure_network_id));
    }
    if (m_selected_tfo_azure_network_id_isSet) {
        obj.insert(QString("selectedTfoAzureNetworkId"), ::OpenAPI::toJsonValue(m_selected_tfo_azure_network_id));
    }
    if (m_test_failover_recovery_fabric_object_id_isSet) {
        obj.insert(QString("testFailoverRecoveryFabricObjectId"), ::OpenAPI::toJsonValue(m_test_failover_recovery_fabric_object_id));
    }
    if (m_tfo_azure_vm_name_isSet) {
        obj.insert(QString("tfoAzureVMName"), ::OpenAPI::toJsonValue(m_tfo_azure_vm_name));
    }
    if (m_unprotected_disks.size() > 0) {
        obj.insert(QString("unprotectedDisks"), ::OpenAPI::toJsonValue(m_unprotected_disks));
    }
    if (m_vm_encryption_type_isSet) {
        obj.insert(QString("vmEncryptionType"), ::OpenAPI::toJsonValue(m_vm_encryption_type));
    }
    if (m_vm_nics.size() > 0) {
        obj.insert(QString("vmNics"), ::OpenAPI::toJsonValue(m_vm_nics));
    }
    if (m_vm_protection_state_isSet) {
        obj.insert(QString("vmProtectionState"), ::OpenAPI::toJsonValue(m_vm_protection_state));
    }
    if (m_vm_protection_state_description_isSet) {
        obj.insert(QString("vmProtectionStateDescription"), ::OpenAPI::toJsonValue(m_vm_protection_state_description));
    }
    if (m_vm_synced_config_details.isSet()) {
        obj.insert(QString("vmSyncedConfigDetails"), ::OpenAPI::toJsonValue(m_vm_synced_config_details));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIA2AReplicationDetails::getAgentVersion() const {
    return m_agent_version;
}
void OAIA2AReplicationDetails::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIA2AReplicationDetails::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIA2AReplicationDetails::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QString OAIA2AReplicationDetails::getFabricObjectId() const {
    return m_fabric_object_id;
}
void OAIA2AReplicationDetails::setFabricObjectId(const QString &fabric_object_id) {
    m_fabric_object_id = fabric_object_id;
    m_fabric_object_id_isSet = true;
}

bool OAIA2AReplicationDetails::is_fabric_object_id_Set() const{
    return m_fabric_object_id_isSet;
}

bool OAIA2AReplicationDetails::is_fabric_object_id_Valid() const{
    return m_fabric_object_id_isValid;
}

QString OAIA2AReplicationDetails::getInitialPrimaryFabricLocation() const {
    return m_initial_primary_fabric_location;
}
void OAIA2AReplicationDetails::setInitialPrimaryFabricLocation(const QString &initial_primary_fabric_location) {
    m_initial_primary_fabric_location = initial_primary_fabric_location;
    m_initial_primary_fabric_location_isSet = true;
}

bool OAIA2AReplicationDetails::is_initial_primary_fabric_location_Set() const{
    return m_initial_primary_fabric_location_isSet;
}

bool OAIA2AReplicationDetails::is_initial_primary_fabric_location_Valid() const{
    return m_initial_primary_fabric_location_isValid;
}

QString OAIA2AReplicationDetails::getInitialRecoveryFabricLocation() const {
    return m_initial_recovery_fabric_location;
}
void OAIA2AReplicationDetails::setInitialRecoveryFabricLocation(const QString &initial_recovery_fabric_location) {
    m_initial_recovery_fabric_location = initial_recovery_fabric_location;
    m_initial_recovery_fabric_location_isSet = true;
}

bool OAIA2AReplicationDetails::is_initial_recovery_fabric_location_Set() const{
    return m_initial_recovery_fabric_location_isSet;
}

bool OAIA2AReplicationDetails::is_initial_recovery_fabric_location_Valid() const{
    return m_initial_recovery_fabric_location_isValid;
}

bool OAIA2AReplicationDetails::isIsReplicationAgentUpdateRequired() const {
    return m_is_replication_agent_update_required;
}
void OAIA2AReplicationDetails::setIsReplicationAgentUpdateRequired(const bool &is_replication_agent_update_required) {
    m_is_replication_agent_update_required = is_replication_agent_update_required;
    m_is_replication_agent_update_required_isSet = true;
}

bool OAIA2AReplicationDetails::is_is_replication_agent_update_required_Set() const{
    return m_is_replication_agent_update_required_isSet;
}

bool OAIA2AReplicationDetails::is_is_replication_agent_update_required_Valid() const{
    return m_is_replication_agent_update_required_isValid;
}

QDateTime OAIA2AReplicationDetails::getLastHeartbeat() const {
    return m_last_heartbeat;
}
void OAIA2AReplicationDetails::setLastHeartbeat(const QDateTime &last_heartbeat) {
    m_last_heartbeat = last_heartbeat;
    m_last_heartbeat_isSet = true;
}

bool OAIA2AReplicationDetails::is_last_heartbeat_Set() const{
    return m_last_heartbeat_isSet;
}

bool OAIA2AReplicationDetails::is_last_heartbeat_Valid() const{
    return m_last_heartbeat_isValid;
}

QDateTime OAIA2AReplicationDetails::getLastRpoCalculatedTime() const {
    return m_last_rpo_calculated_time;
}
void OAIA2AReplicationDetails::setLastRpoCalculatedTime(const QDateTime &last_rpo_calculated_time) {
    m_last_rpo_calculated_time = last_rpo_calculated_time;
    m_last_rpo_calculated_time_isSet = true;
}

bool OAIA2AReplicationDetails::is_last_rpo_calculated_time_Set() const{
    return m_last_rpo_calculated_time_isSet;
}

bool OAIA2AReplicationDetails::is_last_rpo_calculated_time_Valid() const{
    return m_last_rpo_calculated_time_isValid;
}

QString OAIA2AReplicationDetails::getLifecycleId() const {
    return m_lifecycle_id;
}
void OAIA2AReplicationDetails::setLifecycleId(const QString &lifecycle_id) {
    m_lifecycle_id = lifecycle_id;
    m_lifecycle_id_isSet = true;
}

bool OAIA2AReplicationDetails::is_lifecycle_id_Set() const{
    return m_lifecycle_id_isSet;
}

bool OAIA2AReplicationDetails::is_lifecycle_id_Valid() const{
    return m_lifecycle_id_isValid;
}

QString OAIA2AReplicationDetails::getManagementId() const {
    return m_management_id;
}
void OAIA2AReplicationDetails::setManagementId(const QString &management_id) {
    m_management_id = management_id;
    m_management_id_isSet = true;
}

bool OAIA2AReplicationDetails::is_management_id_Set() const{
    return m_management_id_isSet;
}

bool OAIA2AReplicationDetails::is_management_id_Valid() const{
    return m_management_id_isValid;
}

QString OAIA2AReplicationDetails::getMonitoringJobType() const {
    return m_monitoring_job_type;
}
void OAIA2AReplicationDetails::setMonitoringJobType(const QString &monitoring_job_type) {
    m_monitoring_job_type = monitoring_job_type;
    m_monitoring_job_type_isSet = true;
}

bool OAIA2AReplicationDetails::is_monitoring_job_type_Set() const{
    return m_monitoring_job_type_isSet;
}

bool OAIA2AReplicationDetails::is_monitoring_job_type_Valid() const{
    return m_monitoring_job_type_isValid;
}

qint32 OAIA2AReplicationDetails::getMonitoringPercentageCompletion() const {
    return m_monitoring_percentage_completion;
}
void OAIA2AReplicationDetails::setMonitoringPercentageCompletion(const qint32 &monitoring_percentage_completion) {
    m_monitoring_percentage_completion = monitoring_percentage_completion;
    m_monitoring_percentage_completion_isSet = true;
}

bool OAIA2AReplicationDetails::is_monitoring_percentage_completion_Set() const{
    return m_monitoring_percentage_completion_isSet;
}

bool OAIA2AReplicationDetails::is_monitoring_percentage_completion_Valid() const{
    return m_monitoring_percentage_completion_isValid;
}

QString OAIA2AReplicationDetails::getMultiVmGroupCreateOption() const {
    return m_multi_vm_group_create_option;
}
void OAIA2AReplicationDetails::setMultiVmGroupCreateOption(const QString &multi_vm_group_create_option) {
    m_multi_vm_group_create_option = multi_vm_group_create_option;
    m_multi_vm_group_create_option_isSet = true;
}

bool OAIA2AReplicationDetails::is_multi_vm_group_create_option_Set() const{
    return m_multi_vm_group_create_option_isSet;
}

bool OAIA2AReplicationDetails::is_multi_vm_group_create_option_Valid() const{
    return m_multi_vm_group_create_option_isValid;
}

QString OAIA2AReplicationDetails::getMultiVmGroupId() const {
    return m_multi_vm_group_id;
}
void OAIA2AReplicationDetails::setMultiVmGroupId(const QString &multi_vm_group_id) {
    m_multi_vm_group_id = multi_vm_group_id;
    m_multi_vm_group_id_isSet = true;
}

bool OAIA2AReplicationDetails::is_multi_vm_group_id_Set() const{
    return m_multi_vm_group_id_isSet;
}

bool OAIA2AReplicationDetails::is_multi_vm_group_id_Valid() const{
    return m_multi_vm_group_id_isValid;
}

QString OAIA2AReplicationDetails::getMultiVmGroupName() const {
    return m_multi_vm_group_name;
}
void OAIA2AReplicationDetails::setMultiVmGroupName(const QString &multi_vm_group_name) {
    m_multi_vm_group_name = multi_vm_group_name;
    m_multi_vm_group_name_isSet = true;
}

bool OAIA2AReplicationDetails::is_multi_vm_group_name_Set() const{
    return m_multi_vm_group_name_isSet;
}

bool OAIA2AReplicationDetails::is_multi_vm_group_name_Valid() const{
    return m_multi_vm_group_name_isValid;
}

QString OAIA2AReplicationDetails::getOsType() const {
    return m_os_type;
}
void OAIA2AReplicationDetails::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIA2AReplicationDetails::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIA2AReplicationDetails::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIA2AReplicationDetails::getPrimaryFabricLocation() const {
    return m_primary_fabric_location;
}
void OAIA2AReplicationDetails::setPrimaryFabricLocation(const QString &primary_fabric_location) {
    m_primary_fabric_location = primary_fabric_location;
    m_primary_fabric_location_isSet = true;
}

bool OAIA2AReplicationDetails::is_primary_fabric_location_Set() const{
    return m_primary_fabric_location_isSet;
}

bool OAIA2AReplicationDetails::is_primary_fabric_location_Valid() const{
    return m_primary_fabric_location_isValid;
}

QList<OAIA2AProtectedDiskDetails> OAIA2AReplicationDetails::getProtectedDisks() const {
    return m_protected_disks;
}
void OAIA2AReplicationDetails::setProtectedDisks(const QList<OAIA2AProtectedDiskDetails> &protected_disks) {
    m_protected_disks = protected_disks;
    m_protected_disks_isSet = true;
}

bool OAIA2AReplicationDetails::is_protected_disks_Set() const{
    return m_protected_disks_isSet;
}

bool OAIA2AReplicationDetails::is_protected_disks_Valid() const{
    return m_protected_disks_isValid;
}

QList<OAIA2AProtectedManagedDiskDetails> OAIA2AReplicationDetails::getProtectedManagedDisks() const {
    return m_protected_managed_disks;
}
void OAIA2AReplicationDetails::setProtectedManagedDisks(const QList<OAIA2AProtectedManagedDiskDetails> &protected_managed_disks) {
    m_protected_managed_disks = protected_managed_disks;
    m_protected_managed_disks_isSet = true;
}

bool OAIA2AReplicationDetails::is_protected_managed_disks_Set() const{
    return m_protected_managed_disks_isSet;
}

bool OAIA2AReplicationDetails::is_protected_managed_disks_Valid() const{
    return m_protected_managed_disks_isValid;
}

QString OAIA2AReplicationDetails::getRecoveryAvailabilitySet() const {
    return m_recovery_availability_set;
}
void OAIA2AReplicationDetails::setRecoveryAvailabilitySet(const QString &recovery_availability_set) {
    m_recovery_availability_set = recovery_availability_set;
    m_recovery_availability_set_isSet = true;
}

bool OAIA2AReplicationDetails::is_recovery_availability_set_Set() const{
    return m_recovery_availability_set_isSet;
}

bool OAIA2AReplicationDetails::is_recovery_availability_set_Valid() const{
    return m_recovery_availability_set_isValid;
}

QString OAIA2AReplicationDetails::getRecoveryAvailabilityZone() const {
    return m_recovery_availability_zone;
}
void OAIA2AReplicationDetails::setRecoveryAvailabilityZone(const QString &recovery_availability_zone) {
    m_recovery_availability_zone = recovery_availability_zone;
    m_recovery_availability_zone_isSet = true;
}

bool OAIA2AReplicationDetails::is_recovery_availability_zone_Set() const{
    return m_recovery_availability_zone_isSet;
}

bool OAIA2AReplicationDetails::is_recovery_availability_zone_Valid() const{
    return m_recovery_availability_zone_isValid;
}

QString OAIA2AReplicationDetails::getRecoveryAzureResourceGroupId() const {
    return m_recovery_azure_resource_group_id;
}
void OAIA2AReplicationDetails::setRecoveryAzureResourceGroupId(const QString &recovery_azure_resource_group_id) {
    m_recovery_azure_resource_group_id = recovery_azure_resource_group_id;
    m_recovery_azure_resource_group_id_isSet = true;
}

bool OAIA2AReplicationDetails::is_recovery_azure_resource_group_id_Set() const{
    return m_recovery_azure_resource_group_id_isSet;
}

bool OAIA2AReplicationDetails::is_recovery_azure_resource_group_id_Valid() const{
    return m_recovery_azure_resource_group_id_isValid;
}

QString OAIA2AReplicationDetails::getRecoveryAzureVmName() const {
    return m_recovery_azure_vm_name;
}
void OAIA2AReplicationDetails::setRecoveryAzureVmName(const QString &recovery_azure_vm_name) {
    m_recovery_azure_vm_name = recovery_azure_vm_name;
    m_recovery_azure_vm_name_isSet = true;
}

bool OAIA2AReplicationDetails::is_recovery_azure_vm_name_Set() const{
    return m_recovery_azure_vm_name_isSet;
}

bool OAIA2AReplicationDetails::is_recovery_azure_vm_name_Valid() const{
    return m_recovery_azure_vm_name_isValid;
}

QString OAIA2AReplicationDetails::getRecoveryAzureVmSize() const {
    return m_recovery_azure_vm_size;
}
void OAIA2AReplicationDetails::setRecoveryAzureVmSize(const QString &recovery_azure_vm_size) {
    m_recovery_azure_vm_size = recovery_azure_vm_size;
    m_recovery_azure_vm_size_isSet = true;
}

bool OAIA2AReplicationDetails::is_recovery_azure_vm_size_Set() const{
    return m_recovery_azure_vm_size_isSet;
}

bool OAIA2AReplicationDetails::is_recovery_azure_vm_size_Valid() const{
    return m_recovery_azure_vm_size_isValid;
}

QString OAIA2AReplicationDetails::getRecoveryBootDiagStorageAccountId() const {
    return m_recovery_boot_diag_storage_account_id;
}
void OAIA2AReplicationDetails::setRecoveryBootDiagStorageAccountId(const QString &recovery_boot_diag_storage_account_id) {
    m_recovery_boot_diag_storage_account_id = recovery_boot_diag_storage_account_id;
    m_recovery_boot_diag_storage_account_id_isSet = true;
}

bool OAIA2AReplicationDetails::is_recovery_boot_diag_storage_account_id_Set() const{
    return m_recovery_boot_diag_storage_account_id_isSet;
}

bool OAIA2AReplicationDetails::is_recovery_boot_diag_storage_account_id_Valid() const{
    return m_recovery_boot_diag_storage_account_id_isValid;
}

QString OAIA2AReplicationDetails::getRecoveryCloudService() const {
    return m_recovery_cloud_service;
}
void OAIA2AReplicationDetails::setRecoveryCloudService(const QString &recovery_cloud_service) {
    m_recovery_cloud_service = recovery_cloud_service;
    m_recovery_cloud_service_isSet = true;
}

bool OAIA2AReplicationDetails::is_recovery_cloud_service_Set() const{
    return m_recovery_cloud_service_isSet;
}

bool OAIA2AReplicationDetails::is_recovery_cloud_service_Valid() const{
    return m_recovery_cloud_service_isValid;
}

QString OAIA2AReplicationDetails::getRecoveryFabricLocation() const {
    return m_recovery_fabric_location;
}
void OAIA2AReplicationDetails::setRecoveryFabricLocation(const QString &recovery_fabric_location) {
    m_recovery_fabric_location = recovery_fabric_location;
    m_recovery_fabric_location_isSet = true;
}

bool OAIA2AReplicationDetails::is_recovery_fabric_location_Set() const{
    return m_recovery_fabric_location_isSet;
}

bool OAIA2AReplicationDetails::is_recovery_fabric_location_Valid() const{
    return m_recovery_fabric_location_isValid;
}

QString OAIA2AReplicationDetails::getRecoveryFabricObjectId() const {
    return m_recovery_fabric_object_id;
}
void OAIA2AReplicationDetails::setRecoveryFabricObjectId(const QString &recovery_fabric_object_id) {
    m_recovery_fabric_object_id = recovery_fabric_object_id;
    m_recovery_fabric_object_id_isSet = true;
}

bool OAIA2AReplicationDetails::is_recovery_fabric_object_id_Set() const{
    return m_recovery_fabric_object_id_isSet;
}

bool OAIA2AReplicationDetails::is_recovery_fabric_object_id_Valid() const{
    return m_recovery_fabric_object_id_isValid;
}

qint64 OAIA2AReplicationDetails::getRpoInSeconds() const {
    return m_rpo_in_seconds;
}
void OAIA2AReplicationDetails::setRpoInSeconds(const qint64 &rpo_in_seconds) {
    m_rpo_in_seconds = rpo_in_seconds;
    m_rpo_in_seconds_isSet = true;
}

bool OAIA2AReplicationDetails::is_rpo_in_seconds_Set() const{
    return m_rpo_in_seconds_isSet;
}

bool OAIA2AReplicationDetails::is_rpo_in_seconds_Valid() const{
    return m_rpo_in_seconds_isValid;
}

QString OAIA2AReplicationDetails::getSelectedRecoveryAzureNetworkId() const {
    return m_selected_recovery_azure_network_id;
}
void OAIA2AReplicationDetails::setSelectedRecoveryAzureNetworkId(const QString &selected_recovery_azure_network_id) {
    m_selected_recovery_azure_network_id = selected_recovery_azure_network_id;
    m_selected_recovery_azure_network_id_isSet = true;
}

bool OAIA2AReplicationDetails::is_selected_recovery_azure_network_id_Set() const{
    return m_selected_recovery_azure_network_id_isSet;
}

bool OAIA2AReplicationDetails::is_selected_recovery_azure_network_id_Valid() const{
    return m_selected_recovery_azure_network_id_isValid;
}

QString OAIA2AReplicationDetails::getSelectedTfoAzureNetworkId() const {
    return m_selected_tfo_azure_network_id;
}
void OAIA2AReplicationDetails::setSelectedTfoAzureNetworkId(const QString &selected_tfo_azure_network_id) {
    m_selected_tfo_azure_network_id = selected_tfo_azure_network_id;
    m_selected_tfo_azure_network_id_isSet = true;
}

bool OAIA2AReplicationDetails::is_selected_tfo_azure_network_id_Set() const{
    return m_selected_tfo_azure_network_id_isSet;
}

bool OAIA2AReplicationDetails::is_selected_tfo_azure_network_id_Valid() const{
    return m_selected_tfo_azure_network_id_isValid;
}

QString OAIA2AReplicationDetails::getTestFailoverRecoveryFabricObjectId() const {
    return m_test_failover_recovery_fabric_object_id;
}
void OAIA2AReplicationDetails::setTestFailoverRecoveryFabricObjectId(const QString &test_failover_recovery_fabric_object_id) {
    m_test_failover_recovery_fabric_object_id = test_failover_recovery_fabric_object_id;
    m_test_failover_recovery_fabric_object_id_isSet = true;
}

bool OAIA2AReplicationDetails::is_test_failover_recovery_fabric_object_id_Set() const{
    return m_test_failover_recovery_fabric_object_id_isSet;
}

bool OAIA2AReplicationDetails::is_test_failover_recovery_fabric_object_id_Valid() const{
    return m_test_failover_recovery_fabric_object_id_isValid;
}

QString OAIA2AReplicationDetails::getTfoAzureVmName() const {
    return m_tfo_azure_vm_name;
}
void OAIA2AReplicationDetails::setTfoAzureVmName(const QString &tfo_azure_vm_name) {
    m_tfo_azure_vm_name = tfo_azure_vm_name;
    m_tfo_azure_vm_name_isSet = true;
}

bool OAIA2AReplicationDetails::is_tfo_azure_vm_name_Set() const{
    return m_tfo_azure_vm_name_isSet;
}

bool OAIA2AReplicationDetails::is_tfo_azure_vm_name_Valid() const{
    return m_tfo_azure_vm_name_isValid;
}

QList<OAIA2AUnprotectedDiskDetails> OAIA2AReplicationDetails::getUnprotectedDisks() const {
    return m_unprotected_disks;
}
void OAIA2AReplicationDetails::setUnprotectedDisks(const QList<OAIA2AUnprotectedDiskDetails> &unprotected_disks) {
    m_unprotected_disks = unprotected_disks;
    m_unprotected_disks_isSet = true;
}

bool OAIA2AReplicationDetails::is_unprotected_disks_Set() const{
    return m_unprotected_disks_isSet;
}

bool OAIA2AReplicationDetails::is_unprotected_disks_Valid() const{
    return m_unprotected_disks_isValid;
}

QString OAIA2AReplicationDetails::getVmEncryptionType() const {
    return m_vm_encryption_type;
}
void OAIA2AReplicationDetails::setVmEncryptionType(const QString &vm_encryption_type) {
    m_vm_encryption_type = vm_encryption_type;
    m_vm_encryption_type_isSet = true;
}

bool OAIA2AReplicationDetails::is_vm_encryption_type_Set() const{
    return m_vm_encryption_type_isSet;
}

bool OAIA2AReplicationDetails::is_vm_encryption_type_Valid() const{
    return m_vm_encryption_type_isValid;
}

QList<OAIVMNicDetails> OAIA2AReplicationDetails::getVmNics() const {
    return m_vm_nics;
}
void OAIA2AReplicationDetails::setVmNics(const QList<OAIVMNicDetails> &vm_nics) {
    m_vm_nics = vm_nics;
    m_vm_nics_isSet = true;
}

bool OAIA2AReplicationDetails::is_vm_nics_Set() const{
    return m_vm_nics_isSet;
}

bool OAIA2AReplicationDetails::is_vm_nics_Valid() const{
    return m_vm_nics_isValid;
}

QString OAIA2AReplicationDetails::getVmProtectionState() const {
    return m_vm_protection_state;
}
void OAIA2AReplicationDetails::setVmProtectionState(const QString &vm_protection_state) {
    m_vm_protection_state = vm_protection_state;
    m_vm_protection_state_isSet = true;
}

bool OAIA2AReplicationDetails::is_vm_protection_state_Set() const{
    return m_vm_protection_state_isSet;
}

bool OAIA2AReplicationDetails::is_vm_protection_state_Valid() const{
    return m_vm_protection_state_isValid;
}

QString OAIA2AReplicationDetails::getVmProtectionStateDescription() const {
    return m_vm_protection_state_description;
}
void OAIA2AReplicationDetails::setVmProtectionStateDescription(const QString &vm_protection_state_description) {
    m_vm_protection_state_description = vm_protection_state_description;
    m_vm_protection_state_description_isSet = true;
}

bool OAIA2AReplicationDetails::is_vm_protection_state_description_Set() const{
    return m_vm_protection_state_description_isSet;
}

bool OAIA2AReplicationDetails::is_vm_protection_state_description_Valid() const{
    return m_vm_protection_state_description_isValid;
}

OAIAzureToAzureVmSyncedConfigDetails OAIA2AReplicationDetails::getVmSyncedConfigDetails() const {
    return m_vm_synced_config_details;
}
void OAIA2AReplicationDetails::setVmSyncedConfigDetails(const OAIAzureToAzureVmSyncedConfigDetails &vm_synced_config_details) {
    m_vm_synced_config_details = vm_synced_config_details;
    m_vm_synced_config_details_isSet = true;
}

bool OAIA2AReplicationDetails::is_vm_synced_config_details_Set() const{
    return m_vm_synced_config_details_isSet;
}

bool OAIA2AReplicationDetails::is_vm_synced_config_details_Valid() const{
    return m_vm_synced_config_details_isValid;
}

QString OAIA2AReplicationDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIA2AReplicationDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIA2AReplicationDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIA2AReplicationDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIA2AReplicationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_primary_fabric_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_recovery_fabric_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_replication_agent_update_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heartbeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_rpo_calculated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_job_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_percentage_completion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_create_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_fabric_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_managed_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_availability_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_boot_diag_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_cloud_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_fabric_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_fabric_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpo_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_recovery_azure_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_tfo_azure_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_failover_recovery_fabric_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tfo_azure_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unprotected_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_encryption_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_nics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_protection_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_synced_config_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIA2AReplicationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
