/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputEndpoint::OAIInputEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputEndpoint::OAIInputEndpoint() {
    this->initializeModel();
}

OAIInputEndpoint::~OAIInputEndpoint() {}

void OAIInputEndpoint::initializeModel() {

    m_endpoint_name_isSet = false;
    m_endpoint_name_isValid = false;

    m_private_port_isSet = false;
    m_private_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_public_port_isSet = false;
    m_public_port_isValid = false;
}

void OAIInputEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputEndpoint::fromJsonObject(QJsonObject json) {

    m_endpoint_name_isValid = ::OpenAPI::fromJsonValue(m_endpoint_name, json[QString("endpointName")]);
    m_endpoint_name_isSet = !json[QString("endpointName")].isNull() && m_endpoint_name_isValid;

    m_private_port_isValid = ::OpenAPI::fromJsonValue(m_private_port, json[QString("privatePort")]);
    m_private_port_isSet = !json[QString("privatePort")].isNull() && m_private_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_public_port_isValid = ::OpenAPI::fromJsonValue(m_public_port, json[QString("publicPort")]);
    m_public_port_isSet = !json[QString("publicPort")].isNull() && m_public_port_isValid;
}

QString OAIInputEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_name_isSet) {
        obj.insert(QString("endpointName"), ::OpenAPI::toJsonValue(m_endpoint_name));
    }
    if (m_private_port_isSet) {
        obj.insert(QString("privatePort"), ::OpenAPI::toJsonValue(m_private_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_public_port_isSet) {
        obj.insert(QString("publicPort"), ::OpenAPI::toJsonValue(m_public_port));
    }
    return obj;
}

QString OAIInputEndpoint::getEndpointName() const {
    return m_endpoint_name;
}
void OAIInputEndpoint::setEndpointName(const QString &endpoint_name) {
    m_endpoint_name = endpoint_name;
    m_endpoint_name_isSet = true;
}

bool OAIInputEndpoint::is_endpoint_name_Set() const{
    return m_endpoint_name_isSet;
}

bool OAIInputEndpoint::is_endpoint_name_Valid() const{
    return m_endpoint_name_isValid;
}

qint32 OAIInputEndpoint::getPrivatePort() const {
    return m_private_port;
}
void OAIInputEndpoint::setPrivatePort(const qint32 &private_port) {
    m_private_port = private_port;
    m_private_port_isSet = true;
}

bool OAIInputEndpoint::is_private_port_Set() const{
    return m_private_port_isSet;
}

bool OAIInputEndpoint::is_private_port_Valid() const{
    return m_private_port_isValid;
}

QString OAIInputEndpoint::getProtocol() const {
    return m_protocol;
}
void OAIInputEndpoint::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIInputEndpoint::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIInputEndpoint::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint32 OAIInputEndpoint::getPublicPort() const {
    return m_public_port;
}
void OAIInputEndpoint::setPublicPort(const qint32 &public_port) {
    m_public_port = public_port;
    m_public_port_isSet = true;
}

bool OAIInputEndpoint::is_public_port_Set() const{
    return m_public_port_isSet;
}

bool OAIInputEndpoint::is_public_port_Valid() const{
    return m_public_port_isValid;
}

bool OAIInputEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
