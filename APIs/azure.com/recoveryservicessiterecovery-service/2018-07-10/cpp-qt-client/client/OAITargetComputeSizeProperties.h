/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITargetComputeSizeProperties.h
 *
 * Represents applicable recovery vm sizes properties.
 */

#ifndef OAITargetComputeSizeProperties_H
#define OAITargetComputeSizeProperties_H

#include <QJsonObject>

#include "OAIComputeSizeErrorDetails.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIComputeSizeErrorDetails;

class OAITargetComputeSizeProperties : public OAIObject {
public:
    OAITargetComputeSizeProperties();
    OAITargetComputeSizeProperties(QString json);
    ~OAITargetComputeSizeProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCpuCoresCount() const;
    void setCpuCoresCount(const qint32 &cpu_cores_count);
    bool is_cpu_cores_count_Set() const;
    bool is_cpu_cores_count_Valid() const;

    QList<OAIComputeSizeErrorDetails> getErrors() const;
    void setErrors(const QList<OAIComputeSizeErrorDetails> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    QString getFriendlyName() const;
    void setFriendlyName(const QString &friendly_name);
    bool is_friendly_name_Set() const;
    bool is_friendly_name_Valid() const;

    QString getHighIopsSupported() const;
    void setHighIopsSupported(const QString &high_iops_supported);
    bool is_high_iops_supported_Set() const;
    bool is_high_iops_supported_Valid() const;

    qint32 getMaxDataDiskCount() const;
    void setMaxDataDiskCount(const qint32 &max_data_disk_count);
    bool is_max_data_disk_count_Set() const;
    bool is_max_data_disk_count_Valid() const;

    qint32 getMaxNicsCount() const;
    void setMaxNicsCount(const qint32 &max_nics_count);
    bool is_max_nics_count_Set() const;
    bool is_max_nics_count_Valid() const;

    double getMemoryInGb() const;
    void setMemoryInGb(const double &memory_in_gb);
    bool is_memory_in_gb_Set() const;
    bool is_memory_in_gb_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_cpu_cores_count;
    bool m_cpu_cores_count_isSet;
    bool m_cpu_cores_count_isValid;

    QList<OAIComputeSizeErrorDetails> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    QString m_friendly_name;
    bool m_friendly_name_isSet;
    bool m_friendly_name_isValid;

    QString m_high_iops_supported;
    bool m_high_iops_supported_isSet;
    bool m_high_iops_supported_isValid;

    qint32 m_max_data_disk_count;
    bool m_max_data_disk_count_isSet;
    bool m_max_data_disk_count_isValid;

    qint32 m_max_nics_count;
    bool m_max_nics_count_isSet;
    bool m_max_nics_count_isValid;

    double m_memory_in_gb;
    bool m_memory_in_gb_isSet;
    bool m_memory_in_gb_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITargetComputeSizeProperties)

#endif // OAITargetComputeSizeProperties_H
