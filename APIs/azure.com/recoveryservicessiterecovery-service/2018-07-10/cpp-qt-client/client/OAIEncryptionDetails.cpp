/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionDetails::OAIEncryptionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionDetails::OAIEncryptionDetails() {
    this->initializeModel();
}

OAIEncryptionDetails::~OAIEncryptionDetails() {}

void OAIEncryptionDetails::initializeModel() {

    m_kek_cert_expiry_date_isSet = false;
    m_kek_cert_expiry_date_isValid = false;

    m_kek_cert_thumbprint_isSet = false;
    m_kek_cert_thumbprint_isValid = false;

    m_kek_state_isSet = false;
    m_kek_state_isValid = false;
}

void OAIEncryptionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionDetails::fromJsonObject(QJsonObject json) {

    m_kek_cert_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_kek_cert_expiry_date, json[QString("kekCertExpiryDate")]);
    m_kek_cert_expiry_date_isSet = !json[QString("kekCertExpiryDate")].isNull() && m_kek_cert_expiry_date_isValid;

    m_kek_cert_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_kek_cert_thumbprint, json[QString("kekCertThumbprint")]);
    m_kek_cert_thumbprint_isSet = !json[QString("kekCertThumbprint")].isNull() && m_kek_cert_thumbprint_isValid;

    m_kek_state_isValid = ::OpenAPI::fromJsonValue(m_kek_state, json[QString("kekState")]);
    m_kek_state_isSet = !json[QString("kekState")].isNull() && m_kek_state_isValid;
}

QString OAIEncryptionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_kek_cert_expiry_date_isSet) {
        obj.insert(QString("kekCertExpiryDate"), ::OpenAPI::toJsonValue(m_kek_cert_expiry_date));
    }
    if (m_kek_cert_thumbprint_isSet) {
        obj.insert(QString("kekCertThumbprint"), ::OpenAPI::toJsonValue(m_kek_cert_thumbprint));
    }
    if (m_kek_state_isSet) {
        obj.insert(QString("kekState"), ::OpenAPI::toJsonValue(m_kek_state));
    }
    return obj;
}

QDateTime OAIEncryptionDetails::getKekCertExpiryDate() const {
    return m_kek_cert_expiry_date;
}
void OAIEncryptionDetails::setKekCertExpiryDate(const QDateTime &kek_cert_expiry_date) {
    m_kek_cert_expiry_date = kek_cert_expiry_date;
    m_kek_cert_expiry_date_isSet = true;
}

bool OAIEncryptionDetails::is_kek_cert_expiry_date_Set() const{
    return m_kek_cert_expiry_date_isSet;
}

bool OAIEncryptionDetails::is_kek_cert_expiry_date_Valid() const{
    return m_kek_cert_expiry_date_isValid;
}

QString OAIEncryptionDetails::getKekCertThumbprint() const {
    return m_kek_cert_thumbprint;
}
void OAIEncryptionDetails::setKekCertThumbprint(const QString &kek_cert_thumbprint) {
    m_kek_cert_thumbprint = kek_cert_thumbprint;
    m_kek_cert_thumbprint_isSet = true;
}

bool OAIEncryptionDetails::is_kek_cert_thumbprint_Set() const{
    return m_kek_cert_thumbprint_isSet;
}

bool OAIEncryptionDetails::is_kek_cert_thumbprint_Valid() const{
    return m_kek_cert_thumbprint_isValid;
}

QString OAIEncryptionDetails::getKekState() const {
    return m_kek_state;
}
void OAIEncryptionDetails::setKekState(const QString &kek_state) {
    m_kek_state = kek_state;
    m_kek_state_isSet = true;
}

bool OAIEncryptionDetails::is_kek_state_Set() const{
    return m_kek_state_isSet;
}

bool OAIEncryptionDetails::is_kek_state_Valid() const{
    return m_kek_state_isValid;
}

bool OAIEncryptionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kek_cert_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kek_cert_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kek_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
