/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetComputeSizeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetComputeSizeProperties::OAITargetComputeSizeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetComputeSizeProperties::OAITargetComputeSizeProperties() {
    this->initializeModel();
}

OAITargetComputeSizeProperties::~OAITargetComputeSizeProperties() {}

void OAITargetComputeSizeProperties::initializeModel() {

    m_cpu_cores_count_isSet = false;
    m_cpu_cores_count_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_high_iops_supported_isSet = false;
    m_high_iops_supported_isValid = false;

    m_max_data_disk_count_isSet = false;
    m_max_data_disk_count_isValid = false;

    m_max_nics_count_isSet = false;
    m_max_nics_count_isValid = false;

    m_memory_in_gb_isSet = false;
    m_memory_in_gb_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAITargetComputeSizeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetComputeSizeProperties::fromJsonObject(QJsonObject json) {

    m_cpu_cores_count_isValid = ::OpenAPI::fromJsonValue(m_cpu_cores_count, json[QString("cpuCoresCount")]);
    m_cpu_cores_count_isSet = !json[QString("cpuCoresCount")].isNull() && m_cpu_cores_count_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_high_iops_supported_isValid = ::OpenAPI::fromJsonValue(m_high_iops_supported, json[QString("highIopsSupported")]);
    m_high_iops_supported_isSet = !json[QString("highIopsSupported")].isNull() && m_high_iops_supported_isValid;

    m_max_data_disk_count_isValid = ::OpenAPI::fromJsonValue(m_max_data_disk_count, json[QString("maxDataDiskCount")]);
    m_max_data_disk_count_isSet = !json[QString("maxDataDiskCount")].isNull() && m_max_data_disk_count_isValid;

    m_max_nics_count_isValid = ::OpenAPI::fromJsonValue(m_max_nics_count, json[QString("maxNicsCount")]);
    m_max_nics_count_isSet = !json[QString("maxNicsCount")].isNull() && m_max_nics_count_isValid;

    m_memory_in_gb_isValid = ::OpenAPI::fromJsonValue(m_memory_in_gb, json[QString("memoryInGB")]);
    m_memory_in_gb_isSet = !json[QString("memoryInGB")].isNull() && m_memory_in_gb_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAITargetComputeSizeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetComputeSizeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_cores_count_isSet) {
        obj.insert(QString("cpuCoresCount"), ::OpenAPI::toJsonValue(m_cpu_cores_count));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_high_iops_supported_isSet) {
        obj.insert(QString("highIopsSupported"), ::OpenAPI::toJsonValue(m_high_iops_supported));
    }
    if (m_max_data_disk_count_isSet) {
        obj.insert(QString("maxDataDiskCount"), ::OpenAPI::toJsonValue(m_max_data_disk_count));
    }
    if (m_max_nics_count_isSet) {
        obj.insert(QString("maxNicsCount"), ::OpenAPI::toJsonValue(m_max_nics_count));
    }
    if (m_memory_in_gb_isSet) {
        obj.insert(QString("memoryInGB"), ::OpenAPI::toJsonValue(m_memory_in_gb));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAITargetComputeSizeProperties::getCpuCoresCount() const {
    return m_cpu_cores_count;
}
void OAITargetComputeSizeProperties::setCpuCoresCount(const qint32 &cpu_cores_count) {
    m_cpu_cores_count = cpu_cores_count;
    m_cpu_cores_count_isSet = true;
}

bool OAITargetComputeSizeProperties::is_cpu_cores_count_Set() const{
    return m_cpu_cores_count_isSet;
}

bool OAITargetComputeSizeProperties::is_cpu_cores_count_Valid() const{
    return m_cpu_cores_count_isValid;
}

QList<OAIComputeSizeErrorDetails> OAITargetComputeSizeProperties::getErrors() const {
    return m_errors;
}
void OAITargetComputeSizeProperties::setErrors(const QList<OAIComputeSizeErrorDetails> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAITargetComputeSizeProperties::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAITargetComputeSizeProperties::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAITargetComputeSizeProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAITargetComputeSizeProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAITargetComputeSizeProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAITargetComputeSizeProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAITargetComputeSizeProperties::getHighIopsSupported() const {
    return m_high_iops_supported;
}
void OAITargetComputeSizeProperties::setHighIopsSupported(const QString &high_iops_supported) {
    m_high_iops_supported = high_iops_supported;
    m_high_iops_supported_isSet = true;
}

bool OAITargetComputeSizeProperties::is_high_iops_supported_Set() const{
    return m_high_iops_supported_isSet;
}

bool OAITargetComputeSizeProperties::is_high_iops_supported_Valid() const{
    return m_high_iops_supported_isValid;
}

qint32 OAITargetComputeSizeProperties::getMaxDataDiskCount() const {
    return m_max_data_disk_count;
}
void OAITargetComputeSizeProperties::setMaxDataDiskCount(const qint32 &max_data_disk_count) {
    m_max_data_disk_count = max_data_disk_count;
    m_max_data_disk_count_isSet = true;
}

bool OAITargetComputeSizeProperties::is_max_data_disk_count_Set() const{
    return m_max_data_disk_count_isSet;
}

bool OAITargetComputeSizeProperties::is_max_data_disk_count_Valid() const{
    return m_max_data_disk_count_isValid;
}

qint32 OAITargetComputeSizeProperties::getMaxNicsCount() const {
    return m_max_nics_count;
}
void OAITargetComputeSizeProperties::setMaxNicsCount(const qint32 &max_nics_count) {
    m_max_nics_count = max_nics_count;
    m_max_nics_count_isSet = true;
}

bool OAITargetComputeSizeProperties::is_max_nics_count_Set() const{
    return m_max_nics_count_isSet;
}

bool OAITargetComputeSizeProperties::is_max_nics_count_Valid() const{
    return m_max_nics_count_isValid;
}

double OAITargetComputeSizeProperties::getMemoryInGb() const {
    return m_memory_in_gb;
}
void OAITargetComputeSizeProperties::setMemoryInGb(const double &memory_in_gb) {
    m_memory_in_gb = memory_in_gb;
    m_memory_in_gb_isSet = true;
}

bool OAITargetComputeSizeProperties::is_memory_in_gb_Set() const{
    return m_memory_in_gb_isSet;
}

bool OAITargetComputeSizeProperties::is_memory_in_gb_Valid() const{
    return m_memory_in_gb_isValid;
}

QString OAITargetComputeSizeProperties::getName() const {
    return m_name;
}
void OAITargetComputeSizeProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITargetComputeSizeProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAITargetComputeSizeProperties::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITargetComputeSizeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_cores_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_iops_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_data_disk_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_nics_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_in_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetComputeSizeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
