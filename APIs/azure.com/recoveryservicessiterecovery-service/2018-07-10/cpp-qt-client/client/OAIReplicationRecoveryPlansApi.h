/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicationRecoveryPlansApi_H
#define OAI_OAIReplicationRecoveryPlansApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateRecoveryPlanInput.h"
#include "OAIRecoveryPlan.h"
#include "OAIRecoveryPlanCollection.h"
#include "OAIRecoveryPlanPlannedFailoverInput.h"
#include "OAIRecoveryPlanTestFailoverCleanupInput.h"
#include "OAIRecoveryPlanTestFailoverInput.h"
#include "OAIRecoveryPlanUnplannedFailoverInput.h"
#include "OAIUpdateRecoveryPlanInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicationRecoveryPlansApi : public QObject {
    Q_OBJECT

public:
    OAIReplicationRecoveryPlansApi(const int timeOut = 0);
    ~OAIReplicationRecoveryPlansApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  recovery_plan_name QString [required]
    * @param[in]  input OAICreateRecoveryPlanInput [required]
    */
    virtual void replicationRecoveryPlansCreate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &recovery_plan_name, const OAICreateRecoveryPlanInput &input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  recovery_plan_name QString [required]
    */
    virtual void replicationRecoveryPlansDelete(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &recovery_plan_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  recovery_plan_name QString [required]
    */
    virtual void replicationRecoveryPlansFailoverCommit(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &recovery_plan_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  recovery_plan_name QString [required]
    */
    virtual void replicationRecoveryPlansGet(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &recovery_plan_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void replicationRecoveryPlansList(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  recovery_plan_name QString [required]
    * @param[in]  input OAIRecoveryPlanPlannedFailoverInput [required]
    */
    virtual void replicationRecoveryPlansPlannedFailover(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &recovery_plan_name, const OAIRecoveryPlanPlannedFailoverInput &input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  recovery_plan_name QString [required]
    */
    virtual void replicationRecoveryPlansReprotect(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &recovery_plan_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  recovery_plan_name QString [required]
    * @param[in]  input OAIRecoveryPlanTestFailoverInput [required]
    */
    virtual void replicationRecoveryPlansTestFailover(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &recovery_plan_name, const OAIRecoveryPlanTestFailoverInput &input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  recovery_plan_name QString [required]
    * @param[in]  input OAIRecoveryPlanTestFailoverCleanupInput [required]
    */
    virtual void replicationRecoveryPlansTestFailoverCleanup(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &recovery_plan_name, const OAIRecoveryPlanTestFailoverCleanupInput &input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  recovery_plan_name QString [required]
    * @param[in]  input OAIRecoveryPlanUnplannedFailoverInput [required]
    */
    virtual void replicationRecoveryPlansUnplannedFailover(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &recovery_plan_name, const OAIRecoveryPlanUnplannedFailoverInput &input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  recovery_plan_name QString [required]
    * @param[in]  input OAIUpdateRecoveryPlanInput [required]
    */
    virtual void replicationRecoveryPlansUpdate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &recovery_plan_name, const OAIUpdateRecoveryPlanInput &input);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void replicationRecoveryPlansCreateCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansDeleteCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansFailoverCommitCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansGetCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansListCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansPlannedFailoverCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansReprotectCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansTestFailoverCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansTestFailoverCleanupCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansUnplannedFailoverCallback(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void replicationRecoveryPlansCreateSignal(OAIRecoveryPlan summary);
    void replicationRecoveryPlansDeleteSignal();
    void replicationRecoveryPlansFailoverCommitSignal(OAIRecoveryPlan summary);
    void replicationRecoveryPlansGetSignal(OAIRecoveryPlan summary);
    void replicationRecoveryPlansListSignal(OAIRecoveryPlanCollection summary);
    void replicationRecoveryPlansPlannedFailoverSignal(OAIRecoveryPlan summary);
    void replicationRecoveryPlansReprotectSignal(OAIRecoveryPlan summary);
    void replicationRecoveryPlansTestFailoverSignal(OAIRecoveryPlan summary);
    void replicationRecoveryPlansTestFailoverCleanupSignal(OAIRecoveryPlan summary);
    void replicationRecoveryPlansUnplannedFailoverSignal(OAIRecoveryPlan summary);
    void replicationRecoveryPlansUpdateSignal(OAIRecoveryPlan summary);


    void replicationRecoveryPlansCreateSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryPlan summary);
    void replicationRecoveryPlansDeleteSignalFull(OAIHttpRequestWorker *worker);
    void replicationRecoveryPlansFailoverCommitSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryPlan summary);
    void replicationRecoveryPlansGetSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryPlan summary);
    void replicationRecoveryPlansListSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryPlanCollection summary);
    void replicationRecoveryPlansPlannedFailoverSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryPlan summary);
    void replicationRecoveryPlansReprotectSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryPlan summary);
    void replicationRecoveryPlansTestFailoverSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryPlan summary);
    void replicationRecoveryPlansTestFailoverCleanupSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryPlan summary);
    void replicationRecoveryPlansUnplannedFailoverSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryPlan summary);
    void replicationRecoveryPlansUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRecoveryPlan summary);

    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansCreateSignalError() instead")
    void replicationRecoveryPlansCreateSignalE(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansCreateSignalError(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansDeleteSignalError() instead")
    void replicationRecoveryPlansDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansFailoverCommitSignalError() instead")
    void replicationRecoveryPlansFailoverCommitSignalE(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansFailoverCommitSignalError(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansGetSignalError() instead")
    void replicationRecoveryPlansGetSignalE(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansGetSignalError(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansListSignalError() instead")
    void replicationRecoveryPlansListSignalE(OAIRecoveryPlanCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansListSignalError(OAIRecoveryPlanCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansPlannedFailoverSignalError() instead")
    void replicationRecoveryPlansPlannedFailoverSignalE(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansPlannedFailoverSignalError(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansReprotectSignalError() instead")
    void replicationRecoveryPlansReprotectSignalE(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansReprotectSignalError(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansTestFailoverSignalError() instead")
    void replicationRecoveryPlansTestFailoverSignalE(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansTestFailoverSignalError(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansTestFailoverCleanupSignalError() instead")
    void replicationRecoveryPlansTestFailoverCleanupSignalE(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansTestFailoverCleanupSignalError(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansUnplannedFailoverSignalError() instead")
    void replicationRecoveryPlansUnplannedFailoverSignalE(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansUnplannedFailoverSignalError(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansUpdateSignalError() instead")
    void replicationRecoveryPlansUpdateSignalE(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansUpdateSignalError(OAIRecoveryPlan summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansCreateSignalErrorFull() instead")
    void replicationRecoveryPlansCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansDeleteSignalErrorFull() instead")
    void replicationRecoveryPlansDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansFailoverCommitSignalErrorFull() instead")
    void replicationRecoveryPlansFailoverCommitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansFailoverCommitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansGetSignalErrorFull() instead")
    void replicationRecoveryPlansGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansListSignalErrorFull() instead")
    void replicationRecoveryPlansListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansPlannedFailoverSignalErrorFull() instead")
    void replicationRecoveryPlansPlannedFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansPlannedFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansReprotectSignalErrorFull() instead")
    void replicationRecoveryPlansReprotectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansReprotectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansTestFailoverSignalErrorFull() instead")
    void replicationRecoveryPlansTestFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansTestFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansTestFailoverCleanupSignalErrorFull() instead")
    void replicationRecoveryPlansTestFailoverCleanupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansTestFailoverCleanupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansUnplannedFailoverSignalErrorFull() instead")
    void replicationRecoveryPlansUnplannedFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansUnplannedFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationRecoveryPlansUpdateSignalErrorFull() instead")
    void replicationRecoveryPlansUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationRecoveryPlansUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
