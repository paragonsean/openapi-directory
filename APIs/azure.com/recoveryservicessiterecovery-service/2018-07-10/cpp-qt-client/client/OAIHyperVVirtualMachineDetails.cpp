/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperVVirtualMachineDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperVVirtualMachineDetails::OAIHyperVVirtualMachineDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperVVirtualMachineDetails::OAIHyperVVirtualMachineDetails() {
    this->initializeModel();
}

OAIHyperVVirtualMachineDetails::~OAIHyperVVirtualMachineDetails() {}

void OAIHyperVVirtualMachineDetails::initializeModel() {

    m_disk_details_isSet = false;
    m_disk_details_isValid = false;

    m_generation_isSet = false;
    m_generation_isValid = false;

    m_has_fibre_channel_adapter_isSet = false;
    m_has_fibre_channel_adapter_isValid = false;

    m_has_physical_disk_isSet = false;
    m_has_physical_disk_isValid = false;

    m_has_shared_vhd_isSet = false;
    m_has_shared_vhd_isValid = false;

    m_os_details_isSet = false;
    m_os_details_isValid = false;

    m_source_item_id_isSet = false;
    m_source_item_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIHyperVVirtualMachineDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperVVirtualMachineDetails::fromJsonObject(QJsonObject json) {

    m_disk_details_isValid = ::OpenAPI::fromJsonValue(m_disk_details, json[QString("diskDetails")]);
    m_disk_details_isSet = !json[QString("diskDetails")].isNull() && m_disk_details_isValid;

    m_generation_isValid = ::OpenAPI::fromJsonValue(m_generation, json[QString("generation")]);
    m_generation_isSet = !json[QString("generation")].isNull() && m_generation_isValid;

    m_has_fibre_channel_adapter_isValid = ::OpenAPI::fromJsonValue(m_has_fibre_channel_adapter, json[QString("hasFibreChannelAdapter")]);
    m_has_fibre_channel_adapter_isSet = !json[QString("hasFibreChannelAdapter")].isNull() && m_has_fibre_channel_adapter_isValid;

    m_has_physical_disk_isValid = ::OpenAPI::fromJsonValue(m_has_physical_disk, json[QString("hasPhysicalDisk")]);
    m_has_physical_disk_isSet = !json[QString("hasPhysicalDisk")].isNull() && m_has_physical_disk_isValid;

    m_has_shared_vhd_isValid = ::OpenAPI::fromJsonValue(m_has_shared_vhd, json[QString("hasSharedVhd")]);
    m_has_shared_vhd_isSet = !json[QString("hasSharedVhd")].isNull() && m_has_shared_vhd_isValid;

    m_os_details_isValid = ::OpenAPI::fromJsonValue(m_os_details, json[QString("osDetails")]);
    m_os_details_isSet = !json[QString("osDetails")].isNull() && m_os_details_isValid;

    m_source_item_id_isValid = ::OpenAPI::fromJsonValue(m_source_item_id, json[QString("sourceItemId")]);
    m_source_item_id_isSet = !json[QString("sourceItemId")].isNull() && m_source_item_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIHyperVVirtualMachineDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperVVirtualMachineDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_details.size() > 0) {
        obj.insert(QString("diskDetails"), ::OpenAPI::toJsonValue(m_disk_details));
    }
    if (m_generation_isSet) {
        obj.insert(QString("generation"), ::OpenAPI::toJsonValue(m_generation));
    }
    if (m_has_fibre_channel_adapter_isSet) {
        obj.insert(QString("hasFibreChannelAdapter"), ::OpenAPI::toJsonValue(m_has_fibre_channel_adapter));
    }
    if (m_has_physical_disk_isSet) {
        obj.insert(QString("hasPhysicalDisk"), ::OpenAPI::toJsonValue(m_has_physical_disk));
    }
    if (m_has_shared_vhd_isSet) {
        obj.insert(QString("hasSharedVhd"), ::OpenAPI::toJsonValue(m_has_shared_vhd));
    }
    if (m_os_details.isSet()) {
        obj.insert(QString("osDetails"), ::OpenAPI::toJsonValue(m_os_details));
    }
    if (m_source_item_id_isSet) {
        obj.insert(QString("sourceItemId"), ::OpenAPI::toJsonValue(m_source_item_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QList<OAIDiskDetails> OAIHyperVVirtualMachineDetails::getDiskDetails() const {
    return m_disk_details;
}
void OAIHyperVVirtualMachineDetails::setDiskDetails(const QList<OAIDiskDetails> &disk_details) {
    m_disk_details = disk_details;
    m_disk_details_isSet = true;
}

bool OAIHyperVVirtualMachineDetails::is_disk_details_Set() const{
    return m_disk_details_isSet;
}

bool OAIHyperVVirtualMachineDetails::is_disk_details_Valid() const{
    return m_disk_details_isValid;
}

QString OAIHyperVVirtualMachineDetails::getGeneration() const {
    return m_generation;
}
void OAIHyperVVirtualMachineDetails::setGeneration(const QString &generation) {
    m_generation = generation;
    m_generation_isSet = true;
}

bool OAIHyperVVirtualMachineDetails::is_generation_Set() const{
    return m_generation_isSet;
}

bool OAIHyperVVirtualMachineDetails::is_generation_Valid() const{
    return m_generation_isValid;
}

QString OAIHyperVVirtualMachineDetails::getHasFibreChannelAdapter() const {
    return m_has_fibre_channel_adapter;
}
void OAIHyperVVirtualMachineDetails::setHasFibreChannelAdapter(const QString &has_fibre_channel_adapter) {
    m_has_fibre_channel_adapter = has_fibre_channel_adapter;
    m_has_fibre_channel_adapter_isSet = true;
}

bool OAIHyperVVirtualMachineDetails::is_has_fibre_channel_adapter_Set() const{
    return m_has_fibre_channel_adapter_isSet;
}

bool OAIHyperVVirtualMachineDetails::is_has_fibre_channel_adapter_Valid() const{
    return m_has_fibre_channel_adapter_isValid;
}

QString OAIHyperVVirtualMachineDetails::getHasPhysicalDisk() const {
    return m_has_physical_disk;
}
void OAIHyperVVirtualMachineDetails::setHasPhysicalDisk(const QString &has_physical_disk) {
    m_has_physical_disk = has_physical_disk;
    m_has_physical_disk_isSet = true;
}

bool OAIHyperVVirtualMachineDetails::is_has_physical_disk_Set() const{
    return m_has_physical_disk_isSet;
}

bool OAIHyperVVirtualMachineDetails::is_has_physical_disk_Valid() const{
    return m_has_physical_disk_isValid;
}

QString OAIHyperVVirtualMachineDetails::getHasSharedVhd() const {
    return m_has_shared_vhd;
}
void OAIHyperVVirtualMachineDetails::setHasSharedVhd(const QString &has_shared_vhd) {
    m_has_shared_vhd = has_shared_vhd;
    m_has_shared_vhd_isSet = true;
}

bool OAIHyperVVirtualMachineDetails::is_has_shared_vhd_Set() const{
    return m_has_shared_vhd_isSet;
}

bool OAIHyperVVirtualMachineDetails::is_has_shared_vhd_Valid() const{
    return m_has_shared_vhd_isValid;
}

OAIOSDetails OAIHyperVVirtualMachineDetails::getOsDetails() const {
    return m_os_details;
}
void OAIHyperVVirtualMachineDetails::setOsDetails(const OAIOSDetails &os_details) {
    m_os_details = os_details;
    m_os_details_isSet = true;
}

bool OAIHyperVVirtualMachineDetails::is_os_details_Set() const{
    return m_os_details_isSet;
}

bool OAIHyperVVirtualMachineDetails::is_os_details_Valid() const{
    return m_os_details_isValid;
}

QString OAIHyperVVirtualMachineDetails::getSourceItemId() const {
    return m_source_item_id;
}
void OAIHyperVVirtualMachineDetails::setSourceItemId(const QString &source_item_id) {
    m_source_item_id = source_item_id;
    m_source_item_id_isSet = true;
}

bool OAIHyperVVirtualMachineDetails::is_source_item_id_Set() const{
    return m_source_item_id_isSet;
}

bool OAIHyperVVirtualMachineDetails::is_source_item_id_Valid() const{
    return m_source_item_id_isValid;
}

QString OAIHyperVVirtualMachineDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIHyperVVirtualMachineDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIHyperVVirtualMachineDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIHyperVVirtualMachineDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIHyperVVirtualMachineDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_fibre_channel_adapter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_physical_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_shared_vhd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperVVirtualMachineDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
