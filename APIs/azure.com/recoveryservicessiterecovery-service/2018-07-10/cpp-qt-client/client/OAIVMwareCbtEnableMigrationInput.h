/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVMwareCbtEnableMigrationInput.h
 *
 * VMwareCbt specific enable migration input.
 */

#ifndef OAIVMwareCbtEnableMigrationInput_H
#define OAIVMwareCbtEnableMigrationInput_H

#include <QJsonObject>

#include "OAIEnableMigrationProviderSpecificInput.h"
#include "OAIVMwareCbtDiskInput.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVMwareCbtDiskInput;

class OAIVMwareCbtEnableMigrationInput : public OAIObject {
public:
    OAIVMwareCbtEnableMigrationInput();
    OAIVMwareCbtEnableMigrationInput(QString json);
    ~OAIVMwareCbtEnableMigrationInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataMoverRunAsAccountId() const;
    void setDataMoverRunAsAccountId(const QString &data_mover_run_as_account_id);
    bool is_data_mover_run_as_account_id_Set() const;
    bool is_data_mover_run_as_account_id_Valid() const;

    QList<OAIVMwareCbtDiskInput> getDisksToInclude() const;
    void setDisksToInclude(const QList<OAIVMwareCbtDiskInput> &disks_to_include);
    bool is_disks_to_include_Set() const;
    bool is_disks_to_include_Valid() const;

    QString getLicenseType() const;
    void setLicenseType(const QString &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    QString getSnapshotRunAsAccountId() const;
    void setSnapshotRunAsAccountId(const QString &snapshot_run_as_account_id);
    bool is_snapshot_run_as_account_id_Set() const;
    bool is_snapshot_run_as_account_id_Valid() const;

    QString getTargetAvailabilitySetId() const;
    void setTargetAvailabilitySetId(const QString &target_availability_set_id);
    bool is_target_availability_set_id_Set() const;
    bool is_target_availability_set_id_Valid() const;

    QString getTargetBootDiagnosticsStorageAccountId() const;
    void setTargetBootDiagnosticsStorageAccountId(const QString &target_boot_diagnostics_storage_account_id);
    bool is_target_boot_diagnostics_storage_account_id_Set() const;
    bool is_target_boot_diagnostics_storage_account_id_Valid() const;

    QString getTargetNetworkId() const;
    void setTargetNetworkId(const QString &target_network_id);
    bool is_target_network_id_Set() const;
    bool is_target_network_id_Valid() const;

    QString getTargetResourceGroupId() const;
    void setTargetResourceGroupId(const QString &target_resource_group_id);
    bool is_target_resource_group_id_Set() const;
    bool is_target_resource_group_id_Valid() const;

    QString getTargetSubnetName() const;
    void setTargetSubnetName(const QString &target_subnet_name);
    bool is_target_subnet_name_Set() const;
    bool is_target_subnet_name_Valid() const;

    QString getTargetVmName() const;
    void setTargetVmName(const QString &target_vm_name);
    bool is_target_vm_name_Set() const;
    bool is_target_vm_name_Valid() const;

    QString getTargetVmSize() const;
    void setTargetVmSize(const QString &target_vm_size);
    bool is_target_vm_size_Set() const;
    bool is_target_vm_size_Valid() const;

    QString getVmwareMachineId() const;
    void setVmwareMachineId(const QString &vmware_machine_id);
    bool is_vmware_machine_id_Set() const;
    bool is_vmware_machine_id_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_data_mover_run_as_account_id;
    bool m_data_mover_run_as_account_id_isSet;
    bool m_data_mover_run_as_account_id_isValid;

    QList<OAIVMwareCbtDiskInput> m_disks_to_include;
    bool m_disks_to_include_isSet;
    bool m_disks_to_include_isValid;

    QString m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    QString m_snapshot_run_as_account_id;
    bool m_snapshot_run_as_account_id_isSet;
    bool m_snapshot_run_as_account_id_isValid;

    QString m_target_availability_set_id;
    bool m_target_availability_set_id_isSet;
    bool m_target_availability_set_id_isValid;

    QString m_target_boot_diagnostics_storage_account_id;
    bool m_target_boot_diagnostics_storage_account_id_isSet;
    bool m_target_boot_diagnostics_storage_account_id_isValid;

    QString m_target_network_id;
    bool m_target_network_id_isSet;
    bool m_target_network_id_isValid;

    QString m_target_resource_group_id;
    bool m_target_resource_group_id_isSet;
    bool m_target_resource_group_id_isValid;

    QString m_target_subnet_name;
    bool m_target_subnet_name_isSet;
    bool m_target_subnet_name_isValid;

    QString m_target_vm_name;
    bool m_target_vm_name_isSet;
    bool m_target_vm_name_isValid;

    QString m_target_vm_size;
    bool m_target_vm_size_isSet;
    bool m_target_vm_size_isValid;

    QString m_vmware_machine_id;
    bool m_vmware_machine_id_isSet;
    bool m_vmware_machine_id_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVMwareCbtEnableMigrationInput)

#endif // OAIVMwareCbtEnableMigrationInput_H
