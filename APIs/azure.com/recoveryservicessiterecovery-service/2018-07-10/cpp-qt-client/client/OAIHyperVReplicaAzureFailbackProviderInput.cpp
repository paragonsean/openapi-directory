/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperVReplicaAzureFailbackProviderInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperVReplicaAzureFailbackProviderInput::OAIHyperVReplicaAzureFailbackProviderInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperVReplicaAzureFailbackProviderInput::OAIHyperVReplicaAzureFailbackProviderInput() {
    this->initializeModel();
}

OAIHyperVReplicaAzureFailbackProviderInput::~OAIHyperVReplicaAzureFailbackProviderInput() {}

void OAIHyperVReplicaAzureFailbackProviderInput::initializeModel() {

    m_data_sync_option_isSet = false;
    m_data_sync_option_isValid = false;

    m_provider_id_for_alternate_recovery_isSet = false;
    m_provider_id_for_alternate_recovery_isValid = false;

    m_recovery_vm_creation_option_isSet = false;
    m_recovery_vm_creation_option_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIHyperVReplicaAzureFailbackProviderInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperVReplicaAzureFailbackProviderInput::fromJsonObject(QJsonObject json) {

    m_data_sync_option_isValid = ::OpenAPI::fromJsonValue(m_data_sync_option, json[QString("dataSyncOption")]);
    m_data_sync_option_isSet = !json[QString("dataSyncOption")].isNull() && m_data_sync_option_isValid;

    m_provider_id_for_alternate_recovery_isValid = ::OpenAPI::fromJsonValue(m_provider_id_for_alternate_recovery, json[QString("providerIdForAlternateRecovery")]);
    m_provider_id_for_alternate_recovery_isSet = !json[QString("providerIdForAlternateRecovery")].isNull() && m_provider_id_for_alternate_recovery_isValid;

    m_recovery_vm_creation_option_isValid = ::OpenAPI::fromJsonValue(m_recovery_vm_creation_option, json[QString("recoveryVmCreationOption")]);
    m_recovery_vm_creation_option_isSet = !json[QString("recoveryVmCreationOption")].isNull() && m_recovery_vm_creation_option_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIHyperVReplicaAzureFailbackProviderInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperVReplicaAzureFailbackProviderInput::asJsonObject() const {
    QJsonObject obj;
    if (m_data_sync_option_isSet) {
        obj.insert(QString("dataSyncOption"), ::OpenAPI::toJsonValue(m_data_sync_option));
    }
    if (m_provider_id_for_alternate_recovery_isSet) {
        obj.insert(QString("providerIdForAlternateRecovery"), ::OpenAPI::toJsonValue(m_provider_id_for_alternate_recovery));
    }
    if (m_recovery_vm_creation_option_isSet) {
        obj.insert(QString("recoveryVmCreationOption"), ::OpenAPI::toJsonValue(m_recovery_vm_creation_option));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIHyperVReplicaAzureFailbackProviderInput::getDataSyncOption() const {
    return m_data_sync_option;
}
void OAIHyperVReplicaAzureFailbackProviderInput::setDataSyncOption(const QString &data_sync_option) {
    m_data_sync_option = data_sync_option;
    m_data_sync_option_isSet = true;
}

bool OAIHyperVReplicaAzureFailbackProviderInput::is_data_sync_option_Set() const{
    return m_data_sync_option_isSet;
}

bool OAIHyperVReplicaAzureFailbackProviderInput::is_data_sync_option_Valid() const{
    return m_data_sync_option_isValid;
}

QString OAIHyperVReplicaAzureFailbackProviderInput::getProviderIdForAlternateRecovery() const {
    return m_provider_id_for_alternate_recovery;
}
void OAIHyperVReplicaAzureFailbackProviderInput::setProviderIdForAlternateRecovery(const QString &provider_id_for_alternate_recovery) {
    m_provider_id_for_alternate_recovery = provider_id_for_alternate_recovery;
    m_provider_id_for_alternate_recovery_isSet = true;
}

bool OAIHyperVReplicaAzureFailbackProviderInput::is_provider_id_for_alternate_recovery_Set() const{
    return m_provider_id_for_alternate_recovery_isSet;
}

bool OAIHyperVReplicaAzureFailbackProviderInput::is_provider_id_for_alternate_recovery_Valid() const{
    return m_provider_id_for_alternate_recovery_isValid;
}

QString OAIHyperVReplicaAzureFailbackProviderInput::getRecoveryVmCreationOption() const {
    return m_recovery_vm_creation_option;
}
void OAIHyperVReplicaAzureFailbackProviderInput::setRecoveryVmCreationOption(const QString &recovery_vm_creation_option) {
    m_recovery_vm_creation_option = recovery_vm_creation_option;
    m_recovery_vm_creation_option_isSet = true;
}

bool OAIHyperVReplicaAzureFailbackProviderInput::is_recovery_vm_creation_option_Set() const{
    return m_recovery_vm_creation_option_isSet;
}

bool OAIHyperVReplicaAzureFailbackProviderInput::is_recovery_vm_creation_option_Valid() const{
    return m_recovery_vm_creation_option_isValid;
}

QString OAIHyperVReplicaAzureFailbackProviderInput::getInstanceType() const {
    return m_instance_type;
}
void OAIHyperVReplicaAzureFailbackProviderInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIHyperVReplicaAzureFailbackProviderInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIHyperVReplicaAzureFailbackProviderInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIHyperVReplicaAzureFailbackProviderInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_sync_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_for_alternate_recovery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_vm_creation_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperVReplicaAzureFailbackProviderInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
