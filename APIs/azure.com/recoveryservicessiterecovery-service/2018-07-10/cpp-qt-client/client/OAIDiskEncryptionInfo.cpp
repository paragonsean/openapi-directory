/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskEncryptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskEncryptionInfo::OAIDiskEncryptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskEncryptionInfo::OAIDiskEncryptionInfo() {
    this->initializeModel();
}

OAIDiskEncryptionInfo::~OAIDiskEncryptionInfo() {}

void OAIDiskEncryptionInfo::initializeModel() {

    m_disk_encryption_key_info_isSet = false;
    m_disk_encryption_key_info_isValid = false;

    m_key_encryption_key_info_isSet = false;
    m_key_encryption_key_info_isValid = false;
}

void OAIDiskEncryptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskEncryptionInfo::fromJsonObject(QJsonObject json) {

    m_disk_encryption_key_info_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_key_info, json[QString("diskEncryptionKeyInfo")]);
    m_disk_encryption_key_info_isSet = !json[QString("diskEncryptionKeyInfo")].isNull() && m_disk_encryption_key_info_isValid;

    m_key_encryption_key_info_isValid = ::OpenAPI::fromJsonValue(m_key_encryption_key_info, json[QString("keyEncryptionKeyInfo")]);
    m_key_encryption_key_info_isSet = !json[QString("keyEncryptionKeyInfo")].isNull() && m_key_encryption_key_info_isValid;
}

QString OAIDiskEncryptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskEncryptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_encryption_key_info.isSet()) {
        obj.insert(QString("diskEncryptionKeyInfo"), ::OpenAPI::toJsonValue(m_disk_encryption_key_info));
    }
    if (m_key_encryption_key_info.isSet()) {
        obj.insert(QString("keyEncryptionKeyInfo"), ::OpenAPI::toJsonValue(m_key_encryption_key_info));
    }
    return obj;
}

OAIDiskEncryptionKeyInfo OAIDiskEncryptionInfo::getDiskEncryptionKeyInfo() const {
    return m_disk_encryption_key_info;
}
void OAIDiskEncryptionInfo::setDiskEncryptionKeyInfo(const OAIDiskEncryptionKeyInfo &disk_encryption_key_info) {
    m_disk_encryption_key_info = disk_encryption_key_info;
    m_disk_encryption_key_info_isSet = true;
}

bool OAIDiskEncryptionInfo::is_disk_encryption_key_info_Set() const{
    return m_disk_encryption_key_info_isSet;
}

bool OAIDiskEncryptionInfo::is_disk_encryption_key_info_Valid() const{
    return m_disk_encryption_key_info_isValid;
}

OAIKeyEncryptionKeyInfo OAIDiskEncryptionInfo::getKeyEncryptionKeyInfo() const {
    return m_key_encryption_key_info;
}
void OAIDiskEncryptionInfo::setKeyEncryptionKeyInfo(const OAIKeyEncryptionKeyInfo &key_encryption_key_info) {
    m_key_encryption_key_info = key_encryption_key_info;
    m_key_encryption_key_info_isSet = true;
}

bool OAIDiskEncryptionInfo::is_key_encryption_key_info_Set() const{
    return m_key_encryption_key_info_isSet;
}

bool OAIDiskEncryptionInfo::is_key_encryption_key_info_Valid() const{
    return m_key_encryption_key_info_isValid;
}

bool OAIDiskEncryptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_encryption_key_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_encryption_key_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskEncryptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
