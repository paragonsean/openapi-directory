/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecoveryPlanAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecoveryPlanAction::OAIRecoveryPlanAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecoveryPlanAction::OAIRecoveryPlanAction() {
    this->initializeModel();
}

OAIRecoveryPlanAction::~OAIRecoveryPlanAction() {}

void OAIRecoveryPlanAction::initializeModel() {

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_custom_details_isSet = false;
    m_custom_details_isValid = false;

    m_failover_directions_isSet = false;
    m_failover_directions_isValid = false;

    m_failover_types_isSet = false;
    m_failover_types_isValid = false;
}

void OAIRecoveryPlanAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecoveryPlanAction::fromJsonObject(QJsonObject json) {

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("actionName")]);
    m_action_name_isSet = !json[QString("actionName")].isNull() && m_action_name_isValid;

    m_custom_details_isValid = ::OpenAPI::fromJsonValue(m_custom_details, json[QString("customDetails")]);
    m_custom_details_isSet = !json[QString("customDetails")].isNull() && m_custom_details_isValid;

    m_failover_directions_isValid = ::OpenAPI::fromJsonValue(m_failover_directions, json[QString("failoverDirections")]);
    m_failover_directions_isSet = !json[QString("failoverDirections")].isNull() && m_failover_directions_isValid;

    m_failover_types_isValid = ::OpenAPI::fromJsonValue(m_failover_types, json[QString("failoverTypes")]);
    m_failover_types_isSet = !json[QString("failoverTypes")].isNull() && m_failover_types_isValid;
}

QString OAIRecoveryPlanAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecoveryPlanAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action_name_isSet) {
        obj.insert(QString("actionName"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_custom_details.isSet()) {
        obj.insert(QString("customDetails"), ::OpenAPI::toJsonValue(m_custom_details));
    }
    if (m_failover_directions.size() > 0) {
        obj.insert(QString("failoverDirections"), ::OpenAPI::toJsonValue(m_failover_directions));
    }
    if (m_failover_types.size() > 0) {
        obj.insert(QString("failoverTypes"), ::OpenAPI::toJsonValue(m_failover_types));
    }
    return obj;
}

QString OAIRecoveryPlanAction::getActionName() const {
    return m_action_name;
}
void OAIRecoveryPlanAction::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAIRecoveryPlanAction::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAIRecoveryPlanAction::is_action_name_Valid() const{
    return m_action_name_isValid;
}

OAIRecoveryPlanActionDetails OAIRecoveryPlanAction::getCustomDetails() const {
    return m_custom_details;
}
void OAIRecoveryPlanAction::setCustomDetails(const OAIRecoveryPlanActionDetails &custom_details) {
    m_custom_details = custom_details;
    m_custom_details_isSet = true;
}

bool OAIRecoveryPlanAction::is_custom_details_Set() const{
    return m_custom_details_isSet;
}

bool OAIRecoveryPlanAction::is_custom_details_Valid() const{
    return m_custom_details_isValid;
}

QList<QString> OAIRecoveryPlanAction::getFailoverDirections() const {
    return m_failover_directions;
}
void OAIRecoveryPlanAction::setFailoverDirections(const QList<QString> &failover_directions) {
    m_failover_directions = failover_directions;
    m_failover_directions_isSet = true;
}

bool OAIRecoveryPlanAction::is_failover_directions_Set() const{
    return m_failover_directions_isSet;
}

bool OAIRecoveryPlanAction::is_failover_directions_Valid() const{
    return m_failover_directions_isValid;
}

QList<QString> OAIRecoveryPlanAction::getFailoverTypes() const {
    return m_failover_types;
}
void OAIRecoveryPlanAction::setFailoverTypes(const QList<QString> &failover_types) {
    m_failover_types = failover_types;
    m_failover_types_isSet = true;
}

bool OAIRecoveryPlanAction::is_failover_types_Set() const{
    return m_failover_types_isSet;
}

bool OAIRecoveryPlanAction::is_failover_types_Valid() const{
    return m_failover_types_isValid;
}

bool OAIRecoveryPlanAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_directions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecoveryPlanAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_name_isValid && m_custom_details_isValid && m_failover_directions_isValid && m_failover_types_isValid && true;
}

} // namespace OpenAPI
