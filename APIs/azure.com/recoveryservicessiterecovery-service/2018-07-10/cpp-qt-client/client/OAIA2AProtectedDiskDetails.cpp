/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIA2AProtectedDiskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIA2AProtectedDiskDetails::OAIA2AProtectedDiskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIA2AProtectedDiskDetails::OAIA2AProtectedDiskDetails() {
    this->initializeModel();
}

OAIA2AProtectedDiskDetails::~OAIA2AProtectedDiskDetails() {}

void OAIA2AProtectedDiskDetails::initializeModel() {

    m_allowed_disk_level_operation_isSet = false;
    m_allowed_disk_level_operation_isValid = false;

    m_data_pending_at_source_agent_in_mb_isSet = false;
    m_data_pending_at_source_agent_in_mb_isValid = false;

    m_data_pending_in_staging_storage_account_in_mb_isSet = false;
    m_data_pending_in_staging_storage_account_in_mb_isValid = false;

    m_dek_key_vault_arm_id_isSet = false;
    m_dek_key_vault_arm_id_isValid = false;

    m_disk_capacity_in_bytes_isSet = false;
    m_disk_capacity_in_bytes_isValid = false;

    m_disk_name_isSet = false;
    m_disk_name_isValid = false;

    m_disk_state_isSet = false;
    m_disk_state_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_disk_uri_isSet = false;
    m_disk_uri_isValid = false;

    m_is_disk_encrypted_isSet = false;
    m_is_disk_encrypted_isValid = false;

    m_is_disk_key_encrypted_isSet = false;
    m_is_disk_key_encrypted_isValid = false;

    m_kek_key_vault_arm_id_isSet = false;
    m_kek_key_vault_arm_id_isValid = false;

    m_key_identifier_isSet = false;
    m_key_identifier_isValid = false;

    m_monitoring_job_type_isSet = false;
    m_monitoring_job_type_isValid = false;

    m_monitoring_percentage_completion_isSet = false;
    m_monitoring_percentage_completion_isValid = false;

    m_primary_disk_azure_storage_account_id_isSet = false;
    m_primary_disk_azure_storage_account_id_isValid = false;

    m_primary_staging_azure_storage_account_id_isSet = false;
    m_primary_staging_azure_storage_account_id_isValid = false;

    m_recovery_azure_storage_account_id_isSet = false;
    m_recovery_azure_storage_account_id_isValid = false;

    m_recovery_disk_uri_isSet = false;
    m_recovery_disk_uri_isValid = false;

    m_resync_required_isSet = false;
    m_resync_required_isValid = false;

    m_secret_identifier_isSet = false;
    m_secret_identifier_isValid = false;
}

void OAIA2AProtectedDiskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIA2AProtectedDiskDetails::fromJsonObject(QJsonObject json) {

    m_allowed_disk_level_operation_isValid = ::OpenAPI::fromJsonValue(m_allowed_disk_level_operation, json[QString("allowedDiskLevelOperation")]);
    m_allowed_disk_level_operation_isSet = !json[QString("allowedDiskLevelOperation")].isNull() && m_allowed_disk_level_operation_isValid;

    m_data_pending_at_source_agent_in_mb_isValid = ::OpenAPI::fromJsonValue(m_data_pending_at_source_agent_in_mb, json[QString("dataPendingAtSourceAgentInMB")]);
    m_data_pending_at_source_agent_in_mb_isSet = !json[QString("dataPendingAtSourceAgentInMB")].isNull() && m_data_pending_at_source_agent_in_mb_isValid;

    m_data_pending_in_staging_storage_account_in_mb_isValid = ::OpenAPI::fromJsonValue(m_data_pending_in_staging_storage_account_in_mb, json[QString("dataPendingInStagingStorageAccountInMB")]);
    m_data_pending_in_staging_storage_account_in_mb_isSet = !json[QString("dataPendingInStagingStorageAccountInMB")].isNull() && m_data_pending_in_staging_storage_account_in_mb_isValid;

    m_dek_key_vault_arm_id_isValid = ::OpenAPI::fromJsonValue(m_dek_key_vault_arm_id, json[QString("dekKeyVaultArmId")]);
    m_dek_key_vault_arm_id_isSet = !json[QString("dekKeyVaultArmId")].isNull() && m_dek_key_vault_arm_id_isValid;

    m_disk_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_disk_capacity_in_bytes, json[QString("diskCapacityInBytes")]);
    m_disk_capacity_in_bytes_isSet = !json[QString("diskCapacityInBytes")].isNull() && m_disk_capacity_in_bytes_isValid;

    m_disk_name_isValid = ::OpenAPI::fromJsonValue(m_disk_name, json[QString("diskName")]);
    m_disk_name_isSet = !json[QString("diskName")].isNull() && m_disk_name_isValid;

    m_disk_state_isValid = ::OpenAPI::fromJsonValue(m_disk_state, json[QString("diskState")]);
    m_disk_state_isSet = !json[QString("diskState")].isNull() && m_disk_state_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_disk_uri_isValid = ::OpenAPI::fromJsonValue(m_disk_uri, json[QString("diskUri")]);
    m_disk_uri_isSet = !json[QString("diskUri")].isNull() && m_disk_uri_isValid;

    m_is_disk_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_disk_encrypted, json[QString("isDiskEncrypted")]);
    m_is_disk_encrypted_isSet = !json[QString("isDiskEncrypted")].isNull() && m_is_disk_encrypted_isValid;

    m_is_disk_key_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_disk_key_encrypted, json[QString("isDiskKeyEncrypted")]);
    m_is_disk_key_encrypted_isSet = !json[QString("isDiskKeyEncrypted")].isNull() && m_is_disk_key_encrypted_isValid;

    m_kek_key_vault_arm_id_isValid = ::OpenAPI::fromJsonValue(m_kek_key_vault_arm_id, json[QString("kekKeyVaultArmId")]);
    m_kek_key_vault_arm_id_isSet = !json[QString("kekKeyVaultArmId")].isNull() && m_kek_key_vault_arm_id_isValid;

    m_key_identifier_isValid = ::OpenAPI::fromJsonValue(m_key_identifier, json[QString("keyIdentifier")]);
    m_key_identifier_isSet = !json[QString("keyIdentifier")].isNull() && m_key_identifier_isValid;

    m_monitoring_job_type_isValid = ::OpenAPI::fromJsonValue(m_monitoring_job_type, json[QString("monitoringJobType")]);
    m_monitoring_job_type_isSet = !json[QString("monitoringJobType")].isNull() && m_monitoring_job_type_isValid;

    m_monitoring_percentage_completion_isValid = ::OpenAPI::fromJsonValue(m_monitoring_percentage_completion, json[QString("monitoringPercentageCompletion")]);
    m_monitoring_percentage_completion_isSet = !json[QString("monitoringPercentageCompletion")].isNull() && m_monitoring_percentage_completion_isValid;

    m_primary_disk_azure_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_primary_disk_azure_storage_account_id, json[QString("primaryDiskAzureStorageAccountId")]);
    m_primary_disk_azure_storage_account_id_isSet = !json[QString("primaryDiskAzureStorageAccountId")].isNull() && m_primary_disk_azure_storage_account_id_isValid;

    m_primary_staging_azure_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_primary_staging_azure_storage_account_id, json[QString("primaryStagingAzureStorageAccountId")]);
    m_primary_staging_azure_storage_account_id_isSet = !json[QString("primaryStagingAzureStorageAccountId")].isNull() && m_primary_staging_azure_storage_account_id_isValid;

    m_recovery_azure_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_storage_account_id, json[QString("recoveryAzureStorageAccountId")]);
    m_recovery_azure_storage_account_id_isSet = !json[QString("recoveryAzureStorageAccountId")].isNull() && m_recovery_azure_storage_account_id_isValid;

    m_recovery_disk_uri_isValid = ::OpenAPI::fromJsonValue(m_recovery_disk_uri, json[QString("recoveryDiskUri")]);
    m_recovery_disk_uri_isSet = !json[QString("recoveryDiskUri")].isNull() && m_recovery_disk_uri_isValid;

    m_resync_required_isValid = ::OpenAPI::fromJsonValue(m_resync_required, json[QString("resyncRequired")]);
    m_resync_required_isSet = !json[QString("resyncRequired")].isNull() && m_resync_required_isValid;

    m_secret_identifier_isValid = ::OpenAPI::fromJsonValue(m_secret_identifier, json[QString("secretIdentifier")]);
    m_secret_identifier_isSet = !json[QString("secretIdentifier")].isNull() && m_secret_identifier_isValid;
}

QString OAIA2AProtectedDiskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIA2AProtectedDiskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_disk_level_operation.size() > 0) {
        obj.insert(QString("allowedDiskLevelOperation"), ::OpenAPI::toJsonValue(m_allowed_disk_level_operation));
    }
    if (m_data_pending_at_source_agent_in_mb_isSet) {
        obj.insert(QString("dataPendingAtSourceAgentInMB"), ::OpenAPI::toJsonValue(m_data_pending_at_source_agent_in_mb));
    }
    if (m_data_pending_in_staging_storage_account_in_mb_isSet) {
        obj.insert(QString("dataPendingInStagingStorageAccountInMB"), ::OpenAPI::toJsonValue(m_data_pending_in_staging_storage_account_in_mb));
    }
    if (m_dek_key_vault_arm_id_isSet) {
        obj.insert(QString("dekKeyVaultArmId"), ::OpenAPI::toJsonValue(m_dek_key_vault_arm_id));
    }
    if (m_disk_capacity_in_bytes_isSet) {
        obj.insert(QString("diskCapacityInBytes"), ::OpenAPI::toJsonValue(m_disk_capacity_in_bytes));
    }
    if (m_disk_name_isSet) {
        obj.insert(QString("diskName"), ::OpenAPI::toJsonValue(m_disk_name));
    }
    if (m_disk_state_isSet) {
        obj.insert(QString("diskState"), ::OpenAPI::toJsonValue(m_disk_state));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_disk_uri_isSet) {
        obj.insert(QString("diskUri"), ::OpenAPI::toJsonValue(m_disk_uri));
    }
    if (m_is_disk_encrypted_isSet) {
        obj.insert(QString("isDiskEncrypted"), ::OpenAPI::toJsonValue(m_is_disk_encrypted));
    }
    if (m_is_disk_key_encrypted_isSet) {
        obj.insert(QString("isDiskKeyEncrypted"), ::OpenAPI::toJsonValue(m_is_disk_key_encrypted));
    }
    if (m_kek_key_vault_arm_id_isSet) {
        obj.insert(QString("kekKeyVaultArmId"), ::OpenAPI::toJsonValue(m_kek_key_vault_arm_id));
    }
    if (m_key_identifier_isSet) {
        obj.insert(QString("keyIdentifier"), ::OpenAPI::toJsonValue(m_key_identifier));
    }
    if (m_monitoring_job_type_isSet) {
        obj.insert(QString("monitoringJobType"), ::OpenAPI::toJsonValue(m_monitoring_job_type));
    }
    if (m_monitoring_percentage_completion_isSet) {
        obj.insert(QString("monitoringPercentageCompletion"), ::OpenAPI::toJsonValue(m_monitoring_percentage_completion));
    }
    if (m_primary_disk_azure_storage_account_id_isSet) {
        obj.insert(QString("primaryDiskAzureStorageAccountId"), ::OpenAPI::toJsonValue(m_primary_disk_azure_storage_account_id));
    }
    if (m_primary_staging_azure_storage_account_id_isSet) {
        obj.insert(QString("primaryStagingAzureStorageAccountId"), ::OpenAPI::toJsonValue(m_primary_staging_azure_storage_account_id));
    }
    if (m_recovery_azure_storage_account_id_isSet) {
        obj.insert(QString("recoveryAzureStorageAccountId"), ::OpenAPI::toJsonValue(m_recovery_azure_storage_account_id));
    }
    if (m_recovery_disk_uri_isSet) {
        obj.insert(QString("recoveryDiskUri"), ::OpenAPI::toJsonValue(m_recovery_disk_uri));
    }
    if (m_resync_required_isSet) {
        obj.insert(QString("resyncRequired"), ::OpenAPI::toJsonValue(m_resync_required));
    }
    if (m_secret_identifier_isSet) {
        obj.insert(QString("secretIdentifier"), ::OpenAPI::toJsonValue(m_secret_identifier));
    }
    return obj;
}

QList<QString> OAIA2AProtectedDiskDetails::getAllowedDiskLevelOperation() const {
    return m_allowed_disk_level_operation;
}
void OAIA2AProtectedDiskDetails::setAllowedDiskLevelOperation(const QList<QString> &allowed_disk_level_operation) {
    m_allowed_disk_level_operation = allowed_disk_level_operation;
    m_allowed_disk_level_operation_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_allowed_disk_level_operation_Set() const{
    return m_allowed_disk_level_operation_isSet;
}

bool OAIA2AProtectedDiskDetails::is_allowed_disk_level_operation_Valid() const{
    return m_allowed_disk_level_operation_isValid;
}

double OAIA2AProtectedDiskDetails::getDataPendingAtSourceAgentInMb() const {
    return m_data_pending_at_source_agent_in_mb;
}
void OAIA2AProtectedDiskDetails::setDataPendingAtSourceAgentInMb(const double &data_pending_at_source_agent_in_mb) {
    m_data_pending_at_source_agent_in_mb = data_pending_at_source_agent_in_mb;
    m_data_pending_at_source_agent_in_mb_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_data_pending_at_source_agent_in_mb_Set() const{
    return m_data_pending_at_source_agent_in_mb_isSet;
}

bool OAIA2AProtectedDiskDetails::is_data_pending_at_source_agent_in_mb_Valid() const{
    return m_data_pending_at_source_agent_in_mb_isValid;
}

double OAIA2AProtectedDiskDetails::getDataPendingInStagingStorageAccountInMb() const {
    return m_data_pending_in_staging_storage_account_in_mb;
}
void OAIA2AProtectedDiskDetails::setDataPendingInStagingStorageAccountInMb(const double &data_pending_in_staging_storage_account_in_mb) {
    m_data_pending_in_staging_storage_account_in_mb = data_pending_in_staging_storage_account_in_mb;
    m_data_pending_in_staging_storage_account_in_mb_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_data_pending_in_staging_storage_account_in_mb_Set() const{
    return m_data_pending_in_staging_storage_account_in_mb_isSet;
}

bool OAIA2AProtectedDiskDetails::is_data_pending_in_staging_storage_account_in_mb_Valid() const{
    return m_data_pending_in_staging_storage_account_in_mb_isValid;
}

QString OAIA2AProtectedDiskDetails::getDekKeyVaultArmId() const {
    return m_dek_key_vault_arm_id;
}
void OAIA2AProtectedDiskDetails::setDekKeyVaultArmId(const QString &dek_key_vault_arm_id) {
    m_dek_key_vault_arm_id = dek_key_vault_arm_id;
    m_dek_key_vault_arm_id_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_dek_key_vault_arm_id_Set() const{
    return m_dek_key_vault_arm_id_isSet;
}

bool OAIA2AProtectedDiskDetails::is_dek_key_vault_arm_id_Valid() const{
    return m_dek_key_vault_arm_id_isValid;
}

qint64 OAIA2AProtectedDiskDetails::getDiskCapacityInBytes() const {
    return m_disk_capacity_in_bytes;
}
void OAIA2AProtectedDiskDetails::setDiskCapacityInBytes(const qint64 &disk_capacity_in_bytes) {
    m_disk_capacity_in_bytes = disk_capacity_in_bytes;
    m_disk_capacity_in_bytes_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_disk_capacity_in_bytes_Set() const{
    return m_disk_capacity_in_bytes_isSet;
}

bool OAIA2AProtectedDiskDetails::is_disk_capacity_in_bytes_Valid() const{
    return m_disk_capacity_in_bytes_isValid;
}

QString OAIA2AProtectedDiskDetails::getDiskName() const {
    return m_disk_name;
}
void OAIA2AProtectedDiskDetails::setDiskName(const QString &disk_name) {
    m_disk_name = disk_name;
    m_disk_name_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_disk_name_Set() const{
    return m_disk_name_isSet;
}

bool OAIA2AProtectedDiskDetails::is_disk_name_Valid() const{
    return m_disk_name_isValid;
}

QString OAIA2AProtectedDiskDetails::getDiskState() const {
    return m_disk_state;
}
void OAIA2AProtectedDiskDetails::setDiskState(const QString &disk_state) {
    m_disk_state = disk_state;
    m_disk_state_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_disk_state_Set() const{
    return m_disk_state_isSet;
}

bool OAIA2AProtectedDiskDetails::is_disk_state_Valid() const{
    return m_disk_state_isValid;
}

QString OAIA2AProtectedDiskDetails::getDiskType() const {
    return m_disk_type;
}
void OAIA2AProtectedDiskDetails::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIA2AProtectedDiskDetails::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QString OAIA2AProtectedDiskDetails::getDiskUri() const {
    return m_disk_uri;
}
void OAIA2AProtectedDiskDetails::setDiskUri(const QString &disk_uri) {
    m_disk_uri = disk_uri;
    m_disk_uri_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_disk_uri_Set() const{
    return m_disk_uri_isSet;
}

bool OAIA2AProtectedDiskDetails::is_disk_uri_Valid() const{
    return m_disk_uri_isValid;
}

bool OAIA2AProtectedDiskDetails::isIsDiskEncrypted() const {
    return m_is_disk_encrypted;
}
void OAIA2AProtectedDiskDetails::setIsDiskEncrypted(const bool &is_disk_encrypted) {
    m_is_disk_encrypted = is_disk_encrypted;
    m_is_disk_encrypted_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_is_disk_encrypted_Set() const{
    return m_is_disk_encrypted_isSet;
}

bool OAIA2AProtectedDiskDetails::is_is_disk_encrypted_Valid() const{
    return m_is_disk_encrypted_isValid;
}

bool OAIA2AProtectedDiskDetails::isIsDiskKeyEncrypted() const {
    return m_is_disk_key_encrypted;
}
void OAIA2AProtectedDiskDetails::setIsDiskKeyEncrypted(const bool &is_disk_key_encrypted) {
    m_is_disk_key_encrypted = is_disk_key_encrypted;
    m_is_disk_key_encrypted_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_is_disk_key_encrypted_Set() const{
    return m_is_disk_key_encrypted_isSet;
}

bool OAIA2AProtectedDiskDetails::is_is_disk_key_encrypted_Valid() const{
    return m_is_disk_key_encrypted_isValid;
}

QString OAIA2AProtectedDiskDetails::getKekKeyVaultArmId() const {
    return m_kek_key_vault_arm_id;
}
void OAIA2AProtectedDiskDetails::setKekKeyVaultArmId(const QString &kek_key_vault_arm_id) {
    m_kek_key_vault_arm_id = kek_key_vault_arm_id;
    m_kek_key_vault_arm_id_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_kek_key_vault_arm_id_Set() const{
    return m_kek_key_vault_arm_id_isSet;
}

bool OAIA2AProtectedDiskDetails::is_kek_key_vault_arm_id_Valid() const{
    return m_kek_key_vault_arm_id_isValid;
}

QString OAIA2AProtectedDiskDetails::getKeyIdentifier() const {
    return m_key_identifier;
}
void OAIA2AProtectedDiskDetails::setKeyIdentifier(const QString &key_identifier) {
    m_key_identifier = key_identifier;
    m_key_identifier_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_key_identifier_Set() const{
    return m_key_identifier_isSet;
}

bool OAIA2AProtectedDiskDetails::is_key_identifier_Valid() const{
    return m_key_identifier_isValid;
}

QString OAIA2AProtectedDiskDetails::getMonitoringJobType() const {
    return m_monitoring_job_type;
}
void OAIA2AProtectedDiskDetails::setMonitoringJobType(const QString &monitoring_job_type) {
    m_monitoring_job_type = monitoring_job_type;
    m_monitoring_job_type_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_monitoring_job_type_Set() const{
    return m_monitoring_job_type_isSet;
}

bool OAIA2AProtectedDiskDetails::is_monitoring_job_type_Valid() const{
    return m_monitoring_job_type_isValid;
}

qint32 OAIA2AProtectedDiskDetails::getMonitoringPercentageCompletion() const {
    return m_monitoring_percentage_completion;
}
void OAIA2AProtectedDiskDetails::setMonitoringPercentageCompletion(const qint32 &monitoring_percentage_completion) {
    m_monitoring_percentage_completion = monitoring_percentage_completion;
    m_monitoring_percentage_completion_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_monitoring_percentage_completion_Set() const{
    return m_monitoring_percentage_completion_isSet;
}

bool OAIA2AProtectedDiskDetails::is_monitoring_percentage_completion_Valid() const{
    return m_monitoring_percentage_completion_isValid;
}

QString OAIA2AProtectedDiskDetails::getPrimaryDiskAzureStorageAccountId() const {
    return m_primary_disk_azure_storage_account_id;
}
void OAIA2AProtectedDiskDetails::setPrimaryDiskAzureStorageAccountId(const QString &primary_disk_azure_storage_account_id) {
    m_primary_disk_azure_storage_account_id = primary_disk_azure_storage_account_id;
    m_primary_disk_azure_storage_account_id_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_primary_disk_azure_storage_account_id_Set() const{
    return m_primary_disk_azure_storage_account_id_isSet;
}

bool OAIA2AProtectedDiskDetails::is_primary_disk_azure_storage_account_id_Valid() const{
    return m_primary_disk_azure_storage_account_id_isValid;
}

QString OAIA2AProtectedDiskDetails::getPrimaryStagingAzureStorageAccountId() const {
    return m_primary_staging_azure_storage_account_id;
}
void OAIA2AProtectedDiskDetails::setPrimaryStagingAzureStorageAccountId(const QString &primary_staging_azure_storage_account_id) {
    m_primary_staging_azure_storage_account_id = primary_staging_azure_storage_account_id;
    m_primary_staging_azure_storage_account_id_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_primary_staging_azure_storage_account_id_Set() const{
    return m_primary_staging_azure_storage_account_id_isSet;
}

bool OAIA2AProtectedDiskDetails::is_primary_staging_azure_storage_account_id_Valid() const{
    return m_primary_staging_azure_storage_account_id_isValid;
}

QString OAIA2AProtectedDiskDetails::getRecoveryAzureStorageAccountId() const {
    return m_recovery_azure_storage_account_id;
}
void OAIA2AProtectedDiskDetails::setRecoveryAzureStorageAccountId(const QString &recovery_azure_storage_account_id) {
    m_recovery_azure_storage_account_id = recovery_azure_storage_account_id;
    m_recovery_azure_storage_account_id_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_recovery_azure_storage_account_id_Set() const{
    return m_recovery_azure_storage_account_id_isSet;
}

bool OAIA2AProtectedDiskDetails::is_recovery_azure_storage_account_id_Valid() const{
    return m_recovery_azure_storage_account_id_isValid;
}

QString OAIA2AProtectedDiskDetails::getRecoveryDiskUri() const {
    return m_recovery_disk_uri;
}
void OAIA2AProtectedDiskDetails::setRecoveryDiskUri(const QString &recovery_disk_uri) {
    m_recovery_disk_uri = recovery_disk_uri;
    m_recovery_disk_uri_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_recovery_disk_uri_Set() const{
    return m_recovery_disk_uri_isSet;
}

bool OAIA2AProtectedDiskDetails::is_recovery_disk_uri_Valid() const{
    return m_recovery_disk_uri_isValid;
}

bool OAIA2AProtectedDiskDetails::isResyncRequired() const {
    return m_resync_required;
}
void OAIA2AProtectedDiskDetails::setResyncRequired(const bool &resync_required) {
    m_resync_required = resync_required;
    m_resync_required_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_resync_required_Set() const{
    return m_resync_required_isSet;
}

bool OAIA2AProtectedDiskDetails::is_resync_required_Valid() const{
    return m_resync_required_isValid;
}

QString OAIA2AProtectedDiskDetails::getSecretIdentifier() const {
    return m_secret_identifier;
}
void OAIA2AProtectedDiskDetails::setSecretIdentifier(const QString &secret_identifier) {
    m_secret_identifier = secret_identifier;
    m_secret_identifier_isSet = true;
}

bool OAIA2AProtectedDiskDetails::is_secret_identifier_Set() const{
    return m_secret_identifier_isSet;
}

bool OAIA2AProtectedDiskDetails::is_secret_identifier_Valid() const{
    return m_secret_identifier_isValid;
}

bool OAIA2AProtectedDiskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_disk_level_operation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pending_at_source_agent_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_pending_in_staging_storage_account_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dek_key_vault_arm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disk_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_disk_key_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kek_key_vault_arm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_job_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_percentage_completion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_disk_azure_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_staging_azure_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_disk_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resync_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIA2AProtectedDiskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
