/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMwareVirtualMachineDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMwareVirtualMachineDetails::OAIVMwareVirtualMachineDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMwareVirtualMachineDetails::OAIVMwareVirtualMachineDetails() {
    this->initializeModel();
}

OAIVMwareVirtualMachineDetails::~OAIVMwareVirtualMachineDetails() {}

void OAIVMwareVirtualMachineDetails::initializeModel() {

    m_agent_generated_id_isSet = false;
    m_agent_generated_id_isValid = false;

    m_agent_installed_isSet = false;
    m_agent_installed_isValid = false;

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_discovery_type_isSet = false;
    m_discovery_type_isValid = false;

    m_disk_details_isSet = false;
    m_disk_details_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_powered_on_isSet = false;
    m_powered_on_isValid = false;

    m_v_center_infrastructure_id_isSet = false;
    m_v_center_infrastructure_id_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIVMwareVirtualMachineDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMwareVirtualMachineDetails::fromJsonObject(QJsonObject json) {

    m_agent_generated_id_isValid = ::OpenAPI::fromJsonValue(m_agent_generated_id, json[QString("agentGeneratedId")]);
    m_agent_generated_id_isSet = !json[QString("agentGeneratedId")].isNull() && m_agent_generated_id_isValid;

    m_agent_installed_isValid = ::OpenAPI::fromJsonValue(m_agent_installed, json[QString("agentInstalled")]);
    m_agent_installed_isSet = !json[QString("agentInstalled")].isNull() && m_agent_installed_isValid;

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_discovery_type_isValid = ::OpenAPI::fromJsonValue(m_discovery_type, json[QString("discoveryType")]);
    m_discovery_type_isSet = !json[QString("discoveryType")].isNull() && m_discovery_type_isValid;

    m_disk_details_isValid = ::OpenAPI::fromJsonValue(m_disk_details, json[QString("diskDetails")]);
    m_disk_details_isSet = !json[QString("diskDetails")].isNull() && m_disk_details_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_powered_on_isValid = ::OpenAPI::fromJsonValue(m_powered_on, json[QString("poweredOn")]);
    m_powered_on_isSet = !json[QString("poweredOn")].isNull() && m_powered_on_isValid;

    m_v_center_infrastructure_id_isValid = ::OpenAPI::fromJsonValue(m_v_center_infrastructure_id, json[QString("vCenterInfrastructureId")]);
    m_v_center_infrastructure_id_isSet = !json[QString("vCenterInfrastructureId")].isNull() && m_v_center_infrastructure_id_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("validationErrors")]);
    m_validation_errors_isSet = !json[QString("validationErrors")].isNull() && m_validation_errors_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIVMwareVirtualMachineDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMwareVirtualMachineDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_generated_id_isSet) {
        obj.insert(QString("agentGeneratedId"), ::OpenAPI::toJsonValue(m_agent_generated_id));
    }
    if (m_agent_installed_isSet) {
        obj.insert(QString("agentInstalled"), ::OpenAPI::toJsonValue(m_agent_installed));
    }
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_discovery_type_isSet) {
        obj.insert(QString("discoveryType"), ::OpenAPI::toJsonValue(m_discovery_type));
    }
    if (m_disk_details.size() > 0) {
        obj.insert(QString("diskDetails"), ::OpenAPI::toJsonValue(m_disk_details));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_powered_on_isSet) {
        obj.insert(QString("poweredOn"), ::OpenAPI::toJsonValue(m_powered_on));
    }
    if (m_v_center_infrastructure_id_isSet) {
        obj.insert(QString("vCenterInfrastructureId"), ::OpenAPI::toJsonValue(m_v_center_infrastructure_id));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("validationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIVMwareVirtualMachineDetails::getAgentGeneratedId() const {
    return m_agent_generated_id;
}
void OAIVMwareVirtualMachineDetails::setAgentGeneratedId(const QString &agent_generated_id) {
    m_agent_generated_id = agent_generated_id;
    m_agent_generated_id_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_agent_generated_id_Set() const{
    return m_agent_generated_id_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_agent_generated_id_Valid() const{
    return m_agent_generated_id_isValid;
}

QString OAIVMwareVirtualMachineDetails::getAgentInstalled() const {
    return m_agent_installed;
}
void OAIVMwareVirtualMachineDetails::setAgentInstalled(const QString &agent_installed) {
    m_agent_installed = agent_installed;
    m_agent_installed_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_agent_installed_Set() const{
    return m_agent_installed_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_agent_installed_Valid() const{
    return m_agent_installed_isValid;
}

QString OAIVMwareVirtualMachineDetails::getAgentVersion() const {
    return m_agent_version;
}
void OAIVMwareVirtualMachineDetails::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QString OAIVMwareVirtualMachineDetails::getDiscoveryType() const {
    return m_discovery_type;
}
void OAIVMwareVirtualMachineDetails::setDiscoveryType(const QString &discovery_type) {
    m_discovery_type = discovery_type;
    m_discovery_type_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_discovery_type_Set() const{
    return m_discovery_type_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_discovery_type_Valid() const{
    return m_discovery_type_isValid;
}

QList<OAIInMageDiskDetails> OAIVMwareVirtualMachineDetails::getDiskDetails() const {
    return m_disk_details;
}
void OAIVMwareVirtualMachineDetails::setDiskDetails(const QList<OAIInMageDiskDetails> &disk_details) {
    m_disk_details = disk_details;
    m_disk_details_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_disk_details_Set() const{
    return m_disk_details_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_disk_details_Valid() const{
    return m_disk_details_isValid;
}

QString OAIVMwareVirtualMachineDetails::getIpAddress() const {
    return m_ip_address;
}
void OAIVMwareVirtualMachineDetails::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIVMwareVirtualMachineDetails::getOsType() const {
    return m_os_type;
}
void OAIVMwareVirtualMachineDetails::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIVMwareVirtualMachineDetails::getPoweredOn() const {
    return m_powered_on;
}
void OAIVMwareVirtualMachineDetails::setPoweredOn(const QString &powered_on) {
    m_powered_on = powered_on;
    m_powered_on_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_powered_on_Set() const{
    return m_powered_on_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_powered_on_Valid() const{
    return m_powered_on_isValid;
}

QString OAIVMwareVirtualMachineDetails::getVCenterInfrastructureId() const {
    return m_v_center_infrastructure_id;
}
void OAIVMwareVirtualMachineDetails::setVCenterInfrastructureId(const QString &v_center_infrastructure_id) {
    m_v_center_infrastructure_id = v_center_infrastructure_id;
    m_v_center_infrastructure_id_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_v_center_infrastructure_id_Set() const{
    return m_v_center_infrastructure_id_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_v_center_infrastructure_id_Valid() const{
    return m_v_center_infrastructure_id_isValid;
}

QList<OAIHealthError> OAIVMwareVirtualMachineDetails::getValidationErrors() const {
    return m_validation_errors;
}
void OAIVMwareVirtualMachineDetails::setValidationErrors(const QList<OAIHealthError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

QString OAIVMwareVirtualMachineDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIVMwareVirtualMachineDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIVMwareVirtualMachineDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIVMwareVirtualMachineDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIVMwareVirtualMachineDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_generated_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_powered_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_center_infrastructure_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMwareVirtualMachineDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
