/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISupportedOSDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISupportedOSDetails::OAISupportedOSDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISupportedOSDetails::OAISupportedOSDetails() {
    this->initializeModel();
}

OAISupportedOSDetails::~OAISupportedOSDetails() {}

void OAISupportedOSDetails::initializeModel() {

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_os_versions_isSet = false;
    m_os_versions_isValid = false;
}

void OAISupportedOSDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISupportedOSDetails::fromJsonObject(QJsonObject json) {

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("osName")]);
    m_os_name_isSet = !json[QString("osName")].isNull() && m_os_name_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_os_versions_isValid = ::OpenAPI::fromJsonValue(m_os_versions, json[QString("osVersions")]);
    m_os_versions_isSet = !json[QString("osVersions")].isNull() && m_os_versions_isValid;
}

QString OAISupportedOSDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISupportedOSDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_os_name_isSet) {
        obj.insert(QString("osName"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_os_versions.size() > 0) {
        obj.insert(QString("osVersions"), ::OpenAPI::toJsonValue(m_os_versions));
    }
    return obj;
}

QString OAISupportedOSDetails::getOsName() const {
    return m_os_name;
}
void OAISupportedOSDetails::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAISupportedOSDetails::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAISupportedOSDetails::is_os_name_Valid() const{
    return m_os_name_isValid;
}

QString OAISupportedOSDetails::getOsType() const {
    return m_os_type;
}
void OAISupportedOSDetails::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAISupportedOSDetails::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAISupportedOSDetails::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QList<OAIOSVersionWrapper> OAISupportedOSDetails::getOsVersions() const {
    return m_os_versions;
}
void OAISupportedOSDetails::setOsVersions(const QList<OAIOSVersionWrapper> &os_versions) {
    m_os_versions = os_versions;
    m_os_versions_isSet = true;
}

bool OAISupportedOSDetails::is_os_versions_Set() const{
    return m_os_versions_isSet;
}

bool OAISupportedOSDetails::is_os_versions_Valid() const{
    return m_os_versions_isValid;
}

bool OAISupportedOSDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISupportedOSDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
