/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVMwareDetails.h
 *
 * Store the fabric details specific to the VMware fabric.
 */

#ifndef OAIVMwareDetails_H
#define OAIVMwareDetails_H

#include <QJsonObject>

#include "OAIFabricSpecificDetails.h"
#include "OAIMasterTargetServer.h"
#include "OAIProcessServer.h"
#include "OAIRunAsAccount.h"
#include "OAIVersionDetails.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVersionDetails;
class OAIMasterTargetServer;
class OAIProcessServer;
class OAIRunAsAccount;

class OAIVMwareDetails : public OAIObject {
public:
    OAIVMwareDetails();
    OAIVMwareDetails(QString json);
    ~OAIVMwareDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAgentCount() const;
    void setAgentCount(const QString &agent_count);
    bool is_agent_count_Set() const;
    bool is_agent_count_Valid() const;

    QDateTime getAgentExpiryDate() const;
    void setAgentExpiryDate(const QDateTime &agent_expiry_date);
    bool is_agent_expiry_date_Set() const;
    bool is_agent_expiry_date_Valid() const;

    QString getAgentVersion() const;
    void setAgentVersion(const QString &agent_version);
    bool is_agent_version_Set() const;
    bool is_agent_version_Valid() const;

    OAIVersionDetails getAgentVersionDetails() const;
    void setAgentVersionDetails(const OAIVersionDetails &agent_version_details);
    bool is_agent_version_details_Set() const;
    bool is_agent_version_details_Valid() const;

    qint64 getAvailableMemoryInBytes() const;
    void setAvailableMemoryInBytes(const qint64 &available_memory_in_bytes);
    bool is_available_memory_in_bytes_Set() const;
    bool is_available_memory_in_bytes_Valid() const;

    qint64 getAvailableSpaceInBytes() const;
    void setAvailableSpaceInBytes(const qint64 &available_space_in_bytes);
    bool is_available_space_in_bytes_Set() const;
    bool is_available_space_in_bytes_Valid() const;

    QString getCpuLoad() const;
    void setCpuLoad(const QString &cpu_load);
    bool is_cpu_load_Set() const;
    bool is_cpu_load_Valid() const;

    QString getCpuLoadStatus() const;
    void setCpuLoadStatus(const QString &cpu_load_status);
    bool is_cpu_load_status_Set() const;
    bool is_cpu_load_status_Valid() const;

    QString getCsServiceStatus() const;
    void setCsServiceStatus(const QString &cs_service_status);
    bool is_cs_service_status_Set() const;
    bool is_cs_service_status_Valid() const;

    QString getDatabaseServerLoad() const;
    void setDatabaseServerLoad(const QString &database_server_load);
    bool is_database_server_load_Set() const;
    bool is_database_server_load_Valid() const;

    QString getDatabaseServerLoadStatus() const;
    void setDatabaseServerLoadStatus(const QString &database_server_load_status);
    bool is_database_server_load_status_Set() const;
    bool is_database_server_load_status_Valid() const;

    QString getHostName() const;
    void setHostName(const QString &host_name);
    bool is_host_name_Set() const;
    bool is_host_name_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QDateTime getLastHeartbeat() const;
    void setLastHeartbeat(const QDateTime &last_heartbeat);
    bool is_last_heartbeat_Set() const;
    bool is_last_heartbeat_Valid() const;

    QList<OAIMasterTargetServer> getMasterTargetServers() const;
    void setMasterTargetServers(const QList<OAIMasterTargetServer> &master_target_servers);
    bool is_master_target_servers_Set() const;
    bool is_master_target_servers_Valid() const;

    QString getMemoryUsageStatus() const;
    void setMemoryUsageStatus(const QString &memory_usage_status);
    bool is_memory_usage_status_Set() const;
    bool is_memory_usage_status_Valid() const;

    QString getProcessServerCount() const;
    void setProcessServerCount(const QString &process_server_count);
    bool is_process_server_count_Set() const;
    bool is_process_server_count_Valid() const;

    QList<OAIProcessServer> getProcessServers() const;
    void setProcessServers(const QList<OAIProcessServer> &process_servers);
    bool is_process_servers_Set() const;
    bool is_process_servers_Valid() const;

    QString getProtectedServers() const;
    void setProtectedServers(const QString &protected_servers);
    bool is_protected_servers_Set() const;
    bool is_protected_servers_Valid() const;

    QString getPsTemplateVersion() const;
    void setPsTemplateVersion(const QString &ps_template_version);
    bool is_ps_template_version_Set() const;
    bool is_ps_template_version_Valid() const;

    QString getReplicationPairCount() const;
    void setReplicationPairCount(const QString &replication_pair_count);
    bool is_replication_pair_count_Set() const;
    bool is_replication_pair_count_Valid() const;

    QList<OAIRunAsAccount> getRunAsAccounts() const;
    void setRunAsAccounts(const QList<OAIRunAsAccount> &run_as_accounts);
    bool is_run_as_accounts_Set() const;
    bool is_run_as_accounts_Valid() const;

    QString getSpaceUsageStatus() const;
    void setSpaceUsageStatus(const QString &space_usage_status);
    bool is_space_usage_status_Set() const;
    bool is_space_usage_status_Valid() const;

    QDateTime getSslCertExpiryDate() const;
    void setSslCertExpiryDate(const QDateTime &ssl_cert_expiry_date);
    bool is_ssl_cert_expiry_date_Set() const;
    bool is_ssl_cert_expiry_date_Valid() const;

    qint32 getSslCertExpiryRemainingDays() const;
    void setSslCertExpiryRemainingDays(const qint32 &ssl_cert_expiry_remaining_days);
    bool is_ssl_cert_expiry_remaining_days_Set() const;
    bool is_ssl_cert_expiry_remaining_days_Valid() const;

    QString getSystemLoad() const;
    void setSystemLoad(const QString &system_load);
    bool is_system_load_Set() const;
    bool is_system_load_Valid() const;

    QString getSystemLoadStatus() const;
    void setSystemLoadStatus(const QString &system_load_status);
    bool is_system_load_status_Set() const;
    bool is_system_load_status_Valid() const;

    qint64 getTotalMemoryInBytes() const;
    void setTotalMemoryInBytes(const qint64 &total_memory_in_bytes);
    bool is_total_memory_in_bytes_Set() const;
    bool is_total_memory_in_bytes_Valid() const;

    qint64 getTotalSpaceInBytes() const;
    void setTotalSpaceInBytes(const qint64 &total_space_in_bytes);
    bool is_total_space_in_bytes_Set() const;
    bool is_total_space_in_bytes_Valid() const;

    QString getVersionStatus() const;
    void setVersionStatus(const QString &version_status);
    bool is_version_status_Set() const;
    bool is_version_status_Valid() const;

    QString getWebLoad() const;
    void setWebLoad(const QString &web_load);
    bool is_web_load_Set() const;
    bool is_web_load_Valid() const;

    QString getWebLoadStatus() const;
    void setWebLoadStatus(const QString &web_load_status);
    bool is_web_load_status_Set() const;
    bool is_web_load_status_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_agent_count;
    bool m_agent_count_isSet;
    bool m_agent_count_isValid;

    QDateTime m_agent_expiry_date;
    bool m_agent_expiry_date_isSet;
    bool m_agent_expiry_date_isValid;

    QString m_agent_version;
    bool m_agent_version_isSet;
    bool m_agent_version_isValid;

    OAIVersionDetails m_agent_version_details;
    bool m_agent_version_details_isSet;
    bool m_agent_version_details_isValid;

    qint64 m_available_memory_in_bytes;
    bool m_available_memory_in_bytes_isSet;
    bool m_available_memory_in_bytes_isValid;

    qint64 m_available_space_in_bytes;
    bool m_available_space_in_bytes_isSet;
    bool m_available_space_in_bytes_isValid;

    QString m_cpu_load;
    bool m_cpu_load_isSet;
    bool m_cpu_load_isValid;

    QString m_cpu_load_status;
    bool m_cpu_load_status_isSet;
    bool m_cpu_load_status_isValid;

    QString m_cs_service_status;
    bool m_cs_service_status_isSet;
    bool m_cs_service_status_isValid;

    QString m_database_server_load;
    bool m_database_server_load_isSet;
    bool m_database_server_load_isValid;

    QString m_database_server_load_status;
    bool m_database_server_load_status_isSet;
    bool m_database_server_load_status_isValid;

    QString m_host_name;
    bool m_host_name_isSet;
    bool m_host_name_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QDateTime m_last_heartbeat;
    bool m_last_heartbeat_isSet;
    bool m_last_heartbeat_isValid;

    QList<OAIMasterTargetServer> m_master_target_servers;
    bool m_master_target_servers_isSet;
    bool m_master_target_servers_isValid;

    QString m_memory_usage_status;
    bool m_memory_usage_status_isSet;
    bool m_memory_usage_status_isValid;

    QString m_process_server_count;
    bool m_process_server_count_isSet;
    bool m_process_server_count_isValid;

    QList<OAIProcessServer> m_process_servers;
    bool m_process_servers_isSet;
    bool m_process_servers_isValid;

    QString m_protected_servers;
    bool m_protected_servers_isSet;
    bool m_protected_servers_isValid;

    QString m_ps_template_version;
    bool m_ps_template_version_isSet;
    bool m_ps_template_version_isValid;

    QString m_replication_pair_count;
    bool m_replication_pair_count_isSet;
    bool m_replication_pair_count_isValid;

    QList<OAIRunAsAccount> m_run_as_accounts;
    bool m_run_as_accounts_isSet;
    bool m_run_as_accounts_isValid;

    QString m_space_usage_status;
    bool m_space_usage_status_isSet;
    bool m_space_usage_status_isValid;

    QDateTime m_ssl_cert_expiry_date;
    bool m_ssl_cert_expiry_date_isSet;
    bool m_ssl_cert_expiry_date_isValid;

    qint32 m_ssl_cert_expiry_remaining_days;
    bool m_ssl_cert_expiry_remaining_days_isSet;
    bool m_ssl_cert_expiry_remaining_days_isValid;

    QString m_system_load;
    bool m_system_load_isSet;
    bool m_system_load_isValid;

    QString m_system_load_status;
    bool m_system_load_status_isSet;
    bool m_system_load_status_isValid;

    qint64 m_total_memory_in_bytes;
    bool m_total_memory_in_bytes_isSet;
    bool m_total_memory_in_bytes_isValid;

    qint64 m_total_space_in_bytes;
    bool m_total_space_in_bytes_isSet;
    bool m_total_space_in_bytes_isValid;

    QString m_version_status;
    bool m_version_status_isSet;
    bool m_version_status_isValid;

    QString m_web_load;
    bool m_web_load_isSet;
    bool m_web_load_isValid;

    QString m_web_load_status;
    bool m_web_load_status_isSet;
    bool m_web_load_status_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVMwareDetails)

#endif // OAIVMwareDetails_H
