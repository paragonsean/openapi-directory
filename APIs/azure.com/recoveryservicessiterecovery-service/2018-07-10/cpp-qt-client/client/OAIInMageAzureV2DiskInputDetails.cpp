/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageAzureV2DiskInputDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageAzureV2DiskInputDetails::OAIInMageAzureV2DiskInputDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageAzureV2DiskInputDetails::OAIInMageAzureV2DiskInputDetails() {
    this->initializeModel();
}

OAIInMageAzureV2DiskInputDetails::~OAIInMageAzureV2DiskInputDetails() {}

void OAIInMageAzureV2DiskInputDetails::initializeModel() {

    m_disk_encryption_set_id_isSet = false;
    m_disk_encryption_set_id_isValid = false;

    m_disk_id_isSet = false;
    m_disk_id_isValid = false;

    m_disk_type_isSet = false;
    m_disk_type_isValid = false;

    m_log_storage_account_id_isSet = false;
    m_log_storage_account_id_isValid = false;
}

void OAIInMageAzureV2DiskInputDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageAzureV2DiskInputDetails::fromJsonObject(QJsonObject json) {

    m_disk_encryption_set_id_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_set_id, json[QString("diskEncryptionSetId")]);
    m_disk_encryption_set_id_isSet = !json[QString("diskEncryptionSetId")].isNull() && m_disk_encryption_set_id_isValid;

    m_disk_id_isValid = ::OpenAPI::fromJsonValue(m_disk_id, json[QString("diskId")]);
    m_disk_id_isSet = !json[QString("diskId")].isNull() && m_disk_id_isValid;

    m_disk_type_isValid = ::OpenAPI::fromJsonValue(m_disk_type, json[QString("diskType")]);
    m_disk_type_isSet = !json[QString("diskType")].isNull() && m_disk_type_isValid;

    m_log_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_log_storage_account_id, json[QString("logStorageAccountId")]);
    m_log_storage_account_id_isSet = !json[QString("logStorageAccountId")].isNull() && m_log_storage_account_id_isValid;
}

QString OAIInMageAzureV2DiskInputDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageAzureV2DiskInputDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_encryption_set_id_isSet) {
        obj.insert(QString("diskEncryptionSetId"), ::OpenAPI::toJsonValue(m_disk_encryption_set_id));
    }
    if (m_disk_id_isSet) {
        obj.insert(QString("diskId"), ::OpenAPI::toJsonValue(m_disk_id));
    }
    if (m_disk_type_isSet) {
        obj.insert(QString("diskType"), ::OpenAPI::toJsonValue(m_disk_type));
    }
    if (m_log_storage_account_id_isSet) {
        obj.insert(QString("logStorageAccountId"), ::OpenAPI::toJsonValue(m_log_storage_account_id));
    }
    return obj;
}

QString OAIInMageAzureV2DiskInputDetails::getDiskEncryptionSetId() const {
    return m_disk_encryption_set_id;
}
void OAIInMageAzureV2DiskInputDetails::setDiskEncryptionSetId(const QString &disk_encryption_set_id) {
    m_disk_encryption_set_id = disk_encryption_set_id;
    m_disk_encryption_set_id_isSet = true;
}

bool OAIInMageAzureV2DiskInputDetails::is_disk_encryption_set_id_Set() const{
    return m_disk_encryption_set_id_isSet;
}

bool OAIInMageAzureV2DiskInputDetails::is_disk_encryption_set_id_Valid() const{
    return m_disk_encryption_set_id_isValid;
}

QString OAIInMageAzureV2DiskInputDetails::getDiskId() const {
    return m_disk_id;
}
void OAIInMageAzureV2DiskInputDetails::setDiskId(const QString &disk_id) {
    m_disk_id = disk_id;
    m_disk_id_isSet = true;
}

bool OAIInMageAzureV2DiskInputDetails::is_disk_id_Set() const{
    return m_disk_id_isSet;
}

bool OAIInMageAzureV2DiskInputDetails::is_disk_id_Valid() const{
    return m_disk_id_isValid;
}

QString OAIInMageAzureV2DiskInputDetails::getDiskType() const {
    return m_disk_type;
}
void OAIInMageAzureV2DiskInputDetails::setDiskType(const QString &disk_type) {
    m_disk_type = disk_type;
    m_disk_type_isSet = true;
}

bool OAIInMageAzureV2DiskInputDetails::is_disk_type_Set() const{
    return m_disk_type_isSet;
}

bool OAIInMageAzureV2DiskInputDetails::is_disk_type_Valid() const{
    return m_disk_type_isValid;
}

QString OAIInMageAzureV2DiskInputDetails::getLogStorageAccountId() const {
    return m_log_storage_account_id;
}
void OAIInMageAzureV2DiskInputDetails::setLogStorageAccountId(const QString &log_storage_account_id) {
    m_log_storage_account_id = log_storage_account_id;
    m_log_storage_account_id_isSet = true;
}

bool OAIInMageAzureV2DiskInputDetails::is_log_storage_account_id_Set() const{
    return m_log_storage_account_id_isSet;
}

bool OAIInMageAzureV2DiskInputDetails::is_log_storage_account_id_Valid() const{
    return m_log_storage_account_id_isValid;
}

bool OAIInMageAzureV2DiskInputDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_encryption_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageAzureV2DiskInputDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
