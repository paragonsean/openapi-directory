/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataStore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataStore::OAIDataStore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataStore::OAIDataStore() {
    this->initializeModel();
}

OAIDataStore::~OAIDataStore() {}

void OAIDataStore::initializeModel() {

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_free_space_isSet = false;
    m_free_space_isValid = false;

    m_symbolic_name_isSet = false;
    m_symbolic_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIDataStore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataStore::fromJsonObject(QJsonObject json) {

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_free_space_isValid = ::OpenAPI::fromJsonValue(m_free_space, json[QString("freeSpace")]);
    m_free_space_isSet = !json[QString("freeSpace")].isNull() && m_free_space_isValid;

    m_symbolic_name_isValid = ::OpenAPI::fromJsonValue(m_symbolic_name, json[QString("symbolicName")]);
    m_symbolic_name_isSet = !json[QString("symbolicName")].isNull() && m_symbolic_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIDataStore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataStore::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_isSet) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_free_space_isSet) {
        obj.insert(QString("freeSpace"), ::OpenAPI::toJsonValue(m_free_space));
    }
    if (m_symbolic_name_isSet) {
        obj.insert(QString("symbolicName"), ::OpenAPI::toJsonValue(m_symbolic_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAIDataStore::getCapacity() const {
    return m_capacity;
}
void OAIDataStore::setCapacity(const QString &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIDataStore::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIDataStore::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QString OAIDataStore::getFreeSpace() const {
    return m_free_space;
}
void OAIDataStore::setFreeSpace(const QString &free_space) {
    m_free_space = free_space;
    m_free_space_isSet = true;
}

bool OAIDataStore::is_free_space_Set() const{
    return m_free_space_isSet;
}

bool OAIDataStore::is_free_space_Valid() const{
    return m_free_space_isValid;
}

QString OAIDataStore::getSymbolicName() const {
    return m_symbolic_name;
}
void OAIDataStore::setSymbolicName(const QString &symbolic_name) {
    m_symbolic_name = symbolic_name;
    m_symbolic_name_isSet = true;
}

bool OAIDataStore::is_symbolic_name_Set() const{
    return m_symbolic_name_isSet;
}

bool OAIDataStore::is_symbolic_name_Valid() const{
    return m_symbolic_name_isValid;
}

QString OAIDataStore::getType() const {
    return m_type;
}
void OAIDataStore::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataStore::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataStore::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDataStore::getUuid() const {
    return m_uuid;
}
void OAIDataStore::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIDataStore::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIDataStore::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIDataStore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_space_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symbolic_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataStore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
