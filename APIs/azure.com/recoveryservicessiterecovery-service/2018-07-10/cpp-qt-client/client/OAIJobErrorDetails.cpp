/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobErrorDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobErrorDetails::OAIJobErrorDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobErrorDetails::OAIJobErrorDetails() {
    this->initializeModel();
}

OAIJobErrorDetails::~OAIJobErrorDetails() {}

void OAIJobErrorDetails::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_error_level_isSet = false;
    m_error_level_isValid = false;

    m_provider_error_details_isSet = false;
    m_provider_error_details_isValid = false;

    m_service_error_details_isSet = false;
    m_service_error_details_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;
}

void OAIJobErrorDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobErrorDetails::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_error_level_isValid = ::OpenAPI::fromJsonValue(m_error_level, json[QString("errorLevel")]);
    m_error_level_isSet = !json[QString("errorLevel")].isNull() && m_error_level_isValid;

    m_provider_error_details_isValid = ::OpenAPI::fromJsonValue(m_provider_error_details, json[QString("providerErrorDetails")]);
    m_provider_error_details_isSet = !json[QString("providerErrorDetails")].isNull() && m_provider_error_details_isValid;

    m_service_error_details_isValid = ::OpenAPI::fromJsonValue(m_service_error_details, json[QString("serviceErrorDetails")]);
    m_service_error_details_isSet = !json[QString("serviceErrorDetails")].isNull() && m_service_error_details_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("taskId")]);
    m_task_id_isSet = !json[QString("taskId")].isNull() && m_task_id_isValid;
}

QString OAIJobErrorDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobErrorDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_error_level_isSet) {
        obj.insert(QString("errorLevel"), ::OpenAPI::toJsonValue(m_error_level));
    }
    if (m_provider_error_details.isSet()) {
        obj.insert(QString("providerErrorDetails"), ::OpenAPI::toJsonValue(m_provider_error_details));
    }
    if (m_service_error_details.isSet()) {
        obj.insert(QString("serviceErrorDetails"), ::OpenAPI::toJsonValue(m_service_error_details));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("taskId"), ::OpenAPI::toJsonValue(m_task_id));
    }
    return obj;
}

QDateTime OAIJobErrorDetails::getCreationTime() const {
    return m_creation_time;
}
void OAIJobErrorDetails::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIJobErrorDetails::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIJobErrorDetails::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIJobErrorDetails::getErrorLevel() const {
    return m_error_level;
}
void OAIJobErrorDetails::setErrorLevel(const QString &error_level) {
    m_error_level = error_level;
    m_error_level_isSet = true;
}

bool OAIJobErrorDetails::is_error_level_Set() const{
    return m_error_level_isSet;
}

bool OAIJobErrorDetails::is_error_level_Valid() const{
    return m_error_level_isValid;
}

OAIProviderError OAIJobErrorDetails::getProviderErrorDetails() const {
    return m_provider_error_details;
}
void OAIJobErrorDetails::setProviderErrorDetails(const OAIProviderError &provider_error_details) {
    m_provider_error_details = provider_error_details;
    m_provider_error_details_isSet = true;
}

bool OAIJobErrorDetails::is_provider_error_details_Set() const{
    return m_provider_error_details_isSet;
}

bool OAIJobErrorDetails::is_provider_error_details_Valid() const{
    return m_provider_error_details_isValid;
}

OAIServiceError OAIJobErrorDetails::getServiceErrorDetails() const {
    return m_service_error_details;
}
void OAIJobErrorDetails::setServiceErrorDetails(const OAIServiceError &service_error_details) {
    m_service_error_details = service_error_details;
    m_service_error_details_isSet = true;
}

bool OAIJobErrorDetails::is_service_error_details_Set() const{
    return m_service_error_details_isSet;
}

bool OAIJobErrorDetails::is_service_error_details_Valid() const{
    return m_service_error_details_isValid;
}

QString OAIJobErrorDetails::getTaskId() const {
    return m_task_id;
}
void OAIJobErrorDetails::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIJobErrorDetails::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIJobErrorDetails::is_task_id_Valid() const{
    return m_task_id_isValid;
}

bool OAIJobErrorDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobErrorDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
