/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventProperties::OAIEventProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventProperties::OAIEventProperties() {
    this->initializeModel();
}

OAIEventProperties::~OAIEventProperties() {}

void OAIEventProperties::initializeModel() {

    m_affected_object_friendly_name_isSet = false;
    m_affected_object_friendly_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_code_isSet = false;
    m_event_code_isValid = false;

    m_event_specific_details_isSet = false;
    m_event_specific_details_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_fabric_id_isSet = false;
    m_fabric_id_isValid = false;

    m_health_errors_isSet = false;
    m_health_errors_isValid = false;

    m_provider_specific_details_isSet = false;
    m_provider_specific_details_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_time_of_occurrence_isSet = false;
    m_time_of_occurrence_isValid = false;
}

void OAIEventProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventProperties::fromJsonObject(QJsonObject json) {

    m_affected_object_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_affected_object_friendly_name, json[QString("affectedObjectFriendlyName")]);
    m_affected_object_friendly_name_isSet = !json[QString("affectedObjectFriendlyName")].isNull() && m_affected_object_friendly_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_code_isValid = ::OpenAPI::fromJsonValue(m_event_code, json[QString("eventCode")]);
    m_event_code_isSet = !json[QString("eventCode")].isNull() && m_event_code_isValid;

    m_event_specific_details_isValid = ::OpenAPI::fromJsonValue(m_event_specific_details, json[QString("eventSpecificDetails")]);
    m_event_specific_details_isSet = !json[QString("eventSpecificDetails")].isNull() && m_event_specific_details_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_fabric_id_isValid = ::OpenAPI::fromJsonValue(m_fabric_id, json[QString("fabricId")]);
    m_fabric_id_isSet = !json[QString("fabricId")].isNull() && m_fabric_id_isValid;

    m_health_errors_isValid = ::OpenAPI::fromJsonValue(m_health_errors, json[QString("healthErrors")]);
    m_health_errors_isSet = !json[QString("healthErrors")].isNull() && m_health_errors_isValid;

    m_provider_specific_details_isValid = ::OpenAPI::fromJsonValue(m_provider_specific_details, json[QString("providerSpecificDetails")]);
    m_provider_specific_details_isSet = !json[QString("providerSpecificDetails")].isNull() && m_provider_specific_details_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_time_of_occurrence_isValid = ::OpenAPI::fromJsonValue(m_time_of_occurrence, json[QString("timeOfOccurrence")]);
    m_time_of_occurrence_isSet = !json[QString("timeOfOccurrence")].isNull() && m_time_of_occurrence_isValid;
}

QString OAIEventProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_object_friendly_name_isSet) {
        obj.insert(QString("affectedObjectFriendlyName"), ::OpenAPI::toJsonValue(m_affected_object_friendly_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_code_isSet) {
        obj.insert(QString("eventCode"), ::OpenAPI::toJsonValue(m_event_code));
    }
    if (m_event_specific_details.isSet()) {
        obj.insert(QString("eventSpecificDetails"), ::OpenAPI::toJsonValue(m_event_specific_details));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_fabric_id_isSet) {
        obj.insert(QString("fabricId"), ::OpenAPI::toJsonValue(m_fabric_id));
    }
    if (m_health_errors.size() > 0) {
        obj.insert(QString("healthErrors"), ::OpenAPI::toJsonValue(m_health_errors));
    }
    if (m_provider_specific_details.isSet()) {
        obj.insert(QString("providerSpecificDetails"), ::OpenAPI::toJsonValue(m_provider_specific_details));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_time_of_occurrence_isSet) {
        obj.insert(QString("timeOfOccurrence"), ::OpenAPI::toJsonValue(m_time_of_occurrence));
    }
    return obj;
}

QString OAIEventProperties::getAffectedObjectFriendlyName() const {
    return m_affected_object_friendly_name;
}
void OAIEventProperties::setAffectedObjectFriendlyName(const QString &affected_object_friendly_name) {
    m_affected_object_friendly_name = affected_object_friendly_name;
    m_affected_object_friendly_name_isSet = true;
}

bool OAIEventProperties::is_affected_object_friendly_name_Set() const{
    return m_affected_object_friendly_name_isSet;
}

bool OAIEventProperties::is_affected_object_friendly_name_Valid() const{
    return m_affected_object_friendly_name_isValid;
}

QString OAIEventProperties::getDescription() const {
    return m_description;
}
void OAIEventProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEventProperties::getEventCode() const {
    return m_event_code;
}
void OAIEventProperties::setEventCode(const QString &event_code) {
    m_event_code = event_code;
    m_event_code_isSet = true;
}

bool OAIEventProperties::is_event_code_Set() const{
    return m_event_code_isSet;
}

bool OAIEventProperties::is_event_code_Valid() const{
    return m_event_code_isValid;
}

OAIEventSpecificDetails OAIEventProperties::getEventSpecificDetails() const {
    return m_event_specific_details;
}
void OAIEventProperties::setEventSpecificDetails(const OAIEventSpecificDetails &event_specific_details) {
    m_event_specific_details = event_specific_details;
    m_event_specific_details_isSet = true;
}

bool OAIEventProperties::is_event_specific_details_Set() const{
    return m_event_specific_details_isSet;
}

bool OAIEventProperties::is_event_specific_details_Valid() const{
    return m_event_specific_details_isValid;
}

QString OAIEventProperties::getEventType() const {
    return m_event_type;
}
void OAIEventProperties::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEventProperties::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEventProperties::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEventProperties::getFabricId() const {
    return m_fabric_id;
}
void OAIEventProperties::setFabricId(const QString &fabric_id) {
    m_fabric_id = fabric_id;
    m_fabric_id_isSet = true;
}

bool OAIEventProperties::is_fabric_id_Set() const{
    return m_fabric_id_isSet;
}

bool OAIEventProperties::is_fabric_id_Valid() const{
    return m_fabric_id_isValid;
}

QList<OAIHealthError> OAIEventProperties::getHealthErrors() const {
    return m_health_errors;
}
void OAIEventProperties::setHealthErrors(const QList<OAIHealthError> &health_errors) {
    m_health_errors = health_errors;
    m_health_errors_isSet = true;
}

bool OAIEventProperties::is_health_errors_Set() const{
    return m_health_errors_isSet;
}

bool OAIEventProperties::is_health_errors_Valid() const{
    return m_health_errors_isValid;
}

OAIEventProviderSpecificDetails OAIEventProperties::getProviderSpecificDetails() const {
    return m_provider_specific_details;
}
void OAIEventProperties::setProviderSpecificDetails(const OAIEventProviderSpecificDetails &provider_specific_details) {
    m_provider_specific_details = provider_specific_details;
    m_provider_specific_details_isSet = true;
}

bool OAIEventProperties::is_provider_specific_details_Set() const{
    return m_provider_specific_details_isSet;
}

bool OAIEventProperties::is_provider_specific_details_Valid() const{
    return m_provider_specific_details_isValid;
}

QString OAIEventProperties::getSeverity() const {
    return m_severity;
}
void OAIEventProperties::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIEventProperties::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIEventProperties::is_severity_Valid() const{
    return m_severity_isValid;
}

QDateTime OAIEventProperties::getTimeOfOccurrence() const {
    return m_time_of_occurrence;
}
void OAIEventProperties::setTimeOfOccurrence(const QDateTime &time_of_occurrence) {
    m_time_of_occurrence = time_of_occurrence;
    m_time_of_occurrence_isSet = true;
}

bool OAIEventProperties::is_time_of_occurrence_Set() const{
    return m_time_of_occurrence_isSet;
}

bool OAIEventProperties::is_time_of_occurrence_Valid() const{
    return m_time_of_occurrence_isValid;
}

bool OAIEventProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_object_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_specific_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_specific_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_of_occurrence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
