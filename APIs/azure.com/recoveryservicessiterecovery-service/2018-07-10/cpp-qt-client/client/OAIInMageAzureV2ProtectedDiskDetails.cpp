/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageAzureV2ProtectedDiskDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageAzureV2ProtectedDiskDetails::OAIInMageAzureV2ProtectedDiskDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageAzureV2ProtectedDiskDetails::OAIInMageAzureV2ProtectedDiskDetails() {
    this->initializeModel();
}

OAIInMageAzureV2ProtectedDiskDetails::~OAIInMageAzureV2ProtectedDiskDetails() {}

void OAIInMageAzureV2ProtectedDiskDetails::initializeModel() {

    m_disk_capacity_in_bytes_isSet = false;
    m_disk_capacity_in_bytes_isValid = false;

    m_disk_id_isSet = false;
    m_disk_id_isValid = false;

    m_disk_name_isSet = false;
    m_disk_name_isValid = false;

    m_disk_resized_isSet = false;
    m_disk_resized_isValid = false;

    m_file_system_capacity_in_bytes_isSet = false;
    m_file_system_capacity_in_bytes_isValid = false;

    m_health_error_code_isSet = false;
    m_health_error_code_isValid = false;

    m_last_rpo_calculated_time_isSet = false;
    m_last_rpo_calculated_time_isValid = false;

    m_protection_stage_isSet = false;
    m_protection_stage_isValid = false;

    m_ps_data_in_mega_bytes_isSet = false;
    m_ps_data_in_mega_bytes_isValid = false;

    m_resync_duration_in_seconds_isSet = false;
    m_resync_duration_in_seconds_isValid = false;

    m_resync_progress_percentage_isSet = false;
    m_resync_progress_percentage_isValid = false;

    m_resync_required_isSet = false;
    m_resync_required_isValid = false;

    m_rpo_in_seconds_isSet = false;
    m_rpo_in_seconds_isValid = false;

    m_source_data_in_mega_bytes_isSet = false;
    m_source_data_in_mega_bytes_isValid = false;

    m_target_data_in_mega_bytes_isSet = false;
    m_target_data_in_mega_bytes_isValid = false;
}

void OAIInMageAzureV2ProtectedDiskDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageAzureV2ProtectedDiskDetails::fromJsonObject(QJsonObject json) {

    m_disk_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_disk_capacity_in_bytes, json[QString("diskCapacityInBytes")]);
    m_disk_capacity_in_bytes_isSet = !json[QString("diskCapacityInBytes")].isNull() && m_disk_capacity_in_bytes_isValid;

    m_disk_id_isValid = ::OpenAPI::fromJsonValue(m_disk_id, json[QString("diskId")]);
    m_disk_id_isSet = !json[QString("diskId")].isNull() && m_disk_id_isValid;

    m_disk_name_isValid = ::OpenAPI::fromJsonValue(m_disk_name, json[QString("diskName")]);
    m_disk_name_isSet = !json[QString("diskName")].isNull() && m_disk_name_isValid;

    m_disk_resized_isValid = ::OpenAPI::fromJsonValue(m_disk_resized, json[QString("diskResized")]);
    m_disk_resized_isSet = !json[QString("diskResized")].isNull() && m_disk_resized_isValid;

    m_file_system_capacity_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_file_system_capacity_in_bytes, json[QString("fileSystemCapacityInBytes")]);
    m_file_system_capacity_in_bytes_isSet = !json[QString("fileSystemCapacityInBytes")].isNull() && m_file_system_capacity_in_bytes_isValid;

    m_health_error_code_isValid = ::OpenAPI::fromJsonValue(m_health_error_code, json[QString("healthErrorCode")]);
    m_health_error_code_isSet = !json[QString("healthErrorCode")].isNull() && m_health_error_code_isValid;

    m_last_rpo_calculated_time_isValid = ::OpenAPI::fromJsonValue(m_last_rpo_calculated_time, json[QString("lastRpoCalculatedTime")]);
    m_last_rpo_calculated_time_isSet = !json[QString("lastRpoCalculatedTime")].isNull() && m_last_rpo_calculated_time_isValid;

    m_protection_stage_isValid = ::OpenAPI::fromJsonValue(m_protection_stage, json[QString("protectionStage")]);
    m_protection_stage_isSet = !json[QString("protectionStage")].isNull() && m_protection_stage_isValid;

    m_ps_data_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_ps_data_in_mega_bytes, json[QString("psDataInMegaBytes")]);
    m_ps_data_in_mega_bytes_isSet = !json[QString("psDataInMegaBytes")].isNull() && m_ps_data_in_mega_bytes_isValid;

    m_resync_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_resync_duration_in_seconds, json[QString("resyncDurationInSeconds")]);
    m_resync_duration_in_seconds_isSet = !json[QString("resyncDurationInSeconds")].isNull() && m_resync_duration_in_seconds_isValid;

    m_resync_progress_percentage_isValid = ::OpenAPI::fromJsonValue(m_resync_progress_percentage, json[QString("resyncProgressPercentage")]);
    m_resync_progress_percentage_isSet = !json[QString("resyncProgressPercentage")].isNull() && m_resync_progress_percentage_isValid;

    m_resync_required_isValid = ::OpenAPI::fromJsonValue(m_resync_required, json[QString("resyncRequired")]);
    m_resync_required_isSet = !json[QString("resyncRequired")].isNull() && m_resync_required_isValid;

    m_rpo_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_rpo_in_seconds, json[QString("rpoInSeconds")]);
    m_rpo_in_seconds_isSet = !json[QString("rpoInSeconds")].isNull() && m_rpo_in_seconds_isValid;

    m_source_data_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_source_data_in_mega_bytes, json[QString("sourceDataInMegaBytes")]);
    m_source_data_in_mega_bytes_isSet = !json[QString("sourceDataInMegaBytes")].isNull() && m_source_data_in_mega_bytes_isValid;

    m_target_data_in_mega_bytes_isValid = ::OpenAPI::fromJsonValue(m_target_data_in_mega_bytes, json[QString("targetDataInMegaBytes")]);
    m_target_data_in_mega_bytes_isSet = !json[QString("targetDataInMegaBytes")].isNull() && m_target_data_in_mega_bytes_isValid;
}

QString OAIInMageAzureV2ProtectedDiskDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageAzureV2ProtectedDiskDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_capacity_in_bytes_isSet) {
        obj.insert(QString("diskCapacityInBytes"), ::OpenAPI::toJsonValue(m_disk_capacity_in_bytes));
    }
    if (m_disk_id_isSet) {
        obj.insert(QString("diskId"), ::OpenAPI::toJsonValue(m_disk_id));
    }
    if (m_disk_name_isSet) {
        obj.insert(QString("diskName"), ::OpenAPI::toJsonValue(m_disk_name));
    }
    if (m_disk_resized_isSet) {
        obj.insert(QString("diskResized"), ::OpenAPI::toJsonValue(m_disk_resized));
    }
    if (m_file_system_capacity_in_bytes_isSet) {
        obj.insert(QString("fileSystemCapacityInBytes"), ::OpenAPI::toJsonValue(m_file_system_capacity_in_bytes));
    }
    if (m_health_error_code_isSet) {
        obj.insert(QString("healthErrorCode"), ::OpenAPI::toJsonValue(m_health_error_code));
    }
    if (m_last_rpo_calculated_time_isSet) {
        obj.insert(QString("lastRpoCalculatedTime"), ::OpenAPI::toJsonValue(m_last_rpo_calculated_time));
    }
    if (m_protection_stage_isSet) {
        obj.insert(QString("protectionStage"), ::OpenAPI::toJsonValue(m_protection_stage));
    }
    if (m_ps_data_in_mega_bytes_isSet) {
        obj.insert(QString("psDataInMegaBytes"), ::OpenAPI::toJsonValue(m_ps_data_in_mega_bytes));
    }
    if (m_resync_duration_in_seconds_isSet) {
        obj.insert(QString("resyncDurationInSeconds"), ::OpenAPI::toJsonValue(m_resync_duration_in_seconds));
    }
    if (m_resync_progress_percentage_isSet) {
        obj.insert(QString("resyncProgressPercentage"), ::OpenAPI::toJsonValue(m_resync_progress_percentage));
    }
    if (m_resync_required_isSet) {
        obj.insert(QString("resyncRequired"), ::OpenAPI::toJsonValue(m_resync_required));
    }
    if (m_rpo_in_seconds_isSet) {
        obj.insert(QString("rpoInSeconds"), ::OpenAPI::toJsonValue(m_rpo_in_seconds));
    }
    if (m_source_data_in_mega_bytes_isSet) {
        obj.insert(QString("sourceDataInMegaBytes"), ::OpenAPI::toJsonValue(m_source_data_in_mega_bytes));
    }
    if (m_target_data_in_mega_bytes_isSet) {
        obj.insert(QString("targetDataInMegaBytes"), ::OpenAPI::toJsonValue(m_target_data_in_mega_bytes));
    }
    return obj;
}

qint64 OAIInMageAzureV2ProtectedDiskDetails::getDiskCapacityInBytes() const {
    return m_disk_capacity_in_bytes;
}
void OAIInMageAzureV2ProtectedDiskDetails::setDiskCapacityInBytes(const qint64 &disk_capacity_in_bytes) {
    m_disk_capacity_in_bytes = disk_capacity_in_bytes;
    m_disk_capacity_in_bytes_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_disk_capacity_in_bytes_Set() const{
    return m_disk_capacity_in_bytes_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_disk_capacity_in_bytes_Valid() const{
    return m_disk_capacity_in_bytes_isValid;
}

QString OAIInMageAzureV2ProtectedDiskDetails::getDiskId() const {
    return m_disk_id;
}
void OAIInMageAzureV2ProtectedDiskDetails::setDiskId(const QString &disk_id) {
    m_disk_id = disk_id;
    m_disk_id_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_disk_id_Set() const{
    return m_disk_id_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_disk_id_Valid() const{
    return m_disk_id_isValid;
}

QString OAIInMageAzureV2ProtectedDiskDetails::getDiskName() const {
    return m_disk_name;
}
void OAIInMageAzureV2ProtectedDiskDetails::setDiskName(const QString &disk_name) {
    m_disk_name = disk_name;
    m_disk_name_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_disk_name_Set() const{
    return m_disk_name_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_disk_name_Valid() const{
    return m_disk_name_isValid;
}

QString OAIInMageAzureV2ProtectedDiskDetails::getDiskResized() const {
    return m_disk_resized;
}
void OAIInMageAzureV2ProtectedDiskDetails::setDiskResized(const QString &disk_resized) {
    m_disk_resized = disk_resized;
    m_disk_resized_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_disk_resized_Set() const{
    return m_disk_resized_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_disk_resized_Valid() const{
    return m_disk_resized_isValid;
}

qint64 OAIInMageAzureV2ProtectedDiskDetails::getFileSystemCapacityInBytes() const {
    return m_file_system_capacity_in_bytes;
}
void OAIInMageAzureV2ProtectedDiskDetails::setFileSystemCapacityInBytes(const qint64 &file_system_capacity_in_bytes) {
    m_file_system_capacity_in_bytes = file_system_capacity_in_bytes;
    m_file_system_capacity_in_bytes_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_file_system_capacity_in_bytes_Set() const{
    return m_file_system_capacity_in_bytes_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_file_system_capacity_in_bytes_Valid() const{
    return m_file_system_capacity_in_bytes_isValid;
}

QString OAIInMageAzureV2ProtectedDiskDetails::getHealthErrorCode() const {
    return m_health_error_code;
}
void OAIInMageAzureV2ProtectedDiskDetails::setHealthErrorCode(const QString &health_error_code) {
    m_health_error_code = health_error_code;
    m_health_error_code_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_health_error_code_Set() const{
    return m_health_error_code_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_health_error_code_Valid() const{
    return m_health_error_code_isValid;
}

QDateTime OAIInMageAzureV2ProtectedDiskDetails::getLastRpoCalculatedTime() const {
    return m_last_rpo_calculated_time;
}
void OAIInMageAzureV2ProtectedDiskDetails::setLastRpoCalculatedTime(const QDateTime &last_rpo_calculated_time) {
    m_last_rpo_calculated_time = last_rpo_calculated_time;
    m_last_rpo_calculated_time_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_last_rpo_calculated_time_Set() const{
    return m_last_rpo_calculated_time_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_last_rpo_calculated_time_Valid() const{
    return m_last_rpo_calculated_time_isValid;
}

QString OAIInMageAzureV2ProtectedDiskDetails::getProtectionStage() const {
    return m_protection_stage;
}
void OAIInMageAzureV2ProtectedDiskDetails::setProtectionStage(const QString &protection_stage) {
    m_protection_stage = protection_stage;
    m_protection_stage_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_protection_stage_Set() const{
    return m_protection_stage_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_protection_stage_Valid() const{
    return m_protection_stage_isValid;
}

double OAIInMageAzureV2ProtectedDiskDetails::getPsDataInMegaBytes() const {
    return m_ps_data_in_mega_bytes;
}
void OAIInMageAzureV2ProtectedDiskDetails::setPsDataInMegaBytes(const double &ps_data_in_mega_bytes) {
    m_ps_data_in_mega_bytes = ps_data_in_mega_bytes;
    m_ps_data_in_mega_bytes_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_ps_data_in_mega_bytes_Set() const{
    return m_ps_data_in_mega_bytes_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_ps_data_in_mega_bytes_Valid() const{
    return m_ps_data_in_mega_bytes_isValid;
}

qint64 OAIInMageAzureV2ProtectedDiskDetails::getResyncDurationInSeconds() const {
    return m_resync_duration_in_seconds;
}
void OAIInMageAzureV2ProtectedDiskDetails::setResyncDurationInSeconds(const qint64 &resync_duration_in_seconds) {
    m_resync_duration_in_seconds = resync_duration_in_seconds;
    m_resync_duration_in_seconds_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_resync_duration_in_seconds_Set() const{
    return m_resync_duration_in_seconds_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_resync_duration_in_seconds_Valid() const{
    return m_resync_duration_in_seconds_isValid;
}

qint32 OAIInMageAzureV2ProtectedDiskDetails::getResyncProgressPercentage() const {
    return m_resync_progress_percentage;
}
void OAIInMageAzureV2ProtectedDiskDetails::setResyncProgressPercentage(const qint32 &resync_progress_percentage) {
    m_resync_progress_percentage = resync_progress_percentage;
    m_resync_progress_percentage_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_resync_progress_percentage_Set() const{
    return m_resync_progress_percentage_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_resync_progress_percentage_Valid() const{
    return m_resync_progress_percentage_isValid;
}

QString OAIInMageAzureV2ProtectedDiskDetails::getResyncRequired() const {
    return m_resync_required;
}
void OAIInMageAzureV2ProtectedDiskDetails::setResyncRequired(const QString &resync_required) {
    m_resync_required = resync_required;
    m_resync_required_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_resync_required_Set() const{
    return m_resync_required_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_resync_required_Valid() const{
    return m_resync_required_isValid;
}

qint64 OAIInMageAzureV2ProtectedDiskDetails::getRpoInSeconds() const {
    return m_rpo_in_seconds;
}
void OAIInMageAzureV2ProtectedDiskDetails::setRpoInSeconds(const qint64 &rpo_in_seconds) {
    m_rpo_in_seconds = rpo_in_seconds;
    m_rpo_in_seconds_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_rpo_in_seconds_Set() const{
    return m_rpo_in_seconds_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_rpo_in_seconds_Valid() const{
    return m_rpo_in_seconds_isValid;
}

double OAIInMageAzureV2ProtectedDiskDetails::getSourceDataInMegaBytes() const {
    return m_source_data_in_mega_bytes;
}
void OAIInMageAzureV2ProtectedDiskDetails::setSourceDataInMegaBytes(const double &source_data_in_mega_bytes) {
    m_source_data_in_mega_bytes = source_data_in_mega_bytes;
    m_source_data_in_mega_bytes_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_source_data_in_mega_bytes_Set() const{
    return m_source_data_in_mega_bytes_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_source_data_in_mega_bytes_Valid() const{
    return m_source_data_in_mega_bytes_isValid;
}

double OAIInMageAzureV2ProtectedDiskDetails::getTargetDataInMegaBytes() const {
    return m_target_data_in_mega_bytes;
}
void OAIInMageAzureV2ProtectedDiskDetails::setTargetDataInMegaBytes(const double &target_data_in_mega_bytes) {
    m_target_data_in_mega_bytes = target_data_in_mega_bytes;
    m_target_data_in_mega_bytes_isSet = true;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_target_data_in_mega_bytes_Set() const{
    return m_target_data_in_mega_bytes_isSet;
}

bool OAIInMageAzureV2ProtectedDiskDetails::is_target_data_in_mega_bytes_Valid() const{
    return m_target_data_in_mega_bytes_isValid;
}

bool OAIInMageAzureV2ProtectedDiskDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_resized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_capacity_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_rpo_calculated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ps_data_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resync_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resync_progress_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resync_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpo_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_data_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_data_in_mega_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageAzureV2ProtectedDiskDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
