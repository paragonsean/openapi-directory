/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHyperVReplicaAzurePolicyDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHyperVReplicaAzurePolicyDetails::OAIHyperVReplicaAzurePolicyDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHyperVReplicaAzurePolicyDetails::OAIHyperVReplicaAzurePolicyDetails() {
    this->initializeModel();
}

OAIHyperVReplicaAzurePolicyDetails::~OAIHyperVReplicaAzurePolicyDetails() {}

void OAIHyperVReplicaAzurePolicyDetails::initializeModel() {

    m_active_storage_account_id_isSet = false;
    m_active_storage_account_id_isValid = false;

    m_application_consistent_snapshot_frequency_in_hours_isSet = false;
    m_application_consistent_snapshot_frequency_in_hours_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_online_replication_start_time_isSet = false;
    m_online_replication_start_time_isValid = false;

    m_recovery_point_history_duration_in_hours_isSet = false;
    m_recovery_point_history_duration_in_hours_isValid = false;

    m_replication_interval_isSet = false;
    m_replication_interval_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIHyperVReplicaAzurePolicyDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHyperVReplicaAzurePolicyDetails::fromJsonObject(QJsonObject json) {

    m_active_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_active_storage_account_id, json[QString("activeStorageAccountId")]);
    m_active_storage_account_id_isSet = !json[QString("activeStorageAccountId")].isNull() && m_active_storage_account_id_isValid;

    m_application_consistent_snapshot_frequency_in_hours_isValid = ::OpenAPI::fromJsonValue(m_application_consistent_snapshot_frequency_in_hours, json[QString("applicationConsistentSnapshotFrequencyInHours")]);
    m_application_consistent_snapshot_frequency_in_hours_isSet = !json[QString("applicationConsistentSnapshotFrequencyInHours")].isNull() && m_application_consistent_snapshot_frequency_in_hours_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("encryption")]);
    m_encryption_isSet = !json[QString("encryption")].isNull() && m_encryption_isValid;

    m_online_replication_start_time_isValid = ::OpenAPI::fromJsonValue(m_online_replication_start_time, json[QString("onlineReplicationStartTime")]);
    m_online_replication_start_time_isSet = !json[QString("onlineReplicationStartTime")].isNull() && m_online_replication_start_time_isValid;

    m_recovery_point_history_duration_in_hours_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_history_duration_in_hours, json[QString("recoveryPointHistoryDurationInHours")]);
    m_recovery_point_history_duration_in_hours_isSet = !json[QString("recoveryPointHistoryDurationInHours")].isNull() && m_recovery_point_history_duration_in_hours_isValid;

    m_replication_interval_isValid = ::OpenAPI::fromJsonValue(m_replication_interval, json[QString("replicationInterval")]);
    m_replication_interval_isSet = !json[QString("replicationInterval")].isNull() && m_replication_interval_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIHyperVReplicaAzurePolicyDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHyperVReplicaAzurePolicyDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_active_storage_account_id_isSet) {
        obj.insert(QString("activeStorageAccountId"), ::OpenAPI::toJsonValue(m_active_storage_account_id));
    }
    if (m_application_consistent_snapshot_frequency_in_hours_isSet) {
        obj.insert(QString("applicationConsistentSnapshotFrequencyInHours"), ::OpenAPI::toJsonValue(m_application_consistent_snapshot_frequency_in_hours));
    }
    if (m_encryption_isSet) {
        obj.insert(QString("encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_online_replication_start_time_isSet) {
        obj.insert(QString("onlineReplicationStartTime"), ::OpenAPI::toJsonValue(m_online_replication_start_time));
    }
    if (m_recovery_point_history_duration_in_hours_isSet) {
        obj.insert(QString("recoveryPointHistoryDurationInHours"), ::OpenAPI::toJsonValue(m_recovery_point_history_duration_in_hours));
    }
    if (m_replication_interval_isSet) {
        obj.insert(QString("replicationInterval"), ::OpenAPI::toJsonValue(m_replication_interval));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIHyperVReplicaAzurePolicyDetails::getActiveStorageAccountId() const {
    return m_active_storage_account_id;
}
void OAIHyperVReplicaAzurePolicyDetails::setActiveStorageAccountId(const QString &active_storage_account_id) {
    m_active_storage_account_id = active_storage_account_id;
    m_active_storage_account_id_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_active_storage_account_id_Set() const{
    return m_active_storage_account_id_isSet;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_active_storage_account_id_Valid() const{
    return m_active_storage_account_id_isValid;
}

qint32 OAIHyperVReplicaAzurePolicyDetails::getApplicationConsistentSnapshotFrequencyInHours() const {
    return m_application_consistent_snapshot_frequency_in_hours;
}
void OAIHyperVReplicaAzurePolicyDetails::setApplicationConsistentSnapshotFrequencyInHours(const qint32 &application_consistent_snapshot_frequency_in_hours) {
    m_application_consistent_snapshot_frequency_in_hours = application_consistent_snapshot_frequency_in_hours;
    m_application_consistent_snapshot_frequency_in_hours_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_application_consistent_snapshot_frequency_in_hours_Set() const{
    return m_application_consistent_snapshot_frequency_in_hours_isSet;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_application_consistent_snapshot_frequency_in_hours_Valid() const{
    return m_application_consistent_snapshot_frequency_in_hours_isValid;
}

QString OAIHyperVReplicaAzurePolicyDetails::getEncryption() const {
    return m_encryption;
}
void OAIHyperVReplicaAzurePolicyDetails::setEncryption(const QString &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_encryption_Valid() const{
    return m_encryption_isValid;
}

QString OAIHyperVReplicaAzurePolicyDetails::getOnlineReplicationStartTime() const {
    return m_online_replication_start_time;
}
void OAIHyperVReplicaAzurePolicyDetails::setOnlineReplicationStartTime(const QString &online_replication_start_time) {
    m_online_replication_start_time = online_replication_start_time;
    m_online_replication_start_time_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_online_replication_start_time_Set() const{
    return m_online_replication_start_time_isSet;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_online_replication_start_time_Valid() const{
    return m_online_replication_start_time_isValid;
}

qint32 OAIHyperVReplicaAzurePolicyDetails::getRecoveryPointHistoryDurationInHours() const {
    return m_recovery_point_history_duration_in_hours;
}
void OAIHyperVReplicaAzurePolicyDetails::setRecoveryPointHistoryDurationInHours(const qint32 &recovery_point_history_duration_in_hours) {
    m_recovery_point_history_duration_in_hours = recovery_point_history_duration_in_hours;
    m_recovery_point_history_duration_in_hours_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_recovery_point_history_duration_in_hours_Set() const{
    return m_recovery_point_history_duration_in_hours_isSet;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_recovery_point_history_duration_in_hours_Valid() const{
    return m_recovery_point_history_duration_in_hours_isValid;
}

qint32 OAIHyperVReplicaAzurePolicyDetails::getReplicationInterval() const {
    return m_replication_interval;
}
void OAIHyperVReplicaAzurePolicyDetails::setReplicationInterval(const qint32 &replication_interval) {
    m_replication_interval = replication_interval;
    m_replication_interval_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_replication_interval_Set() const{
    return m_replication_interval_isSet;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_replication_interval_Valid() const{
    return m_replication_interval_isValid;
}

QString OAIHyperVReplicaAzurePolicyDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIHyperVReplicaAzurePolicyDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIHyperVReplicaAzurePolicyDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIHyperVReplicaAzurePolicyDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_consistent_snapshot_frequency_in_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_replication_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_history_duration_in_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHyperVReplicaAzurePolicyDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
