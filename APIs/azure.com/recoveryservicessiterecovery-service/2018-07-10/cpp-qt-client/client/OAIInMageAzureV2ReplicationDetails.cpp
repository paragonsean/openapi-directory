/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInMageAzureV2ReplicationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInMageAzureV2ReplicationDetails::OAIInMageAzureV2ReplicationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInMageAzureV2ReplicationDetails::OAIInMageAzureV2ReplicationDetails() {
    this->initializeModel();
}

OAIInMageAzureV2ReplicationDetails::~OAIInMageAzureV2ReplicationDetails() {}

void OAIInMageAzureV2ReplicationDetails::initializeModel() {

    m_agent_expiry_date_isSet = false;
    m_agent_expiry_date_isValid = false;

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_azure_vm_disk_details_isSet = false;
    m_azure_vm_disk_details_isValid = false;

    m_compressed_data_rate_in_mb_isSet = false;
    m_compressed_data_rate_in_mb_isValid = false;

    m_datastores_isSet = false;
    m_datastores_isValid = false;

    m_discovery_type_isSet = false;
    m_discovery_type_isValid = false;

    m_disk_resized_isSet = false;
    m_disk_resized_isValid = false;

    m_enable_rdp_on_target_option_isSet = false;
    m_enable_rdp_on_target_option_isValid = false;

    m_infrastructure_vm_id_isSet = false;
    m_infrastructure_vm_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_is_agent_update_required_isSet = false;
    m_is_agent_update_required_isValid = false;

    m_is_reboot_after_update_required_isSet = false;
    m_is_reboot_after_update_required_isValid = false;

    m_last_heartbeat_isSet = false;
    m_last_heartbeat_isValid = false;

    m_last_rpo_calculated_time_isSet = false;
    m_last_rpo_calculated_time_isValid = false;

    m_last_update_received_time_isSet = false;
    m_last_update_received_time_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_master_target_id_isSet = false;
    m_master_target_id_isValid = false;

    m_multi_vm_group_id_isSet = false;
    m_multi_vm_group_id_isValid = false;

    m_multi_vm_group_name_isSet = false;
    m_multi_vm_group_name_isValid = false;

    m_multi_vm_sync_status_isSet = false;
    m_multi_vm_sync_status_isValid = false;

    m_os_disk_id_isSet = false;
    m_os_disk_id_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_process_server_id_isSet = false;
    m_process_server_id_isValid = false;

    m_protected_disks_isSet = false;
    m_protected_disks_isValid = false;

    m_protected_managed_disks_isSet = false;
    m_protected_managed_disks_isValid = false;

    m_protection_stage_isSet = false;
    m_protection_stage_isValid = false;

    m_recovery_availability_set_id_isSet = false;
    m_recovery_availability_set_id_isValid = false;

    m_recovery_azure_log_storage_account_id_isSet = false;
    m_recovery_azure_log_storage_account_id_isValid = false;

    m_recovery_azure_resource_group_id_isSet = false;
    m_recovery_azure_resource_group_id_isValid = false;

    m_recovery_azure_storage_account_isSet = false;
    m_recovery_azure_storage_account_isValid = false;

    m_recovery_azure_vm_name_isSet = false;
    m_recovery_azure_vm_name_isValid = false;

    m_recovery_azure_vm_size_isSet = false;
    m_recovery_azure_vm_size_isValid = false;

    m_replica_id_isSet = false;
    m_replica_id_isValid = false;

    m_resync_progress_percentage_isSet = false;
    m_resync_progress_percentage_isValid = false;

    m_rpo_in_seconds_isSet = false;
    m_rpo_in_seconds_isValid = false;

    m_selected_recovery_azure_network_id_isSet = false;
    m_selected_recovery_azure_network_id_isValid = false;

    m_selected_source_nic_id_isSet = false;
    m_selected_source_nic_id_isValid = false;

    m_source_vm_cpu_count_isSet = false;
    m_source_vm_cpu_count_isValid = false;

    m_source_vm_ram_size_in_mb_isSet = false;
    m_source_vm_ram_size_in_mb_isValid = false;

    m_target_vm_id_isSet = false;
    m_target_vm_id_isValid = false;

    m_uncompressed_data_rate_in_mb_isSet = false;
    m_uncompressed_data_rate_in_mb_isValid = false;

    m_use_managed_disks_isSet = false;
    m_use_managed_disks_isValid = false;

    m_v_center_infrastructure_id_isSet = false;
    m_v_center_infrastructure_id_isValid = false;

    m_validation_errors_isSet = false;
    m_validation_errors_isValid = false;

    m_vhd_name_isSet = false;
    m_vhd_name_isValid = false;

    m_vm_id_isSet = false;
    m_vm_id_isValid = false;

    m_vm_nics_isSet = false;
    m_vm_nics_isValid = false;

    m_vm_protection_state_isSet = false;
    m_vm_protection_state_isValid = false;

    m_vm_protection_state_description_isSet = false;
    m_vm_protection_state_description_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIInMageAzureV2ReplicationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInMageAzureV2ReplicationDetails::fromJsonObject(QJsonObject json) {

    m_agent_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_agent_expiry_date, json[QString("agentExpiryDate")]);
    m_agent_expiry_date_isSet = !json[QString("agentExpiryDate")].isNull() && m_agent_expiry_date_isValid;

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_azure_vm_disk_details_isValid = ::OpenAPI::fromJsonValue(m_azure_vm_disk_details, json[QString("azureVMDiskDetails")]);
    m_azure_vm_disk_details_isSet = !json[QString("azureVMDiskDetails")].isNull() && m_azure_vm_disk_details_isValid;

    m_compressed_data_rate_in_mb_isValid = ::OpenAPI::fromJsonValue(m_compressed_data_rate_in_mb, json[QString("compressedDataRateInMB")]);
    m_compressed_data_rate_in_mb_isSet = !json[QString("compressedDataRateInMB")].isNull() && m_compressed_data_rate_in_mb_isValid;

    m_datastores_isValid = ::OpenAPI::fromJsonValue(m_datastores, json[QString("datastores")]);
    m_datastores_isSet = !json[QString("datastores")].isNull() && m_datastores_isValid;

    m_discovery_type_isValid = ::OpenAPI::fromJsonValue(m_discovery_type, json[QString("discoveryType")]);
    m_discovery_type_isSet = !json[QString("discoveryType")].isNull() && m_discovery_type_isValid;

    m_disk_resized_isValid = ::OpenAPI::fromJsonValue(m_disk_resized, json[QString("diskResized")]);
    m_disk_resized_isSet = !json[QString("diskResized")].isNull() && m_disk_resized_isValid;

    m_enable_rdp_on_target_option_isValid = ::OpenAPI::fromJsonValue(m_enable_rdp_on_target_option, json[QString("enableRdpOnTargetOption")]);
    m_enable_rdp_on_target_option_isSet = !json[QString("enableRdpOnTargetOption")].isNull() && m_enable_rdp_on_target_option_isValid;

    m_infrastructure_vm_id_isValid = ::OpenAPI::fromJsonValue(m_infrastructure_vm_id, json[QString("infrastructureVmId")]);
    m_infrastructure_vm_id_isSet = !json[QString("infrastructureVmId")].isNull() && m_infrastructure_vm_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_is_agent_update_required_isValid = ::OpenAPI::fromJsonValue(m_is_agent_update_required, json[QString("isAgentUpdateRequired")]);
    m_is_agent_update_required_isSet = !json[QString("isAgentUpdateRequired")].isNull() && m_is_agent_update_required_isValid;

    m_is_reboot_after_update_required_isValid = ::OpenAPI::fromJsonValue(m_is_reboot_after_update_required, json[QString("isRebootAfterUpdateRequired")]);
    m_is_reboot_after_update_required_isSet = !json[QString("isRebootAfterUpdateRequired")].isNull() && m_is_reboot_after_update_required_isValid;

    m_last_heartbeat_isValid = ::OpenAPI::fromJsonValue(m_last_heartbeat, json[QString("lastHeartbeat")]);
    m_last_heartbeat_isSet = !json[QString("lastHeartbeat")].isNull() && m_last_heartbeat_isValid;

    m_last_rpo_calculated_time_isValid = ::OpenAPI::fromJsonValue(m_last_rpo_calculated_time, json[QString("lastRpoCalculatedTime")]);
    m_last_rpo_calculated_time_isSet = !json[QString("lastRpoCalculatedTime")].isNull() && m_last_rpo_calculated_time_isValid;

    m_last_update_received_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_received_time, json[QString("lastUpdateReceivedTime")]);
    m_last_update_received_time_isSet = !json[QString("lastUpdateReceivedTime")].isNull() && m_last_update_received_time_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_master_target_id_isValid = ::OpenAPI::fromJsonValue(m_master_target_id, json[QString("masterTargetId")]);
    m_master_target_id_isSet = !json[QString("masterTargetId")].isNull() && m_master_target_id_isValid;

    m_multi_vm_group_id_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_id, json[QString("multiVmGroupId")]);
    m_multi_vm_group_id_isSet = !json[QString("multiVmGroupId")].isNull() && m_multi_vm_group_id_isValid;

    m_multi_vm_group_name_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_group_name, json[QString("multiVmGroupName")]);
    m_multi_vm_group_name_isSet = !json[QString("multiVmGroupName")].isNull() && m_multi_vm_group_name_isValid;

    m_multi_vm_sync_status_isValid = ::OpenAPI::fromJsonValue(m_multi_vm_sync_status, json[QString("multiVmSyncStatus")]);
    m_multi_vm_sync_status_isSet = !json[QString("multiVmSyncStatus")].isNull() && m_multi_vm_sync_status_isValid;

    m_os_disk_id_isValid = ::OpenAPI::fromJsonValue(m_os_disk_id, json[QString("osDiskId")]);
    m_os_disk_id_isSet = !json[QString("osDiskId")].isNull() && m_os_disk_id_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_process_server_id_isValid = ::OpenAPI::fromJsonValue(m_process_server_id, json[QString("processServerId")]);
    m_process_server_id_isSet = !json[QString("processServerId")].isNull() && m_process_server_id_isValid;

    m_protected_disks_isValid = ::OpenAPI::fromJsonValue(m_protected_disks, json[QString("protectedDisks")]);
    m_protected_disks_isSet = !json[QString("protectedDisks")].isNull() && m_protected_disks_isValid;

    m_protected_managed_disks_isValid = ::OpenAPI::fromJsonValue(m_protected_managed_disks, json[QString("protectedManagedDisks")]);
    m_protected_managed_disks_isSet = !json[QString("protectedManagedDisks")].isNull() && m_protected_managed_disks_isValid;

    m_protection_stage_isValid = ::OpenAPI::fromJsonValue(m_protection_stage, json[QString("protectionStage")]);
    m_protection_stage_isSet = !json[QString("protectionStage")].isNull() && m_protection_stage_isValid;

    m_recovery_availability_set_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_availability_set_id, json[QString("recoveryAvailabilitySetId")]);
    m_recovery_availability_set_id_isSet = !json[QString("recoveryAvailabilitySetId")].isNull() && m_recovery_availability_set_id_isValid;

    m_recovery_azure_log_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_log_storage_account_id, json[QString("recoveryAzureLogStorageAccountId")]);
    m_recovery_azure_log_storage_account_id_isSet = !json[QString("recoveryAzureLogStorageAccountId")].isNull() && m_recovery_azure_log_storage_account_id_isValid;

    m_recovery_azure_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_resource_group_id, json[QString("recoveryAzureResourceGroupId")]);
    m_recovery_azure_resource_group_id_isSet = !json[QString("recoveryAzureResourceGroupId")].isNull() && m_recovery_azure_resource_group_id_isValid;

    m_recovery_azure_storage_account_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_storage_account, json[QString("recoveryAzureStorageAccount")]);
    m_recovery_azure_storage_account_isSet = !json[QString("recoveryAzureStorageAccount")].isNull() && m_recovery_azure_storage_account_isValid;

    m_recovery_azure_vm_name_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_vm_name, json[QString("recoveryAzureVMName")]);
    m_recovery_azure_vm_name_isSet = !json[QString("recoveryAzureVMName")].isNull() && m_recovery_azure_vm_name_isValid;

    m_recovery_azure_vm_size_isValid = ::OpenAPI::fromJsonValue(m_recovery_azure_vm_size, json[QString("recoveryAzureVMSize")]);
    m_recovery_azure_vm_size_isSet = !json[QString("recoveryAzureVMSize")].isNull() && m_recovery_azure_vm_size_isValid;

    m_replica_id_isValid = ::OpenAPI::fromJsonValue(m_replica_id, json[QString("replicaId")]);
    m_replica_id_isSet = !json[QString("replicaId")].isNull() && m_replica_id_isValid;

    m_resync_progress_percentage_isValid = ::OpenAPI::fromJsonValue(m_resync_progress_percentage, json[QString("resyncProgressPercentage")]);
    m_resync_progress_percentage_isSet = !json[QString("resyncProgressPercentage")].isNull() && m_resync_progress_percentage_isValid;

    m_rpo_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_rpo_in_seconds, json[QString("rpoInSeconds")]);
    m_rpo_in_seconds_isSet = !json[QString("rpoInSeconds")].isNull() && m_rpo_in_seconds_isValid;

    m_selected_recovery_azure_network_id_isValid = ::OpenAPI::fromJsonValue(m_selected_recovery_azure_network_id, json[QString("selectedRecoveryAzureNetworkId")]);
    m_selected_recovery_azure_network_id_isSet = !json[QString("selectedRecoveryAzureNetworkId")].isNull() && m_selected_recovery_azure_network_id_isValid;

    m_selected_source_nic_id_isValid = ::OpenAPI::fromJsonValue(m_selected_source_nic_id, json[QString("selectedSourceNicId")]);
    m_selected_source_nic_id_isSet = !json[QString("selectedSourceNicId")].isNull() && m_selected_source_nic_id_isValid;

    m_source_vm_cpu_count_isValid = ::OpenAPI::fromJsonValue(m_source_vm_cpu_count, json[QString("sourceVmCpuCount")]);
    m_source_vm_cpu_count_isSet = !json[QString("sourceVmCpuCount")].isNull() && m_source_vm_cpu_count_isValid;

    m_source_vm_ram_size_in_mb_isValid = ::OpenAPI::fromJsonValue(m_source_vm_ram_size_in_mb, json[QString("sourceVmRamSizeInMB")]);
    m_source_vm_ram_size_in_mb_isSet = !json[QString("sourceVmRamSizeInMB")].isNull() && m_source_vm_ram_size_in_mb_isValid;

    m_target_vm_id_isValid = ::OpenAPI::fromJsonValue(m_target_vm_id, json[QString("targetVmId")]);
    m_target_vm_id_isSet = !json[QString("targetVmId")].isNull() && m_target_vm_id_isValid;

    m_uncompressed_data_rate_in_mb_isValid = ::OpenAPI::fromJsonValue(m_uncompressed_data_rate_in_mb, json[QString("uncompressedDataRateInMB")]);
    m_uncompressed_data_rate_in_mb_isSet = !json[QString("uncompressedDataRateInMB")].isNull() && m_uncompressed_data_rate_in_mb_isValid;

    m_use_managed_disks_isValid = ::OpenAPI::fromJsonValue(m_use_managed_disks, json[QString("useManagedDisks")]);
    m_use_managed_disks_isSet = !json[QString("useManagedDisks")].isNull() && m_use_managed_disks_isValid;

    m_v_center_infrastructure_id_isValid = ::OpenAPI::fromJsonValue(m_v_center_infrastructure_id, json[QString("vCenterInfrastructureId")]);
    m_v_center_infrastructure_id_isSet = !json[QString("vCenterInfrastructureId")].isNull() && m_v_center_infrastructure_id_isValid;

    m_validation_errors_isValid = ::OpenAPI::fromJsonValue(m_validation_errors, json[QString("validationErrors")]);
    m_validation_errors_isSet = !json[QString("validationErrors")].isNull() && m_validation_errors_isValid;

    m_vhd_name_isValid = ::OpenAPI::fromJsonValue(m_vhd_name, json[QString("vhdName")]);
    m_vhd_name_isSet = !json[QString("vhdName")].isNull() && m_vhd_name_isValid;

    m_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vm_id, json[QString("vmId")]);
    m_vm_id_isSet = !json[QString("vmId")].isNull() && m_vm_id_isValid;

    m_vm_nics_isValid = ::OpenAPI::fromJsonValue(m_vm_nics, json[QString("vmNics")]);
    m_vm_nics_isSet = !json[QString("vmNics")].isNull() && m_vm_nics_isValid;

    m_vm_protection_state_isValid = ::OpenAPI::fromJsonValue(m_vm_protection_state, json[QString("vmProtectionState")]);
    m_vm_protection_state_isSet = !json[QString("vmProtectionState")].isNull() && m_vm_protection_state_isValid;

    m_vm_protection_state_description_isValid = ::OpenAPI::fromJsonValue(m_vm_protection_state_description, json[QString("vmProtectionStateDescription")]);
    m_vm_protection_state_description_isSet = !json[QString("vmProtectionStateDescription")].isNull() && m_vm_protection_state_description_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInMageAzureV2ReplicationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_expiry_date_isSet) {
        obj.insert(QString("agentExpiryDate"), ::OpenAPI::toJsonValue(m_agent_expiry_date));
    }
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_azure_vm_disk_details.size() > 0) {
        obj.insert(QString("azureVMDiskDetails"), ::OpenAPI::toJsonValue(m_azure_vm_disk_details));
    }
    if (m_compressed_data_rate_in_mb_isSet) {
        obj.insert(QString("compressedDataRateInMB"), ::OpenAPI::toJsonValue(m_compressed_data_rate_in_mb));
    }
    if (m_datastores.size() > 0) {
        obj.insert(QString("datastores"), ::OpenAPI::toJsonValue(m_datastores));
    }
    if (m_discovery_type_isSet) {
        obj.insert(QString("discoveryType"), ::OpenAPI::toJsonValue(m_discovery_type));
    }
    if (m_disk_resized_isSet) {
        obj.insert(QString("diskResized"), ::OpenAPI::toJsonValue(m_disk_resized));
    }
    if (m_enable_rdp_on_target_option_isSet) {
        obj.insert(QString("enableRdpOnTargetOption"), ::OpenAPI::toJsonValue(m_enable_rdp_on_target_option));
    }
    if (m_infrastructure_vm_id_isSet) {
        obj.insert(QString("infrastructureVmId"), ::OpenAPI::toJsonValue(m_infrastructure_vm_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_is_agent_update_required_isSet) {
        obj.insert(QString("isAgentUpdateRequired"), ::OpenAPI::toJsonValue(m_is_agent_update_required));
    }
    if (m_is_reboot_after_update_required_isSet) {
        obj.insert(QString("isRebootAfterUpdateRequired"), ::OpenAPI::toJsonValue(m_is_reboot_after_update_required));
    }
    if (m_last_heartbeat_isSet) {
        obj.insert(QString("lastHeartbeat"), ::OpenAPI::toJsonValue(m_last_heartbeat));
    }
    if (m_last_rpo_calculated_time_isSet) {
        obj.insert(QString("lastRpoCalculatedTime"), ::OpenAPI::toJsonValue(m_last_rpo_calculated_time));
    }
    if (m_last_update_received_time_isSet) {
        obj.insert(QString("lastUpdateReceivedTime"), ::OpenAPI::toJsonValue(m_last_update_received_time));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_master_target_id_isSet) {
        obj.insert(QString("masterTargetId"), ::OpenAPI::toJsonValue(m_master_target_id));
    }
    if (m_multi_vm_group_id_isSet) {
        obj.insert(QString("multiVmGroupId"), ::OpenAPI::toJsonValue(m_multi_vm_group_id));
    }
    if (m_multi_vm_group_name_isSet) {
        obj.insert(QString("multiVmGroupName"), ::OpenAPI::toJsonValue(m_multi_vm_group_name));
    }
    if (m_multi_vm_sync_status_isSet) {
        obj.insert(QString("multiVmSyncStatus"), ::OpenAPI::toJsonValue(m_multi_vm_sync_status));
    }
    if (m_os_disk_id_isSet) {
        obj.insert(QString("osDiskId"), ::OpenAPI::toJsonValue(m_os_disk_id));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_process_server_id_isSet) {
        obj.insert(QString("processServerId"), ::OpenAPI::toJsonValue(m_process_server_id));
    }
    if (m_protected_disks.size() > 0) {
        obj.insert(QString("protectedDisks"), ::OpenAPI::toJsonValue(m_protected_disks));
    }
    if (m_protected_managed_disks.size() > 0) {
        obj.insert(QString("protectedManagedDisks"), ::OpenAPI::toJsonValue(m_protected_managed_disks));
    }
    if (m_protection_stage_isSet) {
        obj.insert(QString("protectionStage"), ::OpenAPI::toJsonValue(m_protection_stage));
    }
    if (m_recovery_availability_set_id_isSet) {
        obj.insert(QString("recoveryAvailabilitySetId"), ::OpenAPI::toJsonValue(m_recovery_availability_set_id));
    }
    if (m_recovery_azure_log_storage_account_id_isSet) {
        obj.insert(QString("recoveryAzureLogStorageAccountId"), ::OpenAPI::toJsonValue(m_recovery_azure_log_storage_account_id));
    }
    if (m_recovery_azure_resource_group_id_isSet) {
        obj.insert(QString("recoveryAzureResourceGroupId"), ::OpenAPI::toJsonValue(m_recovery_azure_resource_group_id));
    }
    if (m_recovery_azure_storage_account_isSet) {
        obj.insert(QString("recoveryAzureStorageAccount"), ::OpenAPI::toJsonValue(m_recovery_azure_storage_account));
    }
    if (m_recovery_azure_vm_name_isSet) {
        obj.insert(QString("recoveryAzureVMName"), ::OpenAPI::toJsonValue(m_recovery_azure_vm_name));
    }
    if (m_recovery_azure_vm_size_isSet) {
        obj.insert(QString("recoveryAzureVMSize"), ::OpenAPI::toJsonValue(m_recovery_azure_vm_size));
    }
    if (m_replica_id_isSet) {
        obj.insert(QString("replicaId"), ::OpenAPI::toJsonValue(m_replica_id));
    }
    if (m_resync_progress_percentage_isSet) {
        obj.insert(QString("resyncProgressPercentage"), ::OpenAPI::toJsonValue(m_resync_progress_percentage));
    }
    if (m_rpo_in_seconds_isSet) {
        obj.insert(QString("rpoInSeconds"), ::OpenAPI::toJsonValue(m_rpo_in_seconds));
    }
    if (m_selected_recovery_azure_network_id_isSet) {
        obj.insert(QString("selectedRecoveryAzureNetworkId"), ::OpenAPI::toJsonValue(m_selected_recovery_azure_network_id));
    }
    if (m_selected_source_nic_id_isSet) {
        obj.insert(QString("selectedSourceNicId"), ::OpenAPI::toJsonValue(m_selected_source_nic_id));
    }
    if (m_source_vm_cpu_count_isSet) {
        obj.insert(QString("sourceVmCpuCount"), ::OpenAPI::toJsonValue(m_source_vm_cpu_count));
    }
    if (m_source_vm_ram_size_in_mb_isSet) {
        obj.insert(QString("sourceVmRamSizeInMB"), ::OpenAPI::toJsonValue(m_source_vm_ram_size_in_mb));
    }
    if (m_target_vm_id_isSet) {
        obj.insert(QString("targetVmId"), ::OpenAPI::toJsonValue(m_target_vm_id));
    }
    if (m_uncompressed_data_rate_in_mb_isSet) {
        obj.insert(QString("uncompressedDataRateInMB"), ::OpenAPI::toJsonValue(m_uncompressed_data_rate_in_mb));
    }
    if (m_use_managed_disks_isSet) {
        obj.insert(QString("useManagedDisks"), ::OpenAPI::toJsonValue(m_use_managed_disks));
    }
    if (m_v_center_infrastructure_id_isSet) {
        obj.insert(QString("vCenterInfrastructureId"), ::OpenAPI::toJsonValue(m_v_center_infrastructure_id));
    }
    if (m_validation_errors.size() > 0) {
        obj.insert(QString("validationErrors"), ::OpenAPI::toJsonValue(m_validation_errors));
    }
    if (m_vhd_name_isSet) {
        obj.insert(QString("vhdName"), ::OpenAPI::toJsonValue(m_vhd_name));
    }
    if (m_vm_id_isSet) {
        obj.insert(QString("vmId"), ::OpenAPI::toJsonValue(m_vm_id));
    }
    if (m_vm_nics.size() > 0) {
        obj.insert(QString("vmNics"), ::OpenAPI::toJsonValue(m_vm_nics));
    }
    if (m_vm_protection_state_isSet) {
        obj.insert(QString("vmProtectionState"), ::OpenAPI::toJsonValue(m_vm_protection_state));
    }
    if (m_vm_protection_state_description_isSet) {
        obj.insert(QString("vmProtectionStateDescription"), ::OpenAPI::toJsonValue(m_vm_protection_state_description));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QDateTime OAIInMageAzureV2ReplicationDetails::getAgentExpiryDate() const {
    return m_agent_expiry_date;
}
void OAIInMageAzureV2ReplicationDetails::setAgentExpiryDate(const QDateTime &agent_expiry_date) {
    m_agent_expiry_date = agent_expiry_date;
    m_agent_expiry_date_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_agent_expiry_date_Set() const{
    return m_agent_expiry_date_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_agent_expiry_date_Valid() const{
    return m_agent_expiry_date_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getAgentVersion() const {
    return m_agent_version;
}
void OAIInMageAzureV2ReplicationDetails::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QList<OAIAzureVmDiskDetails> OAIInMageAzureV2ReplicationDetails::getAzureVmDiskDetails() const {
    return m_azure_vm_disk_details;
}
void OAIInMageAzureV2ReplicationDetails::setAzureVmDiskDetails(const QList<OAIAzureVmDiskDetails> &azure_vm_disk_details) {
    m_azure_vm_disk_details = azure_vm_disk_details;
    m_azure_vm_disk_details_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_azure_vm_disk_details_Set() const{
    return m_azure_vm_disk_details_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_azure_vm_disk_details_Valid() const{
    return m_azure_vm_disk_details_isValid;
}

double OAIInMageAzureV2ReplicationDetails::getCompressedDataRateInMb() const {
    return m_compressed_data_rate_in_mb;
}
void OAIInMageAzureV2ReplicationDetails::setCompressedDataRateInMb(const double &compressed_data_rate_in_mb) {
    m_compressed_data_rate_in_mb = compressed_data_rate_in_mb;
    m_compressed_data_rate_in_mb_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_compressed_data_rate_in_mb_Set() const{
    return m_compressed_data_rate_in_mb_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_compressed_data_rate_in_mb_Valid() const{
    return m_compressed_data_rate_in_mb_isValid;
}

QList<QString> OAIInMageAzureV2ReplicationDetails::getDatastores() const {
    return m_datastores;
}
void OAIInMageAzureV2ReplicationDetails::setDatastores(const QList<QString> &datastores) {
    m_datastores = datastores;
    m_datastores_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_datastores_Set() const{
    return m_datastores_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_datastores_Valid() const{
    return m_datastores_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getDiscoveryType() const {
    return m_discovery_type;
}
void OAIInMageAzureV2ReplicationDetails::setDiscoveryType(const QString &discovery_type) {
    m_discovery_type = discovery_type;
    m_discovery_type_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_discovery_type_Set() const{
    return m_discovery_type_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_discovery_type_Valid() const{
    return m_discovery_type_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getDiskResized() const {
    return m_disk_resized;
}
void OAIInMageAzureV2ReplicationDetails::setDiskResized(const QString &disk_resized) {
    m_disk_resized = disk_resized;
    m_disk_resized_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_disk_resized_Set() const{
    return m_disk_resized_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_disk_resized_Valid() const{
    return m_disk_resized_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getEnableRdpOnTargetOption() const {
    return m_enable_rdp_on_target_option;
}
void OAIInMageAzureV2ReplicationDetails::setEnableRdpOnTargetOption(const QString &enable_rdp_on_target_option) {
    m_enable_rdp_on_target_option = enable_rdp_on_target_option;
    m_enable_rdp_on_target_option_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_enable_rdp_on_target_option_Set() const{
    return m_enable_rdp_on_target_option_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_enable_rdp_on_target_option_Valid() const{
    return m_enable_rdp_on_target_option_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getInfrastructureVmId() const {
    return m_infrastructure_vm_id;
}
void OAIInMageAzureV2ReplicationDetails::setInfrastructureVmId(const QString &infrastructure_vm_id) {
    m_infrastructure_vm_id = infrastructure_vm_id;
    m_infrastructure_vm_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_infrastructure_vm_id_Set() const{
    return m_infrastructure_vm_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_infrastructure_vm_id_Valid() const{
    return m_infrastructure_vm_id_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getIpAddress() const {
    return m_ip_address;
}
void OAIInMageAzureV2ReplicationDetails::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getIsAgentUpdateRequired() const {
    return m_is_agent_update_required;
}
void OAIInMageAzureV2ReplicationDetails::setIsAgentUpdateRequired(const QString &is_agent_update_required) {
    m_is_agent_update_required = is_agent_update_required;
    m_is_agent_update_required_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_is_agent_update_required_Set() const{
    return m_is_agent_update_required_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_is_agent_update_required_Valid() const{
    return m_is_agent_update_required_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getIsRebootAfterUpdateRequired() const {
    return m_is_reboot_after_update_required;
}
void OAIInMageAzureV2ReplicationDetails::setIsRebootAfterUpdateRequired(const QString &is_reboot_after_update_required) {
    m_is_reboot_after_update_required = is_reboot_after_update_required;
    m_is_reboot_after_update_required_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_is_reboot_after_update_required_Set() const{
    return m_is_reboot_after_update_required_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_is_reboot_after_update_required_Valid() const{
    return m_is_reboot_after_update_required_isValid;
}

QDateTime OAIInMageAzureV2ReplicationDetails::getLastHeartbeat() const {
    return m_last_heartbeat;
}
void OAIInMageAzureV2ReplicationDetails::setLastHeartbeat(const QDateTime &last_heartbeat) {
    m_last_heartbeat = last_heartbeat;
    m_last_heartbeat_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_last_heartbeat_Set() const{
    return m_last_heartbeat_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_last_heartbeat_Valid() const{
    return m_last_heartbeat_isValid;
}

QDateTime OAIInMageAzureV2ReplicationDetails::getLastRpoCalculatedTime() const {
    return m_last_rpo_calculated_time;
}
void OAIInMageAzureV2ReplicationDetails::setLastRpoCalculatedTime(const QDateTime &last_rpo_calculated_time) {
    m_last_rpo_calculated_time = last_rpo_calculated_time;
    m_last_rpo_calculated_time_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_last_rpo_calculated_time_Set() const{
    return m_last_rpo_calculated_time_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_last_rpo_calculated_time_Valid() const{
    return m_last_rpo_calculated_time_isValid;
}

QDateTime OAIInMageAzureV2ReplicationDetails::getLastUpdateReceivedTime() const {
    return m_last_update_received_time;
}
void OAIInMageAzureV2ReplicationDetails::setLastUpdateReceivedTime(const QDateTime &last_update_received_time) {
    m_last_update_received_time = last_update_received_time;
    m_last_update_received_time_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_last_update_received_time_Set() const{
    return m_last_update_received_time_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_last_update_received_time_Valid() const{
    return m_last_update_received_time_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getLicenseType() const {
    return m_license_type;
}
void OAIInMageAzureV2ReplicationDetails::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_license_type_Valid() const{
    return m_license_type_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getMasterTargetId() const {
    return m_master_target_id;
}
void OAIInMageAzureV2ReplicationDetails::setMasterTargetId(const QString &master_target_id) {
    m_master_target_id = master_target_id;
    m_master_target_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_master_target_id_Set() const{
    return m_master_target_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_master_target_id_Valid() const{
    return m_master_target_id_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getMultiVmGroupId() const {
    return m_multi_vm_group_id;
}
void OAIInMageAzureV2ReplicationDetails::setMultiVmGroupId(const QString &multi_vm_group_id) {
    m_multi_vm_group_id = multi_vm_group_id;
    m_multi_vm_group_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_multi_vm_group_id_Set() const{
    return m_multi_vm_group_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_multi_vm_group_id_Valid() const{
    return m_multi_vm_group_id_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getMultiVmGroupName() const {
    return m_multi_vm_group_name;
}
void OAIInMageAzureV2ReplicationDetails::setMultiVmGroupName(const QString &multi_vm_group_name) {
    m_multi_vm_group_name = multi_vm_group_name;
    m_multi_vm_group_name_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_multi_vm_group_name_Set() const{
    return m_multi_vm_group_name_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_multi_vm_group_name_Valid() const{
    return m_multi_vm_group_name_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getMultiVmSyncStatus() const {
    return m_multi_vm_sync_status;
}
void OAIInMageAzureV2ReplicationDetails::setMultiVmSyncStatus(const QString &multi_vm_sync_status) {
    m_multi_vm_sync_status = multi_vm_sync_status;
    m_multi_vm_sync_status_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_multi_vm_sync_status_Set() const{
    return m_multi_vm_sync_status_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_multi_vm_sync_status_Valid() const{
    return m_multi_vm_sync_status_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getOsDiskId() const {
    return m_os_disk_id;
}
void OAIInMageAzureV2ReplicationDetails::setOsDiskId(const QString &os_disk_id) {
    m_os_disk_id = os_disk_id;
    m_os_disk_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_os_disk_id_Set() const{
    return m_os_disk_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_os_disk_id_Valid() const{
    return m_os_disk_id_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getOsType() const {
    return m_os_type;
}
void OAIInMageAzureV2ReplicationDetails::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getOsVersion() const {
    return m_os_version;
}
void OAIInMageAzureV2ReplicationDetails::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getProcessServerId() const {
    return m_process_server_id;
}
void OAIInMageAzureV2ReplicationDetails::setProcessServerId(const QString &process_server_id) {
    m_process_server_id = process_server_id;
    m_process_server_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_process_server_id_Set() const{
    return m_process_server_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_process_server_id_Valid() const{
    return m_process_server_id_isValid;
}

QList<OAIInMageAzureV2ProtectedDiskDetails> OAIInMageAzureV2ReplicationDetails::getProtectedDisks() const {
    return m_protected_disks;
}
void OAIInMageAzureV2ReplicationDetails::setProtectedDisks(const QList<OAIInMageAzureV2ProtectedDiskDetails> &protected_disks) {
    m_protected_disks = protected_disks;
    m_protected_disks_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_protected_disks_Set() const{
    return m_protected_disks_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_protected_disks_Valid() const{
    return m_protected_disks_isValid;
}

QList<OAIInMageAzureV2ManagedDiskDetails> OAIInMageAzureV2ReplicationDetails::getProtectedManagedDisks() const {
    return m_protected_managed_disks;
}
void OAIInMageAzureV2ReplicationDetails::setProtectedManagedDisks(const QList<OAIInMageAzureV2ManagedDiskDetails> &protected_managed_disks) {
    m_protected_managed_disks = protected_managed_disks;
    m_protected_managed_disks_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_protected_managed_disks_Set() const{
    return m_protected_managed_disks_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_protected_managed_disks_Valid() const{
    return m_protected_managed_disks_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getProtectionStage() const {
    return m_protection_stage;
}
void OAIInMageAzureV2ReplicationDetails::setProtectionStage(const QString &protection_stage) {
    m_protection_stage = protection_stage;
    m_protection_stage_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_protection_stage_Set() const{
    return m_protection_stage_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_protection_stage_Valid() const{
    return m_protection_stage_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getRecoveryAvailabilitySetId() const {
    return m_recovery_availability_set_id;
}
void OAIInMageAzureV2ReplicationDetails::setRecoveryAvailabilitySetId(const QString &recovery_availability_set_id) {
    m_recovery_availability_set_id = recovery_availability_set_id;
    m_recovery_availability_set_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_availability_set_id_Set() const{
    return m_recovery_availability_set_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_availability_set_id_Valid() const{
    return m_recovery_availability_set_id_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getRecoveryAzureLogStorageAccountId() const {
    return m_recovery_azure_log_storage_account_id;
}
void OAIInMageAzureV2ReplicationDetails::setRecoveryAzureLogStorageAccountId(const QString &recovery_azure_log_storage_account_id) {
    m_recovery_azure_log_storage_account_id = recovery_azure_log_storage_account_id;
    m_recovery_azure_log_storage_account_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_azure_log_storage_account_id_Set() const{
    return m_recovery_azure_log_storage_account_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_azure_log_storage_account_id_Valid() const{
    return m_recovery_azure_log_storage_account_id_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getRecoveryAzureResourceGroupId() const {
    return m_recovery_azure_resource_group_id;
}
void OAIInMageAzureV2ReplicationDetails::setRecoveryAzureResourceGroupId(const QString &recovery_azure_resource_group_id) {
    m_recovery_azure_resource_group_id = recovery_azure_resource_group_id;
    m_recovery_azure_resource_group_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_azure_resource_group_id_Set() const{
    return m_recovery_azure_resource_group_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_azure_resource_group_id_Valid() const{
    return m_recovery_azure_resource_group_id_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getRecoveryAzureStorageAccount() const {
    return m_recovery_azure_storage_account;
}
void OAIInMageAzureV2ReplicationDetails::setRecoveryAzureStorageAccount(const QString &recovery_azure_storage_account) {
    m_recovery_azure_storage_account = recovery_azure_storage_account;
    m_recovery_azure_storage_account_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_azure_storage_account_Set() const{
    return m_recovery_azure_storage_account_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_azure_storage_account_Valid() const{
    return m_recovery_azure_storage_account_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getRecoveryAzureVmName() const {
    return m_recovery_azure_vm_name;
}
void OAIInMageAzureV2ReplicationDetails::setRecoveryAzureVmName(const QString &recovery_azure_vm_name) {
    m_recovery_azure_vm_name = recovery_azure_vm_name;
    m_recovery_azure_vm_name_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_azure_vm_name_Set() const{
    return m_recovery_azure_vm_name_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_azure_vm_name_Valid() const{
    return m_recovery_azure_vm_name_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getRecoveryAzureVmSize() const {
    return m_recovery_azure_vm_size;
}
void OAIInMageAzureV2ReplicationDetails::setRecoveryAzureVmSize(const QString &recovery_azure_vm_size) {
    m_recovery_azure_vm_size = recovery_azure_vm_size;
    m_recovery_azure_vm_size_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_azure_vm_size_Set() const{
    return m_recovery_azure_vm_size_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_recovery_azure_vm_size_Valid() const{
    return m_recovery_azure_vm_size_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getReplicaId() const {
    return m_replica_id;
}
void OAIInMageAzureV2ReplicationDetails::setReplicaId(const QString &replica_id) {
    m_replica_id = replica_id;
    m_replica_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_replica_id_Set() const{
    return m_replica_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_replica_id_Valid() const{
    return m_replica_id_isValid;
}

qint32 OAIInMageAzureV2ReplicationDetails::getResyncProgressPercentage() const {
    return m_resync_progress_percentage;
}
void OAIInMageAzureV2ReplicationDetails::setResyncProgressPercentage(const qint32 &resync_progress_percentage) {
    m_resync_progress_percentage = resync_progress_percentage;
    m_resync_progress_percentage_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_resync_progress_percentage_Set() const{
    return m_resync_progress_percentage_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_resync_progress_percentage_Valid() const{
    return m_resync_progress_percentage_isValid;
}

qint64 OAIInMageAzureV2ReplicationDetails::getRpoInSeconds() const {
    return m_rpo_in_seconds;
}
void OAIInMageAzureV2ReplicationDetails::setRpoInSeconds(const qint64 &rpo_in_seconds) {
    m_rpo_in_seconds = rpo_in_seconds;
    m_rpo_in_seconds_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_rpo_in_seconds_Set() const{
    return m_rpo_in_seconds_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_rpo_in_seconds_Valid() const{
    return m_rpo_in_seconds_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getSelectedRecoveryAzureNetworkId() const {
    return m_selected_recovery_azure_network_id;
}
void OAIInMageAzureV2ReplicationDetails::setSelectedRecoveryAzureNetworkId(const QString &selected_recovery_azure_network_id) {
    m_selected_recovery_azure_network_id = selected_recovery_azure_network_id;
    m_selected_recovery_azure_network_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_selected_recovery_azure_network_id_Set() const{
    return m_selected_recovery_azure_network_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_selected_recovery_azure_network_id_Valid() const{
    return m_selected_recovery_azure_network_id_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getSelectedSourceNicId() const {
    return m_selected_source_nic_id;
}
void OAIInMageAzureV2ReplicationDetails::setSelectedSourceNicId(const QString &selected_source_nic_id) {
    m_selected_source_nic_id = selected_source_nic_id;
    m_selected_source_nic_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_selected_source_nic_id_Set() const{
    return m_selected_source_nic_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_selected_source_nic_id_Valid() const{
    return m_selected_source_nic_id_isValid;
}

qint32 OAIInMageAzureV2ReplicationDetails::getSourceVmCpuCount() const {
    return m_source_vm_cpu_count;
}
void OAIInMageAzureV2ReplicationDetails::setSourceVmCpuCount(const qint32 &source_vm_cpu_count) {
    m_source_vm_cpu_count = source_vm_cpu_count;
    m_source_vm_cpu_count_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_source_vm_cpu_count_Set() const{
    return m_source_vm_cpu_count_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_source_vm_cpu_count_Valid() const{
    return m_source_vm_cpu_count_isValid;
}

qint32 OAIInMageAzureV2ReplicationDetails::getSourceVmRamSizeInMb() const {
    return m_source_vm_ram_size_in_mb;
}
void OAIInMageAzureV2ReplicationDetails::setSourceVmRamSizeInMb(const qint32 &source_vm_ram_size_in_mb) {
    m_source_vm_ram_size_in_mb = source_vm_ram_size_in_mb;
    m_source_vm_ram_size_in_mb_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_source_vm_ram_size_in_mb_Set() const{
    return m_source_vm_ram_size_in_mb_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_source_vm_ram_size_in_mb_Valid() const{
    return m_source_vm_ram_size_in_mb_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getTargetVmId() const {
    return m_target_vm_id;
}
void OAIInMageAzureV2ReplicationDetails::setTargetVmId(const QString &target_vm_id) {
    m_target_vm_id = target_vm_id;
    m_target_vm_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_target_vm_id_Set() const{
    return m_target_vm_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_target_vm_id_Valid() const{
    return m_target_vm_id_isValid;
}

double OAIInMageAzureV2ReplicationDetails::getUncompressedDataRateInMb() const {
    return m_uncompressed_data_rate_in_mb;
}
void OAIInMageAzureV2ReplicationDetails::setUncompressedDataRateInMb(const double &uncompressed_data_rate_in_mb) {
    m_uncompressed_data_rate_in_mb = uncompressed_data_rate_in_mb;
    m_uncompressed_data_rate_in_mb_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_uncompressed_data_rate_in_mb_Set() const{
    return m_uncompressed_data_rate_in_mb_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_uncompressed_data_rate_in_mb_Valid() const{
    return m_uncompressed_data_rate_in_mb_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getUseManagedDisks() const {
    return m_use_managed_disks;
}
void OAIInMageAzureV2ReplicationDetails::setUseManagedDisks(const QString &use_managed_disks) {
    m_use_managed_disks = use_managed_disks;
    m_use_managed_disks_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_use_managed_disks_Set() const{
    return m_use_managed_disks_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_use_managed_disks_Valid() const{
    return m_use_managed_disks_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getVCenterInfrastructureId() const {
    return m_v_center_infrastructure_id;
}
void OAIInMageAzureV2ReplicationDetails::setVCenterInfrastructureId(const QString &v_center_infrastructure_id) {
    m_v_center_infrastructure_id = v_center_infrastructure_id;
    m_v_center_infrastructure_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_v_center_infrastructure_id_Set() const{
    return m_v_center_infrastructure_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_v_center_infrastructure_id_Valid() const{
    return m_v_center_infrastructure_id_isValid;
}

QList<OAIHealthError> OAIInMageAzureV2ReplicationDetails::getValidationErrors() const {
    return m_validation_errors;
}
void OAIInMageAzureV2ReplicationDetails::setValidationErrors(const QList<OAIHealthError> &validation_errors) {
    m_validation_errors = validation_errors;
    m_validation_errors_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_validation_errors_Set() const{
    return m_validation_errors_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_validation_errors_Valid() const{
    return m_validation_errors_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getVhdName() const {
    return m_vhd_name;
}
void OAIInMageAzureV2ReplicationDetails::setVhdName(const QString &vhd_name) {
    m_vhd_name = vhd_name;
    m_vhd_name_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_vhd_name_Set() const{
    return m_vhd_name_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_vhd_name_Valid() const{
    return m_vhd_name_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getVmId() const {
    return m_vm_id;
}
void OAIInMageAzureV2ReplicationDetails::setVmId(const QString &vm_id) {
    m_vm_id = vm_id;
    m_vm_id_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_vm_id_Set() const{
    return m_vm_id_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_vm_id_Valid() const{
    return m_vm_id_isValid;
}

QList<OAIVMNicDetails> OAIInMageAzureV2ReplicationDetails::getVmNics() const {
    return m_vm_nics;
}
void OAIInMageAzureV2ReplicationDetails::setVmNics(const QList<OAIVMNicDetails> &vm_nics) {
    m_vm_nics = vm_nics;
    m_vm_nics_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_vm_nics_Set() const{
    return m_vm_nics_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_vm_nics_Valid() const{
    return m_vm_nics_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getVmProtectionState() const {
    return m_vm_protection_state;
}
void OAIInMageAzureV2ReplicationDetails::setVmProtectionState(const QString &vm_protection_state) {
    m_vm_protection_state = vm_protection_state;
    m_vm_protection_state_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_vm_protection_state_Set() const{
    return m_vm_protection_state_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_vm_protection_state_Valid() const{
    return m_vm_protection_state_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getVmProtectionStateDescription() const {
    return m_vm_protection_state_description;
}
void OAIInMageAzureV2ReplicationDetails::setVmProtectionStateDescription(const QString &vm_protection_state_description) {
    m_vm_protection_state_description = vm_protection_state_description;
    m_vm_protection_state_description_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_vm_protection_state_description_Set() const{
    return m_vm_protection_state_description_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_vm_protection_state_description_Valid() const{
    return m_vm_protection_state_description_isValid;
}

QString OAIInMageAzureV2ReplicationDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIInMageAzureV2ReplicationDetails::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInMageAzureV2ReplicationDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInMageAzureV2ReplicationDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIInMageAzureV2ReplicationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_vm_disk_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_compressed_data_rate_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datastores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_resized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_rdp_on_target_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infrastructure_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_agent_update_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reboot_after_update_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heartbeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_rpo_calculated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_received_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_vm_sync_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_managed_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protection_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_availability_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_log_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_azure_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resync_progress_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpo_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_recovery_azure_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_source_nic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vm_cpu_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vm_ram_size_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uncompressed_data_rate_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_managed_disks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_center_infrastructure_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vhd_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_nics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_protection_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_protection_state_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInMageAzureV2ReplicationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
