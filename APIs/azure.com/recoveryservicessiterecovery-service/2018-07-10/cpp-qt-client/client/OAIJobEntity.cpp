/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobEntity::OAIJobEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobEntity::OAIJobEntity() {
    this->initializeModel();
}

OAIJobEntity::~OAIJobEntity() {}

void OAIJobEntity::initializeModel() {

    m_job_friendly_name_isSet = false;
    m_job_friendly_name_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_scenario_name_isSet = false;
    m_job_scenario_name_isValid = false;

    m_target_instance_type_isSet = false;
    m_target_instance_type_isValid = false;

    m_target_object_id_isSet = false;
    m_target_object_id_isValid = false;

    m_target_object_name_isSet = false;
    m_target_object_name_isValid = false;
}

void OAIJobEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobEntity::fromJsonObject(QJsonObject json) {

    m_job_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_job_friendly_name, json[QString("jobFriendlyName")]);
    m_job_friendly_name_isSet = !json[QString("jobFriendlyName")].isNull() && m_job_friendly_name_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_job_scenario_name_isValid = ::OpenAPI::fromJsonValue(m_job_scenario_name, json[QString("jobScenarioName")]);
    m_job_scenario_name_isSet = !json[QString("jobScenarioName")].isNull() && m_job_scenario_name_isValid;

    m_target_instance_type_isValid = ::OpenAPI::fromJsonValue(m_target_instance_type, json[QString("targetInstanceType")]);
    m_target_instance_type_isSet = !json[QString("targetInstanceType")].isNull() && m_target_instance_type_isValid;

    m_target_object_id_isValid = ::OpenAPI::fromJsonValue(m_target_object_id, json[QString("targetObjectId")]);
    m_target_object_id_isSet = !json[QString("targetObjectId")].isNull() && m_target_object_id_isValid;

    m_target_object_name_isValid = ::OpenAPI::fromJsonValue(m_target_object_name, json[QString("targetObjectName")]);
    m_target_object_name_isSet = !json[QString("targetObjectName")].isNull() && m_target_object_name_isValid;
}

QString OAIJobEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_job_friendly_name_isSet) {
        obj.insert(QString("jobFriendlyName"), ::OpenAPI::toJsonValue(m_job_friendly_name));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_scenario_name_isSet) {
        obj.insert(QString("jobScenarioName"), ::OpenAPI::toJsonValue(m_job_scenario_name));
    }
    if (m_target_instance_type_isSet) {
        obj.insert(QString("targetInstanceType"), ::OpenAPI::toJsonValue(m_target_instance_type));
    }
    if (m_target_object_id_isSet) {
        obj.insert(QString("targetObjectId"), ::OpenAPI::toJsonValue(m_target_object_id));
    }
    if (m_target_object_name_isSet) {
        obj.insert(QString("targetObjectName"), ::OpenAPI::toJsonValue(m_target_object_name));
    }
    return obj;
}

QString OAIJobEntity::getJobFriendlyName() const {
    return m_job_friendly_name;
}
void OAIJobEntity::setJobFriendlyName(const QString &job_friendly_name) {
    m_job_friendly_name = job_friendly_name;
    m_job_friendly_name_isSet = true;
}

bool OAIJobEntity::is_job_friendly_name_Set() const{
    return m_job_friendly_name_isSet;
}

bool OAIJobEntity::is_job_friendly_name_Valid() const{
    return m_job_friendly_name_isValid;
}

QString OAIJobEntity::getJobId() const {
    return m_job_id;
}
void OAIJobEntity::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobEntity::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobEntity::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIJobEntity::getJobScenarioName() const {
    return m_job_scenario_name;
}
void OAIJobEntity::setJobScenarioName(const QString &job_scenario_name) {
    m_job_scenario_name = job_scenario_name;
    m_job_scenario_name_isSet = true;
}

bool OAIJobEntity::is_job_scenario_name_Set() const{
    return m_job_scenario_name_isSet;
}

bool OAIJobEntity::is_job_scenario_name_Valid() const{
    return m_job_scenario_name_isValid;
}

QString OAIJobEntity::getTargetInstanceType() const {
    return m_target_instance_type;
}
void OAIJobEntity::setTargetInstanceType(const QString &target_instance_type) {
    m_target_instance_type = target_instance_type;
    m_target_instance_type_isSet = true;
}

bool OAIJobEntity::is_target_instance_type_Set() const{
    return m_target_instance_type_isSet;
}

bool OAIJobEntity::is_target_instance_type_Valid() const{
    return m_target_instance_type_isValid;
}

QString OAIJobEntity::getTargetObjectId() const {
    return m_target_object_id;
}
void OAIJobEntity::setTargetObjectId(const QString &target_object_id) {
    m_target_object_id = target_object_id;
    m_target_object_id_isSet = true;
}

bool OAIJobEntity::is_target_object_id_Set() const{
    return m_target_object_id_isSet;
}

bool OAIJobEntity::is_target_object_id_Valid() const{
    return m_target_object_id_isValid;
}

QString OAIJobEntity::getTargetObjectName() const {
    return m_target_object_name;
}
void OAIJobEntity::setTargetObjectName(const QString &target_object_name) {
    m_target_object_name = target_object_name;
    m_target_object_name_isSet = true;
}

bool OAIJobEntity::is_target_object_name_Set() const{
    return m_target_object_name_isSet;
}

bool OAIJobEntity::is_target_object_name_Valid() const{
    return m_target_object_name_isValid;
}

bool OAIJobEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_scenario_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_object_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
