/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMwareCbtTestMigrateInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMwareCbtTestMigrateInput::OAIVMwareCbtTestMigrateInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMwareCbtTestMigrateInput::OAIVMwareCbtTestMigrateInput() {
    this->initializeModel();
}

OAIVMwareCbtTestMigrateInput::~OAIVMwareCbtTestMigrateInput() {}

void OAIVMwareCbtTestMigrateInput::initializeModel() {

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_recovery_point_id_isSet = false;
    m_recovery_point_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIVMwareCbtTestMigrateInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMwareCbtTestMigrateInput::fromJsonObject(QJsonObject json) {

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_recovery_point_id_isValid = ::OpenAPI::fromJsonValue(m_recovery_point_id, json[QString("recoveryPointId")]);
    m_recovery_point_id_isSet = !json[QString("recoveryPointId")].isNull() && m_recovery_point_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIVMwareCbtTestMigrateInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMwareCbtTestMigrateInput::asJsonObject() const {
    QJsonObject obj;
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_recovery_point_id_isSet) {
        obj.insert(QString("recoveryPointId"), ::OpenAPI::toJsonValue(m_recovery_point_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIVMwareCbtTestMigrateInput::getNetworkId() const {
    return m_network_id;
}
void OAIVMwareCbtTestMigrateInput::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAIVMwareCbtTestMigrateInput::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAIVMwareCbtTestMigrateInput::is_network_id_Valid() const{
    return m_network_id_isValid;
}

QString OAIVMwareCbtTestMigrateInput::getRecoveryPointId() const {
    return m_recovery_point_id;
}
void OAIVMwareCbtTestMigrateInput::setRecoveryPointId(const QString &recovery_point_id) {
    m_recovery_point_id = recovery_point_id;
    m_recovery_point_id_isSet = true;
}

bool OAIVMwareCbtTestMigrateInput::is_recovery_point_id_Set() const{
    return m_recovery_point_id_isSet;
}

bool OAIVMwareCbtTestMigrateInput::is_recovery_point_id_Valid() const{
    return m_recovery_point_id_isValid;
}

QString OAIVMwareCbtTestMigrateInput::getInstanceType() const {
    return m_instance_type;
}
void OAIVMwareCbtTestMigrateInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIVMwareCbtTestMigrateInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIVMwareCbtTestMigrateInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIVMwareCbtTestMigrateInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_point_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMwareCbtTestMigrateInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_network_id_isValid && m_recovery_point_id_isValid && m_instance_type_isValid && true;
}

} // namespace OpenAPI
