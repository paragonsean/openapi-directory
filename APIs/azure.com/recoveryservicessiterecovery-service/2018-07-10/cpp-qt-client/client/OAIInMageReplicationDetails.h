/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInMageReplicationDetails.h
 *
 * InMage provider specific settings
 */

#ifndef OAIInMageReplicationDetails_H
#define OAIInMageReplicationDetails_H

#include <QJsonObject>

#include "OAIHealthError.h"
#include "OAIInMageAgentDetails.h"
#include "OAIInMageProtectedDiskDetails.h"
#include "OAIInitialReplicationDetails.h"
#include "OAIOSDiskDetails.h"
#include "OAIReplicationProviderSpecificSettings.h"
#include "OAIVMNicDetails.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInMageAgentDetails;
class OAIOSDiskDetails;
class OAIInMageProtectedDiskDetails;
class OAIInitialReplicationDetails;
class OAIHealthError;
class OAIVMNicDetails;

class OAIInMageReplicationDetails : public OAIObject {
public:
    OAIInMageReplicationDetails();
    OAIInMageReplicationDetails(QString json);
    ~OAIInMageReplicationDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActiveSiteType() const;
    void setActiveSiteType(const QString &active_site_type);
    bool is_active_site_type_Set() const;
    bool is_active_site_type_Valid() const;

    OAIInMageAgentDetails getAgentDetails() const;
    void setAgentDetails(const OAIInMageAgentDetails &agent_details);
    bool is_agent_details_Set() const;
    bool is_agent_details_Valid() const;

    QString getAzureStorageAccountId() const;
    void setAzureStorageAccountId(const QString &azure_storage_account_id);
    bool is_azure_storage_account_id_Set() const;
    bool is_azure_storage_account_id_Valid() const;

    double getCompressedDataRateInMb() const;
    void setCompressedDataRateInMb(const double &compressed_data_rate_in_mb);
    bool is_compressed_data_rate_in_mb_Set() const;
    bool is_compressed_data_rate_in_mb_Valid() const;

    QMap<QString, QDateTime> getConsistencyPoints() const;
    void setConsistencyPoints(const QMap<QString, QDateTime> &consistency_points);
    bool is_consistency_points_Set() const;
    bool is_consistency_points_Valid() const;

    QList<QString> getDatastores() const;
    void setDatastores(const QList<QString> &datastores);
    bool is_datastores_Set() const;
    bool is_datastores_Valid() const;

    QString getDiscoveryType() const;
    void setDiscoveryType(const QString &discovery_type);
    bool is_discovery_type_Set() const;
    bool is_discovery_type_Valid() const;

    QString getDiskResized() const;
    void setDiskResized(const QString &disk_resized);
    bool is_disk_resized_Set() const;
    bool is_disk_resized_Valid() const;

    QString getInfrastructureVmId() const;
    void setInfrastructureVmId(const QString &infrastructure_vm_id);
    bool is_infrastructure_vm_id_Set() const;
    bool is_infrastructure_vm_id_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    QDateTime getLastHeartbeat() const;
    void setLastHeartbeat(const QDateTime &last_heartbeat);
    bool is_last_heartbeat_Set() const;
    bool is_last_heartbeat_Valid() const;

    QDateTime getLastRpoCalculatedTime() const;
    void setLastRpoCalculatedTime(const QDateTime &last_rpo_calculated_time);
    bool is_last_rpo_calculated_time_Set() const;
    bool is_last_rpo_calculated_time_Valid() const;

    QDateTime getLastUpdateReceivedTime() const;
    void setLastUpdateReceivedTime(const QDateTime &last_update_received_time);
    bool is_last_update_received_time_Set() const;
    bool is_last_update_received_time_Valid() const;

    QString getMasterTargetId() const;
    void setMasterTargetId(const QString &master_target_id);
    bool is_master_target_id_Set() const;
    bool is_master_target_id_Valid() const;

    QString getMultiVmGroupId() const;
    void setMultiVmGroupId(const QString &multi_vm_group_id);
    bool is_multi_vm_group_id_Set() const;
    bool is_multi_vm_group_id_Valid() const;

    QString getMultiVmGroupName() const;
    void setMultiVmGroupName(const QString &multi_vm_group_name);
    bool is_multi_vm_group_name_Set() const;
    bool is_multi_vm_group_name_Valid() const;

    QString getMultiVmSyncStatus() const;
    void setMultiVmSyncStatus(const QString &multi_vm_sync_status);
    bool is_multi_vm_sync_status_Set() const;
    bool is_multi_vm_sync_status_Valid() const;

    OAIOSDiskDetails getOsDetails() const;
    void setOsDetails(const OAIOSDiskDetails &os_details);
    bool is_os_details_Set() const;
    bool is_os_details_Valid() const;

    QString getOsVersion() const;
    void setOsVersion(const QString &os_version);
    bool is_os_version_Set() const;
    bool is_os_version_Valid() const;

    QString getProcessServerId() const;
    void setProcessServerId(const QString &process_server_id);
    bool is_process_server_id_Set() const;
    bool is_process_server_id_Valid() const;

    QList<OAIInMageProtectedDiskDetails> getProtectedDisks() const;
    void setProtectedDisks(const QList<OAIInMageProtectedDiskDetails> &protected_disks);
    bool is_protected_disks_Set() const;
    bool is_protected_disks_Valid() const;

    QString getProtectionStage() const;
    void setProtectionStage(const QString &protection_stage);
    bool is_protection_stage_Set() const;
    bool is_protection_stage_Valid() const;

    QString getRebootAfterUpdateStatus() const;
    void setRebootAfterUpdateStatus(const QString &reboot_after_update_status);
    bool is_reboot_after_update_status_Set() const;
    bool is_reboot_after_update_status_Valid() const;

    QString getReplicaId() const;
    void setReplicaId(const QString &replica_id);
    bool is_replica_id_Set() const;
    bool is_replica_id_Valid() const;

    OAIInitialReplicationDetails getResyncDetails() const;
    void setResyncDetails(const OAIInitialReplicationDetails &resync_details);
    bool is_resync_details_Set() const;
    bool is_resync_details_Valid() const;

    QDateTime getRetentionWindowEnd() const;
    void setRetentionWindowEnd(const QDateTime &retention_window_end);
    bool is_retention_window_end_Set() const;
    bool is_retention_window_end_Valid() const;

    QDateTime getRetentionWindowStart() const;
    void setRetentionWindowStart(const QDateTime &retention_window_start);
    bool is_retention_window_start_Set() const;
    bool is_retention_window_start_Valid() const;

    qint64 getRpoInSeconds() const;
    void setRpoInSeconds(const qint64 &rpo_in_seconds);
    bool is_rpo_in_seconds_Set() const;
    bool is_rpo_in_seconds_Valid() const;

    qint32 getSourceVmCpuCount() const;
    void setSourceVmCpuCount(const qint32 &source_vm_cpu_count);
    bool is_source_vm_cpu_count_Set() const;
    bool is_source_vm_cpu_count_Valid() const;

    qint32 getSourceVmRamSizeInMb() const;
    void setSourceVmRamSizeInMb(const qint32 &source_vm_ram_size_in_mb);
    bool is_source_vm_ram_size_in_mb_Set() const;
    bool is_source_vm_ram_size_in_mb_Valid() const;

    double getUncompressedDataRateInMb() const;
    void setUncompressedDataRateInMb(const double &uncompressed_data_rate_in_mb);
    bool is_uncompressed_data_rate_in_mb_Set() const;
    bool is_uncompressed_data_rate_in_mb_Valid() const;

    QString getVCenterInfrastructureId() const;
    void setVCenterInfrastructureId(const QString &v_center_infrastructure_id);
    bool is_v_center_infrastructure_id_Set() const;
    bool is_v_center_infrastructure_id_Valid() const;

    QList<OAIHealthError> getValidationErrors() const;
    void setValidationErrors(const QList<OAIHealthError> &validation_errors);
    bool is_validation_errors_Set() const;
    bool is_validation_errors_Valid() const;

    QString getVmId() const;
    void setVmId(const QString &vm_id);
    bool is_vm_id_Set() const;
    bool is_vm_id_Valid() const;

    QList<OAIVMNicDetails> getVmNics() const;
    void setVmNics(const QList<OAIVMNicDetails> &vm_nics);
    bool is_vm_nics_Set() const;
    bool is_vm_nics_Valid() const;

    QString getVmProtectionState() const;
    void setVmProtectionState(const QString &vm_protection_state);
    bool is_vm_protection_state_Set() const;
    bool is_vm_protection_state_Valid() const;

    QString getVmProtectionStateDescription() const;
    void setVmProtectionStateDescription(const QString &vm_protection_state_description);
    bool is_vm_protection_state_description_Set() const;
    bool is_vm_protection_state_description_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_active_site_type;
    bool m_active_site_type_isSet;
    bool m_active_site_type_isValid;

    OAIInMageAgentDetails m_agent_details;
    bool m_agent_details_isSet;
    bool m_agent_details_isValid;

    QString m_azure_storage_account_id;
    bool m_azure_storage_account_id_isSet;
    bool m_azure_storage_account_id_isValid;

    double m_compressed_data_rate_in_mb;
    bool m_compressed_data_rate_in_mb_isSet;
    bool m_compressed_data_rate_in_mb_isValid;

    QMap<QString, QDateTime> m_consistency_points;
    bool m_consistency_points_isSet;
    bool m_consistency_points_isValid;

    QList<QString> m_datastores;
    bool m_datastores_isSet;
    bool m_datastores_isValid;

    QString m_discovery_type;
    bool m_discovery_type_isSet;
    bool m_discovery_type_isValid;

    QString m_disk_resized;
    bool m_disk_resized_isSet;
    bool m_disk_resized_isValid;

    QString m_infrastructure_vm_id;
    bool m_infrastructure_vm_id_isSet;
    bool m_infrastructure_vm_id_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    QDateTime m_last_heartbeat;
    bool m_last_heartbeat_isSet;
    bool m_last_heartbeat_isValid;

    QDateTime m_last_rpo_calculated_time;
    bool m_last_rpo_calculated_time_isSet;
    bool m_last_rpo_calculated_time_isValid;

    QDateTime m_last_update_received_time;
    bool m_last_update_received_time_isSet;
    bool m_last_update_received_time_isValid;

    QString m_master_target_id;
    bool m_master_target_id_isSet;
    bool m_master_target_id_isValid;

    QString m_multi_vm_group_id;
    bool m_multi_vm_group_id_isSet;
    bool m_multi_vm_group_id_isValid;

    QString m_multi_vm_group_name;
    bool m_multi_vm_group_name_isSet;
    bool m_multi_vm_group_name_isValid;

    QString m_multi_vm_sync_status;
    bool m_multi_vm_sync_status_isSet;
    bool m_multi_vm_sync_status_isValid;

    OAIOSDiskDetails m_os_details;
    bool m_os_details_isSet;
    bool m_os_details_isValid;

    QString m_os_version;
    bool m_os_version_isSet;
    bool m_os_version_isValid;

    QString m_process_server_id;
    bool m_process_server_id_isSet;
    bool m_process_server_id_isValid;

    QList<OAIInMageProtectedDiskDetails> m_protected_disks;
    bool m_protected_disks_isSet;
    bool m_protected_disks_isValid;

    QString m_protection_stage;
    bool m_protection_stage_isSet;
    bool m_protection_stage_isValid;

    QString m_reboot_after_update_status;
    bool m_reboot_after_update_status_isSet;
    bool m_reboot_after_update_status_isValid;

    QString m_replica_id;
    bool m_replica_id_isSet;
    bool m_replica_id_isValid;

    OAIInitialReplicationDetails m_resync_details;
    bool m_resync_details_isSet;
    bool m_resync_details_isValid;

    QDateTime m_retention_window_end;
    bool m_retention_window_end_isSet;
    bool m_retention_window_end_isValid;

    QDateTime m_retention_window_start;
    bool m_retention_window_start_isSet;
    bool m_retention_window_start_isValid;

    qint64 m_rpo_in_seconds;
    bool m_rpo_in_seconds_isSet;
    bool m_rpo_in_seconds_isValid;

    qint32 m_source_vm_cpu_count;
    bool m_source_vm_cpu_count_isSet;
    bool m_source_vm_cpu_count_isValid;

    qint32 m_source_vm_ram_size_in_mb;
    bool m_source_vm_ram_size_in_mb_isSet;
    bool m_source_vm_ram_size_in_mb_isValid;

    double m_uncompressed_data_rate_in_mb;
    bool m_uncompressed_data_rate_in_mb_isSet;
    bool m_uncompressed_data_rate_in_mb_isValid;

    QString m_v_center_infrastructure_id;
    bool m_v_center_infrastructure_id_isSet;
    bool m_v_center_infrastructure_id_isValid;

    QList<OAIHealthError> m_validation_errors;
    bool m_validation_errors_isSet;
    bool m_validation_errors_isValid;

    QString m_vm_id;
    bool m_vm_id_isSet;
    bool m_vm_id_isValid;

    QList<OAIVMNicDetails> m_vm_nics;
    bool m_vm_nics_isSet;
    bool m_vm_nics_isValid;

    QString m_vm_protection_state;
    bool m_vm_protection_state_isSet;
    bool m_vm_protection_state_isValid;

    QString m_vm_protection_state_description;
    bool m_vm_protection_state_description_isSet;
    bool m_vm_protection_state_description_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInMageReplicationDetails)

#endif // OAIInMageReplicationDetails_H
