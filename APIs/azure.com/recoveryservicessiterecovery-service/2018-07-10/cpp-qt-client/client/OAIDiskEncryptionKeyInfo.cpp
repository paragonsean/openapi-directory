/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskEncryptionKeyInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskEncryptionKeyInfo::OAIDiskEncryptionKeyInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskEncryptionKeyInfo::OAIDiskEncryptionKeyInfo() {
    this->initializeModel();
}

OAIDiskEncryptionKeyInfo::~OAIDiskEncryptionKeyInfo() {}

void OAIDiskEncryptionKeyInfo::initializeModel() {

    m_key_vault_resource_arm_id_isSet = false;
    m_key_vault_resource_arm_id_isValid = false;

    m_secret_identifier_isSet = false;
    m_secret_identifier_isValid = false;
}

void OAIDiskEncryptionKeyInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskEncryptionKeyInfo::fromJsonObject(QJsonObject json) {

    m_key_vault_resource_arm_id_isValid = ::OpenAPI::fromJsonValue(m_key_vault_resource_arm_id, json[QString("keyVaultResourceArmId")]);
    m_key_vault_resource_arm_id_isSet = !json[QString("keyVaultResourceArmId")].isNull() && m_key_vault_resource_arm_id_isValid;

    m_secret_identifier_isValid = ::OpenAPI::fromJsonValue(m_secret_identifier, json[QString("secretIdentifier")]);
    m_secret_identifier_isSet = !json[QString("secretIdentifier")].isNull() && m_secret_identifier_isValid;
}

QString OAIDiskEncryptionKeyInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskEncryptionKeyInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_key_vault_resource_arm_id_isSet) {
        obj.insert(QString("keyVaultResourceArmId"), ::OpenAPI::toJsonValue(m_key_vault_resource_arm_id));
    }
    if (m_secret_identifier_isSet) {
        obj.insert(QString("secretIdentifier"), ::OpenAPI::toJsonValue(m_secret_identifier));
    }
    return obj;
}

QString OAIDiskEncryptionKeyInfo::getKeyVaultResourceArmId() const {
    return m_key_vault_resource_arm_id;
}
void OAIDiskEncryptionKeyInfo::setKeyVaultResourceArmId(const QString &key_vault_resource_arm_id) {
    m_key_vault_resource_arm_id = key_vault_resource_arm_id;
    m_key_vault_resource_arm_id_isSet = true;
}

bool OAIDiskEncryptionKeyInfo::is_key_vault_resource_arm_id_Set() const{
    return m_key_vault_resource_arm_id_isSet;
}

bool OAIDiskEncryptionKeyInfo::is_key_vault_resource_arm_id_Valid() const{
    return m_key_vault_resource_arm_id_isValid;
}

QString OAIDiskEncryptionKeyInfo::getSecretIdentifier() const {
    return m_secret_identifier;
}
void OAIDiskEncryptionKeyInfo::setSecretIdentifier(const QString &secret_identifier) {
    m_secret_identifier = secret_identifier;
    m_secret_identifier_isSet = true;
}

bool OAIDiskEncryptionKeyInfo::is_secret_identifier_Set() const{
    return m_secret_identifier_isSet;
}

bool OAIDiskEncryptionKeyInfo::is_secret_identifier_Valid() const{
    return m_secret_identifier_isValid;
}

bool OAIDiskEncryptionKeyInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_vault_resource_arm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskEncryptionKeyInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
