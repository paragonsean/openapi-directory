/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicationNetworkMappingsApi_H
#define OAI_OAIReplicationNetworkMappingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateNetworkMappingInput.h"
#include "OAINetworkMapping.h"
#include "OAINetworkMappingCollection.h"
#include "OAIUpdateNetworkMappingInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicationNetworkMappingsApi : public QObject {
    Q_OBJECT

public:
    OAIReplicationNetworkMappingsApi(const int timeOut = 0);
    ~OAIReplicationNetworkMappingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  network_name QString [required]
    * @param[in]  network_mapping_name QString [required]
    * @param[in]  input OAICreateNetworkMappingInput [required]
    */
    virtual void replicationNetworkMappingsCreate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &network_name, const QString &network_mapping_name, const OAICreateNetworkMappingInput &input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  network_name QString [required]
    * @param[in]  network_mapping_name QString [required]
    */
    virtual void replicationNetworkMappingsDelete(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &network_name, const QString &network_mapping_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  network_name QString [required]
    * @param[in]  network_mapping_name QString [required]
    */
    virtual void replicationNetworkMappingsGet(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &network_name, const QString &network_mapping_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void replicationNetworkMappingsList(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  network_name QString [required]
    */
    virtual void replicationNetworkMappingsListByReplicationNetworks(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &network_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  network_name QString [required]
    * @param[in]  network_mapping_name QString [required]
    * @param[in]  input OAIUpdateNetworkMappingInput [required]
    */
    virtual void replicationNetworkMappingsUpdate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &network_name, const QString &network_mapping_name, const OAIUpdateNetworkMappingInput &input);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void replicationNetworkMappingsCreateCallback(OAIHttpRequestWorker *worker);
    void replicationNetworkMappingsDeleteCallback(OAIHttpRequestWorker *worker);
    void replicationNetworkMappingsGetCallback(OAIHttpRequestWorker *worker);
    void replicationNetworkMappingsListCallback(OAIHttpRequestWorker *worker);
    void replicationNetworkMappingsListByReplicationNetworksCallback(OAIHttpRequestWorker *worker);
    void replicationNetworkMappingsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void replicationNetworkMappingsCreateSignal(OAINetworkMapping summary);
    void replicationNetworkMappingsDeleteSignal();
    void replicationNetworkMappingsGetSignal(OAINetworkMapping summary);
    void replicationNetworkMappingsListSignal(OAINetworkMappingCollection summary);
    void replicationNetworkMappingsListByReplicationNetworksSignal(OAINetworkMappingCollection summary);
    void replicationNetworkMappingsUpdateSignal(OAINetworkMapping summary);


    void replicationNetworkMappingsCreateSignalFull(OAIHttpRequestWorker *worker, OAINetworkMapping summary);
    void replicationNetworkMappingsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void replicationNetworkMappingsGetSignalFull(OAIHttpRequestWorker *worker, OAINetworkMapping summary);
    void replicationNetworkMappingsListSignalFull(OAIHttpRequestWorker *worker, OAINetworkMappingCollection summary);
    void replicationNetworkMappingsListByReplicationNetworksSignalFull(OAIHttpRequestWorker *worker, OAINetworkMappingCollection summary);
    void replicationNetworkMappingsUpdateSignalFull(OAIHttpRequestWorker *worker, OAINetworkMapping summary);

    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsCreateSignalError() instead")
    void replicationNetworkMappingsCreateSignalE(OAINetworkMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsCreateSignalError(OAINetworkMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsDeleteSignalError() instead")
    void replicationNetworkMappingsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsGetSignalError() instead")
    void replicationNetworkMappingsGetSignalE(OAINetworkMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsGetSignalError(OAINetworkMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsListSignalError() instead")
    void replicationNetworkMappingsListSignalE(OAINetworkMappingCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsListSignalError(OAINetworkMappingCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsListByReplicationNetworksSignalError() instead")
    void replicationNetworkMappingsListByReplicationNetworksSignalE(OAINetworkMappingCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsListByReplicationNetworksSignalError(OAINetworkMappingCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsUpdateSignalError() instead")
    void replicationNetworkMappingsUpdateSignalE(OAINetworkMapping summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsUpdateSignalError(OAINetworkMapping summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsCreateSignalErrorFull() instead")
    void replicationNetworkMappingsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsDeleteSignalErrorFull() instead")
    void replicationNetworkMappingsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsGetSignalErrorFull() instead")
    void replicationNetworkMappingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsListSignalErrorFull() instead")
    void replicationNetworkMappingsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsListByReplicationNetworksSignalErrorFull() instead")
    void replicationNetworkMappingsListByReplicationNetworksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsListByReplicationNetworksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationNetworkMappingsUpdateSignalErrorFull() instead")
    void replicationNetworkMappingsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationNetworkMappingsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
