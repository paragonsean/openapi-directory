/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIA2ARemoveDisksInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIA2ARemoveDisksInput::OAIA2ARemoveDisksInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIA2ARemoveDisksInput::OAIA2ARemoveDisksInput() {
    this->initializeModel();
}

OAIA2ARemoveDisksInput::~OAIA2ARemoveDisksInput() {}

void OAIA2ARemoveDisksInput::initializeModel() {

    m_vm_disks_uris_isSet = false;
    m_vm_disks_uris_isValid = false;

    m_vm_managed_disks_ids_isSet = false;
    m_vm_managed_disks_ids_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIA2ARemoveDisksInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIA2ARemoveDisksInput::fromJsonObject(QJsonObject json) {

    m_vm_disks_uris_isValid = ::OpenAPI::fromJsonValue(m_vm_disks_uris, json[QString("vmDisksUris")]);
    m_vm_disks_uris_isSet = !json[QString("vmDisksUris")].isNull() && m_vm_disks_uris_isValid;

    m_vm_managed_disks_ids_isValid = ::OpenAPI::fromJsonValue(m_vm_managed_disks_ids, json[QString("vmManagedDisksIds")]);
    m_vm_managed_disks_ids_isSet = !json[QString("vmManagedDisksIds")].isNull() && m_vm_managed_disks_ids_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIA2ARemoveDisksInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIA2ARemoveDisksInput::asJsonObject() const {
    QJsonObject obj;
    if (m_vm_disks_uris.size() > 0) {
        obj.insert(QString("vmDisksUris"), ::OpenAPI::toJsonValue(m_vm_disks_uris));
    }
    if (m_vm_managed_disks_ids.size() > 0) {
        obj.insert(QString("vmManagedDisksIds"), ::OpenAPI::toJsonValue(m_vm_managed_disks_ids));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QList<QString> OAIA2ARemoveDisksInput::getVmDisksUris() const {
    return m_vm_disks_uris;
}
void OAIA2ARemoveDisksInput::setVmDisksUris(const QList<QString> &vm_disks_uris) {
    m_vm_disks_uris = vm_disks_uris;
    m_vm_disks_uris_isSet = true;
}

bool OAIA2ARemoveDisksInput::is_vm_disks_uris_Set() const{
    return m_vm_disks_uris_isSet;
}

bool OAIA2ARemoveDisksInput::is_vm_disks_uris_Valid() const{
    return m_vm_disks_uris_isValid;
}

QList<QString> OAIA2ARemoveDisksInput::getVmManagedDisksIds() const {
    return m_vm_managed_disks_ids;
}
void OAIA2ARemoveDisksInput::setVmManagedDisksIds(const QList<QString> &vm_managed_disks_ids) {
    m_vm_managed_disks_ids = vm_managed_disks_ids;
    m_vm_managed_disks_ids_isSet = true;
}

bool OAIA2ARemoveDisksInput::is_vm_managed_disks_ids_Set() const{
    return m_vm_managed_disks_ids_isSet;
}

bool OAIA2ARemoveDisksInput::is_vm_managed_disks_ids_Valid() const{
    return m_vm_managed_disks_ids_isValid;
}

QString OAIA2ARemoveDisksInput::getInstanceType() const {
    return m_instance_type;
}
void OAIA2ARemoveDisksInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIA2ARemoveDisksInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIA2ARemoveDisksInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIA2ARemoveDisksInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vm_disks_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_managed_disks_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIA2ARemoveDisksInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
