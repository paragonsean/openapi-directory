/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVMwareCbtEnableMigrationInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVMwareCbtEnableMigrationInput::OAIVMwareCbtEnableMigrationInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVMwareCbtEnableMigrationInput::OAIVMwareCbtEnableMigrationInput() {
    this->initializeModel();
}

OAIVMwareCbtEnableMigrationInput::~OAIVMwareCbtEnableMigrationInput() {}

void OAIVMwareCbtEnableMigrationInput::initializeModel() {

    m_data_mover_run_as_account_id_isSet = false;
    m_data_mover_run_as_account_id_isValid = false;

    m_disks_to_include_isSet = false;
    m_disks_to_include_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_snapshot_run_as_account_id_isSet = false;
    m_snapshot_run_as_account_id_isValid = false;

    m_target_availability_set_id_isSet = false;
    m_target_availability_set_id_isValid = false;

    m_target_boot_diagnostics_storage_account_id_isSet = false;
    m_target_boot_diagnostics_storage_account_id_isValid = false;

    m_target_network_id_isSet = false;
    m_target_network_id_isValid = false;

    m_target_resource_group_id_isSet = false;
    m_target_resource_group_id_isValid = false;

    m_target_subnet_name_isSet = false;
    m_target_subnet_name_isValid = false;

    m_target_vm_name_isSet = false;
    m_target_vm_name_isValid = false;

    m_target_vm_size_isSet = false;
    m_target_vm_size_isValid = false;

    m_vmware_machine_id_isSet = false;
    m_vmware_machine_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;
}

void OAIVMwareCbtEnableMigrationInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVMwareCbtEnableMigrationInput::fromJsonObject(QJsonObject json) {

    m_data_mover_run_as_account_id_isValid = ::OpenAPI::fromJsonValue(m_data_mover_run_as_account_id, json[QString("dataMoverRunAsAccountId")]);
    m_data_mover_run_as_account_id_isSet = !json[QString("dataMoverRunAsAccountId")].isNull() && m_data_mover_run_as_account_id_isValid;

    m_disks_to_include_isValid = ::OpenAPI::fromJsonValue(m_disks_to_include, json[QString("disksToInclude")]);
    m_disks_to_include_isSet = !json[QString("disksToInclude")].isNull() && m_disks_to_include_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_snapshot_run_as_account_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_run_as_account_id, json[QString("snapshotRunAsAccountId")]);
    m_snapshot_run_as_account_id_isSet = !json[QString("snapshotRunAsAccountId")].isNull() && m_snapshot_run_as_account_id_isValid;

    m_target_availability_set_id_isValid = ::OpenAPI::fromJsonValue(m_target_availability_set_id, json[QString("targetAvailabilitySetId")]);
    m_target_availability_set_id_isSet = !json[QString("targetAvailabilitySetId")].isNull() && m_target_availability_set_id_isValid;

    m_target_boot_diagnostics_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_target_boot_diagnostics_storage_account_id, json[QString("targetBootDiagnosticsStorageAccountId")]);
    m_target_boot_diagnostics_storage_account_id_isSet = !json[QString("targetBootDiagnosticsStorageAccountId")].isNull() && m_target_boot_diagnostics_storage_account_id_isValid;

    m_target_network_id_isValid = ::OpenAPI::fromJsonValue(m_target_network_id, json[QString("targetNetworkId")]);
    m_target_network_id_isSet = !json[QString("targetNetworkId")].isNull() && m_target_network_id_isValid;

    m_target_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_target_resource_group_id, json[QString("targetResourceGroupId")]);
    m_target_resource_group_id_isSet = !json[QString("targetResourceGroupId")].isNull() && m_target_resource_group_id_isValid;

    m_target_subnet_name_isValid = ::OpenAPI::fromJsonValue(m_target_subnet_name, json[QString("targetSubnetName")]);
    m_target_subnet_name_isSet = !json[QString("targetSubnetName")].isNull() && m_target_subnet_name_isValid;

    m_target_vm_name_isValid = ::OpenAPI::fromJsonValue(m_target_vm_name, json[QString("targetVmName")]);
    m_target_vm_name_isSet = !json[QString("targetVmName")].isNull() && m_target_vm_name_isValid;

    m_target_vm_size_isValid = ::OpenAPI::fromJsonValue(m_target_vm_size, json[QString("targetVmSize")]);
    m_target_vm_size_isSet = !json[QString("targetVmSize")].isNull() && m_target_vm_size_isValid;

    m_vmware_machine_id_isValid = ::OpenAPI::fromJsonValue(m_vmware_machine_id, json[QString("vmwareMachineId")]);
    m_vmware_machine_id_isSet = !json[QString("vmwareMachineId")].isNull() && m_vmware_machine_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVMwareCbtEnableMigrationInput::asJsonObject() const {
    QJsonObject obj;
    if (m_data_mover_run_as_account_id_isSet) {
        obj.insert(QString("dataMoverRunAsAccountId"), ::OpenAPI::toJsonValue(m_data_mover_run_as_account_id));
    }
    if (m_disks_to_include.size() > 0) {
        obj.insert(QString("disksToInclude"), ::OpenAPI::toJsonValue(m_disks_to_include));
    }
    if (m_license_type_isSet) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_snapshot_run_as_account_id_isSet) {
        obj.insert(QString("snapshotRunAsAccountId"), ::OpenAPI::toJsonValue(m_snapshot_run_as_account_id));
    }
    if (m_target_availability_set_id_isSet) {
        obj.insert(QString("targetAvailabilitySetId"), ::OpenAPI::toJsonValue(m_target_availability_set_id));
    }
    if (m_target_boot_diagnostics_storage_account_id_isSet) {
        obj.insert(QString("targetBootDiagnosticsStorageAccountId"), ::OpenAPI::toJsonValue(m_target_boot_diagnostics_storage_account_id));
    }
    if (m_target_network_id_isSet) {
        obj.insert(QString("targetNetworkId"), ::OpenAPI::toJsonValue(m_target_network_id));
    }
    if (m_target_resource_group_id_isSet) {
        obj.insert(QString("targetResourceGroupId"), ::OpenAPI::toJsonValue(m_target_resource_group_id));
    }
    if (m_target_subnet_name_isSet) {
        obj.insert(QString("targetSubnetName"), ::OpenAPI::toJsonValue(m_target_subnet_name));
    }
    if (m_target_vm_name_isSet) {
        obj.insert(QString("targetVmName"), ::OpenAPI::toJsonValue(m_target_vm_name));
    }
    if (m_target_vm_size_isSet) {
        obj.insert(QString("targetVmSize"), ::OpenAPI::toJsonValue(m_target_vm_size));
    }
    if (m_vmware_machine_id_isSet) {
        obj.insert(QString("vmwareMachineId"), ::OpenAPI::toJsonValue(m_vmware_machine_id));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    return obj;
}

QString OAIVMwareCbtEnableMigrationInput::getDataMoverRunAsAccountId() const {
    return m_data_mover_run_as_account_id;
}
void OAIVMwareCbtEnableMigrationInput::setDataMoverRunAsAccountId(const QString &data_mover_run_as_account_id) {
    m_data_mover_run_as_account_id = data_mover_run_as_account_id;
    m_data_mover_run_as_account_id_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_data_mover_run_as_account_id_Set() const{
    return m_data_mover_run_as_account_id_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_data_mover_run_as_account_id_Valid() const{
    return m_data_mover_run_as_account_id_isValid;
}

QList<OAIVMwareCbtDiskInput> OAIVMwareCbtEnableMigrationInput::getDisksToInclude() const {
    return m_disks_to_include;
}
void OAIVMwareCbtEnableMigrationInput::setDisksToInclude(const QList<OAIVMwareCbtDiskInput> &disks_to_include) {
    m_disks_to_include = disks_to_include;
    m_disks_to_include_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_disks_to_include_Set() const{
    return m_disks_to_include_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_disks_to_include_Valid() const{
    return m_disks_to_include_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getLicenseType() const {
    return m_license_type;
}
void OAIVMwareCbtEnableMigrationInput::setLicenseType(const QString &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_license_type_Valid() const{
    return m_license_type_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getSnapshotRunAsAccountId() const {
    return m_snapshot_run_as_account_id;
}
void OAIVMwareCbtEnableMigrationInput::setSnapshotRunAsAccountId(const QString &snapshot_run_as_account_id) {
    m_snapshot_run_as_account_id = snapshot_run_as_account_id;
    m_snapshot_run_as_account_id_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_snapshot_run_as_account_id_Set() const{
    return m_snapshot_run_as_account_id_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_snapshot_run_as_account_id_Valid() const{
    return m_snapshot_run_as_account_id_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getTargetAvailabilitySetId() const {
    return m_target_availability_set_id;
}
void OAIVMwareCbtEnableMigrationInput::setTargetAvailabilitySetId(const QString &target_availability_set_id) {
    m_target_availability_set_id = target_availability_set_id;
    m_target_availability_set_id_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_availability_set_id_Set() const{
    return m_target_availability_set_id_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_availability_set_id_Valid() const{
    return m_target_availability_set_id_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getTargetBootDiagnosticsStorageAccountId() const {
    return m_target_boot_diagnostics_storage_account_id;
}
void OAIVMwareCbtEnableMigrationInput::setTargetBootDiagnosticsStorageAccountId(const QString &target_boot_diagnostics_storage_account_id) {
    m_target_boot_diagnostics_storage_account_id = target_boot_diagnostics_storage_account_id;
    m_target_boot_diagnostics_storage_account_id_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_boot_diagnostics_storage_account_id_Set() const{
    return m_target_boot_diagnostics_storage_account_id_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_boot_diagnostics_storage_account_id_Valid() const{
    return m_target_boot_diagnostics_storage_account_id_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getTargetNetworkId() const {
    return m_target_network_id;
}
void OAIVMwareCbtEnableMigrationInput::setTargetNetworkId(const QString &target_network_id) {
    m_target_network_id = target_network_id;
    m_target_network_id_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_network_id_Set() const{
    return m_target_network_id_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_network_id_Valid() const{
    return m_target_network_id_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getTargetResourceGroupId() const {
    return m_target_resource_group_id;
}
void OAIVMwareCbtEnableMigrationInput::setTargetResourceGroupId(const QString &target_resource_group_id) {
    m_target_resource_group_id = target_resource_group_id;
    m_target_resource_group_id_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_resource_group_id_Set() const{
    return m_target_resource_group_id_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_resource_group_id_Valid() const{
    return m_target_resource_group_id_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getTargetSubnetName() const {
    return m_target_subnet_name;
}
void OAIVMwareCbtEnableMigrationInput::setTargetSubnetName(const QString &target_subnet_name) {
    m_target_subnet_name = target_subnet_name;
    m_target_subnet_name_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_subnet_name_Set() const{
    return m_target_subnet_name_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_subnet_name_Valid() const{
    return m_target_subnet_name_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getTargetVmName() const {
    return m_target_vm_name;
}
void OAIVMwareCbtEnableMigrationInput::setTargetVmName(const QString &target_vm_name) {
    m_target_vm_name = target_vm_name;
    m_target_vm_name_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_vm_name_Set() const{
    return m_target_vm_name_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_vm_name_Valid() const{
    return m_target_vm_name_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getTargetVmSize() const {
    return m_target_vm_size;
}
void OAIVMwareCbtEnableMigrationInput::setTargetVmSize(const QString &target_vm_size) {
    m_target_vm_size = target_vm_size;
    m_target_vm_size_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_vm_size_Set() const{
    return m_target_vm_size_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_target_vm_size_Valid() const{
    return m_target_vm_size_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getVmwareMachineId() const {
    return m_vmware_machine_id;
}
void OAIVMwareCbtEnableMigrationInput::setVmwareMachineId(const QString &vmware_machine_id) {
    m_vmware_machine_id = vmware_machine_id;
    m_vmware_machine_id_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_vmware_machine_id_Set() const{
    return m_vmware_machine_id_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_vmware_machine_id_Valid() const{
    return m_vmware_machine_id_isValid;
}

QString OAIVMwareCbtEnableMigrationInput::getInstanceType() const {
    return m_instance_type;
}
void OAIVMwareCbtEnableMigrationInput::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIVMwareCbtEnableMigrationInput::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIVMwareCbtEnableMigrationInput::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIVMwareCbtEnableMigrationInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_mover_run_as_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks_to_include.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_run_as_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_availability_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_boot_diagnostics_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_subnet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVMwareCbtEnableMigrationInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_mover_run_as_account_id_isValid && m_disks_to_include_isValid && m_snapshot_run_as_account_id_isValid && m_target_network_id_isValid && m_target_resource_group_id_isValid && m_vmware_machine_id_isValid && m_instance_type_isValid && true;
}

} // namespace OpenAPI
