/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealthError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealthError::OAIHealthError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealthError::OAIHealthError() {
    this->initializeModel();
}

OAIHealthError::~OAIHealthError() {}

void OAIHealthError::initializeModel() {

    m_creation_time_utc_isSet = false;
    m_creation_time_utc_isValid = false;

    m_customer_resolvability_isSet = false;
    m_customer_resolvability_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_error_category_isSet = false;
    m_error_category_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_id_isSet = false;
    m_error_id_isValid = false;

    m_error_level_isSet = false;
    m_error_level_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_source_isSet = false;
    m_error_source_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_inner_health_errors_isSet = false;
    m_inner_health_errors_isValid = false;

    m_possible_causes_isSet = false;
    m_possible_causes_isValid = false;

    m_recommended_action_isSet = false;
    m_recommended_action_isValid = false;

    m_recovery_provider_error_message_isSet = false;
    m_recovery_provider_error_message_isValid = false;

    m_summary_message_isSet = false;
    m_summary_message_isValid = false;
}

void OAIHealthError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealthError::fromJsonObject(QJsonObject json) {

    m_creation_time_utc_isValid = ::OpenAPI::fromJsonValue(m_creation_time_utc, json[QString("creationTimeUtc")]);
    m_creation_time_utc_isSet = !json[QString("creationTimeUtc")].isNull() && m_creation_time_utc_isValid;

    m_customer_resolvability_isValid = ::OpenAPI::fromJsonValue(m_customer_resolvability, json[QString("customerResolvability")]);
    m_customer_resolvability_isSet = !json[QString("customerResolvability")].isNull() && m_customer_resolvability_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_error_category_isValid = ::OpenAPI::fromJsonValue(m_error_category, json[QString("errorCategory")]);
    m_error_category_isSet = !json[QString("errorCategory")].isNull() && m_error_category_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_id_isValid = ::OpenAPI::fromJsonValue(m_error_id, json[QString("errorId")]);
    m_error_id_isSet = !json[QString("errorId")].isNull() && m_error_id_isValid;

    m_error_level_isValid = ::OpenAPI::fromJsonValue(m_error_level, json[QString("errorLevel")]);
    m_error_level_isSet = !json[QString("errorLevel")].isNull() && m_error_level_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_error_source_isValid = ::OpenAPI::fromJsonValue(m_error_source, json[QString("errorSource")]);
    m_error_source_isSet = !json[QString("errorSource")].isNull() && m_error_source_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_inner_health_errors_isValid = ::OpenAPI::fromJsonValue(m_inner_health_errors, json[QString("innerHealthErrors")]);
    m_inner_health_errors_isSet = !json[QString("innerHealthErrors")].isNull() && m_inner_health_errors_isValid;

    m_possible_causes_isValid = ::OpenAPI::fromJsonValue(m_possible_causes, json[QString("possibleCauses")]);
    m_possible_causes_isSet = !json[QString("possibleCauses")].isNull() && m_possible_causes_isValid;

    m_recommended_action_isValid = ::OpenAPI::fromJsonValue(m_recommended_action, json[QString("recommendedAction")]);
    m_recommended_action_isSet = !json[QString("recommendedAction")].isNull() && m_recommended_action_isValid;

    m_recovery_provider_error_message_isValid = ::OpenAPI::fromJsonValue(m_recovery_provider_error_message, json[QString("recoveryProviderErrorMessage")]);
    m_recovery_provider_error_message_isSet = !json[QString("recoveryProviderErrorMessage")].isNull() && m_recovery_provider_error_message_isValid;

    m_summary_message_isValid = ::OpenAPI::fromJsonValue(m_summary_message, json[QString("summaryMessage")]);
    m_summary_message_isSet = !json[QString("summaryMessage")].isNull() && m_summary_message_isValid;
}

QString OAIHealthError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealthError::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_utc_isSet) {
        obj.insert(QString("creationTimeUtc"), ::OpenAPI::toJsonValue(m_creation_time_utc));
    }
    if (m_customer_resolvability_isSet) {
        obj.insert(QString("customerResolvability"), ::OpenAPI::toJsonValue(m_customer_resolvability));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_error_category_isSet) {
        obj.insert(QString("errorCategory"), ::OpenAPI::toJsonValue(m_error_category));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_id_isSet) {
        obj.insert(QString("errorId"), ::OpenAPI::toJsonValue(m_error_id));
    }
    if (m_error_level_isSet) {
        obj.insert(QString("errorLevel"), ::OpenAPI::toJsonValue(m_error_level));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_source_isSet) {
        obj.insert(QString("errorSource"), ::OpenAPI::toJsonValue(m_error_source));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_inner_health_errors.size() > 0) {
        obj.insert(QString("innerHealthErrors"), ::OpenAPI::toJsonValue(m_inner_health_errors));
    }
    if (m_possible_causes_isSet) {
        obj.insert(QString("possibleCauses"), ::OpenAPI::toJsonValue(m_possible_causes));
    }
    if (m_recommended_action_isSet) {
        obj.insert(QString("recommendedAction"), ::OpenAPI::toJsonValue(m_recommended_action));
    }
    if (m_recovery_provider_error_message_isSet) {
        obj.insert(QString("recoveryProviderErrorMessage"), ::OpenAPI::toJsonValue(m_recovery_provider_error_message));
    }
    if (m_summary_message_isSet) {
        obj.insert(QString("summaryMessage"), ::OpenAPI::toJsonValue(m_summary_message));
    }
    return obj;
}

QDateTime OAIHealthError::getCreationTimeUtc() const {
    return m_creation_time_utc;
}
void OAIHealthError::setCreationTimeUtc(const QDateTime &creation_time_utc) {
    m_creation_time_utc = creation_time_utc;
    m_creation_time_utc_isSet = true;
}

bool OAIHealthError::is_creation_time_utc_Set() const{
    return m_creation_time_utc_isSet;
}

bool OAIHealthError::is_creation_time_utc_Valid() const{
    return m_creation_time_utc_isValid;
}

QString OAIHealthError::getCustomerResolvability() const {
    return m_customer_resolvability;
}
void OAIHealthError::setCustomerResolvability(const QString &customer_resolvability) {
    m_customer_resolvability = customer_resolvability;
    m_customer_resolvability_isSet = true;
}

bool OAIHealthError::is_customer_resolvability_Set() const{
    return m_customer_resolvability_isSet;
}

bool OAIHealthError::is_customer_resolvability_Valid() const{
    return m_customer_resolvability_isValid;
}

QString OAIHealthError::getEntityId() const {
    return m_entity_id;
}
void OAIHealthError::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIHealthError::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIHealthError::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIHealthError::getErrorCategory() const {
    return m_error_category;
}
void OAIHealthError::setErrorCategory(const QString &error_category) {
    m_error_category = error_category;
    m_error_category_isSet = true;
}

bool OAIHealthError::is_error_category_Set() const{
    return m_error_category_isSet;
}

bool OAIHealthError::is_error_category_Valid() const{
    return m_error_category_isValid;
}

QString OAIHealthError::getErrorCode() const {
    return m_error_code;
}
void OAIHealthError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIHealthError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIHealthError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIHealthError::getErrorId() const {
    return m_error_id;
}
void OAIHealthError::setErrorId(const QString &error_id) {
    m_error_id = error_id;
    m_error_id_isSet = true;
}

bool OAIHealthError::is_error_id_Set() const{
    return m_error_id_isSet;
}

bool OAIHealthError::is_error_id_Valid() const{
    return m_error_id_isValid;
}

QString OAIHealthError::getErrorLevel() const {
    return m_error_level;
}
void OAIHealthError::setErrorLevel(const QString &error_level) {
    m_error_level = error_level;
    m_error_level_isSet = true;
}

bool OAIHealthError::is_error_level_Set() const{
    return m_error_level_isSet;
}

bool OAIHealthError::is_error_level_Valid() const{
    return m_error_level_isValid;
}

QString OAIHealthError::getErrorMessage() const {
    return m_error_message;
}
void OAIHealthError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIHealthError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIHealthError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIHealthError::getErrorSource() const {
    return m_error_source;
}
void OAIHealthError::setErrorSource(const QString &error_source) {
    m_error_source = error_source;
    m_error_source_isSet = true;
}

bool OAIHealthError::is_error_source_Set() const{
    return m_error_source_isSet;
}

bool OAIHealthError::is_error_source_Valid() const{
    return m_error_source_isValid;
}

QString OAIHealthError::getErrorType() const {
    return m_error_type;
}
void OAIHealthError::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIHealthError::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIHealthError::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QList<OAIInnerHealthError> OAIHealthError::getInnerHealthErrors() const {
    return m_inner_health_errors;
}
void OAIHealthError::setInnerHealthErrors(const QList<OAIInnerHealthError> &inner_health_errors) {
    m_inner_health_errors = inner_health_errors;
    m_inner_health_errors_isSet = true;
}

bool OAIHealthError::is_inner_health_errors_Set() const{
    return m_inner_health_errors_isSet;
}

bool OAIHealthError::is_inner_health_errors_Valid() const{
    return m_inner_health_errors_isValid;
}

QString OAIHealthError::getPossibleCauses() const {
    return m_possible_causes;
}
void OAIHealthError::setPossibleCauses(const QString &possible_causes) {
    m_possible_causes = possible_causes;
    m_possible_causes_isSet = true;
}

bool OAIHealthError::is_possible_causes_Set() const{
    return m_possible_causes_isSet;
}

bool OAIHealthError::is_possible_causes_Valid() const{
    return m_possible_causes_isValid;
}

QString OAIHealthError::getRecommendedAction() const {
    return m_recommended_action;
}
void OAIHealthError::setRecommendedAction(const QString &recommended_action) {
    m_recommended_action = recommended_action;
    m_recommended_action_isSet = true;
}

bool OAIHealthError::is_recommended_action_Set() const{
    return m_recommended_action_isSet;
}

bool OAIHealthError::is_recommended_action_Valid() const{
    return m_recommended_action_isValid;
}

QString OAIHealthError::getRecoveryProviderErrorMessage() const {
    return m_recovery_provider_error_message;
}
void OAIHealthError::setRecoveryProviderErrorMessage(const QString &recovery_provider_error_message) {
    m_recovery_provider_error_message = recovery_provider_error_message;
    m_recovery_provider_error_message_isSet = true;
}

bool OAIHealthError::is_recovery_provider_error_message_Set() const{
    return m_recovery_provider_error_message_isSet;
}

bool OAIHealthError::is_recovery_provider_error_message_Valid() const{
    return m_recovery_provider_error_message_isValid;
}

QString OAIHealthError::getSummaryMessage() const {
    return m_summary_message;
}
void OAIHealthError::setSummaryMessage(const QString &summary_message) {
    m_summary_message = summary_message;
    m_summary_message_isSet = true;
}

bool OAIHealthError::is_summary_message_Set() const{
    return m_summary_message_isSet;
}

bool OAIHealthError::is_summary_message_Valid() const{
    return m_summary_message_isValid;
}

bool OAIHealthError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_resolvability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inner_health_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_possible_causes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_provider_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealthError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
