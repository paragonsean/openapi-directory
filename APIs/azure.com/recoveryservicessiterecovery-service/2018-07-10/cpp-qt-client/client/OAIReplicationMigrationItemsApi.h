/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicationMigrationItemsApi_H
#define OAI_OAIReplicationMigrationItemsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEnableMigrationInput.h"
#include "OAIMigrateInput.h"
#include "OAIMigrationItem.h"
#include "OAIMigrationItemCollection.h"
#include "OAITestMigrateCleanupInput.h"
#include "OAITestMigrateInput.h"
#include "OAIUpdateMigrationItemInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicationMigrationItemsApi : public QObject {
    Q_OBJECT

public:
    OAIReplicationMigrationItemsApi(const int timeOut = 0);
    ~OAIReplicationMigrationItemsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  migration_item_name QString [required]
    * @param[in]  input OAIEnableMigrationInput [required]
    */
    virtual void replicationMigrationItemsCreate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &migration_item_name, const OAIEnableMigrationInput &input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  migration_item_name QString [required]
    * @param[in]  delete_option QString [optional]
    */
    virtual void replicationMigrationItemsDelete(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &migration_item_name, const ::OpenAPI::OptionalParam<QString> &delete_option = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  migration_item_name QString [required]
    */
    virtual void replicationMigrationItemsGet(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &migration_item_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  skip_token QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void replicationMigrationItemsList(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    */
    virtual void replicationMigrationItemsListByReplicationProtectionContainers(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  migration_item_name QString [required]
    * @param[in]  migrate_input OAIMigrateInput [required]
    */
    virtual void replicationMigrationItemsMigrate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &migration_item_name, const OAIMigrateInput &migrate_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  migration_item_name QString [required]
    * @param[in]  test_migrate_input OAITestMigrateInput [required]
    */
    virtual void replicationMigrationItemsTestMigrate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &migration_item_name, const OAITestMigrateInput &test_migrate_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  migration_item_name QString [required]
    * @param[in]  test_migrate_cleanup_input OAITestMigrateCleanupInput [required]
    */
    virtual void replicationMigrationItemsTestMigrateCleanup(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &migration_item_name, const OAITestMigrateCleanupInput &test_migrate_cleanup_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  migration_item_name QString [required]
    * @param[in]  input OAIUpdateMigrationItemInput [required]
    */
    virtual void replicationMigrationItemsUpdate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const QString &migration_item_name, const OAIUpdateMigrationItemInput &input);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void replicationMigrationItemsCreateCallback(OAIHttpRequestWorker *worker);
    void replicationMigrationItemsDeleteCallback(OAIHttpRequestWorker *worker);
    void replicationMigrationItemsGetCallback(OAIHttpRequestWorker *worker);
    void replicationMigrationItemsListCallback(OAIHttpRequestWorker *worker);
    void replicationMigrationItemsListByReplicationProtectionContainersCallback(OAIHttpRequestWorker *worker);
    void replicationMigrationItemsMigrateCallback(OAIHttpRequestWorker *worker);
    void replicationMigrationItemsTestMigrateCallback(OAIHttpRequestWorker *worker);
    void replicationMigrationItemsTestMigrateCleanupCallback(OAIHttpRequestWorker *worker);
    void replicationMigrationItemsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void replicationMigrationItemsCreateSignal(OAIMigrationItem summary);
    void replicationMigrationItemsDeleteSignal();
    void replicationMigrationItemsGetSignal(OAIMigrationItem summary);
    void replicationMigrationItemsListSignal(OAIMigrationItemCollection summary);
    void replicationMigrationItemsListByReplicationProtectionContainersSignal(OAIMigrationItemCollection summary);
    void replicationMigrationItemsMigrateSignal(OAIMigrationItem summary);
    void replicationMigrationItemsTestMigrateSignal(OAIMigrationItem summary);
    void replicationMigrationItemsTestMigrateCleanupSignal(OAIMigrationItem summary);
    void replicationMigrationItemsUpdateSignal(OAIMigrationItem summary);


    void replicationMigrationItemsCreateSignalFull(OAIHttpRequestWorker *worker, OAIMigrationItem summary);
    void replicationMigrationItemsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void replicationMigrationItemsGetSignalFull(OAIHttpRequestWorker *worker, OAIMigrationItem summary);
    void replicationMigrationItemsListSignalFull(OAIHttpRequestWorker *worker, OAIMigrationItemCollection summary);
    void replicationMigrationItemsListByReplicationProtectionContainersSignalFull(OAIHttpRequestWorker *worker, OAIMigrationItemCollection summary);
    void replicationMigrationItemsMigrateSignalFull(OAIHttpRequestWorker *worker, OAIMigrationItem summary);
    void replicationMigrationItemsTestMigrateSignalFull(OAIHttpRequestWorker *worker, OAIMigrationItem summary);
    void replicationMigrationItemsTestMigrateCleanupSignalFull(OAIHttpRequestWorker *worker, OAIMigrationItem summary);
    void replicationMigrationItemsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIMigrationItem summary);

    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsCreateSignalError() instead")
    void replicationMigrationItemsCreateSignalE(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsCreateSignalError(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsDeleteSignalError() instead")
    void replicationMigrationItemsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsGetSignalError() instead")
    void replicationMigrationItemsGetSignalE(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsGetSignalError(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsListSignalError() instead")
    void replicationMigrationItemsListSignalE(OAIMigrationItemCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsListSignalError(OAIMigrationItemCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsListByReplicationProtectionContainersSignalError() instead")
    void replicationMigrationItemsListByReplicationProtectionContainersSignalE(OAIMigrationItemCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsListByReplicationProtectionContainersSignalError(OAIMigrationItemCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsMigrateSignalError() instead")
    void replicationMigrationItemsMigrateSignalE(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsMigrateSignalError(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsTestMigrateSignalError() instead")
    void replicationMigrationItemsTestMigrateSignalE(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsTestMigrateSignalError(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsTestMigrateCleanupSignalError() instead")
    void replicationMigrationItemsTestMigrateCleanupSignalE(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsTestMigrateCleanupSignalError(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsUpdateSignalError() instead")
    void replicationMigrationItemsUpdateSignalE(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsUpdateSignalError(OAIMigrationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsCreateSignalErrorFull() instead")
    void replicationMigrationItemsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsDeleteSignalErrorFull() instead")
    void replicationMigrationItemsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsGetSignalErrorFull() instead")
    void replicationMigrationItemsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsListSignalErrorFull() instead")
    void replicationMigrationItemsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsListByReplicationProtectionContainersSignalErrorFull() instead")
    void replicationMigrationItemsListByReplicationProtectionContainersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsListByReplicationProtectionContainersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsMigrateSignalErrorFull() instead")
    void replicationMigrationItemsMigrateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsMigrateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsTestMigrateSignalErrorFull() instead")
    void replicationMigrationItemsTestMigrateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsTestMigrateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsTestMigrateCleanupSignalErrorFull() instead")
    void replicationMigrationItemsTestMigrateCleanupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsTestMigrateCleanupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationMigrationItemsUpdateSignalErrorFull() instead")
    void replicationMigrationItemsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationMigrationItemsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
