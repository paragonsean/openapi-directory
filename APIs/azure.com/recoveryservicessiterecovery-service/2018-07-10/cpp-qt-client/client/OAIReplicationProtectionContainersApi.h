/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReplicationProtectionContainersApi_H
#define OAI_OAIReplicationProtectionContainersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateProtectionContainerInput.h"
#include "OAIDiscoverProtectableItemRequest.h"
#include "OAIProtectionContainer.h"
#include "OAIProtectionContainerCollection.h"
#include "OAISwitchProtectionInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReplicationProtectionContainersApi : public QObject {
    Q_OBJECT

public:
    OAIReplicationProtectionContainersApi(const int timeOut = 0);
    ~OAIReplicationProtectionContainersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  creation_input OAICreateProtectionContainerInput [required]
    */
    virtual void replicationProtectionContainersCreate(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const OAICreateProtectionContainerInput &creation_input);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    */
    virtual void replicationProtectionContainersDelete(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  discover_protectable_item_request OAIDiscoverProtectableItemRequest [required]
    */
    virtual void replicationProtectionContainersDiscoverProtectableItem(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const OAIDiscoverProtectableItemRequest &discover_protectable_item_request);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    */
    virtual void replicationProtectionContainersGet(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void replicationProtectionContainersList(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    */
    virtual void replicationProtectionContainersListByReplicationFabrics(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  fabric_name QString [required]
    * @param[in]  protection_container_name QString [required]
    * @param[in]  switch_input OAISwitchProtectionInput [required]
    */
    virtual void replicationProtectionContainersSwitchProtection(const QString &api_version, const QString &resource_name, const QString &resource_group_name, const QString &subscription_id, const QString &fabric_name, const QString &protection_container_name, const OAISwitchProtectionInput &switch_input);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void replicationProtectionContainersCreateCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainersDeleteCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainersDiscoverProtectableItemCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainersGetCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainersListCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainersListByReplicationFabricsCallback(OAIHttpRequestWorker *worker);
    void replicationProtectionContainersSwitchProtectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void replicationProtectionContainersCreateSignal(OAIProtectionContainer summary);
    void replicationProtectionContainersDeleteSignal();
    void replicationProtectionContainersDiscoverProtectableItemSignal(OAIProtectionContainer summary);
    void replicationProtectionContainersGetSignal(OAIProtectionContainer summary);
    void replicationProtectionContainersListSignal(OAIProtectionContainerCollection summary);
    void replicationProtectionContainersListByReplicationFabricsSignal(OAIProtectionContainerCollection summary);
    void replicationProtectionContainersSwitchProtectionSignal(OAIProtectionContainer summary);


    void replicationProtectionContainersCreateSignalFull(OAIHttpRequestWorker *worker, OAIProtectionContainer summary);
    void replicationProtectionContainersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void replicationProtectionContainersDiscoverProtectableItemSignalFull(OAIHttpRequestWorker *worker, OAIProtectionContainer summary);
    void replicationProtectionContainersGetSignalFull(OAIHttpRequestWorker *worker, OAIProtectionContainer summary);
    void replicationProtectionContainersListSignalFull(OAIHttpRequestWorker *worker, OAIProtectionContainerCollection summary);
    void replicationProtectionContainersListByReplicationFabricsSignalFull(OAIHttpRequestWorker *worker, OAIProtectionContainerCollection summary);
    void replicationProtectionContainersSwitchProtectionSignalFull(OAIHttpRequestWorker *worker, OAIProtectionContainer summary);

    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersCreateSignalError() instead")
    void replicationProtectionContainersCreateSignalE(OAIProtectionContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersCreateSignalError(OAIProtectionContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersDeleteSignalError() instead")
    void replicationProtectionContainersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersDiscoverProtectableItemSignalError() instead")
    void replicationProtectionContainersDiscoverProtectableItemSignalE(OAIProtectionContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersDiscoverProtectableItemSignalError(OAIProtectionContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersGetSignalError() instead")
    void replicationProtectionContainersGetSignalE(OAIProtectionContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersGetSignalError(OAIProtectionContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersListSignalError() instead")
    void replicationProtectionContainersListSignalE(OAIProtectionContainerCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersListSignalError(OAIProtectionContainerCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersListByReplicationFabricsSignalError() instead")
    void replicationProtectionContainersListByReplicationFabricsSignalE(OAIProtectionContainerCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersListByReplicationFabricsSignalError(OAIProtectionContainerCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersSwitchProtectionSignalError() instead")
    void replicationProtectionContainersSwitchProtectionSignalE(OAIProtectionContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersSwitchProtectionSignalError(OAIProtectionContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersCreateSignalErrorFull() instead")
    void replicationProtectionContainersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersDeleteSignalErrorFull() instead")
    void replicationProtectionContainersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersDiscoverProtectableItemSignalErrorFull() instead")
    void replicationProtectionContainersDiscoverProtectableItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersDiscoverProtectableItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersGetSignalErrorFull() instead")
    void replicationProtectionContainersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersListSignalErrorFull() instead")
    void replicationProtectionContainersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersListByReplicationFabricsSignalErrorFull() instead")
    void replicationProtectionContainersListByReplicationFabricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersListByReplicationFabricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replicationProtectionContainersSwitchProtectionSignalErrorFull() instead")
    void replicationProtectionContainersSwitchProtectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replicationProtectionContainersSwitchProtectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
