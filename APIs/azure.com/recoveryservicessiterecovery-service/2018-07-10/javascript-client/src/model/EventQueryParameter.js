/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventQueryParameter model module.
 * @module model/EventQueryParameter
 * @version 2018-07-10
 */
class EventQueryParameter {
    /**
     * Constructs a new <code>EventQueryParameter</code>.
     * Implements the event query parameter.
     * @alias module:model/EventQueryParameter
     */
    constructor() { 
        
        EventQueryParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventQueryParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventQueryParameter} obj Optional instance to populate.
     * @return {module:model/EventQueryParameter} The populated <code>EventQueryParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventQueryParameter();

            if (data.hasOwnProperty('affectedObjectFriendlyName')) {
                obj['affectedObjectFriendlyName'] = ApiClient.convertToType(data['affectedObjectFriendlyName'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('eventCode')) {
                obj['eventCode'] = ApiClient.convertToType(data['eventCode'], 'String');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('fabricName')) {
                obj['fabricName'] = ApiClient.convertToType(data['fabricName'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventQueryParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventQueryParameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['affectedObjectFriendlyName'] && !(typeof data['affectedObjectFriendlyName'] === 'string' || data['affectedObjectFriendlyName'] instanceof String)) {
            throw new Error("Expected the field `affectedObjectFriendlyName` to be a primitive type in the JSON string but got " + data['affectedObjectFriendlyName']);
        }
        // ensure the json data is a string
        if (data['eventCode'] && !(typeof data['eventCode'] === 'string' || data['eventCode'] instanceof String)) {
            throw new Error("Expected the field `eventCode` to be a primitive type in the JSON string but got " + data['eventCode']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['fabricName'] && !(typeof data['fabricName'] === 'string' || data['fabricName'] instanceof String)) {
            throw new Error("Expected the field `fabricName` to be a primitive type in the JSON string but got " + data['fabricName']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }

        return true;
    }


}



/**
 * The affected object name of the events to be queried.
 * @member {String} affectedObjectFriendlyName
 */
EventQueryParameter.prototype['affectedObjectFriendlyName'] = undefined;

/**
 * The end time of the time range within which the events are to be queried.
 * @member {Date} endTime
 */
EventQueryParameter.prototype['endTime'] = undefined;

/**
 * The source id of the events to be queried.
 * @member {String} eventCode
 */
EventQueryParameter.prototype['eventCode'] = undefined;

/**
 * The type of the events to be queried.
 * @member {String} eventType
 */
EventQueryParameter.prototype['eventType'] = undefined;

/**
 * The affected object server id of the events to be queried.
 * @member {String} fabricName
 */
EventQueryParameter.prototype['fabricName'] = undefined;

/**
 * The severity of the events to be queried.
 * @member {String} severity
 */
EventQueryParameter.prototype['severity'] = undefined;

/**
 * The start time of the time range within which the events are to be queried.
 * @member {Date} startTime
 */
EventQueryParameter.prototype['startTime'] = undefined;






export default EventQueryParameter;

