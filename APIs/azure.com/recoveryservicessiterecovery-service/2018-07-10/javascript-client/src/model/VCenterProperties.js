/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthError from './HealthError';

/**
 * The VCenterProperties model module.
 * @module model/VCenterProperties
 * @version 2018-07-10
 */
class VCenterProperties {
    /**
     * Constructs a new <code>VCenterProperties</code>.
     * vCenter properties.
     * @alias module:model/VCenterProperties
     */
    constructor() { 
        
        VCenterProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VCenterProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VCenterProperties} obj Optional instance to populate.
     * @return {module:model/VCenterProperties} The populated <code>VCenterProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VCenterProperties();

            if (data.hasOwnProperty('discoveryStatus')) {
                obj['discoveryStatus'] = ApiClient.convertToType(data['discoveryStatus'], 'String');
            }
            if (data.hasOwnProperty('fabricArmResourceName')) {
                obj['fabricArmResourceName'] = ApiClient.convertToType(data['fabricArmResourceName'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('healthErrors')) {
                obj['healthErrors'] = ApiClient.convertToType(data['healthErrors'], [HealthError]);
            }
            if (data.hasOwnProperty('infrastructureId')) {
                obj['infrastructureId'] = ApiClient.convertToType(data['infrastructureId'], 'String');
            }
            if (data.hasOwnProperty('internalId')) {
                obj['internalId'] = ApiClient.convertToType(data['internalId'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('lastHeartbeat')) {
                obj['lastHeartbeat'] = ApiClient.convertToType(data['lastHeartbeat'], 'Date');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'String');
            }
            if (data.hasOwnProperty('processServerId')) {
                obj['processServerId'] = ApiClient.convertToType(data['processServerId'], 'String');
            }
            if (data.hasOwnProperty('runAsAccountId')) {
                obj['runAsAccountId'] = ApiClient.convertToType(data['runAsAccountId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VCenterProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VCenterProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['discoveryStatus'] && !(typeof data['discoveryStatus'] === 'string' || data['discoveryStatus'] instanceof String)) {
            throw new Error("Expected the field `discoveryStatus` to be a primitive type in the JSON string but got " + data['discoveryStatus']);
        }
        // ensure the json data is a string
        if (data['fabricArmResourceName'] && !(typeof data['fabricArmResourceName'] === 'string' || data['fabricArmResourceName'] instanceof String)) {
            throw new Error("Expected the field `fabricArmResourceName` to be a primitive type in the JSON string but got " + data['fabricArmResourceName']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        if (data['healthErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['healthErrors'])) {
                throw new Error("Expected the field `healthErrors` to be an array in the JSON data but got " + data['healthErrors']);
            }
            // validate the optional field `healthErrors` (array)
            for (const item of data['healthErrors']) {
                HealthError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['infrastructureId'] && !(typeof data['infrastructureId'] === 'string' || data['infrastructureId'] instanceof String)) {
            throw new Error("Expected the field `infrastructureId` to be a primitive type in the JSON string but got " + data['infrastructureId']);
        }
        // ensure the json data is a string
        if (data['internalId'] && !(typeof data['internalId'] === 'string' || data['internalId'] instanceof String)) {
            throw new Error("Expected the field `internalId` to be a primitive type in the JSON string but got " + data['internalId']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['port'] && !(typeof data['port'] === 'string' || data['port'] instanceof String)) {
            throw new Error("Expected the field `port` to be a primitive type in the JSON string but got " + data['port']);
        }
        // ensure the json data is a string
        if (data['processServerId'] && !(typeof data['processServerId'] === 'string' || data['processServerId'] instanceof String)) {
            throw new Error("Expected the field `processServerId` to be a primitive type in the JSON string but got " + data['processServerId']);
        }
        // ensure the json data is a string
        if (data['runAsAccountId'] && !(typeof data['runAsAccountId'] === 'string' || data['runAsAccountId'] instanceof String)) {
            throw new Error("Expected the field `runAsAccountId` to be a primitive type in the JSON string but got " + data['runAsAccountId']);
        }

        return true;
    }


}



/**
 * The VCenter discovery status.
 * @member {String} discoveryStatus
 */
VCenterProperties.prototype['discoveryStatus'] = undefined;

/**
 * The ARM resource name of the fabric containing this VCenter.
 * @member {String} fabricArmResourceName
 */
VCenterProperties.prototype['fabricArmResourceName'] = undefined;

/**
 * Friendly name of the vCenter.
 * @member {String} friendlyName
 */
VCenterProperties.prototype['friendlyName'] = undefined;

/**
 * The health errors for this VCenter.
 * @member {Array.<module:model/HealthError>} healthErrors
 */
VCenterProperties.prototype['healthErrors'] = undefined;

/**
 * The infrastructure Id of vCenter.
 * @member {String} infrastructureId
 */
VCenterProperties.prototype['infrastructureId'] = undefined;

/**
 * VCenter internal ID.
 * @member {String} internalId
 */
VCenterProperties.prototype['internalId'] = undefined;

/**
 * The IP address of the vCenter.
 * @member {String} ipAddress
 */
VCenterProperties.prototype['ipAddress'] = undefined;

/**
 * The time when the last heartbeat was received by vCenter.
 * @member {Date} lastHeartbeat
 */
VCenterProperties.prototype['lastHeartbeat'] = undefined;

/**
 * The port number for discovery.
 * @member {String} port
 */
VCenterProperties.prototype['port'] = undefined;

/**
 * The process server Id.
 * @member {String} processServerId
 */
VCenterProperties.prototype['processServerId'] = undefined;

/**
 * The account Id which has privileges to discover the vCenter.
 * @member {String} runAsAccountId
 */
VCenterProperties.prototype['runAsAccountId'] = undefined;






export default VCenterProperties;

