/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VMwareCbtNicInput model module.
 * @module model/VMwareCbtNicInput
 * @version 2018-07-10
 */
class VMwareCbtNicInput {
    /**
     * Constructs a new <code>VMwareCbtNicInput</code>.
     * VMwareCbt NIC input.
     * @alias module:model/VMwareCbtNicInput
     * @param isPrimaryNic {String} A value indicating whether this is the primary NIC.
     * @param nicId {String} The NIC Id.
     */
    constructor(isPrimaryNic, nicId) { 
        
        VMwareCbtNicInput.initialize(this, isPrimaryNic, nicId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, isPrimaryNic, nicId) { 
        obj['isPrimaryNic'] = isPrimaryNic;
        obj['nicId'] = nicId;
    }

    /**
     * Constructs a <code>VMwareCbtNicInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VMwareCbtNicInput} obj Optional instance to populate.
     * @return {module:model/VMwareCbtNicInput} The populated <code>VMwareCbtNicInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VMwareCbtNicInput();

            if (data.hasOwnProperty('isPrimaryNic')) {
                obj['isPrimaryNic'] = ApiClient.convertToType(data['isPrimaryNic'], 'String');
            }
            if (data.hasOwnProperty('isSelectedForMigration')) {
                obj['isSelectedForMigration'] = ApiClient.convertToType(data['isSelectedForMigration'], 'String');
            }
            if (data.hasOwnProperty('nicId')) {
                obj['nicId'] = ApiClient.convertToType(data['nicId'], 'String');
            }
            if (data.hasOwnProperty('targetStaticIPAddress')) {
                obj['targetStaticIPAddress'] = ApiClient.convertToType(data['targetStaticIPAddress'], 'String');
            }
            if (data.hasOwnProperty('targetSubnetName')) {
                obj['targetSubnetName'] = ApiClient.convertToType(data['targetSubnetName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VMwareCbtNicInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VMwareCbtNicInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VMwareCbtNicInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['isPrimaryNic'] && !(typeof data['isPrimaryNic'] === 'string' || data['isPrimaryNic'] instanceof String)) {
            throw new Error("Expected the field `isPrimaryNic` to be a primitive type in the JSON string but got " + data['isPrimaryNic']);
        }
        // ensure the json data is a string
        if (data['isSelectedForMigration'] && !(typeof data['isSelectedForMigration'] === 'string' || data['isSelectedForMigration'] instanceof String)) {
            throw new Error("Expected the field `isSelectedForMigration` to be a primitive type in the JSON string but got " + data['isSelectedForMigration']);
        }
        // ensure the json data is a string
        if (data['nicId'] && !(typeof data['nicId'] === 'string' || data['nicId'] instanceof String)) {
            throw new Error("Expected the field `nicId` to be a primitive type in the JSON string but got " + data['nicId']);
        }
        // ensure the json data is a string
        if (data['targetStaticIPAddress'] && !(typeof data['targetStaticIPAddress'] === 'string' || data['targetStaticIPAddress'] instanceof String)) {
            throw new Error("Expected the field `targetStaticIPAddress` to be a primitive type in the JSON string but got " + data['targetStaticIPAddress']);
        }
        // ensure the json data is a string
        if (data['targetSubnetName'] && !(typeof data['targetSubnetName'] === 'string' || data['targetSubnetName'] instanceof String)) {
            throw new Error("Expected the field `targetSubnetName` to be a primitive type in the JSON string but got " + data['targetSubnetName']);
        }

        return true;
    }


}

VMwareCbtNicInput.RequiredProperties = ["isPrimaryNic", "nicId"];

/**
 * A value indicating whether this is the primary NIC.
 * @member {String} isPrimaryNic
 */
VMwareCbtNicInput.prototype['isPrimaryNic'] = undefined;

/**
 * A value indicating whether this NIC is selected for migration.
 * @member {String} isSelectedForMigration
 */
VMwareCbtNicInput.prototype['isSelectedForMigration'] = undefined;

/**
 * The NIC Id.
 * @member {String} nicId
 */
VMwareCbtNicInput.prototype['nicId'] = undefined;

/**
 * The static IP address.
 * @member {String} targetStaticIPAddress
 */
VMwareCbtNicInput.prototype['targetStaticIPAddress'] = undefined;

/**
 * Target subnet name.
 * @member {String} targetSubnetName
 */
VMwareCbtNicInput.prototype['targetSubnetName'] = undefined;






export default VMwareCbtNicInput;

