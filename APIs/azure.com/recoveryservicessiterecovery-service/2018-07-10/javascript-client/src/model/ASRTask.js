/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupTaskDetails from './GroupTaskDetails';
import JobErrorDetails from './JobErrorDetails';
import TaskTypeDetails from './TaskTypeDetails';

/**
 * The ASRTask model module.
 * @module model/ASRTask
 * @version 2018-07-10
 */
class ASRTask {
    /**
     * Constructs a new <code>ASRTask</code>.
     * Task of the Job.
     * @alias module:model/ASRTask
     */
    constructor() { 
        
        ASRTask.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ASRTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ASRTask} obj Optional instance to populate.
     * @return {module:model/ASRTask} The populated <code>ASRTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ASRTask();

            if (data.hasOwnProperty('allowedActions')) {
                obj['allowedActions'] = ApiClient.convertToType(data['allowedActions'], ['String']);
            }
            if (data.hasOwnProperty('customDetails')) {
                obj['customDetails'] = TaskTypeDetails.constructFromObject(data['customDetails']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [JobErrorDetails]);
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('groupTaskCustomDetails')) {
                obj['groupTaskCustomDetails'] = GroupTaskDetails.constructFromObject(data['groupTaskCustomDetails']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateDescription')) {
                obj['stateDescription'] = ApiClient.convertToType(data['stateDescription'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('taskType')) {
                obj['taskType'] = ApiClient.convertToType(data['taskType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ASRTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ASRTask</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedActions'])) {
            throw new Error("Expected the field `allowedActions` to be an array in the JSON data but got " + data['allowedActions']);
        }
        // validate the optional field `customDetails`
        if (data['customDetails']) { // data not null
          TaskTypeDetails.validateJSON(data['customDetails']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                JobErrorDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // validate the optional field `groupTaskCustomDetails`
        if (data['groupTaskCustomDetails']) { // data not null
          GroupTaskDetails.validateJSON(data['groupTaskCustomDetails']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateDescription'] && !(typeof data['stateDescription'] === 'string' || data['stateDescription'] instanceof String)) {
            throw new Error("Expected the field `stateDescription` to be a primitive type in the JSON string but got " + data['stateDescription']);
        }
        // ensure the json data is a string
        if (data['taskId'] && !(typeof data['taskId'] === 'string' || data['taskId'] instanceof String)) {
            throw new Error("Expected the field `taskId` to be a primitive type in the JSON string but got " + data['taskId']);
        }
        // ensure the json data is a string
        if (data['taskType'] && !(typeof data['taskType'] === 'string' || data['taskType'] instanceof String)) {
            throw new Error("Expected the field `taskType` to be a primitive type in the JSON string but got " + data['taskType']);
        }

        return true;
    }


}



/**
 * The state/actions applicable on this task.
 * @member {Array.<String>} allowedActions
 */
ASRTask.prototype['allowedActions'] = undefined;

/**
 * @member {module:model/TaskTypeDetails} customDetails
 */
ASRTask.prototype['customDetails'] = undefined;

/**
 * The end time.
 * @member {Date} endTime
 */
ASRTask.prototype['endTime'] = undefined;

/**
 * The task error details.
 * @member {Array.<module:model/JobErrorDetails>} errors
 */
ASRTask.prototype['errors'] = undefined;

/**
 * The name.
 * @member {String} friendlyName
 */
ASRTask.prototype['friendlyName'] = undefined;

/**
 * @member {module:model/GroupTaskDetails} groupTaskCustomDetails
 */
ASRTask.prototype['groupTaskCustomDetails'] = undefined;

/**
 * The unique Task name.
 * @member {String} name
 */
ASRTask.prototype['name'] = undefined;

/**
 * The start time.
 * @member {Date} startTime
 */
ASRTask.prototype['startTime'] = undefined;

/**
 * The State. It is one of these values - NotStarted, InProgress, Succeeded, Failed, Cancelled, Suspended or Other.
 * @member {String} state
 */
ASRTask.prototype['state'] = undefined;

/**
 * The description of the task state. For example - For Succeeded state, description can be Completed, PartiallySucceeded, CompletedWithInformation or Skipped.
 * @member {String} stateDescription
 */
ASRTask.prototype['stateDescription'] = undefined;

/**
 * The Id.
 * @member {String} taskId
 */
ASRTask.prototype['taskId'] = undefined;

/**
 * The type of task. Details in CustomDetails property depend on this type.
 * @member {String} taskType
 */
ASRTask.prototype['taskType'] = undefined;






export default ASRTask;

