/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HealthError from './HealthError';
import MobilityServiceUpdate from './MobilityServiceUpdate';
import VersionDetails from './VersionDetails';

/**
 * The ProcessServer model module.
 * @module model/ProcessServer
 * @version 2018-07-10
 */
class ProcessServer {
    /**
     * Constructs a new <code>ProcessServer</code>.
     * Details of the Process Server.
     * @alias module:model/ProcessServer
     */
    constructor() { 
        
        ProcessServer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProcessServer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessServer} obj Optional instance to populate.
     * @return {module:model/ProcessServer} The populated <code>ProcessServer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessServer();

            if (data.hasOwnProperty('agentExpiryDate')) {
                obj['agentExpiryDate'] = ApiClient.convertToType(data['agentExpiryDate'], 'Date');
            }
            if (data.hasOwnProperty('agentVersion')) {
                obj['agentVersion'] = ApiClient.convertToType(data['agentVersion'], 'String');
            }
            if (data.hasOwnProperty('agentVersionDetails')) {
                obj['agentVersionDetails'] = VersionDetails.constructFromObject(data['agentVersionDetails']);
            }
            if (data.hasOwnProperty('availableMemoryInBytes')) {
                obj['availableMemoryInBytes'] = ApiClient.convertToType(data['availableMemoryInBytes'], 'Number');
            }
            if (data.hasOwnProperty('availableSpaceInBytes')) {
                obj['availableSpaceInBytes'] = ApiClient.convertToType(data['availableSpaceInBytes'], 'Number');
            }
            if (data.hasOwnProperty('cpuLoad')) {
                obj['cpuLoad'] = ApiClient.convertToType(data['cpuLoad'], 'String');
            }
            if (data.hasOwnProperty('cpuLoadStatus')) {
                obj['cpuLoadStatus'] = ApiClient.convertToType(data['cpuLoadStatus'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('healthErrors')) {
                obj['healthErrors'] = ApiClient.convertToType(data['healthErrors'], [HealthError]);
            }
            if (data.hasOwnProperty('hostId')) {
                obj['hostId'] = ApiClient.convertToType(data['hostId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('lastHeartbeat')) {
                obj['lastHeartbeat'] = ApiClient.convertToType(data['lastHeartbeat'], 'Date');
            }
            if (data.hasOwnProperty('machineCount')) {
                obj['machineCount'] = ApiClient.convertToType(data['machineCount'], 'String');
            }
            if (data.hasOwnProperty('memoryUsageStatus')) {
                obj['memoryUsageStatus'] = ApiClient.convertToType(data['memoryUsageStatus'], 'String');
            }
            if (data.hasOwnProperty('mobilityServiceUpdates')) {
                obj['mobilityServiceUpdates'] = ApiClient.convertToType(data['mobilityServiceUpdates'], [MobilityServiceUpdate]);
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('psServiceStatus')) {
                obj['psServiceStatus'] = ApiClient.convertToType(data['psServiceStatus'], 'String');
            }
            if (data.hasOwnProperty('replicationPairCount')) {
                obj['replicationPairCount'] = ApiClient.convertToType(data['replicationPairCount'], 'String');
            }
            if (data.hasOwnProperty('spaceUsageStatus')) {
                obj['spaceUsageStatus'] = ApiClient.convertToType(data['spaceUsageStatus'], 'String');
            }
            if (data.hasOwnProperty('sslCertExpiryDate')) {
                obj['sslCertExpiryDate'] = ApiClient.convertToType(data['sslCertExpiryDate'], 'Date');
            }
            if (data.hasOwnProperty('sslCertExpiryRemainingDays')) {
                obj['sslCertExpiryRemainingDays'] = ApiClient.convertToType(data['sslCertExpiryRemainingDays'], 'Number');
            }
            if (data.hasOwnProperty('systemLoad')) {
                obj['systemLoad'] = ApiClient.convertToType(data['systemLoad'], 'String');
            }
            if (data.hasOwnProperty('systemLoadStatus')) {
                obj['systemLoadStatus'] = ApiClient.convertToType(data['systemLoadStatus'], 'String');
            }
            if (data.hasOwnProperty('totalMemoryInBytes')) {
                obj['totalMemoryInBytes'] = ApiClient.convertToType(data['totalMemoryInBytes'], 'Number');
            }
            if (data.hasOwnProperty('totalSpaceInBytes')) {
                obj['totalSpaceInBytes'] = ApiClient.convertToType(data['totalSpaceInBytes'], 'Number');
            }
            if (data.hasOwnProperty('versionStatus')) {
                obj['versionStatus'] = ApiClient.convertToType(data['versionStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProcessServer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProcessServer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['agentVersion'] && !(typeof data['agentVersion'] === 'string' || data['agentVersion'] instanceof String)) {
            throw new Error("Expected the field `agentVersion` to be a primitive type in the JSON string but got " + data['agentVersion']);
        }
        // validate the optional field `agentVersionDetails`
        if (data['agentVersionDetails']) { // data not null
          VersionDetails.validateJSON(data['agentVersionDetails']);
        }
        // ensure the json data is a string
        if (data['cpuLoad'] && !(typeof data['cpuLoad'] === 'string' || data['cpuLoad'] instanceof String)) {
            throw new Error("Expected the field `cpuLoad` to be a primitive type in the JSON string but got " + data['cpuLoad']);
        }
        // ensure the json data is a string
        if (data['cpuLoadStatus'] && !(typeof data['cpuLoadStatus'] === 'string' || data['cpuLoadStatus'] instanceof String)) {
            throw new Error("Expected the field `cpuLoadStatus` to be a primitive type in the JSON string but got " + data['cpuLoadStatus']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        if (data['healthErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['healthErrors'])) {
                throw new Error("Expected the field `healthErrors` to be an array in the JSON data but got " + data['healthErrors']);
            }
            // validate the optional field `healthErrors` (array)
            for (const item of data['healthErrors']) {
                HealthError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['hostId'] && !(typeof data['hostId'] === 'string' || data['hostId'] instanceof String)) {
            throw new Error("Expected the field `hostId` to be a primitive type in the JSON string but got " + data['hostId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['machineCount'] && !(typeof data['machineCount'] === 'string' || data['machineCount'] instanceof String)) {
            throw new Error("Expected the field `machineCount` to be a primitive type in the JSON string but got " + data['machineCount']);
        }
        // ensure the json data is a string
        if (data['memoryUsageStatus'] && !(typeof data['memoryUsageStatus'] === 'string' || data['memoryUsageStatus'] instanceof String)) {
            throw new Error("Expected the field `memoryUsageStatus` to be a primitive type in the JSON string but got " + data['memoryUsageStatus']);
        }
        if (data['mobilityServiceUpdates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mobilityServiceUpdates'])) {
                throw new Error("Expected the field `mobilityServiceUpdates` to be an array in the JSON data but got " + data['mobilityServiceUpdates']);
            }
            // validate the optional field `mobilityServiceUpdates` (array)
            for (const item of data['mobilityServiceUpdates']) {
                MobilityServiceUpdate.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }
        // ensure the json data is a string
        if (data['psServiceStatus'] && !(typeof data['psServiceStatus'] === 'string' || data['psServiceStatus'] instanceof String)) {
            throw new Error("Expected the field `psServiceStatus` to be a primitive type in the JSON string but got " + data['psServiceStatus']);
        }
        // ensure the json data is a string
        if (data['replicationPairCount'] && !(typeof data['replicationPairCount'] === 'string' || data['replicationPairCount'] instanceof String)) {
            throw new Error("Expected the field `replicationPairCount` to be a primitive type in the JSON string but got " + data['replicationPairCount']);
        }
        // ensure the json data is a string
        if (data['spaceUsageStatus'] && !(typeof data['spaceUsageStatus'] === 'string' || data['spaceUsageStatus'] instanceof String)) {
            throw new Error("Expected the field `spaceUsageStatus` to be a primitive type in the JSON string but got " + data['spaceUsageStatus']);
        }
        // ensure the json data is a string
        if (data['systemLoad'] && !(typeof data['systemLoad'] === 'string' || data['systemLoad'] instanceof String)) {
            throw new Error("Expected the field `systemLoad` to be a primitive type in the JSON string but got " + data['systemLoad']);
        }
        // ensure the json data is a string
        if (data['systemLoadStatus'] && !(typeof data['systemLoadStatus'] === 'string' || data['systemLoadStatus'] instanceof String)) {
            throw new Error("Expected the field `systemLoadStatus` to be a primitive type in the JSON string but got " + data['systemLoadStatus']);
        }
        // ensure the json data is a string
        if (data['versionStatus'] && !(typeof data['versionStatus'] === 'string' || data['versionStatus'] instanceof String)) {
            throw new Error("Expected the field `versionStatus` to be a primitive type in the JSON string but got " + data['versionStatus']);
        }

        return true;
    }


}



/**
 * Agent expiry date.
 * @member {Date} agentExpiryDate
 */
ProcessServer.prototype['agentExpiryDate'] = undefined;

/**
 * The version of the scout component on the server.
 * @member {String} agentVersion
 */
ProcessServer.prototype['agentVersion'] = undefined;

/**
 * @member {module:model/VersionDetails} agentVersionDetails
 */
ProcessServer.prototype['agentVersionDetails'] = undefined;

/**
 * The available memory.
 * @member {Number} availableMemoryInBytes
 */
ProcessServer.prototype['availableMemoryInBytes'] = undefined;

/**
 * The available space.
 * @member {Number} availableSpaceInBytes
 */
ProcessServer.prototype['availableSpaceInBytes'] = undefined;

/**
 * The percentage of the CPU load.
 * @member {String} cpuLoad
 */
ProcessServer.prototype['cpuLoad'] = undefined;

/**
 * The CPU load status.
 * @member {String} cpuLoadStatus
 */
ProcessServer.prototype['cpuLoadStatus'] = undefined;

/**
 * The Process Server's friendly name.
 * @member {String} friendlyName
 */
ProcessServer.prototype['friendlyName'] = undefined;

/**
 * Health errors.
 * @member {Array.<module:model/HealthError>} healthErrors
 */
ProcessServer.prototype['healthErrors'] = undefined;

/**
 * The agent generated Id.
 * @member {String} hostId
 */
ProcessServer.prototype['hostId'] = undefined;

/**
 * The Process Server Id.
 * @member {String} id
 */
ProcessServer.prototype['id'] = undefined;

/**
 * The IP address of the server.
 * @member {String} ipAddress
 */
ProcessServer.prototype['ipAddress'] = undefined;

/**
 * The last heartbeat received from the server.
 * @member {Date} lastHeartbeat
 */
ProcessServer.prototype['lastHeartbeat'] = undefined;

/**
 * The servers configured with this PS.
 * @member {String} machineCount
 */
ProcessServer.prototype['machineCount'] = undefined;

/**
 * The memory usage status.
 * @member {String} memoryUsageStatus
 */
ProcessServer.prototype['memoryUsageStatus'] = undefined;

/**
 * The list of the mobility service updates available on the Process Server.
 * @member {Array.<module:model/MobilityServiceUpdate>} mobilityServiceUpdates
 */
ProcessServer.prototype['mobilityServiceUpdates'] = undefined;

/**
 * The OS type of the server.
 * @member {String} osType
 */
ProcessServer.prototype['osType'] = undefined;

/**
 * OS Version of the process server. Note: This will get populated if user has CS version greater than 9.12.0.0.
 * @member {String} osVersion
 */
ProcessServer.prototype['osVersion'] = undefined;

/**
 * The PS service status.
 * @member {String} psServiceStatus
 */
ProcessServer.prototype['psServiceStatus'] = undefined;

/**
 * The number of replication pairs configured in this PS.
 * @member {String} replicationPairCount
 */
ProcessServer.prototype['replicationPairCount'] = undefined;

/**
 * The space usage status.
 * @member {String} spaceUsageStatus
 */
ProcessServer.prototype['spaceUsageStatus'] = undefined;

/**
 * The PS SSL cert expiry date.
 * @member {Date} sslCertExpiryDate
 */
ProcessServer.prototype['sslCertExpiryDate'] = undefined;

/**
 * CS SSL cert expiry date.
 * @member {Number} sslCertExpiryRemainingDays
 */
ProcessServer.prototype['sslCertExpiryRemainingDays'] = undefined;

/**
 * The percentage of the system load.
 * @member {String} systemLoad
 */
ProcessServer.prototype['systemLoad'] = undefined;

/**
 * The system load status.
 * @member {String} systemLoadStatus
 */
ProcessServer.prototype['systemLoadStatus'] = undefined;

/**
 * The total memory.
 * @member {Number} totalMemoryInBytes
 */
ProcessServer.prototype['totalMemoryInBytes'] = undefined;

/**
 * The total space.
 * @member {Number} totalSpaceInBytes
 */
ProcessServer.prototype['totalSpaceInBytes'] = undefined;

/**
 * Version status
 * @member {String} versionStatus
 */
ProcessServer.prototype['versionStatus'] = undefined;






export default ProcessServer;

