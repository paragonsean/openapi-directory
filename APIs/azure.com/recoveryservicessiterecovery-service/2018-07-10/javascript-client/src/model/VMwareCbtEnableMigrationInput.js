/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnableMigrationProviderSpecificInput from './EnableMigrationProviderSpecificInput';
import VMwareCbtDiskInput from './VMwareCbtDiskInput';

/**
 * The VMwareCbtEnableMigrationInput model module.
 * @module model/VMwareCbtEnableMigrationInput
 * @version 2018-07-10
 */
class VMwareCbtEnableMigrationInput {
    /**
     * Constructs a new <code>VMwareCbtEnableMigrationInput</code>.
     * VMwareCbt specific enable migration input.
     * @alias module:model/VMwareCbtEnableMigrationInput
     * @extends module:model/EnableMigrationProviderSpecificInput
     * @implements module:model/EnableMigrationProviderSpecificInput
     * @param instanceType {String} The class type.
     */
    constructor(instanceType) { 
        EnableMigrationProviderSpecificInput.initialize(this, instanceType);
        VMwareCbtEnableMigrationInput.initialize(this, instanceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, instanceType) { 
        obj['dataMoverRunAsAccountId'] = dataMoverRunAsAccountId;
        obj['disksToInclude'] = disksToInclude;
        obj['snapshotRunAsAccountId'] = snapshotRunAsAccountId;
        obj['targetNetworkId'] = targetNetworkId;
        obj['targetResourceGroupId'] = targetResourceGroupId;
        obj['vmwareMachineId'] = vmwareMachineId;
    }

    /**
     * Constructs a <code>VMwareCbtEnableMigrationInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VMwareCbtEnableMigrationInput} obj Optional instance to populate.
     * @return {module:model/VMwareCbtEnableMigrationInput} The populated <code>VMwareCbtEnableMigrationInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VMwareCbtEnableMigrationInput();
            EnableMigrationProviderSpecificInput.constructFromObject(data, obj);
            EnableMigrationProviderSpecificInput.constructFromObject(data, obj);

            if (data.hasOwnProperty('dataMoverRunAsAccountId')) {
                obj['dataMoverRunAsAccountId'] = ApiClient.convertToType(data['dataMoverRunAsAccountId'], 'String');
            }
            if (data.hasOwnProperty('disksToInclude')) {
                obj['disksToInclude'] = ApiClient.convertToType(data['disksToInclude'], [VMwareCbtDiskInput]);
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('snapshotRunAsAccountId')) {
                obj['snapshotRunAsAccountId'] = ApiClient.convertToType(data['snapshotRunAsAccountId'], 'String');
            }
            if (data.hasOwnProperty('targetAvailabilitySetId')) {
                obj['targetAvailabilitySetId'] = ApiClient.convertToType(data['targetAvailabilitySetId'], 'String');
            }
            if (data.hasOwnProperty('targetBootDiagnosticsStorageAccountId')) {
                obj['targetBootDiagnosticsStorageAccountId'] = ApiClient.convertToType(data['targetBootDiagnosticsStorageAccountId'], 'String');
            }
            if (data.hasOwnProperty('targetNetworkId')) {
                obj['targetNetworkId'] = ApiClient.convertToType(data['targetNetworkId'], 'String');
            }
            if (data.hasOwnProperty('targetResourceGroupId')) {
                obj['targetResourceGroupId'] = ApiClient.convertToType(data['targetResourceGroupId'], 'String');
            }
            if (data.hasOwnProperty('targetSubnetName')) {
                obj['targetSubnetName'] = ApiClient.convertToType(data['targetSubnetName'], 'String');
            }
            if (data.hasOwnProperty('targetVmName')) {
                obj['targetVmName'] = ApiClient.convertToType(data['targetVmName'], 'String');
            }
            if (data.hasOwnProperty('targetVmSize')) {
                obj['targetVmSize'] = ApiClient.convertToType(data['targetVmSize'], 'String');
            }
            if (data.hasOwnProperty('vmwareMachineId')) {
                obj['vmwareMachineId'] = ApiClient.convertToType(data['vmwareMachineId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VMwareCbtEnableMigrationInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VMwareCbtEnableMigrationInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VMwareCbtEnableMigrationInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataMoverRunAsAccountId'] && !(typeof data['dataMoverRunAsAccountId'] === 'string' || data['dataMoverRunAsAccountId'] instanceof String)) {
            throw new Error("Expected the field `dataMoverRunAsAccountId` to be a primitive type in the JSON string but got " + data['dataMoverRunAsAccountId']);
        }
        if (data['disksToInclude']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['disksToInclude'])) {
                throw new Error("Expected the field `disksToInclude` to be an array in the JSON data but got " + data['disksToInclude']);
            }
            // validate the optional field `disksToInclude` (array)
            for (const item of data['disksToInclude']) {
                VMwareCbtDiskInput.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // ensure the json data is a string
        if (data['snapshotRunAsAccountId'] && !(typeof data['snapshotRunAsAccountId'] === 'string' || data['snapshotRunAsAccountId'] instanceof String)) {
            throw new Error("Expected the field `snapshotRunAsAccountId` to be a primitive type in the JSON string but got " + data['snapshotRunAsAccountId']);
        }
        // ensure the json data is a string
        if (data['targetAvailabilitySetId'] && !(typeof data['targetAvailabilitySetId'] === 'string' || data['targetAvailabilitySetId'] instanceof String)) {
            throw new Error("Expected the field `targetAvailabilitySetId` to be a primitive type in the JSON string but got " + data['targetAvailabilitySetId']);
        }
        // ensure the json data is a string
        if (data['targetBootDiagnosticsStorageAccountId'] && !(typeof data['targetBootDiagnosticsStorageAccountId'] === 'string' || data['targetBootDiagnosticsStorageAccountId'] instanceof String)) {
            throw new Error("Expected the field `targetBootDiagnosticsStorageAccountId` to be a primitive type in the JSON string but got " + data['targetBootDiagnosticsStorageAccountId']);
        }
        // ensure the json data is a string
        if (data['targetNetworkId'] && !(typeof data['targetNetworkId'] === 'string' || data['targetNetworkId'] instanceof String)) {
            throw new Error("Expected the field `targetNetworkId` to be a primitive type in the JSON string but got " + data['targetNetworkId']);
        }
        // ensure the json data is a string
        if (data['targetResourceGroupId'] && !(typeof data['targetResourceGroupId'] === 'string' || data['targetResourceGroupId'] instanceof String)) {
            throw new Error("Expected the field `targetResourceGroupId` to be a primitive type in the JSON string but got " + data['targetResourceGroupId']);
        }
        // ensure the json data is a string
        if (data['targetSubnetName'] && !(typeof data['targetSubnetName'] === 'string' || data['targetSubnetName'] instanceof String)) {
            throw new Error("Expected the field `targetSubnetName` to be a primitive type in the JSON string but got " + data['targetSubnetName']);
        }
        // ensure the json data is a string
        if (data['targetVmName'] && !(typeof data['targetVmName'] === 'string' || data['targetVmName'] instanceof String)) {
            throw new Error("Expected the field `targetVmName` to be a primitive type in the JSON string but got " + data['targetVmName']);
        }
        // ensure the json data is a string
        if (data['targetVmSize'] && !(typeof data['targetVmSize'] === 'string' || data['targetVmSize'] instanceof String)) {
            throw new Error("Expected the field `targetVmSize` to be a primitive type in the JSON string but got " + data['targetVmSize']);
        }
        // ensure the json data is a string
        if (data['vmwareMachineId'] && !(typeof data['vmwareMachineId'] === 'string' || data['vmwareMachineId'] instanceof String)) {
            throw new Error("Expected the field `vmwareMachineId` to be a primitive type in the JSON string but got " + data['vmwareMachineId']);
        }

        return true;
    }


}

VMwareCbtEnableMigrationInput.RequiredProperties = ["dataMoverRunAsAccountId", "disksToInclude", "snapshotRunAsAccountId", "targetNetworkId", "targetResourceGroupId", "vmwareMachineId", "instanceType"];

/**
 * The data mover RunAs account Id.
 * @member {String} dataMoverRunAsAccountId
 */
VMwareCbtEnableMigrationInput.prototype['dataMoverRunAsAccountId'] = undefined;

/**
 * The disks to include list.
 * @member {Array.<module:model/VMwareCbtDiskInput>} disksToInclude
 */
VMwareCbtEnableMigrationInput.prototype['disksToInclude'] = undefined;

/**
 * License type.
 * @member {module:model/VMwareCbtEnableMigrationInput.LicenseTypeEnum} licenseType
 */
VMwareCbtEnableMigrationInput.prototype['licenseType'] = undefined;

/**
 * The snapshot RunAs account Id.
 * @member {String} snapshotRunAsAccountId
 */
VMwareCbtEnableMigrationInput.prototype['snapshotRunAsAccountId'] = undefined;

/**
 * The target availability set ARM Id.
 * @member {String} targetAvailabilitySetId
 */
VMwareCbtEnableMigrationInput.prototype['targetAvailabilitySetId'] = undefined;

/**
 * The target boot diagnostics storage account ARM Id.
 * @member {String} targetBootDiagnosticsStorageAccountId
 */
VMwareCbtEnableMigrationInput.prototype['targetBootDiagnosticsStorageAccountId'] = undefined;

/**
 * The target network ARM Id.
 * @member {String} targetNetworkId
 */
VMwareCbtEnableMigrationInput.prototype['targetNetworkId'] = undefined;

/**
 * The target resource group ARM Id.
 * @member {String} targetResourceGroupId
 */
VMwareCbtEnableMigrationInput.prototype['targetResourceGroupId'] = undefined;

/**
 * The target subnet name.
 * @member {String} targetSubnetName
 */
VMwareCbtEnableMigrationInput.prototype['targetSubnetName'] = undefined;

/**
 * The target VM name.
 * @member {String} targetVmName
 */
VMwareCbtEnableMigrationInput.prototype['targetVmName'] = undefined;

/**
 * The target VM size.
 * @member {String} targetVmSize
 */
VMwareCbtEnableMigrationInput.prototype['targetVmSize'] = undefined;

/**
 * The ARM Id of the VM discovered in VMware.
 * @member {String} vmwareMachineId
 */
VMwareCbtEnableMigrationInput.prototype['vmwareMachineId'] = undefined;


// Implement EnableMigrationProviderSpecificInput interface:
/**
 * The class type.
 * @member {String} instanceType
 */
EnableMigrationProviderSpecificInput.prototype['instanceType'] = undefined;



/**
 * Allowed values for the <code>licenseType</code> property.
 * @enum {String}
 * @readonly
 */
VMwareCbtEnableMigrationInput['LicenseTypeEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "NoLicenseType"
     * @const
     */
    "NoLicenseType": "NoLicenseType",

    /**
     * value: "WindowsServer"
     * @const
     */
    "WindowsServer": "WindowsServer"
};



export default VMwareCbtEnableMigrationInput;

