/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventProviderSpecificDetails from './EventProviderSpecificDetails';
import EventSpecificDetails from './EventSpecificDetails';
import HealthError from './HealthError';

/**
 * The EventProperties model module.
 * @module model/EventProperties
 * @version 2018-07-10
 */
class EventProperties {
    /**
     * Constructs a new <code>EventProperties</code>.
     * The properties of a monitoring event.
     * @alias module:model/EventProperties
     */
    constructor() { 
        
        EventProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventProperties} obj Optional instance to populate.
     * @return {module:model/EventProperties} The populated <code>EventProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventProperties();

            if (data.hasOwnProperty('affectedObjectFriendlyName')) {
                obj['affectedObjectFriendlyName'] = ApiClient.convertToType(data['affectedObjectFriendlyName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eventCode')) {
                obj['eventCode'] = ApiClient.convertToType(data['eventCode'], 'String');
            }
            if (data.hasOwnProperty('eventSpecificDetails')) {
                obj['eventSpecificDetails'] = EventSpecificDetails.constructFromObject(data['eventSpecificDetails']);
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('fabricId')) {
                obj['fabricId'] = ApiClient.convertToType(data['fabricId'], 'String');
            }
            if (data.hasOwnProperty('healthErrors')) {
                obj['healthErrors'] = ApiClient.convertToType(data['healthErrors'], [HealthError]);
            }
            if (data.hasOwnProperty('providerSpecificDetails')) {
                obj['providerSpecificDetails'] = EventProviderSpecificDetails.constructFromObject(data['providerSpecificDetails']);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('timeOfOccurrence')) {
                obj['timeOfOccurrence'] = ApiClient.convertToType(data['timeOfOccurrence'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['affectedObjectFriendlyName'] && !(typeof data['affectedObjectFriendlyName'] === 'string' || data['affectedObjectFriendlyName'] instanceof String)) {
            throw new Error("Expected the field `affectedObjectFriendlyName` to be a primitive type in the JSON string but got " + data['affectedObjectFriendlyName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['eventCode'] && !(typeof data['eventCode'] === 'string' || data['eventCode'] instanceof String)) {
            throw new Error("Expected the field `eventCode` to be a primitive type in the JSON string but got " + data['eventCode']);
        }
        // validate the optional field `eventSpecificDetails`
        if (data['eventSpecificDetails']) { // data not null
          EventSpecificDetails.validateJSON(data['eventSpecificDetails']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['fabricId'] && !(typeof data['fabricId'] === 'string' || data['fabricId'] instanceof String)) {
            throw new Error("Expected the field `fabricId` to be a primitive type in the JSON string but got " + data['fabricId']);
        }
        if (data['healthErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['healthErrors'])) {
                throw new Error("Expected the field `healthErrors` to be an array in the JSON data but got " + data['healthErrors']);
            }
            // validate the optional field `healthErrors` (array)
            for (const item of data['healthErrors']) {
                HealthError.validateJSON(item);
            };
        }
        // validate the optional field `providerSpecificDetails`
        if (data['providerSpecificDetails']) { // data not null
          EventProviderSpecificDetails.validateJSON(data['providerSpecificDetails']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }

        return true;
    }


}



/**
 * The friendly name of the source of the event on which it is raised (for example, VM, VMM etc).
 * @member {String} affectedObjectFriendlyName
 */
EventProperties.prototype['affectedObjectFriendlyName'] = undefined;

/**
 * The event name.
 * @member {String} description
 */
EventProperties.prototype['description'] = undefined;

/**
 * The Id of the monitoring event.
 * @member {String} eventCode
 */
EventProperties.prototype['eventCode'] = undefined;

/**
 * @member {module:model/EventSpecificDetails} eventSpecificDetails
 */
EventProperties.prototype['eventSpecificDetails'] = undefined;

/**
 * The type of the event. for example: VM Health, Server Health, Job Failure etc.
 * @member {String} eventType
 */
EventProperties.prototype['eventType'] = undefined;

/**
 * The ARM ID of the fabric.
 * @member {String} fabricId
 */
EventProperties.prototype['fabricId'] = undefined;

/**
 * The list of errors / warnings capturing details associated with the issue(s).
 * @member {Array.<module:model/HealthError>} healthErrors
 */
EventProperties.prototype['healthErrors'] = undefined;

/**
 * @member {module:model/EventProviderSpecificDetails} providerSpecificDetails
 */
EventProperties.prototype['providerSpecificDetails'] = undefined;

/**
 * The severity of the event.
 * @member {String} severity
 */
EventProperties.prototype['severity'] = undefined;

/**
 * The time of occurrence of the event.
 * @member {Date} timeOfOccurrence
 */
EventProperties.prototype['timeOfOccurrence'] = undefined;






export default EventProperties;

