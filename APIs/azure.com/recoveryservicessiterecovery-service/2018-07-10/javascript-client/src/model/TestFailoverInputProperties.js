/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProviderSpecificFailoverInput from './ProviderSpecificFailoverInput';

/**
 * The TestFailoverInputProperties model module.
 * @module model/TestFailoverInputProperties
 * @version 2018-07-10
 */
class TestFailoverInputProperties {
    /**
     * Constructs a new <code>TestFailoverInputProperties</code>.
     * Input definition for planned failover input properties.
     * @alias module:model/TestFailoverInputProperties
     */
    constructor() { 
        
        TestFailoverInputProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestFailoverInputProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestFailoverInputProperties} obj Optional instance to populate.
     * @return {module:model/TestFailoverInputProperties} The populated <code>TestFailoverInputProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestFailoverInputProperties();

            if (data.hasOwnProperty('failoverDirection')) {
                obj['failoverDirection'] = ApiClient.convertToType(data['failoverDirection'], 'String');
            }
            if (data.hasOwnProperty('networkId')) {
                obj['networkId'] = ApiClient.convertToType(data['networkId'], 'String');
            }
            if (data.hasOwnProperty('networkType')) {
                obj['networkType'] = ApiClient.convertToType(data['networkType'], 'String');
            }
            if (data.hasOwnProperty('providerSpecificDetails')) {
                obj['providerSpecificDetails'] = ProviderSpecificFailoverInput.constructFromObject(data['providerSpecificDetails']);
            }
            if (data.hasOwnProperty('skipTestFailoverCleanup')) {
                obj['skipTestFailoverCleanup'] = ApiClient.convertToType(data['skipTestFailoverCleanup'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestFailoverInputProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestFailoverInputProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['failoverDirection'] && !(typeof data['failoverDirection'] === 'string' || data['failoverDirection'] instanceof String)) {
            throw new Error("Expected the field `failoverDirection` to be a primitive type in the JSON string but got " + data['failoverDirection']);
        }
        // ensure the json data is a string
        if (data['networkId'] && !(typeof data['networkId'] === 'string' || data['networkId'] instanceof String)) {
            throw new Error("Expected the field `networkId` to be a primitive type in the JSON string but got " + data['networkId']);
        }
        // ensure the json data is a string
        if (data['networkType'] && !(typeof data['networkType'] === 'string' || data['networkType'] instanceof String)) {
            throw new Error("Expected the field `networkType` to be a primitive type in the JSON string but got " + data['networkType']);
        }
        // validate the optional field `providerSpecificDetails`
        if (data['providerSpecificDetails']) { // data not null
          ProviderSpecificFailoverInput.validateJSON(data['providerSpecificDetails']);
        }
        // ensure the json data is a string
        if (data['skipTestFailoverCleanup'] && !(typeof data['skipTestFailoverCleanup'] === 'string' || data['skipTestFailoverCleanup'] instanceof String)) {
            throw new Error("Expected the field `skipTestFailoverCleanup` to be a primitive type in the JSON string but got " + data['skipTestFailoverCleanup']);
        }

        return true;
    }


}



/**
 * Failover direction.
 * @member {String} failoverDirection
 */
TestFailoverInputProperties.prototype['failoverDirection'] = undefined;

/**
 * The id of the network to be used for test failover
 * @member {String} networkId
 */
TestFailoverInputProperties.prototype['networkId'] = undefined;

/**
 * Network type to be used for test failover.
 * @member {String} networkType
 */
TestFailoverInputProperties.prototype['networkType'] = undefined;

/**
 * @member {module:model/ProviderSpecificFailoverInput} providerSpecificDetails
 */
TestFailoverInputProperties.prototype['providerSpecificDetails'] = undefined;

/**
 * A value indicating whether the test failover cleanup is to be skipped.
 * @member {String} skipTestFailoverCleanup
 */
TestFailoverInputProperties.prototype['skipTestFailoverCleanup'] = undefined;






export default TestFailoverInputProperties;

