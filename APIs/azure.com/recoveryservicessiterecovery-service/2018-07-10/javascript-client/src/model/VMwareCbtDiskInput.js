/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VMwareCbtDiskInput model module.
 * @module model/VMwareCbtDiskInput
 * @version 2018-07-10
 */
class VMwareCbtDiskInput {
    /**
     * Constructs a new <code>VMwareCbtDiskInput</code>.
     * VMwareCbt disk input.
     * @alias module:model/VMwareCbtDiskInput
     * @param diskId {String} The disk Id.
     * @param isOSDisk {String} A value indicating whether the disk is the OS disk.
     * @param logStorageAccountId {String} The log storage account ARM Id.
     * @param logStorageAccountSasSecretName {String} The key vault secret name of the log storage account.
     */
    constructor(diskId, isOSDisk, logStorageAccountId, logStorageAccountSasSecretName) { 
        
        VMwareCbtDiskInput.initialize(this, diskId, isOSDisk, logStorageAccountId, logStorageAccountSasSecretName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, diskId, isOSDisk, logStorageAccountId, logStorageAccountSasSecretName) { 
        obj['diskId'] = diskId;
        obj['isOSDisk'] = isOSDisk;
        obj['logStorageAccountId'] = logStorageAccountId;
        obj['logStorageAccountSasSecretName'] = logStorageAccountSasSecretName;
    }

    /**
     * Constructs a <code>VMwareCbtDiskInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VMwareCbtDiskInput} obj Optional instance to populate.
     * @return {module:model/VMwareCbtDiskInput} The populated <code>VMwareCbtDiskInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VMwareCbtDiskInput();

            if (data.hasOwnProperty('diskId')) {
                obj['diskId'] = ApiClient.convertToType(data['diskId'], 'String');
            }
            if (data.hasOwnProperty('diskType')) {
                obj['diskType'] = ApiClient.convertToType(data['diskType'], 'String');
            }
            if (data.hasOwnProperty('isOSDisk')) {
                obj['isOSDisk'] = ApiClient.convertToType(data['isOSDisk'], 'String');
            }
            if (data.hasOwnProperty('logStorageAccountId')) {
                obj['logStorageAccountId'] = ApiClient.convertToType(data['logStorageAccountId'], 'String');
            }
            if (data.hasOwnProperty('logStorageAccountSasSecretName')) {
                obj['logStorageAccountSasSecretName'] = ApiClient.convertToType(data['logStorageAccountSasSecretName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VMwareCbtDiskInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VMwareCbtDiskInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VMwareCbtDiskInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['diskId'] && !(typeof data['diskId'] === 'string' || data['diskId'] instanceof String)) {
            throw new Error("Expected the field `diskId` to be a primitive type in the JSON string but got " + data['diskId']);
        }
        // ensure the json data is a string
        if (data['diskType'] && !(typeof data['diskType'] === 'string' || data['diskType'] instanceof String)) {
            throw new Error("Expected the field `diskType` to be a primitive type in the JSON string but got " + data['diskType']);
        }
        // ensure the json data is a string
        if (data['isOSDisk'] && !(typeof data['isOSDisk'] === 'string' || data['isOSDisk'] instanceof String)) {
            throw new Error("Expected the field `isOSDisk` to be a primitive type in the JSON string but got " + data['isOSDisk']);
        }
        // ensure the json data is a string
        if (data['logStorageAccountId'] && !(typeof data['logStorageAccountId'] === 'string' || data['logStorageAccountId'] instanceof String)) {
            throw new Error("Expected the field `logStorageAccountId` to be a primitive type in the JSON string but got " + data['logStorageAccountId']);
        }
        // ensure the json data is a string
        if (data['logStorageAccountSasSecretName'] && !(typeof data['logStorageAccountSasSecretName'] === 'string' || data['logStorageAccountSasSecretName'] instanceof String)) {
            throw new Error("Expected the field `logStorageAccountSasSecretName` to be a primitive type in the JSON string but got " + data['logStorageAccountSasSecretName']);
        }

        return true;
    }


}

VMwareCbtDiskInput.RequiredProperties = ["diskId", "isOSDisk", "logStorageAccountId", "logStorageAccountSasSecretName"];

/**
 * The disk Id.
 * @member {String} diskId
 */
VMwareCbtDiskInput.prototype['diskId'] = undefined;

/**
 * The disk type.
 * @member {module:model/VMwareCbtDiskInput.DiskTypeEnum} diskType
 */
VMwareCbtDiskInput.prototype['diskType'] = undefined;

/**
 * A value indicating whether the disk is the OS disk.
 * @member {String} isOSDisk
 */
VMwareCbtDiskInput.prototype['isOSDisk'] = undefined;

/**
 * The log storage account ARM Id.
 * @member {String} logStorageAccountId
 */
VMwareCbtDiskInput.prototype['logStorageAccountId'] = undefined;

/**
 * The key vault secret name of the log storage account.
 * @member {String} logStorageAccountSasSecretName
 */
VMwareCbtDiskInput.prototype['logStorageAccountSasSecretName'] = undefined;





/**
 * Allowed values for the <code>diskType</code> property.
 * @enum {String}
 * @readonly
 */
VMwareCbtDiskInput['DiskTypeEnum'] = {

    /**
     * value: "Standard_LRS"
     * @const
     */
    "Standard_LRS": "Standard_LRS",

    /**
     * value: "Premium_LRS"
     * @const
     */
    "Premium_LRS": "Premium_LRS",

    /**
     * value: "StandardSSD_LRS"
     * @const
     */
    "StandardSSD_LRS": "StandardSSD_LRS"
};



export default VMwareCbtDiskInput;

