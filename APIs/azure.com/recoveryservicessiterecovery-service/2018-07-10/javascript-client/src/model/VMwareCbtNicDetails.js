/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VMwareCbtNicDetails model module.
 * @module model/VMwareCbtNicDetails
 * @version 2018-07-10
 */
class VMwareCbtNicDetails {
    /**
     * Constructs a new <code>VMwareCbtNicDetails</code>.
     * VMwareCbt NIC details.
     * @alias module:model/VMwareCbtNicDetails
     */
    constructor() { 
        
        VMwareCbtNicDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VMwareCbtNicDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VMwareCbtNicDetails} obj Optional instance to populate.
     * @return {module:model/VMwareCbtNicDetails} The populated <code>VMwareCbtNicDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VMwareCbtNicDetails();

            if (data.hasOwnProperty('isPrimaryNic')) {
                obj['isPrimaryNic'] = ApiClient.convertToType(data['isPrimaryNic'], 'String');
            }
            if (data.hasOwnProperty('isSelectedForMigration')) {
                obj['isSelectedForMigration'] = ApiClient.convertToType(data['isSelectedForMigration'], 'String');
            }
            if (data.hasOwnProperty('nicId')) {
                obj['nicId'] = ApiClient.convertToType(data['nicId'], 'String');
            }
            if (data.hasOwnProperty('sourceIPAddress')) {
                obj['sourceIPAddress'] = ApiClient.convertToType(data['sourceIPAddress'], 'String');
            }
            if (data.hasOwnProperty('sourceIPAddressType')) {
                obj['sourceIPAddressType'] = ApiClient.convertToType(data['sourceIPAddressType'], 'String');
            }
            if (data.hasOwnProperty('sourceNetworkId')) {
                obj['sourceNetworkId'] = ApiClient.convertToType(data['sourceNetworkId'], 'String');
            }
            if (data.hasOwnProperty('targetIPAddress')) {
                obj['targetIPAddress'] = ApiClient.convertToType(data['targetIPAddress'], 'String');
            }
            if (data.hasOwnProperty('targetIPAddressType')) {
                obj['targetIPAddressType'] = ApiClient.convertToType(data['targetIPAddressType'], 'String');
            }
            if (data.hasOwnProperty('targetSubnetName')) {
                obj['targetSubnetName'] = ApiClient.convertToType(data['targetSubnetName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VMwareCbtNicDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VMwareCbtNicDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['isPrimaryNic'] && !(typeof data['isPrimaryNic'] === 'string' || data['isPrimaryNic'] instanceof String)) {
            throw new Error("Expected the field `isPrimaryNic` to be a primitive type in the JSON string but got " + data['isPrimaryNic']);
        }
        // ensure the json data is a string
        if (data['isSelectedForMigration'] && !(typeof data['isSelectedForMigration'] === 'string' || data['isSelectedForMigration'] instanceof String)) {
            throw new Error("Expected the field `isSelectedForMigration` to be a primitive type in the JSON string but got " + data['isSelectedForMigration']);
        }
        // ensure the json data is a string
        if (data['nicId'] && !(typeof data['nicId'] === 'string' || data['nicId'] instanceof String)) {
            throw new Error("Expected the field `nicId` to be a primitive type in the JSON string but got " + data['nicId']);
        }
        // ensure the json data is a string
        if (data['sourceIPAddress'] && !(typeof data['sourceIPAddress'] === 'string' || data['sourceIPAddress'] instanceof String)) {
            throw new Error("Expected the field `sourceIPAddress` to be a primitive type in the JSON string but got " + data['sourceIPAddress']);
        }
        // ensure the json data is a string
        if (data['sourceIPAddressType'] && !(typeof data['sourceIPAddressType'] === 'string' || data['sourceIPAddressType'] instanceof String)) {
            throw new Error("Expected the field `sourceIPAddressType` to be a primitive type in the JSON string but got " + data['sourceIPAddressType']);
        }
        // ensure the json data is a string
        if (data['sourceNetworkId'] && !(typeof data['sourceNetworkId'] === 'string' || data['sourceNetworkId'] instanceof String)) {
            throw new Error("Expected the field `sourceNetworkId` to be a primitive type in the JSON string but got " + data['sourceNetworkId']);
        }
        // ensure the json data is a string
        if (data['targetIPAddress'] && !(typeof data['targetIPAddress'] === 'string' || data['targetIPAddress'] instanceof String)) {
            throw new Error("Expected the field `targetIPAddress` to be a primitive type in the JSON string but got " + data['targetIPAddress']);
        }
        // ensure the json data is a string
        if (data['targetIPAddressType'] && !(typeof data['targetIPAddressType'] === 'string' || data['targetIPAddressType'] instanceof String)) {
            throw new Error("Expected the field `targetIPAddressType` to be a primitive type in the JSON string but got " + data['targetIPAddressType']);
        }
        // ensure the json data is a string
        if (data['targetSubnetName'] && !(typeof data['targetSubnetName'] === 'string' || data['targetSubnetName'] instanceof String)) {
            throw new Error("Expected the field `targetSubnetName` to be a primitive type in the JSON string but got " + data['targetSubnetName']);
        }

        return true;
    }


}



/**
 * A value indicating whether this is the primary NIC.
 * @member {String} isPrimaryNic
 */
VMwareCbtNicDetails.prototype['isPrimaryNic'] = undefined;

/**
 * A value indicating whether this NIC is selected for migration.
 * @member {String} isSelectedForMigration
 */
VMwareCbtNicDetails.prototype['isSelectedForMigration'] = undefined;

/**
 * The NIC Id.
 * @member {String} nicId
 */
VMwareCbtNicDetails.prototype['nicId'] = undefined;

/**
 * The source IP address.
 * @member {String} sourceIPAddress
 */
VMwareCbtNicDetails.prototype['sourceIPAddress'] = undefined;

/**
 * The source IP address type.
 * @member {module:model/VMwareCbtNicDetails.SourceIPAddressTypeEnum} sourceIPAddressType
 */
VMwareCbtNicDetails.prototype['sourceIPAddressType'] = undefined;

/**
 * Source network Id.
 * @member {String} sourceNetworkId
 */
VMwareCbtNicDetails.prototype['sourceNetworkId'] = undefined;

/**
 * The target IP address.
 * @member {String} targetIPAddress
 */
VMwareCbtNicDetails.prototype['targetIPAddress'] = undefined;

/**
 * The target IP address type.
 * @member {module:model/VMwareCbtNicDetails.TargetIPAddressTypeEnum} targetIPAddressType
 */
VMwareCbtNicDetails.prototype['targetIPAddressType'] = undefined;

/**
 * Target subnet name.
 * @member {String} targetSubnetName
 */
VMwareCbtNicDetails.prototype['targetSubnetName'] = undefined;





/**
 * Allowed values for the <code>sourceIPAddressType</code> property.
 * @enum {String}
 * @readonly
 */
VMwareCbtNicDetails['SourceIPAddressTypeEnum'] = {

    /**
     * value: "Dynamic"
     * @const
     */
    "Dynamic": "Dynamic",

    /**
     * value: "Static"
     * @const
     */
    "Static": "Static"
};


/**
 * Allowed values for the <code>targetIPAddressType</code> property.
 * @enum {String}
 * @readonly
 */
VMwareCbtNicDetails['TargetIPAddressTypeEnum'] = {

    /**
     * value: "Dynamic"
     * @const
     */
    "Dynamic": "Dynamic",

    /**
     * value: "Static"
     * @const
     */
    "Static": "Static"
};



export default VMwareCbtNicDetails;

