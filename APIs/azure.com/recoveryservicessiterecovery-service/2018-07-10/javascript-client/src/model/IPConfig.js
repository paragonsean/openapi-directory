/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IPConfig model module.
 * @module model/IPConfig
 * @version 2018-07-10
 */
class IPConfig {
    /**
     * Constructs a new <code>IPConfig</code>.
     * IP configuration details.
     * @alias module:model/IPConfig
     */
    constructor() { 
        
        IPConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IPConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IPConfig} obj Optional instance to populate.
     * @return {module:model/IPConfig} The populated <code>IPConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IPConfig();

            if (data.hasOwnProperty('lBBackendAddressPoolIds')) {
                obj['lBBackendAddressPoolIds'] = ApiClient.convertToType(data['lBBackendAddressPoolIds'], ['String']);
            }
            if (data.hasOwnProperty('publicIpAddressId')) {
                obj['publicIpAddressId'] = ApiClient.convertToType(data['publicIpAddressId'], 'String');
            }
            if (data.hasOwnProperty('staticIPAddress')) {
                obj['staticIPAddress'] = ApiClient.convertToType(data['staticIPAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IPConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IPConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['lBBackendAddressPoolIds'])) {
            throw new Error("Expected the field `lBBackendAddressPoolIds` to be an array in the JSON data but got " + data['lBBackendAddressPoolIds']);
        }
        // ensure the json data is a string
        if (data['publicIpAddressId'] && !(typeof data['publicIpAddressId'] === 'string' || data['publicIpAddressId'] instanceof String)) {
            throw new Error("Expected the field `publicIpAddressId` to be a primitive type in the JSON string but got " + data['publicIpAddressId']);
        }
        // ensure the json data is a string
        if (data['staticIPAddress'] && !(typeof data['staticIPAddress'] === 'string' || data['staticIPAddress'] instanceof String)) {
            throw new Error("Expected the field `staticIPAddress` to be a primitive type in the JSON string but got " + data['staticIPAddress']);
        }

        return true;
    }


}



/**
 * The backend address pools associated with the IP configuration.
 * @member {Array.<String>} lBBackendAddressPoolIds
 */
IPConfig.prototype['lBBackendAddressPoolIds'] = undefined;

/**
 * The Id of the public IP address associated with the IP configuration.
 * @member {String} publicIpAddressId
 */
IPConfig.prototype['publicIpAddressId'] = undefined;

/**
 * The static IP address of the IP configuration.
 * @member {String} staticIPAddress
 */
IPConfig.prototype['staticIPAddress'] = undefined;






export default IPConfig;

