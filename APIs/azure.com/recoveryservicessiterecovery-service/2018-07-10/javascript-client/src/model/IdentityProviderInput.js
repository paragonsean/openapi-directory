/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IdentityProviderInput model module.
 * @module model/IdentityProviderInput
 * @version 2018-07-10
 */
class IdentityProviderInput {
    /**
     * Constructs a new <code>IdentityProviderInput</code>.
     * Identity provider input.
     * @alias module:model/IdentityProviderInput
     * @param aadAuthority {String} The base authority for Azure Active Directory authentication.
     * @param applicationId {String} The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * @param audience {String} The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * @param objectId {String} The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     * @param tenantId {String} The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
     */
    constructor(aadAuthority, applicationId, audience, objectId, tenantId) { 
        
        IdentityProviderInput.initialize(this, aadAuthority, applicationId, audience, objectId, tenantId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aadAuthority, applicationId, audience, objectId, tenantId) { 
        obj['aadAuthority'] = aadAuthority;
        obj['applicationId'] = applicationId;
        obj['audience'] = audience;
        obj['objectId'] = objectId;
        obj['tenantId'] = tenantId;
    }

    /**
     * Constructs a <code>IdentityProviderInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentityProviderInput} obj Optional instance to populate.
     * @return {module:model/IdentityProviderInput} The populated <code>IdentityProviderInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentityProviderInput();

            if (data.hasOwnProperty('aadAuthority')) {
                obj['aadAuthority'] = ApiClient.convertToType(data['aadAuthority'], 'String');
            }
            if (data.hasOwnProperty('applicationId')) {
                obj['applicationId'] = ApiClient.convertToType(data['applicationId'], 'String');
            }
            if (data.hasOwnProperty('audience')) {
                obj['audience'] = ApiClient.convertToType(data['audience'], 'String');
            }
            if (data.hasOwnProperty('objectId')) {
                obj['objectId'] = ApiClient.convertToType(data['objectId'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentityProviderInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityProviderInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IdentityProviderInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aadAuthority'] && !(typeof data['aadAuthority'] === 'string' || data['aadAuthority'] instanceof String)) {
            throw new Error("Expected the field `aadAuthority` to be a primitive type in the JSON string but got " + data['aadAuthority']);
        }
        // ensure the json data is a string
        if (data['applicationId'] && !(typeof data['applicationId'] === 'string' || data['applicationId'] instanceof String)) {
            throw new Error("Expected the field `applicationId` to be a primitive type in the JSON string but got " + data['applicationId']);
        }
        // ensure the json data is a string
        if (data['audience'] && !(typeof data['audience'] === 'string' || data['audience'] instanceof String)) {
            throw new Error("Expected the field `audience` to be a primitive type in the JSON string but got " + data['audience']);
        }
        // ensure the json data is a string
        if (data['objectId'] && !(typeof data['objectId'] === 'string' || data['objectId'] instanceof String)) {
            throw new Error("Expected the field `objectId` to be a primitive type in the JSON string but got " + data['objectId']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}

IdentityProviderInput.RequiredProperties = ["aadAuthority", "applicationId", "audience", "objectId", "tenantId"];

/**
 * The base authority for Azure Active Directory authentication.
 * @member {String} aadAuthority
 */
IdentityProviderInput.prototype['aadAuthority'] = undefined;

/**
 * The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
 * @member {String} applicationId
 */
IdentityProviderInput.prototype['applicationId'] = undefined;

/**
 * The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
 * @member {String} audience
 */
IdentityProviderInput.prototype['audience'] = undefined;

/**
 * The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.
 * @member {String} objectId
 */
IdentityProviderInput.prototype['objectId'] = undefined;

/**
 * The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.
 * @member {String} tenantId
 */
IdentityProviderInput.prototype['tenantId'] = undefined;






export default IdentityProviderInput;

