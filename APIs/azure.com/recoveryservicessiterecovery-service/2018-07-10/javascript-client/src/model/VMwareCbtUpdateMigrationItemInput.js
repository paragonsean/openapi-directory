/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateMigrationItemProviderSpecificInput from './UpdateMigrationItemProviderSpecificInput';
import VMwareCbtNicInput from './VMwareCbtNicInput';

/**
 * The VMwareCbtUpdateMigrationItemInput model module.
 * @module model/VMwareCbtUpdateMigrationItemInput
 * @version 2018-07-10
 */
class VMwareCbtUpdateMigrationItemInput {
    /**
     * Constructs a new <code>VMwareCbtUpdateMigrationItemInput</code>.
     * VMwareCbt specific update migration item input.
     * @alias module:model/VMwareCbtUpdateMigrationItemInput
     * @extends module:model/UpdateMigrationItemProviderSpecificInput
     * @implements module:model/UpdateMigrationItemProviderSpecificInput
     */
    constructor() { 
        UpdateMigrationItemProviderSpecificInput.initialize(this);
        VMwareCbtUpdateMigrationItemInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VMwareCbtUpdateMigrationItemInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VMwareCbtUpdateMigrationItemInput} obj Optional instance to populate.
     * @return {module:model/VMwareCbtUpdateMigrationItemInput} The populated <code>VMwareCbtUpdateMigrationItemInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VMwareCbtUpdateMigrationItemInput();
            UpdateMigrationItemProviderSpecificInput.constructFromObject(data, obj);
            UpdateMigrationItemProviderSpecificInput.constructFromObject(data, obj);

            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('targetAvailabilitySetId')) {
                obj['targetAvailabilitySetId'] = ApiClient.convertToType(data['targetAvailabilitySetId'], 'String');
            }
            if (data.hasOwnProperty('targetBootDiagnosticsStorageAccountId')) {
                obj['targetBootDiagnosticsStorageAccountId'] = ApiClient.convertToType(data['targetBootDiagnosticsStorageAccountId'], 'String');
            }
            if (data.hasOwnProperty('targetNetworkId')) {
                obj['targetNetworkId'] = ApiClient.convertToType(data['targetNetworkId'], 'String');
            }
            if (data.hasOwnProperty('targetResourceGroupId')) {
                obj['targetResourceGroupId'] = ApiClient.convertToType(data['targetResourceGroupId'], 'String');
            }
            if (data.hasOwnProperty('targetVmName')) {
                obj['targetVmName'] = ApiClient.convertToType(data['targetVmName'], 'String');
            }
            if (data.hasOwnProperty('targetVmSize')) {
                obj['targetVmSize'] = ApiClient.convertToType(data['targetVmSize'], 'String');
            }
            if (data.hasOwnProperty('vmNics')) {
                obj['vmNics'] = ApiClient.convertToType(data['vmNics'], [VMwareCbtNicInput]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VMwareCbtUpdateMigrationItemInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VMwareCbtUpdateMigrationItemInput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // ensure the json data is a string
        if (data['targetAvailabilitySetId'] && !(typeof data['targetAvailabilitySetId'] === 'string' || data['targetAvailabilitySetId'] instanceof String)) {
            throw new Error("Expected the field `targetAvailabilitySetId` to be a primitive type in the JSON string but got " + data['targetAvailabilitySetId']);
        }
        // ensure the json data is a string
        if (data['targetBootDiagnosticsStorageAccountId'] && !(typeof data['targetBootDiagnosticsStorageAccountId'] === 'string' || data['targetBootDiagnosticsStorageAccountId'] instanceof String)) {
            throw new Error("Expected the field `targetBootDiagnosticsStorageAccountId` to be a primitive type in the JSON string but got " + data['targetBootDiagnosticsStorageAccountId']);
        }
        // ensure the json data is a string
        if (data['targetNetworkId'] && !(typeof data['targetNetworkId'] === 'string' || data['targetNetworkId'] instanceof String)) {
            throw new Error("Expected the field `targetNetworkId` to be a primitive type in the JSON string but got " + data['targetNetworkId']);
        }
        // ensure the json data is a string
        if (data['targetResourceGroupId'] && !(typeof data['targetResourceGroupId'] === 'string' || data['targetResourceGroupId'] instanceof String)) {
            throw new Error("Expected the field `targetResourceGroupId` to be a primitive type in the JSON string but got " + data['targetResourceGroupId']);
        }
        // ensure the json data is a string
        if (data['targetVmName'] && !(typeof data['targetVmName'] === 'string' || data['targetVmName'] instanceof String)) {
            throw new Error("Expected the field `targetVmName` to be a primitive type in the JSON string but got " + data['targetVmName']);
        }
        // ensure the json data is a string
        if (data['targetVmSize'] && !(typeof data['targetVmSize'] === 'string' || data['targetVmSize'] instanceof String)) {
            throw new Error("Expected the field `targetVmSize` to be a primitive type in the JSON string but got " + data['targetVmSize']);
        }
        if (data['vmNics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vmNics'])) {
                throw new Error("Expected the field `vmNics` to be an array in the JSON data but got " + data['vmNics']);
            }
            // validate the optional field `vmNics` (array)
            for (const item of data['vmNics']) {
                VMwareCbtNicInput.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The license type.
 * @member {module:model/VMwareCbtUpdateMigrationItemInput.LicenseTypeEnum} licenseType
 */
VMwareCbtUpdateMigrationItemInput.prototype['licenseType'] = undefined;

/**
 * The target availability set ARM Id.
 * @member {String} targetAvailabilitySetId
 */
VMwareCbtUpdateMigrationItemInput.prototype['targetAvailabilitySetId'] = undefined;

/**
 * The target boot diagnostics storage account ARM Id.
 * @member {String} targetBootDiagnosticsStorageAccountId
 */
VMwareCbtUpdateMigrationItemInput.prototype['targetBootDiagnosticsStorageAccountId'] = undefined;

/**
 * The target network ARM Id.
 * @member {String} targetNetworkId
 */
VMwareCbtUpdateMigrationItemInput.prototype['targetNetworkId'] = undefined;

/**
 * The target resource group ARM Id.
 * @member {String} targetResourceGroupId
 */
VMwareCbtUpdateMigrationItemInput.prototype['targetResourceGroupId'] = undefined;

/**
 * The target VM name.
 * @member {String} targetVmName
 */
VMwareCbtUpdateMigrationItemInput.prototype['targetVmName'] = undefined;

/**
 * The target VM size.
 * @member {String} targetVmSize
 */
VMwareCbtUpdateMigrationItemInput.prototype['targetVmSize'] = undefined;

/**
 * The list of NIC details.
 * @member {Array.<module:model/VMwareCbtNicInput>} vmNics
 */
VMwareCbtUpdateMigrationItemInput.prototype['vmNics'] = undefined;


// Implement UpdateMigrationItemProviderSpecificInput interface:
/**
 * The class type.
 * @member {String} instanceType
 */
UpdateMigrationItemProviderSpecificInput.prototype['instanceType'] = undefined;



/**
 * Allowed values for the <code>licenseType</code> property.
 * @enum {String}
 * @readonly
 */
VMwareCbtUpdateMigrationItemInput['LicenseTypeEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "NoLicenseType"
     * @const
     */
    "NoLicenseType": "NoLicenseType",

    /**
     * value: "WindowsServer"
     * @const
     */
    "WindowsServer": "WindowsServer"
};



export default VMwareCbtUpdateMigrationItemInput;

