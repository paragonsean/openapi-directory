/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EnableMigrationInput from '../model/EnableMigrationInput';
import MigrateInput from '../model/MigrateInput';
import MigrationItem from '../model/MigrationItem';
import MigrationItemCollection from '../model/MigrationItemCollection';
import TestMigrateCleanupInput from '../model/TestMigrateCleanupInput';
import TestMigrateInput from '../model/TestMigrateInput';
import UpdateMigrationItemInput from '../model/UpdateMigrationItemInput';

/**
* ReplicationMigrationItems service.
* @module api/ReplicationMigrationItemsApi
* @version 2018-07-10
*/
export default class ReplicationMigrationItemsApi {

    /**
    * Constructs a new ReplicationMigrationItemsApi. 
    * @alias module:api/ReplicationMigrationItemsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicationMigrationItemsCreate operation.
     * @callback module:api/ReplicationMigrationItemsApi~replicationMigrationItemsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables migration.
     * The operation to create an ASR migration item (enable migration).
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} migrationItemName Migration item name.
     * @param {module:model/EnableMigrationInput} input Enable migration input.
     * @param {module:api/ReplicationMigrationItemsApi~replicationMigrationItemsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationItem}
     */
    replicationMigrationItemsCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, input, callback) {
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationMigrationItemsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsCreate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationMigrationItemsCreate");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsCreate");
      }
      // verify the required parameter 'migrationItemName' is set
      if (migrationItemName === undefined || migrationItemName === null) {
        throw new Error("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsCreate");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling replicationMigrationItemsCreate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'migrationItemName': migrationItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrationItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationMigrationItemsDelete operation.
     * @callback module:api/ReplicationMigrationItemsApi~replicationMigrationItemsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the migration item.
     * The operation to delete an ASR migration item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} migrationItemName Migration item name.
     * @param {Object} opts Optional parameters
     * @param {String} [deleteOption] The delete option.
     * @param {module:api/ReplicationMigrationItemsApi~replicationMigrationItemsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationMigrationItemsDelete(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationMigrationItemsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsDelete");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationMigrationItemsDelete");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsDelete");
      }
      // verify the required parameter 'migrationItemName' is set
      if (migrationItemName === undefined || migrationItemName === null) {
        throw new Error("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsDelete");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'migrationItemName': migrationItemName
      };
      let queryParams = {
        'api-version': apiVersion,
        'deleteOption': opts['deleteOption']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationMigrationItemsGet operation.
     * @callback module:api/ReplicationMigrationItemsApi~replicationMigrationItemsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a migration item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric unique name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} migrationItemName Migration item name.
     * @param {module:api/ReplicationMigrationItemsApi~replicationMigrationItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationItem}
     */
    replicationMigrationItemsGet(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationMigrationItemsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsGet");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationMigrationItemsGet");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsGet");
      }
      // verify the required parameter 'migrationItemName' is set
      if (migrationItemName === undefined || migrationItemName === null) {
        throw new Error("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsGet");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'migrationItemName': migrationItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MigrationItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationMigrationItemsList operation.
     * @callback module:api/ReplicationMigrationItemsApi~replicationMigrationItemsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of migration items in the vault.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] The pagination token.
     * @param {String} [filter] OData filter options.
     * @param {module:api/ReplicationMigrationItemsApi~replicationMigrationItemsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationItemCollection}
     */
    replicationMigrationItemsList(apiVersion, resourceName, resourceGroupName, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsList");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationMigrationItemsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsList");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        'skipToken': opts['skipToken'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MigrationItemCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationMigrationItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationMigrationItemsListByReplicationProtectionContainers operation.
     * @callback module:api/ReplicationMigrationItemsApi~replicationMigrationItemsListByReplicationProtectionContainersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of migration items in the protection container.
     * Gets the list of ASR migration items in the protection container.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {module:api/ReplicationMigrationItemsApi~replicationMigrationItemsListByReplicationProtectionContainersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationItemCollection}
     */
    replicationMigrationItemsListByReplicationProtectionContainers(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationMigrationItemsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationMigrationItemsListByReplicationProtectionContainers");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsListByReplicationProtectionContainers");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MigrationItemCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationMigrationItemsMigrate operation.
     * @callback module:api/ReplicationMigrationItemsApi~replicationMigrationItemsMigrateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrate item.
     * The operation to initiate migration of the item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} migrationItemName Migration item name.
     * @param {module:model/MigrateInput} migrateInput Migrate input.
     * @param {module:api/ReplicationMigrationItemsApi~replicationMigrationItemsMigrateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationItem}
     */
    replicationMigrationItemsMigrate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, migrateInput, callback) {
      let postBody = migrateInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsMigrate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationMigrationItemsMigrate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsMigrate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsMigrate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationMigrationItemsMigrate");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsMigrate");
      }
      // verify the required parameter 'migrationItemName' is set
      if (migrationItemName === undefined || migrationItemName === null) {
        throw new Error("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsMigrate");
      }
      // verify the required parameter 'migrateInput' is set
      if (migrateInput === undefined || migrateInput === null) {
        throw new Error("Missing the required parameter 'migrateInput' when calling replicationMigrationItemsMigrate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'migrationItemName': migrationItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrationItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationMigrationItemsTestMigrate operation.
     * @callback module:api/ReplicationMigrationItemsApi~replicationMigrationItemsTestMigrateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test migrate item.
     * The operation to initiate test migration of the item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} migrationItemName Migration item name.
     * @param {module:model/TestMigrateInput} testMigrateInput Test migrate input.
     * @param {module:api/ReplicationMigrationItemsApi~replicationMigrationItemsTestMigrateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationItem}
     */
    replicationMigrationItemsTestMigrate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, testMigrateInput, callback) {
      let postBody = testMigrateInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsTestMigrate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationMigrationItemsTestMigrate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsTestMigrate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsTestMigrate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationMigrationItemsTestMigrate");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsTestMigrate");
      }
      // verify the required parameter 'migrationItemName' is set
      if (migrationItemName === undefined || migrationItemName === null) {
        throw new Error("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsTestMigrate");
      }
      // verify the required parameter 'testMigrateInput' is set
      if (testMigrateInput === undefined || testMigrateInput === null) {
        throw new Error("Missing the required parameter 'testMigrateInput' when calling replicationMigrationItemsTestMigrate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'migrationItemName': migrationItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrationItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationMigrationItemsTestMigrateCleanup operation.
     * @callback module:api/ReplicationMigrationItemsApi~replicationMigrationItemsTestMigrateCleanupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test migrate cleanup.
     * The operation to initiate test migrate cleanup.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} migrationItemName Migration item name.
     * @param {module:model/TestMigrateCleanupInput} testMigrateCleanupInput Test migrate cleanup input.
     * @param {module:api/ReplicationMigrationItemsApi~replicationMigrationItemsTestMigrateCleanupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationItem}
     */
    replicationMigrationItemsTestMigrateCleanup(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput, callback) {
      let postBody = testMigrateCleanupInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsTestMigrateCleanup");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationMigrationItemsTestMigrateCleanup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsTestMigrateCleanup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsTestMigrateCleanup");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationMigrationItemsTestMigrateCleanup");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsTestMigrateCleanup");
      }
      // verify the required parameter 'migrationItemName' is set
      if (migrationItemName === undefined || migrationItemName === null) {
        throw new Error("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsTestMigrateCleanup");
      }
      // verify the required parameter 'testMigrateCleanupInput' is set
      if (testMigrateCleanupInput === undefined || testMigrateCleanupInput === null) {
        throw new Error("Missing the required parameter 'testMigrateCleanupInput' when calling replicationMigrationItemsTestMigrateCleanup");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'migrationItemName': migrationItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrationItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrateCleanup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationMigrationItemsUpdate operation.
     * @callback module:api/ReplicationMigrationItemsApi~replicationMigrationItemsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MigrationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates migration item.
     * The operation to update the recovery settings of an ASR migration item.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} protectionContainerName Protection container name.
     * @param {String} migrationItemName Migration item name.
     * @param {module:model/UpdateMigrationItemInput} input Update migration item input.
     * @param {module:api/ReplicationMigrationItemsApi~replicationMigrationItemsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MigrationItem}
     */
    replicationMigrationItemsUpdate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, protectionContainerName, migrationItemName, input, callback) {
      let postBody = input;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationMigrationItemsUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationMigrationItemsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationMigrationItemsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationMigrationItemsUpdate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationMigrationItemsUpdate");
      }
      // verify the required parameter 'protectionContainerName' is set
      if (protectionContainerName === undefined || protectionContainerName === null) {
        throw new Error("Missing the required parameter 'protectionContainerName' when calling replicationMigrationItemsUpdate");
      }
      // verify the required parameter 'migrationItemName' is set
      if (migrationItemName === undefined || migrationItemName === null) {
        throw new Error("Missing the required parameter 'migrationItemName' when calling replicationMigrationItemsUpdate");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling replicationMigrationItemsUpdate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'protectionContainerName': protectionContainerName,
        'migrationItemName': migrationItemName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MigrationItem;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
