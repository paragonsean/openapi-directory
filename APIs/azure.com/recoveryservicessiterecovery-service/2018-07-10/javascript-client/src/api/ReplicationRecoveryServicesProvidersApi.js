/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddRecoveryServicesProviderInput from '../model/AddRecoveryServicesProviderInput';
import RecoveryServicesProvider from '../model/RecoveryServicesProvider';
import RecoveryServicesProviderCollection from '../model/RecoveryServicesProviderCollection';

/**
* ReplicationRecoveryServicesProviders service.
* @module api/ReplicationRecoveryServicesProvidersApi
* @version 2018-07-10
*/
export default class ReplicationRecoveryServicesProvidersApi {

    /**
    * Constructs a new ReplicationRecoveryServicesProvidersApi. 
    * @alias module:api/ReplicationRecoveryServicesProvidersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the replicationRecoveryServicesProvidersCreate operation.
     * @callback module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryServicesProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a recovery services provider.
     * The operation to add a recovery services provider.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} providerName Recovery services provider name.
     * @param {module:model/AddRecoveryServicesProviderInput} addProviderInput Add provider input.
     * @param {module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryServicesProvider}
     */
    replicationRecoveryServicesProvidersCreate(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, providerName, addProviderInput, callback) {
      let postBody = addProviderInput;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryServicesProvidersCreate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryServicesProvidersCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryServicesProvidersCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryServicesProvidersCreate");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationRecoveryServicesProvidersCreate");
      }
      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling replicationRecoveryServicesProvidersCreate");
      }
      // verify the required parameter 'addProviderInput' is set
      if (addProviderInput === undefined || addProviderInput === null) {
        throw new Error("Missing the required parameter 'addProviderInput' when calling replicationRecoveryServicesProvidersCreate");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'providerName': providerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecoveryServicesProvider;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryServicesProvidersDelete operation.
     * @callback module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes provider from fabric. Note: Deleting provider for any fabric other than SingleHost is unsupported. To maintain backward compatibility for released clients the object \"deleteRspInput\" is used (if the object is empty we assume that it is old client and continue the old behavior).
     * The operation to removes/delete(unregister) a recovery services provider from the vault
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} providerName Recovery services provider name.
     * @param {module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationRecoveryServicesProvidersDelete(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, providerName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryServicesProvidersDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryServicesProvidersDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryServicesProvidersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryServicesProvidersDelete");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationRecoveryServicesProvidersDelete");
      }
      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling replicationRecoveryServicesProvidersDelete");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'providerName': providerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryServicesProvidersGet operation.
     * @callback module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryServicesProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of a recovery services provider.
     * Gets the details of registered recovery services provider.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} providerName Recovery services provider name
     * @param {module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryServicesProvider}
     */
    replicationRecoveryServicesProvidersGet(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, providerName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryServicesProvidersGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryServicesProvidersGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryServicesProvidersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryServicesProvidersGet");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationRecoveryServicesProvidersGet");
      }
      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling replicationRecoveryServicesProvidersGet");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'providerName': providerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecoveryServicesProvider;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryServicesProvidersList operation.
     * @callback module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryServicesProviderCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of registered recovery services providers in the vault. This is a view only api.
     * Lists the registered recovery services providers in the vault
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryServicesProviderCollection}
     */
    replicationRecoveryServicesProvidersList(apiVersion, resourceName, resourceGroupName, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryServicesProvidersList");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryServicesProvidersList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryServicesProvidersList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryServicesProvidersList");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecoveryServicesProviderCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryServicesProviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryServicesProvidersListByReplicationFabrics operation.
     * @callback module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersListByReplicationFabricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryServicesProviderCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of registered recovery services providers for the fabric.
     * Lists the registered recovery services providers for the specified fabric.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name
     * @param {module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersListByReplicationFabricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryServicesProviderCollection}
     */
    replicationRecoveryServicesProvidersListByReplicationFabrics(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryServicesProvidersListByReplicationFabrics");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryServicesProvidersListByReplicationFabrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryServicesProvidersListByReplicationFabrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryServicesProvidersListByReplicationFabrics");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationRecoveryServicesProvidersListByReplicationFabrics");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecoveryServicesProviderCollection;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryServicesProvidersPurge operation.
     * @callback module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersPurgeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purges recovery service provider from fabric
     * The operation to purge(force delete) a recovery services provider from the vault.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} providerName Recovery services provider name.
     * @param {module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersPurgeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    replicationRecoveryServicesProvidersPurge(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, providerName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryServicesProvidersPurge");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryServicesProvidersPurge");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryServicesProvidersPurge");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryServicesProvidersPurge");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationRecoveryServicesProvidersPurge");
      }
      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling replicationRecoveryServicesProvidersPurge");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'providerName': providerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replicationRecoveryServicesProvidersRefreshProvider operation.
     * @callback module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersRefreshProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecoveryServicesProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh details from the recovery services provider.
     * The operation to refresh the information from the recovery services provider.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceName The name of the recovery services vault.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} fabricName Fabric name.
     * @param {String} providerName Recovery services provider name.
     * @param {module:api/ReplicationRecoveryServicesProvidersApi~replicationRecoveryServicesProvidersRefreshProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecoveryServicesProvider}
     */
    replicationRecoveryServicesProvidersRefreshProvider(apiVersion, resourceName, resourceGroupName, subscriptionId, fabricName, providerName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling replicationRecoveryServicesProvidersRefreshProvider");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling replicationRecoveryServicesProvidersRefreshProvider");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling replicationRecoveryServicesProvidersRefreshProvider");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling replicationRecoveryServicesProvidersRefreshProvider");
      }
      // verify the required parameter 'fabricName' is set
      if (fabricName === undefined || fabricName === null) {
        throw new Error("Missing the required parameter 'fabricName' when calling replicationRecoveryServicesProvidersRefreshProvider");
      }
      // verify the required parameter 'providerName' is set
      if (providerName === undefined || providerName === null) {
        throw new Error("Missing the required parameter 'providerName' when calling replicationRecoveryServicesProvidersRefreshProvider");
      }

      let pathParams = {
        'resourceName': resourceName,
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'fabricName': fabricName,
        'providerName': providerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecoveryServicesProvider;
      return this.apiClient.callApi(
        '/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/refreshProvider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
