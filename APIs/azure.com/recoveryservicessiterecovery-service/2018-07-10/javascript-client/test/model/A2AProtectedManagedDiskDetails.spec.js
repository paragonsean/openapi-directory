/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SiteRecoveryManagementClient);
  }
}(this, function(expect, SiteRecoveryManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('A2AProtectedManagedDiskDetails', function() {
    it('should create an instance of A2AProtectedManagedDiskDetails', function() {
      // uncomment below and update the code to test A2AProtectedManagedDiskDetails
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be.a(SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails);
    });

    it('should have the property allowedDiskLevelOperation (base name: "allowedDiskLevelOperation")', function() {
      // uncomment below and update the code to test the property allowedDiskLevelOperation
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property dataPendingAtSourceAgentInMB (base name: "dataPendingAtSourceAgentInMB")', function() {
      // uncomment below and update the code to test the property dataPendingAtSourceAgentInMB
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property dataPendingInStagingStorageAccountInMB (base name: "dataPendingInStagingStorageAccountInMB")', function() {
      // uncomment below and update the code to test the property dataPendingInStagingStorageAccountInMB
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property dekKeyVaultArmId (base name: "dekKeyVaultArmId")', function() {
      // uncomment below and update the code to test the property dekKeyVaultArmId
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property diskCapacityInBytes (base name: "diskCapacityInBytes")', function() {
      // uncomment below and update the code to test the property diskCapacityInBytes
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property diskId (base name: "diskId")', function() {
      // uncomment below and update the code to test the property diskId
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property diskName (base name: "diskName")', function() {
      // uncomment below and update the code to test the property diskName
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property diskState (base name: "diskState")', function() {
      // uncomment below and update the code to test the property diskState
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property diskType (base name: "diskType")', function() {
      // uncomment below and update the code to test the property diskType
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property failoverDiskName (base name: "failoverDiskName")', function() {
      // uncomment below and update the code to test the property failoverDiskName
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property isDiskEncrypted (base name: "isDiskEncrypted")', function() {
      // uncomment below and update the code to test the property isDiskEncrypted
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property isDiskKeyEncrypted (base name: "isDiskKeyEncrypted")', function() {
      // uncomment below and update the code to test the property isDiskKeyEncrypted
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property kekKeyVaultArmId (base name: "kekKeyVaultArmId")', function() {
      // uncomment below and update the code to test the property kekKeyVaultArmId
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property keyIdentifier (base name: "keyIdentifier")', function() {
      // uncomment below and update the code to test the property keyIdentifier
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property monitoringJobType (base name: "monitoringJobType")', function() {
      // uncomment below and update the code to test the property monitoringJobType
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property monitoringPercentageCompletion (base name: "monitoringPercentageCompletion")', function() {
      // uncomment below and update the code to test the property monitoringPercentageCompletion
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property primaryStagingAzureStorageAccountId (base name: "primaryStagingAzureStorageAccountId")', function() {
      // uncomment below and update the code to test the property primaryStagingAzureStorageAccountId
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property recoveryDiskEncryptionSetId (base name: "recoveryDiskEncryptionSetId")', function() {
      // uncomment below and update the code to test the property recoveryDiskEncryptionSetId
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property recoveryReplicaDiskAccountType (base name: "recoveryReplicaDiskAccountType")', function() {
      // uncomment below and update the code to test the property recoveryReplicaDiskAccountType
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property recoveryReplicaDiskId (base name: "recoveryReplicaDiskId")', function() {
      // uncomment below and update the code to test the property recoveryReplicaDiskId
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property recoveryResourceGroupId (base name: "recoveryResourceGroupId")', function() {
      // uncomment below and update the code to test the property recoveryResourceGroupId
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property recoveryTargetDiskAccountType (base name: "recoveryTargetDiskAccountType")', function() {
      // uncomment below and update the code to test the property recoveryTargetDiskAccountType
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property recoveryTargetDiskId (base name: "recoveryTargetDiskId")', function() {
      // uncomment below and update the code to test the property recoveryTargetDiskId
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property resyncRequired (base name: "resyncRequired")', function() {
      // uncomment below and update the code to test the property resyncRequired
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property secretIdentifier (base name: "secretIdentifier")', function() {
      // uncomment below and update the code to test the property secretIdentifier
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

    it('should have the property tfoDiskName (base name: "tfoDiskName")', function() {
      // uncomment below and update the code to test the property tfoDiskName
      //var instance = new SiteRecoveryManagementClient.A2AProtectedManagedDiskDetails();
      //expect(instance).to.be();
    });

  });

}));
