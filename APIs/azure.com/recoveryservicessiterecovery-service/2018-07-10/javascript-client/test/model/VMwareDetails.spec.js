/**
 * SiteRecoveryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-07-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SiteRecoveryManagementClient);
  }
}(this, function(expect, SiteRecoveryManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SiteRecoveryManagementClient.VMwareDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VMwareDetails', function() {
    it('should create an instance of VMwareDetails', function() {
      // uncomment below and update the code to test VMwareDetails
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be.a(SiteRecoveryManagementClient.VMwareDetails);
    });

    it('should have the property agentCount (base name: "agentCount")', function() {
      // uncomment below and update the code to test the property agentCount
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property agentExpiryDate (base name: "agentExpiryDate")', function() {
      // uncomment below and update the code to test the property agentExpiryDate
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property agentVersion (base name: "agentVersion")', function() {
      // uncomment below and update the code to test the property agentVersion
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property agentVersionDetails (base name: "agentVersionDetails")', function() {
      // uncomment below and update the code to test the property agentVersionDetails
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property availableMemoryInBytes (base name: "availableMemoryInBytes")', function() {
      // uncomment below and update the code to test the property availableMemoryInBytes
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property availableSpaceInBytes (base name: "availableSpaceInBytes")', function() {
      // uncomment below and update the code to test the property availableSpaceInBytes
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property cpuLoad (base name: "cpuLoad")', function() {
      // uncomment below and update the code to test the property cpuLoad
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property cpuLoadStatus (base name: "cpuLoadStatus")', function() {
      // uncomment below and update the code to test the property cpuLoadStatus
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property csServiceStatus (base name: "csServiceStatus")', function() {
      // uncomment below and update the code to test the property csServiceStatus
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property databaseServerLoad (base name: "databaseServerLoad")', function() {
      // uncomment below and update the code to test the property databaseServerLoad
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property databaseServerLoadStatus (base name: "databaseServerLoadStatus")', function() {
      // uncomment below and update the code to test the property databaseServerLoadStatus
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property hostName (base name: "hostName")', function() {
      // uncomment below and update the code to test the property hostName
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property ipAddress (base name: "ipAddress")', function() {
      // uncomment below and update the code to test the property ipAddress
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property lastHeartbeat (base name: "lastHeartbeat")', function() {
      // uncomment below and update the code to test the property lastHeartbeat
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property masterTargetServers (base name: "masterTargetServers")', function() {
      // uncomment below and update the code to test the property masterTargetServers
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property memoryUsageStatus (base name: "memoryUsageStatus")', function() {
      // uncomment below and update the code to test the property memoryUsageStatus
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property processServerCount (base name: "processServerCount")', function() {
      // uncomment below and update the code to test the property processServerCount
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property processServers (base name: "processServers")', function() {
      // uncomment below and update the code to test the property processServers
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property protectedServers (base name: "protectedServers")', function() {
      // uncomment below and update the code to test the property protectedServers
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property psTemplateVersion (base name: "psTemplateVersion")', function() {
      // uncomment below and update the code to test the property psTemplateVersion
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property replicationPairCount (base name: "replicationPairCount")', function() {
      // uncomment below and update the code to test the property replicationPairCount
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property runAsAccounts (base name: "runAsAccounts")', function() {
      // uncomment below and update the code to test the property runAsAccounts
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property spaceUsageStatus (base name: "spaceUsageStatus")', function() {
      // uncomment below and update the code to test the property spaceUsageStatus
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property sslCertExpiryDate (base name: "sslCertExpiryDate")', function() {
      // uncomment below and update the code to test the property sslCertExpiryDate
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property sslCertExpiryRemainingDays (base name: "sslCertExpiryRemainingDays")', function() {
      // uncomment below and update the code to test the property sslCertExpiryRemainingDays
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property systemLoad (base name: "systemLoad")', function() {
      // uncomment below and update the code to test the property systemLoad
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property systemLoadStatus (base name: "systemLoadStatus")', function() {
      // uncomment below and update the code to test the property systemLoadStatus
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property totalMemoryInBytes (base name: "totalMemoryInBytes")', function() {
      // uncomment below and update the code to test the property totalMemoryInBytes
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property totalSpaceInBytes (base name: "totalSpaceInBytes")', function() {
      // uncomment below and update the code to test the property totalSpaceInBytes
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property versionStatus (base name: "versionStatus")', function() {
      // uncomment below and update the code to test the property versionStatus
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property webLoad (base name: "webLoad")', function() {
      // uncomment below and update the code to test the property webLoad
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

    it('should have the property webLoadStatus (base name: "webLoadStatus")', function() {
      // uncomment below and update the code to test the property webLoadStatus
      //var instance = new SiteRecoveryManagementClient.VMwareDetails();
      //expect(instance).to.be();
    });

  });

}));
