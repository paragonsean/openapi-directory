# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.enable_migration_provider_specific_input import EnableMigrationProviderSpecificInput
from openapi_server.models.v_mware_cbt_disk_input import VMwareCbtDiskInput
from openapi_server import util


class VMwareCbtEnableMigrationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_mover_run_as_account_id: str=None, disks_to_include: List[VMwareCbtDiskInput]=None, license_type: str=None, snapshot_run_as_account_id: str=None, target_availability_set_id: str=None, target_boot_diagnostics_storage_account_id: str=None, target_network_id: str=None, target_resource_group_id: str=None, target_subnet_name: str=None, target_vm_name: str=None, target_vm_size: str=None, vmware_machine_id: str=None, instance_type: str=None):
        """VMwareCbtEnableMigrationInput - a model defined in OpenAPI

        :param data_mover_run_as_account_id: The data_mover_run_as_account_id of this VMwareCbtEnableMigrationInput.
        :param disks_to_include: The disks_to_include of this VMwareCbtEnableMigrationInput.
        :param license_type: The license_type of this VMwareCbtEnableMigrationInput.
        :param snapshot_run_as_account_id: The snapshot_run_as_account_id of this VMwareCbtEnableMigrationInput.
        :param target_availability_set_id: The target_availability_set_id of this VMwareCbtEnableMigrationInput.
        :param target_boot_diagnostics_storage_account_id: The target_boot_diagnostics_storage_account_id of this VMwareCbtEnableMigrationInput.
        :param target_network_id: The target_network_id of this VMwareCbtEnableMigrationInput.
        :param target_resource_group_id: The target_resource_group_id of this VMwareCbtEnableMigrationInput.
        :param target_subnet_name: The target_subnet_name of this VMwareCbtEnableMigrationInput.
        :param target_vm_name: The target_vm_name of this VMwareCbtEnableMigrationInput.
        :param target_vm_size: The target_vm_size of this VMwareCbtEnableMigrationInput.
        :param vmware_machine_id: The vmware_machine_id of this VMwareCbtEnableMigrationInput.
        :param instance_type: The instance_type of this VMwareCbtEnableMigrationInput.
        """
        self.openapi_types = {
            'data_mover_run_as_account_id': str,
            'disks_to_include': List[VMwareCbtDiskInput],
            'license_type': str,
            'snapshot_run_as_account_id': str,
            'target_availability_set_id': str,
            'target_boot_diagnostics_storage_account_id': str,
            'target_network_id': str,
            'target_resource_group_id': str,
            'target_subnet_name': str,
            'target_vm_name': str,
            'target_vm_size': str,
            'vmware_machine_id': str,
            'instance_type': str
        }

        self.attribute_map = {
            'data_mover_run_as_account_id': 'dataMoverRunAsAccountId',
            'disks_to_include': 'disksToInclude',
            'license_type': 'licenseType',
            'snapshot_run_as_account_id': 'snapshotRunAsAccountId',
            'target_availability_set_id': 'targetAvailabilitySetId',
            'target_boot_diagnostics_storage_account_id': 'targetBootDiagnosticsStorageAccountId',
            'target_network_id': 'targetNetworkId',
            'target_resource_group_id': 'targetResourceGroupId',
            'target_subnet_name': 'targetSubnetName',
            'target_vm_name': 'targetVmName',
            'target_vm_size': 'targetVmSize',
            'vmware_machine_id': 'vmwareMachineId',
            'instance_type': 'instanceType'
        }

        self._data_mover_run_as_account_id = data_mover_run_as_account_id
        self._disks_to_include = disks_to_include
        self._license_type = license_type
        self._snapshot_run_as_account_id = snapshot_run_as_account_id
        self._target_availability_set_id = target_availability_set_id
        self._target_boot_diagnostics_storage_account_id = target_boot_diagnostics_storage_account_id
        self._target_network_id = target_network_id
        self._target_resource_group_id = target_resource_group_id
        self._target_subnet_name = target_subnet_name
        self._target_vm_name = target_vm_name
        self._target_vm_size = target_vm_size
        self._vmware_machine_id = vmware_machine_id
        self._instance_type = instance_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VMwareCbtEnableMigrationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VMwareCbtEnableMigrationInput of this VMwareCbtEnableMigrationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_mover_run_as_account_id(self):
        """Gets the data_mover_run_as_account_id of this VMwareCbtEnableMigrationInput.

        The data mover RunAs account Id.

        :return: The data_mover_run_as_account_id of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._data_mover_run_as_account_id

    @data_mover_run_as_account_id.setter
    def data_mover_run_as_account_id(self, data_mover_run_as_account_id):
        """Sets the data_mover_run_as_account_id of this VMwareCbtEnableMigrationInput.

        The data mover RunAs account Id.

        :param data_mover_run_as_account_id: The data_mover_run_as_account_id of this VMwareCbtEnableMigrationInput.
        :type data_mover_run_as_account_id: str
        """
        if data_mover_run_as_account_id is None:
            raise ValueError("Invalid value for `data_mover_run_as_account_id`, must not be `None`")

        self._data_mover_run_as_account_id = data_mover_run_as_account_id

    @property
    def disks_to_include(self):
        """Gets the disks_to_include of this VMwareCbtEnableMigrationInput.

        The disks to include list.

        :return: The disks_to_include of this VMwareCbtEnableMigrationInput.
        :rtype: List[VMwareCbtDiskInput]
        """
        return self._disks_to_include

    @disks_to_include.setter
    def disks_to_include(self, disks_to_include):
        """Sets the disks_to_include of this VMwareCbtEnableMigrationInput.

        The disks to include list.

        :param disks_to_include: The disks_to_include of this VMwareCbtEnableMigrationInput.
        :type disks_to_include: List[VMwareCbtDiskInput]
        """
        if disks_to_include is None:
            raise ValueError("Invalid value for `disks_to_include`, must not be `None`")

        self._disks_to_include = disks_to_include

    @property
    def license_type(self):
        """Gets the license_type of this VMwareCbtEnableMigrationInput.

        License type.

        :return: The license_type of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this VMwareCbtEnableMigrationInput.

        License type.

        :param license_type: The license_type of this VMwareCbtEnableMigrationInput.
        :type license_type: str
        """
        allowed_values = ["NotSpecified", "NoLicenseType", "WindowsServer"]  # noqa: E501
        if license_type not in allowed_values:
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"
                .format(license_type, allowed_values)
            )

        self._license_type = license_type

    @property
    def snapshot_run_as_account_id(self):
        """Gets the snapshot_run_as_account_id of this VMwareCbtEnableMigrationInput.

        The snapshot RunAs account Id.

        :return: The snapshot_run_as_account_id of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._snapshot_run_as_account_id

    @snapshot_run_as_account_id.setter
    def snapshot_run_as_account_id(self, snapshot_run_as_account_id):
        """Sets the snapshot_run_as_account_id of this VMwareCbtEnableMigrationInput.

        The snapshot RunAs account Id.

        :param snapshot_run_as_account_id: The snapshot_run_as_account_id of this VMwareCbtEnableMigrationInput.
        :type snapshot_run_as_account_id: str
        """
        if snapshot_run_as_account_id is None:
            raise ValueError("Invalid value for `snapshot_run_as_account_id`, must not be `None`")

        self._snapshot_run_as_account_id = snapshot_run_as_account_id

    @property
    def target_availability_set_id(self):
        """Gets the target_availability_set_id of this VMwareCbtEnableMigrationInput.

        The target availability set ARM Id.

        :return: The target_availability_set_id of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._target_availability_set_id

    @target_availability_set_id.setter
    def target_availability_set_id(self, target_availability_set_id):
        """Sets the target_availability_set_id of this VMwareCbtEnableMigrationInput.

        The target availability set ARM Id.

        :param target_availability_set_id: The target_availability_set_id of this VMwareCbtEnableMigrationInput.
        :type target_availability_set_id: str
        """

        self._target_availability_set_id = target_availability_set_id

    @property
    def target_boot_diagnostics_storage_account_id(self):
        """Gets the target_boot_diagnostics_storage_account_id of this VMwareCbtEnableMigrationInput.

        The target boot diagnostics storage account ARM Id.

        :return: The target_boot_diagnostics_storage_account_id of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._target_boot_diagnostics_storage_account_id

    @target_boot_diagnostics_storage_account_id.setter
    def target_boot_diagnostics_storage_account_id(self, target_boot_diagnostics_storage_account_id):
        """Sets the target_boot_diagnostics_storage_account_id of this VMwareCbtEnableMigrationInput.

        The target boot diagnostics storage account ARM Id.

        :param target_boot_diagnostics_storage_account_id: The target_boot_diagnostics_storage_account_id of this VMwareCbtEnableMigrationInput.
        :type target_boot_diagnostics_storage_account_id: str
        """

        self._target_boot_diagnostics_storage_account_id = target_boot_diagnostics_storage_account_id

    @property
    def target_network_id(self):
        """Gets the target_network_id of this VMwareCbtEnableMigrationInput.

        The target network ARM Id.

        :return: The target_network_id of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._target_network_id

    @target_network_id.setter
    def target_network_id(self, target_network_id):
        """Sets the target_network_id of this VMwareCbtEnableMigrationInput.

        The target network ARM Id.

        :param target_network_id: The target_network_id of this VMwareCbtEnableMigrationInput.
        :type target_network_id: str
        """
        if target_network_id is None:
            raise ValueError("Invalid value for `target_network_id`, must not be `None`")

        self._target_network_id = target_network_id

    @property
    def target_resource_group_id(self):
        """Gets the target_resource_group_id of this VMwareCbtEnableMigrationInput.

        The target resource group ARM Id.

        :return: The target_resource_group_id of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._target_resource_group_id

    @target_resource_group_id.setter
    def target_resource_group_id(self, target_resource_group_id):
        """Sets the target_resource_group_id of this VMwareCbtEnableMigrationInput.

        The target resource group ARM Id.

        :param target_resource_group_id: The target_resource_group_id of this VMwareCbtEnableMigrationInput.
        :type target_resource_group_id: str
        """
        if target_resource_group_id is None:
            raise ValueError("Invalid value for `target_resource_group_id`, must not be `None`")

        self._target_resource_group_id = target_resource_group_id

    @property
    def target_subnet_name(self):
        """Gets the target_subnet_name of this VMwareCbtEnableMigrationInput.

        The target subnet name.

        :return: The target_subnet_name of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._target_subnet_name

    @target_subnet_name.setter
    def target_subnet_name(self, target_subnet_name):
        """Sets the target_subnet_name of this VMwareCbtEnableMigrationInput.

        The target subnet name.

        :param target_subnet_name: The target_subnet_name of this VMwareCbtEnableMigrationInput.
        :type target_subnet_name: str
        """

        self._target_subnet_name = target_subnet_name

    @property
    def target_vm_name(self):
        """Gets the target_vm_name of this VMwareCbtEnableMigrationInput.

        The target VM name.

        :return: The target_vm_name of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._target_vm_name

    @target_vm_name.setter
    def target_vm_name(self, target_vm_name):
        """Sets the target_vm_name of this VMwareCbtEnableMigrationInput.

        The target VM name.

        :param target_vm_name: The target_vm_name of this VMwareCbtEnableMigrationInput.
        :type target_vm_name: str
        """

        self._target_vm_name = target_vm_name

    @property
    def target_vm_size(self):
        """Gets the target_vm_size of this VMwareCbtEnableMigrationInput.

        The target VM size.

        :return: The target_vm_size of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._target_vm_size

    @target_vm_size.setter
    def target_vm_size(self, target_vm_size):
        """Sets the target_vm_size of this VMwareCbtEnableMigrationInput.

        The target VM size.

        :param target_vm_size: The target_vm_size of this VMwareCbtEnableMigrationInput.
        :type target_vm_size: str
        """

        self._target_vm_size = target_vm_size

    @property
    def vmware_machine_id(self):
        """Gets the vmware_machine_id of this VMwareCbtEnableMigrationInput.

        The ARM Id of the VM discovered in VMware.

        :return: The vmware_machine_id of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._vmware_machine_id

    @vmware_machine_id.setter
    def vmware_machine_id(self, vmware_machine_id):
        """Sets the vmware_machine_id of this VMwareCbtEnableMigrationInput.

        The ARM Id of the VM discovered in VMware.

        :param vmware_machine_id: The vmware_machine_id of this VMwareCbtEnableMigrationInput.
        :type vmware_machine_id: str
        """
        if vmware_machine_id is None:
            raise ValueError("Invalid value for `vmware_machine_id`, must not be `None`")

        self._vmware_machine_id = vmware_machine_id

    @property
    def instance_type(self):
        """Gets the instance_type of this VMwareCbtEnableMigrationInput.

        The class type.

        :return: The instance_type of this VMwareCbtEnableMigrationInput.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this VMwareCbtEnableMigrationInput.

        The class type.

        :param instance_type: The instance_type of this VMwareCbtEnableMigrationInput.
        :type instance_type: str
        """
        if instance_type is None:
            raise ValueError("Invalid value for `instance_type`, must not be `None`")

        self._instance_type = instance_type
