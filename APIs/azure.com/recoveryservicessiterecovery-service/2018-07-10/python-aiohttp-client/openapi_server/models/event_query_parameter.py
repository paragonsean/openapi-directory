# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventQueryParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affected_object_friendly_name: str=None, end_time: datetime=None, event_code: str=None, event_type: str=None, fabric_name: str=None, severity: str=None, start_time: datetime=None):
        """EventQueryParameter - a model defined in OpenAPI

        :param affected_object_friendly_name: The affected_object_friendly_name of this EventQueryParameter.
        :param end_time: The end_time of this EventQueryParameter.
        :param event_code: The event_code of this EventQueryParameter.
        :param event_type: The event_type of this EventQueryParameter.
        :param fabric_name: The fabric_name of this EventQueryParameter.
        :param severity: The severity of this EventQueryParameter.
        :param start_time: The start_time of this EventQueryParameter.
        """
        self.openapi_types = {
            'affected_object_friendly_name': str,
            'end_time': datetime,
            'event_code': str,
            'event_type': str,
            'fabric_name': str,
            'severity': str,
            'start_time': datetime
        }

        self.attribute_map = {
            'affected_object_friendly_name': 'affectedObjectFriendlyName',
            'end_time': 'endTime',
            'event_code': 'eventCode',
            'event_type': 'eventType',
            'fabric_name': 'fabricName',
            'severity': 'severity',
            'start_time': 'startTime'
        }

        self._affected_object_friendly_name = affected_object_friendly_name
        self._end_time = end_time
        self._event_code = event_code
        self._event_type = event_type
        self._fabric_name = fabric_name
        self._severity = severity
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventQueryParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventQueryParameter of this EventQueryParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affected_object_friendly_name(self):
        """Gets the affected_object_friendly_name of this EventQueryParameter.

        The affected object name of the events to be queried.

        :return: The affected_object_friendly_name of this EventQueryParameter.
        :rtype: str
        """
        return self._affected_object_friendly_name

    @affected_object_friendly_name.setter
    def affected_object_friendly_name(self, affected_object_friendly_name):
        """Sets the affected_object_friendly_name of this EventQueryParameter.

        The affected object name of the events to be queried.

        :param affected_object_friendly_name: The affected_object_friendly_name of this EventQueryParameter.
        :type affected_object_friendly_name: str
        """

        self._affected_object_friendly_name = affected_object_friendly_name

    @property
    def end_time(self):
        """Gets the end_time of this EventQueryParameter.

        The end time of the time range within which the events are to be queried.

        :return: The end_time of this EventQueryParameter.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this EventQueryParameter.

        The end time of the time range within which the events are to be queried.

        :param end_time: The end_time of this EventQueryParameter.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def event_code(self):
        """Gets the event_code of this EventQueryParameter.

        The source id of the events to be queried.

        :return: The event_code of this EventQueryParameter.
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this EventQueryParameter.

        The source id of the events to be queried.

        :param event_code: The event_code of this EventQueryParameter.
        :type event_code: str
        """

        self._event_code = event_code

    @property
    def event_type(self):
        """Gets the event_type of this EventQueryParameter.

        The type of the events to be queried.

        :return: The event_type of this EventQueryParameter.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventQueryParameter.

        The type of the events to be queried.

        :param event_type: The event_type of this EventQueryParameter.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def fabric_name(self):
        """Gets the fabric_name of this EventQueryParameter.

        The affected object server id of the events to be queried.

        :return: The fabric_name of this EventQueryParameter.
        :rtype: str
        """
        return self._fabric_name

    @fabric_name.setter
    def fabric_name(self, fabric_name):
        """Sets the fabric_name of this EventQueryParameter.

        The affected object server id of the events to be queried.

        :param fabric_name: The fabric_name of this EventQueryParameter.
        :type fabric_name: str
        """

        self._fabric_name = fabric_name

    @property
    def severity(self):
        """Gets the severity of this EventQueryParameter.

        The severity of the events to be queried.

        :return: The severity of this EventQueryParameter.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this EventQueryParameter.

        The severity of the events to be queried.

        :param severity: The severity of this EventQueryParameter.
        :type severity: str
        """

        self._severity = severity

    @property
    def start_time(self):
        """Gets the start_time of this EventQueryParameter.

        The start time of the time range within which the events are to be queried.

        :return: The start_time of this EventQueryParameter.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this EventQueryParameter.

        The start time of the time range within which the events are to be queried.

        :param start_time: The start_time of this EventQueryParameter.
        :type start_time: datetime
        """

        self._start_time = start_time
