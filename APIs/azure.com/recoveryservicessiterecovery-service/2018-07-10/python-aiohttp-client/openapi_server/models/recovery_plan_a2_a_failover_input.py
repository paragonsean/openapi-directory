# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recovery_plan_provider_specific_failover_input import RecoveryPlanProviderSpecificFailoverInput
from openapi_server import util


class RecoveryPlanA2AFailoverInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_service_creation_option: str=None, multi_vm_sync_point_option: str=None, recovery_point_type: str=None, instance_type: str=None):
        """RecoveryPlanA2AFailoverInput - a model defined in OpenAPI

        :param cloud_service_creation_option: The cloud_service_creation_option of this RecoveryPlanA2AFailoverInput.
        :param multi_vm_sync_point_option: The multi_vm_sync_point_option of this RecoveryPlanA2AFailoverInput.
        :param recovery_point_type: The recovery_point_type of this RecoveryPlanA2AFailoverInput.
        :param instance_type: The instance_type of this RecoveryPlanA2AFailoverInput.
        """
        self.openapi_types = {
            'cloud_service_creation_option': str,
            'multi_vm_sync_point_option': str,
            'recovery_point_type': str,
            'instance_type': str
        }

        self.attribute_map = {
            'cloud_service_creation_option': 'cloudServiceCreationOption',
            'multi_vm_sync_point_option': 'multiVmSyncPointOption',
            'recovery_point_type': 'recoveryPointType',
            'instance_type': 'instanceType'
        }

        self._cloud_service_creation_option = cloud_service_creation_option
        self._multi_vm_sync_point_option = multi_vm_sync_point_option
        self._recovery_point_type = recovery_point_type
        self._instance_type = instance_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecoveryPlanA2AFailoverInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecoveryPlanA2AFailoverInput of this RecoveryPlanA2AFailoverInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_service_creation_option(self):
        """Gets the cloud_service_creation_option of this RecoveryPlanA2AFailoverInput.

        A value indicating whether to use recovery cloud service for TFO or not.

        :return: The cloud_service_creation_option of this RecoveryPlanA2AFailoverInput.
        :rtype: str
        """
        return self._cloud_service_creation_option

    @cloud_service_creation_option.setter
    def cloud_service_creation_option(self, cloud_service_creation_option):
        """Sets the cloud_service_creation_option of this RecoveryPlanA2AFailoverInput.

        A value indicating whether to use recovery cloud service for TFO or not.

        :param cloud_service_creation_option: The cloud_service_creation_option of this RecoveryPlanA2AFailoverInput.
        :type cloud_service_creation_option: str
        """

        self._cloud_service_creation_option = cloud_service_creation_option

    @property
    def multi_vm_sync_point_option(self):
        """Gets the multi_vm_sync_point_option of this RecoveryPlanA2AFailoverInput.

        A value indicating whether multi VM sync enabled VMs should use multi VM sync points for failover.

        :return: The multi_vm_sync_point_option of this RecoveryPlanA2AFailoverInput.
        :rtype: str
        """
        return self._multi_vm_sync_point_option

    @multi_vm_sync_point_option.setter
    def multi_vm_sync_point_option(self, multi_vm_sync_point_option):
        """Sets the multi_vm_sync_point_option of this RecoveryPlanA2AFailoverInput.

        A value indicating whether multi VM sync enabled VMs should use multi VM sync points for failover.

        :param multi_vm_sync_point_option: The multi_vm_sync_point_option of this RecoveryPlanA2AFailoverInput.
        :type multi_vm_sync_point_option: str
        """
        allowed_values = ["UseMultiVmSyncRecoveryPoint", "UsePerVmRecoveryPoint"]  # noqa: E501
        if multi_vm_sync_point_option not in allowed_values:
            raise ValueError(
                "Invalid value for `multi_vm_sync_point_option` ({0}), must be one of {1}"
                .format(multi_vm_sync_point_option, allowed_values)
            )

        self._multi_vm_sync_point_option = multi_vm_sync_point_option

    @property
    def recovery_point_type(self):
        """Gets the recovery_point_type of this RecoveryPlanA2AFailoverInput.

        The recovery point type.

        :return: The recovery_point_type of this RecoveryPlanA2AFailoverInput.
        :rtype: str
        """
        return self._recovery_point_type

    @recovery_point_type.setter
    def recovery_point_type(self, recovery_point_type):
        """Sets the recovery_point_type of this RecoveryPlanA2AFailoverInput.

        The recovery point type.

        :param recovery_point_type: The recovery_point_type of this RecoveryPlanA2AFailoverInput.
        :type recovery_point_type: str
        """
        allowed_values = ["Latest", "LatestApplicationConsistent", "LatestCrashConsistent", "LatestProcessed"]  # noqa: E501
        if recovery_point_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recovery_point_type` ({0}), must be one of {1}"
                .format(recovery_point_type, allowed_values)
            )

        self._recovery_point_type = recovery_point_type

    @property
    def instance_type(self):
        """Gets the instance_type of this RecoveryPlanA2AFailoverInput.

        The class type.

        :return: The instance_type of this RecoveryPlanA2AFailoverInput.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this RecoveryPlanA2AFailoverInput.

        The class type.

        :param instance_type: The instance_type of this RecoveryPlanA2AFailoverInput.
        :type instance_type: str
        """

        self._instance_type = instance_type
