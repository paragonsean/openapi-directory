# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MobilityServiceUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, os_type: str=None, reboot_status: str=None, version: str=None):
        """MobilityServiceUpdate - a model defined in OpenAPI

        :param os_type: The os_type of this MobilityServiceUpdate.
        :param reboot_status: The reboot_status of this MobilityServiceUpdate.
        :param version: The version of this MobilityServiceUpdate.
        """
        self.openapi_types = {
            'os_type': str,
            'reboot_status': str,
            'version': str
        }

        self.attribute_map = {
            'os_type': 'osType',
            'reboot_status': 'rebootStatus',
            'version': 'version'
        }

        self._os_type = os_type
        self._reboot_status = reboot_status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MobilityServiceUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MobilityServiceUpdate of this MobilityServiceUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def os_type(self):
        """Gets the os_type of this MobilityServiceUpdate.

        The OS type.

        :return: The os_type of this MobilityServiceUpdate.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this MobilityServiceUpdate.

        The OS type.

        :param os_type: The os_type of this MobilityServiceUpdate.
        :type os_type: str
        """

        self._os_type = os_type

    @property
    def reboot_status(self):
        """Gets the reboot_status of this MobilityServiceUpdate.

        The reboot status of the update - whether it is required or not.

        :return: The reboot_status of this MobilityServiceUpdate.
        :rtype: str
        """
        return self._reboot_status

    @reboot_status.setter
    def reboot_status(self, reboot_status):
        """Sets the reboot_status of this MobilityServiceUpdate.

        The reboot status of the update - whether it is required or not.

        :param reboot_status: The reboot_status of this MobilityServiceUpdate.
        :type reboot_status: str
        """

        self._reboot_status = reboot_status

    @property
    def version(self):
        """Gets the version of this MobilityServiceUpdate.

        The version of the latest update.

        :return: The version of this MobilityServiceUpdate.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MobilityServiceUpdate.

        The version of the latest update.

        :param version: The version of this MobilityServiceUpdate.
        :type version: str
        """

        self._version = version
