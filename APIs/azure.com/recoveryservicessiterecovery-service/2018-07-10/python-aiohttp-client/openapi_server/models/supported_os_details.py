# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.os_version_wrapper import OSVersionWrapper
from openapi_server import util


class SupportedOSDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, os_name: str=None, os_type: str=None, os_versions: List[OSVersionWrapper]=None):
        """SupportedOSDetails - a model defined in OpenAPI

        :param os_name: The os_name of this SupportedOSDetails.
        :param os_type: The os_type of this SupportedOSDetails.
        :param os_versions: The os_versions of this SupportedOSDetails.
        """
        self.openapi_types = {
            'os_name': str,
            'os_type': str,
            'os_versions': List[OSVersionWrapper]
        }

        self.attribute_map = {
            'os_name': 'osName',
            'os_type': 'osType',
            'os_versions': 'osVersions'
        }

        self._os_name = os_name
        self._os_type = os_type
        self._os_versions = os_versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupportedOSDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupportedOSDetails of this SupportedOSDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def os_name(self):
        """Gets the os_name of this SupportedOSDetails.

        The name.

        :return: The os_name of this SupportedOSDetails.
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this SupportedOSDetails.

        The name.

        :param os_name: The os_name of this SupportedOSDetails.
        :type os_name: str
        """

        self._os_name = os_name

    @property
    def os_type(self):
        """Gets the os_type of this SupportedOSDetails.

        The type.

        :return: The os_type of this SupportedOSDetails.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this SupportedOSDetails.

        The type.

        :param os_type: The os_type of this SupportedOSDetails.
        :type os_type: str
        """

        self._os_type = os_type

    @property
    def os_versions(self):
        """Gets the os_versions of this SupportedOSDetails.

        List of version for OS.

        :return: The os_versions of this SupportedOSDetails.
        :rtype: List[OSVersionWrapper]
        """
        return self._os_versions

    @os_versions.setter
    def os_versions(self, os_versions):
        """Sets the os_versions of this SupportedOSDetails.

        List of version for OS.

        :param os_versions: The os_versions of this SupportedOSDetails.
        :type os_versions: List[OSVersionWrapper]
        """

        self._os_versions = os_versions
