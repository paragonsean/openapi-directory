# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recovery_plan_group import RecoveryPlanGroup
from openapi_server import util


class CreateRecoveryPlanInputProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failover_deployment_model: str=None, groups: List[RecoveryPlanGroup]=None, primary_fabric_id: str=None, recovery_fabric_id: str=None):
        """CreateRecoveryPlanInputProperties - a model defined in OpenAPI

        :param failover_deployment_model: The failover_deployment_model of this CreateRecoveryPlanInputProperties.
        :param groups: The groups of this CreateRecoveryPlanInputProperties.
        :param primary_fabric_id: The primary_fabric_id of this CreateRecoveryPlanInputProperties.
        :param recovery_fabric_id: The recovery_fabric_id of this CreateRecoveryPlanInputProperties.
        """
        self.openapi_types = {
            'failover_deployment_model': str,
            'groups': List[RecoveryPlanGroup],
            'primary_fabric_id': str,
            'recovery_fabric_id': str
        }

        self.attribute_map = {
            'failover_deployment_model': 'failoverDeploymentModel',
            'groups': 'groups',
            'primary_fabric_id': 'primaryFabricId',
            'recovery_fabric_id': 'recoveryFabricId'
        }

        self._failover_deployment_model = failover_deployment_model
        self._groups = groups
        self._primary_fabric_id = primary_fabric_id
        self._recovery_fabric_id = recovery_fabric_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRecoveryPlanInputProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRecoveryPlanInputProperties of this CreateRecoveryPlanInputProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failover_deployment_model(self):
        """Gets the failover_deployment_model of this CreateRecoveryPlanInputProperties.

        The failover deployment model.

        :return: The failover_deployment_model of this CreateRecoveryPlanInputProperties.
        :rtype: str
        """
        return self._failover_deployment_model

    @failover_deployment_model.setter
    def failover_deployment_model(self, failover_deployment_model):
        """Sets the failover_deployment_model of this CreateRecoveryPlanInputProperties.

        The failover deployment model.

        :param failover_deployment_model: The failover_deployment_model of this CreateRecoveryPlanInputProperties.
        :type failover_deployment_model: str
        """
        allowed_values = ["NotApplicable", "Classic", "ResourceManager"]  # noqa: E501
        if failover_deployment_model not in allowed_values:
            raise ValueError(
                "Invalid value for `failover_deployment_model` ({0}), must be one of {1}"
                .format(failover_deployment_model, allowed_values)
            )

        self._failover_deployment_model = failover_deployment_model

    @property
    def groups(self):
        """Gets the groups of this CreateRecoveryPlanInputProperties.

        The recovery plan groups.

        :return: The groups of this CreateRecoveryPlanInputProperties.
        :rtype: List[RecoveryPlanGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this CreateRecoveryPlanInputProperties.

        The recovery plan groups.

        :param groups: The groups of this CreateRecoveryPlanInputProperties.
        :type groups: List[RecoveryPlanGroup]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups

    @property
    def primary_fabric_id(self):
        """Gets the primary_fabric_id of this CreateRecoveryPlanInputProperties.

        The primary fabric Id.

        :return: The primary_fabric_id of this CreateRecoveryPlanInputProperties.
        :rtype: str
        """
        return self._primary_fabric_id

    @primary_fabric_id.setter
    def primary_fabric_id(self, primary_fabric_id):
        """Sets the primary_fabric_id of this CreateRecoveryPlanInputProperties.

        The primary fabric Id.

        :param primary_fabric_id: The primary_fabric_id of this CreateRecoveryPlanInputProperties.
        :type primary_fabric_id: str
        """
        if primary_fabric_id is None:
            raise ValueError("Invalid value for `primary_fabric_id`, must not be `None`")

        self._primary_fabric_id = primary_fabric_id

    @property
    def recovery_fabric_id(self):
        """Gets the recovery_fabric_id of this CreateRecoveryPlanInputProperties.

        The recovery fabric Id.

        :return: The recovery_fabric_id of this CreateRecoveryPlanInputProperties.
        :rtype: str
        """
        return self._recovery_fabric_id

    @recovery_fabric_id.setter
    def recovery_fabric_id(self, recovery_fabric_id):
        """Sets the recovery_fabric_id of this CreateRecoveryPlanInputProperties.

        The recovery fabric Id.

        :param recovery_fabric_id: The recovery_fabric_id of this CreateRecoveryPlanInputProperties.
        :type recovery_fabric_id: str
        """
        if recovery_fabric_id is None:
            raise ValueError("Invalid value for `recovery_fabric_id`, must not be `None`")

        self._recovery_fabric_id = recovery_fabric_id
