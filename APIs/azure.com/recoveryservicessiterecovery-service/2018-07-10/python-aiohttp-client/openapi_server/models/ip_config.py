# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IPConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, l_b_backend_address_pool_ids: List[str]=None, public_ip_address_id: str=None, static_ip_address: str=None):
        """IPConfig - a model defined in OpenAPI

        :param l_b_backend_address_pool_ids: The l_b_backend_address_pool_ids of this IPConfig.
        :param public_ip_address_id: The public_ip_address_id of this IPConfig.
        :param static_ip_address: The static_ip_address of this IPConfig.
        """
        self.openapi_types = {
            'l_b_backend_address_pool_ids': List[str],
            'public_ip_address_id': str,
            'static_ip_address': str
        }

        self.attribute_map = {
            'l_b_backend_address_pool_ids': 'lBBackendAddressPoolIds',
            'public_ip_address_id': 'publicIpAddressId',
            'static_ip_address': 'staticIPAddress'
        }

        self._l_b_backend_address_pool_ids = l_b_backend_address_pool_ids
        self._public_ip_address_id = public_ip_address_id
        self._static_ip_address = static_ip_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPConfig of this IPConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def l_b_backend_address_pool_ids(self):
        """Gets the l_b_backend_address_pool_ids of this IPConfig.

        The backend address pools associated with the IP configuration.

        :return: The l_b_backend_address_pool_ids of this IPConfig.
        :rtype: List[str]
        """
        return self._l_b_backend_address_pool_ids

    @l_b_backend_address_pool_ids.setter
    def l_b_backend_address_pool_ids(self, l_b_backend_address_pool_ids):
        """Sets the l_b_backend_address_pool_ids of this IPConfig.

        The backend address pools associated with the IP configuration.

        :param l_b_backend_address_pool_ids: The l_b_backend_address_pool_ids of this IPConfig.
        :type l_b_backend_address_pool_ids: List[str]
        """

        self._l_b_backend_address_pool_ids = l_b_backend_address_pool_ids

    @property
    def public_ip_address_id(self):
        """Gets the public_ip_address_id of this IPConfig.

        The Id of the public IP address associated with the IP configuration.

        :return: The public_ip_address_id of this IPConfig.
        :rtype: str
        """
        return self._public_ip_address_id

    @public_ip_address_id.setter
    def public_ip_address_id(self, public_ip_address_id):
        """Sets the public_ip_address_id of this IPConfig.

        The Id of the public IP address associated with the IP configuration.

        :param public_ip_address_id: The public_ip_address_id of this IPConfig.
        :type public_ip_address_id: str
        """

        self._public_ip_address_id = public_ip_address_id

    @property
    def static_ip_address(self):
        """Gets the static_ip_address of this IPConfig.

        The static IP address of the IP configuration.

        :return: The static_ip_address of this IPConfig.
        :rtype: str
        """
        return self._static_ip_address

    @static_ip_address.setter
    def static_ip_address(self, static_ip_address):
        """Sets the static_ip_address of this IPConfig.

        The static IP address of the IP configuration.

        :param static_ip_address: The static_ip_address of this IPConfig.
        :type static_ip_address: str
        """

        self._static_ip_address = static_ip_address
