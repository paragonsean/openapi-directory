# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recovery_plan_provider_specific_failover_input import RecoveryPlanProviderSpecificFailoverInput
from openapi_server import util


class RecoveryPlanUnplannedFailoverInputProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failover_direction: str=None, provider_specific_details: List[RecoveryPlanProviderSpecificFailoverInput]=None, source_site_operations: str=None):
        """RecoveryPlanUnplannedFailoverInputProperties - a model defined in OpenAPI

        :param failover_direction: The failover_direction of this RecoveryPlanUnplannedFailoverInputProperties.
        :param provider_specific_details: The provider_specific_details of this RecoveryPlanUnplannedFailoverInputProperties.
        :param source_site_operations: The source_site_operations of this RecoveryPlanUnplannedFailoverInputProperties.
        """
        self.openapi_types = {
            'failover_direction': str,
            'provider_specific_details': List[RecoveryPlanProviderSpecificFailoverInput],
            'source_site_operations': str
        }

        self.attribute_map = {
            'failover_direction': 'failoverDirection',
            'provider_specific_details': 'providerSpecificDetails',
            'source_site_operations': 'sourceSiteOperations'
        }

        self._failover_direction = failover_direction
        self._provider_specific_details = provider_specific_details
        self._source_site_operations = source_site_operations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecoveryPlanUnplannedFailoverInputProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecoveryPlanUnplannedFailoverInputProperties of this RecoveryPlanUnplannedFailoverInputProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failover_direction(self):
        """Gets the failover_direction of this RecoveryPlanUnplannedFailoverInputProperties.

        The failover direction.

        :return: The failover_direction of this RecoveryPlanUnplannedFailoverInputProperties.
        :rtype: str
        """
        return self._failover_direction

    @failover_direction.setter
    def failover_direction(self, failover_direction):
        """Sets the failover_direction of this RecoveryPlanUnplannedFailoverInputProperties.

        The failover direction.

        :param failover_direction: The failover_direction of this RecoveryPlanUnplannedFailoverInputProperties.
        :type failover_direction: str
        """
        allowed_values = ["PrimaryToRecovery", "RecoveryToPrimary"]  # noqa: E501
        if failover_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `failover_direction` ({0}), must be one of {1}"
                .format(failover_direction, allowed_values)
            )

        self._failover_direction = failover_direction

    @property
    def provider_specific_details(self):
        """Gets the provider_specific_details of this RecoveryPlanUnplannedFailoverInputProperties.

        The provider specific properties.

        :return: The provider_specific_details of this RecoveryPlanUnplannedFailoverInputProperties.
        :rtype: List[RecoveryPlanProviderSpecificFailoverInput]
        """
        return self._provider_specific_details

    @provider_specific_details.setter
    def provider_specific_details(self, provider_specific_details):
        """Sets the provider_specific_details of this RecoveryPlanUnplannedFailoverInputProperties.

        The provider specific properties.

        :param provider_specific_details: The provider_specific_details of this RecoveryPlanUnplannedFailoverInputProperties.
        :type provider_specific_details: List[RecoveryPlanProviderSpecificFailoverInput]
        """

        self._provider_specific_details = provider_specific_details

    @property
    def source_site_operations(self):
        """Gets the source_site_operations of this RecoveryPlanUnplannedFailoverInputProperties.

        A value indicating whether source site operations are required.

        :return: The source_site_operations of this RecoveryPlanUnplannedFailoverInputProperties.
        :rtype: str
        """
        return self._source_site_operations

    @source_site_operations.setter
    def source_site_operations(self, source_site_operations):
        """Sets the source_site_operations of this RecoveryPlanUnplannedFailoverInputProperties.

        A value indicating whether source site operations are required.

        :param source_site_operations: The source_site_operations of this RecoveryPlanUnplannedFailoverInputProperties.
        :type source_site_operations: str
        """
        allowed_values = ["Required", "NotRequired"]  # noqa: E501
        if source_site_operations not in allowed_values:
            raise ValueError(
                "Invalid value for `source_site_operations` ({0}), must be one of {1}"
                .format(source_site_operations, allowed_values)
            )

        self._source_site_operations = source_site_operations
