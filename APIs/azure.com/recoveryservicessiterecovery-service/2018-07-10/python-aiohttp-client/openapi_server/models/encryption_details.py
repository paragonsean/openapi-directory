# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kek_cert_expiry_date: datetime=None, kek_cert_thumbprint: str=None, kek_state: str=None):
        """EncryptionDetails - a model defined in OpenAPI

        :param kek_cert_expiry_date: The kek_cert_expiry_date of this EncryptionDetails.
        :param kek_cert_thumbprint: The kek_cert_thumbprint of this EncryptionDetails.
        :param kek_state: The kek_state of this EncryptionDetails.
        """
        self.openapi_types = {
            'kek_cert_expiry_date': datetime,
            'kek_cert_thumbprint': str,
            'kek_state': str
        }

        self.attribute_map = {
            'kek_cert_expiry_date': 'kekCertExpiryDate',
            'kek_cert_thumbprint': 'kekCertThumbprint',
            'kek_state': 'kekState'
        }

        self._kek_cert_expiry_date = kek_cert_expiry_date
        self._kek_cert_thumbprint = kek_cert_thumbprint
        self._kek_state = kek_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionDetails of this EncryptionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kek_cert_expiry_date(self):
        """Gets the kek_cert_expiry_date of this EncryptionDetails.

        The key encryption key certificate expiry date.

        :return: The kek_cert_expiry_date of this EncryptionDetails.
        :rtype: datetime
        """
        return self._kek_cert_expiry_date

    @kek_cert_expiry_date.setter
    def kek_cert_expiry_date(self, kek_cert_expiry_date):
        """Sets the kek_cert_expiry_date of this EncryptionDetails.

        The key encryption key certificate expiry date.

        :param kek_cert_expiry_date: The kek_cert_expiry_date of this EncryptionDetails.
        :type kek_cert_expiry_date: datetime
        """

        self._kek_cert_expiry_date = kek_cert_expiry_date

    @property
    def kek_cert_thumbprint(self):
        """Gets the kek_cert_thumbprint of this EncryptionDetails.

        The key encryption key certificate thumbprint.

        :return: The kek_cert_thumbprint of this EncryptionDetails.
        :rtype: str
        """
        return self._kek_cert_thumbprint

    @kek_cert_thumbprint.setter
    def kek_cert_thumbprint(self, kek_cert_thumbprint):
        """Sets the kek_cert_thumbprint of this EncryptionDetails.

        The key encryption key certificate thumbprint.

        :param kek_cert_thumbprint: The kek_cert_thumbprint of this EncryptionDetails.
        :type kek_cert_thumbprint: str
        """

        self._kek_cert_thumbprint = kek_cert_thumbprint

    @property
    def kek_state(self):
        """Gets the kek_state of this EncryptionDetails.

        The key encryption key state for the Vmm.

        :return: The kek_state of this EncryptionDetails.
        :rtype: str
        """
        return self._kek_state

    @kek_state.setter
    def kek_state(self, kek_state):
        """Sets the kek_state of this EncryptionDetails.

        The key encryption key state for the Vmm.

        :param kek_state: The kek_state of this EncryptionDetails.
        :type kek_state: str
        """

        self._kek_state = kek_state
